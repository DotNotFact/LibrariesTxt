internal class ExcelNumberFormat.Color : object {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
internal static class ExcelNumberFormat.CompatibleConvert : object {
    public static string ToString(object value, IFormatProvider provider);
}
internal class ExcelNumberFormat.Condition : object {
    [CompilerGeneratedAttribute]
private string <Operator>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Value>k__BackingField;
    public string Operator { get; public set; }
    public double Value { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Operator();
    [CompilerGeneratedAttribute]
public void set_Operator(string value);
    [CompilerGeneratedAttribute]
public double get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(double value);
    public bool Evaluate(double lhs);
}
internal class ExcelNumberFormat.DecimalSection : object {
    [CompilerGeneratedAttribute]
private bool <ThousandSeparator>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ThousandDivisor>k__BackingField;
    [CompilerGeneratedAttribute]
private double <PercentMultiplier>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <BeforeDecimal>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DecimalSeparator>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <AfterDecimal>k__BackingField;
    public bool ThousandSeparator { get; public set; }
    public double ThousandDivisor { get; public set; }
    public double PercentMultiplier { get; public set; }
    public List`1<string> BeforeDecimal { get; public set; }
    public bool DecimalSeparator { get; public set; }
    public List`1<string> AfterDecimal { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ThousandSeparator();
    [CompilerGeneratedAttribute]
public void set_ThousandSeparator(bool value);
    [CompilerGeneratedAttribute]
public double get_ThousandDivisor();
    [CompilerGeneratedAttribute]
public void set_ThousandDivisor(double value);
    [CompilerGeneratedAttribute]
public double get_PercentMultiplier();
    [CompilerGeneratedAttribute]
public void set_PercentMultiplier(double value);
    [CompilerGeneratedAttribute]
public List`1<string> get_BeforeDecimal();
    [CompilerGeneratedAttribute]
public void set_BeforeDecimal(List`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_DecimalSeparator();
    [CompilerGeneratedAttribute]
public void set_DecimalSeparator(bool value);
    [CompilerGeneratedAttribute]
public List`1<string> get_AfterDecimal();
    [CompilerGeneratedAttribute]
public void set_AfterDecimal(List`1<string> value);
    public static bool TryParse(List`1<string> tokens, DecimalSection& format);
    private static double GetPercentMultiplier(List`1<string> tokens);
    private static double GetTrailingCommasDivisor(List`1<string> tokens, Boolean& thousandSeparator);
}
internal static class ExcelNumberFormat.Evaluator : object {
    public static Section GetSection(List`1<Section> sections, object value);
    public static Section GetFirstSection(List`1<Section> sections, SectionType type);
    private static Section GetNumericSection(List`1<Section> sections, double value);
}
internal class ExcelNumberFormat.ExcelDateTime : object {
    [CompilerGeneratedAttribute]
private DateTime <AdjustedDateTime>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AdjustDaysPost>k__BackingField;
    private static DateTime Excel1900LeapMinDate;
    private static DateTime Excel1900LeapMaxDate;
    private static DateTime Excel1900ZeroethMinDate;
    private static DateTime Excel1900ZeroethMaxDate;
    private static long TicksPerMillisecond;
    private static long TicksPerSecond;
    private static long TicksPerMinute;
    private static long TicksPerHour;
    private static long TicksPerDay;
    private static int MillisPerSecond;
    private static int MillisPerMinute;
    private static int MillisPerHour;
    private static int MillisPerDay;
    private static int DaysPerYear;
    private static int DaysPer4Years;
    private static int DaysPer100Years;
    private static int DaysPer400Years;
    private static int DaysTo1899;
    private static long DoubleDateOffset;
    public DateTime AdjustedDateTime { get; }
    public int AdjustDaysPost { get; }
    public int Year { get; }
    public int Month { get; }
    public int Day { get; }
    public int Hour { get; }
    public int Minute { get; }
    public int Second { get; }
    public int Millisecond { get; }
    public DayOfWeek DayOfWeek { get; }
    public ExcelDateTime(double numericDate, bool isDate1904);
    public ExcelDateTime(DateTime value);
    private static ExcelDateTime();
    [CompilerGeneratedAttribute]
public DateTime get_AdjustedDateTime();
    [CompilerGeneratedAttribute]
public int get_AdjustDaysPost();
    public int get_Year();
    public int get_Month();
    public int get_Day();
    public int get_Hour();
    public int get_Minute();
    public int get_Second();
    public int get_Millisecond();
    public DayOfWeek get_DayOfWeek();
    public string ToString(string numberFormat, CultureInfo culture);
    public static bool TryConvert(object value, bool isDate1904, CultureInfo culture, ExcelDateTime& result);
    internal static long DoubleDateToTicks(double value);
}
internal class ExcelNumberFormat.ExponentialSection : object {
    [CompilerGeneratedAttribute]
private List`1<string> <BeforeDecimal>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DecimalSeparator>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <AfterDecimal>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExponentialToken>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Power>k__BackingField;
    public List`1<string> BeforeDecimal { get; public set; }
    public bool DecimalSeparator { get; public set; }
    public List`1<string> AfterDecimal { get; public set; }
    public string ExponentialToken { get; public set; }
    public List`1<string> Power { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<string> get_BeforeDecimal();
    [CompilerGeneratedAttribute]
public void set_BeforeDecimal(List`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_DecimalSeparator();
    [CompilerGeneratedAttribute]
public void set_DecimalSeparator(bool value);
    [CompilerGeneratedAttribute]
public List`1<string> get_AfterDecimal();
    [CompilerGeneratedAttribute]
public void set_AfterDecimal(List`1<string> value);
    [CompilerGeneratedAttribute]
public string get_ExponentialToken();
    [CompilerGeneratedAttribute]
public void set_ExponentialToken(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Power();
    [CompilerGeneratedAttribute]
public void set_Power(List`1<string> value);
    public static bool TryParse(List`1<string> tokens, ExponentialSection& format);
}
internal static class ExcelNumberFormat.Formatter : object {
    public static string Format(object value, string formatString, CultureInfo culture, bool isDate1904);
    public static string Format(object value, Section node, CultureInfo culture, bool isDate1904);
    private static string FormatGeneralText(string text, List`1<string> tokens);
    private static string FormatTimeSpan(TimeSpan timeSpan, List`1<string> tokens, CultureInfo culture);
    private static string FormatDate(ExcelDateTime date, List`1<string> tokens, CultureInfo culture);
    private static bool LookAheadDatePart(List`1<string> tokens, int fromIndex, string startsWith);
    private static bool LookBackDatePart(List`1<string> tokens, int fromIndex, string startsWith);
    private static bool ContainsAmPm(List`1<string> tokens);
    private static string FormatNumber(double value, DecimalSection format, CultureInfo culture);
    private static void FormatNumber(double value, List`1<string> beforeDecimal, bool decimalSeparator, List`1<string> afterDecimal, bool thousandSeparator, CultureInfo culture, StringBuilder result);
    public static void FormatThousands(string valueString, bool thousandSeparator, bool significantZero, List`1<string> tokens, CultureInfo culture, StringBuilder result);
    private static void FormatThousandSeparator(string valueString, int digit, CultureInfo culture, StringBuilder result);
    public static void FormatDecimals(string valueString, List`1<string> tokens, StringBuilder result);
    private static string FormatExponential(double value, Section format, CultureInfo culture);
    private static string FormatFraction(double value, Section format, CultureInfo culture);
    private static void GetFraction(double x, int D, Int32& nom, Int32& den);
    public static void FormatDenominator(string valueString, List`1<string> tokens, StringBuilder result);
    private static char GetLeftAlignedValueDigit(string token, string valueString, int startIndex, bool significant, Int32& valueIndex);
    private static void FormatPlaceholder(string token, char c, bool significant, StringBuilder result);
    private static int GetDigitCount(List`1<string> tokens);
    private static int GetZeroCount(List`1<string> tokens);
    private static void FormatLiteral(string token, StringBuilder result);
}
internal class ExcelNumberFormat.FractionSection : object {
    [CompilerGeneratedAttribute]
private List`1<string> <IntegerPart>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Numerator>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <DenominatorPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Denominator>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DenominatorConstant>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <DenominatorSuffix>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <FractionSuffix>k__BackingField;
    public List`1<string> IntegerPart { get; public set; }
    public List`1<string> Numerator { get; public set; }
    public List`1<string> DenominatorPrefix { get; public set; }
    public List`1<string> Denominator { get; public set; }
    public int DenominatorConstant { get; public set; }
    public List`1<string> DenominatorSuffix { get; public set; }
    public List`1<string> FractionSuffix { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<string> get_IntegerPart();
    [CompilerGeneratedAttribute]
public void set_IntegerPart(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Numerator();
    [CompilerGeneratedAttribute]
public void set_Numerator(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_DenominatorPrefix();
    [CompilerGeneratedAttribute]
public void set_DenominatorPrefix(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Denominator();
    [CompilerGeneratedAttribute]
public void set_Denominator(List`1<string> value);
    [CompilerGeneratedAttribute]
public int get_DenominatorConstant();
    [CompilerGeneratedAttribute]
public void set_DenominatorConstant(int value);
    [CompilerGeneratedAttribute]
public List`1<string> get_DenominatorSuffix();
    [CompilerGeneratedAttribute]
public void set_DenominatorSuffix(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_FractionSuffix();
    [CompilerGeneratedAttribute]
public void set_FractionSuffix(List`1<string> value);
    public static bool TryParse(List`1<string> tokens, FractionSection& format);
    private static void GetNumerator(List`1<string> tokens, List`1& integerPart, List`1& numeratorPart);
    private static bool TryGetDenominator(List`1<string> tokens, List`1& denominatorPrefix, List`1& denominatorPart, Int32& denominatorConstant, List`1& denominatorSuffix, List`1& fractionSuffix);
}
public class ExcelNumberFormat.NumberFormat : object {
    [CompilerGeneratedAttribute]
private bool <IsValid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FormatString>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDateTimeFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTimeSpanFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Section> <Sections>k__BackingField;
    public bool IsValid { get; }
    public string FormatString { get; }
    public bool IsDateTimeFormat { get; }
    public bool IsTimeSpanFormat { get; }
    internal List`1<Section> Sections { get; }
    public NumberFormat(string formatString);
    [CompilerGeneratedAttribute]
public bool get_IsValid();
    [CompilerGeneratedAttribute]
public string get_FormatString();
    [CompilerGeneratedAttribute]
public bool get_IsDateTimeFormat();
    [CompilerGeneratedAttribute]
public bool get_IsTimeSpanFormat();
    [CompilerGeneratedAttribute]
internal List`1<Section> get_Sections();
    public string Format(object value, CultureInfo culture, bool isDate1904);
}
internal static class ExcelNumberFormat.Parser : object {
    public static List`1<Section> ParseSections(string formatString, Boolean& syntaxError);
    private static Section ParseSection(Tokenizer reader, int index, Boolean& syntaxError);
    internal static int ParseNumberTokens(List`1<string> tokens, int startPosition, List`1& beforeDecimal, Boolean& decimalSeparator, List`1& afterDecimal);
    private static void ParseMilliseconds(List`1<string> tokens, List`1& result);
    private static string ReadToken(Tokenizer reader, Boolean& syntaxError);
    private static bool ReadLiteral(Tokenizer reader);
    private static bool TryParseCondition(string token, Condition& result);
    private static bool ReadConditionValue(Tokenizer tokenizer);
    private static bool TryParseColor(string token, Color& color);
    private static bool TryParseCurrencySymbol(string token, String& currencySymbol);
}
internal class ExcelNumberFormat.Section : object {
    [CompilerGeneratedAttribute]
private int <SectionIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private SectionType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private Condition <Condition>k__BackingField;
    [CompilerGeneratedAttribute]
private ExponentialSection <Exponential>k__BackingField;
    [CompilerGeneratedAttribute]
private FractionSection <Fraction>k__BackingField;
    [CompilerGeneratedAttribute]
private DecimalSection <Number>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <GeneralTextDateDurationParts>k__BackingField;
    public int SectionIndex { get; public set; }
    public SectionType Type { get; public set; }
    public Color Color { get; public set; }
    public Condition Condition { get; public set; }
    public ExponentialSection Exponential { get; public set; }
    public FractionSection Fraction { get; public set; }
    public DecimalSection Number { get; public set; }
    public List`1<string> GeneralTextDateDurationParts { get; public set; }
    [CompilerGeneratedAttribute]
public int get_SectionIndex();
    [CompilerGeneratedAttribute]
public void set_SectionIndex(int value);
    [CompilerGeneratedAttribute]
public SectionType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(SectionType value);
    [CompilerGeneratedAttribute]
public Color get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(Color value);
    [CompilerGeneratedAttribute]
public Condition get_Condition();
    [CompilerGeneratedAttribute]
public void set_Condition(Condition value);
    [CompilerGeneratedAttribute]
public ExponentialSection get_Exponential();
    [CompilerGeneratedAttribute]
public void set_Exponential(ExponentialSection value);
    [CompilerGeneratedAttribute]
public FractionSection get_Fraction();
    [CompilerGeneratedAttribute]
public void set_Fraction(FractionSection value);
    [CompilerGeneratedAttribute]
public DecimalSection get_Number();
    [CompilerGeneratedAttribute]
public void set_Number(DecimalSection value);
    [CompilerGeneratedAttribute]
public List`1<string> get_GeneralTextDateDurationParts();
    [CompilerGeneratedAttribute]
public void set_GeneralTextDateDurationParts(List`1<string> value);
}
internal enum ExcelNumberFormat.SectionType : Enum {
    public int value__;
    public static SectionType General;
    public static SectionType Number;
    public static SectionType Fraction;
    public static SectionType Exponential;
    public static SectionType Date;
    public static SectionType Duration;
    public static SectionType Text;
}
internal static class ExcelNumberFormat.Token : object {
    public static bool IsExponent(string token);
    public static bool IsLiteral(string token);
    public static bool IsNumberLiteral(string token);
    public static bool IsPlaceholder(string token);
    public static bool IsGeneral(string token);
    public static bool IsDatePart(string token);
    public static bool IsDurationPart(string token);
    public static bool IsDigit09(string token);
    public static bool IsDigit19(string token);
}
internal class ExcelNumberFormat.Tokenizer : object {
    private string formatString;
    private int formatStringPosition;
    public int Position { get; }
    public int Length { get; }
    public Tokenizer(string fmt);
    public int get_Position();
    public int get_Length();
    public string Substring(int startIndex, int length);
    public int Peek(int offset);
    public int PeekUntil(int startOffset, int until);
    public bool PeekOneOf(int offset, string s);
    public void Advance(int characters);
    public bool ReadOneOrMore(int c);
    public bool ReadOneOf(string s);
    public bool ReadString(string s, bool ignoreCase);
    public bool ReadEnclosed(char open, char close);
}
