[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
internal class UglyToad.PdfPig.Tokenization.ArrayTokenizer : object {
    [CompilerGeneratedAttribute]
private bool <ReadsNextByte>k__BackingField;
    public bool ReadsNextByte { get; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ReadsNextByte();
    public sealed virtual bool TryTokenize(byte currentByte, IInputBytes inputBytes, IToken& token);
    private static bool CurrentByteEndsCurrentArray(IInputBytes inputBytes, IToken previousToken);
}
internal class UglyToad.PdfPig.Tokenization.CommentTokenizer : object {
    [CompilerGeneratedAttribute]
private bool <ReadsNextByte>k__BackingField;
    public bool ReadsNextByte { get; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ReadsNextByte();
    public sealed virtual bool TryTokenize(byte currentByte, IInputBytes inputBytes, IToken& token);
}
internal class UglyToad.PdfPig.Tokenization.DictionaryTokenizer : object {
    private IReadOnlyList`1<NameToken> requiredKeys;
    [CompilerGeneratedAttribute]
private bool <ReadsNextByte>k__BackingField;
    public bool ReadsNextByte { get; }
    public DictionaryTokenizer(IReadOnlyList`1<NameToken> requiredKeys);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ReadsNextByte();
    public sealed virtual bool TryTokenize(byte currentByte, IInputBytes inputBytes, IToken& token);
    private bool TryTokenizeInternal(byte currentByte, IInputBytes inputBytes, bool useRequiredKeys, IToken& token);
    private static Dictionary`2<NameToken, IToken> ConvertToDictionary(List`1<IToken> tokens);
    private static IToken PeekNext(IReadOnlyList`1<IToken> tokens, int currentIndex);
}
public class UglyToad.PdfPig.Tokenization.EndOfLineTokenizer : object {
    [CompilerGeneratedAttribute]
private bool <ReadsNextByte>k__BackingField;
    public bool ReadsNextByte { get; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ReadsNextByte();
    public sealed virtual bool TryTokenize(byte currentByte, IInputBytes inputBytes, IToken& token);
}
internal class UglyToad.PdfPig.Tokenization.HexTokenizer : object {
    [CompilerGeneratedAttribute]
private bool <ReadsNextByte>k__BackingField;
    public bool ReadsNextByte { get; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ReadsNextByte();
    public sealed virtual bool TryTokenize(byte currentByte, IInputBytes inputBytes, IToken& token);
    private static bool IsValidHexCharacter(byte b);
}
public interface UglyToad.PdfPig.Tokenization.ITokenizer {
    public bool ReadsNextByte { get; }
    public abstract virtual bool get_ReadsNextByte();
    public abstract virtual bool TryTokenize(byte currentByte, IInputBytes inputBytes, IToken& token);
}
public class UglyToad.PdfPig.Tokenization.ListPool`1 : object {
    private int capacity;
    private object locker;
    private Stack`1<List`1<T>> pool;
    public ListPool`1(int capacity);
    public List`1<T> Borrow();
    public void Return(List`1<T> instance);
}
internal class UglyToad.PdfPig.Tokenization.NameTokenizer : object {
    private static ListPool`1<byte> ListPool;
    [CompilerGeneratedAttribute]
private bool <ReadsNextByte>k__BackingField;
    public bool ReadsNextByte { get; }
    private static NameTokenizer();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ReadsNextByte();
    public sealed virtual bool TryTokenize(byte currentByte, IInputBytes inputBytes, IToken& token);
}
internal class UglyToad.PdfPig.Tokenization.NumericTokenizer : object {
    private StringBuilder stringBuilder;
    private static byte Zero;
    private static byte Nine;
    [CompilerGeneratedAttribute]
private bool <ReadsNextByte>k__BackingField;
    public bool ReadsNextByte { get; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ReadsNextByte();
    public sealed virtual bool TryTokenize(byte currentByte, IInputBytes inputBytes, IToken& token);
    private static bool TryParseInvalidNumber(string numeric, Decimal& result);
}
internal class UglyToad.PdfPig.Tokenization.PlainTokenizer : object {
    private StringBuilder stringBuilder;
    [CompilerGeneratedAttribute]
private bool <ReadsNextByte>k__BackingField;
    public bool ReadsNextByte { get; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ReadsNextByte();
    public sealed virtual bool TryTokenize(byte currentByte, IInputBytes inputBytes, IToken& token);
}
public class UglyToad.PdfPig.Tokenization.Scanner.CoreTokenScanner : object {
    private static ArrayTokenizer ArrayTokenizer;
    private static CommentTokenizer CommentTokenizer;
    private static DictionaryTokenizer DictionaryTokenizer;
    private static HexTokenizer HexTokenizer;
    private static NameTokenizer NameTokenizer;
    private PlainTokenizer PlainTokenizer;
    private NumericTokenizer NumericTokenizer;
    private StringTokenizer StringTokenizer;
    private ScannerScope scope;
    private IReadOnlyDictionary`2<NameToken, IReadOnlyList`1<NameToken>> namedDictionaryRequiredKeys;
    private IInputBytes inputBytes;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<ValueTuple`2<byte, ITokenizer>> customTokenizers;
    [CompilerGeneratedAttribute]
private long <CurrentTokenStart>k__BackingField;
    [CompilerGeneratedAttribute]
private IToken <CurrentToken>k__BackingField;
    private bool hasBytePreRead;
    private bool isInInlineImage;
    public long CurrentTokenStart { get; private set; }
    public IToken CurrentToken { get; private set; }
    public long CurrentPosition { get; }
    public long Length { get; }
    public CoreTokenScanner(IInputBytes inputBytes, ScannerScope scope, IReadOnlyDictionary`2<NameToken, IReadOnlyList`1<NameToken>> namedDictionaryRequiredKeys);
    private static CoreTokenScanner();
    [CompilerGeneratedAttribute]
public long get_CurrentTokenStart();
    [CompilerGeneratedAttribute]
private void set_CurrentTokenStart(long value);
    [CompilerGeneratedAttribute]
public sealed virtual IToken get_CurrentToken();
    [CompilerGeneratedAttribute]
private void set_CurrentToken(IToken value);
    public sealed virtual long get_CurrentPosition();
    public sealed virtual long get_Length();
    public sealed virtual bool TryReadToken(T& token);
    public sealed virtual void Seek(long position);
    public sealed virtual bool MoveNext();
    public sealed virtual void RegisterCustomTokenizer(byte firstByte, ITokenizer tokenizer);
    public sealed virtual void DeregisterCustomTokenizer(ITokenizer tokenizer);
    public IReadOnlyList`1<byte> RecoverFromIncorrectEndImage(long lastEndImageOffset);
    private IReadOnlyList`1<byte> ReadInlineImageData();
    private List`1<byte> ReadUntilEndImage(long startsAt);
}
public interface UglyToad.PdfPig.Tokenization.Scanner.ISeekableTokenScanner {
    public long CurrentPosition { get; }
    public long Length { get; }
    public abstract virtual void Seek(long position);
    public abstract virtual long get_CurrentPosition();
    public abstract virtual long get_Length();
    public abstract virtual void RegisterCustomTokenizer(byte firstByte, ITokenizer tokenizer);
    public abstract virtual void DeregisterCustomTokenizer(ITokenizer tokenizer);
}
public interface UglyToad.PdfPig.Tokenization.Scanner.ITokenScanner {
    public IToken CurrentToken { get; }
    public abstract virtual bool MoveNext();
    public abstract virtual IToken get_CurrentToken();
    public abstract virtual bool TryReadToken(T& token);
}
public enum UglyToad.PdfPig.Tokenization.Scanner.ScannerScope : Enum {
    public int value__;
    public static ScannerScope None;
    public static ScannerScope Array;
    public static ScannerScope Dictionary;
}
internal class UglyToad.PdfPig.Tokenization.StringBuilderPool : object {
    private int capacity;
    private object locker;
    private Stack`1<StringBuilder> pool;
    public StringBuilderPool(int capacity);
    public StringBuilder Borrow();
    public void Return(StringBuilder instance);
}
internal class UglyToad.PdfPig.Tokenization.StringTokenizer : object {
    private StringBuilder stringBuilder;
    [CompilerGeneratedAttribute]
private bool <ReadsNextByte>k__BackingField;
    public bool ReadsNextByte { get; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ReadsNextByte();
    public sealed virtual bool TryTokenize(byte currentByte, IInputBytes inputBytes, IToken& token);
    private static void LeftShiftOctal(char nextOctalChar, int octalsRead, Int16[] octals);
    private static void ProcessEscapedCharacter(char c, StringBuilder builder, Int16[] octal, Boolean& isOctalActive, Int32& octalsRead, Boolean& isLineBreaking);
    private static int CheckForEndOfString(int numberOfBrackets, IInputBytes bytes);
}
