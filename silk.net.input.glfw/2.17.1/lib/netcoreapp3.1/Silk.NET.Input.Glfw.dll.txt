[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal class Silk.NET.Input.Glfw.GlfwCursor : object {
    [NullableAttribute("1")]
private static Dictionary`2<StandardCursor, CursorShape> _cursorShapes;
    private static int BytesPerCursorPixel;
    private WindowHandle* _handle;
    private Cursor* _cursor;
    private CursorType _cursorType;
    private StandardCursor _standardCursor;
    private int _hotspotX;
    private int _hotspotY;
    private RawImage _image;
    public CursorType Type { get; public set; }
    public StandardCursor StandardCursor { get; public set; }
    public CursorMode CursorMode { get; public set; }
    public bool IsConfined { get; public set; }
    public int HotspotX { get; public set; }
    public int HotspotY { get; public set; }
    public RawImage Image { get; public set; }
    internal GlfwCursor(WindowHandle* handle);
    private static GlfwCursor();
    public sealed virtual CursorType get_Type();
    public sealed virtual void set_Type(CursorType value);
    public sealed virtual StandardCursor get_StandardCursor();
    public sealed virtual void set_StandardCursor(StandardCursor value);
    public sealed virtual CursorMode get_CursorMode();
    public sealed virtual void set_CursorMode(CursorMode value);
    public sealed virtual bool get_IsConfined();
    public sealed virtual void set_IsConfined(bool value);
    public sealed virtual int get_HotspotX();
    public sealed virtual void set_HotspotX(int value);
    public sealed virtual int get_HotspotY();
    public sealed virtual void set_HotspotY(int value);
    public sealed virtual RawImage get_Image();
    public sealed virtual void set_Image(RawImage value);
    public sealed virtual bool IsSupported(CursorMode mode);
    public sealed virtual bool IsSupported(StandardCursor standardCursor);
    public sealed virtual void Dispose();
    private Cursor* GetStandardCursor();
    private Cursor* CreateCustomCursor();
    private void UpdateStandardCursor();
    private void UpdateCustomCursor();
    private static CursorModeValue GetCursorMode(CursorMode cursorMode, Boolean& raw);
    private static CursorMode GetCursorMode(CursorModeValue cursorMode, bool raw);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Silk.NET.Input.Glfw.GlfwEvents : object {
    [NullableAttribute("0")]
[CompilerGeneratedAttribute]
private WindowHandle* <Handle>k__BackingField;
    [CompilerGeneratedAttribute]
private KeyCallback Key;
    [CompilerGeneratedAttribute]
private CharCallback Char;
    [CompilerGeneratedAttribute]
private MouseButtonCallback MouseButton;
    [CompilerGeneratedAttribute]
private CursorEnterCallback CursorEnter;
    [CompilerGeneratedAttribute]
private CursorPosCallback CursorPos;
    [CompilerGeneratedAttribute]
private ScrollCallback Scroll;
    [NullableAttribute("0")]
public WindowHandle* Handle { get; }
    [NullableContextAttribute("0")]
public GlfwEvents(WindowHandle* handle);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public WindowHandle* get_Handle();
    [CompilerGeneratedAttribute]
public void add_Key(KeyCallback value);
    [CompilerGeneratedAttribute]
public void remove_Key(KeyCallback value);
    [CompilerGeneratedAttribute]
public void add_Char(CharCallback value);
    [CompilerGeneratedAttribute]
public void remove_Char(CharCallback value);
    [CompilerGeneratedAttribute]
public void add_MouseButton(MouseButtonCallback value);
    [CompilerGeneratedAttribute]
public void remove_MouseButton(MouseButtonCallback value);
    [CompilerGeneratedAttribute]
public void add_CursorEnter(CursorEnterCallback value);
    [CompilerGeneratedAttribute]
public void remove_CursorEnter(CursorEnterCallback value);
    [CompilerGeneratedAttribute]
public void add_CursorPos(CursorPosCallback value);
    [CompilerGeneratedAttribute]
public void remove_CursorPos(CursorPosCallback value);
    [CompilerGeneratedAttribute]
public void add_Scroll(ScrollCallback value);
    [CompilerGeneratedAttribute]
public void remove_Scroll(ScrollCallback value);
    public sealed virtual void Dispose();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <.ctor>b__0_0(WindowHandle* a, UInt32 b);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <.ctor>b__0_1(WindowHandle* a, Keys b, int c, InputAction d, KeyModifiers e);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <.ctor>b__0_2(WindowHandle* a, MouseButton b, InputAction c, KeyModifiers d);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <.ctor>b__0_3(WindowHandle* a, bool b);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <.ctor>b__0_4(WindowHandle* a, double b, double c);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <.ctor>b__0_5(WindowHandle* a, double b, double c);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Silk.NET.Input.Glfw.GlfwGamepad : object {
    private static int GamepadButtonCount;
    private static int GamepadThumbstickCount;
    private static int GamepadTriggerCount;
    private bool _connected;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Button> <Buttons>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Thumbstick> <Thumbsticks>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Trigger> <Triggers>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<IMotor> <VibrationMotors>k__BackingField;
    [CompilerGeneratedAttribute]
private Deadzone <Deadzone>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`2<IGamepad, Button> ButtonDown;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`2<IGamepad, Button> ButtonUp;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`2<IGamepad, Thumbstick> ThumbstickMoved;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`2<IGamepad, Trigger> TriggerMoved;
    [CompilerGeneratedAttribute]
private Action`2<IInputDevice, bool> <OnConnectionChanged>k__BackingField;
    public string Name { get; }
    public int Index { get; }
    public bool IsConnected { get; }
    public IReadOnlyList`1<Button> Buttons { get; }
    public IReadOnlyList`1<Thumbstick> Thumbsticks { get; }
    public IReadOnlyList`1<Trigger> Triggers { get; }
    public IReadOnlyList`1<IMotor> VibrationMotors { get; }
    public Deadzone Deadzone { get; public set; }
    public Action`2<IInputDevice, bool> OnConnectionChanged { get; public set; }
    public GlfwGamepad(int i);
    public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Index();
    public sealed virtual bool get_IsConnected();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<Button> get_Buttons();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<Thumbstick> get_Thumbsticks();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<Trigger> get_Triggers();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<IMotor> get_VibrationMotors();
    [CompilerGeneratedAttribute]
public sealed virtual Deadzone get_Deadzone();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Deadzone(Deadzone value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ButtonDown(Action`2<IGamepad, Button> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ButtonDown(Action`2<IGamepad, Button> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ButtonUp(Action`2<IGamepad, Button> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ButtonUp(Action`2<IGamepad, Button> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ThumbstickMoved(Action`2<IGamepad, Thumbstick> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ThumbstickMoved(Action`2<IGamepad, Thumbstick> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TriggerMoved(Action`2<IGamepad, Trigger> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TriggerMoved(Action`2<IGamepad, Trigger> value);
    public void Update();
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
public Action`2<IInputDevice, bool> get_OnConnectionChanged();
    [CompilerGeneratedAttribute]
public void set_OnConnectionChanged(Action`2<IInputDevice, bool> value);
}
public static class Silk.NET.Input.Glfw.GlfwInput : object {
    public static void RegisterPlatform();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Silk.NET.Input.Glfw.GlfwInputContext : InputContextImplementationBase {
    private GlfwGamepad[] _gamepads;
    private GlfwJoystick[] _joysticks;
    private GlfwKeyboard[] _keyboards;
    private GlfwMouse[] _mice;
    private IGlfwSubscriber[] _subscribers;
    [NativeIntegerAttribute]
[CompilerGeneratedAttribute]
private IntPtr <Handle>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<IGamepad> <Gamepads>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<IJoystick> <Joysticks>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<IKeyboard> <Keyboards>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<IMouse> <Mice>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<IInputDevice> <OtherDevices>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`2<IInputDevice, bool> ConnectionChanged;
    [NativeIntegerAttribute]
public IntPtr Handle { get; }
    public IReadOnlyList`1<IGamepad> Gamepads { get; }
    public IReadOnlyList`1<IJoystick> Joysticks { get; }
    public IReadOnlyList`1<IKeyboard> Keyboards { get; }
    public IReadOnlyList`1<IMouse> Mice { get; }
    public IReadOnlyList`1<IInputDevice> OtherDevices { get; }
    public GlfwInputContext(IView window);
    public virtual void ProcessEvents();
    public virtual void CoreDispose();
    [CompilerGeneratedAttribute]
public sealed virtual IntPtr get_Handle();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<IGamepad> get_Gamepads();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<IJoystick> get_Joysticks();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<IKeyboard> get_Keyboards();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<IMouse> get_Mice();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<IInputDevice> get_OtherDevices();
    [CompilerGeneratedAttribute]
public virtual void add_ConnectionChanged(Action`2<IInputDevice, bool> value);
    [CompilerGeneratedAttribute]
public virtual void remove_ConnectionChanged(Action`2<IInputDevice, bool> value);
    [CompilerGeneratedAttribute]
private void <.ctor>g__OnConnectionChanged|5_0(IInputDevice a, bool b);
}
internal class Silk.NET.Input.Glfw.GlfwInputPlatform : object {
    [NativeIntegerAttribute]
[NullableAttribute("1")]
private static Dictionary`2<IntPtr, GlfwEvents> _subs;
    private static GlfwInputPlatform();
    [NullableContextAttribute("1")]
public sealed virtual bool IsApplicable(IView window);
    [NullableContextAttribute("1")]
public sealed virtual IInputContext CreateInput(IView window);
    internal static void RegisterWindow(WindowHandle* handle, IEnumerable`1<IGlfwSubscriber> subscribers);
    internal static void UnregisterWindow(WindowHandle* handle, IEnumerable`1<IGlfwSubscriber> subscribers);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Silk.NET.Input.Glfw.GlfwJoystick : object {
    private bool _connected;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Axis> <Axes>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Button> <Buttons>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Hat> <Hats>k__BackingField;
    [CompilerGeneratedAttribute]
private Deadzone <Deadzone>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`2<IJoystick, Button> ButtonDown;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`2<IJoystick, Button> ButtonUp;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`2<IJoystick, Axis> AxisMoved;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`2<IJoystick, Hat> HatMoved;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`2<IInputDevice, bool> <OnConnectionChanged>k__BackingField;
    public string Name { get; }
    public int Index { get; }
    public bool IsConnected { get; }
    public IReadOnlyList`1<Axis> Axes { get; private set; }
    public IReadOnlyList`1<Button> Buttons { get; private set; }
    public IReadOnlyList`1<Hat> Hats { get; private set; }
    public Deadzone Deadzone { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`2<IInputDevice, bool> OnConnectionChanged { get; public set; }
    public GlfwJoystick(int i);
    public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Index();
    public sealed virtual bool get_IsConnected();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<Axis> get_Axes();
    [CompilerGeneratedAttribute]
private void set_Axes(IReadOnlyList`1<Axis> value);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<Button> get_Buttons();
    [CompilerGeneratedAttribute]
private void set_Buttons(IReadOnlyList`1<Button> value);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<Hat> get_Hats();
    [CompilerGeneratedAttribute]
private void set_Hats(IReadOnlyList`1<Hat> value);
    [CompilerGeneratedAttribute]
public sealed virtual Deadzone get_Deadzone();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Deadzone(Deadzone value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ButtonDown(Action`2<IJoystick, Button> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ButtonDown(Action`2<IJoystick, Button> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ButtonUp(Action`2<IJoystick, Button> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ButtonUp(Action`2<IJoystick, Button> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_AxisMoved(Action`2<IJoystick, Axis> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_AxisMoved(Action`2<IJoystick, Axis> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_HatMoved(Action`2<IJoystick, Hat> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_HatMoved(Action`2<IJoystick, Hat> value);
    public void Update();
    public void EnsureAxesSize(int count);
    public void EnsureButtonSize(int count);
    public void EnsureHatSize(int count);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
public Action`2<IInputDevice, bool> get_OnConnectionChanged();
    [CompilerGeneratedAttribute]
public void set_OnConnectionChanged(Action`2<IInputDevice, bool> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Silk.NET.Input.Glfw.GlfwKeyboard : object {
    private static Key[] _keys;
    [NullableAttribute("0")]
private WindowHandle* _handle;
    [NullableAttribute("2")]
private CharCallback _char;
    [NullableAttribute("2")]
private KeyCallback _key;
    private List`1<int> _scancodesDown;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsConnected>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Key> <SupportedKeys>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`3<IKeyboard, Key, int> KeyDown;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`3<IKeyboard, Key, int> KeyUp;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`2<IKeyboard, char> KeyChar;
    public string Name { get; }
    public int Index { get; }
    public bool IsConnected { get; }
    public IReadOnlyList`1<Key> SupportedKeys { get; }
    public string ClipboardText { get; public set; }
    private static GlfwKeyboard();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Index();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsConnected();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<Key> get_SupportedKeys();
    public sealed virtual string get_ClipboardText();
    public sealed virtual void set_ClipboardText(string value);
    public sealed virtual bool IsKeyPressed(Key key);
    public sealed virtual bool IsScancodePressed(int scancode);
    [CompilerGeneratedAttribute]
public sealed virtual void add_KeyDown(Action`3<IKeyboard, Key, int> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_KeyDown(Action`3<IKeyboard, Key, int> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_KeyUp(Action`3<IKeyboard, Key, int> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_KeyUp(Action`3<IKeyboard, Key, int> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_KeyChar(Action`2<IKeyboard, char> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_KeyChar(Action`2<IKeyboard, char> value);
    public sealed virtual void BeginInput();
    public sealed virtual void EndInput();
    public sealed virtual void Subscribe(GlfwEvents events);
    public sealed virtual void Unsubscribe(GlfwEvents events);
    private static Key ConvertKey(Keys keys);
    private static Keys ConvertKey(Key keys);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <Subscribe>b__33_0(WindowHandle* _, UInt32 c);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <Subscribe>b__33_1(WindowHandle* _, Keys key, int code, InputAction action, KeyModifiers mods);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Silk.NET.Input.Glfw.GlfwMouse : MouseImplementationBase {
    private static MouseButton[] _buttons;
    [NullableAttribute("0")]
private WindowHandle* _handle;
    [NullableAttribute("2")]
private ScrollCallback _scroll;
    [NullableAttribute("2")]
private CursorPosCallback _cursorPos;
    [NullableAttribute("2")]
private MouseButtonCallback _mouseButton;
    private bool _scrollModified;
    [NullableAttribute("2")]
private ICursor _cursor;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsConnected>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<MouseButton> <SupportedButtons>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<ScrollWheel> <ScrollWheels>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`2<IMouse, Vector2> MouseMove;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`2<IMouse, ScrollWheel> Scroll;
    public string Name { get; }
    public int Index { get; }
    public bool IsConnected { get; }
    public IReadOnlyList`1<MouseButton> SupportedButtons { get; }
    public IReadOnlyList`1<ScrollWheel> ScrollWheels { get; }
    public Vector2 Position { get; public set; }
    public ICursor Cursor { get; }
    private static GlfwMouse();
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual int get_Index();
    [CompilerGeneratedAttribute]
public virtual bool get_IsConnected();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<MouseButton> get_SupportedButtons();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<ScrollWheel> get_ScrollWheels();
    public virtual Vector2 get_Position();
    public virtual void set_Position(Vector2 value);
    public virtual ICursor get_Cursor();
    public virtual bool IsButtonPressed(MouseButton button);
    [CompilerGeneratedAttribute]
public virtual void add_MouseMove(Action`2<IMouse, Vector2> value);
    [CompilerGeneratedAttribute]
public virtual void remove_MouseMove(Action`2<IMouse, Vector2> value);
    [CompilerGeneratedAttribute]
public virtual void add_Scroll(Action`2<IMouse, ScrollWheel> value);
    [CompilerGeneratedAttribute]
public virtual void remove_Scroll(Action`2<IMouse, ScrollWheel> value);
    public sealed virtual void Dispose();
    public sealed virtual void Subscribe(GlfwEvents events);
    public sealed virtual void Unsubscribe(GlfwEvents events);
    public void Update();
    private static int GetButton(MouseButton btn);
    private static MouseButton GetButton(MouseButton btn);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <Subscribe>b__36_0(WindowHandle* _, double x, double y);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <Subscribe>b__36_1(WindowHandle* _, double x, double y);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <Subscribe>b__36_2(WindowHandle* _, MouseButton btn, InputAction action, KeyModifiers mods);
}
[NullableContextAttribute("1")]
internal interface Silk.NET.Input.Glfw.IGlfwSubscriber {
    public abstract virtual void Subscribe(GlfwEvents events);
    public abstract virtual void Unsubscribe(GlfwEvents events);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NativeIntegerAttribute : Attribute {
    public Boolean[] TransformFlags;
    public NativeIntegerAttribute(Boolean[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
