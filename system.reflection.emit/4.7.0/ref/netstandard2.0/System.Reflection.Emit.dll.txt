[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Reflection.Emit.AssemblyBuilder : Assembly {
    [NullableAttribute("2")]
public string CodeBase { get; }
    [NullableAttribute("2")]
public MethodInfo EntryPoint { get; }
    [NullableAttribute("2")]
public string FullName { get; }
    public bool GlobalAssemblyCache { get; }
    public long HostContext { get; }
    public string ImageRuntimeVersion { get; }
    public bool IsDynamic { get; }
    public string Location { get; }
    public Module ManifestModule { get; }
    public bool ReflectionOnly { get; }
    [NullableContextAttribute("2")]
public virtual string get_CodeBase();
    [NullableContextAttribute("2")]
public virtual MethodInfo get_EntryPoint();
    [NullableContextAttribute("2")]
public virtual string get_FullName();
    public virtual bool get_GlobalAssemblyCache();
    public virtual long get_HostContext();
    public virtual string get_ImageRuntimeVersion();
    public virtual bool get_IsDynamic();
    public virtual string get_Location();
    public virtual Module get_ManifestModule();
    public virtual bool get_ReflectionOnly();
    public static AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access);
    public static AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access, IEnumerable`1<CustomAttributeBuilder> assemblyAttributes);
    public ModuleBuilder DefineDynamicModule(string name);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual Object[] GetCustomAttributes(bool inherit);
    public virtual Object[] GetCustomAttributes(Type attributeType, bool inherit);
    public virtual IList`1<CustomAttributeData> GetCustomAttributesData();
    public ModuleBuilder GetDynamicModule(string name);
    public virtual Type[] GetExportedTypes();
    public virtual FileStream GetFile(string name);
    public virtual FileStream[] GetFiles(bool getResourceModules);
    public virtual int GetHashCode();
    public virtual Module[] GetLoadedModules(bool getResourceModules);
    public virtual ManifestResourceInfo GetManifestResourceInfo(string resourceName);
    public virtual String[] GetManifestResourceNames();
    public virtual Stream GetManifestResourceStream(string name);
    public virtual Stream GetManifestResourceStream(Type type, string name);
    public virtual Module GetModule(string name);
    public virtual Module[] GetModules(bool getResourceModules);
    public virtual AssemblyName GetName(bool copiedName);
    public virtual AssemblyName[] GetReferencedAssemblies();
    public virtual Assembly GetSatelliteAssembly(CultureInfo culture);
    public virtual Assembly GetSatelliteAssembly(CultureInfo culture, Version version);
    public virtual Type GetType(string name, bool throwOnError, bool ignoreCase);
    public virtual bool IsDefined(Type attributeType, bool inherit);
    public void SetCustomAttribute(ConstructorInfo con, Byte[] binaryAttribute);
    public void SetCustomAttribute(CustomAttributeBuilder customBuilder);
}
[FlagsAttribute]
public enum System.Reflection.Emit.AssemblyBuilderAccess : Enum {
    public int value__;
    public static AssemblyBuilderAccess Run;
    public static AssemblyBuilderAccess RunAndCollect;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Reflection.Emit.ConstructorBuilder : ConstructorInfo {
    public MethodAttributes Attributes { get; }
    public CallingConventions CallingConvention { get; }
    [NullableAttribute("2")]
public Type DeclaringType { get; }
    public bool InitLocals { get; public set; }
    public RuntimeMethodHandle MethodHandle { get; }
    public Module Module { get; }
    public string Name { get; }
    [NullableAttribute("2")]
public Type ReflectedType { get; }
    public virtual MethodAttributes get_Attributes();
    public virtual CallingConventions get_CallingConvention();
    [NullableContextAttribute("2")]
public virtual Type get_DeclaringType();
    public bool get_InitLocals();
    public void set_InitLocals(bool value);
    public virtual RuntimeMethodHandle get_MethodHandle();
    public virtual Module get_Module();
    public virtual string get_Name();
    [NullableContextAttribute("2")]
public virtual Type get_ReflectedType();
    public ParameterBuilder DefineParameter(int iSequence, ParameterAttributes attributes, string strParamName);
    public virtual Object[] GetCustomAttributes(bool inherit);
    public virtual Object[] GetCustomAttributes(Type attributeType, bool inherit);
    public ILGenerator GetILGenerator();
    public ILGenerator GetILGenerator(int streamSize);
    public virtual MethodImplAttributes GetMethodImplementationFlags();
    public virtual ParameterInfo[] GetParameters();
    [NullableContextAttribute("2")]
public virtual object Invoke(object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture);
    [NullableContextAttribute("2")]
public virtual object Invoke(BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture);
    public virtual bool IsDefined(Type attributeType, bool inherit);
    public void SetCustomAttribute(ConstructorInfo con, Byte[] binaryAttribute);
    public void SetCustomAttribute(CustomAttributeBuilder customBuilder);
    public void SetImplementationFlags(MethodImplAttributes attributes);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Reflection.Emit.EnumBuilder : Type {
    public Assembly Assembly { get; }
    [NullableAttribute("2")]
public string AssemblyQualifiedName { get; }
    [NullableAttribute("2")]
public Type BaseType { get; }
    [NullableAttribute("2")]
public Type DeclaringType { get; }
    [NullableAttribute("2")]
public string FullName { get; }
    public Guid GUID { get; }
    public bool IsConstructedGenericType { get; }
    public Module Module { get; }
    public string Name { get; }
    [NullableAttribute("2")]
public string Namespace { get; }
    [NullableAttribute("2")]
public Type ReflectedType { get; }
    public RuntimeTypeHandle TypeHandle { get; }
    public FieldBuilder UnderlyingField { get; }
    public Type UnderlyingSystemType { get; }
    public virtual Assembly get_Assembly();
    [NullableContextAttribute("2")]
public virtual string get_AssemblyQualifiedName();
    [NullableContextAttribute("2")]
public virtual Type get_BaseType();
    [NullableContextAttribute("2")]
public virtual Type get_DeclaringType();
    [NullableContextAttribute("2")]
public virtual string get_FullName();
    public virtual Guid get_GUID();
    public virtual bool get_IsConstructedGenericType();
    public virtual Module get_Module();
    public virtual string get_Name();
    [NullableContextAttribute("2")]
public virtual string get_Namespace();
    [NullableContextAttribute("2")]
public virtual Type get_ReflectedType();
    public virtual RuntimeTypeHandle get_TypeHandle();
    public FieldBuilder get_UnderlyingField();
    public virtual Type get_UnderlyingSystemType();
    [NullableContextAttribute("2")]
public TypeInfo CreateTypeInfo();
    public FieldBuilder DefineLiteral(string literalName, object literalValue);
    protected virtual TypeAttributes GetAttributeFlagsImpl();
    [NullableContextAttribute("2")]
protected virtual ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers);
    public virtual ConstructorInfo[] GetConstructors(BindingFlags bindingAttr);
    public virtual Object[] GetCustomAttributes(bool inherit);
    public virtual Object[] GetCustomAttributes(Type attributeType, bool inherit);
    [NullableContextAttribute("2")]
public virtual Type GetElementType();
    public virtual Type GetEnumUnderlyingType();
    public virtual EventInfo GetEvent(string name, BindingFlags bindingAttr);
    public virtual EventInfo[] GetEvents();
    public virtual EventInfo[] GetEvents(BindingFlags bindingAttr);
    public virtual FieldInfo GetField(string name, BindingFlags bindingAttr);
    public virtual FieldInfo[] GetFields(BindingFlags bindingAttr);
    public virtual Type GetInterface(string name, bool ignoreCase);
    public virtual InterfaceMapping GetInterfaceMap(Type interfaceType);
    public virtual Type[] GetInterfaces();
    public virtual MemberInfo[] GetMember(string name, MemberTypes type, BindingFlags bindingAttr);
    public virtual MemberInfo[] GetMembers(BindingFlags bindingAttr);
    [NullableContextAttribute("2")]
protected virtual MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers);
    public virtual MethodInfo[] GetMethods(BindingFlags bindingAttr);
    public virtual Type GetNestedType(string name, BindingFlags bindingAttr);
    public virtual Type[] GetNestedTypes(BindingFlags bindingAttr);
    public virtual PropertyInfo[] GetProperties(BindingFlags bindingAttr);
    [NullableContextAttribute("2")]
protected virtual PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers);
    protected virtual bool HasElementTypeImpl();
    [NullableContextAttribute("2")]
public virtual object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, Object[] args, ParameterModifier[] modifiers, CultureInfo culture, String[] namedParameters);
    protected virtual bool IsArrayImpl();
    protected virtual bool IsByRefImpl();
    protected virtual bool IsCOMObjectImpl();
    public virtual bool IsDefined(Type attributeType, bool inherit);
    protected virtual bool IsPointerImpl();
    protected virtual bool IsPrimitiveImpl();
    protected virtual bool IsValueTypeImpl();
    public virtual Type MakeArrayType();
    public virtual Type MakeArrayType(int rank);
    public virtual Type MakeByRefType();
    public virtual Type MakePointerType();
    public void SetCustomAttribute(ConstructorInfo con, Byte[] binaryAttribute);
    public void SetCustomAttribute(CustomAttributeBuilder customBuilder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Reflection.Emit.EventBuilder : object {
    public void AddOtherMethod(MethodBuilder mdBuilder);
    public void SetAddOnMethod(MethodBuilder mdBuilder);
    public void SetCustomAttribute(ConstructorInfo con, Byte[] binaryAttribute);
    public void SetCustomAttribute(CustomAttributeBuilder customBuilder);
    public void SetRaiseMethod(MethodBuilder mdBuilder);
    public void SetRemoveOnMethod(MethodBuilder mdBuilder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Reflection.Emit.FieldBuilder : FieldInfo {
    public FieldAttributes Attributes { get; }
    [NullableAttribute("2")]
public Type DeclaringType { get; }
    public RuntimeFieldHandle FieldHandle { get; }
    public Type FieldType { get; }
    public Module Module { get; }
    public string Name { get; }
    [NullableAttribute("2")]
public Type ReflectedType { get; }
    public virtual FieldAttributes get_Attributes();
    [NullableContextAttribute("2")]
public virtual Type get_DeclaringType();
    public virtual RuntimeFieldHandle get_FieldHandle();
    public virtual Type get_FieldType();
    public virtual Module get_Module();
    public virtual string get_Name();
    [NullableContextAttribute("2")]
public virtual Type get_ReflectedType();
    public virtual Object[] GetCustomAttributes(bool inherit);
    public virtual Object[] GetCustomAttributes(Type attributeType, bool inherit);
    [NullableContextAttribute("2")]
public virtual object GetValue(object obj);
    public virtual bool IsDefined(Type attributeType, bool inherit);
    [NullableContextAttribute("2")]
public void SetConstant(object defaultValue);
    public void SetCustomAttribute(ConstructorInfo con, Byte[] binaryAttribute);
    public void SetCustomAttribute(CustomAttributeBuilder customBuilder);
    public void SetOffset(int iOffset);
    [NullableContextAttribute("2")]
public virtual void SetValue(object obj, object val, BindingFlags invokeAttr, Binder binder, CultureInfo culture);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Reflection.Emit.GenericTypeParameterBuilder : Type {
    public Assembly Assembly { get; }
    [NullableAttribute("2")]
public string AssemblyQualifiedName { get; }
    [NullableAttribute("2")]
public Type BaseType { get; }
    public bool ContainsGenericParameters { get; }
    [NullableAttribute("2")]
public MethodBase DeclaringMethod { get; }
    [NullableAttribute("2")]
public Type DeclaringType { get; }
    [NullableAttribute("2")]
public string FullName { get; }
    public GenericParameterAttributes GenericParameterAttributes { get; }
    public int GenericParameterPosition { get; }
    public Guid GUID { get; }
    public bool IsConstructedGenericType { get; }
    public bool IsGenericParameter { get; }
    public bool IsGenericType { get; }
    public bool IsGenericTypeDefinition { get; }
    public Module Module { get; }
    public string Name { get; }
    [NullableAttribute("2")]
public string Namespace { get; }
    [NullableAttribute("2")]
public Type ReflectedType { get; }
    public RuntimeTypeHandle TypeHandle { get; }
    public Type UnderlyingSystemType { get; }
    public virtual Assembly get_Assembly();
    [NullableContextAttribute("2")]
public virtual string get_AssemblyQualifiedName();
    [NullableContextAttribute("2")]
public virtual Type get_BaseType();
    public virtual bool get_ContainsGenericParameters();
    [NullableContextAttribute("2")]
public virtual MethodBase get_DeclaringMethod();
    [NullableContextAttribute("2")]
public virtual Type get_DeclaringType();
    [NullableContextAttribute("2")]
public virtual string get_FullName();
    public virtual GenericParameterAttributes get_GenericParameterAttributes();
    public virtual int get_GenericParameterPosition();
    public virtual Guid get_GUID();
    public virtual bool get_IsConstructedGenericType();
    public virtual bool get_IsGenericParameter();
    public virtual bool get_IsGenericType();
    public virtual bool get_IsGenericTypeDefinition();
    public virtual Module get_Module();
    public virtual string get_Name();
    [NullableContextAttribute("2")]
public virtual string get_Namespace();
    [NullableContextAttribute("2")]
public virtual Type get_ReflectedType();
    public virtual RuntimeTypeHandle get_TypeHandle();
    public virtual Type get_UnderlyingSystemType();
    [NullableContextAttribute("2")]
public virtual bool Equals(object o);
    protected virtual TypeAttributes GetAttributeFlagsImpl();
    protected virtual ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers);
    public virtual ConstructorInfo[] GetConstructors(BindingFlags bindingAttr);
    public virtual Object[] GetCustomAttributes(bool inherit);
    public virtual Object[] GetCustomAttributes(Type attributeType, bool inherit);
    public virtual Type GetElementType();
    public virtual EventInfo GetEvent(string name, BindingFlags bindingAttr);
    public virtual EventInfo[] GetEvents();
    public virtual EventInfo[] GetEvents(BindingFlags bindingAttr);
    public virtual FieldInfo GetField(string name, BindingFlags bindingAttr);
    public virtual FieldInfo[] GetFields(BindingFlags bindingAttr);
    public virtual Type[] GetGenericArguments();
    public virtual Type GetGenericTypeDefinition();
    public virtual int GetHashCode();
    public virtual Type GetInterface(string name, bool ignoreCase);
    public virtual InterfaceMapping GetInterfaceMap(Type interfaceType);
    public virtual Type[] GetInterfaces();
    public virtual MemberInfo[] GetMember(string name, MemberTypes type, BindingFlags bindingAttr);
    public virtual MemberInfo[] GetMembers(BindingFlags bindingAttr);
    protected virtual MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers);
    public virtual MethodInfo[] GetMethods(BindingFlags bindingAttr);
    public virtual Type GetNestedType(string name, BindingFlags bindingAttr);
    public virtual Type[] GetNestedTypes(BindingFlags bindingAttr);
    public virtual PropertyInfo[] GetProperties(BindingFlags bindingAttr);
    [NullableContextAttribute("2")]
protected virtual PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers);
    protected virtual bool HasElementTypeImpl();
    [NullableContextAttribute("2")]
public virtual object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, Object[] args, ParameterModifier[] modifiers, CultureInfo culture, String[] namedParameters);
    protected virtual bool IsArrayImpl();
    [NullableContextAttribute("2")]
public virtual bool IsAssignableFrom(Type c);
    protected virtual bool IsByRefImpl();
    protected virtual bool IsCOMObjectImpl();
    public virtual bool IsDefined(Type attributeType, bool inherit);
    protected virtual bool IsPointerImpl();
    protected virtual bool IsPrimitiveImpl();
    public virtual bool IsSubclassOf(Type c);
    protected virtual bool IsValueTypeImpl();
    public virtual Type MakeArrayType();
    public virtual Type MakeArrayType(int rank);
    public virtual Type MakeByRefType();
    public virtual Type MakeGenericType(Type[] typeArguments);
    public virtual Type MakePointerType();
    [NullableContextAttribute("2")]
public void SetBaseTypeConstraint(Type baseTypeConstraint);
    public void SetCustomAttribute(ConstructorInfo con, Byte[] binaryAttribute);
    public void SetCustomAttribute(CustomAttributeBuilder customBuilder);
    public void SetGenericParameterAttributes(GenericParameterAttributes genericParameterAttributes);
    public void SetInterfaceConstraints(Type[] interfaceConstraints);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Reflection.Emit.MethodBuilder : MethodInfo {
    public MethodAttributes Attributes { get; }
    public CallingConventions CallingConvention { get; }
    public bool ContainsGenericParameters { get; }
    [NullableAttribute("2")]
public Type DeclaringType { get; }
    public bool InitLocals { get; public set; }
    public bool IsGenericMethod { get; }
    public bool IsGenericMethodDefinition { get; }
    public bool IsSecurityCritical { get; }
    public bool IsSecuritySafeCritical { get; }
    public bool IsSecurityTransparent { get; }
    public RuntimeMethodHandle MethodHandle { get; }
    public Module Module { get; }
    public string Name { get; }
    [NullableAttribute("2")]
public Type ReflectedType { get; }
    public ParameterInfo ReturnParameter { get; }
    public Type ReturnType { get; }
    public ICustomAttributeProvider ReturnTypeCustomAttributes { get; }
    public virtual MethodAttributes get_Attributes();
    public virtual CallingConventions get_CallingConvention();
    public virtual bool get_ContainsGenericParameters();
    [NullableContextAttribute("2")]
public virtual Type get_DeclaringType();
    public bool get_InitLocals();
    public void set_InitLocals(bool value);
    public virtual bool get_IsGenericMethod();
    public virtual bool get_IsGenericMethodDefinition();
    public virtual bool get_IsSecurityCritical();
    public virtual bool get_IsSecuritySafeCritical();
    public virtual bool get_IsSecurityTransparent();
    public virtual RuntimeMethodHandle get_MethodHandle();
    public virtual Module get_Module();
    public virtual string get_Name();
    [NullableContextAttribute("2")]
public virtual Type get_ReflectedType();
    public virtual ParameterInfo get_ReturnParameter();
    public virtual Type get_ReturnType();
    public virtual ICustomAttributeProvider get_ReturnTypeCustomAttributes();
    public GenericTypeParameterBuilder[] DefineGenericParameters(String[] names);
    public ParameterBuilder DefineParameter(int position, ParameterAttributes attributes, string strParamName);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual MethodInfo GetBaseDefinition();
    public virtual Object[] GetCustomAttributes(bool inherit);
    public virtual Object[] GetCustomAttributes(Type attributeType, bool inherit);
    public virtual Type[] GetGenericArguments();
    public virtual MethodInfo GetGenericMethodDefinition();
    public virtual int GetHashCode();
    public ILGenerator GetILGenerator();
    public ILGenerator GetILGenerator(int size);
    public virtual MethodImplAttributes GetMethodImplementationFlags();
    public virtual ParameterInfo[] GetParameters();
    [NullableContextAttribute("2")]
public virtual object Invoke(object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture);
    public virtual bool IsDefined(Type attributeType, bool inherit);
    public virtual MethodInfo MakeGenericMethod(Type[] typeArguments);
    public void SetCustomAttribute(ConstructorInfo con, Byte[] binaryAttribute);
    public void SetCustomAttribute(CustomAttributeBuilder customBuilder);
    public void SetImplementationFlags(MethodImplAttributes attributes);
    public void SetParameters(Type[] parameterTypes);
    [NullableContextAttribute("2")]
public void SetReturnType(Type returnType);
    [NullableContextAttribute("2")]
public void SetSignature(Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Reflection.Emit.ModuleBuilder : Module {
    public Assembly Assembly { get; }
    public string FullyQualifiedName { get; }
    public int MDStreamVersion { get; }
    public int MetadataToken { get; }
    public Guid ModuleVersionId { get; }
    public string Name { get; }
    public string ScopeName { get; }
    public virtual Assembly get_Assembly();
    public virtual string get_FullyQualifiedName();
    public virtual int get_MDStreamVersion();
    public virtual int get_MetadataToken();
    public virtual Guid get_ModuleVersionId();
    public virtual string get_Name();
    public virtual string get_ScopeName();
    public void CreateGlobalFunctions();
    public EnumBuilder DefineEnum(string name, TypeAttributes visibility, Type underlyingType);
    public MethodBuilder DefineGlobalMethod(string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes);
    public MethodBuilder DefineGlobalMethod(string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] requiredReturnTypeCustomModifiers, Type[] optionalReturnTypeCustomModifiers, Type[] parameterTypes, Type[][] requiredParameterTypeCustomModifiers, Type[][] optionalParameterTypeCustomModifiers);
    public MethodBuilder DefineGlobalMethod(string name, MethodAttributes attributes, Type returnType, Type[] parameterTypes);
    public FieldBuilder DefineInitializedData(string name, Byte[] data, FieldAttributes attributes);
    public TypeBuilder DefineType(string name);
    public TypeBuilder DefineType(string name, TypeAttributes attr);
    public TypeBuilder DefineType(string name, TypeAttributes attr, Type parent);
    public TypeBuilder DefineType(string name, TypeAttributes attr, Type parent, int typesize);
    public TypeBuilder DefineType(string name, TypeAttributes attr, Type parent, PackingSize packsize);
    public TypeBuilder DefineType(string name, TypeAttributes attr, Type parent, PackingSize packingSize, int typesize);
    public TypeBuilder DefineType(string name, TypeAttributes attr, Type parent, Type[] interfaces);
    public FieldBuilder DefineUninitializedData(string name, int size, FieldAttributes attributes);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public MethodInfo GetArrayMethod(Type arrayClass, string methodName, CallingConventions callingConvention, Type returnType, Type[] parameterTypes);
    public virtual Object[] GetCustomAttributes(bool inherit);
    public virtual Object[] GetCustomAttributes(Type attributeType, bool inherit);
    public virtual IList`1<CustomAttributeData> GetCustomAttributesData();
    public virtual FieldInfo GetField(string name, BindingFlags bindingAttr);
    public virtual FieldInfo[] GetFields(BindingFlags bindingFlags);
    public virtual int GetHashCode();
    public virtual MethodInfo[] GetMethods(BindingFlags bindingFlags);
    public virtual void GetPEKind(PortableExecutableKinds& peKind, ImageFileMachine& machine);
    public virtual Type GetType(string className);
    public virtual Type GetType(string className, bool ignoreCase);
    public virtual Type GetType(string className, bool throwOnError, bool ignoreCase);
    public virtual Type[] GetTypes();
    public virtual bool IsDefined(Type attributeType, bool inherit);
    public virtual bool IsResource();
    [NullableContextAttribute("2")]
public virtual FieldInfo ResolveField(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments);
    [NullableContextAttribute("2")]
public virtual MemberInfo ResolveMember(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments);
    [NullableContextAttribute("2")]
public virtual MethodBase ResolveMethod(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments);
    public virtual Byte[] ResolveSignature(int metadataToken);
    public virtual string ResolveString(int metadataToken);
    public virtual Type ResolveType(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments);
    public void SetCustomAttribute(ConstructorInfo con, Byte[] binaryAttribute);
    public void SetCustomAttribute(CustomAttributeBuilder customBuilder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Reflection.Emit.PropertyBuilder : PropertyInfo {
    public PropertyAttributes Attributes { get; }
    public bool CanRead { get; }
    public bool CanWrite { get; }
    [NullableAttribute("2")]
public Type DeclaringType { get; }
    public Module Module { get; }
    public string Name { get; }
    public Type PropertyType { get; }
    [NullableAttribute("2")]
public Type ReflectedType { get; }
    public virtual PropertyAttributes get_Attributes();
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    [NullableContextAttribute("2")]
public virtual Type get_DeclaringType();
    public virtual Module get_Module();
    public virtual string get_Name();
    public virtual Type get_PropertyType();
    [NullableContextAttribute("2")]
public virtual Type get_ReflectedType();
    public void AddOtherMethod(MethodBuilder mdBuilder);
    public virtual MethodInfo[] GetAccessors(bool nonPublic);
    public virtual Object[] GetCustomAttributes(bool inherit);
    public virtual Object[] GetCustomAttributes(Type attributeType, bool inherit);
    [NullableContextAttribute("2")]
public virtual MethodInfo GetGetMethod(bool nonPublic);
    public virtual ParameterInfo[] GetIndexParameters();
    [NullableContextAttribute("2")]
public virtual MethodInfo GetSetMethod(bool nonPublic);
    [NullableContextAttribute("2")]
public virtual object GetValue(object obj, Object[] index);
    [NullableContextAttribute("2")]
public virtual object GetValue(object obj, BindingFlags invokeAttr, Binder binder, Object[] index, CultureInfo culture);
    public virtual bool IsDefined(Type attributeType, bool inherit);
    [NullableContextAttribute("2")]
public void SetConstant(object defaultValue);
    public void SetCustomAttribute(ConstructorInfo con, Byte[] binaryAttribute);
    public void SetCustomAttribute(CustomAttributeBuilder customBuilder);
    public void SetGetMethod(MethodBuilder mdBuilder);
    public void SetSetMethod(MethodBuilder mdBuilder);
    [NullableContextAttribute("2")]
public virtual void SetValue(object obj, object value, Object[] index);
    [NullableContextAttribute("2")]
public virtual void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, Object[] index, CultureInfo culture);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Reflection.Emit.TypeBuilder : Type {
    public static int UnspecifiedTypeSize;
    public Assembly Assembly { get; }
    [NullableAttribute("2")]
public string AssemblyQualifiedName { get; }
    [NullableAttribute("2")]
public Type BaseType { get; }
    [NullableAttribute("2")]
public MethodBase DeclaringMethod { get; }
    [NullableAttribute("2")]
public Type DeclaringType { get; }
    [NullableAttribute("2")]
public string FullName { get; }
    public GenericParameterAttributes GenericParameterAttributes { get; }
    public int GenericParameterPosition { get; }
    public Guid GUID { get; }
    public bool IsConstructedGenericType { get; }
    public bool IsGenericParameter { get; }
    public bool IsGenericType { get; }
    public bool IsGenericTypeDefinition { get; }
    public bool IsSecurityCritical { get; }
    public bool IsSecuritySafeCritical { get; }
    public bool IsSecurityTransparent { get; }
    public Module Module { get; }
    public string Name { get; }
    [NullableAttribute("2")]
public string Namespace { get; }
    public PackingSize PackingSize { get; }
    [NullableAttribute("2")]
public Type ReflectedType { get; }
    public int Size { get; }
    public RuntimeTypeHandle TypeHandle { get; }
    public Type UnderlyingSystemType { get; }
    public virtual Assembly get_Assembly();
    [NullableContextAttribute("2")]
public virtual string get_AssemblyQualifiedName();
    [NullableContextAttribute("2")]
public virtual Type get_BaseType();
    [NullableContextAttribute("2")]
public virtual MethodBase get_DeclaringMethod();
    [NullableContextAttribute("2")]
public virtual Type get_DeclaringType();
    [NullableContextAttribute("2")]
public virtual string get_FullName();
    public virtual GenericParameterAttributes get_GenericParameterAttributes();
    public virtual int get_GenericParameterPosition();
    public virtual Guid get_GUID();
    public virtual bool get_IsConstructedGenericType();
    public virtual bool get_IsGenericParameter();
    public virtual bool get_IsGenericType();
    public virtual bool get_IsGenericTypeDefinition();
    public virtual bool get_IsSecurityCritical();
    public virtual bool get_IsSecuritySafeCritical();
    public virtual bool get_IsSecurityTransparent();
    public virtual Module get_Module();
    public virtual string get_Name();
    [NullableContextAttribute("2")]
public virtual string get_Namespace();
    public PackingSize get_PackingSize();
    [NullableContextAttribute("2")]
public virtual Type get_ReflectedType();
    public int get_Size();
    public virtual RuntimeTypeHandle get_TypeHandle();
    public virtual Type get_UnderlyingSystemType();
    public void AddInterfaceImplementation(Type interfaceType);
    [NullableContextAttribute("2")]
public TypeInfo CreateTypeInfo();
    public ConstructorBuilder DefineConstructor(MethodAttributes attributes, CallingConventions callingConvention, Type[] parameterTypes);
    public ConstructorBuilder DefineConstructor(MethodAttributes attributes, CallingConventions callingConvention, Type[] parameterTypes, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers);
    public ConstructorBuilder DefineDefaultConstructor(MethodAttributes attributes);
    public EventBuilder DefineEvent(string name, EventAttributes attributes, Type eventtype);
    public FieldBuilder DefineField(string fieldName, Type type, FieldAttributes attributes);
    public FieldBuilder DefineField(string fieldName, Type type, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers, FieldAttributes attributes);
    public GenericTypeParameterBuilder[] DefineGenericParameters(String[] names);
    public FieldBuilder DefineInitializedData(string name, Byte[] data, FieldAttributes attributes);
    public MethodBuilder DefineMethod(string name, MethodAttributes attributes);
    public MethodBuilder DefineMethod(string name, MethodAttributes attributes, CallingConventions callingConvention);
    public MethodBuilder DefineMethod(string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes);
    public MethodBuilder DefineMethod(string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers);
    public MethodBuilder DefineMethod(string name, MethodAttributes attributes, Type returnType, Type[] parameterTypes);
    public void DefineMethodOverride(MethodInfo methodInfoBody, MethodInfo methodInfoDeclaration);
    public TypeBuilder DefineNestedType(string name);
    public TypeBuilder DefineNestedType(string name, TypeAttributes attr);
    public TypeBuilder DefineNestedType(string name, TypeAttributes attr, Type parent);
    public TypeBuilder DefineNestedType(string name, TypeAttributes attr, Type parent, int typeSize);
    public TypeBuilder DefineNestedType(string name, TypeAttributes attr, Type parent, PackingSize packSize);
    public TypeBuilder DefineNestedType(string name, TypeAttributes attr, Type parent, PackingSize packSize, int typeSize);
    public TypeBuilder DefineNestedType(string name, TypeAttributes attr, Type parent, Type[] interfaces);
    public PropertyBuilder DefineProperty(string name, PropertyAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes);
    public PropertyBuilder DefineProperty(string name, PropertyAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers);
    public PropertyBuilder DefineProperty(string name, PropertyAttributes attributes, Type returnType, Type[] parameterTypes);
    public PropertyBuilder DefineProperty(string name, PropertyAttributes attributes, Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers);
    public ConstructorBuilder DefineTypeInitializer();
    public FieldBuilder DefineUninitializedData(string name, int size, FieldAttributes attributes);
    protected virtual TypeAttributes GetAttributeFlagsImpl();
    public static ConstructorInfo GetConstructor(Type type, ConstructorInfo constructor);
    [NullableContextAttribute("2")]
protected virtual ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers);
    public virtual ConstructorInfo[] GetConstructors(BindingFlags bindingAttr);
    public virtual Object[] GetCustomAttributes(bool inherit);
    public virtual Object[] GetCustomAttributes(Type attributeType, bool inherit);
    public virtual Type GetElementType();
    public virtual EventInfo GetEvent(string name, BindingFlags bindingAttr);
    public virtual EventInfo[] GetEvents();
    public virtual EventInfo[] GetEvents(BindingFlags bindingAttr);
    public virtual FieldInfo GetField(string name, BindingFlags bindingAttr);
    public static FieldInfo GetField(Type type, FieldInfo field);
    public virtual FieldInfo[] GetFields(BindingFlags bindingAttr);
    public virtual Type[] GetGenericArguments();
    public virtual Type GetGenericTypeDefinition();
    public virtual Type GetInterface(string name, bool ignoreCase);
    public virtual InterfaceMapping GetInterfaceMap(Type interfaceType);
    public virtual Type[] GetInterfaces();
    public virtual MemberInfo[] GetMember(string name, MemberTypes type, BindingFlags bindingAttr);
    public virtual MemberInfo[] GetMembers(BindingFlags bindingAttr);
    public static MethodInfo GetMethod(Type type, MethodInfo method);
    [NullableContextAttribute("2")]
protected virtual MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers);
    public virtual MethodInfo[] GetMethods(BindingFlags bindingAttr);
    public virtual Type GetNestedType(string name, BindingFlags bindingAttr);
    public virtual Type[] GetNestedTypes(BindingFlags bindingAttr);
    public virtual PropertyInfo[] GetProperties(BindingFlags bindingAttr);
    [NullableContextAttribute("2")]
protected virtual PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers);
    protected virtual bool HasElementTypeImpl();
    [NullableContextAttribute("2")]
public virtual object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, Object[] args, ParameterModifier[] modifiers, CultureInfo culture, String[] namedParameters);
    protected virtual bool IsArrayImpl();
    [NullableContextAttribute("2")]
public virtual bool IsAssignableFrom(Type c);
    protected virtual bool IsByRefImpl();
    protected virtual bool IsCOMObjectImpl();
    public bool IsCreated();
    public virtual bool IsDefined(Type attributeType, bool inherit);
    protected virtual bool IsPointerImpl();
    protected virtual bool IsPrimitiveImpl();
    public virtual bool IsSubclassOf(Type c);
    public virtual Type MakeArrayType();
    public virtual Type MakeArrayType(int rank);
    public virtual Type MakeByRefType();
    public virtual Type MakeGenericType(Type[] typeArguments);
    public virtual Type MakePointerType();
    public void SetCustomAttribute(ConstructorInfo con, Byte[] binaryAttribute);
    public void SetCustomAttribute(CustomAttributeBuilder customBuilder);
    [NullableContextAttribute("2")]
public void SetParent(Type parent);
    public virtual string ToString();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5198")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
