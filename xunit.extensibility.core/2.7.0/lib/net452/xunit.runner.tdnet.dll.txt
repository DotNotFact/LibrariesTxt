[ExtensionAttribute]
internal static class AssemblyExtensions : object {
    [ExtensionAttribute]
public static string GetLocalCodeBase(Assembly assembly);
    public static string GetLocalCodeBase(string codeBase, char directorySeparator);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[AttributeUsageAttribute("749")]
internal class System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.6.133.12845")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyConfiguration;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyVersion;
    internal static DateTime GitCommitDate;
    internal static string GitCommitId;
    internal static bool IsPrerelease;
    internal static bool IsPublicRelease;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static string RootNamespace;
    private static ThisAssembly();
}
public class Xunit.Runner.TdNet.DiagnosticMessageSink : TestMessageSink {
    public DiagnosticMessageSink(ITestListener listener, string assemblyDisplayName, bool showDiagnostics);
}
public class Xunit.Runner.TdNet.ResultSink : TestMessageSink {
    private int totalTests;
    [CompilerGeneratedAttribute]
private ManualResetEvent <Finished>k__BackingField;
    [CompilerGeneratedAttribute]
private ITestListener <TestListener>k__BackingField;
    [CompilerGeneratedAttribute]
private TestRunState <TestRunState>k__BackingField;
    public ManualResetEvent Finished { get; }
    public ITestListener TestListener { get; private set; }
    public TestRunState TestRunState { get; public set; }
    public ResultSink(ITestListener listener, int totalTests);
    [CompilerGeneratedAttribute]
public ManualResetEvent get_Finished();
    [CompilerGeneratedAttribute]
public ITestListener get_TestListener();
    [CompilerGeneratedAttribute]
private void set_TestListener(ITestListener value);
    [CompilerGeneratedAttribute]
public TestRunState get_TestRunState();
    [CompilerGeneratedAttribute]
public void set_TestRunState(TestRunState value);
    private void HandleTestFailed(MessageHandlerArgs`1<ITestFailed> args);
    private void HandleTestPassed(MessageHandlerArgs`1<ITestPassed> args);
    private void HandleTestSkipped(MessageHandlerArgs`1<ITestSkipped> args);
    private void ReportError(IFailureInformation failureInfo, string messageType);
    private void ReportError(IFailureInformation failureInfo, string messageTypeFormat, Object[] args);
    private void WriteOutput(string name, string output);
    public virtual void Dispose();
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_0(MessageHandlerArgs`1<IErrorMessage> args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_1(MessageHandlerArgs`1<ITestAssemblyCleanupFailure> args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_2(MessageHandlerArgs`1<ITestCaseCleanupFailure> args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_3(MessageHandlerArgs`1<ITestClassCleanupFailure> args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_4(MessageHandlerArgs`1<ITestCollectionCleanupFailure> args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_5(MessageHandlerArgs`1<ITestMethodCleanupFailure> args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_6(MessageHandlerArgs`1<ITestCleanupFailure> args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_7(MessageHandlerArgs`1<ITestAssemblyFinished> args);
}
public class Xunit.Runner.TdNet.TdNetRunner : object {
    public virtual TdNetRunnerHelper CreateHelper(ITestListener testListener, Assembly assembly);
    public sealed virtual TestRunState RunAssembly(ITestListener testListener, Assembly assembly);
    public sealed virtual TestRunState RunMember(ITestListener testListener, Assembly assembly, MemberInfo member);
    public sealed virtual TestRunState RunNamespace(ITestListener testListener, Assembly assembly, string ns);
}
public class Xunit.Runner.TdNet.TdNetRunnerHelper : object {
    private Stack`1<IDisposable> toDispose;
    private Xunit2 xunit;
    private TestAssemblyConfiguration configuration;
    private ITestListener testListener;
    public TdNetRunnerHelper(Assembly assembly, ITestListener testListener);
    public virtual IReadOnlyList`1<ITestCase> Discover();
    private IReadOnlyList`1<ITestCase> Discover(Type type);
    private IReadOnlyList`1<ITestCase> Discover(Action`1<IMessageSinkWithTypes> discoveryAction);
    public sealed virtual void Dispose();
    public virtual TestRunState Run(IReadOnlyList`1<ITestCase> testCases, TestRunState initialRunState);
    public virtual TestRunState RunClass(Type type, TestRunState initialRunState);
    public virtual TestRunState RunMethod(MethodInfo method, TestRunState initialRunState);
    [CompilerGeneratedAttribute]
private void <Discover>b__6_0(IMessageSinkWithTypes sink);
}
[ExtensionAttribute]
public static class Xunit.Runner.TdNet.XunitExtension : object {
    [ExtensionAttribute]
public static Type GetClass(ITestCase testCase);
    [ExtensionAttribute]
public static MethodInfo GetMethod(ITestCase testCase);
    [ExtensionAttribute]
public static TestResult ToTdNetTestResult(ITestResultMessage testResult, TestState testState, int totalTests);
}
