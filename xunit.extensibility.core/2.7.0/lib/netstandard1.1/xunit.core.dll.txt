[ExtensionAttribute]
internal static class ExceptionExtensions : object {
    private static string RETHROW_MARKER;
    [ExtensionAttribute]
public static void RethrowWithNoStackTraceLoss(Exception ex);
    [ExtensionAttribute]
public static Exception Unwrap(Exception ex);
}
internal static class Guard : object {
    public static void ArgumentNotNull(string argName, object argValue);
    public static void ArgumentNotNullOrEmpty(string argName, IEnumerable argValue);
    public static void ArgumentValid(string argName, bool test, string message);
    public static void ArgumentValid(string argName, bool test, string messageFormat, Object[] args);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[AttributeUsageAttribute("749")]
internal class System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.6.133.12845")]
internal static class ThisAssembly : object {
    internal static string AssemblyConfiguration;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyVersion;
    internal static DateTime GitCommitDate;
    internal static string GitCommitId;
    internal static bool IsPrerelease;
    internal static bool IsPublicRelease;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static string RootNamespace;
    private static ThisAssembly();
}
[TraitDiscovererAttribute("Xunit.Sdk.AssemblyTraitDiscoverer", "xunit.core")]
[AttributeUsageAttribute("1")]
public class Xunit.AssemblyTraitAttribute : Attribute {
    public AssemblyTraitAttribute(string name, string value);
}
[AttributeUsageAttribute("64")]
public class Xunit.ClassDataAttribute : DataAttribute {
    [CompilerGeneratedAttribute]
private Type <Class>k__BackingField;
    public Type Class { get; private set; }
    public ClassDataAttribute(Type class);
    [CompilerGeneratedAttribute]
public Type get_Class();
    [CompilerGeneratedAttribute]
private void set_Class(Type value);
    public virtual IEnumerable`1<Object[]> GetData(MethodInfo testMethod);
}
[AttributeUsageAttribute("4")]
public class Xunit.CollectionAttribute : Attribute {
    public CollectionAttribute(string name);
}
public enum Xunit.CollectionBehavior : Enum {
    public int value__;
    public static CollectionBehavior CollectionPerAssembly;
    public static CollectionBehavior CollectionPerClass;
}
[AttributeUsageAttribute("1")]
public class Xunit.CollectionBehaviorAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <DisableTestParallelization>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxParallelThreads>k__BackingField;
    public bool DisableTestParallelization { get; public set; }
    public int MaxParallelThreads { get; public set; }
    public CollectionBehaviorAttribute(CollectionBehavior collectionBehavior);
    public CollectionBehaviorAttribute(string factoryTypeName, string factoryAssemblyName);
    [CompilerGeneratedAttribute]
public bool get_DisableTestParallelization();
    [CompilerGeneratedAttribute]
public void set_DisableTestParallelization(bool value);
    [CompilerGeneratedAttribute]
public int get_MaxParallelThreads();
    [CompilerGeneratedAttribute]
public void set_MaxParallelThreads(int value);
}
[AttributeUsageAttribute("4")]
public class Xunit.CollectionDefinitionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <DisableParallelization>k__BackingField;
    public bool DisableParallelization { get; public set; }
    public CollectionDefinitionAttribute(string name);
    [CompilerGeneratedAttribute]
public bool get_DisableParallelization();
    [CompilerGeneratedAttribute]
public void set_DisableParallelization(bool value);
}
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Please replace [PropertyData] with [MemberData]", "True")]
public class Xunit.Extensions.PropertyDataAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <PropertyType>k__BackingField;
    public Type PropertyType { get; public set; }
    public PropertyDataAttribute(string propertyName);
    [CompilerGeneratedAttribute]
public Type get_PropertyType();
    [CompilerGeneratedAttribute]
public void set_PropertyType(Type value);
}
[XunitTestCaseDiscovererAttribute("Xunit.Sdk.FactDiscoverer", "xunit.execution.{Platform}")]
[AttributeUsageAttribute("64")]
public class Xunit.FactAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Skip>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Timeout>k__BackingField;
    public string DisplayName { get; public set; }
    public string Skip { get; public set; }
    public int Timeout { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_DisplayName();
    [CompilerGeneratedAttribute]
public virtual void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Skip();
    [CompilerGeneratedAttribute]
public virtual void set_Skip(string value);
    [CompilerGeneratedAttribute]
public virtual int get_Timeout();
    [CompilerGeneratedAttribute]
public virtual void set_Timeout(int value);
}
public interface Xunit.IAsyncLifetime {
    public abstract virtual Task InitializeAsync();
    public abstract virtual Task DisposeAsync();
}
public interface Xunit.IClassFixture`1 {
}
public interface Xunit.ICollectionFixture`1 {
}
[CLSCompliantAttribute("False")]
[DataDiscovererAttribute("Xunit.Sdk.InlineDataDiscoverer", "xunit.core")]
[AttributeUsageAttribute("64")]
public class Xunit.InlineDataAttribute : DataAttribute {
    private Object[] data;
    public InlineDataAttribute(Object[] data);
    public virtual IEnumerable`1<Object[]> GetData(MethodInfo testMethod);
}
[ExtensionAttribute]
internal static class Xunit.Internal.ArgumentFormatter : object {
    internal static string EllipsisInBrackets;
    public static int MAX_DEPTH;
    public static int MAX_ENUMERABLE_LENGTH;
    public static int MAX_OBJECT_ITEM_COUNT;
    public static int MAX_STRING_LENGTH;
    private static Object[] EmptyObjects;
    private static Type[] EmptyTypes;
    private static PropertyInfo tupleIndexer;
    private static Type tupleInterfaceType;
    private static PropertyInfo tupleLength;
    private static Dictionary`2<TypeInfo, string> TypeMappings;
    [CompilerGeneratedAttribute]
private static string <Ellipsis>k__BackingField;
    public static string Ellipsis { get; }
    private static ArgumentFormatter();
    [CompilerGeneratedAttribute]
public static string get_Ellipsis();
    public static string EscapeString(string s);
    public static string Format(object value, int depth);
    private static string FormatCharValue(char value);
    private static string FormatComplexValue(object value, int depth, Type type, bool isAnonymousType);
    private static string FormatDateTimeValue(object value);
    private static string FormatDoubleValue(object value);
    private static string FormatEnumValue(object value);
    private static string FormatEnumerableValue(IEnumerable enumerable, int depth);
    private static string FormatFloatValue(object value);
    private static string FormatStringValue(string value);
    private static string FormatTupleValue(object tupleParameter, int depth);
    public static string FormatTypeName(Type type, bool fullTypeName);
    private static string FormatValueTypeValue(object value, TypeInfo typeInfo);
    internal static Type GetSetElementType(object obj);
    [ExtensionAttribute]
private static bool IsAnonymousType(TypeInfo typeInfo);
    [ExtensionAttribute]
private static bool IsSZArrayType(TypeInfo typeInfo);
    private static bool SafeToMultiEnumerate(IEnumerable collection);
    private static bool TryGetEscapeSequence(char ch, String& value);
    internal static Exception UnwrapException(Exception ex);
    private static string WrapAndGetFormattedValue(Func`1<object> getter, int depth);
}
public interface Xunit.ITestCollectionOrderer {
    public abstract virtual IEnumerable`1<ITestCollection> OrderTestCollections(IEnumerable`1<ITestCollection> testCollections);
}
[CLSCompliantAttribute("False")]
[DataDiscovererAttribute("Xunit.Sdk.MemberDataDiscoverer", "xunit.core")]
[AttributeUsageAttribute("64")]
public class Xunit.MemberDataAttribute : MemberDataAttributeBase {
    public MemberDataAttribute(string memberName, Object[] parameters);
    protected virtual Object[] ConvertDataItem(MethodInfo testMethod, object item);
}
[CLSCompliantAttribute("False")]
[AttributeUsageAttribute("64")]
public abstract class Xunit.MemberDataAttributeBase : DataAttribute {
    [CompilerGeneratedAttribute]
private bool <DisableDiscoveryEnumeration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MemberName>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <MemberType>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <Parameters>k__BackingField;
    public bool DisableDiscoveryEnumeration { get; public set; }
    public string MemberName { get; private set; }
    public Type MemberType { get; public set; }
    public Object[] Parameters { get; private set; }
    protected MemberDataAttributeBase(string memberName, Object[] parameters);
    [CompilerGeneratedAttribute]
public bool get_DisableDiscoveryEnumeration();
    [CompilerGeneratedAttribute]
public void set_DisableDiscoveryEnumeration(bool value);
    [CompilerGeneratedAttribute]
public string get_MemberName();
    [CompilerGeneratedAttribute]
private void set_MemberName(string value);
    [CompilerGeneratedAttribute]
public Type get_MemberType();
    [CompilerGeneratedAttribute]
public void set_MemberType(Type value);
    [CompilerGeneratedAttribute]
public Object[] get_Parameters();
    [CompilerGeneratedAttribute]
private void set_Parameters(Object[] value);
    public virtual IEnumerable`1<Object[]> GetData(MethodInfo testMethod);
    protected abstract virtual Object[] ConvertDataItem(MethodInfo testMethod, object item);
    private Func`1<object> GetFieldAccessor(Type type);
    private Func`1<object> GetMethodAccessor(Type type);
    private Func`1<object> GetPropertyAccessor(Type type);
    private static bool ParameterTypesCompatible(ParameterInfo[] parameters, Type[] parameterTypes);
}
public class Xunit.Record : object {
    public static Exception Exception(Action testCode);
    public static Exception Exception(Func`1<object> testCode);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("You must call Record.ExceptionAsync (and await the result) when testing async code.", "True")]
public static Exception Exception(Func`1<Task> testCode);
    [AsyncStateMachineAttribute("Xunit.Record/<ExceptionAsync>d__3")]
public static Task`1<Exception> ExceptionAsync(Func`1<Task> testCode);
    internal static void GuardArgumentNotNull(string argName, object argValue);
}
public class Xunit.Sdk.AssemblyTraitDiscoverer : object {
    [IteratorStateMachineAttribute("Xunit.Sdk.AssemblyTraitDiscoverer/<GetTraits>d__0")]
public virtual IEnumerable`1<KeyValuePair`2<string, string>> GetTraits(IAttributeInfo traitAttribute);
}
public static class Xunit.Sdk.AsyncUtility : object {
    private static MethodInfo fSharpStartAsTaskOpenGenericMethod;
    public static bool IsAsync(MethodInfo method);
    public static bool IsAsyncVoid(MethodInfo method);
    public static Task TryConvertToTask(object obj);
}
[AttributeUsageAttribute("69")]
public abstract class Xunit.Sdk.BeforeAfterTestAttribute : Attribute {
    public virtual void After(MethodInfo methodUnderTest);
    public virtual void Before(MethodInfo methodUnderTest);
}
[DataDiscovererAttribute("Xunit.Sdk.DataDiscoverer", "xunit.core")]
[AttributeUsageAttribute("64")]
public abstract class Xunit.Sdk.DataAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Skip>k__BackingField;
    public string Skip { get; public set; }
    public abstract virtual IEnumerable`1<Object[]> GetData(MethodInfo testMethod);
    [CompilerGeneratedAttribute]
public virtual string get_Skip();
    [CompilerGeneratedAttribute]
public virtual void set_Skip(string value);
}
public class Xunit.Sdk.DataDiscoverer : object {
    public virtual IEnumerable`1<Object[]> GetData(IAttributeInfo dataAttribute, IMethodInfo testMethod);
    public virtual bool SupportsDiscoveryEnumeration(IAttributeInfo dataAttribute, IMethodInfo testMethod);
}
[AttributeUsageAttribute("4")]
public class Xunit.Sdk.DataDiscovererAttribute : Attribute {
    public DataDiscovererAttribute(string typeName, string assemblyName);
}
public class Xunit.Sdk.ExceptionAggregator : object {
    private List`1<Exception> exceptions;
    public bool HasExceptions { get; }
    public ExceptionAggregator(ExceptionAggregator parent);
    public bool get_HasExceptions();
    public void Add(Exception ex);
    public void Aggregate(ExceptionAggregator aggregator);
    public void Clear();
    public void Run(Action code);
    [AsyncStateMachineAttribute("Xunit.Sdk.ExceptionAggregator/<RunAsync>d__9")]
public Task RunAsync(Func`1<Task> code);
    [AsyncStateMachineAttribute("Xunit.Sdk.ExceptionAggregator/<RunAsync>d__10`1")]
public Task`1<T> RunAsync(Func`1<Task`1<T>> code);
    public Exception ToException();
}
public interface Xunit.Sdk.IDataDiscoverer {
    public abstract virtual IEnumerable`1<Object[]> GetData(IAttributeInfo dataAttribute, IMethodInfo testMethod);
    public abstract virtual bool SupportsDiscoveryEnumeration(IAttributeInfo dataAttribute, IMethodInfo testMethod);
}
public interface Xunit.Sdk.IMessageBus {
    public abstract virtual bool QueueMessage(IMessageSinkMessage message);
}
public class Xunit.Sdk.InlineDataDiscoverer : object {
    public virtual IEnumerable`1<Object[]> GetData(IAttributeInfo dataAttribute, IMethodInfo testMethod);
    public virtual bool SupportsDiscoveryEnumeration(IAttributeInfo dataAttribute, IMethodInfo testMethod);
}
public interface Xunit.Sdk.ITestCaseOrderer {
    public abstract virtual IEnumerable`1<TTestCase> OrderTestCases(IEnumerable`1<TTestCase> testCases);
}
public interface Xunit.Sdk.ITestFrameworkAttribute {
}
public interface Xunit.Sdk.ITestFrameworkTypeDiscoverer {
    public abstract virtual Type GetTestFrameworkType(IAttributeInfo attribute);
}
public interface Xunit.Sdk.ITraitAttribute {
}
public interface Xunit.Sdk.ITraitDiscoverer {
    public abstract virtual IEnumerable`1<KeyValuePair`2<string, string>> GetTraits(IAttributeInfo traitAttribute);
}
public interface Xunit.Sdk.IXunitTestCase {
    public Exception InitializationException { get; }
    public IMethodInfo Method { get; }
    public int Timeout { get; }
    public abstract virtual Exception get_InitializationException();
    public abstract virtual IMethodInfo get_Method();
    public abstract virtual int get_Timeout();
    public abstract virtual Task`1<RunSummary> RunAsync(IMessageSink diagnosticMessageSink, IMessageBus messageBus, Object[] constructorArguments, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource);
}
public interface Xunit.Sdk.IXunitTestCaseDiscoverer {
    public abstract virtual IEnumerable`1<IXunitTestCase> Discover(ITestFrameworkDiscoveryOptions discoveryOptions, ITestMethod testMethod, IAttributeInfo factAttribute);
}
public interface Xunit.Sdk.IXunitTestCollectionFactory {
    public string DisplayName { get; }
    public abstract virtual string get_DisplayName();
    public abstract virtual ITestCollection Get(ITypeInfo testClass);
}
public class Xunit.Sdk.MemberDataDiscoverer : DataDiscoverer {
    public virtual bool SupportsDiscoveryEnumeration(IAttributeInfo dataAttribute, IMethodInfo testMethod);
}
[AttributeUsageAttribute("1")]
public class Xunit.Sdk.PlatformSpecificAssemblyAttribute : Attribute {
}
public class Xunit.Sdk.RunSummary : object {
    public int Total;
    public int Failed;
    public int Skipped;
    public decimal Time;
    public void Aggregate(RunSummary other);
}
[AttributeUsageAttribute("4")]
public class Xunit.Sdk.TestFrameworkDiscovererAttribute : Attribute {
    public TestFrameworkDiscovererAttribute(string typeName, string assemblyName);
}
public enum Xunit.Sdk.TestMethodDisplay : Enum {
    public int value__;
    public static TestMethodDisplay ClassAndMethod;
    public static TestMethodDisplay Method;
}
[FlagsAttribute]
public enum Xunit.Sdk.TestMethodDisplayOptions : Enum {
    public int value__;
    public static TestMethodDisplayOptions None;
    public static TestMethodDisplayOptions ReplaceUnderscoreWithSpace;
    public static TestMethodDisplayOptions UseOperatorMonikers;
    public static TestMethodDisplayOptions UseEscapeSequences;
    public static TestMethodDisplayOptions ReplacePeriodWithComma;
    public static TestMethodDisplayOptions All;
}
public class Xunit.Sdk.TraitDiscoverer : object {
    [IteratorStateMachineAttribute("Xunit.Sdk.TraitDiscoverer/<GetTraits>d__0")]
public virtual IEnumerable`1<KeyValuePair`2<string, string>> GetTraits(IAttributeInfo traitAttribute);
}
[AttributeUsageAttribute("4")]
public class Xunit.Sdk.TraitDiscovererAttribute : Attribute {
    public TraitDiscovererAttribute(string typeName, string assemblyName);
}
[AttributeUsageAttribute("4")]
public class Xunit.Sdk.XunitTestCaseDiscovererAttribute : Attribute {
    public XunitTestCaseDiscovererAttribute(string typeName, string assemblyName);
}
[AttributeUsageAttribute("5")]
public class Xunit.TestCaseOrdererAttribute : Attribute {
    public TestCaseOrdererAttribute(string ordererTypeName, string ordererAssemblyName);
}
[AttributeUsageAttribute("1")]
public class Xunit.TestCollectionOrdererAttribute : Attribute {
    public TestCollectionOrdererAttribute(string ordererTypeName, string ordererAssemblyName);
}
[TestFrameworkDiscovererAttribute("Xunit.Sdk.TestFrameworkTypeDiscoverer", "xunit.execution.{Platform}")]
[AttributeUsageAttribute("1")]
public class Xunit.TestFrameworkAttribute : Attribute {
    public TestFrameworkAttribute(string typeName, string assemblyName);
}
[XunitTestCaseDiscovererAttribute("Xunit.Sdk.TheoryDiscoverer", "xunit.execution.{Platform}")]
[AttributeUsageAttribute("64")]
public class Xunit.TheoryAttribute : FactAttribute {
}
public abstract class Xunit.TheoryData : object {
    private List`1<Object[]> data;
    public int Count { get; }
    public sealed virtual int get_Count();
    protected void AddRow(Object[] values);
    protected void AddRows(IEnumerable`1<Object[]> rows);
    public sealed virtual IEnumerator`1<Object[]> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Xunit.TheoryData`1 : TheoryData {
    public TheoryData`1(IEnumerable`1<T> values);
    public TheoryData`1(T[] values);
    public void Add(T p);
    public void AddRange(T[] values);
}
public class Xunit.TheoryData`10 : TheoryData {
    public void Add(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8, T9 p9, T10 p10);
}
public class Xunit.TheoryData`2 : TheoryData {
    public void Add(T1 p1, T2 p2);
}
public class Xunit.TheoryData`3 : TheoryData {
    public void Add(T1 p1, T2 p2, T3 p3);
}
public class Xunit.TheoryData`4 : TheoryData {
    public void Add(T1 p1, T2 p2, T3 p3, T4 p4);
}
public class Xunit.TheoryData`5 : TheoryData {
    public void Add(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5);
}
public class Xunit.TheoryData`6 : TheoryData {
    public void Add(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6);
}
public class Xunit.TheoryData`7 : TheoryData {
    public void Add(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7);
}
public class Xunit.TheoryData`8 : TheoryData {
    public void Add(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8);
}
public class Xunit.TheoryData`9 : TheoryData {
    public void Add(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8, T9 p9);
}
[TraitDiscovererAttribute("Xunit.Sdk.TraitDiscoverer", "xunit.core")]
[AttributeUsageAttribute("68")]
public class Xunit.TraitAttribute : Attribute {
    public TraitAttribute(string name, string value);
}
