public class Razorvine.Serpent.Ast : object {
    public INode Root;
    public virtual string ToString();
    public object GetData();
    public object GetData(Func`2<IDictionary, object> dictToInstance);
    public void Accept(INodeVisitor visitor);
}
public class Razorvine.Serpent.ComplexNumber : object {
    [CompilerGeneratedAttribute]
private double <Real>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Imaginary>k__BackingField;
    public double Real { get; }
    public double Imaginary { get; }
    public ComplexNumber(double r, double i);
    [CompilerGeneratedAttribute]
public double get_Real();
    [CompilerGeneratedAttribute]
public double get_Imaginary();
    public virtual string ToString();
    public double Magnitude();
    public static ComplexNumber op_Addition(ComplexNumber c1, ComplexNumber c2);
    public static ComplexNumber op_Subtraction(ComplexNumber c1, ComplexNumber c2);
    public static ComplexNumber op_Multiply(ComplexNumber c1, ComplexNumber c2);
    public static ComplexNumber op_Division(ComplexNumber c1, ComplexNumber c2);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(ComplexNumber lhs, ComplexNumber rhs);
    public static bool op_Inequality(ComplexNumber lhs, ComplexNumber rhs);
}
public class Razorvine.Serpent.DebugVisitor : object {
    private StringBuilder _result;
    private int _indent;
    public virtual string ToString();
    protected void Indent();
    public sealed virtual void Visit(ComplexNumberNode complex);
    public sealed virtual void Visit(DictNode dict);
    public sealed virtual void Visit(ListNode list);
    public sealed virtual void Visit(NoneNode none);
    public sealed virtual void Visit(IntegerNode value);
    public sealed virtual void Visit(LongNode value);
    public sealed virtual void Visit(DoubleNode value);
    public sealed virtual void Visit(BooleanNode value);
    public sealed virtual void Visit(StringNode value);
    public sealed virtual void Visit(DecimalNode value);
    public sealed virtual void Visit(SetNode setnode);
    public sealed virtual void Visit(TupleNode tuple);
}
public static class Razorvine.Serpent.LibraryVersion : object {
    public static string Version;
}
public class Razorvine.Serpent.ObjectifyVisitor : object {
    private Stack`1<object> _generated;
    private Func`2<IDictionary, object> _dictToInstance;
    public ObjectifyVisitor(Func`2<IDictionary, object> dictToInstance);
    public object GetObject();
    public sealed virtual void Visit(ComplexNumberNode complex);
    public sealed virtual void Visit(DictNode dict);
    public sealed virtual void Visit(ListNode list);
    public sealed virtual void Visit(NoneNode none);
    public sealed virtual void Visit(IntegerNode value);
    public sealed virtual void Visit(LongNode value);
    public sealed virtual void Visit(DoubleNode value);
    public sealed virtual void Visit(BooleanNode value);
    public sealed virtual void Visit(StringNode value);
    public sealed virtual void Visit(DecimalNode value);
    public sealed virtual void Visit(SetNode setnode);
    public sealed virtual void Visit(TupleNode tuple);
}
public class Razorvine.Serpent.ParseException : Exception {
    public ParseException(string message);
    public ParseException(string message, Exception innerException);
}
public class Razorvine.Serpent.Parser : object {
    private static string IntegerChars;
    private static string FloatChars;
    public Ast Parse(Byte[] serialized);
    public Ast Parse(string expression);
    private string ExtractFaultLocation(SeekableStringReader sr);
    private INode ParseExpr(SeekableStringReader sr);
    private INode ParseCompound(SeekableStringReader sr);
    private TupleNode ParseTuple(SeekableStringReader sr);
    private List`1<INode> ParseExprList(SeekableStringReader sr);
    private List`1<INode> ParseKeyValueList(SeekableStringReader sr);
    private KeyValueNode ParseKeyValue(SeekableStringReader sr);
    private SetNode ParseSet(SeekableStringReader sr);
    private ListNode ParseList(SeekableStringReader sr);
    private INode ParseDict(SeekableStringReader sr);
    public INode ParseSingle(SeekableStringReader sr);
    private INode ParseInt(SeekableStringReader sr);
    private PrimitiveNode`1<double> ParseFloat(SeekableStringReader sr);
    private ComplexNumberNode ParseComplex(SeekableStringReader sr);
    private double ParseImaginaryPart(SeekableStringReader sr);
    private PrimitiveNode`1<string> ParseString(SeekableStringReader sr);
    private PrimitiveNode`1<bool> ParseBool(SeekableStringReader sr);
    private NoneNode ParseNone(SeekableStringReader sr);
    private double ParseDouble(string numberstr);
    public static Byte[] ToBytes(object obj);
}
public class Razorvine.Serpent.SeekableStringReader : object {
    private string _str;
    private int _cursor;
    private int _bookmark;
    public SeekableStringReader(string str);
    public SeekableStringReader(SeekableStringReader parent);
    public bool HasMore();
    public char Peek();
    public string Peek(int count);
    public char Read();
    public string Read(int count);
    public string ReadUntil(Char[] sentinels);
    public string ReadWhile(string accepted);
    public void SkipWhitespace();
    public string Rest();
    public void Rewind(int count);
    public int Bookmark();
    public void FlipBack(int towhichbookmark);
    public void Sync(SeekableStringReader inner);
    public void Context(int crsr, int width, String& left, String& right);
    public sealed virtual void Dispose();
}
public class Razorvine.Serpent.Serializer : object {
    public bool Indent;
    public bool SetLiterals;
    public bool NamespaceInClassName;
    public int MaximumLevel;
    private static IDictionary`2<Type, Func`2<object, IDictionary>> ClassToDictRegistry;
    private static String[] Repr255;
    public Serializer(bool indent, bool setLiterals, bool namespaceInClassName);
    private static Serializer();
    public static void RegisterClass(Type clazz, Func`2<object, IDictionary> converter);
    public Byte[] Serialize(object obj);
    protected void Serialize(object obj, TextWriter tw, int level);
    protected void Serialize_tuple(ICollection array, TextWriter tw, int level);
    protected void Serialize_list(ICollection list, TextWriter tw, int level);
    protected int DictentryCompare(DictionaryEntry d1, DictionaryEntry d2);
    protected void Serialize_dict(IDictionary dict, TextWriter tw, int level);
    protected void Serialize_set(Object[] set, TextWriter tw, int level);
    protected void Serialize_sequence_elements(ICollection elements, bool trailingComma, TextWriter tw, int level);
    protected void Serialize_bytes(Byte[] data, TextWriter tw, int level);
    protected void Serialize_string(string str, TextWriter tw, int level);
    protected void Serialize_datetime(DateTime dt, TextWriter tw, int level);
    protected void Serialize_datetimeoffset(DateTimeOffset dto, TextWriter tw, int level);
    protected void Serialize_timespan(TimeSpan span, TextWriter tw, int level);
    protected void Serialize_exception(Exception exc, TextWriter tw, int level);
    protected void Serialize_guid(Guid guid, TextWriter tw, int level);
    protected void Serialize_decimal(decimal dec, TextWriter tw, int level);
    protected void Serialize_primitive(object obj, TextWriter tw, int level);
    protected void Serialize_complex(ComplexNumber cplx, TextWriter tw, int level);
    protected void Serialize_class(object obj, TextWriter tw, int level);
    protected Func`2<object, IDictionary> GetCustomConverter(Type obj_type);
}
