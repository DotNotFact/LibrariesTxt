[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal class Silk.NET.Windowing.Glfw.GlfwMonitor : object {
    private float _gamma;
    [CompilerGeneratedAttribute]
private Monitor* <Handle>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    public Monitor* Handle { get; }
    [NullableAttribute("1")]
public string Name { get; }
    public int Index { get; }
    public Rectangle`1<int> Bounds { get; }
    public VideoMode VideoMode { get; }
    public float Gamma { get; public set; }
    public GlfwMonitor(Monitor* monitor, int index);
    [CompilerGeneratedAttribute]
public Monitor* get_Handle();
    [NullableContextAttribute("1")]
public sealed virtual IWindow CreateWindow(WindowOptions opts);
    [NullableContextAttribute("1")]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Index();
    public sealed virtual Rectangle`1<int> get_Bounds();
    public sealed virtual VideoMode get_VideoMode();
    public sealed virtual float get_Gamma();
    public sealed virtual void set_Gamma(float value);
    [NullableContextAttribute("1")]
public sealed virtual IEnumerable`1<VideoMode> GetAllVideoModes();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Silk.NET.Windowing.Glfw.GlfwMonitorEnumerable : object {
    public sealed virtual IEnumerator`1<IMonitor> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Silk.NET.Windowing.Glfw.GlfwPlatform : object {
    [NullableAttribute("2")]
private IWindow _lastCreatedWindow;
    private Lazy`1<bool> _isApplicable;
    [CompilerGeneratedAttribute]
private bool <IsViewOnly>k__BackingField;
    private string Name { get; }
    public bool IsViewOnly { get; }
    public bool IsApplicable { get; }
    private string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsViewOnly();
    public sealed virtual bool get_IsApplicable();
    private static void ThrowUnsupported();
    public sealed virtual IWindow CreateWindow(WindowOptions options);
    public sealed virtual IView GetView(Nullable`1<ViewOptions> opts);
    public sealed virtual void ClearContexts();
    public sealed virtual IEnumerable`1<IMonitor> GetMonitors();
    public sealed virtual IMonitor GetMainMonitor();
    public sealed virtual bool IsSourceOfView(IView view);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Silk.NET.Windowing.Glfw.GlfwWindow : WindowImplementationBase {
    [NullableAttribute("1")]
internal Glfw _glfw;
    [NullableAttribute("0")]
internal WindowHandle* _glfwWindow;
    private WindowPosCallback _onMove;
    private WindowSizeCallback _onResize;
    private FramebufferSizeCallback _onFramebufferResize;
    private DropCallback _onFileDrop;
    private WindowCloseCallback _onClosing;
    private WindowFocusCallback _onFocusChanged;
    private WindowIconifyCallback _onMinimized;
    private WindowMaximizeCallback _onMaximized;
    private GlfwWindow _parent;
    private GlfwMonitor _initialMonitor;
    [NullableAttribute("0")]
private Vector2D`1<int> _nonFullscreenPosition;
    [NullableAttribute("0")]
private Vector2D`1<int> _nonFullscreenSize;
    [NullableAttribute("1")]
private string _localTitleCache;
    private GlfwContext _glContext;
    [NullableAttribute("1")]
private string _windowClass;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<Vector2D`1<int>> Move;
    [CompilerGeneratedAttribute]
private Action`1<WindowState> StateChanged;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<String[]> FileDrop;
    [CompilerGeneratedAttribute]
private IGLContext <SharedContext>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEventDriven>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<Vector2D`1<int>> Resize;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<Vector2D`1<int>> FramebufferResize;
    [CompilerGeneratedAttribute]
private Action Closing;
    [CompilerGeneratedAttribute]
private Action`1<bool> FocusChanged;
    [NullableAttribute("0")]
protected Vector2D`1<int> CoreSize { get; }
    [NullableAttribute("0")]
protected Rectangle`1<int> CoreBorderSize { get; }
    [NativeIntegerAttribute]
protected IntPtr CoreHandle { get; }
    protected IGLContext CoreGLContext { get; }
    protected IVkSurface CoreVkSurface { get; }
    protected bool CoreIsVisible { get; protected set; }
    [NullableAttribute("0")]
protected Vector2D`1<int> CorePosition { get; protected set; }
    [NullableAttribute("1")]
protected string CoreTitle { get; protected set; }
    protected WindowState CoreWindowState { get; protected set; }
    protected WindowBorder CoreWindowBorder { get; protected set; }
    protected bool CoreTopMost { get; protected set; }
    unknown bool IsClosingSettable {protected set; }
    [NullableAttribute("0")]
unknown Vector2D`1<int> SizeSettable {protected set; }
    public IWindowHost Parent { get; }
    public IGLContext SharedContext { get; }
    public string WindowClass { get; }
    public IMonitor Monitor { get; public set; }
    protected bool CoreIsClosing { get; }
    public VideoMode VideoMode { get; }
    public bool IsEventDriven { get; public set; }
    [NullableAttribute("0")]
public Vector2D`1<int> FramebufferSize { get; }
    public bool TopMost { get; public set; }
    public GlfwWindow(WindowOptions optionsCache, GlfwWindow parent, GlfwMonitor monitor);
    [NullableContextAttribute("0")]
protected virtual Vector2D`1<int> get_CoreSize();
    [NullableContextAttribute("0")]
protected virtual Rectangle`1<int> get_CoreBorderSize();
    protected virtual IntPtr get_CoreHandle();
    protected virtual void CoreReset();
    protected virtual IGLContext get_CoreGLContext();
    protected virtual IVkSurface get_CoreVkSurface();
    protected virtual bool get_CoreIsVisible();
    protected virtual void set_CoreIsVisible(bool value);
    [NullableContextAttribute("0")]
protected virtual Vector2D`1<int> get_CorePosition();
    [NullableContextAttribute("0")]
protected virtual void set_CorePosition(Vector2D`1<int> value);
    [NullableContextAttribute("1")]
protected virtual string get_CoreTitle();
    [NullableContextAttribute("1")]
protected virtual void set_CoreTitle(string value);
    protected virtual WindowState get_CoreWindowState();
    protected virtual void set_CoreWindowState(WindowState value);
    protected virtual WindowBorder get_CoreWindowBorder();
    protected virtual void set_CoreWindowBorder(WindowBorder value);
    protected virtual bool get_CoreTopMost();
    protected virtual void set_CoreTopMost(bool value);
    protected virtual void set_IsClosingSettable(bool value);
    [NullableContextAttribute("0")]
protected virtual void set_SizeSettable(Vector2D`1<int> value);
    protected virtual void CoreInitialize(WindowOptions opts);
    [CompilerGeneratedAttribute]
public virtual void add_Move(Action`1<Vector2D`1<int>> value);
    [CompilerGeneratedAttribute]
public virtual void remove_Move(Action`1<Vector2D`1<int>> value);
    [CompilerGeneratedAttribute]
public virtual void add_StateChanged(Action`1<WindowState> value);
    [CompilerGeneratedAttribute]
public virtual void remove_StateChanged(Action`1<WindowState> value);
    [CompilerGeneratedAttribute]
public virtual void add_FileDrop(Action`1<String[]> value);
    [CompilerGeneratedAttribute]
public virtual void remove_FileDrop(Action`1<String[]> value);
    [NullableContextAttribute("0")]
public virtual void SetWindowIcon(ReadOnlySpan`1<RawImage> icons);
    [NullableContextAttribute("1")]
public virtual IWindow CreateWindow(WindowOptions opts);
    public virtual IWindowHost get_Parent();
    [CompilerGeneratedAttribute]
public virtual IGLContext get_SharedContext();
    public virtual string get_WindowClass();
    public virtual IMonitor get_Monitor();
    public virtual void set_Monitor(IMonitor value);
    [NullableContextAttribute("0")]
private static int IndexOf(T** array, T* target, int count);
    protected virtual bool get_CoreIsClosing();
    public virtual VideoMode get_VideoMode();
    [CompilerGeneratedAttribute]
public virtual bool get_IsEventDriven();
    [CompilerGeneratedAttribute]
public virtual void set_IsEventDriven(bool value);
    [NullableContextAttribute("0")]
public virtual Vector2D`1<int> get_FramebufferSize();
    public virtual void DoEvents();
    public virtual void ContinueEvents();
    [NullableContextAttribute("1")]
public IntPtr GetProcAddress(string proc, Nullable`1<int> slot);
    [NullableContextAttribute("1")]
public bool TryGetProcAddress(string proc, IntPtr& addr, Nullable`1<int> slot);
    public virtual void Close();
    protected virtual void RegisterCallbacks();
    protected virtual void UnregisterCallbacks();
    public bool get_TopMost();
    public void set_TopMost(bool value);
    [NullableContextAttribute("1")]
protected virtual INativeWindow GetNativeWindow();
    [CompilerGeneratedAttribute]
public virtual void add_Resize(Action`1<Vector2D`1<int>> value);
    [CompilerGeneratedAttribute]
public virtual void remove_Resize(Action`1<Vector2D`1<int>> value);
    [CompilerGeneratedAttribute]
public virtual void add_FramebufferResize(Action`1<Vector2D`1<int>> value);
    [CompilerGeneratedAttribute]
public virtual void remove_FramebufferResize(Action`1<Vector2D`1<int>> value);
    [CompilerGeneratedAttribute]
public virtual void add_Closing(Action value);
    [CompilerGeneratedAttribute]
public virtual void remove_Closing(Action value);
    [CompilerGeneratedAttribute]
public virtual void add_FocusChanged(Action`1<bool> value);
    [CompilerGeneratedAttribute]
public virtual void remove_FocusChanged(Action`1<bool> value);
    protected virtual override void Finalize();
    [NullableContextAttribute("0")]
public sealed virtual VkNonDispatchableHandle Create(VkHandle instance, T* allocator);
    [NullableContextAttribute("0")]
public sealed virtual Byte** GetRequiredExtensions(UInt32& count);
    [CompilerGeneratedAttribute]
internal static void <get_CoreVkSurface>g__Throw|28_0();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static void <GetProcAddress>g__Throw|86_0(string proc);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <RegisterCallbacks>b__89_0(WindowHandle* window, int x, int y);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <RegisterCallbacks>b__89_1(WindowHandle* window, int width, int height);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <RegisterCallbacks>b__89_2(WindowHandle* window, int width, int height);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <RegisterCallbacks>b__89_3(WindowHandle* window);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <RegisterCallbacks>b__89_4(WindowHandle* window, bool isFocused);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <RegisterCallbacks>b__89_5(WindowHandle* window, bool isMinimized);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <RegisterCallbacks>b__89_6(WindowHandle* window, bool isMaximized);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <RegisterCallbacks>b__89_7(WindowHandle* window, int count, IntPtr paths);
}
public static class Silk.NET.Windowing.Glfw.GlfwWindowing : object {
    public static void RegisterPlatform();
    public static void Use();
    [NullableContextAttribute("1")]
public static bool IsViewGlfw(IView view);
    [NullableContextAttribute("1")]
public static Glfw GetExistingApi(IView view);
    public static WindowHandle* GetHandle(IView view);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsUnmanagedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NativeIntegerAttribute : Attribute {
    public Boolean[] TransformFlags;
    public NativeIntegerAttribute(Boolean[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
