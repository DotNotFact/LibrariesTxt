internal static class FxResources.System.IO.FileSystem.AccessControl.SR : object {
}
internal class Interop : object {
}
[ExtensionAttribute]
public static class System.IO.FileSystemAclExtensions : object {
    [ExtensionAttribute]
public static DirectorySecurity GetAccessControl(DirectoryInfo directoryInfo);
    [ExtensionAttribute]
public static DirectorySecurity GetAccessControl(DirectoryInfo directoryInfo, AccessControlSections includeSections);
    [ExtensionAttribute]
public static void SetAccessControl(DirectoryInfo directoryInfo, DirectorySecurity directorySecurity);
    [ExtensionAttribute]
public static FileSecurity GetAccessControl(FileInfo fileInfo);
    [ExtensionAttribute]
public static FileSecurity GetAccessControl(FileInfo fileInfo, AccessControlSections includeSections);
    [ExtensionAttribute]
public static void SetAccessControl(FileInfo fileInfo, FileSecurity fileSecurity);
    [ExtensionAttribute]
public static FileSecurity GetAccessControl(FileStream fileStream);
    [ExtensionAttribute]
[SecuritySafeCriticalAttribute]
public static void SetAccessControl(FileStream fileStream, FileSecurity fileSecurity);
}
internal static class System.NotImplemented : object {
    internal static Exception ByDesign { get; }
    internal static Exception get_ByDesign();
    internal static Exception ByDesignWithMessage(string message);
}
public abstract class System.Security.AccessControl.DirectoryObjectSecurity : ObjectSecurity {
    internal CommonSecurityDescriptor _securityDescriptor;
    protected DirectoryObjectSecurity(CommonSecurityDescriptor securityDescriptor);
    private static bool IsValidTargetTypeStatic(Type targetType);
    private AuthorizationRuleCollection GetRules(bool access, bool includeExplicit, bool includeInherited, Type targetType);
    private bool ModifyAccess(AccessControlModification modification, ObjectAccessRule rule, Boolean& modified);
    private bool ModifyAudit(AccessControlModification modification, ObjectAuditRule rule, Boolean& modified);
    public virtual AccessRule AccessRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type, Guid objectType, Guid inheritedObjectType);
    public virtual AuditRule AuditRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags, Guid objectType, Guid inheritedObjectType);
    protected virtual bool ModifyAccess(AccessControlModification modification, AccessRule rule, Boolean& modified);
    protected virtual bool ModifyAudit(AccessControlModification modification, AuditRule rule, Boolean& modified);
    protected void AddAccessRule(ObjectAccessRule rule);
    protected void SetAccessRule(ObjectAccessRule rule);
    protected void ResetAccessRule(ObjectAccessRule rule);
    protected bool RemoveAccessRule(ObjectAccessRule rule);
    protected void RemoveAccessRuleAll(ObjectAccessRule rule);
    protected void RemoveAccessRuleSpecific(ObjectAccessRule rule);
    protected void AddAuditRule(ObjectAuditRule rule);
    protected void SetAuditRule(ObjectAuditRule rule);
    protected bool RemoveAuditRule(ObjectAuditRule rule);
    protected void RemoveAuditRuleAll(ObjectAuditRule rule);
    protected void RemoveAuditRuleSpecific(ObjectAuditRule rule);
    public AuthorizationRuleCollection GetAccessRules(bool includeExplicit, bool includeInherited, Type targetType);
    public AuthorizationRuleCollection GetAuditRules(bool includeExplicit, bool includeInherited, Type targetType);
}
public class System.Security.AccessControl.DirectorySecurity : FileSystemSecurity {
    [SecuritySafeCriticalAttribute]
public DirectorySecurity(string name, AccessControlSections includeSections);
}
public class System.Security.AccessControl.FileSecurity : FileSystemSecurity {
    [SecuritySafeCriticalAttribute]
public FileSecurity(string fileName, AccessControlSections includeSections);
    [SecurityCriticalAttribute]
internal FileSecurity(SafeFileHandle handle, string fullPath, AccessControlSections includeSections);
}
public class System.Security.AccessControl.FileSystemAccessRule : AccessRule {
    public FileSystemRights FileSystemRights { get; }
    public FileSystemAccessRule(IdentityReference identity, FileSystemRights fileSystemRights, AccessControlType type);
    public FileSystemAccessRule(string identity, FileSystemRights fileSystemRights, AccessControlType type);
    public FileSystemAccessRule(IdentityReference identity, FileSystemRights fileSystemRights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type);
    public FileSystemAccessRule(string identity, FileSystemRights fileSystemRights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type);
    internal FileSystemAccessRule(IdentityReference identity, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type);
    public FileSystemRights get_FileSystemRights();
    internal static int AccessMaskFromRights(FileSystemRights fileSystemRights, AccessControlType controlType);
    internal static FileSystemRights RightsFromAccessMask(int accessMask);
}
public class System.Security.AccessControl.FileSystemAuditRule : AuditRule {
    public FileSystemRights FileSystemRights { get; }
    public FileSystemAuditRule(IdentityReference identity, FileSystemRights fileSystemRights, AuditFlags flags);
    public FileSystemAuditRule(IdentityReference identity, FileSystemRights fileSystemRights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags);
    public FileSystemAuditRule(string identity, FileSystemRights fileSystemRights, AuditFlags flags);
    public FileSystemAuditRule(string identity, FileSystemRights fileSystemRights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags);
    internal FileSystemAuditRule(IdentityReference identity, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags);
    private static int AccessMaskFromRights(FileSystemRights fileSystemRights);
    public FileSystemRights get_FileSystemRights();
}
[FlagsAttribute]
public enum System.Security.AccessControl.FileSystemRights : Enum {
    public int value__;
    public static FileSystemRights ReadData;
    public static FileSystemRights ListDirectory;
    public static FileSystemRights WriteData;
    public static FileSystemRights CreateFiles;
    public static FileSystemRights AppendData;
    public static FileSystemRights CreateDirectories;
    public static FileSystemRights ReadExtendedAttributes;
    public static FileSystemRights WriteExtendedAttributes;
    public static FileSystemRights ExecuteFile;
    public static FileSystemRights Traverse;
    public static FileSystemRights DeleteSubdirectoriesAndFiles;
    public static FileSystemRights ReadAttributes;
    public static FileSystemRights WriteAttributes;
    public static FileSystemRights Delete;
    public static FileSystemRights ReadPermissions;
    public static FileSystemRights ChangePermissions;
    public static FileSystemRights TakeOwnership;
    public static FileSystemRights Synchronize;
    public static FileSystemRights FullControl;
    public static FileSystemRights Read;
    public static FileSystemRights ReadAndExecute;
    public static FileSystemRights Write;
    public static FileSystemRights Modify;
}
public abstract class System.Security.AccessControl.FileSystemSecurity : NativeObjectSecurity {
    private static ResourceType s_ResourceType;
    public Type AccessRightType { get; }
    public Type AccessRuleType { get; }
    public Type AuditRuleType { get; }
    [SecurityCriticalAttribute]
internal FileSystemSecurity(bool isContainer);
    [SecurityCriticalAttribute]
internal FileSystemSecurity(bool isContainer, string name, AccessControlSections includeSections, bool isDirectory);
    [SecurityCriticalAttribute]
internal FileSystemSecurity(bool isContainer, SafeFileHandle handle, AccessControlSections includeSections, bool isDirectory);
    [SecurityCriticalAttribute]
private static Exception _HandleErrorCode(int errorCode, string name, SafeHandle handle, object context);
    public sealed virtual AccessRule AccessRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type);
    public sealed virtual AuditRule AuditRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags);
    internal AccessControlSections GetAccessControlSectionsFromChanges();
    [SecurityCriticalAttribute]
internal void Persist(string fullPath);
    [SecuritySafeCriticalAttribute]
internal void Persist(SafeFileHandle handle, string fullPath);
    public void AddAccessRule(FileSystemAccessRule rule);
    public void SetAccessRule(FileSystemAccessRule rule);
    public void ResetAccessRule(FileSystemAccessRule rule);
    public bool RemoveAccessRule(FileSystemAccessRule rule);
    public void RemoveAccessRuleAll(FileSystemAccessRule rule);
    public void RemoveAccessRuleSpecific(FileSystemAccessRule rule);
    public void AddAuditRule(FileSystemAuditRule rule);
    public void SetAuditRule(FileSystemAuditRule rule);
    public bool RemoveAuditRule(FileSystemAuditRule rule);
    public void RemoveAuditRuleAll(FileSystemAuditRule rule);
    public void RemoveAuditRuleSpecific(FileSystemAuditRule rule);
    public virtual Type get_AccessRightType();
    public virtual Type get_AccessRuleType();
    public virtual Type get_AuditRuleType();
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    private static string s_resourcesName;
    private static ResourceManager ResourceManager { get; }
    internal static string AccessControl_InvalidAccessRuleType { get; }
    internal static string AccessControl_InvalidAuditRuleType { get; }
    internal static string AccessControl_InvalidHandle { get; }
    internal static string Arg_MustBeIdentityReferenceType { get; }
    internal static string Argument_InvalidEnumValue { get; }
    internal static string Argument_InvalidName { get; }
    internal static string ArgumentOutOfRange_Enum { get; }
    internal static string ObjectDisposed_FileClosed { get; }
    internal static Type ResourceType { get; }
    private static ResourceManager get_ResourceManager();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string get_AccessControl_InvalidAccessRuleType();
    internal static string get_AccessControl_InvalidAuditRuleType();
    internal static string get_AccessControl_InvalidHandle();
    internal static string get_Arg_MustBeIdentityReferenceType();
    internal static string get_Argument_InvalidEnumValue();
    internal static string get_Argument_InvalidName();
    internal static string get_ArgumentOutOfRange_Enum();
    internal static string get_ObjectDisposed_FileClosed();
    internal static Type get_ResourceType();
}
