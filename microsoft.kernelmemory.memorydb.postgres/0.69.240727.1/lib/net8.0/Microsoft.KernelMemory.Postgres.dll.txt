[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.KernelMemory.DependencyInjection : object {
    [ExtensionAttribute]
public static IServiceCollection AddPostgresAsMemoryDb(IServiceCollection services, PostgresConfig config);
    [ExtensionAttribute]
public static IServiceCollection AddPostgresAsMemoryDb(IServiceCollection services, string connString);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.KernelMemory.KernelMemoryBuilderExtensions : object {
    [ExtensionAttribute]
public static IKernelMemoryBuilder WithPostgresMemoryDb(IKernelMemoryBuilder builder, PostgresConfig config);
    [ExtensionAttribute]
public static IKernelMemoryBuilder WithPostgresMemoryDb(IKernelMemoryBuilder builder, string connString);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.KernelMemory.Postgres.PostgresDbClient : object {
    private static string PgErrUndefinedTable;
    private static string PgErrUniqueViolation;
    private static string PgErrTypeDoesNotExist;
    private static string PgErrDatabaseDoesNotExist;
    private ILogger _log;
    private NpgsqlDataSource _dataSource;
    private string _schema;
    private string _tableNamePrefix;
    private string _createTableSql;
    private string _colId;
    private string _colEmbedding;
    private string _colTags;
    private string _colContent;
    private string _colPayload;
    private string _columnsListNoEmbeddings;
    private string _columnsListWithEmbeddings;
    private bool _dbNamePresent;
    public PostgresDbClient(PostgresConfig config, ILoggerFactory loggerFactory);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.Postgres.PostgresDbClient/<DoesTableExistAsync>d__18")]
public Task`1<bool> DoesTableExistAsync(string tableName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.Postgres.PostgresDbClient/<CreateTableAsync>d__19")]
public Task CreateTableAsync(string tableName, int vectorSize, CancellationToken cancellationToken);
    [AsyncIteratorStateMachineAttribute("Microsoft.KernelMemory.Postgres.PostgresDbClient/<GetTablesAsync>d__20")]
public IAsyncEnumerable`1<string> GetTablesAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.Postgres.PostgresDbClient/<DeleteTableAsync>d__21")]
public Task DeleteTableAsync(string tableName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.Postgres.PostgresDbClient/<UpsertAsync>d__22")]
public Task UpsertAsync(string tableName, PostgresMemoryRecord record, CancellationToken cancellationToken);
    [AsyncIteratorStateMachineAttribute("Microsoft.KernelMemory.Postgres.PostgresDbClient/<GetSimilarAsync>d__23")]
public IAsyncEnumerable`1<ValueTuple`2<PostgresMemoryRecord, double>> GetSimilarAsync(string tableName, Vector target, double minSimilarity, string filterSql, Dictionary`2<string, object> sqlUserValues, int limit, int offset, bool withEmbeddings, CancellationToken cancellationToken);
    [AsyncIteratorStateMachineAttribute("Microsoft.KernelMemory.Postgres.PostgresDbClient/<GetListAsync>d__24")]
public IAsyncEnumerable`1<PostgresMemoryRecord> GetListAsync(string tableName, string filterSql, Dictionary`2<string, object> sqlUserValues, string orderBySql, int limit, int offset, bool withEmbeddings, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.Postgres.PostgresDbClient/<DeleteAsync>d__25")]
public Task DeleteAsync(string tableName, string id, CancellationToken cancellationToken);
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.Postgres.PostgresDbClient/<ConnectAsync>d__28")]
private Task`1<NpgsqlConnection> ConnectAsync(CancellationToken cancellationToken);
    private static string CleanContent(string input);
    private PostgresMemoryRecord ReadEntry(NpgsqlDataReader dataReader, bool withEmbeddings);
    private string WithSchemaAndTableNamePrefix(string tableName);
    private string WithTableNamePrefix(string tableName);
    private static bool IsDbNotFoundException(PostgresException e);
    private static bool IsTableNotFoundException(PostgresException e);
    private static bool IsVectorTypeDoesNotExistException(PostgresException e);
    private static long GenLockId(string resourceId);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.KernelMemory.Postgres.PostgresException : KernelMemoryException {
    public PostgresException(string message);
    public PostgresException(string message, Exception innerException);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExperimentalAttribute("KMEXP03")]
public class Microsoft.KernelMemory.Postgres.PostgresMemory : object {
    private ILogger`1<PostgresMemory> _log;
    private ITextEmbeddingGenerator _embeddingGenerator;
    private PostgresDbClient _db;
    private static Regex s_replaceIndexNameCharsRegex;
    private static string ValidSeparator;
    public PostgresMemory(PostgresConfig config, ITextEmbeddingGenerator embeddingGenerator, ILoggerFactory loggerFactory);
    private static PostgresMemory();
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.Postgres.PostgresMemory/<CreateIndexAsync>d__4")]
public sealed virtual Task CreateIndexAsync(string index, int vectorSize, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.Postgres.PostgresMemory/<GetIndexesAsync>d__5")]
public sealed virtual Task`1<IEnumerable`1<string>> GetIndexesAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.Postgres.PostgresMemory/<DeleteIndexAsync>d__6")]
public sealed virtual Task DeleteIndexAsync(string index, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.Postgres.PostgresMemory/<UpsertAsync>d__7")]
public sealed virtual Task`1<string> UpsertAsync(string index, MemoryRecord record, CancellationToken cancellationToken);
    [AsyncIteratorStateMachineAttribute("Microsoft.KernelMemory.Postgres.PostgresMemory/<GetSimilarListAsync>d__8")]
public sealed virtual IAsyncEnumerable`1<ValueTuple`2<MemoryRecord, double>> GetSimilarListAsync(string index, string text, ICollection`1<MemoryFilter> filters, double minRelevance, int limit, bool withEmbeddings, CancellationToken cancellationToken);
    [AsyncIteratorStateMachineAttribute("Microsoft.KernelMemory.Postgres.PostgresMemory/<GetListAsync>d__9")]
public sealed virtual IAsyncEnumerable`1<MemoryRecord> GetListAsync(string index, ICollection`1<MemoryFilter> filters, int limit, bool withEmbeddings, CancellationToken cancellationToken);
    public sealed virtual Task DeleteAsync(string index, MemoryRecord record, CancellationToken cancellationToken);
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    private static string NormalizeIndexName(string index);
    private static string NormalizeTableNamePrefix(string name);
    private ValueTuple`2<string, Dictionary`2<string, object>> PrepareSql(ICollection`1<MemoryFilter> filters);
}
public class Microsoft.KernelMemory.Postgres.PostgresMemoryFilter : MemoryFilter {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.KernelMemory.Postgres.PostgresMemoryRecord : object {
    private static JsonSerializerOptions s_jsonOptions;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Vector <Embedding>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Tags>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Payload>k__BackingField;
    public string Id { get; public set; }
    public Vector Embedding { get; public set; }
    public List`1<string> Tags { get; public set; }
    public string Content { get; public set; }
    public string Payload { get; public set; }
    private static PostgresMemoryRecord();
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public Vector get_Embedding();
    [CompilerGeneratedAttribute]
public void set_Embedding(Vector value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Tags();
    [CompilerGeneratedAttribute]
public void set_Tags(List`1<string> value);
    [CompilerGeneratedAttribute]
public string get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(string value);
    [CompilerGeneratedAttribute]
public string get_Payload();
    [CompilerGeneratedAttribute]
public void set_Payload(string value);
    public static MemoryRecord ToMemoryRecord(PostgresMemoryRecord pgRecord);
    public static PostgresMemoryRecord FromMemoryRecord(MemoryRecord record);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.KernelMemory.Postgres.PostgresSchema : object {
    public static string PlaceholdersTags;
    private static Regex s_validNameRegex;
    private static Regex s_validFieldNameRegex;
    private static PostgresSchema();
    public static void ValidateSchemaName(string name);
    public static void ValidateTableName(string name);
    public static void ValidateTableNamePrefix(string name);
    public static void ValidateFieldName(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.KernelMemory.PostgresConfig : object {
    public static string ColumnId;
    public static string ColumnEmbedding;
    public static string ColumnTags;
    public static string ColumnContent;
    public static string ColumnPayload;
    public static string DefaultSchema;
    public static string DefaultTableNamePrefix;
    [CompilerGeneratedAttribute]
private string <ConnectionString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableNamePrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Columns>k__BackingField;
    public static string SqlPlaceholdersTableName;
    public static string SqlPlaceholdersVectorSize;
    public static string SqlPlaceholdersLockId;
    [CompilerGeneratedAttribute]
private List`1<string> <CreateTableSql>k__BackingField;
    public string ConnectionString { get; public set; }
    public string Schema { get; public set; }
    public string TableNamePrefix { get; public set; }
    public Dictionary`2<string, string> Columns { get; public set; }
    public List`1<string> CreateTableSql { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ConnectionString();
    [CompilerGeneratedAttribute]
public void set_ConnectionString(string value);
    [CompilerGeneratedAttribute]
public string get_Schema();
    [CompilerGeneratedAttribute]
public void set_Schema(string value);
    [CompilerGeneratedAttribute]
public string get_TableNamePrefix();
    [CompilerGeneratedAttribute]
public void set_TableNamePrefix(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Columns();
    [CompilerGeneratedAttribute]
public void set_Columns(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_CreateTableSql();
    [CompilerGeneratedAttribute]
public void set_CreateTableSql(List`1<string> value);
    public void Validate();
}
