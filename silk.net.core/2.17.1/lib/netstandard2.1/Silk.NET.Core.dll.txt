[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
public class Silk.NET.Core.Attributes.CountAttribute : Attribute {
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Parameter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Computed>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Expression>k__BackingField;
    public int Count { get; public set; }
    public string Parameter { get; public set; }
    public string Computed { get; public set; }
    public string Expression { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
public void set_Count(int value);
    [CompilerGeneratedAttribute]
public string get_Parameter();
    [CompilerGeneratedAttribute]
public void set_Parameter(string value);
    [CompilerGeneratedAttribute]
public string get_Computed();
    [CompilerGeneratedAttribute]
public void set_Computed(string value);
    [CompilerGeneratedAttribute]
public string get_Expression();
    [CompilerGeneratedAttribute]
public void set_Expression(string value);
}
public class Silk.NET.Core.Attributes.ExtensionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public ExtensionAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    public static ExtensionAttribute GetExtensionAttribute(MemberInfo type);
}
public class Silk.NET.Core.Attributes.FlowAttribute : Attribute {
    [CompilerGeneratedAttribute]
private FlowDirection <Direction>k__BackingField;
    public FlowDirection Direction { get; }
    public FlowAttribute(FlowDirection flowDirection);
    [CompilerGeneratedAttribute]
public FlowDirection get_Direction();
}
[AttributeUsageAttribute("64")]
public class Silk.NET.Core.Attributes.InjectAttribute : Attribute {
    public InjectAttribute(SilkTouchStage silkTouchStage, string code);
}
[AttributeUsageAttribute("32767")]
public class Silk.NET.Core.Attributes.NativeNameAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Category>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Category { get; }
    public string Name { get; }
    public NativeNameAttribute(string category, string name);
    [CompilerGeneratedAttribute]
public string get_Category();
    [CompilerGeneratedAttribute]
public string get_Name();
}
public enum Silk.NET.Core.Attributes.SilkTouchStage : Enum {
    public int value__;
    public static SilkTouchStage None;
    public static SilkTouchStage Begin;
    public static SilkTouchStage PostInit;
    public static SilkTouchStage PostPin;
    public static SilkTouchStage PreLoad;
    public static SilkTouchStage PostLoad;
    public static SilkTouchStage End;
}
[AttributeUsageAttribute("10240")]
public class Silk.NET.Core.Attributes.UnmanagedTypeAttribute : Attribute {
    public UnmanagedTypeAttribute(UnmanagedType unmanagedType);
}
[IsReadOnlyAttribute]
public class Silk.NET.Core.Bool32 : ValueType {
    [CompilerGeneratedAttribute]
private UInt32 <Value>k__BackingField;
    public UInt32 Value { get; }
    public Bool32(UInt32 val);
    public Bool32(bool val);
    [CompilerGeneratedAttribute]
public UInt32 get_Value();
    public static bool op_Implicit(Bool32 val);
    public static UInt32 op_Implicit(Bool32 val);
    public static Bool32 op_Implicit(bool val);
    public static Bool32 op_Implicit(UInt32 val);
}
public class Silk.NET.Core.BreakneckLock : ValueType {
    private static MethodImplOptions MaxOpt;
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _acquired;
    private static int True { get; }
    private static int False { get; }
    public bool IsAcquired { get; }
    private static int get_True();
    private static int get_False();
    public static BreakneckLock Create();
    public bool get_IsAcquired();
    public void Enter(Boolean& taken);
    public void TryEnter(Boolean& taken);
    public void TryEnter(Boolean& taken, UInt32 iterations);
    public void TryEnter(Boolean& taken, TimeSpan timeout);
    public void Exit();
    public void Exit(bool insertMemBarrier);
    public void ExitWithBarrier();
    private bool TryAcquire();
}
public class Silk.NET.Core.Contexts.DefaultNativeContext : object {
    [CompilerGeneratedAttribute]
private UnmanagedLibrary <Library>k__BackingField;
    public UnmanagedLibrary Library { get; }
    public DefaultNativeContext(UnmanagedLibrary library);
    public DefaultNativeContext(string name);
    public DefaultNativeContext(String[] names);
    public DefaultNativeContext(string name, LibraryLoader loader);
    public DefaultNativeContext(String[] names, LibraryLoader loader);
    public DefaultNativeContext(string name, LibraryLoader loader, PathResolver pathResolver);
    public DefaultNativeContext(String[] names, LibraryLoader loader, PathResolver pathResolver);
    public static bool TryCreate(string name, DefaultNativeContext& context);
    [CompilerGeneratedAttribute]
public UnmanagedLibrary get_Library();
    public sealed virtual IntPtr GetProcAddress(string proc, Nullable`1<int> slot);
    public sealed virtual bool TryGetProcAddress(string proc, IntPtr& addr, Nullable`1<int> slot);
    public sealed virtual void Dispose();
}
public interface Silk.NET.Core.Contexts.IGLContext {
    [NativeIntegerAttribute]
public IntPtr Handle { get; }
    [NullableAttribute("2")]
public IGLContextSource Source { get; }
    public bool IsCurrent { get; }
    public abstract virtual IntPtr get_Handle();
    [NullableContextAttribute("2")]
public abstract virtual IGLContextSource get_Source();
    public abstract virtual bool get_IsCurrent();
    public abstract virtual void SwapInterval(int interval);
    public abstract virtual void SwapBuffers();
    public abstract virtual void MakeCurrent();
    public abstract virtual void Clear();
}
[NullableContextAttribute("2")]
public interface Silk.NET.Core.Contexts.IGLContextSource {
    public IGLContext GLContext { get; }
    public abstract virtual IGLContext get_GLContext();
}
public interface Silk.NET.Core.Contexts.INativeContext {
    public abstract virtual IntPtr GetProcAddress(string proc, Nullable`1<int> slot);
    public abstract virtual bool TryGetProcAddress(string proc, IntPtr& addr, Nullable`1<int> slot);
}
public interface Silk.NET.Core.Contexts.INativeWindow {
    public NativeWindowFlags Kind { get; }
    [NativeIntegerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Nullable`1<ValueTuple`2<IntPtr, UIntPtr>> X11 { get; }
    [NativeIntegerAttribute]
public Nullable`1<IntPtr> Cocoa { get; }
    [NativeIntegerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Nullable`1<ValueTuple`2<IntPtr, IntPtr>> Wayland { get; }
    [NativeIntegerAttribute]
public Nullable`1<IntPtr> WinRT { get; }
    [NativeIntegerAttribute]
[TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Nullable`1<ValueTuple`4<IntPtr, UInt32, UInt32, UInt32>> UIKit { get; }
    [NativeIntegerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Nullable`1<ValueTuple`3<IntPtr, IntPtr, IntPtr>> Win32 { get; }
    [NativeIntegerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Nullable`1<ValueTuple`2<IntPtr, IntPtr>> Vivante { get; }
    [NativeIntegerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Nullable`1<ValueTuple`2<IntPtr, IntPtr>> Android { get; }
    [NativeIntegerAttribute]
public Nullable`1<IntPtr> Glfw { get; }
    [NativeIntegerAttribute]
public Nullable`1<IntPtr> Sdl { get; }
    [NativeIntegerAttribute]
public Nullable`1<IntPtr> DXHandle { get; }
    [NativeIntegerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Nullable`1<ValueTuple`2<Nullable`1<IntPtr>, Nullable`1<IntPtr>>> EGL { get; }
    public abstract virtual NativeWindowFlags get_Kind();
    public abstract virtual Nullable`1<ValueTuple`2<IntPtr, UIntPtr>> get_X11();
    public abstract virtual Nullable`1<IntPtr> get_Cocoa();
    public abstract virtual Nullable`1<ValueTuple`2<IntPtr, IntPtr>> get_Wayland();
    public abstract virtual Nullable`1<IntPtr> get_WinRT();
    public abstract virtual Nullable`1<ValueTuple`4<IntPtr, UInt32, UInt32, UInt32>> get_UIKit();
    public abstract virtual Nullable`1<ValueTuple`3<IntPtr, IntPtr, IntPtr>> get_Win32();
    public abstract virtual Nullable`1<ValueTuple`2<IntPtr, IntPtr>> get_Vivante();
    public abstract virtual Nullable`1<ValueTuple`2<IntPtr, IntPtr>> get_Android();
    public abstract virtual Nullable`1<IntPtr> get_Glfw();
    public abstract virtual Nullable`1<IntPtr> get_Sdl();
    public abstract virtual Nullable`1<IntPtr> get_DXHandle();
    public abstract virtual Nullable`1<ValueTuple`2<Nullable`1<IntPtr>, Nullable`1<IntPtr>>> get_EGL();
}
[NullableContextAttribute("2")]
public interface Silk.NET.Core.Contexts.INativeWindowSource {
    public INativeWindow Native { get; }
    public abstract virtual INativeWindow get_Native();
}
public interface Silk.NET.Core.Contexts.IVkSurface {
    public abstract virtual VkNonDispatchableHandle Create(VkHandle instance, T* allocator);
    public abstract virtual Byte** GetRequiredExtensions(UInt32& count);
}
[NullableContextAttribute("2")]
public interface Silk.NET.Core.Contexts.IVkSurfaceSource {
    public IVkSurface VkSurface { get; }
    public abstract virtual IVkSurface get_VkSurface();
}
public class Silk.NET.Core.Contexts.LamdaNativeContext : ValueType {
    [NativeIntegerAttribute]
private Func`2<string, IntPtr> _getProcAddress;
    public LamdaNativeContext(Func`2<string, IntPtr> getProcAddress);
    public LamdaNativeContext(TryLoader getProcAddress);
    public sealed virtual IntPtr GetProcAddress(string proc, Nullable`1<int> slot);
    public sealed virtual bool TryGetProcAddress(string proc, IntPtr& addr, Nullable`1<int> slot);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
internal static void <GetProcAddress>g__Throw|4_0(string proc);
}
public class Silk.NET.Core.Contexts.MultiNativeContext : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private INativeContext[] <Contexts>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public INativeContext[] Contexts { get; public set; }
    public MultiNativeContext(INativeContext[] contexts);
    [CompilerGeneratedAttribute]
public INativeContext[] get_Contexts();
    [CompilerGeneratedAttribute]
public void set_Contexts(INativeContext[] value);
    [NullableContextAttribute("1")]
public sealed virtual IntPtr GetProcAddress(string proc, Nullable`1<int> slot);
    [NullableContextAttribute("1")]
public sealed virtual bool TryGetProcAddress(string proc, IntPtr& addr, Nullable`1<int> slot);
    public sealed virtual void Dispose();
}
[FlagsAttribute]
public enum Silk.NET.Core.Contexts.NativeWindowFlags : Enum {
    public ulong value__;
    public static NativeWindowFlags Glfw;
    public static NativeWindowFlags Sdl;
    public static NativeWindowFlags Win32;
    public static NativeWindowFlags X11;
    public static NativeWindowFlags DirectFB;
    public static NativeWindowFlags Cocoa;
    public static NativeWindowFlags UIKit;
    public static NativeWindowFlags Wayland;
    public static NativeWindowFlags WinRT;
    public static NativeWindowFlags Android;
    public static NativeWindowFlags Vivante;
    public static NativeWindowFlags OS2;
    public static NativeWindowFlags Haiku;
    public static NativeWindowFlags EGL;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Silk.NET.Core.Loader.DefaultPathResolver : PathResolver {
    [CompilerGeneratedAttribute]
private List`1<Func`2<string, IEnumerable`1<string>>> <Resolvers>k__BackingField;
    public static Func`2<string, IEnumerable`1<string>> PassthroughResolver;
    public static Func`2<string, IEnumerable`1<string>> BaseDirectoryResolver;
    public static Func`2<string, IEnumerable`1<string>> MainModuleDirectoryResolver;
    public static Func`2<string, IEnumerable`1<string>> RuntimesFolderResolver;
    public static Func`2<string, IEnumerable`1<string>> LinuxVersioningResolver;
    public static Func`2<string, IEnumerable`1<string>> MacVersioningResolver;
    public static Func`2<string, IEnumerable`1<string>> NativePackageResolver;
    private static String[] _linuxRiDs;
    public List`1<Func`2<string, IEnumerable`1<string>>> Resolvers { get; public set; }
    private static DefaultPathResolver();
    [CompilerGeneratedAttribute]
public List`1<Func`2<string, IEnumerable`1<string>>> get_Resolvers();
    [CompilerGeneratedAttribute]
public void set_Resolvers(List`1<Func`2<string, IEnumerable`1<string>>> value);
    public virtual IEnumerable`1<string> EnumeratePossibleLibraryLoadTargets(string name);
    [IteratorStateMachineAttribute("Silk.NET.Core.Loader.DefaultPathResolver/<GetLinuxPossibilities>d__13")]
private static IEnumerable`1<string> GetLinuxPossibilities(string name);
    [IteratorStateMachineAttribute("Silk.NET.Core.Loader.DefaultPathResolver/<GetMacPossibilities>d__14")]
private static IEnumerable`1<string> GetMacPossibilities(string name);
    [NullableContextAttribute("2")]
private static bool TryLocateNativeAssetFromDeps(string name, String& appLocalNativePath, String& depsResolvedPath);
    private static bool TryLocateNativeAssetInRuntimesFolder(string name, string baseFolder, String& result);
    private static string GuessFallbackRid(string actualRuntimeIdentifier);
    private static bool AddFallbacks(List`1<string> fallbacks, string rid, IReadOnlyList`1<RuntimeFallbacks> allFallbacks);
    private static string GetNugetPackagesRootDirectory();
    private static string GetUserDirectory();
    private static List`1<string> GetAllRuntimeIds(string currentRid, DependencyContext ctx);
    [CompilerGeneratedAttribute]
internal static bool <TryLocateNativeAssetInRuntimesFolder>g__Check|16_0(string name, string ridFolder, String& result);
}
internal static class Silk.NET.Core.Loader.Kernel32 : object {
    public static IntPtr LoadLibrary(string fileName);
    public static IntPtr GetProcAddress(IntPtr module, string procName);
    public static int FreeLibrary(IntPtr module);
}
internal static class Silk.NET.Core.Loader.Libc : object {
    private static string LibName;
    public static int RtldNow;
    public static IntPtr dlopen(string fileName, int flags);
    public static IntPtr dlsym(IntPtr handle, string name);
    public static int dlclose(IntPtr handle);
    public static string dlerror();
}
internal static class Silk.NET.Core.Loader.Libdl : object {
    private static string LibName;
    public static int RtldNow;
    public static IntPtr dlopen(string fileName, int flags);
    public static IntPtr dlsym(IntPtr handle, string name);
    public static int dlclose(IntPtr handle);
    public static string dlerror();
}
public abstract class Silk.NET.Core.Loader.LibraryLoader : object {
    public IntPtr LoadNativeLibrary(string name);
    public void RegisterDependencies(String[] names);
    private static void ThrowLibNotFound(string name, PathResolver resolver);
    public bool TryLoadNativeLibrary(string name, IntPtr& result);
    public IntPtr LoadNativeLibrary(String[] names);
    private static void ThrowLibNotFoundAny(String[] names, PathResolver pathResolver);
    public bool TryLoadNativeLibrary(String[] names, IntPtr& result);
    public IntPtr LoadNativeLibrary(string name, PathResolver pathResolver);
    private static void ThrowParameterNotNullOrEmpty(string param);
    public bool TryLoadNativeLibrary(string name, PathResolver pathResolver, IntPtr& result);
    public IntPtr LoadNativeLibrary(String[] names, PathResolver pathResolver);
    public bool TryLoadNativeLibrary(String[] names, PathResolver pathResolver, IntPtr& result);
    private IntPtr LoadWithResolver(string name, PathResolver pathResolver);
    public IntPtr LoadFunctionPointer(IntPtr handle, string functionName);
    public bool TryLoadFunctionPointer(IntPtr handle, string functionName, IntPtr& pfn);
    private static void ThrowSymbolLoading(string functionName);
    public void FreeNativeLibrary(IntPtr handle);
    protected abstract virtual IntPtr CoreLoadNativeLibrary(string name);
    protected abstract virtual void CoreFreeNativeLibrary(IntPtr handle);
    protected abstract virtual IntPtr CoreLoadFunctionPointer(IntPtr handle, string functionName);
    public static LibraryLoader GetPlatformDefaultLoader();
    private static void PlatformNotSupported();
}
public abstract class Silk.NET.Core.Loader.PathResolver : object {
    [CompilerGeneratedAttribute]
private static PathResolver <Default>k__BackingField;
    public static PathResolver Default { get; }
    private static PathResolver();
    [CompilerGeneratedAttribute]
public static PathResolver get_Default();
    public abstract virtual IEnumerable`1<string> EnumeratePossibleLibraryLoadTargets(string name);
}
public abstract class Silk.NET.Core.Loader.SearchPathContainer : object {
    [CompilerGeneratedAttribute]
private static UnderlyingPlatform <Platform>k__BackingField;
    public static UnderlyingPlatform Platform { get; public set; }
    public String[] Windows64 { get; }
    public String[] Windows86 { get; }
    public String[] Linux { get; }
    public String[] MacOS { get; }
    public String[] Android { get; }
    public String[] IOS { get; }
    private static SearchPathContainer();
    [CompilerGeneratedAttribute]
public static UnderlyingPlatform get_Platform();
    [CompilerGeneratedAttribute]
public static void set_Platform(UnderlyingPlatform value);
    public abstract virtual String[] get_Windows64();
    public abstract virtual String[] get_Windows86();
    public abstract virtual String[] get_Linux();
    public abstract virtual String[] get_MacOS();
    public virtual String[] get_Android();
    public virtual String[] get_IOS();
    public String[] GetLibraryNames();
    [ObsoleteAttribute("This method is obsolete! Use GetLibraryNames")]
public string GetLibraryName();
    private static String[] ThrowInvalidPlatform();
}
public class Silk.NET.Core.Loader.SymbolLoadingException : Exception {
    public SymbolLoadingException(string symbol);
    public SymbolLoadingException(string symbol, string msg);
}
public enum Silk.NET.Core.Loader.UnderlyingPlatform : Enum {
    public int value__;
    public static UnderlyingPlatform Unknown;
    public static UnderlyingPlatform Windows64;
    public static UnderlyingPlatform Windows86;
    public static UnderlyingPlatform Linux;
    public static UnderlyingPlatform Android;
    public static UnderlyingPlatform MacOS;
    public static UnderlyingPlatform IOS;
}
public class Silk.NET.Core.Loader.UnmanagedLibrary : object {
    private static LibraryLoader SPlatformDefaultLoader;
    private LibraryLoader _loader;
    [NativeIntegerAttribute]
[CompilerGeneratedAttribute]
private IntPtr <Handle>k__BackingField;
    [NativeIntegerAttribute]
public IntPtr Handle { get; }
    public UnmanagedLibrary(string name);
    public UnmanagedLibrary(String[] names);
    public UnmanagedLibrary(string name, LibraryLoader loader);
    public UnmanagedLibrary(String[] names, LibraryLoader loader);
    private UnmanagedLibrary(LibraryLoader loader, IntPtr handle);
    public UnmanagedLibrary(string name, LibraryLoader loader, PathResolver pathResolver);
    public UnmanagedLibrary(String[] names, LibraryLoader loader, PathResolver pathResolver);
    private static UnmanagedLibrary();
    public static bool TryCreate(string name, LibraryLoader loader, PathResolver pathResolver, UnmanagedLibrary& library);
    [CompilerGeneratedAttribute]
public IntPtr get_Handle();
    public sealed virtual void Dispose();
    public T LoadFunction(string name);
    [NullableContextAttribute("1")]
public bool TryLoadFunction(string name, T& pfn);
    public IntPtr LoadFunction(string name);
    public bool TryLoadFunction(string name, IntPtr& pfn);
}
public class Silk.NET.Core.Native.ComObject : object {
    [CompilerGeneratedAttribute]
private IUnknown* <Handle>k__BackingField;
    public object Value { get; }
    public object UniqueValue { get; }
    public IUnknown* Handle { get; public set; }
    public ComObject(object o);
    public static ComObject FromPtr(IUnknown* ptr);
    public object get_Value();
    public object get_UniqueValue();
    [CompilerGeneratedAttribute]
public IUnknown* get_Handle();
    [CompilerGeneratedAttribute]
public void set_Handle(IUnknown* value);
    [NullableContextAttribute("2")]
public int QueryInterface(Guid& riid, ComObject& comObject);
    public UInt32 AddRef();
    public UInt32 Release();
    private void ReleaseUnmanagedResources();
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
}
public static class Silk.NET.Core.Native.ComPtr : object {
    public static ComPtr`1<TTo> Downcast(ComPtr`1<TFrom> og);
}
public class Silk.NET.Core.Native.ComPtr`1 : ValueType {
    public T* Handle;
    public ComPtr`1(T* other);
    public ComPtr`1(ComPtr`1<T> other);
    public ComPtr`1(ComObject obj);
    public static ComPtr`1<T> op_Implicit(T* other);
    public static T* op_Implicit(ComPtr`1<T> this);
    public ComObject AsComObject();
    [IsReadOnlyAttribute]
private void AddRef();
    public UInt32 Release();
    public T* Detach();
    [IsReadOnlyAttribute]
public T** GetAddressOf();
    [IsReadOnlyAttribute]
public T*& GetPinnableReference();
    [IsReadOnlyAttribute]
public T& Get();
    public sealed virtual void Dispose();
    public sealed virtual Void*** AsVtblPtr();
}
[ExtensionAttribute]
public static class Silk.NET.Core.Native.D3D10BlobVtblExtensions : object {
    [ExtensionAttribute]
public static int QueryInterface(ComPtr`1<ID3D10Blob> thisVtbl, Guid* riid, Void** ppvObject);
    [ExtensionAttribute]
public static int QueryInterface(ComPtr`1<ID3D10Blob> thisVtbl, Guid* riid, Void*& ppvObject);
    [ExtensionAttribute]
public static int QueryInterface(ComPtr`1<ID3D10Blob> thisVtbl, Guid& riid, Void** ppvObject);
    [ExtensionAttribute]
public static int QueryInterface(ComPtr`1<ID3D10Blob> thisVtbl, Guid& riid, Void*& ppvObject);
    [ExtensionAttribute]
public static UInt32 AddRef(ComPtr`1<ID3D10Blob> thisVtbl);
    [ExtensionAttribute]
public static UInt32 Release(ComPtr`1<ID3D10Blob> thisVtbl);
    [ExtensionAttribute]
public static Void* GetBufferPointer(ComPtr`1<ID3D10Blob> thisVtbl);
    [ExtensionAttribute]
public static UIntPtr GetBufferSize(ComPtr`1<ID3D10Blob> thisVtbl);
    [ExtensionAttribute]
public static int QueryInterface(ComPtr`1<ID3D10Blob> thisVtbl, ComPtr`1& ppvObject);
    [ExtensionAttribute]
public static int QueryInterface(ComPtr`1<ID3D10Blob> thisVtbl, Span`1<Guid> riid, Void** ppvObject);
    [ExtensionAttribute]
public static int QueryInterface(ComPtr`1<ID3D10Blob> thisVtbl, Span`1<Guid> riid, Void*& ppvObject);
    [ExtensionAttribute]
public static ComPtr`1<TI0> QueryInterface(ComPtr`1<ID3D10Blob> thisVtbl);
}
[FlagsAttribute]
[NativeNameAttribute("Name", "_D3D_CBUFFER_TYPE")]
public enum Silk.NET.Core.Native.D3DCBufferType : Enum {
    public int value__;
    [NativeNameAttribute("Name", "D3D_CT_CBUFFER")]
public static D3DCBufferType D3DCTCbuffer;
    [NativeNameAttribute("Name", "D3D_CT_TBUFFER")]
public static D3DCBufferType D3DCTTbuffer;
    [NativeNameAttribute("Name", "D3D_CT_INTERFACE_POINTERS")]
public static D3DCBufferType D3DCTInterfacePointers;
    [NativeNameAttribute("Name", "D3D_CT_RESOURCE_BIND_INFO")]
public static D3DCBufferType D3DCTResourceBindInfo;
    [NativeNameAttribute("Name", "D3D10_CT_CBUFFER")]
public static D3DCBufferType D3D10CTCbuffer;
    [NativeNameAttribute("Name", "D3D10_CT_TBUFFER")]
public static D3DCBufferType D3D10CTTbuffer;
    [NativeNameAttribute("Name", "D3D11_CT_CBUFFER")]
public static D3DCBufferType D3D11CTCbuffer;
    [NativeNameAttribute("Name", "D3D11_CT_TBUFFER")]
public static D3DCBufferType D3D11CTTbuffer;
    [NativeNameAttribute("Name", "D3D11_CT_INTERFACE_POINTERS")]
public static D3DCBufferType D3D11CTInterfacePointers;
    [NativeNameAttribute("Name", "D3D11_CT_RESOURCE_BIND_INFO")]
public static D3DCBufferType D3D11CTResourceBindInfo;
}
public class Silk.NET.Core.Native.D3DCommon : object {
    [NativeNameAttribute("Type", "int")]
[NativeNameAttribute("Name", "__REQUIRED_RPCNDR_H_VERSION__")]
public static int RequiredRpcndrHVersion;
    [NativeNameAttribute("Type", "int")]
[NativeNameAttribute("Name", "__REQUIRED_RPCSAL_H_VERSION__")]
public static int RequiredRpcsalHVersion;
    [NativeNameAttribute("Type", "int")]
[NativeNameAttribute("Name", "D3D_FL9_1_REQ_TEXTURE1D_U_DIMENSION")]
public static int D3DFL91ReqTexture1DUDimension;
    [NativeNameAttribute("Type", "int")]
[NativeNameAttribute("Name", "D3D_FL9_3_REQ_TEXTURE1D_U_DIMENSION")]
public static int D3DFL93ReqTexture1DUDimension;
    [NativeNameAttribute("Type", "int")]
[NativeNameAttribute("Name", "D3D_FL9_1_REQ_TEXTURE2D_U_OR_V_DIMENSION")]
public static int D3DFL91ReqTexture2DUOrVDimension;
    [NativeNameAttribute("Type", "int")]
[NativeNameAttribute("Name", "D3D_FL9_3_REQ_TEXTURE2D_U_OR_V_DIMENSION")]
public static int D3DFL93ReqTexture2DUOrVDimension;
    [NativeNameAttribute("Type", "int")]
[NativeNameAttribute("Name", "D3D_FL9_1_REQ_TEXTURECUBE_DIMENSION")]
public static int D3DFL91ReqTexturecubeDimension;
    [NativeNameAttribute("Type", "int")]
[NativeNameAttribute("Name", "D3D_FL9_3_REQ_TEXTURECUBE_DIMENSION")]
public static int D3DFL93ReqTexturecubeDimension;
    [NativeNameAttribute("Type", "int")]
[NativeNameAttribute("Name", "D3D_FL9_1_REQ_TEXTURE3D_U_V_OR_W_DIMENSION")]
public static int D3DFL91ReqTexture3DUVOrWDimension;
    [NativeNameAttribute("Type", "int")]
[NativeNameAttribute("Name", "D3D_FL9_1_DEFAULT_MAX_ANISOTROPY")]
public static int D3DFL91DefaultMaxAnisotropy;
    [NativeNameAttribute("Type", "int")]
[NativeNameAttribute("Name", "D3D_FL9_1_IA_PRIMITIVE_MAX_COUNT")]
public static int D3DFL91IAPrimitiveMaxCount;
    [NativeNameAttribute("Type", "int")]
[NativeNameAttribute("Name", "D3D_FL9_2_IA_PRIMITIVE_MAX_COUNT")]
public static int D3DFL92IAPrimitiveMaxCount;
    [NativeNameAttribute("Type", "int")]
[NativeNameAttribute("Name", "D3D_FL9_1_SIMULTANEOUS_RENDER_TARGET_COUNT")]
public static int D3DFL91SimultaneousRenderTargetCount;
    [NativeNameAttribute("Type", "int")]
[NativeNameAttribute("Name", "D3D_FL9_3_SIMULTANEOUS_RENDER_TARGET_COUNT")]
public static int D3DFL93SimultaneousRenderTargetCount;
    [NativeNameAttribute("Type", "int")]
[NativeNameAttribute("Name", "D3D_FL9_1_MAX_TEXTURE_REPEAT")]
public static int D3DFL91MaxTextureRepeat;
    [NativeNameAttribute("Type", "int")]
[NativeNameAttribute("Name", "D3D_FL9_2_MAX_TEXTURE_REPEAT")]
public static int D3DFL92MaxTextureRepeat;
    [NativeNameAttribute("Type", "int")]
[NativeNameAttribute("Name", "D3D_FL9_3_MAX_TEXTURE_REPEAT")]
public static int D3DFL93MaxTextureRepeat;
    [NativeNameAttribute("Type", "int")]
[NativeNameAttribute("Name", "D3D_SHADER_FEATURE_DOUBLES")]
public static int D3DShaderFeatureDoubles;
    [NativeNameAttribute("Type", "int")]
[NativeNameAttribute("Name", "D3D_SHADER_FEATURE_COMPUTE_SHADERS_PLUS_RAW_AND_STRUCTURED_BUFFERS_VIA_SHADER_4_X")]
public static int D3DShaderFeatureComputeShadersPlusRawAndStructuredBuffersViaShader4X;
    [NativeNameAttribute("Type", "int")]
[NativeNameAttribute("Name", "D3D_SHADER_FEATURE_UAVS_AT_EVERY_STAGE")]
public static int D3DShaderFeatureUavsATEveryStage;
    [NativeNameAttribute("Type", "int")]
[NativeNameAttribute("Name", "D3D_SHADER_FEATURE_64_UAVS")]
public static int D3DShaderFeature64Uavs;
    [NativeNameAttribute("Type", "int")]
[NativeNameAttribute("Name", "D3D_SHADER_FEATURE_MINIMUM_PRECISION")]
public static int D3DShaderFeatureMinimumPrecision;
    [NativeNameAttribute("Type", "int")]
[NativeNameAttribute("Name", "D3D_SHADER_FEATURE_11_1_DOUBLE_EXTENSIONS")]
public static int D3DShaderFeature111DoubleExtensions;
    [NativeNameAttribute("Type", "int")]
[NativeNameAttribute("Name", "D3D_SHADER_FEATURE_11_1_SHADER_EXTENSIONS")]
public static int D3DShaderFeature111ShaderExtensions;
    [NativeNameAttribute("Type", "int")]
[NativeNameAttribute("Name", "D3D_SHADER_FEATURE_LEVEL_9_COMPARISON_FILTERING")]
public static int D3DShaderFeatureLevel9ComparisonFiltering;
    [NativeNameAttribute("Type", "int")]
[NativeNameAttribute("Name", "D3D_SHADER_FEATURE_TILED_RESOURCES")]
public static int D3DShaderFeatureTiledResources;
    [NativeNameAttribute("Type", "int")]
[NativeNameAttribute("Name", "D3D_SHADER_FEATURE_STENCIL_REF")]
public static int D3DShaderFeatureStencilRef;
    [NativeNameAttribute("Type", "int")]
[NativeNameAttribute("Name", "D3D_SHADER_FEATURE_INNER_COVERAGE")]
public static int D3DShaderFeatureInnerCoverage;
    [NativeNameAttribute("Type", "int")]
[NativeNameAttribute("Name", "D3D_SHADER_FEATURE_TYPED_UAV_LOAD_ADDITIONAL_FORMATS")]
public static int D3DShaderFeatureTypedUavLoadAdditionalFormats;
    [NativeNameAttribute("Type", "int")]
[NativeNameAttribute("Name", "D3D_SHADER_FEATURE_ROVS")]
public static int D3DShaderFeatureRovs;
    [NativeNameAttribute("Type", "int")]
[NativeNameAttribute("Name", "D3D_SHADER_FEATURE_VIEWPORT_AND_RT_ARRAY_INDEX_FROM_ANY_SHADER_FEEDING_RASTERIZER")]
public static int D3DShaderFeatureViewportAndRTArrayIndexFromAnyShaderFeedingRasterizer;
    [NativeNameAttribute("Type", "int")]
[NativeNameAttribute("Name", "D3D_SHADER_FEATURE_WAVE_OPS")]
public static int D3DShaderFeatureWaveOps;
    [NativeNameAttribute("Type", "int")]
[NativeNameAttribute("Name", "D3D_SHADER_FEATURE_INT64_OPS")]
public static int D3DShaderFeatureInt64Ops;
    [NativeNameAttribute("Type", "int")]
[NativeNameAttribute("Name", "D3D_SHADER_FEATURE_VIEW_ID")]
public static int D3DShaderFeatureViewID;
    [NativeNameAttribute("Type", "int")]
[NativeNameAttribute("Name", "D3D_SHADER_FEATURE_BARYCENTRICS")]
public static int D3DShaderFeatureBarycentrics;
    [NativeNameAttribute("Type", "int")]
[NativeNameAttribute("Name", "D3D_SHADER_FEATURE_NATIVE_16BIT_OPS")]
public static int D3DShaderFeatureNative16BitOps;
    [NativeNameAttribute("Type", "int")]
[NativeNameAttribute("Name", "D3D_SHADER_FEATURE_SHADING_RATE")]
public static int D3DShaderFeatureShadingRate;
    [NativeNameAttribute("Type", "int")]
[NativeNameAttribute("Name", "D3D_SHADER_FEATURE_RAYTRACING_TIER_1_1")]
public static int D3DShaderFeatureRaytracingTier11;
    [NativeNameAttribute("Type", "int")]
[NativeNameAttribute("Name", "D3D_SHADER_FEATURE_SAMPLER_FEEDBACK")]
public static int D3DShaderFeatureSamplerFeedback;
    [NativeNameAttribute("Type", "int")]
[NativeNameAttribute("Name", "D3D_SHADER_FEATURE_ATOMIC_INT64_ON_TYPED_RESOURCE")]
public static int D3DShaderFeatureAtomicInt64OnTypedResource;
    [NativeNameAttribute("Type", "int")]
[NativeNameAttribute("Name", "D3D_SHADER_FEATURE_ATOMIC_INT64_ON_GROUP_SHARED")]
public static int D3DShaderFeatureAtomicInt64OnGroupShared;
    [NativeNameAttribute("Type", "int")]
[NativeNameAttribute("Name", "D3D_SHADER_FEATURE_DERIVATIVES_IN_MESH_AND_AMPLIFICATION_SHADERS")]
public static int D3DShaderFeatureDerivativesInMeshAndAmplificationShaders;
    [NativeNameAttribute("Type", "int")]
[NativeNameAttribute("Name", "D3D_SHADER_FEATURE_RESOURCE_DESCRIPTOR_HEAP_INDEXING")]
public static int D3DShaderFeatureResourceDescriptorHeapIndexing;
    [NativeNameAttribute("Type", "int")]
[NativeNameAttribute("Name", "D3D_SHADER_FEATURE_SAMPLER_DESCRIPTOR_HEAP_INDEXING")]
public static int D3DShaderFeatureSamplerDescriptorHeapIndexing;
    [NativeNameAttribute("Type", "int")]
[NativeNameAttribute("Name", "D3D_SHADER_FEATURE_WAVE_MMA")]
public static int D3DShaderFeatureWaveMma;
    [NativeNameAttribute("Type", "int")]
[NativeNameAttribute("Name", "D3D_SHADER_FEATURE_ATOMIC_INT64_ON_DESCRIPTOR_HEAP_RESOURCE")]
public static int D3DShaderFeatureAtomicInt64OnDescriptorHeapResource;
    [NativeNameAttribute("Type", "int")]
[NativeNameAttribute("Name", "D3D_COMPONENT_MASK_X")]
public static int D3DComponentMaskX;
    [NativeNameAttribute("Type", "int")]
[NativeNameAttribute("Name", "D3D_COMPONENT_MASK_Y")]
public static int D3DComponentMaskY;
    [NativeNameAttribute("Type", "int")]
[NativeNameAttribute("Name", "D3D_COMPONENT_MASK_Z")]
public static int D3DComponentMaskZ;
    [NativeNameAttribute("Type", "int")]
[NativeNameAttribute("Name", "D3D_COMPONENT_MASK_W")]
public static int D3DComponentMaskW;
}
[ExtensionAttribute]
public static class Silk.NET.Core.Native.D3DDestructionNotifierVtblExtensions : object {
    [ExtensionAttribute]
public static int QueryInterface(ComPtr`1<ID3DDestructionNotifier> thisVtbl, Guid* riid, Void** ppvObject);
    [ExtensionAttribute]
public static int QueryInterface(ComPtr`1<ID3DDestructionNotifier> thisVtbl, Guid* riid, Void*& ppvObject);
    [ExtensionAttribute]
public static int QueryInterface(ComPtr`1<ID3DDestructionNotifier> thisVtbl, Guid& riid, Void** ppvObject);
    [ExtensionAttribute]
public static int QueryInterface(ComPtr`1<ID3DDestructionNotifier> thisVtbl, Guid& riid, Void*& ppvObject);
    [ExtensionAttribute]
public static UInt32 AddRef(ComPtr`1<ID3DDestructionNotifier> thisVtbl);
    [ExtensionAttribute]
public static UInt32 Release(ComPtr`1<ID3DDestructionNotifier> thisVtbl);
    [ExtensionAttribute]
public static int RegisterDestructionCallback(ComPtr`1<ID3DDestructionNotifier> thisVtbl, PfnDestructionCallback callbackFn, Void* pData, UInt32* pCallbackID);
    [ExtensionAttribute]
public static int RegisterDestructionCallback(ComPtr`1<ID3DDestructionNotifier> thisVtbl, PfnDestructionCallback callbackFn, Void* pData, UInt32& pCallbackID);
    [ExtensionAttribute]
public static int RegisterDestructionCallback(ComPtr`1<ID3DDestructionNotifier> thisVtbl, PfnDestructionCallback callbackFn, T0& pData, UInt32* pCallbackID);
    [ExtensionAttribute]
public static int RegisterDestructionCallback(ComPtr`1<ID3DDestructionNotifier> thisVtbl, PfnDestructionCallback callbackFn, T0& pData, UInt32& pCallbackID);
    [ExtensionAttribute]
public static int UnregisterDestructionCallback(ComPtr`1<ID3DDestructionNotifier> thisVtbl, UInt32 callbackID);
    [ExtensionAttribute]
public static int QueryInterface(ComPtr`1<ID3DDestructionNotifier> thisVtbl, ComPtr`1& ppvObject);
    [ExtensionAttribute]
public static int QueryInterface(ComPtr`1<ID3DDestructionNotifier> thisVtbl, Span`1<Guid> riid, Void** ppvObject);
    [ExtensionAttribute]
public static int QueryInterface(ComPtr`1<ID3DDestructionNotifier> thisVtbl, Span`1<Guid> riid, Void*& ppvObject);
    [ExtensionAttribute]
public static int RegisterDestructionCallback(ComPtr`1<ID3DDestructionNotifier> thisVtbl, PfnDestructionCallback callbackFn, Void* pData, Span`1<UInt32> pCallbackID);
    [ExtensionAttribute]
public static int RegisterDestructionCallback(ComPtr`1<ID3DDestructionNotifier> thisVtbl, PfnDestructionCallback callbackFn, Span`1<T0> pData, UInt32* pCallbackID);
    [ExtensionAttribute]
public static int RegisterDestructionCallback(ComPtr`1<ID3DDestructionNotifier> thisVtbl, PfnDestructionCallback callbackFn, Span`1<T0> pData, Span`1<UInt32> pCallbackID);
    [ExtensionAttribute]
public static ComPtr`1<TI0> QueryInterface(ComPtr`1<ID3DDestructionNotifier> thisVtbl);
}
[NativeNameAttribute("Name", "D3D_DRIVER_TYPE")]
public enum Silk.NET.Core.Native.D3DDriverType : Enum {
    public int value__;
    [ObsoleteAttribute("Deprecated in favour of "Unknown"")]
[NativeNameAttribute("Name", "D3D_DRIVER_TYPE_UNKNOWN")]
public static D3DDriverType D3DDriverTypeUnknown;
    [ObsoleteAttribute("Deprecated in favour of "Hardware"")]
[NativeNameAttribute("Name", "D3D_DRIVER_TYPE_HARDWARE")]
public static D3DDriverType D3DDriverTypeHardware;
    [ObsoleteAttribute("Deprecated in favour of "Reference"")]
[NativeNameAttribute("Name", "D3D_DRIVER_TYPE_REFERENCE")]
public static D3DDriverType D3DDriverTypeReference;
    [ObsoleteAttribute("Deprecated in favour of "Null"")]
[NativeNameAttribute("Name", "D3D_DRIVER_TYPE_NULL")]
public static D3DDriverType D3DDriverTypeNull;
    [ObsoleteAttribute("Deprecated in favour of "Software"")]
[NativeNameAttribute("Name", "D3D_DRIVER_TYPE_SOFTWARE")]
public static D3DDriverType D3DDriverTypeSoftware;
    [ObsoleteAttribute("Deprecated in favour of "Warp"")]
[NativeNameAttribute("Name", "D3D_DRIVER_TYPE_WARP")]
public static D3DDriverType D3DDriverTypeWarp;
    [NativeNameAttribute("Name", "D3D_DRIVER_TYPE_UNKNOWN")]
public static D3DDriverType Unknown;
    [NativeNameAttribute("Name", "D3D_DRIVER_TYPE_HARDWARE")]
public static D3DDriverType Hardware;
    [NativeNameAttribute("Name", "D3D_DRIVER_TYPE_REFERENCE")]
public static D3DDriverType Reference;
    [NativeNameAttribute("Name", "D3D_DRIVER_TYPE_NULL")]
public static D3DDriverType Null;
    [NativeNameAttribute("Name", "D3D_DRIVER_TYPE_SOFTWARE")]
public static D3DDriverType Software;
    [NativeNameAttribute("Name", "D3D_DRIVER_TYPE_WARP")]
public static D3DDriverType Warp;
}
[NativeNameAttribute("Name", "D3D_FEATURE_LEVEL")]
public enum Silk.NET.Core.Native.D3DFeatureLevel : Enum {
    public int value__;
    [ObsoleteAttribute("Deprecated in favour of "Level10Core"")]
[NativeNameAttribute("Name", "D3D_FEATURE_LEVEL_1_0_CORE")]
public static D3DFeatureLevel D3DFeatureLevel10Core;
    [ObsoleteAttribute("Deprecated in favour of "Level91"")]
[NativeNameAttribute("Name", "D3D_FEATURE_LEVEL_9_1")]
public static D3DFeatureLevel D3DFeatureLevel91;
    [ObsoleteAttribute("Deprecated in favour of "Level92"")]
[NativeNameAttribute("Name", "D3D_FEATURE_LEVEL_9_2")]
public static D3DFeatureLevel D3DFeatureLevel92;
    [ObsoleteAttribute("Deprecated in favour of "Level93"")]
[NativeNameAttribute("Name", "D3D_FEATURE_LEVEL_9_3")]
public static D3DFeatureLevel D3DFeatureLevel93;
    [ObsoleteAttribute("Deprecated in favour of "Level100"")]
[NativeNameAttribute("Name", "D3D_FEATURE_LEVEL_10_0")]
public static D3DFeatureLevel D3DFeatureLevel100;
    [ObsoleteAttribute("Deprecated in favour of "Level101"")]
[NativeNameAttribute("Name", "D3D_FEATURE_LEVEL_10_1")]
public static D3DFeatureLevel D3DFeatureLevel101;
    [ObsoleteAttribute("Deprecated in favour of "Level110"")]
[NativeNameAttribute("Name", "D3D_FEATURE_LEVEL_11_0")]
public static D3DFeatureLevel D3DFeatureLevel110;
    [ObsoleteAttribute("Deprecated in favour of "Level111"")]
[NativeNameAttribute("Name", "D3D_FEATURE_LEVEL_11_1")]
public static D3DFeatureLevel D3DFeatureLevel111;
    [ObsoleteAttribute("Deprecated in favour of "Level120"")]
[NativeNameAttribute("Name", "D3D_FEATURE_LEVEL_12_0")]
public static D3DFeatureLevel D3DFeatureLevel120;
    [ObsoleteAttribute("Deprecated in favour of "Level121"")]
[NativeNameAttribute("Name", "D3D_FEATURE_LEVEL_12_1")]
public static D3DFeatureLevel D3DFeatureLevel121;
    [ObsoleteAttribute("Deprecated in favour of "Level122"")]
[NativeNameAttribute("Name", "D3D_FEATURE_LEVEL_12_2")]
public static D3DFeatureLevel D3DFeatureLevel122;
    [NativeNameAttribute("Name", "D3D_FEATURE_LEVEL_1_0_CORE")]
public static D3DFeatureLevel Level10Core;
    [NativeNameAttribute("Name", "D3D_FEATURE_LEVEL_9_1")]
public static D3DFeatureLevel Level91;
    [NativeNameAttribute("Name", "D3D_FEATURE_LEVEL_9_2")]
public static D3DFeatureLevel Level92;
    [NativeNameAttribute("Name", "D3D_FEATURE_LEVEL_9_3")]
public static D3DFeatureLevel Level93;
    [NativeNameAttribute("Name", "D3D_FEATURE_LEVEL_10_0")]
public static D3DFeatureLevel Level100;
    [NativeNameAttribute("Name", "D3D_FEATURE_LEVEL_10_1")]
public static D3DFeatureLevel Level101;
    [NativeNameAttribute("Name", "D3D_FEATURE_LEVEL_11_0")]
public static D3DFeatureLevel Level110;
    [NativeNameAttribute("Name", "D3D_FEATURE_LEVEL_11_1")]
public static D3DFeatureLevel Level111;
    [NativeNameAttribute("Name", "D3D_FEATURE_LEVEL_12_0")]
public static D3DFeatureLevel Level120;
    [NativeNameAttribute("Name", "D3D_FEATURE_LEVEL_12_1")]
public static D3DFeatureLevel Level121;
    [NativeNameAttribute("Name", "D3D_FEATURE_LEVEL_12_2")]
public static D3DFeatureLevel Level122;
}
[FlagsAttribute]
[NativeNameAttribute("Name", "_D3D_INCLUDE_TYPE")]
public enum Silk.NET.Core.Native.D3DIncludeType : Enum {
    public int value__;
    [NativeNameAttribute("Name", "D3D_INCLUDE_LOCAL")]
public static D3DIncludeType D3DIncludeLocal;
    [NativeNameAttribute("Name", "D3D_INCLUDE_SYSTEM")]
public static D3DIncludeType D3DIncludeSystem;
    [NativeNameAttribute("Name", "D3D10_INCLUDE_LOCAL")]
public static D3DIncludeType D3D10IncludeLocal;
    [NativeNameAttribute("Name", "D3D10_INCLUDE_SYSTEM")]
public static D3DIncludeType D3D10IncludeSystem;
    [NativeNameAttribute("Name", "D3D_INCLUDE_FORCE_DWORD")]
public static D3DIncludeType D3DIncludeForceDword;
}
[ExtensionAttribute]
public static class Silk.NET.Core.Native.D3DIncludeVtblExtensions : object {
    [ExtensionAttribute]
public static int Open(ComPtr`1<ID3DInclude> thisVtbl, D3DIncludeType IncludeType, Byte* pFileName, Void* pParentData, Void** ppData, UInt32* pBytes);
    [ExtensionAttribute]
public static int Open(ComPtr`1<ID3DInclude> thisVtbl, D3DIncludeType IncludeType, Byte* pFileName, Void* pParentData, Void** ppData, UInt32& pBytes);
    [ExtensionAttribute]
public static int Open(ComPtr`1<ID3DInclude> thisVtbl, D3DIncludeType IncludeType, Byte* pFileName, Void* pParentData, Void*& ppData, UInt32* pBytes);
    [ExtensionAttribute]
public static int Open(ComPtr`1<ID3DInclude> thisVtbl, D3DIncludeType IncludeType, Byte* pFileName, Void* pParentData, Void*& ppData, UInt32& pBytes);
    [ExtensionAttribute]
public static int Open(ComPtr`1<ID3DInclude> thisVtbl, D3DIncludeType IncludeType, Byte* pFileName, T0& pParentData, Void** ppData, UInt32* pBytes);
    [ExtensionAttribute]
public static int Open(ComPtr`1<ID3DInclude> thisVtbl, D3DIncludeType IncludeType, Byte* pFileName, T0& pParentData, Void** ppData, UInt32& pBytes);
    [ExtensionAttribute]
public static int Open(ComPtr`1<ID3DInclude> thisVtbl, D3DIncludeType IncludeType, Byte* pFileName, T0& pParentData, Void*& ppData, UInt32* pBytes);
    [ExtensionAttribute]
public static int Open(ComPtr`1<ID3DInclude> thisVtbl, D3DIncludeType IncludeType, Byte* pFileName, T0& pParentData, Void*& ppData, UInt32& pBytes);
    [ExtensionAttribute]
public static int Open(ComPtr`1<ID3DInclude> thisVtbl, D3DIncludeType IncludeType, Byte& pFileName, Void* pParentData, Void** ppData, UInt32* pBytes);
    [ExtensionAttribute]
public static int Open(ComPtr`1<ID3DInclude> thisVtbl, D3DIncludeType IncludeType, Byte& pFileName, Void* pParentData, Void** ppData, UInt32& pBytes);
    [ExtensionAttribute]
public static int Open(ComPtr`1<ID3DInclude> thisVtbl, D3DIncludeType IncludeType, Byte& pFileName, Void* pParentData, Void*& ppData, UInt32* pBytes);
    [ExtensionAttribute]
public static int Open(ComPtr`1<ID3DInclude> thisVtbl, D3DIncludeType IncludeType, Byte& pFileName, Void* pParentData, Void*& ppData, UInt32& pBytes);
    [ExtensionAttribute]
public static int Open(ComPtr`1<ID3DInclude> thisVtbl, D3DIncludeType IncludeType, Byte& pFileName, T0& pParentData, Void** ppData, UInt32* pBytes);
    [ExtensionAttribute]
public static int Open(ComPtr`1<ID3DInclude> thisVtbl, D3DIncludeType IncludeType, Byte& pFileName, T0& pParentData, Void** ppData, UInt32& pBytes);
    [ExtensionAttribute]
public static int Open(ComPtr`1<ID3DInclude> thisVtbl, D3DIncludeType IncludeType, Byte& pFileName, T0& pParentData, Void*& ppData, UInt32* pBytes);
    [ExtensionAttribute]
public static int Open(ComPtr`1<ID3DInclude> thisVtbl, D3DIncludeType IncludeType, Byte& pFileName, T0& pParentData, Void*& ppData, UInt32& pBytes);
    [ExtensionAttribute]
public static int Open(ComPtr`1<ID3DInclude> thisVtbl, D3DIncludeType IncludeType, string pFileName, Void* pParentData, Void** ppData, UInt32* pBytes);
    [ExtensionAttribute]
public static int Open(ComPtr`1<ID3DInclude> thisVtbl, D3DIncludeType IncludeType, string pFileName, Void* pParentData, Void** ppData, UInt32& pBytes);
    [ExtensionAttribute]
public static int Open(ComPtr`1<ID3DInclude> thisVtbl, D3DIncludeType IncludeType, string pFileName, Void* pParentData, Void*& ppData, UInt32* pBytes);
    [ExtensionAttribute]
public static int Open(ComPtr`1<ID3DInclude> thisVtbl, D3DIncludeType IncludeType, string pFileName, Void* pParentData, Void*& ppData, UInt32& pBytes);
    [ExtensionAttribute]
public static int Open(ComPtr`1<ID3DInclude> thisVtbl, D3DIncludeType IncludeType, string pFileName, T0& pParentData, Void** ppData, UInt32* pBytes);
    [ExtensionAttribute]
public static int Open(ComPtr`1<ID3DInclude> thisVtbl, D3DIncludeType IncludeType, string pFileName, T0& pParentData, Void** ppData, UInt32& pBytes);
    [ExtensionAttribute]
public static int Open(ComPtr`1<ID3DInclude> thisVtbl, D3DIncludeType IncludeType, string pFileName, T0& pParentData, Void*& ppData, UInt32* pBytes);
    [ExtensionAttribute]
public static int Open(ComPtr`1<ID3DInclude> thisVtbl, D3DIncludeType IncludeType, string pFileName, T0& pParentData, Void*& ppData, UInt32& pBytes);
    [ExtensionAttribute]
public static int Close(ComPtr`1<ID3DInclude> thisVtbl, Void* pData);
    [ExtensionAttribute]
public static int Close(ComPtr`1<ID3DInclude> thisVtbl, T0& pData);
    [ExtensionAttribute]
public static int Open(ComPtr`1<ID3DInclude> thisVtbl, D3DIncludeType IncludeType, Byte* pFileName, Void* pParentData, Void** ppData, Span`1<UInt32> pBytes);
    [ExtensionAttribute]
public static int Open(ComPtr`1<ID3DInclude> thisVtbl, D3DIncludeType IncludeType, Byte* pFileName, Void* pParentData, Void*& ppData, Span`1<UInt32> pBytes);
    [ExtensionAttribute]
public static int Open(ComPtr`1<ID3DInclude> thisVtbl, D3DIncludeType IncludeType, Byte* pFileName, ReadOnlySpan`1<T0> pParentData, Void** ppData, UInt32* pBytes);
    [ExtensionAttribute]
public static int Open(ComPtr`1<ID3DInclude> thisVtbl, D3DIncludeType IncludeType, Byte* pFileName, ReadOnlySpan`1<T0> pParentData, Void** ppData, Span`1<UInt32> pBytes);
    [ExtensionAttribute]
public static int Open(ComPtr`1<ID3DInclude> thisVtbl, D3DIncludeType IncludeType, Byte* pFileName, ReadOnlySpan`1<T0> pParentData, Void*& ppData, UInt32* pBytes);
    [ExtensionAttribute]
public static int Open(ComPtr`1<ID3DInclude> thisVtbl, D3DIncludeType IncludeType, Byte* pFileName, ReadOnlySpan`1<T0> pParentData, Void*& ppData, Span`1<UInt32> pBytes);
    [ExtensionAttribute]
public static int Open(ComPtr`1<ID3DInclude> thisVtbl, D3DIncludeType IncludeType, ReadOnlySpan`1<byte> pFileName, Void* pParentData, Void** ppData, UInt32* pBytes);
    [ExtensionAttribute]
public static int Open(ComPtr`1<ID3DInclude> thisVtbl, D3DIncludeType IncludeType, ReadOnlySpan`1<byte> pFileName, Void* pParentData, Void** ppData, Span`1<UInt32> pBytes);
    [ExtensionAttribute]
public static int Open(ComPtr`1<ID3DInclude> thisVtbl, D3DIncludeType IncludeType, ReadOnlySpan`1<byte> pFileName, Void* pParentData, Void*& ppData, UInt32* pBytes);
    [ExtensionAttribute]
public static int Open(ComPtr`1<ID3DInclude> thisVtbl, D3DIncludeType IncludeType, ReadOnlySpan`1<byte> pFileName, Void* pParentData, Void*& ppData, Span`1<UInt32> pBytes);
    [ExtensionAttribute]
public static int Open(ComPtr`1<ID3DInclude> thisVtbl, D3DIncludeType IncludeType, ReadOnlySpan`1<byte> pFileName, ReadOnlySpan`1<T0> pParentData, Void** ppData, UInt32* pBytes);
    [ExtensionAttribute]
public static int Open(ComPtr`1<ID3DInclude> thisVtbl, D3DIncludeType IncludeType, ReadOnlySpan`1<byte> pFileName, ReadOnlySpan`1<T0> pParentData, Void** ppData, Span`1<UInt32> pBytes);
    [ExtensionAttribute]
public static int Open(ComPtr`1<ID3DInclude> thisVtbl, D3DIncludeType IncludeType, ReadOnlySpan`1<byte> pFileName, ReadOnlySpan`1<T0> pParentData, Void*& ppData, UInt32* pBytes);
    [ExtensionAttribute]
public static int Open(ComPtr`1<ID3DInclude> thisVtbl, D3DIncludeType IncludeType, ReadOnlySpan`1<byte> pFileName, ReadOnlySpan`1<T0> pParentData, Void*& ppData, Span`1<UInt32> pBytes);
    [ExtensionAttribute]
public static int Open(ComPtr`1<ID3DInclude> thisVtbl, D3DIncludeType IncludeType, string pFileName, Void* pParentData, Void** ppData, Span`1<UInt32> pBytes);
    [ExtensionAttribute]
public static int Open(ComPtr`1<ID3DInclude> thisVtbl, D3DIncludeType IncludeType, string pFileName, Void* pParentData, Void*& ppData, Span`1<UInt32> pBytes);
    [ExtensionAttribute]
public static int Open(ComPtr`1<ID3DInclude> thisVtbl, D3DIncludeType IncludeType, string pFileName, ReadOnlySpan`1<T0> pParentData, Void** ppData, UInt32* pBytes);
    [ExtensionAttribute]
public static int Open(ComPtr`1<ID3DInclude> thisVtbl, D3DIncludeType IncludeType, string pFileName, ReadOnlySpan`1<T0> pParentData, Void** ppData, Span`1<UInt32> pBytes);
    [ExtensionAttribute]
public static int Open(ComPtr`1<ID3DInclude> thisVtbl, D3DIncludeType IncludeType, string pFileName, ReadOnlySpan`1<T0> pParentData, Void*& ppData, UInt32* pBytes);
    [ExtensionAttribute]
public static int Open(ComPtr`1<ID3DInclude> thisVtbl, D3DIncludeType IncludeType, string pFileName, ReadOnlySpan`1<T0> pParentData, Void*& ppData, Span`1<UInt32> pBytes);
    [ExtensionAttribute]
public static int Close(ComPtr`1<ID3DInclude> thisVtbl, ReadOnlySpan`1<T0> pData);
}
[NativeNameAttribute("Name", "D3D_INTERPOLATION_MODE")]
public enum Silk.NET.Core.Native.D3DInterpolationMode : Enum {
    public int value__;
    [ObsoleteAttribute("Deprecated in favour of "Undefined"")]
[NativeNameAttribute("Name", "D3D_INTERPOLATION_UNDEFINED")]
public static D3DInterpolationMode D3DInterpolationUndefined;
    [ObsoleteAttribute("Deprecated in favour of "Constant"")]
[NativeNameAttribute("Name", "D3D_INTERPOLATION_CONSTANT")]
public static D3DInterpolationMode D3DInterpolationConstant;
    [ObsoleteAttribute("Deprecated in favour of "Linear"")]
[NativeNameAttribute("Name", "D3D_INTERPOLATION_LINEAR")]
public static D3DInterpolationMode D3DInterpolationLinear;
    [ObsoleteAttribute("Deprecated in favour of "LinearCentroid"")]
[NativeNameAttribute("Name", "D3D_INTERPOLATION_LINEAR_CENTROID")]
public static D3DInterpolationMode D3DInterpolationLinearCentroid;
    [ObsoleteAttribute("Deprecated in favour of "LinearNoperspective"")]
[NativeNameAttribute("Name", "D3D_INTERPOLATION_LINEAR_NOPERSPECTIVE")]
public static D3DInterpolationMode D3DInterpolationLinearNoperspective;
    [ObsoleteAttribute("Deprecated in favour of "LinearNoperspectiveCentroid"")]
[NativeNameAttribute("Name", "D3D_INTERPOLATION_LINEAR_NOPERSPECTIVE_CENTROID")]
public static D3DInterpolationMode D3DInterpolationLinearNoperspectiveCentroid;
    [ObsoleteAttribute("Deprecated in favour of "LinearSample"")]
[NativeNameAttribute("Name", "D3D_INTERPOLATION_LINEAR_SAMPLE")]
public static D3DInterpolationMode D3DInterpolationLinearSample;
    [ObsoleteAttribute("Deprecated in favour of "LinearNoperspectiveSample"")]
[NativeNameAttribute("Name", "D3D_INTERPOLATION_LINEAR_NOPERSPECTIVE_SAMPLE")]
public static D3DInterpolationMode D3DInterpolationLinearNoperspectiveSample;
    [NativeNameAttribute("Name", "D3D_INTERPOLATION_UNDEFINED")]
public static D3DInterpolationMode Undefined;
    [NativeNameAttribute("Name", "D3D_INTERPOLATION_CONSTANT")]
public static D3DInterpolationMode Constant;
    [NativeNameAttribute("Name", "D3D_INTERPOLATION_LINEAR")]
public static D3DInterpolationMode Linear;
    [NativeNameAttribute("Name", "D3D_INTERPOLATION_LINEAR_CENTROID")]
public static D3DInterpolationMode LinearCentroid;
    [NativeNameAttribute("Name", "D3D_INTERPOLATION_LINEAR_NOPERSPECTIVE")]
public static D3DInterpolationMode LinearNoperspective;
    [NativeNameAttribute("Name", "D3D_INTERPOLATION_LINEAR_NOPERSPECTIVE_CENTROID")]
public static D3DInterpolationMode LinearNoperspectiveCentroid;
    [NativeNameAttribute("Name", "D3D_INTERPOLATION_LINEAR_SAMPLE")]
public static D3DInterpolationMode LinearSample;
    [NativeNameAttribute("Name", "D3D_INTERPOLATION_LINEAR_NOPERSPECTIVE_SAMPLE")]
public static D3DInterpolationMode LinearNoperspectiveSample;
}
[NativeNameAttribute("Name", "D3D_MIN_PRECISION")]
public enum Silk.NET.Core.Native.D3DMinPrecision : Enum {
    public int value__;
    [ObsoleteAttribute("Deprecated in favour of "Default"")]
[NativeNameAttribute("Name", "D3D_MIN_PRECISION_DEFAULT")]
public static D3DMinPrecision D3DMinPrecisionDefault;
    [ObsoleteAttribute("Deprecated in favour of "Float16"")]
[NativeNameAttribute("Name", "D3D_MIN_PRECISION_FLOAT_16")]
public static D3DMinPrecision D3DMinPrecisionFloat16;
    [ObsoleteAttribute("Deprecated in favour of "Float28"")]
[NativeNameAttribute("Name", "D3D_MIN_PRECISION_FLOAT_2_8")]
public static D3DMinPrecision D3DMinPrecisionFloat28;
    [ObsoleteAttribute("Deprecated in favour of "Reserved"")]
[NativeNameAttribute("Name", "D3D_MIN_PRECISION_RESERVED")]
public static D3DMinPrecision D3DMinPrecisionReserved;
    [ObsoleteAttribute("Deprecated in favour of "Sint16"")]
[NativeNameAttribute("Name", "D3D_MIN_PRECISION_SINT_16")]
public static D3DMinPrecision D3DMinPrecisionSint16;
    [ObsoleteAttribute("Deprecated in favour of "Uint16"")]
[NativeNameAttribute("Name", "D3D_MIN_PRECISION_UINT_16")]
public static D3DMinPrecision D3DMinPrecisionUint16;
    [ObsoleteAttribute("Deprecated in favour of "Any16"")]
[NativeNameAttribute("Name", "D3D_MIN_PRECISION_ANY_16")]
public static D3DMinPrecision D3DMinPrecisionAny16;
    [ObsoleteAttribute("Deprecated in favour of "Any10"")]
[NativeNameAttribute("Name", "D3D_MIN_PRECISION_ANY_10")]
public static D3DMinPrecision D3DMinPrecisionAny10;
    [NativeNameAttribute("Name", "D3D_MIN_PRECISION_DEFAULT")]
public static D3DMinPrecision Default;
    [NativeNameAttribute("Name", "D3D_MIN_PRECISION_FLOAT_16")]
public static D3DMinPrecision Float16;
    [NativeNameAttribute("Name", "D3D_MIN_PRECISION_FLOAT_2_8")]
public static D3DMinPrecision Float28;
    [NativeNameAttribute("Name", "D3D_MIN_PRECISION_RESERVED")]
public static D3DMinPrecision Reserved;
    [NativeNameAttribute("Name", "D3D_MIN_PRECISION_SINT_16")]
public static D3DMinPrecision Sint16;
    [NativeNameAttribute("Name", "D3D_MIN_PRECISION_UINT_16")]
public static D3DMinPrecision Uint16;
    [NativeNameAttribute("Name", "D3D_MIN_PRECISION_ANY_16")]
public static D3DMinPrecision Any16;
    [NativeNameAttribute("Name", "D3D_MIN_PRECISION_ANY_10")]
public static D3DMinPrecision Any10;
}
[NativeNameAttribute("Name", "D3D_NAME")]
public enum Silk.NET.Core.Native.D3DName : Enum {
    public int value__;
    [NativeNameAttribute("Name", "D3D_NAME_UNDEFINED")]
public static D3DName D3DNameUndefined;
    [NativeNameAttribute("Name", "D3D_NAME_POSITION")]
public static D3DName D3DNamePosition;
    [NativeNameAttribute("Name", "D3D_NAME_CLIP_DISTANCE")]
public static D3DName D3DNameClipDistance;
    [NativeNameAttribute("Name", "D3D_NAME_CULL_DISTANCE")]
public static D3DName D3DNameCullDistance;
    [NativeNameAttribute("Name", "D3D_NAME_RENDER_TARGET_ARRAY_INDEX")]
public static D3DName D3DNameRenderTargetArrayIndex;
    [NativeNameAttribute("Name", "D3D_NAME_VIEWPORT_ARRAY_INDEX")]
public static D3DName D3DNameViewportArrayIndex;
    [NativeNameAttribute("Name", "D3D_NAME_VERTEX_ID")]
public static D3DName D3DNameVertexID;
    [NativeNameAttribute("Name", "D3D_NAME_PRIMITIVE_ID")]
public static D3DName D3DNamePrimitiveID;
    [NativeNameAttribute("Name", "D3D_NAME_INSTANCE_ID")]
public static D3DName D3DNameInstanceID;
    [NativeNameAttribute("Name", "D3D_NAME_IS_FRONT_FACE")]
public static D3DName D3DNameIsFrontFace;
    [NativeNameAttribute("Name", "D3D_NAME_SAMPLE_INDEX")]
public static D3DName D3DNameSampleIndex;
    [NativeNameAttribute("Name", "D3D_NAME_FINAL_QUAD_EDGE_TESSFACTOR")]
public static D3DName D3DNameFinalQuadEdgeTessfactor;
    [NativeNameAttribute("Name", "D3D_NAME_FINAL_QUAD_INSIDE_TESSFACTOR")]
public static D3DName D3DNameFinalQuadInsideTessfactor;
    [NativeNameAttribute("Name", "D3D_NAME_FINAL_TRI_EDGE_TESSFACTOR")]
public static D3DName D3DNameFinalTriEdgeTessfactor;
    [NativeNameAttribute("Name", "D3D_NAME_FINAL_TRI_INSIDE_TESSFACTOR")]
public static D3DName D3DNameFinalTriInsideTessfactor;
    [NativeNameAttribute("Name", "D3D_NAME_FINAL_LINE_DETAIL_TESSFACTOR")]
public static D3DName D3DNameFinalLineDetailTessfactor;
    [NativeNameAttribute("Name", "D3D_NAME_FINAL_LINE_DENSITY_TESSFACTOR")]
public static D3DName D3DNameFinalLineDensityTessfactor;
    [NativeNameAttribute("Name", "D3D_NAME_BARYCENTRICS")]
public static D3DName D3DNameBarycentrics;
    [NativeNameAttribute("Name", "D3D_NAME_SHADINGRATE")]
public static D3DName D3DNameShadingrate;
    [NativeNameAttribute("Name", "D3D_NAME_CULLPRIMITIVE")]
public static D3DName D3DNameCullprimitive;
    [NativeNameAttribute("Name", "D3D_NAME_TARGET")]
public static D3DName D3DNameTarget;
    [NativeNameAttribute("Name", "D3D_NAME_DEPTH")]
public static D3DName D3DNameDepth;
    [NativeNameAttribute("Name", "D3D_NAME_COVERAGE")]
public static D3DName D3DNameCoverage;
    [NativeNameAttribute("Name", "D3D_NAME_DEPTH_GREATER_EQUAL")]
public static D3DName D3DNameDepthGreaterEqual;
    [NativeNameAttribute("Name", "D3D_NAME_DEPTH_LESS_EQUAL")]
public static D3DName D3DNameDepthLessEqual;
    [NativeNameAttribute("Name", "D3D_NAME_STENCIL_REF")]
public static D3DName D3DNameStencilRef;
    [NativeNameAttribute("Name", "D3D_NAME_INNER_COVERAGE")]
public static D3DName D3DNameInnerCoverage;
    [NativeNameAttribute("Name", "D3D10_NAME_UNDEFINED")]
public static D3DName D3D10NameUndefined;
    [NativeNameAttribute("Name", "D3D10_NAME_POSITION")]
public static D3DName D3D10NamePosition;
    [NativeNameAttribute("Name", "D3D10_NAME_CLIP_DISTANCE")]
public static D3DName D3D10NameClipDistance;
    [NativeNameAttribute("Name", "D3D10_NAME_CULL_DISTANCE")]
public static D3DName D3D10NameCullDistance;
    [NativeNameAttribute("Name", "D3D10_NAME_RENDER_TARGET_ARRAY_INDEX")]
public static D3DName D3D10NameRenderTargetArrayIndex;
    [NativeNameAttribute("Name", "D3D10_NAME_VIEWPORT_ARRAY_INDEX")]
public static D3DName D3D10NameViewportArrayIndex;
    [NativeNameAttribute("Name", "D3D10_NAME_VERTEX_ID")]
public static D3DName D3D10NameVertexID;
    [NativeNameAttribute("Name", "D3D10_NAME_PRIMITIVE_ID")]
public static D3DName D3D10NamePrimitiveID;
    [NativeNameAttribute("Name", "D3D10_NAME_INSTANCE_ID")]
public static D3DName D3D10NameInstanceID;
    [NativeNameAttribute("Name", "D3D10_NAME_IS_FRONT_FACE")]
public static D3DName D3D10NameIsFrontFace;
    [NativeNameAttribute("Name", "D3D10_NAME_SAMPLE_INDEX")]
public static D3DName D3D10NameSampleIndex;
    [NativeNameAttribute("Name", "D3D10_NAME_TARGET")]
public static D3DName D3D10NameTarget;
    [NativeNameAttribute("Name", "D3D10_NAME_DEPTH")]
public static D3DName D3D10NameDepth;
    [NativeNameAttribute("Name", "D3D10_NAME_COVERAGE")]
public static D3DName D3D10NameCoverage;
    [NativeNameAttribute("Name", "D3D11_NAME_FINAL_QUAD_EDGE_TESSFACTOR")]
public static D3DName D3D11NameFinalQuadEdgeTessfactor;
    [NativeNameAttribute("Name", "D3D11_NAME_FINAL_QUAD_INSIDE_TESSFACTOR")]
public static D3DName D3D11NameFinalQuadInsideTessfactor;
    [NativeNameAttribute("Name", "D3D11_NAME_FINAL_TRI_EDGE_TESSFACTOR")]
public static D3DName D3D11NameFinalTriEdgeTessfactor;
    [NativeNameAttribute("Name", "D3D11_NAME_FINAL_TRI_INSIDE_TESSFACTOR")]
public static D3DName D3D11NameFinalTriInsideTessfactor;
    [NativeNameAttribute("Name", "D3D11_NAME_FINAL_LINE_DETAIL_TESSFACTOR")]
public static D3DName D3D11NameFinalLineDetailTessfactor;
    [NativeNameAttribute("Name", "D3D11_NAME_FINAL_LINE_DENSITY_TESSFACTOR")]
public static D3DName D3D11NameFinalLineDensityTessfactor;
    [NativeNameAttribute("Name", "D3D11_NAME_DEPTH_GREATER_EQUAL")]
public static D3DName D3D11NameDepthGreaterEqual;
    [NativeNameAttribute("Name", "D3D11_NAME_DEPTH_LESS_EQUAL")]
public static D3DName D3D11NameDepthLessEqual;
    [NativeNameAttribute("Name", "D3D11_NAME_STENCIL_REF")]
public static D3DName D3D11NameStencilRef;
    [NativeNameAttribute("Name", "D3D11_NAME_INNER_COVERAGE")]
public static D3DName D3D11NameInnerCoverage;
    [NativeNameAttribute("Name", "D3D12_NAME_BARYCENTRICS")]
public static D3DName D3D12NameBarycentrics;
    [NativeNameAttribute("Name", "D3D12_NAME_SHADINGRATE")]
public static D3DName D3D12NameShadingrate;
    [NativeNameAttribute("Name", "D3D12_NAME_CULLPRIMITIVE")]
public static D3DName D3D12NameCullprimitive;
}
[NativeNameAttribute("Name", "_D3D_PARAMETER_FLAGS")]
public enum Silk.NET.Core.Native.D3DParameterFlags : Enum {
    public int value__;
    [ObsoleteAttribute("Deprecated in favour of "None"")]
[NativeNameAttribute("Name", "D3D_PF_NONE")]
public static D3DParameterFlags D3DPFNone;
    [ObsoleteAttribute("Deprecated in favour of "In"")]
[NativeNameAttribute("Name", "D3D_PF_IN")]
public static D3DParameterFlags D3DPFIn;
    [ObsoleteAttribute("Deprecated in favour of "Out"")]
[NativeNameAttribute("Name", "D3D_PF_OUT")]
public static D3DParameterFlags D3DPFOut;
    [ObsoleteAttribute("Deprecated in favour of "ForceDword"")]
[NativeNameAttribute("Name", "D3D_PF_FORCE_DWORD")]
public static D3DParameterFlags D3DPFForceDword;
    [NativeNameAttribute("Name", "D3D_PF_NONE")]
public static D3DParameterFlags None;
    [NativeNameAttribute("Name", "D3D_PF_IN")]
public static D3DParameterFlags In;
    [NativeNameAttribute("Name", "D3D_PF_OUT")]
public static D3DParameterFlags Out;
    [NativeNameAttribute("Name", "D3D_PF_FORCE_DWORD")]
public static D3DParameterFlags ForceDword;
}
[NativeNameAttribute("Name", "D3D_PRIMITIVE")]
public enum Silk.NET.Core.Native.D3DPrimitive : Enum {
    public int value__;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_UNDEFINED")]
public static D3DPrimitive D3DPrimitiveUndefined;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_POINT")]
public static D3DPrimitive D3DPrimitivePoint;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_LINE")]
public static D3DPrimitive D3DPrimitiveLine;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_TRIANGLE")]
public static D3DPrimitive D3DPrimitiveTriangle;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_LINE_ADJ")]
public static D3DPrimitive D3DPrimitiveLineAdj;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_TRIANGLE_ADJ")]
public static D3DPrimitive D3DPrimitiveTriangleAdj;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_1_CONTROL_POINT_PATCH")]
public static D3DPrimitive D3DPrimitive1ControlPointPatch;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_2_CONTROL_POINT_PATCH")]
public static D3DPrimitive D3DPrimitive2ControlPointPatch;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_3_CONTROL_POINT_PATCH")]
public static D3DPrimitive D3DPrimitive3ControlPointPatch;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_4_CONTROL_POINT_PATCH")]
public static D3DPrimitive D3DPrimitive4ControlPointPatch;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_5_CONTROL_POINT_PATCH")]
public static D3DPrimitive D3DPrimitive5ControlPointPatch;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_6_CONTROL_POINT_PATCH")]
public static D3DPrimitive D3DPrimitive6ControlPointPatch;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_7_CONTROL_POINT_PATCH")]
public static D3DPrimitive D3DPrimitive7ControlPointPatch;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_8_CONTROL_POINT_PATCH")]
public static D3DPrimitive D3DPrimitive8ControlPointPatch;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_9_CONTROL_POINT_PATCH")]
public static D3DPrimitive D3DPrimitive9ControlPointPatch;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_10_CONTROL_POINT_PATCH")]
public static D3DPrimitive D3DPrimitive10ControlPointPatch;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_11_CONTROL_POINT_PATCH")]
public static D3DPrimitive D3DPrimitive11ControlPointPatch;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_12_CONTROL_POINT_PATCH")]
public static D3DPrimitive D3DPrimitive12ControlPointPatch;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_13_CONTROL_POINT_PATCH")]
public static D3DPrimitive D3DPrimitive13ControlPointPatch;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_14_CONTROL_POINT_PATCH")]
public static D3DPrimitive D3DPrimitive14ControlPointPatch;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_15_CONTROL_POINT_PATCH")]
public static D3DPrimitive D3DPrimitive15ControlPointPatch;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_16_CONTROL_POINT_PATCH")]
public static D3DPrimitive D3DPrimitive16ControlPointPatch;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_17_CONTROL_POINT_PATCH")]
public static D3DPrimitive D3DPrimitive17ControlPointPatch;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_18_CONTROL_POINT_PATCH")]
public static D3DPrimitive D3DPrimitive18ControlPointPatch;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_19_CONTROL_POINT_PATCH")]
public static D3DPrimitive D3DPrimitive19ControlPointPatch;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_20_CONTROL_POINT_PATCH")]
public static D3DPrimitive D3DPrimitive20ControlPointPatch;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_21_CONTROL_POINT_PATCH")]
public static D3DPrimitive D3DPrimitive21ControlPointPatch;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_22_CONTROL_POINT_PATCH")]
public static D3DPrimitive D3DPrimitive22ControlPointPatch;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_23_CONTROL_POINT_PATCH")]
public static D3DPrimitive D3DPrimitive23ControlPointPatch;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_24_CONTROL_POINT_PATCH")]
public static D3DPrimitive D3DPrimitive24ControlPointPatch;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_25_CONTROL_POINT_PATCH")]
public static D3DPrimitive D3DPrimitive25ControlPointPatch;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_26_CONTROL_POINT_PATCH")]
public static D3DPrimitive D3DPrimitive26ControlPointPatch;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_27_CONTROL_POINT_PATCH")]
public static D3DPrimitive D3DPrimitive27ControlPointPatch;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_28_CONTROL_POINT_PATCH")]
public static D3DPrimitive D3DPrimitive28ControlPointPatch;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_29_CONTROL_POINT_PATCH")]
public static D3DPrimitive D3DPrimitive29ControlPointPatch;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_30_CONTROL_POINT_PATCH")]
public static D3DPrimitive D3DPrimitive30ControlPointPatch;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_31_CONTROL_POINT_PATCH")]
public static D3DPrimitive D3DPrimitive31ControlPointPatch;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_32_CONTROL_POINT_PATCH")]
public static D3DPrimitive D3DPrimitive32ControlPointPatch;
    [NativeNameAttribute("Name", "D3D10_PRIMITIVE_UNDEFINED")]
public static D3DPrimitive D3D10PrimitiveUndefined;
    [NativeNameAttribute("Name", "D3D10_PRIMITIVE_POINT")]
public static D3DPrimitive D3D10PrimitivePoint;
    [NativeNameAttribute("Name", "D3D10_PRIMITIVE_LINE")]
public static D3DPrimitive D3D10PrimitiveLine;
    [NativeNameAttribute("Name", "D3D10_PRIMITIVE_TRIANGLE")]
public static D3DPrimitive D3D10PrimitiveTriangle;
    [NativeNameAttribute("Name", "D3D10_PRIMITIVE_LINE_ADJ")]
public static D3DPrimitive D3D10PrimitiveLineAdj;
    [NativeNameAttribute("Name", "D3D10_PRIMITIVE_TRIANGLE_ADJ")]
public static D3DPrimitive D3D10PrimitiveTriangleAdj;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_UNDEFINED")]
public static D3DPrimitive D3D11PrimitiveUndefined;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_POINT")]
public static D3DPrimitive D3D11PrimitivePoint;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_LINE")]
public static D3DPrimitive D3D11PrimitiveLine;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_TRIANGLE")]
public static D3DPrimitive D3D11PrimitiveTriangle;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_LINE_ADJ")]
public static D3DPrimitive D3D11PrimitiveLineAdj;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_TRIANGLE_ADJ")]
public static D3DPrimitive D3D11PrimitiveTriangleAdj;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_1_CONTROL_POINT_PATCH")]
public static D3DPrimitive D3D11Primitive1ControlPointPatch;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_2_CONTROL_POINT_PATCH")]
public static D3DPrimitive D3D11Primitive2ControlPointPatch;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_3_CONTROL_POINT_PATCH")]
public static D3DPrimitive D3D11Primitive3ControlPointPatch;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_4_CONTROL_POINT_PATCH")]
public static D3DPrimitive D3D11Primitive4ControlPointPatch;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_5_CONTROL_POINT_PATCH")]
public static D3DPrimitive D3D11Primitive5ControlPointPatch;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_6_CONTROL_POINT_PATCH")]
public static D3DPrimitive D3D11Primitive6ControlPointPatch;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_7_CONTROL_POINT_PATCH")]
public static D3DPrimitive D3D11Primitive7ControlPointPatch;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_8_CONTROL_POINT_PATCH")]
public static D3DPrimitive D3D11Primitive8ControlPointPatch;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_9_CONTROL_POINT_PATCH")]
public static D3DPrimitive D3D11Primitive9ControlPointPatch;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_10_CONTROL_POINT_PATCH")]
public static D3DPrimitive D3D11Primitive10ControlPointPatch;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_11_CONTROL_POINT_PATCH")]
public static D3DPrimitive D3D11Primitive11ControlPointPatch;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_12_CONTROL_POINT_PATCH")]
public static D3DPrimitive D3D11Primitive12ControlPointPatch;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_13_CONTROL_POINT_PATCH")]
public static D3DPrimitive D3D11Primitive13ControlPointPatch;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_14_CONTROL_POINT_PATCH")]
public static D3DPrimitive D3D11Primitive14ControlPointPatch;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_15_CONTROL_POINT_PATCH")]
public static D3DPrimitive D3D11Primitive15ControlPointPatch;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_16_CONTROL_POINT_PATCH")]
public static D3DPrimitive D3D11Primitive16ControlPointPatch;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_17_CONTROL_POINT_PATCH")]
public static D3DPrimitive D3D11Primitive17ControlPointPatch;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_18_CONTROL_POINT_PATCH")]
public static D3DPrimitive D3D11Primitive18ControlPointPatch;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_19_CONTROL_POINT_PATCH")]
public static D3DPrimitive D3D11Primitive19ControlPointPatch;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_20_CONTROL_POINT_PATCH")]
public static D3DPrimitive D3D11Primitive20ControlPointPatch;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_21_CONTROL_POINT_PATCH")]
public static D3DPrimitive D3D11Primitive21ControlPointPatch;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_22_CONTROL_POINT_PATCH")]
public static D3DPrimitive D3D11Primitive22ControlPointPatch;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_23_CONTROL_POINT_PATCH")]
public static D3DPrimitive D3D11Primitive23ControlPointPatch;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_24_CONTROL_POINT_PATCH")]
public static D3DPrimitive D3D11Primitive24ControlPointPatch;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_25_CONTROL_POINT_PATCH")]
public static D3DPrimitive D3D11Primitive25ControlPointPatch;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_26_CONTROL_POINT_PATCH")]
public static D3DPrimitive D3D11Primitive26ControlPointPatch;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_27_CONTROL_POINT_PATCH")]
public static D3DPrimitive D3D11Primitive27ControlPointPatch;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_28_CONTROL_POINT_PATCH")]
public static D3DPrimitive D3D11Primitive28ControlPointPatch;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_29_CONTROL_POINT_PATCH")]
public static D3DPrimitive D3D11Primitive29ControlPointPatch;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_30_CONTROL_POINT_PATCH")]
public static D3DPrimitive D3D11Primitive30ControlPointPatch;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_31_CONTROL_POINT_PATCH")]
public static D3DPrimitive D3D11Primitive31ControlPointPatch;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_32_CONTROL_POINT_PATCH")]
public static D3DPrimitive D3D11Primitive32ControlPointPatch;
}
[NativeNameAttribute("Name", "D3D_PRIMITIVE_TOPOLOGY")]
public enum Silk.NET.Core.Native.D3DPrimitiveTopology : Enum {
    public int value__;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_TOPOLOGY_UNDEFINED")]
public static D3DPrimitiveTopology D3DPrimitiveTopologyUndefined;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_TOPOLOGY_POINTLIST")]
public static D3DPrimitiveTopology D3DPrimitiveTopologyPointlist;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_TOPOLOGY_LINELIST")]
public static D3DPrimitiveTopology D3DPrimitiveTopologyLinelist;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_TOPOLOGY_LINESTRIP")]
public static D3DPrimitiveTopology D3DPrimitiveTopologyLinestrip;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST")]
public static D3DPrimitiveTopology D3DPrimitiveTopologyTrianglelist;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP")]
public static D3DPrimitiveTopology D3DPrimitiveTopologyTrianglestrip;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_TOPOLOGY_LINELIST_ADJ")]
public static D3DPrimitiveTopology D3DPrimitiveTopologyLinelistAdj;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ")]
public static D3DPrimitiveTopology D3DPrimitiveTopologyLinestripAdj;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ")]
public static D3DPrimitiveTopology D3DPrimitiveTopologyTrianglelistAdj;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ")]
public static D3DPrimitiveTopology D3DPrimitiveTopologyTrianglestripAdj;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST")]
public static D3DPrimitiveTopology D3DPrimitiveTopology1ControlPointPatchlist;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST")]
public static D3DPrimitiveTopology D3DPrimitiveTopology2ControlPointPatchlist;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST")]
public static D3DPrimitiveTopology D3DPrimitiveTopology3ControlPointPatchlist;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST")]
public static D3DPrimitiveTopology D3DPrimitiveTopology4ControlPointPatchlist;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST")]
public static D3DPrimitiveTopology D3DPrimitiveTopology5ControlPointPatchlist;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST")]
public static D3DPrimitiveTopology D3DPrimitiveTopology6ControlPointPatchlist;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST")]
public static D3DPrimitiveTopology D3DPrimitiveTopology7ControlPointPatchlist;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST")]
public static D3DPrimitiveTopology D3DPrimitiveTopology8ControlPointPatchlist;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST")]
public static D3DPrimitiveTopology D3DPrimitiveTopology9ControlPointPatchlist;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST")]
public static D3DPrimitiveTopology D3DPrimitiveTopology10ControlPointPatchlist;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST")]
public static D3DPrimitiveTopology D3DPrimitiveTopology11ControlPointPatchlist;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST")]
public static D3DPrimitiveTopology D3DPrimitiveTopology12ControlPointPatchlist;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST")]
public static D3DPrimitiveTopology D3DPrimitiveTopology13ControlPointPatchlist;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST")]
public static D3DPrimitiveTopology D3DPrimitiveTopology14ControlPointPatchlist;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST")]
public static D3DPrimitiveTopology D3DPrimitiveTopology15ControlPointPatchlist;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST")]
public static D3DPrimitiveTopology D3DPrimitiveTopology16ControlPointPatchlist;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST")]
public static D3DPrimitiveTopology D3DPrimitiveTopology17ControlPointPatchlist;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST")]
public static D3DPrimitiveTopology D3DPrimitiveTopology18ControlPointPatchlist;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST")]
public static D3DPrimitiveTopology D3DPrimitiveTopology19ControlPointPatchlist;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST")]
public static D3DPrimitiveTopology D3DPrimitiveTopology20ControlPointPatchlist;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST")]
public static D3DPrimitiveTopology D3DPrimitiveTopology21ControlPointPatchlist;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST")]
public static D3DPrimitiveTopology D3DPrimitiveTopology22ControlPointPatchlist;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST")]
public static D3DPrimitiveTopology D3DPrimitiveTopology23ControlPointPatchlist;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST")]
public static D3DPrimitiveTopology D3DPrimitiveTopology24ControlPointPatchlist;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST")]
public static D3DPrimitiveTopology D3DPrimitiveTopology25ControlPointPatchlist;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST")]
public static D3DPrimitiveTopology D3DPrimitiveTopology26ControlPointPatchlist;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST")]
public static D3DPrimitiveTopology D3DPrimitiveTopology27ControlPointPatchlist;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST")]
public static D3DPrimitiveTopology D3DPrimitiveTopology28ControlPointPatchlist;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST")]
public static D3DPrimitiveTopology D3DPrimitiveTopology29ControlPointPatchlist;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST")]
public static D3DPrimitiveTopology D3DPrimitiveTopology30ControlPointPatchlist;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST")]
public static D3DPrimitiveTopology D3DPrimitiveTopology31ControlPointPatchlist;
    [NativeNameAttribute("Name", "D3D_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST")]
public static D3DPrimitiveTopology D3DPrimitiveTopology32ControlPointPatchlist;
    [NativeNameAttribute("Name", "D3D10_PRIMITIVE_TOPOLOGY_UNDEFINED")]
public static D3DPrimitiveTopology D3D10PrimitiveTopologyUndefined;
    [NativeNameAttribute("Name", "D3D10_PRIMITIVE_TOPOLOGY_POINTLIST")]
public static D3DPrimitiveTopology D3D10PrimitiveTopologyPointlist;
    [NativeNameAttribute("Name", "D3D10_PRIMITIVE_TOPOLOGY_LINELIST")]
public static D3DPrimitiveTopology D3D10PrimitiveTopologyLinelist;
    [NativeNameAttribute("Name", "D3D10_PRIMITIVE_TOPOLOGY_LINESTRIP")]
public static D3DPrimitiveTopology D3D10PrimitiveTopologyLinestrip;
    [NativeNameAttribute("Name", "D3D10_PRIMITIVE_TOPOLOGY_TRIANGLELIST")]
public static D3DPrimitiveTopology D3D10PrimitiveTopologyTrianglelist;
    [NativeNameAttribute("Name", "D3D10_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP")]
public static D3DPrimitiveTopology D3D10PrimitiveTopologyTrianglestrip;
    [NativeNameAttribute("Name", "D3D10_PRIMITIVE_TOPOLOGY_LINELIST_ADJ")]
public static D3DPrimitiveTopology D3D10PrimitiveTopologyLinelistAdj;
    [NativeNameAttribute("Name", "D3D10_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ")]
public static D3DPrimitiveTopology D3D10PrimitiveTopologyLinestripAdj;
    [NativeNameAttribute("Name", "D3D10_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ")]
public static D3DPrimitiveTopology D3D10PrimitiveTopologyTrianglelistAdj;
    [NativeNameAttribute("Name", "D3D10_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ")]
public static D3DPrimitiveTopology D3D10PrimitiveTopologyTrianglestripAdj;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_TOPOLOGY_UNDEFINED")]
public static D3DPrimitiveTopology D3D11PrimitiveTopologyUndefined;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_TOPOLOGY_POINTLIST")]
public static D3DPrimitiveTopology D3D11PrimitiveTopologyPointlist;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_TOPOLOGY_LINELIST")]
public static D3DPrimitiveTopology D3D11PrimitiveTopologyLinelist;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_TOPOLOGY_LINESTRIP")]
public static D3DPrimitiveTopology D3D11PrimitiveTopologyLinestrip;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST")]
public static D3DPrimitiveTopology D3D11PrimitiveTopologyTrianglelist;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP")]
public static D3DPrimitiveTopology D3D11PrimitiveTopologyTrianglestrip;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_TOPOLOGY_LINELIST_ADJ")]
public static D3DPrimitiveTopology D3D11PrimitiveTopologyLinelistAdj;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ")]
public static D3DPrimitiveTopology D3D11PrimitiveTopologyLinestripAdj;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ")]
public static D3DPrimitiveTopology D3D11PrimitiveTopologyTrianglelistAdj;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ")]
public static D3DPrimitiveTopology D3D11PrimitiveTopologyTrianglestripAdj;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST")]
public static D3DPrimitiveTopology D3D11PrimitiveTopology1ControlPointPatchlist;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST")]
public static D3DPrimitiveTopology D3D11PrimitiveTopology2ControlPointPatchlist;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST")]
public static D3DPrimitiveTopology D3D11PrimitiveTopology3ControlPointPatchlist;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST")]
public static D3DPrimitiveTopology D3D11PrimitiveTopology4ControlPointPatchlist;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST")]
public static D3DPrimitiveTopology D3D11PrimitiveTopology5ControlPointPatchlist;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST")]
public static D3DPrimitiveTopology D3D11PrimitiveTopology6ControlPointPatchlist;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST")]
public static D3DPrimitiveTopology D3D11PrimitiveTopology7ControlPointPatchlist;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST")]
public static D3DPrimitiveTopology D3D11PrimitiveTopology8ControlPointPatchlist;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST")]
public static D3DPrimitiveTopology D3D11PrimitiveTopology9ControlPointPatchlist;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST")]
public static D3DPrimitiveTopology D3D11PrimitiveTopology10ControlPointPatchlist;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST")]
public static D3DPrimitiveTopology D3D11PrimitiveTopology11ControlPointPatchlist;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST")]
public static D3DPrimitiveTopology D3D11PrimitiveTopology12ControlPointPatchlist;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST")]
public static D3DPrimitiveTopology D3D11PrimitiveTopology13ControlPointPatchlist;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST")]
public static D3DPrimitiveTopology D3D11PrimitiveTopology14ControlPointPatchlist;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST")]
public static D3DPrimitiveTopology D3D11PrimitiveTopology15ControlPointPatchlist;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST")]
public static D3DPrimitiveTopology D3D11PrimitiveTopology16ControlPointPatchlist;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST")]
public static D3DPrimitiveTopology D3D11PrimitiveTopology17ControlPointPatchlist;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST")]
public static D3DPrimitiveTopology D3D11PrimitiveTopology18ControlPointPatchlist;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST")]
public static D3DPrimitiveTopology D3D11PrimitiveTopology19ControlPointPatchlist;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST")]
public static D3DPrimitiveTopology D3D11PrimitiveTopology20ControlPointPatchlist;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST")]
public static D3DPrimitiveTopology D3D11PrimitiveTopology21ControlPointPatchlist;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST")]
public static D3DPrimitiveTopology D3D11PrimitiveTopology22ControlPointPatchlist;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST")]
public static D3DPrimitiveTopology D3D11PrimitiveTopology23ControlPointPatchlist;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST")]
public static D3DPrimitiveTopology D3D11PrimitiveTopology24ControlPointPatchlist;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST")]
public static D3DPrimitiveTopology D3D11PrimitiveTopology25ControlPointPatchlist;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST")]
public static D3DPrimitiveTopology D3D11PrimitiveTopology26ControlPointPatchlist;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST")]
public static D3DPrimitiveTopology D3D11PrimitiveTopology27ControlPointPatchlist;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST")]
public static D3DPrimitiveTopology D3D11PrimitiveTopology28ControlPointPatchlist;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST")]
public static D3DPrimitiveTopology D3D11PrimitiveTopology29ControlPointPatchlist;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST")]
public static D3DPrimitiveTopology D3D11PrimitiveTopology30ControlPointPatchlist;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST")]
public static D3DPrimitiveTopology D3D11PrimitiveTopology31ControlPointPatchlist;
    [NativeNameAttribute("Name", "D3D11_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST")]
public static D3DPrimitiveTopology D3D11PrimitiveTopology32ControlPointPatchlist;
}
[FlagsAttribute]
[NativeNameAttribute("Name", "D3D_REGISTER_COMPONENT_TYPE")]
public enum Silk.NET.Core.Native.D3DRegisterComponentType : Enum {
    public int value__;
    [NativeNameAttribute("Name", "D3D_REGISTER_COMPONENT_UNKNOWN")]
public static D3DRegisterComponentType D3DRegisterComponentUnknown;
    [NativeNameAttribute("Name", "D3D_REGISTER_COMPONENT_UINT32")]
public static D3DRegisterComponentType D3DRegisterComponentUint32;
    [NativeNameAttribute("Name", "D3D_REGISTER_COMPONENT_SINT32")]
public static D3DRegisterComponentType D3DRegisterComponentSint32;
    [NativeNameAttribute("Name", "D3D_REGISTER_COMPONENT_FLOAT32")]
public static D3DRegisterComponentType D3DRegisterComponentFloat32;
    [NativeNameAttribute("Name", "D3D10_REGISTER_COMPONENT_UNKNOWN")]
public static D3DRegisterComponentType D3D10RegisterComponentUnknown;
    [NativeNameAttribute("Name", "D3D10_REGISTER_COMPONENT_UINT32")]
public static D3DRegisterComponentType D3D10RegisterComponentUint32;
    [NativeNameAttribute("Name", "D3D10_REGISTER_COMPONENT_SINT32")]
public static D3DRegisterComponentType D3D10RegisterComponentSint32;
    [NativeNameAttribute("Name", "D3D10_REGISTER_COMPONENT_FLOAT32")]
public static D3DRegisterComponentType D3D10RegisterComponentFloat32;
}
[FlagsAttribute]
[NativeNameAttribute("Name", "D3D_RESOURCE_RETURN_TYPE")]
public enum Silk.NET.Core.Native.D3DResourceReturnType : Enum {
    public int value__;
    [NativeNameAttribute("Name", "")]
public static D3DResourceReturnType None;
    [NativeNameAttribute("Name", "D3D_RETURN_TYPE_UNORM")]
public static D3DResourceReturnType D3DReturnTypeUnorm;
    [NativeNameAttribute("Name", "D3D_RETURN_TYPE_SNORM")]
public static D3DResourceReturnType D3DReturnTypeSNorm;
    [NativeNameAttribute("Name", "D3D_RETURN_TYPE_SINT")]
public static D3DResourceReturnType D3DReturnTypeSint;
    [NativeNameAttribute("Name", "D3D_RETURN_TYPE_UINT")]
public static D3DResourceReturnType D3DReturnTypeUint;
    [NativeNameAttribute("Name", "D3D_RETURN_TYPE_FLOAT")]
public static D3DResourceReturnType D3DReturnTypeFloat;
    [NativeNameAttribute("Name", "D3D_RETURN_TYPE_MIXED")]
public static D3DResourceReturnType D3DReturnTypeMixed;
    [NativeNameAttribute("Name", "D3D_RETURN_TYPE_DOUBLE")]
public static D3DResourceReturnType D3DReturnTypeDouble;
    [NativeNameAttribute("Name", "D3D_RETURN_TYPE_CONTINUED")]
public static D3DResourceReturnType D3DReturnTypeContinued;
    [NativeNameAttribute("Name", "D3D10_RETURN_TYPE_UNORM")]
public static D3DResourceReturnType D3D10ReturnTypeUnorm;
    [NativeNameAttribute("Name", "D3D10_RETURN_TYPE_SNORM")]
public static D3DResourceReturnType D3D10ReturnTypeSNorm;
    [NativeNameAttribute("Name", "D3D10_RETURN_TYPE_SINT")]
public static D3DResourceReturnType D3D10ReturnTypeSint;
    [NativeNameAttribute("Name", "D3D10_RETURN_TYPE_UINT")]
public static D3DResourceReturnType D3D10ReturnTypeUint;
    [NativeNameAttribute("Name", "D3D10_RETURN_TYPE_FLOAT")]
public static D3DResourceReturnType D3D10ReturnTypeFloat;
    [NativeNameAttribute("Name", "D3D10_RETURN_TYPE_MIXED")]
public static D3DResourceReturnType D3D10ReturnTypeMixed;
    [NativeNameAttribute("Name", "D3D11_RETURN_TYPE_UNORM")]
public static D3DResourceReturnType D3D11ReturnTypeUnorm;
    [NativeNameAttribute("Name", "D3D11_RETURN_TYPE_SNORM")]
public static D3DResourceReturnType D3D11ReturnTypeSNorm;
    [NativeNameAttribute("Name", "D3D11_RETURN_TYPE_SINT")]
public static D3DResourceReturnType D3D11ReturnTypeSint;
    [NativeNameAttribute("Name", "D3D11_RETURN_TYPE_UINT")]
public static D3DResourceReturnType D3D11ReturnTypeUint;
    [NativeNameAttribute("Name", "D3D11_RETURN_TYPE_FLOAT")]
public static D3DResourceReturnType D3D11ReturnTypeFloat;
    [NativeNameAttribute("Name", "D3D11_RETURN_TYPE_MIXED")]
public static D3DResourceReturnType D3D11ReturnTypeMixed;
    [NativeNameAttribute("Name", "D3D11_RETURN_TYPE_DOUBLE")]
public static D3DResourceReturnType D3D11ReturnTypeDouble;
    [NativeNameAttribute("Name", "D3D11_RETURN_TYPE_CONTINUED")]
public static D3DResourceReturnType D3D11ReturnTypeContinued;
}
[NativeNameAttribute("Name", "_D3D_SHADER_CBUFFER_FLAGS")]
public enum Silk.NET.Core.Native.D3DShaderCBufferFlags : Enum {
    public int value__;
    [NativeNameAttribute("Name", "D3D_CBF_USERPACKED")]
public static D3DShaderCBufferFlags D3DCbfUserpacked;
    [NativeNameAttribute("Name", "D3D10_CBF_USERPACKED")]
public static D3DShaderCBufferFlags D3D10CbfUserpacked;
    [NativeNameAttribute("Name", "D3D_CBF_FORCE_DWORD")]
public static D3DShaderCBufferFlags D3DCbfForceDword;
}
[FlagsAttribute]
[NativeNameAttribute("Name", "_D3D_SHADER_INPUT_FLAGS")]
public enum Silk.NET.Core.Native.D3DShaderInputFlags : Enum {
    public int value__;
    [NativeNameAttribute("Name", "")]
public static D3DShaderInputFlags None;
    [NativeNameAttribute("Name", "D3D_SIF_USERPACKED")]
public static D3DShaderInputFlags D3DSifUserpacked;
    [NativeNameAttribute("Name", "D3D_SIF_COMPARISON_SAMPLER")]
public static D3DShaderInputFlags D3DSifComparisonSampler;
    [NativeNameAttribute("Name", "D3D_SIF_TEXTURE_COMPONENT_0")]
public static D3DShaderInputFlags D3DSifTextureComponent0;
    [NativeNameAttribute("Name", "D3D_SIF_TEXTURE_COMPONENT_1")]
public static D3DShaderInputFlags D3DSifTextureComponent1;
    [NativeNameAttribute("Name", "D3D_SIF_TEXTURE_COMPONENTS")]
public static D3DShaderInputFlags D3DSifTextureComponents;
    [NativeNameAttribute("Name", "D3D_SIF_UNUSED")]
public static D3DShaderInputFlags D3DSifUnused;
    [NativeNameAttribute("Name", "D3D10_SIF_USERPACKED")]
public static D3DShaderInputFlags D3D10SifUserpacked;
    [NativeNameAttribute("Name", "D3D10_SIF_COMPARISON_SAMPLER")]
public static D3DShaderInputFlags D3D10SifComparisonSampler;
    [NativeNameAttribute("Name", "D3D10_SIF_TEXTURE_COMPONENT_0")]
public static D3DShaderInputFlags D3D10SifTextureComponent0;
    [NativeNameAttribute("Name", "D3D10_SIF_TEXTURE_COMPONENT_1")]
public static D3DShaderInputFlags D3D10SifTextureComponent1;
    [NativeNameAttribute("Name", "D3D10_SIF_TEXTURE_COMPONENTS")]
public static D3DShaderInputFlags D3D10SifTextureComponents;
    [NativeNameAttribute("Name", "D3D_SIF_FORCE_DWORD")]
public static D3DShaderInputFlags D3DSifForceDword;
}
[NativeNameAttribute("Name", "_D3D_SHADER_INPUT_TYPE")]
public enum Silk.NET.Core.Native.D3DShaderInputType : Enum {
    public int value__;
    [NativeNameAttribute("Name", "D3D_SIT_CBUFFER")]
public static D3DShaderInputType D3DSitCbuffer;
    [NativeNameAttribute("Name", "D3D_SIT_TBUFFER")]
public static D3DShaderInputType D3DSitTbuffer;
    [NativeNameAttribute("Name", "D3D_SIT_TEXTURE")]
public static D3DShaderInputType D3DSitTexture;
    [NativeNameAttribute("Name", "D3D_SIT_SAMPLER")]
public static D3DShaderInputType D3DSitSampler;
    [NativeNameAttribute("Name", "D3D_SIT_UAV_RWTYPED")]
public static D3DShaderInputType D3DSitUavRwtyped;
    [NativeNameAttribute("Name", "D3D_SIT_STRUCTURED")]
public static D3DShaderInputType D3DSitStructured;
    [NativeNameAttribute("Name", "D3D_SIT_UAV_RWSTRUCTURED")]
public static D3DShaderInputType D3DSitUavRwstructured;
    [NativeNameAttribute("Name", "D3D_SIT_BYTEADDRESS")]
public static D3DShaderInputType D3DSitByteaddress;
    [NativeNameAttribute("Name", "D3D_SIT_UAV_RWBYTEADDRESS")]
public static D3DShaderInputType D3DSitUavRwbyteaddress;
    [NativeNameAttribute("Name", "D3D_SIT_UAV_APPEND_STRUCTURED")]
public static D3DShaderInputType D3DSitUavAppendStructured;
    [NativeNameAttribute("Name", "D3D_SIT_UAV_CONSUME_STRUCTURED")]
public static D3DShaderInputType D3DSitUavConsumeStructured;
    [NativeNameAttribute("Name", "D3D_SIT_UAV_RWSTRUCTURED_WITH_COUNTER")]
public static D3DShaderInputType D3DSitUavRwstructuredWithCounter;
    [NativeNameAttribute("Name", "D3D_SIT_RTACCELERATIONSTRUCTURE")]
public static D3DShaderInputType D3DSitRtaccelerationstructure;
    [NativeNameAttribute("Name", "D3D_SIT_UAV_FEEDBACKTEXTURE")]
public static D3DShaderInputType D3DSitUavFeedbacktexture;
    [NativeNameAttribute("Name", "D3D10_SIT_CBUFFER")]
public static D3DShaderInputType D3D10SitCbuffer;
    [NativeNameAttribute("Name", "D3D10_SIT_TBUFFER")]
public static D3DShaderInputType D3D10SitTbuffer;
    [NativeNameAttribute("Name", "D3D10_SIT_TEXTURE")]
public static D3DShaderInputType D3D10SitTexture;
    [NativeNameAttribute("Name", "D3D10_SIT_SAMPLER")]
public static D3DShaderInputType D3D10SitSampler;
    [NativeNameAttribute("Name", "D3D11_SIT_UAV_RWTYPED")]
public static D3DShaderInputType D3D11SitUavRwtyped;
    [NativeNameAttribute("Name", "D3D11_SIT_STRUCTURED")]
public static D3DShaderInputType D3D11SitStructured;
    [NativeNameAttribute("Name", "D3D11_SIT_UAV_RWSTRUCTURED")]
public static D3DShaderInputType D3D11SitUavRwstructured;
    [NativeNameAttribute("Name", "D3D11_SIT_BYTEADDRESS")]
public static D3DShaderInputType D3D11SitByteaddress;
    [NativeNameAttribute("Name", "D3D11_SIT_UAV_RWBYTEADDRESS")]
public static D3DShaderInputType D3D11SitUavRwbyteaddress;
    [NativeNameAttribute("Name", "D3D11_SIT_UAV_APPEND_STRUCTURED")]
public static D3DShaderInputType D3D11SitUavAppendStructured;
    [NativeNameAttribute("Name", "D3D11_SIT_UAV_CONSUME_STRUCTURED")]
public static D3DShaderInputType D3D11SitUavConsumeStructured;
    [NativeNameAttribute("Name", "D3D11_SIT_UAV_RWSTRUCTURED_WITH_COUNTER")]
public static D3DShaderInputType D3D11SitUavRwstructuredWithCounter;
}
[NativeNameAttribute("Name", "_D3D_SHADER_MACRO")]
public class Silk.NET.Core.Native.D3DShaderMacro : ValueType {
    [NativeNameAttribute("Type", "LPCSTR")]
[NativeNameAttribute("Type.Name", "LPCSTR")]
[NativeNameAttribute("Name", "Name")]
public Byte* Name;
    [NativeNameAttribute("Type", "LPCSTR")]
[NativeNameAttribute("Type.Name", "LPCSTR")]
[NativeNameAttribute("Name", "Definition")]
public Byte* Definition;
    public D3DShaderMacro(Byte* name, Byte* definition);
}
[NativeNameAttribute("Name", "_D3D_SHADER_VARIABLE_CLASS")]
public enum Silk.NET.Core.Native.D3DShaderVariableClass : Enum {
    public int value__;
    [NativeNameAttribute("Name", "D3D_SVC_SCALAR")]
public static D3DShaderVariableClass D3DSvcScalar;
    [NativeNameAttribute("Name", "D3D_SVC_VECTOR")]
public static D3DShaderVariableClass D3DSvcVector;
    [NativeNameAttribute("Name", "D3D_SVC_MATRIX_ROWS")]
public static D3DShaderVariableClass D3DSvcMatrixRows;
    [NativeNameAttribute("Name", "D3D_SVC_MATRIX_COLUMNS")]
public static D3DShaderVariableClass D3DSvcMatrixColumns;
    [NativeNameAttribute("Name", "D3D_SVC_OBJECT")]
public static D3DShaderVariableClass D3DSvcObject;
    [NativeNameAttribute("Name", "D3D_SVC_STRUCT")]
public static D3DShaderVariableClass D3DSvcStruct;
    [NativeNameAttribute("Name", "D3D_SVC_INTERFACE_CLASS")]
public static D3DShaderVariableClass D3DSvcInterfaceClass;
    [NativeNameAttribute("Name", "D3D_SVC_INTERFACE_POINTER")]
public static D3DShaderVariableClass D3DSvcInterfacePointer;
    [NativeNameAttribute("Name", "D3D10_SVC_SCALAR")]
public static D3DShaderVariableClass D3D10SvcScalar;
    [NativeNameAttribute("Name", "D3D10_SVC_VECTOR")]
public static D3DShaderVariableClass D3D10SvcVector;
    [NativeNameAttribute("Name", "D3D10_SVC_MATRIX_ROWS")]
public static D3DShaderVariableClass D3D10SvcMatrixRows;
    [NativeNameAttribute("Name", "D3D10_SVC_MATRIX_COLUMNS")]
public static D3DShaderVariableClass D3D10SvcMatrixColumns;
    [NativeNameAttribute("Name", "D3D10_SVC_OBJECT")]
public static D3DShaderVariableClass D3D10SvcObject;
    [NativeNameAttribute("Name", "D3D10_SVC_STRUCT")]
public static D3DShaderVariableClass D3D10SvcStruct;
    [NativeNameAttribute("Name", "D3D11_SVC_INTERFACE_CLASS")]
public static D3DShaderVariableClass D3D11SvcInterfaceClass;
    [NativeNameAttribute("Name", "D3D11_SVC_INTERFACE_POINTER")]
public static D3DShaderVariableClass D3D11SvcInterfacePointer;
    [NativeNameAttribute("Name", "D3D_SVC_FORCE_DWORD")]
public static D3DShaderVariableClass D3DSvcForceDword;
}
[FlagsAttribute]
[NativeNameAttribute("Name", "_D3D_SHADER_VARIABLE_FLAGS")]
public enum Silk.NET.Core.Native.D3DShaderVariableFlags : Enum {
    public int value__;
    [NativeNameAttribute("Name", "")]
public static D3DShaderVariableFlags None;
    [NativeNameAttribute("Name", "D3D_SVF_USERPACKED")]
public static D3DShaderVariableFlags D3DSvfUserpacked;
    [NativeNameAttribute("Name", "D3D_SVF_USED")]
public static D3DShaderVariableFlags D3DSvfUsed;
    [NativeNameAttribute("Name", "D3D_SVF_INTERFACE_POINTER")]
public static D3DShaderVariableFlags D3DSvfInterfacePointer;
    [NativeNameAttribute("Name", "D3D_SVF_INTERFACE_PARAMETER")]
public static D3DShaderVariableFlags D3DSvfInterfaceParameter;
    [NativeNameAttribute("Name", "D3D10_SVF_USERPACKED")]
public static D3DShaderVariableFlags D3D10SvfUserpacked;
    [NativeNameAttribute("Name", "D3D10_SVF_USED")]
public static D3DShaderVariableFlags D3D10SvfUsed;
    [NativeNameAttribute("Name", "D3D11_SVF_INTERFACE_POINTER")]
public static D3DShaderVariableFlags D3D11SvfInterfacePointer;
    [NativeNameAttribute("Name", "D3D11_SVF_INTERFACE_PARAMETER")]
public static D3DShaderVariableFlags D3D11SvfInterfaceParameter;
    [NativeNameAttribute("Name", "D3D_SVF_FORCE_DWORD")]
public static D3DShaderVariableFlags D3DSvfForceDword;
}
[NativeNameAttribute("Name", "_D3D_SHADER_VARIABLE_TYPE")]
public enum Silk.NET.Core.Native.D3DShaderVariableType : Enum {
    public int value__;
    [NativeNameAttribute("Name", "D3D_SVT_VOID")]
public static D3DShaderVariableType D3DSvtVoid;
    [NativeNameAttribute("Name", "D3D_SVT_BOOL")]
public static D3DShaderVariableType D3DSvtBool;
    [NativeNameAttribute("Name", "D3D_SVT_INT")]
public static D3DShaderVariableType D3DSvtInt;
    [NativeNameAttribute("Name", "D3D_SVT_FLOAT")]
public static D3DShaderVariableType D3DSvtFloat;
    [NativeNameAttribute("Name", "D3D_SVT_STRING")]
public static D3DShaderVariableType D3DSvtString;
    [NativeNameAttribute("Name", "D3D_SVT_TEXTURE")]
public static D3DShaderVariableType D3DSvtTexture;
    [NativeNameAttribute("Name", "D3D_SVT_TEXTURE1D")]
public static D3DShaderVariableType D3DSvtTexture1D;
    [NativeNameAttribute("Name", "D3D_SVT_TEXTURE2D")]
public static D3DShaderVariableType D3DSvtTexture2D;
    [NativeNameAttribute("Name", "D3D_SVT_TEXTURE3D")]
public static D3DShaderVariableType D3DSvtTexture3D;
    [NativeNameAttribute("Name", "D3D_SVT_TEXTURECUBE")]
public static D3DShaderVariableType D3DSvtTexturecube;
    [NativeNameAttribute("Name", "D3D_SVT_SAMPLER")]
public static D3DShaderVariableType D3DSvtSampler;
    [NativeNameAttribute("Name", "D3D_SVT_SAMPLER1D")]
public static D3DShaderVariableType D3DSvtSampler1D;
    [NativeNameAttribute("Name", "D3D_SVT_SAMPLER2D")]
public static D3DShaderVariableType D3DSvtSampler2D;
    [NativeNameAttribute("Name", "D3D_SVT_SAMPLER3D")]
public static D3DShaderVariableType D3DSvtSampler3D;
    [NativeNameAttribute("Name", "D3D_SVT_SAMPLERCUBE")]
public static D3DShaderVariableType D3DSvtSamplercube;
    [NativeNameAttribute("Name", "D3D_SVT_PIXELSHADER")]
public static D3DShaderVariableType D3DSvtPixelshader;
    [NativeNameAttribute("Name", "D3D_SVT_VERTEXSHADER")]
public static D3DShaderVariableType D3DSvtVertexshader;
    [NativeNameAttribute("Name", "D3D_SVT_PIXELFRAGMENT")]
public static D3DShaderVariableType D3DSvtPixelfragment;
    [NativeNameAttribute("Name", "D3D_SVT_VERTEXFRAGMENT")]
public static D3DShaderVariableType D3DSvtVertexfragment;
    [NativeNameAttribute("Name", "D3D_SVT_UINT")]
public static D3DShaderVariableType D3DSvtUint;
    [NativeNameAttribute("Name", "D3D_SVT_UINT8")]
public static D3DShaderVariableType D3DSvtUint8;
    [NativeNameAttribute("Name", "D3D_SVT_GEOMETRYSHADER")]
public static D3DShaderVariableType D3DSvtGeometryshader;
    [NativeNameAttribute("Name", "D3D_SVT_RASTERIZER")]
public static D3DShaderVariableType D3DSvtRasterizer;
    [NativeNameAttribute("Name", "D3D_SVT_DEPTHSTENCIL")]
public static D3DShaderVariableType D3DSvtDepthstencil;
    [NativeNameAttribute("Name", "D3D_SVT_BLEND")]
public static D3DShaderVariableType D3DSvtBlend;
    [NativeNameAttribute("Name", "D3D_SVT_BUFFER")]
public static D3DShaderVariableType D3DSvtBuffer;
    [NativeNameAttribute("Name", "D3D_SVT_CBUFFER")]
public static D3DShaderVariableType D3DSvtCbuffer;
    [NativeNameAttribute("Name", "D3D_SVT_TBUFFER")]
public static D3DShaderVariableType D3DSvtTbuffer;
    [NativeNameAttribute("Name", "D3D_SVT_TEXTURE1DARRAY")]
public static D3DShaderVariableType D3DSvtTexture1Darray;
    [NativeNameAttribute("Name", "D3D_SVT_TEXTURE2DARRAY")]
public static D3DShaderVariableType D3DSvtTexture2Darray;
    [NativeNameAttribute("Name", "D3D_SVT_RENDERTARGETVIEW")]
public static D3DShaderVariableType D3DSvtRendertargetview;
    [NativeNameAttribute("Name", "D3D_SVT_DEPTHSTENCILVIEW")]
public static D3DShaderVariableType D3DSvtDepthstencilview;
    [NativeNameAttribute("Name", "D3D_SVT_TEXTURE2DMS")]
public static D3DShaderVariableType D3DSvtTexture2Dms;
    [NativeNameAttribute("Name", "D3D_SVT_TEXTURE2DMSARRAY")]
public static D3DShaderVariableType D3DSvtTexture2Dmsarray;
    [NativeNameAttribute("Name", "D3D_SVT_TEXTURECUBEARRAY")]
public static D3DShaderVariableType D3DSvtTexturecubearray;
    [NativeNameAttribute("Name", "D3D_SVT_HULLSHADER")]
public static D3DShaderVariableType D3DSvtHullshader;
    [NativeNameAttribute("Name", "D3D_SVT_DOMAINSHADER")]
public static D3DShaderVariableType D3DSvtDomainshader;
    [NativeNameAttribute("Name", "D3D_SVT_INTERFACE_POINTER")]
public static D3DShaderVariableType D3DSvtInterfacePointer;
    [NativeNameAttribute("Name", "D3D_SVT_COMPUTESHADER")]
public static D3DShaderVariableType D3DSvtComputeshader;
    [NativeNameAttribute("Name", "D3D_SVT_DOUBLE")]
public static D3DShaderVariableType D3DSvtDouble;
    [NativeNameAttribute("Name", "D3D_SVT_RWTEXTURE1D")]
public static D3DShaderVariableType D3DSvtRwtexture1D;
    [NativeNameAttribute("Name", "D3D_SVT_RWTEXTURE1DARRAY")]
public static D3DShaderVariableType D3DSvtRwtexture1Darray;
    [NativeNameAttribute("Name", "D3D_SVT_RWTEXTURE2D")]
public static D3DShaderVariableType D3DSvtRwtexture2D;
    [NativeNameAttribute("Name", "D3D_SVT_RWTEXTURE2DARRAY")]
public static D3DShaderVariableType D3DSvtRwtexture2Darray;
    [NativeNameAttribute("Name", "D3D_SVT_RWTEXTURE3D")]
public static D3DShaderVariableType D3DSvtRwtexture3D;
    [NativeNameAttribute("Name", "D3D_SVT_RWBUFFER")]
public static D3DShaderVariableType D3DSvtRwbuffer;
    [NativeNameAttribute("Name", "D3D_SVT_BYTEADDRESS_BUFFER")]
public static D3DShaderVariableType D3DSvtByteaddressBuffer;
    [NativeNameAttribute("Name", "D3D_SVT_RWBYTEADDRESS_BUFFER")]
public static D3DShaderVariableType D3DSvtRwbyteaddressBuffer;
    [NativeNameAttribute("Name", "D3D_SVT_STRUCTURED_BUFFER")]
public static D3DShaderVariableType D3DSvtStructuredBuffer;
    [NativeNameAttribute("Name", "D3D_SVT_RWSTRUCTURED_BUFFER")]
public static D3DShaderVariableType D3DSvtRwstructuredBuffer;
    [NativeNameAttribute("Name", "D3D_SVT_APPEND_STRUCTURED_BUFFER")]
public static D3DShaderVariableType D3DSvtAppendStructuredBuffer;
    [NativeNameAttribute("Name", "D3D_SVT_CONSUME_STRUCTURED_BUFFER")]
public static D3DShaderVariableType D3DSvtConsumeStructuredBuffer;
    [NativeNameAttribute("Name", "D3D_SVT_MIN8FLOAT")]
public static D3DShaderVariableType D3DSvtMin8float;
    [NativeNameAttribute("Name", "D3D_SVT_MIN10FLOAT")]
public static D3DShaderVariableType D3DSvtMin10float;
    [NativeNameAttribute("Name", "D3D_SVT_MIN16FLOAT")]
public static D3DShaderVariableType D3DSvtMin16float;
    [NativeNameAttribute("Name", "D3D_SVT_MIN12INT")]
public static D3DShaderVariableType D3DSvtMin12int;
    [NativeNameAttribute("Name", "D3D_SVT_MIN16INT")]
public static D3DShaderVariableType D3DSvtMin16int;
    [NativeNameAttribute("Name", "D3D_SVT_MIN16UINT")]
public static D3DShaderVariableType D3DSvtMin16Uint;
    [NativeNameAttribute("Name", "D3D_SVT_INT16")]
public static D3DShaderVariableType D3DSvtInt16;
    [NativeNameAttribute("Name", "D3D_SVT_UINT16")]
public static D3DShaderVariableType D3DSvtUint16;
    [NativeNameAttribute("Name", "D3D_SVT_FLOAT16")]
public static D3DShaderVariableType D3DSvtFloat16;
    [NativeNameAttribute("Name", "D3D_SVT_INT64")]
public static D3DShaderVariableType D3DSvtInt64;
    [NativeNameAttribute("Name", "D3D_SVT_UINT64")]
public static D3DShaderVariableType D3DSvtUint64;
    [NativeNameAttribute("Name", "D3D10_SVT_VOID")]
public static D3DShaderVariableType D3D10SvtVoid;
    [NativeNameAttribute("Name", "D3D10_SVT_BOOL")]
public static D3DShaderVariableType D3D10SvtBool;
    [NativeNameAttribute("Name", "D3D10_SVT_INT")]
public static D3DShaderVariableType D3D10SvtInt;
    [NativeNameAttribute("Name", "D3D10_SVT_FLOAT")]
public static D3DShaderVariableType D3D10SvtFloat;
    [NativeNameAttribute("Name", "D3D10_SVT_STRING")]
public static D3DShaderVariableType D3D10SvtString;
    [NativeNameAttribute("Name", "D3D10_SVT_TEXTURE")]
public static D3DShaderVariableType D3D10SvtTexture;
    [NativeNameAttribute("Name", "D3D10_SVT_TEXTURE1D")]
public static D3DShaderVariableType D3D10SvtTexture1D;
    [NativeNameAttribute("Name", "D3D10_SVT_TEXTURE2D")]
public static D3DShaderVariableType D3D10SvtTexture2D;
    [NativeNameAttribute("Name", "D3D10_SVT_TEXTURE3D")]
public static D3DShaderVariableType D3D10SvtTexture3D;
    [NativeNameAttribute("Name", "D3D10_SVT_TEXTURECUBE")]
public static D3DShaderVariableType D3D10SvtTexturecube;
    [NativeNameAttribute("Name", "D3D10_SVT_SAMPLER")]
public static D3DShaderVariableType D3D10SvtSampler;
    [NativeNameAttribute("Name", "D3D10_SVT_SAMPLER1D")]
public static D3DShaderVariableType D3D10SvtSampler1D;
    [NativeNameAttribute("Name", "D3D10_SVT_SAMPLER2D")]
public static D3DShaderVariableType D3D10SvtSampler2D;
    [NativeNameAttribute("Name", "D3D10_SVT_SAMPLER3D")]
public static D3DShaderVariableType D3D10SvtSampler3D;
    [NativeNameAttribute("Name", "D3D10_SVT_SAMPLERCUBE")]
public static D3DShaderVariableType D3D10SvtSamplercube;
    [NativeNameAttribute("Name", "D3D10_SVT_PIXELSHADER")]
public static D3DShaderVariableType D3D10SvtPixelshader;
    [NativeNameAttribute("Name", "D3D10_SVT_VERTEXSHADER")]
public static D3DShaderVariableType D3D10SvtVertexshader;
    [NativeNameAttribute("Name", "D3D10_SVT_PIXELFRAGMENT")]
public static D3DShaderVariableType D3D10SvtPixelfragment;
    [NativeNameAttribute("Name", "D3D10_SVT_VERTEXFRAGMENT")]
public static D3DShaderVariableType D3D10SvtVertexfragment;
    [NativeNameAttribute("Name", "D3D10_SVT_UINT")]
public static D3DShaderVariableType D3D10SvtUint;
    [NativeNameAttribute("Name", "D3D10_SVT_UINT8")]
public static D3DShaderVariableType D3D10SvtUint8;
    [NativeNameAttribute("Name", "D3D10_SVT_GEOMETRYSHADER")]
public static D3DShaderVariableType D3D10SvtGeometryshader;
    [NativeNameAttribute("Name", "D3D10_SVT_RASTERIZER")]
public static D3DShaderVariableType D3D10SvtRasterizer;
    [NativeNameAttribute("Name", "D3D10_SVT_DEPTHSTENCIL")]
public static D3DShaderVariableType D3D10SvtDepthstencil;
    [NativeNameAttribute("Name", "D3D10_SVT_BLEND")]
public static D3DShaderVariableType D3D10SvtBlend;
    [NativeNameAttribute("Name", "D3D10_SVT_BUFFER")]
public static D3DShaderVariableType D3D10SvtBuffer;
    [NativeNameAttribute("Name", "D3D10_SVT_CBUFFER")]
public static D3DShaderVariableType D3D10SvtCbuffer;
    [NativeNameAttribute("Name", "D3D10_SVT_TBUFFER")]
public static D3DShaderVariableType D3D10SvtTbuffer;
    [NativeNameAttribute("Name", "D3D10_SVT_TEXTURE1DARRAY")]
public static D3DShaderVariableType D3D10SvtTexture1Darray;
    [NativeNameAttribute("Name", "D3D10_SVT_TEXTURE2DARRAY")]
public static D3DShaderVariableType D3D10SvtTexture2Darray;
    [NativeNameAttribute("Name", "D3D10_SVT_RENDERTARGETVIEW")]
public static D3DShaderVariableType D3D10SvtRendertargetview;
    [NativeNameAttribute("Name", "D3D10_SVT_DEPTHSTENCILVIEW")]
public static D3DShaderVariableType D3D10SvtDepthstencilview;
    [NativeNameAttribute("Name", "D3D10_SVT_TEXTURE2DMS")]
public static D3DShaderVariableType D3D10SvtTexture2Dms;
    [NativeNameAttribute("Name", "D3D10_SVT_TEXTURE2DMSARRAY")]
public static D3DShaderVariableType D3D10SvtTexture2Dmsarray;
    [NativeNameAttribute("Name", "D3D10_SVT_TEXTURECUBEARRAY")]
public static D3DShaderVariableType D3D10SvtTexturecubearray;
    [NativeNameAttribute("Name", "D3D11_SVT_HULLSHADER")]
public static D3DShaderVariableType D3D11SvtHullshader;
    [NativeNameAttribute("Name", "D3D11_SVT_DOMAINSHADER")]
public static D3DShaderVariableType D3D11SvtDomainshader;
    [NativeNameAttribute("Name", "D3D11_SVT_INTERFACE_POINTER")]
public static D3DShaderVariableType D3D11SvtInterfacePointer;
    [NativeNameAttribute("Name", "D3D11_SVT_COMPUTESHADER")]
public static D3DShaderVariableType D3D11SvtComputeshader;
    [NativeNameAttribute("Name", "D3D11_SVT_DOUBLE")]
public static D3DShaderVariableType D3D11SvtDouble;
    [NativeNameAttribute("Name", "D3D11_SVT_RWTEXTURE1D")]
public static D3DShaderVariableType D3D11SvtRwtexture1D;
    [NativeNameAttribute("Name", "D3D11_SVT_RWTEXTURE1DARRAY")]
public static D3DShaderVariableType D3D11SvtRwtexture1Darray;
    [NativeNameAttribute("Name", "D3D11_SVT_RWTEXTURE2D")]
public static D3DShaderVariableType D3D11SvtRwtexture2D;
    [NativeNameAttribute("Name", "D3D11_SVT_RWTEXTURE2DARRAY")]
public static D3DShaderVariableType D3D11SvtRwtexture2Darray;
    [NativeNameAttribute("Name", "D3D11_SVT_RWTEXTURE3D")]
public static D3DShaderVariableType D3D11SvtRwtexture3D;
    [NativeNameAttribute("Name", "D3D11_SVT_RWBUFFER")]
public static D3DShaderVariableType D3D11SvtRwbuffer;
    [NativeNameAttribute("Name", "D3D11_SVT_BYTEADDRESS_BUFFER")]
public static D3DShaderVariableType D3D11SvtByteaddressBuffer;
    [NativeNameAttribute("Name", "D3D11_SVT_RWBYTEADDRESS_BUFFER")]
public static D3DShaderVariableType D3D11SvtRwbyteaddressBuffer;
    [NativeNameAttribute("Name", "D3D11_SVT_STRUCTURED_BUFFER")]
public static D3DShaderVariableType D3D11SvtStructuredBuffer;
    [NativeNameAttribute("Name", "D3D11_SVT_RWSTRUCTURED_BUFFER")]
public static D3DShaderVariableType D3D11SvtRwstructuredBuffer;
    [NativeNameAttribute("Name", "D3D11_SVT_APPEND_STRUCTURED_BUFFER")]
public static D3DShaderVariableType D3D11SvtAppendStructuredBuffer;
    [NativeNameAttribute("Name", "D3D11_SVT_CONSUME_STRUCTURED_BUFFER")]
public static D3DShaderVariableType D3D11SvtConsumeStructuredBuffer;
    [NativeNameAttribute("Name", "D3D_SVT_FORCE_DWORD")]
public static D3DShaderVariableType D3DSvtForceDword;
}
[NativeNameAttribute("Name", "D3D_SRV_DIMENSION")]
public enum Silk.NET.Core.Native.D3DSrvDimension : Enum {
    public int value__;
    [NativeNameAttribute("Name", "D3D_SRV_DIMENSION_UNKNOWN")]
public static D3DSrvDimension D3DSrvDimensionUnknown;
    [NativeNameAttribute("Name", "D3D_SRV_DIMENSION_BUFFER")]
public static D3DSrvDimension D3DSrvDimensionBuffer;
    [NativeNameAttribute("Name", "D3D_SRV_DIMENSION_TEXTURE1D")]
public static D3DSrvDimension D3DSrvDimensionTexture1D;
    [NativeNameAttribute("Name", "D3D_SRV_DIMENSION_TEXTURE1DARRAY")]
public static D3DSrvDimension D3DSrvDimensionTexture1Darray;
    [NativeNameAttribute("Name", "D3D_SRV_DIMENSION_TEXTURE2D")]
public static D3DSrvDimension D3DSrvDimensionTexture2D;
    [NativeNameAttribute("Name", "D3D_SRV_DIMENSION_TEXTURE2DARRAY")]
public static D3DSrvDimension D3DSrvDimensionTexture2Darray;
    [NativeNameAttribute("Name", "D3D_SRV_DIMENSION_TEXTURE2DMS")]
public static D3DSrvDimension D3DSrvDimensionTexture2Dms;
    [NativeNameAttribute("Name", "D3D_SRV_DIMENSION_TEXTURE2DMSARRAY")]
public static D3DSrvDimension D3DSrvDimensionTexture2Dmsarray;
    [NativeNameAttribute("Name", "D3D_SRV_DIMENSION_TEXTURE3D")]
public static D3DSrvDimension D3DSrvDimensionTexture3D;
    [NativeNameAttribute("Name", "D3D_SRV_DIMENSION_TEXTURECUBE")]
public static D3DSrvDimension D3DSrvDimensionTexturecube;
    [NativeNameAttribute("Name", "D3D_SRV_DIMENSION_TEXTURECUBEARRAY")]
public static D3DSrvDimension D3DSrvDimensionTexturecubearray;
    [NativeNameAttribute("Name", "D3D_SRV_DIMENSION_BUFFEREX")]
public static D3DSrvDimension D3DSrvDimensionBufferex;
    [NativeNameAttribute("Name", "D3D10_SRV_DIMENSION_UNKNOWN")]
public static D3DSrvDimension D3D10SrvDimensionUnknown;
    [NativeNameAttribute("Name", "D3D10_SRV_DIMENSION_BUFFER")]
public static D3DSrvDimension D3D10SrvDimensionBuffer;
    [NativeNameAttribute("Name", "D3D10_SRV_DIMENSION_TEXTURE1D")]
public static D3DSrvDimension D3D10SrvDimensionTexture1D;
    [NativeNameAttribute("Name", "D3D10_SRV_DIMENSION_TEXTURE1DARRAY")]
public static D3DSrvDimension D3D10SrvDimensionTexture1Darray;
    [NativeNameAttribute("Name", "D3D10_SRV_DIMENSION_TEXTURE2D")]
public static D3DSrvDimension D3D10SrvDimensionTexture2D;
    [NativeNameAttribute("Name", "D3D10_SRV_DIMENSION_TEXTURE2DARRAY")]
public static D3DSrvDimension D3D10SrvDimensionTexture2Darray;
    [NativeNameAttribute("Name", "D3D10_SRV_DIMENSION_TEXTURE2DMS")]
public static D3DSrvDimension D3D10SrvDimensionTexture2Dms;
    [NativeNameAttribute("Name", "D3D10_SRV_DIMENSION_TEXTURE2DMSARRAY")]
public static D3DSrvDimension D3D10SrvDimensionTexture2Dmsarray;
    [NativeNameAttribute("Name", "D3D10_SRV_DIMENSION_TEXTURE3D")]
public static D3DSrvDimension D3D10SrvDimensionTexture3D;
    [NativeNameAttribute("Name", "D3D10_SRV_DIMENSION_TEXTURECUBE")]
public static D3DSrvDimension D3D10SrvDimensionTexturecube;
    [NativeNameAttribute("Name", "D3D10_1_SRV_DIMENSION_UNKNOWN")]
public static D3DSrvDimension D3D101SrvDimensionUnknown;
    [NativeNameAttribute("Name", "D3D10_1_SRV_DIMENSION_BUFFER")]
public static D3DSrvDimension D3D101SrvDimensionBuffer;
    [NativeNameAttribute("Name", "D3D10_1_SRV_DIMENSION_TEXTURE1D")]
public static D3DSrvDimension D3D101SrvDimensionTexture1D;
    [NativeNameAttribute("Name", "D3D10_1_SRV_DIMENSION_TEXTURE1DARRAY")]
public static D3DSrvDimension D3D101SrvDimensionTexture1Darray;
    [NativeNameAttribute("Name", "D3D10_1_SRV_DIMENSION_TEXTURE2D")]
public static D3DSrvDimension D3D101SrvDimensionTexture2D;
    [NativeNameAttribute("Name", "D3D10_1_SRV_DIMENSION_TEXTURE2DARRAY")]
public static D3DSrvDimension D3D101SrvDimensionTexture2Darray;
    [NativeNameAttribute("Name", "D3D10_1_SRV_DIMENSION_TEXTURE2DMS")]
public static D3DSrvDimension D3D101SrvDimensionTexture2Dms;
    [NativeNameAttribute("Name", "D3D10_1_SRV_DIMENSION_TEXTURE2DMSARRAY")]
public static D3DSrvDimension D3D101SrvDimensionTexture2Dmsarray;
    [NativeNameAttribute("Name", "D3D10_1_SRV_DIMENSION_TEXTURE3D")]
public static D3DSrvDimension D3D101SrvDimensionTexture3D;
    [NativeNameAttribute("Name", "D3D10_1_SRV_DIMENSION_TEXTURECUBE")]
public static D3DSrvDimension D3D101SrvDimensionTexturecube;
    [NativeNameAttribute("Name", "D3D10_1_SRV_DIMENSION_TEXTURECUBEARRAY")]
public static D3DSrvDimension D3D101SrvDimensionTexturecubearray;
    [NativeNameAttribute("Name", "D3D11_SRV_DIMENSION_UNKNOWN")]
public static D3DSrvDimension D3D11SrvDimensionUnknown;
    [NativeNameAttribute("Name", "D3D11_SRV_DIMENSION_BUFFER")]
public static D3DSrvDimension D3D11SrvDimensionBuffer;
    [NativeNameAttribute("Name", "D3D11_SRV_DIMENSION_TEXTURE1D")]
public static D3DSrvDimension D3D11SrvDimensionTexture1D;
    [NativeNameAttribute("Name", "D3D11_SRV_DIMENSION_TEXTURE1DARRAY")]
public static D3DSrvDimension D3D11SrvDimensionTexture1Darray;
    [NativeNameAttribute("Name", "D3D11_SRV_DIMENSION_TEXTURE2D")]
public static D3DSrvDimension D3D11SrvDimensionTexture2D;
    [NativeNameAttribute("Name", "D3D11_SRV_DIMENSION_TEXTURE2DARRAY")]
public static D3DSrvDimension D3D11SrvDimensionTexture2Darray;
    [NativeNameAttribute("Name", "D3D11_SRV_DIMENSION_TEXTURE2DMS")]
public static D3DSrvDimension D3D11SrvDimensionTexture2Dms;
    [NativeNameAttribute("Name", "D3D11_SRV_DIMENSION_TEXTURE2DMSARRAY")]
public static D3DSrvDimension D3D11SrvDimensionTexture2Dmsarray;
    [NativeNameAttribute("Name", "D3D11_SRV_DIMENSION_TEXTURE3D")]
public static D3DSrvDimension D3D11SrvDimensionTexture3D;
    [NativeNameAttribute("Name", "D3D11_SRV_DIMENSION_TEXTURECUBE")]
public static D3DSrvDimension D3D11SrvDimensionTexturecube;
    [NativeNameAttribute("Name", "D3D11_SRV_DIMENSION_TEXTURECUBEARRAY")]
public static D3DSrvDimension D3D11SrvDimensionTexturecubearray;
    [NativeNameAttribute("Name", "D3D11_SRV_DIMENSION_BUFFEREX")]
public static D3DSrvDimension D3D11SrvDimensionBufferex;
}
[FlagsAttribute]
[NativeNameAttribute("Name", "D3D_TESSELLATOR_DOMAIN")]
public enum Silk.NET.Core.Native.D3DTessellatorDomain : Enum {
    public int value__;
    [NativeNameAttribute("Name", "D3D_TESSELLATOR_DOMAIN_UNDEFINED")]
public static D3DTessellatorDomain D3DTessellatorDomainUndefined;
    [NativeNameAttribute("Name", "D3D_TESSELLATOR_DOMAIN_ISOLINE")]
public static D3DTessellatorDomain D3DTessellatorDomainIsoline;
    [NativeNameAttribute("Name", "D3D_TESSELLATOR_DOMAIN_TRI")]
public static D3DTessellatorDomain D3DTessellatorDomainTri;
    [NativeNameAttribute("Name", "D3D_TESSELLATOR_DOMAIN_QUAD")]
public static D3DTessellatorDomain D3DTessellatorDomainQuad;
    [NativeNameAttribute("Name", "D3D11_TESSELLATOR_DOMAIN_UNDEFINED")]
public static D3DTessellatorDomain D3D11TessellatorDomainUndefined;
    [NativeNameAttribute("Name", "D3D11_TESSELLATOR_DOMAIN_ISOLINE")]
public static D3DTessellatorDomain D3D11TessellatorDomainIsoline;
    [NativeNameAttribute("Name", "D3D11_TESSELLATOR_DOMAIN_TRI")]
public static D3DTessellatorDomain D3D11TessellatorDomainTri;
    [NativeNameAttribute("Name", "D3D11_TESSELLATOR_DOMAIN_QUAD")]
public static D3DTessellatorDomain D3D11TessellatorDomainQuad;
}
[FlagsAttribute]
[NativeNameAttribute("Name", "D3D_TESSELLATOR_OUTPUT_PRIMITIVE")]
public enum Silk.NET.Core.Native.D3DTessellatorOutputPrimitive : Enum {
    public int value__;
    [NativeNameAttribute("Name", "D3D_TESSELLATOR_OUTPUT_UNDEFINED")]
public static D3DTessellatorOutputPrimitive D3DTessellatorOutputUndefined;
    [NativeNameAttribute("Name", "D3D_TESSELLATOR_OUTPUT_POINT")]
public static D3DTessellatorOutputPrimitive D3DTessellatorOutputPoint;
    [NativeNameAttribute("Name", "D3D_TESSELLATOR_OUTPUT_LINE")]
public static D3DTessellatorOutputPrimitive D3DTessellatorOutputLine;
    [NativeNameAttribute("Name", "D3D_TESSELLATOR_OUTPUT_TRIANGLE_CW")]
public static D3DTessellatorOutputPrimitive D3DTessellatorOutputTriangleCW;
    [NativeNameAttribute("Name", "D3D_TESSELLATOR_OUTPUT_TRIANGLE_CCW")]
public static D3DTessellatorOutputPrimitive D3DTessellatorOutputTriangleCcw;
    [NativeNameAttribute("Name", "D3D11_TESSELLATOR_OUTPUT_UNDEFINED")]
public static D3DTessellatorOutputPrimitive D3D11TessellatorOutputUndefined;
    [NativeNameAttribute("Name", "D3D11_TESSELLATOR_OUTPUT_POINT")]
public static D3DTessellatorOutputPrimitive D3D11TessellatorOutputPoint;
    [NativeNameAttribute("Name", "D3D11_TESSELLATOR_OUTPUT_LINE")]
public static D3DTessellatorOutputPrimitive D3D11TessellatorOutputLine;
    [NativeNameAttribute("Name", "D3D11_TESSELLATOR_OUTPUT_TRIANGLE_CW")]
public static D3DTessellatorOutputPrimitive D3D11TessellatorOutputTriangleCW;
    [NativeNameAttribute("Name", "D3D11_TESSELLATOR_OUTPUT_TRIANGLE_CCW")]
public static D3DTessellatorOutputPrimitive D3D11TessellatorOutputTriangleCcw;
}
[FlagsAttribute]
[NativeNameAttribute("Name", "D3D_TESSELLATOR_PARTITIONING")]
public enum Silk.NET.Core.Native.D3DTessellatorPartitioning : Enum {
    public int value__;
    [NativeNameAttribute("Name", "D3D_TESSELLATOR_PARTITIONING_UNDEFINED")]
public static D3DTessellatorPartitioning D3DTessellatorPartitioningUndefined;
    [NativeNameAttribute("Name", "D3D_TESSELLATOR_PARTITIONING_INTEGER")]
public static D3DTessellatorPartitioning D3DTessellatorPartitioningInteger;
    [NativeNameAttribute("Name", "D3D_TESSELLATOR_PARTITIONING_POW2")]
public static D3DTessellatorPartitioning D3DTessellatorPartitioningPow2;
    [NativeNameAttribute("Name", "D3D_TESSELLATOR_PARTITIONING_FRACTIONAL_ODD")]
public static D3DTessellatorPartitioning D3DTessellatorPartitioningFractionalOdd;
    [NativeNameAttribute("Name", "D3D_TESSELLATOR_PARTITIONING_FRACTIONAL_EVEN")]
public static D3DTessellatorPartitioning D3DTessellatorPartitioningFractionalEven;
    [NativeNameAttribute("Name", "D3D11_TESSELLATOR_PARTITIONING_UNDEFINED")]
public static D3DTessellatorPartitioning D3D11TessellatorPartitioningUndefined;
    [NativeNameAttribute("Name", "D3D11_TESSELLATOR_PARTITIONING_INTEGER")]
public static D3DTessellatorPartitioning D3D11TessellatorPartitioningInteger;
    [NativeNameAttribute("Name", "D3D11_TESSELLATOR_PARTITIONING_POW2")]
public static D3DTessellatorPartitioning D3D11TessellatorPartitioningPow2;
    [NativeNameAttribute("Name", "D3D11_TESSELLATOR_PARTITIONING_FRACTIONAL_ODD")]
public static D3DTessellatorPartitioning D3D11TessellatorPartitioningFractionalOdd;
    [NativeNameAttribute("Name", "D3D11_TESSELLATOR_PARTITIONING_FRACTIONAL_EVEN")]
public static D3DTessellatorPartitioning D3D11TessellatorPartitioningFractionalEven;
}
public enum Silk.NET.Core.Native.DelegatePointerKind : Enum {
    public int value__;
    public static DelegatePointerKind Stub;
    public static DelegatePointerKind Passthrough;
}
[UnmanagedFunctionPointerAttribute("2")]
public class Silk.NET.Core.Native.DestructionCallback : MulticastDelegate {
    public DestructionCallback(object object, IntPtr method);
    public virtual void Invoke(Void* arg0);
    public virtual IAsyncResult BeginInvoke(Void* arg0, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum Silk.NET.Core.Native.DXSwapchainProvider : Enum {
    public int value__;
    public static DXSwapchainProvider Win32;
    public static DXSwapchainProvider Glfw;
    public static DXSwapchainProvider Sdl2;
}
[AttributeUsageAttribute("64")]
public class Silk.NET.Core.Native.ExcludeFromOverrideAttribute : Attribute {
    public ExcludeFromOverrideAttribute(int id);
}
public enum Silk.NET.Core.Native.FlowDirection : Enum {
    public int value__;
    public static FlowDirection Undefined;
    public static FlowDirection In;
    public static FlowDirection Out;
}
public class Silk.NET.Core.Native.GcUtility : object {
    private ConcurrentDictionary`2<int, List`1<Pinned>> _pins;
    public GcUtility(int concurrencyLevel, int slotCount);
    private void AddPin(int slot, Pinned pin);
    public void PinUntilNextCall(object obj, int slot);
    public void Pin(object obj, int slot);
    public void Unpin(object obj, Nullable`1<int> slot);
    [CompilerGeneratedAttribute]
internal static void <Unpin>g__CoreUnpin|6_0(IList`1<Pinned> pins, object shouldMatch);
}
[DefaultMemberAttribute("Item")]
public class Silk.NET.Core.Native.GlobalMemory : object {
    private object _memoryObject;
    private int _stringArrayCount;
    private bool _freed;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    public int Length { get; }
    public Byte& Item { get; }
    [NativeIntegerAttribute]
public IntPtr Handle { get; }
    private GlobalMemory(object memoryObject, int length, int stringArrayCount);
    [CompilerGeneratedAttribute]
public int get_Length();
    public Byte& get_Item(int index);
    public IntPtr get_Handle();
    public Span`1<byte> AsSpan();
    public Span`1<T> AsSpan();
    public T& AsRef(int index);
    public T* AsPtr(int index);
    public static Span`1<byte> op_Implicit(GlobalMemory left);
    public static Void* op_Implicit(GlobalMemory left);
    public static IntPtr op_Implicit(GlobalMemory left);
    public Byte& GetPinnableReference();
    private void Free();
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
    public static GlobalMemory Allocate(int length);
    internal static GlobalMemory AllocateForStringArray(int length, int count);
    internal static GlobalMemory FromHGlobal(IntPtr hGlobal, int len);
    internal static GlobalMemory FromBStr(IntPtr bStr, int len);
    internal static GlobalMemory FromAnyPtr(IntPtr val, int len);
}
public class Silk.NET.Core.Native.HResult : ValueType {
    [CompilerGeneratedAttribute]
private int <Value>k__BackingField;
    public int Value { get; }
    public bool IsSuccess { get; }
    public bool IsFailure { get; }
    public bool IsError { get; }
    public int Code { get; }
    public int Facility { get; }
    public int Severity { get; }
    public HResult(int hr);
    public HResult(int severity, int facility, int code);
    public static bool IndicatesSuccess(int hr);
    public static bool IndicatesFailure(int hr);
    public static bool IndicatesError(int status);
    public static int GetCode(int hr);
    public static int GetFacility(int hr);
    public static int GetSeverity(int hr);
    public static int Create(int severity, int facility, int code);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Value();
    public static int op_Implicit(HResult hr);
    public static HResult op_Implicit(int hr);
    public bool get_IsSuccess();
    public bool get_IsFailure();
    public bool get_IsError();
    public int get_Code();
    public int get_Facility();
    public int get_Severity();
    public void Throw();
}
public interface Silk.NET.Core.Native.IComVtbl {
    public abstract virtual Void*** AsVtblPtr();
}
public interface Silk.NET.Core.Native.IComVtbl`1 {
}
[GuidAttribute("8ba5fb08-5195-40e2-ac58-0d989c3a0102")]
[NativeNameAttribute("Name", "ID3D10Blob")]
public class Silk.NET.Core.Native.ID3D10Blob : ValueType {
    public static Guid Guid;
    [NativeNameAttribute("Type", "")]
[NativeNameAttribute("Type.Name", "")]
[NativeNameAttribute("Name", "lpVtbl")]
public Void** LpVtbl;
    public ReadOnlySpan`1<byte> Buffer { get; }
    private string AsString { get; }
    public ID3D10Blob(Void** lpVtbl);
    private static ID3D10Blob();
    public ReadOnlySpan`1<byte> get_Buffer();
    private string get_AsString();
    private sealed virtual override Void*** Silk.NET.Core.Native.IComVtbl.AsVtblPtr();
    public static IUnknown op_Implicit(ID3D10Blob val);
    [IsReadOnlyAttribute]
public int QueryInterface(Guid* riid, Void** ppvObject);
    [IsReadOnlyAttribute]
public int QueryInterface(Guid* riid, Void*& ppvObject);
    [IsReadOnlyAttribute]
public int QueryInterface(Guid& riid, Void** ppvObject);
    [IsReadOnlyAttribute]
public int QueryInterface(Guid& riid, Void*& ppvObject);
    [IsReadOnlyAttribute]
public UInt32 AddRef();
    [IsReadOnlyAttribute]
public UInt32 Release();
    [IsReadOnlyAttribute]
public Void* GetBufferPointer();
    [IsReadOnlyAttribute]
public UIntPtr GetBufferSize();
    [IsReadOnlyAttribute]
public int QueryInterface(ComPtr`1& ppvObject);
    [IsReadOnlyAttribute]
public ComPtr`1<TI0> QueryInterface();
}
[GuidAttribute("a06eb39a-50da-425b-8c31-4eecd6c270f3")]
[NativeNameAttribute("Name", "ID3DDestructionNotifier")]
public class Silk.NET.Core.Native.ID3DDestructionNotifier : ValueType {
    public static Guid Guid;
    [NativeNameAttribute("Type", "")]
[NativeNameAttribute("Type.Name", "")]
[NativeNameAttribute("Name", "lpVtbl")]
public Void** LpVtbl;
    public ID3DDestructionNotifier(Void** lpVtbl);
    private static ID3DDestructionNotifier();
    private sealed virtual override Void*** Silk.NET.Core.Native.IComVtbl.AsVtblPtr();
    public static IUnknown op_Implicit(ID3DDestructionNotifier val);
    [IsReadOnlyAttribute]
public int QueryInterface(Guid* riid, Void** ppvObject);
    [IsReadOnlyAttribute]
public int QueryInterface(Guid* riid, Void*& ppvObject);
    [IsReadOnlyAttribute]
public int QueryInterface(Guid& riid, Void** ppvObject);
    [IsReadOnlyAttribute]
public int QueryInterface(Guid& riid, Void*& ppvObject);
    [IsReadOnlyAttribute]
public UInt32 AddRef();
    [IsReadOnlyAttribute]
public UInt32 Release();
    [IsReadOnlyAttribute]
public int RegisterDestructionCallback(PfnDestructionCallback callbackFn, Void* pData, UInt32* pCallbackID);
    [IsReadOnlyAttribute]
public int RegisterDestructionCallback(PfnDestructionCallback callbackFn, Void* pData, UInt32& pCallbackID);
    [IsReadOnlyAttribute]
public int RegisterDestructionCallback(PfnDestructionCallback callbackFn, T0& pData, UInt32* pCallbackID);
    [IsReadOnlyAttribute]
public int RegisterDestructionCallback(PfnDestructionCallback callbackFn, T0& pData, UInt32& pCallbackID);
    [IsReadOnlyAttribute]
public int UnregisterDestructionCallback(UInt32 callbackID);
    [IsReadOnlyAttribute]
public int QueryInterface(ComPtr`1& ppvObject);
    [IsReadOnlyAttribute]
public ComPtr`1<TI0> QueryInterface();
}
[NativeNameAttribute("Name", "ID3DInclude")]
public class Silk.NET.Core.Native.ID3DInclude : ValueType {
    [NativeNameAttribute("Type", "")]
[NativeNameAttribute("Type.Name", "")]
[NativeNameAttribute("Name", "lpVtbl")]
public Void** LpVtbl;
    public ID3DInclude(Void** lpVtbl);
    private sealed virtual override Void*** Silk.NET.Core.Native.IComVtbl.AsVtblPtr();
    [IsReadOnlyAttribute]
public int Open(D3DIncludeType IncludeType, Byte* pFileName, Void* pParentData, Void** ppData, UInt32* pBytes);
    [IsReadOnlyAttribute]
public int Open(D3DIncludeType IncludeType, Byte* pFileName, Void* pParentData, Void** ppData, UInt32& pBytes);
    [IsReadOnlyAttribute]
public int Open(D3DIncludeType IncludeType, Byte* pFileName, Void* pParentData, Void*& ppData, UInt32* pBytes);
    [IsReadOnlyAttribute]
public int Open(D3DIncludeType IncludeType, Byte* pFileName, Void* pParentData, Void*& ppData, UInt32& pBytes);
    [IsReadOnlyAttribute]
public int Open(D3DIncludeType IncludeType, Byte* pFileName, T0& pParentData, Void** ppData, UInt32* pBytes);
    [IsReadOnlyAttribute]
public int Open(D3DIncludeType IncludeType, Byte* pFileName, T0& pParentData, Void** ppData, UInt32& pBytes);
    [IsReadOnlyAttribute]
public int Open(D3DIncludeType IncludeType, Byte* pFileName, T0& pParentData, Void*& ppData, UInt32* pBytes);
    [IsReadOnlyAttribute]
public int Open(D3DIncludeType IncludeType, Byte* pFileName, T0& pParentData, Void*& ppData, UInt32& pBytes);
    [IsReadOnlyAttribute]
public int Open(D3DIncludeType IncludeType, Byte& pFileName, Void* pParentData, Void** ppData, UInt32* pBytes);
    [IsReadOnlyAttribute]
public int Open(D3DIncludeType IncludeType, Byte& pFileName, Void* pParentData, Void** ppData, UInt32& pBytes);
    [IsReadOnlyAttribute]
public int Open(D3DIncludeType IncludeType, Byte& pFileName, Void* pParentData, Void*& ppData, UInt32* pBytes);
    [IsReadOnlyAttribute]
public int Open(D3DIncludeType IncludeType, Byte& pFileName, Void* pParentData, Void*& ppData, UInt32& pBytes);
    [IsReadOnlyAttribute]
public int Open(D3DIncludeType IncludeType, Byte& pFileName, T0& pParentData, Void** ppData, UInt32* pBytes);
    [IsReadOnlyAttribute]
public int Open(D3DIncludeType IncludeType, Byte& pFileName, T0& pParentData, Void** ppData, UInt32& pBytes);
    [IsReadOnlyAttribute]
public int Open(D3DIncludeType IncludeType, Byte& pFileName, T0& pParentData, Void*& ppData, UInt32* pBytes);
    [IsReadOnlyAttribute]
public int Open(D3DIncludeType IncludeType, Byte& pFileName, T0& pParentData, Void*& ppData, UInt32& pBytes);
    [IsReadOnlyAttribute]
public int Open(D3DIncludeType IncludeType, string pFileName, Void* pParentData, Void** ppData, UInt32* pBytes);
    [IsReadOnlyAttribute]
public int Open(D3DIncludeType IncludeType, string pFileName, Void* pParentData, Void** ppData, UInt32& pBytes);
    [IsReadOnlyAttribute]
public int Open(D3DIncludeType IncludeType, string pFileName, Void* pParentData, Void*& ppData, UInt32* pBytes);
    [IsReadOnlyAttribute]
public int Open(D3DIncludeType IncludeType, string pFileName, Void* pParentData, Void*& ppData, UInt32& pBytes);
    [IsReadOnlyAttribute]
public int Open(D3DIncludeType IncludeType, string pFileName, T0& pParentData, Void** ppData, UInt32* pBytes);
    [IsReadOnlyAttribute]
public int Open(D3DIncludeType IncludeType, string pFileName, T0& pParentData, Void** ppData, UInt32& pBytes);
    [IsReadOnlyAttribute]
public int Open(D3DIncludeType IncludeType, string pFileName, T0& pParentData, Void*& ppData, UInt32* pBytes);
    [IsReadOnlyAttribute]
public int Open(D3DIncludeType IncludeType, string pFileName, T0& pParentData, Void*& ppData, UInt32& pBytes);
    [IsReadOnlyAttribute]
public int Close(Void* pData);
    [IsReadOnlyAttribute]
public int Close(T0& pData);
}
[GuidAttribute("00000000-0000-0000-c000-000000000046")]
public class Silk.NET.Core.Native.IUnknown : ValueType {
    public Void** LpVtbl;
    [IsReadOnlyAttribute]
public int QueryInterface(Guid* riid, Void** ppvObject);
    [IsReadOnlyAttribute]
public int QueryInterface(Guid* riid, Void*& ppvObject);
    [IsReadOnlyAttribute]
public int QueryInterface(Guid& riid, Void** ppvObject);
    [IsReadOnlyAttribute]
public int QueryInterface(Guid& riid, Void*& ppvObject);
    [IsReadOnlyAttribute]
public UInt32 AddRef();
    [IsReadOnlyAttribute]
public UInt32 Release();
    private sealed virtual override Void*** Silk.NET.Core.Native.IComVtbl.AsVtblPtr();
}
public interface Silk.NET.Core.Native.IVTable {
    [ObsoleteAttribute("Use method without slot - this method will be removed in 3.0")]
public abstract virtual IntPtr Load(int slot, string entryPoint);
    public abstract virtual IntPtr Load(string entryPoint);
    public abstract virtual IVTable Clone();
    public abstract virtual void Purge();
}
public class Silk.NET.Core.Native.Luid : ValueType {
    public UInt32 Low;
    public int High;
}
public abstract class Silk.NET.Core.Native.NativeAPI : NativeApiContainer {
    [CompilerGeneratedAttribute]
private INativeContext <Context>k__BackingField;
    public INativeContext Context { get; }
    public NativeAPI(INativeContext ctx);
    [CompilerGeneratedAttribute]
public INativeContext get_Context();
    public abstract virtual bool IsExtensionPresent(string name);
}
[AttributeUsageAttribute("196")]
public class Silk.NET.Core.Native.NativeApiAttribute : Attribute {
    private Nullable`1<CallingConvention> _actualConvention;
    [CompilerGeneratedAttribute]
private string <EntryPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    public string EntryPoint { get; public set; }
    public string Prefix { get; public set; }
    public CallingConvention Convention { get; public set; }
    [CompilerGeneratedAttribute]
public string get_EntryPoint();
    [CompilerGeneratedAttribute]
public void set_EntryPoint(string value);
    [CompilerGeneratedAttribute]
public string get_Prefix();
    [CompilerGeneratedAttribute]
public void set_Prefix(string value);
    public CallingConvention get_Convention();
    public void set_Convention(CallingConvention value);
    public static string GetEntryPoint(NativeApiAttribute attr, NativeApiAttribute parent, string method);
    public static CallingConvention GetCallingConvention(NativeApiAttribute attr, NativeApiAttribute parent);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Silk.NET.Core.Native.NativeApiContainer : object {
    protected INativeContext _ctx;
    private IVTable _vTable;
    [CompilerGeneratedAttribute]
private GcUtility <GcUtility>k__BackingField;
    public GcUtility GcUtility { get; }
    public IVTable CurrentVTable { get; }
    public NativeApiContainer(INativeContext ctx);
    [CompilerGeneratedAttribute]
public GcUtility get_GcUtility();
    public IVTable get_CurrentVTable();
    public sealed virtual void Dispose();
    protected virtual int CoreGcSlotCount();
    protected virtual IVTable CreateVTable();
    protected IVTable SwapVTable();
    protected IVTable SwapVTable(IVTable newVTable);
    protected void Pin(object o, int slot);
    protected void PinUntilNextCall(object o, int slot);
    protected void Unpin(object o, int slot);
    public void PurgeEntryPoints();
    [ObsoleteAttribute("Use method without slot - this method will be removed in 3.0")]
protected IntPtr Load(int slot, string entryPoint);
    protected IntPtr Load(string entryPoint);
    private static void ThrowSymbolLoadingEx(string symbol);
    protected virtual void PostInit();
}
public abstract class Silk.NET.Core.Native.NativeExtension`1 : NativeApiContainer {
    protected NativeExtension`1(INativeContext ctx);
}
public enum Silk.NET.Core.Native.NativeStringEncoding : Enum {
    public int value__;
    public static NativeStringEncoding BStr;
    public static NativeStringEncoding LPStr;
    public static NativeStringEncoding LPTStr;
    public static NativeStringEncoding LPUTF8Str;
    public static NativeStringEncoding LPWStr;
    public static NativeStringEncoding Ansi;
    public static NativeStringEncoding Auto;
    public static NativeStringEncoding Uni;
    public static NativeStringEncoding UTF8;
}
[IsReadOnlyAttribute]
public class Silk.NET.Core.Native.PfnDestructionCallback : ValueType {
    private Void* _handle;
    public method Handle { get; }
    public PfnDestructionCallback(method ptr);
    public PfnDestructionCallback(DestructionCallback proc);
    public method get_Handle();
    public static PfnDestructionCallback From(DestructionCallback proc);
    public sealed virtual void Dispose();
    public static IntPtr op_Implicit(PfnDestructionCallback pfn);
    public static PfnDestructionCallback op_Explicit(IntPtr pfn);
    public static PfnDestructionCallback op_Implicit(DestructionCallback proc);
    public static DestructionCallback op_Explicit(PfnDestructionCallback pfn);
    public static method op_Implicit(PfnDestructionCallback pfn);
    public static PfnDestructionCallback op_Implicit(method ptr);
}
public enum Silk.NET.Core.Native.PinMode : Enum {
    public int value__;
    public static PinMode Persist;
    public static PinMode UntilNextCall;
}
[AttributeUsageAttribute("10240")]
public class Silk.NET.Core.Native.PinObjectAttribute : Attribute {
    [CompilerGeneratedAttribute]
private PinMode <Mode>k__BackingField;
    public PinMode Mode { get; }
    public PinObjectAttribute(PinMode mode);
    [CompilerGeneratedAttribute]
public PinMode get_Mode();
}
[AttributeUsageAttribute("4")]
public class Silk.NET.Core.Native.PInvokeOverride : Attribute {
    public PInvokeOverride(int id, string target);
}
public class Silk.NET.Core.Native.SecurityAttributes : ValueType {
    public long NLength;
    public Void* LpSecurityDescriptor;
    public byte BInheritHandle;
}
public static class Silk.NET.Core.Native.SilkMarshal : object {
    public static bool IsWinapiStdcall;
    [NativeIntegerAttribute]
private static ConcurrentDictionary`2<IntPtr, GlobalMemory> _marshalledMemory;
    [NativeIntegerAttribute]
private static ConcurrentDictionary`2<IntPtr, GCHandle> _otherGCHandles;
    private static SilkMarshal();
    public static IntPtr AllocBStr(int length);
    public static void FreeBStr(IntPtr ptr);
    private static IntPtr RegisterMemory(GlobalMemory memory);
    public static IntPtr Allocate(int length);
    public static bool Free(IntPtr ptr);
    [DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
private static T ThrowInvalidEncoding();
    public static GlobalMemory StringToMemory(string input, NativeStringEncoding encoding);
    [NullableContextAttribute("2")]
public static int GetMaxSizeOf(string input, NativeStringEncoding encoding);
    public static int StringIntoSpan(string input, Span`1<byte> span, NativeStringEncoding encoding);
    public static IntPtr AllocateString(int length, NativeStringEncoding encoding);
    public static void FreeString(IntPtr ptr, NativeStringEncoding encoding);
    [NullableContextAttribute("2")]
public static IntPtr StringToPtr(string input, NativeStringEncoding encoding);
    [NullableContextAttribute("2")]
public static string PtrToString(IntPtr input, NativeStringEncoding encoding);
    [NullableContextAttribute("1")]
public static string MemoryToString(GlobalMemory input, NativeStringEncoding e);
    public static string SpanToString(Span`1<byte> input, NativeStringEncoding encoding);
    public static GlobalMemory StringArrayToMemory(IReadOnlyList`1<string> input, NativeStringEncoding e);
    public static GlobalMemory StringArrayToMemory(IReadOnlyList`1<string> input, Func`2<string, IntPtr> customStringMarshaller);
    public static IntPtr StringArrayToPtr(IReadOnlyList`1<string> input, NativeStringEncoding encoding);
    public static IntPtr StringArrayToPtr(IReadOnlyList`1<string> input, Func`2<string, IntPtr> customStringMarshaller);
    public static void CopyPtrToStringArray(IntPtr ptr, String[] arr, NativeStringEncoding encoding);
    public static String[] PtrToStringArray(IntPtr input, int numStrings, NativeStringEncoding encoding);
    public static String[] PtrToStringArray(IntPtr input, int numStrings, Func`2<IntPtr, string> customUnmarshaller);
    public static String[] MemoryToStringArray(GlobalMemory input, NativeStringEncoding encoding);
    public static String[] MemoryToStringArray(GlobalMemory input, Func`2<IntPtr, string> customUnmarshaller);
    private static string Utf8PtrToString(IntPtr ptr);
    public static GlobalMemory HGlobalToMemory(IntPtr hGlobal, int length);
    public static GlobalMemory BStrToMemory(IntPtr bStr, int length);
    public static GlobalMemory PtrToMemory(IntPtr ptr, int length);
    public static IntPtr DelegateToPtr(Delegate delegate, DelegatePointerKind kind, bool pinned);
    private static void DelegateSafetyCheck(Delegate delegate, CallingConvention conv);
    public static method DelegateToManaged(Delegate delegate, bool pinned);
    public static method DelegateToCdecl(Delegate delegate, DelegatePointerKind kind, bool pinned, bool ignoreValidityChecks);
    public static method DelegateToStdcall(Delegate delegate, DelegatePointerKind kind, bool pinned, bool ignoreValidityChecks);
    public static method DelegateToFastcall(Delegate delegate, DelegatePointerKind kind, bool pinned, bool ignoreValidityChecks);
    public static method DelegateToThiscall(Delegate delegate, DelegatePointerKind kind, bool pinned, bool ignoreValidityChecks);
    public static T PtrToDelegate(IntPtr p);
    public static Guid& GuidOf();
    public static Guid* GuidPtrOf();
    public static void ThrowHResult(int hResult);
    private static IntPtr CoreCreateWinEvent(SecurityAttributes* lpEventAttributes, int bManualReset, int bInitialState, Char* lpName);
    private static UInt32 CoreWaitObjects(IntPtr hHandle, UInt32 dwMilliseconds, int bAlertable);
    private static UInt32 CoreWaitObjects(UInt32 nCount, IntPtr* lpHandles, int bWaitAll, UInt32 dwMilliseconds, int bAlertable);
    public static int CloseWindowsHandle(IntPtr hObject);
    public static IntPtr CreateWindowsEvent(SecurityAttributes* lpEventAttributes, bool bManualReset, bool bInitialState, Char* lpName);
    public static UInt32 WaitWindowsObjects(IntPtr object, UInt32 timeout, bool alertable);
    public static UInt32 WaitWindowsObjects(ReadOnlySpan`1<IntPtr> objects, bool waitAll, UInt32 timeout, bool alertable);
    public static T& NullRef();
    [CompilerGeneratedAttribute]
internal static void <StringIntoSpan>g__ThrowNoBStr|12_0();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static string <PtrToString>g__BStrToString|16_0(IntPtr ptr);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static string <PtrToString>g__AnsiToString|16_1(IntPtr ptr);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static string <PtrToString>g__WideToString|16_2(IntPtr ptr);
    [CompilerGeneratedAttribute]
internal static void <DelegateToPtr>g__ThrowManagedNonStatic|32_0();
    [CompilerGeneratedAttribute]
internal static void <DelegateSafetyCheck>g__Throw|33_0(string nameof, CallingConvention delegateConv, CallingConvention desiredConv);
}
public class Silk.NET.Core.Native.TagPaletteEntry : ValueType {
    public byte PeRed;
    public byte PeGreen;
    public byte PeBlue;
    public byte PeFlags;
}
public class Silk.NET.Core.Native.TagPoint : ValueType {
    public long X;
    public long Y;
}
public class Silk.NET.Core.Native.TagRect : ValueType {
    public long Left;
    public long Top;
    public long Right;
    public long Bottom;
}
public class Silk.NET.Core.Native.TagSize : ValueType {
    public long Width;
    public long Height;
}
public class Silk.NET.Core.Native.Timespec : ValueType {
    [NativeIntegerAttribute]
public IntPtr Seconds;
    [NativeIntegerAttribute]
public IntPtr Nanoseconds;
}
public enum Silk.NET.Core.Native.UnmanagedType : Enum {
    public int value__;
    public static UnmanagedType Default;
    public static UnmanagedType Bool;
    public static UnmanagedType I1;
    public static UnmanagedType U1;
    public static UnmanagedType I2;
    public static UnmanagedType U2;
    public static UnmanagedType I4;
    public static UnmanagedType U4;
    public static UnmanagedType I8;
    public static UnmanagedType U8;
    public static UnmanagedType R4;
    public static UnmanagedType R8;
    public static UnmanagedType BStr;
    public static UnmanagedType LPStr;
    public static UnmanagedType LPWStr;
    public static UnmanagedType LPTStr;
    public static UnmanagedType LPUTF8Str;
    public static UnmanagedType SysInt;
    public static UnmanagedType SysUInt;
    public static UnmanagedType AnsiBStr;
    public static UnmanagedType VariantBool;
}
public class Silk.NET.Core.Native.VkHandle : ValueType {
    [NativeIntegerAttribute]
public IntPtr Handle;
    public VkHandle(IntPtr handle);
}
public class Silk.NET.Core.Native.VkNonDispatchableHandle : ValueType {
    public ulong Handle;
    public VkNonDispatchableHandle(ulong handle);
}
[IsReadOnlyAttribute]
public class Silk.NET.Core.PfnVoidFunction : ValueType {
    private Void* _handle;
    public method Handle { get; }
    public PfnVoidFunction(method ptr);
    public PfnVoidFunction(Delegate func);
    public method get_Handle();
    public static IntPtr op_Implicit(PfnVoidFunction pfn);
    public sealed virtual void Dispose();
    public static method op_Implicit(PfnVoidFunction pfn);
    public static PfnVoidFunction op_Implicit(method func);
    public static PfnVoidFunction op_Implicit(Delegate func);
}
public class Silk.NET.Core.PlatformException : Exception {
    private static string DefaultMessage;
    public PlatformException(string msg);
    public PlatformException(Exception innerException);
    public PlatformException(string msg, Exception innerException);
    public PlatformException(string msg, Exception[] inner);
}
[IsReadOnlyAttribute]
public class Silk.NET.Core.RawImage : ValueType {
    [CompilerGeneratedAttribute]
private int <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private Memory`1<byte> <Pixels>k__BackingField;
    public int Width { get; }
    public int Height { get; }
    public Memory`1<byte> Pixels { get; }
    public RawImage(int width, int height, Memory`1<byte> rgbaPixels);
    [CompilerGeneratedAttribute]
public int get_Width();
    [CompilerGeneratedAttribute]
public int get_Height();
    [CompilerGeneratedAttribute]
public Memory`1<byte> get_Pixels();
    public static bool op_Equality(RawImage left, RawImage right);
    public static bool op_Inequality(RawImage left, RawImage right);
    public sealed virtual bool Equals(RawImage other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[IsReadOnlyAttribute]
public class Silk.NET.Core.Version32 : ValueType {
    [CompilerGeneratedAttribute]
private UInt32 <Value>k__BackingField;
    public UInt32 Value { get; }
    public UInt32 Major { get; }
    public UInt32 Minor { get; }
    public UInt32 Patch { get; }
    public Version32(UInt32 major, UInt32 minor, UInt32 patch);
    private Version32(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_Value();
    public UInt32 get_Major();
    public UInt32 get_Minor();
    public UInt32 get_Patch();
    public static Version32 op_Explicit(UInt32 val);
    public static Version32 op_Implicit(Version version);
    public static UInt32 op_Implicit(Version32 version);
    public static Version op_Implicit(Version32 version);
}
[IsReadOnlyAttribute]
public class Silk.NET.Core.Version64 : ValueType {
    [CompilerGeneratedAttribute]
private ulong <Value>k__BackingField;
    public ulong Value { get; }
    public UInt32 Major { get; }
    public UInt32 Minor { get; }
    public UInt32 Patch { get; }
    public Version64(UInt32 major, UInt32 minor, UInt32 patch);
    private Version64(ulong value);
    [CompilerGeneratedAttribute]
public ulong get_Value();
    public UInt32 get_Major();
    public UInt32 get_Minor();
    public UInt32 get_Patch();
    public static Version64 op_Explicit(ulong val);
    public static Version64 op_Implicit(Version version);
    public static ulong op_Implicit(Version64 version);
    public static Version op_Implicit(Version64 version);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsUnmanagedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NativeIntegerAttribute : Attribute {
    public Boolean[] TransformFlags;
    public NativeIntegerAttribute(Boolean[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
