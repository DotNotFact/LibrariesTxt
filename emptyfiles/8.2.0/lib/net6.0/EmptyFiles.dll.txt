[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class AssemblyLocation : object {
    public static string Path;
    public static string Directory;
    private static AssemblyLocation();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class EmptyFiles.AllFiles : object {
    private static FrozenDictionary`2<string, EmptyFile> files;
    private static FrozenDictionary`2<string, EmptyFile> archives;
    private static FrozenDictionary`2<string, EmptyFile> documents;
    private static FrozenDictionary`2<string, EmptyFile> images;
    private static FrozenDictionary`2<string, EmptyFile> sheets;
    private static FrozenDictionary`2<string, EmptyFile> slides;
    private static FrozenSet`1<string> archiveExtensions;
    private static FrozenSet`1<string> documentExtensions;
    private static FrozenSet`1<string> imageExtensions;
    private static FrozenSet`1<string> sheetExtensions;
    private static FrozenSet`1<string> slideExtensions;
    public static FrozenDictionary`2<string, EmptyFile> Files { get; }
    public static FrozenDictionary`2<string, EmptyFile> Archives { get; }
    public static FrozenDictionary`2<string, EmptyFile> Documents { get; }
    public static FrozenDictionary`2<string, EmptyFile> Images { get; }
    public static FrozenDictionary`2<string, EmptyFile> Sheets { get; }
    public static FrozenDictionary`2<string, EmptyFile> Slides { get; }
    public static IEnumerable`1<string> AllPaths { get; }
    public static IReadOnlyCollection`1<string> AllExtensions { get; }
    public static IEnumerable`1<string> ArchivePaths { get; }
    public static FrozenSet`1<string> ArchiveExtensions { get; }
    public static IEnumerable`1<string> DocumentPaths { get; }
    public static FrozenSet`1<string> DocumentExtensions { get; }
    public static IEnumerable`1<string> ImagePaths { get; }
    public static FrozenSet`1<string> ImageExtensions { get; }
    public static IEnumerable`1<string> SheetPaths { get; }
    public static FrozenSet`1<string> SheetExtensions { get; }
    public static IEnumerable`1<string> SlidePaths { get; }
    public static FrozenSet`1<string> SlideExtensions { get; }
    private static AllFiles();
    public static FrozenDictionary`2<string, EmptyFile> get_Files();
    public static FrozenDictionary`2<string, EmptyFile> get_Archives();
    public static FrozenDictionary`2<string, EmptyFile> get_Documents();
    public static FrozenDictionary`2<string, EmptyFile> get_Images();
    public static FrozenDictionary`2<string, EmptyFile> get_Sheets();
    public static FrozenDictionary`2<string, EmptyFile> get_Slides();
    private static FrozenDictionary`2<string, EmptyFile> AddCategory(FrozenSet`1<string> extensions, Category category, string emptyDirectory);
    private static string FindEmptyFilesDirectory();
    [IteratorStateMachineAttribute("EmptyFiles.AllFiles/<FindDirectories>d__21")]
private static IEnumerable`1<string> FindDirectories();
    public static void UseFile(Category category, string file);
    public static IEnumerable`1<string> get_AllPaths();
    public static IReadOnlyCollection`1<string> get_AllExtensions();
    public static IEnumerable`1<string> get_ArchivePaths();
    public static FrozenSet`1<string> get_ArchiveExtensions();
    public static IEnumerable`1<string> get_DocumentPaths();
    public static FrozenSet`1<string> get_DocumentExtensions();
    public static IEnumerable`1<string> get_ImagePaths();
    public static FrozenSet`1<string> get_ImageExtensions();
    public static IEnumerable`1<string> get_SheetPaths();
    public static FrozenSet`1<string> get_SheetExtensions();
    public static IEnumerable`1<string> get_SlidePaths();
    public static FrozenSet`1<string> get_SlideExtensions();
    public static bool IsEmptyFile(string path);
    public static void CreateFile(string path, bool useEmptyStringForTextFiles, Encoding encoding);
    private static void CreateTextFile(string path, Encoding encoding);
    public static string GetPathFor(string extension);
    public static bool TryCreateFile(string path, bool useEmptyStringForTextFiles, Encoding encoding);
    private static void TryCreateDirectory(string path);
    public static bool TryGetPathFor(string extension, String& path);
    [CompilerGeneratedAttribute]
internal static void <.cctor>g__Append|18_0(FrozenDictionary`2<string, EmptyFile> files, <>c__DisplayClass18_0& );
    [CompilerGeneratedAttribute]
internal static void <UseFile>g__Init|22_0(FrozenDictionary`2& emptyFiles, FrozenSet`1& extensions, <>c__DisplayClass22_0& );
}
public enum EmptyFiles.Category : Enum {
    public int value__;
    public static Category Archive;
    public static Category Document;
    public static Category Image;
    public static Category Sheet;
    public static Category Slide;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class EmptyFiles.ContentTypes : object {
    [NullableAttribute("1")]
private static Dictionary`2<string, string> mappings;
    private static ContentTypes();
    public static bool IsText(string mediaType);
    public static bool IsText(string mediaType, String& extension);
    public static bool TryGetExtension(string mediaType, String& extension);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EmptyFiles.EmptyFile : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastWriteTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Category <Category>k__BackingField;
    public string Path { get; }
    public DateTime LastWriteTime { get; }
    public Category Category { get; }
    public EmptyFile(string path, DateTime& lastWriteTime, Category& category);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public DateTime get_LastWriteTime();
    [CompilerGeneratedAttribute]
public Category get_Category();
    internal static EmptyFile Build(string file, Category category);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class EmptyFiles.FileExtensions : object {
    private static HashSet`1<string> textExtensions;
    public static IReadOnlyCollection`1<string> TextExtensions { get; }
    private static FileExtensions();
    public static bool IsTextFile(string path);
    public static bool IsTextExtension(string extension);
    [NullableContextAttribute("0")]
public static bool IsTextExtension(ReadOnlySpan`1<char> extension);
    [NullableContextAttribute("0")]
public static bool IsTextFile(ReadOnlySpan`1<char> path);
    public static void RemoveTextExtension(string extension);
    [NullableContextAttribute("0")]
public static void RemoveTextExtension(ReadOnlySpan`1<char> extension);
    public static void RemoveTextExtensions(String[] extensions);
    public static void RemoveTextExtensions(IEnumerable`1<string> extensions);
    public static void AddTextExtension(string extension);
    [NullableContextAttribute("0")]
public static void AddTextExtension(ReadOnlySpan`1<char> extension);
    public static void AddTextExtensions(String[] extensions);
    public static void AddTextExtensions(IEnumerable`1<string> extensions);
    public static IReadOnlyCollection`1<string> get_TextExtensions();
    [NullableContextAttribute("2")]
[ObsoleteAttribute("Use IsTextFile or IsTextExtension")]
public static bool IsText(string extensionOrPath);
    [NullableContextAttribute("0")]
[ObsoleteAttribute("Use IsTextFile or IsTextExtension")]
public static bool IsText(ReadOnlySpan`1<char> extensionOrPath);
}
[ExcludeFromCodeCoverageAttribute]
internal static class EnumPolyfill : object {
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.enum.getvalues")]
public static TEnum[] GetValues();
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.enum.getnames")]
public static String[] GetNames();
}
internal static class Guard : object {
    [NullableContextAttribute("1")]
public static void FileExists(string path, string argumentName);
    [NullableContextAttribute("1")]
public static void AgainstNullOrEmpty(string value, string argumentName);
    public static void AgainstEmpty(ReadOnlySpan`1<char> value, string argumentName);
    public static void ValidExtension(ReadOnlySpan`1<char> extension, string argumentName);
    [NullableContextAttribute("1")]
public static string ValidExtension(string extension, string argumentName);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class Polyfill : object {
    [NullableAttribute("1")]
private static ConcurrentDictionary`2<ParameterInfo, NullabilityInfo> parameterCache;
    [NullableAttribute("1")]
private static ConcurrentDictionary`2<PropertyInfo, NullabilityInfo> propertyCache;
    [NullableAttribute("1")]
private static ConcurrentDictionary`2<EventInfo, NullabilityInfo> eventCache;
    [NullableAttribute("1")]
private static ConcurrentDictionary`2<FieldInfo, NullabilityInfo> fieldCache;
    private static long TicksPerMicrosecond;
    private static Polyfill();
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static NullabilityInfo GetNullabilityInfo(MemberInfo info);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static NullabilityState GetNullability(MemberInfo info);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool IsNullable(MemberInfo info);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static NullabilityInfo GetNullabilityInfo(FieldInfo info);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static NullabilityState GetNullability(FieldInfo info);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool IsNullable(FieldInfo info);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static NullabilityInfo GetNullabilityInfo(EventInfo info);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static NullabilityState GetNullability(EventInfo info);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool IsNullable(EventInfo info);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static NullabilityInfo GetNullabilityInfo(PropertyInfo info);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static NullabilityState GetNullability(PropertyInfo info);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool IsNullable(PropertyInfo info);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static NullabilityInfo GetNullabilityInfo(ParameterInfo info);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static NullabilityState GetNullability(ParameterInfo info);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool IsNullable(ParameterInfo info);
    [NullableContextAttribute("1")]
private static NullabilityState GetReadOrWriteState(NullabilityInfo nullability);
    [NullableContextAttribute("1")]
private static NullabilityState GetKnownState(string name, NullabilityInfo nullability);
    [NullableContextAttribute("1")]
private static bool IsNullable(string name, NullabilityInfo nullability);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.threading.cancellationtokensource.cancelasync")]
public static Task CancelAsync(CancellationTokenSource target);
    [IteratorStateMachineAttribute("Polyfill/<Index>d__23`1")]
[ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.index#system-linq-enumerable-index-1(system-collections-generic-ienumerable((-0)))")]
public static IEnumerable`1<ValueTuple`2<int, TSource>> Index(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.aggregateby#system-linq-enumerable-aggregateby-3(system-collections-generic-ienumerable((-0))-system-func((-0-1))-system-func((-1-2))-system-func((-2-0-2))-system-collections-generic-iequalitycomparer((-1)))")]
public static IEnumerable`1<KeyValuePair`2<TKey, TAccumulate>> AggregateBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, TAccumulate seed, Func`3<TAccumulate, TSource, TAccumulate> func, IEqualityComparer`1<TKey> keyComparer);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.aggregateby?view=net-9.0#system-linq-enumerable-aggregateby-3(system-collections-generic-ienumerable((-0))-system-func((-0-1))-2-system-func((-2-0-2))-system-collections-generic-iequalitycomparer((-1)))")]
public static IEnumerable`1<KeyValuePair`2<TKey, TAccumulate>> AggregateBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TKey, TAccumulate> seedSelector, Func`3<TAccumulate, TSource, TAccumulate> func, IEqualityComparer`1<TKey> keyComparer);
    [IteratorStateMachineAttribute("Polyfill/<AggregateByIterator>d__26`3")]
private static IEnumerable`1<KeyValuePair`2<TKey, TAccumulate>> AggregateByIterator(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, TAccumulate seed, Func`3<TAccumulate, TSource, TAccumulate> func, IEqualityComparer`1<TKey> keyComparer);
    [IteratorStateMachineAttribute("Polyfill/<AggregateByIterator>d__27`3")]
private static IEnumerable`1<KeyValuePair`2<TKey, TAccumulate>> AggregateByIterator(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TKey, TAccumulate> seedSelector, Func`3<TAccumulate, TSource, TAccumulate> func, IEqualityComparer`1<TKey> keyComparer);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.countby")]
public static IEnumerable`1<KeyValuePair`2<TKey, int>> CountBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> keyComparer);
    [IteratorStateMachineAttribute("Polyfill/<CountByIterator>d__29`2")]
private static IEnumerable`1<KeyValuePair`2<TKey, int>> CountByIterator(IEnumerable`1<TSource> source, Func`2<TSource, TKey> selector, IEqualityComparer`1<TKey> comparer);
    private static Dictionary`2<TKey, int> BuildCountDictionary(IEnumerator`1<TSource> enumerator, Func`2<TSource, TKey> selector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.timespan.nanoseconds")]
public static int Nanoseconds(TimeSpan target);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.datetime.nanosecond")]
public static int Nanosecond(DateTime target);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.datetimeoffset.nanosecond")]
public static int Nanosecond(DateTimeOffset target);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.timespan.microseconds")]
public static int Microseconds(TimeSpan target);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.datetime.microsecond")]
public static int Microsecond(DateTime target);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.datetimeoffset.microsecond")]
public static int Microsecond(DateTimeOffset target);
    [ExtensionAttribute]
private static long TicksComponent(TimeSpan target);
    [ExtensionAttribute]
private static long TicksComponent(DateTime target);
    [ExtensionAttribute]
private static long TicksComponent(DateTimeOffset target);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.datetime.addmicroseconds")]
public static DateTime AddMicroseconds(DateTime target, double microseconds);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.datetimeoffset.addmicroseconds")]
public static DateTimeOffset AddMicroseconds(DateTimeOffset target, double microseconds);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.text.stringbuilder.append#system-text-stringbuilder-append(system-text-stringbuilder-appendinterpolatedstringhandler@)")]
public static StringBuilder Append(StringBuilder target, AppendInterpolatedStringHandler& handler);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.text.stringbuilder.append#system-text-stringbuilder-append(system-iformatprovider-system-text-stringbuilder-appendinterpolatedstringhandler@)")]
public static StringBuilder Append(StringBuilder target, IFormatProvider provider, AppendInterpolatedStringHandler& handler);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.text.stringbuilder.appendline#system-text-stringbuilder-appendline(system-text-stringbuilder-appendinterpolatedstringhandler@)")]
public static StringBuilder AppendLine(StringBuilder target, AppendInterpolatedStringHandler& handler);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.text.stringbuilder.appendline#system-text-stringbuilder-appendline(system-iformatprovider-system-text-stringbuilder-appendinterpolatedstringhandler@)")]
public static StringBuilder AppendLine(StringBuilder target, IFormatProvider provider, AppendInterpolatedStringHandler& handler);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.io.textreader.readtoendasync#system-io-textreader-readtoendasync(system-threading-cancellationtoken)")]
public static Task`1<string> ReadToEndAsync(TextReader target, CancellationToken cancellationToken);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.io.textreader.readtoendasync#system-io-textreader-readlineasync(system-threading-cancellationtoken)")]
public static Task`1<string> ReadLineAsync(TextReader target, CancellationToken cancellationToken);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.datetimeoffset.tryformat")]
public static bool TryFormat(DateTimeOffset target, Span`1<char> destination, Int32& charsWritten, ReadOnlySpan`1<char> format, IFormatProvider provider);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.datetime.tryformat")]
public static bool TryFormat(DateTime target, Span`1<char> destination, Int32& charsWritten, ReadOnlySpan`1<char> format, IFormatProvider provider);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.dateonly.tryformat")]
public static bool TryFormat(DateOnly target, Span`1<char> destination, Int32& charsWritten, ReadOnlySpan`1<char> format, IFormatProvider provider);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.timeonly.tryformat")]
public static bool TryFormat(TimeOnly target, Span`1<char> destination, Int32& charsWritten, ReadOnlySpan`1<char> format, IFormatProvider provider);
    private static bool CopyToSpan(Span`1<char> destination, Int32& charsWritten, string result);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.type.isgenericmethodparameter")]
public static bool IsGenericMethodParameter(Type target);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.ismatch#system-text-regularexpressions-regex-ismatch(system-readonlyspan((system-char))-system-int32)")]
public static bool IsMatch(Regex target, ReadOnlySpan`1<char> input, int startat);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.ismatch#system-text-regularexpressions-regex-ismatch(system-readonlyspan((system-char)))")]
public static bool IsMatch(Regex target, ReadOnlySpan`1<char> input);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.enumeratematches#system-text-regularexpressions-regex-enumeratematches(system-readonlyspan((system-char)))")]
public static ValueMatchEnumerator EnumerateMatches(Regex target, ReadOnlySpan`1<char> input);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.enumeratematches#system-text-regularexpressions-regex-enumeratematches(system-readonlyspan((system-char))-system-int32)")]
public static ValueMatchEnumerator EnumerateMatches(Regex target, ReadOnlySpan`1<char> input, int startat);
    [CompilerGeneratedAttribute]
internal static Dictionary`2<TKey, TAccumulate> <AggregateByIterator>g__PopulateDictionary|26_0(IEnumerator`1<TSource> enumerator, Func`2<TSource, TKey> keySelector, TAccumulate seed, Func`3<TAccumulate, TSource, TAccumulate> func, IEqualityComparer`1<TKey> keyComparer);
    [CompilerGeneratedAttribute]
internal static Dictionary`2<TKey, TAccumulate> <AggregateByIterator>g__PopulateDictionary|27_0(IEnumerator`1<TSource> enumerator, Func`2<TSource, TKey> keySelector, Func`2<TKey, TAccumulate> seedSelector, Func`3<TAccumulate, TSource, TAccumulate> func, IEqualityComparer`1<TKey> keyComparer);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class RegexPolyfill : object {
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.ismatch#system-text-regularexpressions-regex-ismatch(system-readonlyspan((system-char))-system-string-system-text-regularexpressions-regexoptions-system-timespan)")]
public static bool IsMatch(ReadOnlySpan`1<char> input, string pattern, RegexOptions options, TimeSpan timeout);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.ismatch#system-text-regularexpressions-regex-ismatch(system-readonlyspan((system-char))-system-string-system-text-regularexpressions-regexoptions)")]
public static bool IsMatch(ReadOnlySpan`1<char> input, string pattern, RegexOptions options);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.ismatch#system-text-regularexpressions-regex-ismatch(system-readonlyspan((system-char))-system-string)")]
public static bool IsMatch(ReadOnlySpan`1<char> input, string pattern);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.enumeratematches?view=net-8.0#system-text-regularexpressions-regex-enumeratematches(system-readonlyspan((system-char))-system-string)")]
public static ValueMatchEnumerator EnumerateMatches(ReadOnlySpan`1<char> input, string pattern);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.enumeratematches#system-text-regularexpressions-regex-enumeratematches(system-readonlyspan((system-char))-system-string-system-text-regularexpressions-regexoptions-system-timespan)")]
public static ValueMatchEnumerator EnumerateMatches(ReadOnlySpan`1<char> input, string pattern, RegexOptions options, TimeSpan timeout);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.enumeratematches#system-text-regularexpressions-regex-enumeratematches(system-readonlyspan((system-char))-system-string-system-text-regularexpressions-regexoptions)")]
public static ValueMatchEnumerator EnumerateMatches(ReadOnlySpan`1<char> input, string pattern, RegexOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class StringPolyfill : object {
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.string.join#system-string-join(system-char-system-string())")]
public static string Join(char separator, String[] values);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.string.join#system-string-join(system-char-system-object())")]
public static string Join(char separator, Object[] values);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.string.join#system-string-join(system-char-system-string()-system-int32-system-int32)")]
public static string Join(char separator, String[] value, int startIndex, int count);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.string.join#system-string-join-1(system-char-system-collections-generic-ienumerable((-0)))")]
public static string Join(char separator, IEnumerable`1<T> values);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("6143")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.codeanalysis.experimentalattribute?view=net-8.0")]
internal class System.Diagnostics.CodeAnalysis.ExperimentalAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <DiagnosticId>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <UrlFormat>k__BackingField;
    public string DiagnosticId { get; }
    [NullableAttribute("2")]
public string UrlFormat { get; public set; }
    public ExperimentalAttribute(string diagnosticId);
    [CompilerGeneratedAttribute]
public string get_DiagnosticId();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_UrlFormat();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_UrlFormat(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[AttributeUsageAttribute("100")]
internal class System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Message { get; }
    [NullableAttribute("2")]
public string Url { get; public set; }
    public RequiresDynamicCodeAttribute(string message);
    [CompilerGeneratedAttribute]
public string get_Message();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Url();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Url(string value);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[AttributeUsageAttribute("32")]
internal class System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.StringSyntaxAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Syntax>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Object[] <Arguments>k__BackingField;
    public static string CompositeFormat;
    public static string DateOnlyFormat;
    public static string DateTimeFormat;
    public static string EnumFormat;
    public static string GuidFormat;
    public static string Json;
    public static string NumericFormat;
    public static string Regex;
    public static string TimeOnlyFormat;
    public static string TimeSpanFormat;
    public static string Uri;
    public static string Xml;
    public string Syntax { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[] Arguments { get; }
    public StringSyntaxAttribute(string syntax);
    public StringSyntaxAttribute(string syntax, Object[] arguments);
    [CompilerGeneratedAttribute]
public string get_Syntax();
    [CompilerGeneratedAttribute]
public Object[] get_Arguments();
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[AttributeUsageAttribute("2240")]
internal class System.Diagnostics.CodeAnalysis.UnscopedRefAttribute : Attribute {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.UnreachableException : Exception {
    public UnreachableException(string message);
    public UnreachableException(string message, Exception innerException);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[AttributeUsageAttribute("32767")]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.compilerfeaturerequiredattribute")]
internal class System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <FeatureName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOptional>k__BackingField;
    public static string RefStructs;
    public static string RequiredMembers;
    public string FeatureName { get; }
    public bool IsOptional { get; public set; }
    public CompilerFeatureRequiredAttribute(string featureName);
    [CompilerGeneratedAttribute]
public string get_FeatureName();
    [CompilerGeneratedAttribute]
public bool get_IsOptional();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsOptional(bool value);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[AttributeUsageAttribute("1")]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.disableruntimemarshallingattribute")]
internal class System.Runtime.CompilerServices.DisableRuntimeMarshallingAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[AttributeUsageAttribute("396")]
internal class System.Runtime.CompilerServices.RequiredMemberAttribute : Attribute {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[AttributeUsageAttribute("2047")]
internal class System.Runtime.Versioning.ObsoletedOSPlatformAttribute : OSPlatformAttribute {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Message { get; }
    public string Url { get; public set; }
    [NullableContextAttribute("1")]
public ObsoletedOSPlatformAttribute(string platformName);
    [NullableContextAttribute("1")]
public ObsoletedOSPlatformAttribute(string platformName, string message);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal abstract class System.Runtime.Versioning.OSPlatformAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <PlatformName>k__BackingField;
    public string PlatformName { get; }
    protected OSPlatformAttribute(string platformName);
    [CompilerGeneratedAttribute]
public string get_PlatformName();
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Text.RegularExpressions.RegexCache : object {
    private static int DefaultMaxCacheSize;
    private static int MaxExamineOnDrop;
    [NullableAttribute("2")]
private static Node modreq(System.Runtime.CompilerServices.IsVolatile) s_lastAccessed;
    private static ConcurrentDictionary`2<Key, Node> s_cacheDictionary;
    private static List`1<Node> s_cacheList;
    private static Random s_random;
    private static int s_maxCacheSize;
    private static object SyncObj { get; }
    public static int MaxCacheSize { get; public set; }
    private static RegexCache();
    private static object get_SyncObj();
    public static int get_MaxCacheSize();
    public static void set_MaxCacheSize(int value);
    public static Regex GetOrAdd(string pattern);
    public static Regex GetOrAdd(string pattern, RegexOptions options, TimeSpan matchTimeout);
    [NullableContextAttribute("2")]
private static Regex Get(Key key);
    private static void Add(Key key, Regex regex);
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[CompilerFeatureRequiredAttribute("RefStructs")]
[IsReadOnlyAttribute]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Text.RegularExpressions.ValueMatch : ValueType {
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    public int Index { get; }
    public int Length { get; }
    internal ValueMatch(int index, int length);
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
public int get_Length();
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[CompilerFeatureRequiredAttribute("RefStructs")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Text.RegularExpressions.ValueMatchEnumerator : ValueType {
    private ReadOnlySpan`1<char> _input;
    private ValueMatch _current;
    private MatchCollection matchCollection;
    private int index;
    public ValueMatch Current { get; }
    internal ValueMatchEnumerator(Regex regex, ReadOnlySpan`1<char> input, int startAt);
    [IsReadOnlyAttribute]
public ValueMatchEnumerator GetEnumerator();
    public bool MoveNext();
    [IsReadOnlyAttribute]
public ValueMatch get_Current();
}
