[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("749")]
internal class System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute : Attribute {
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[AttributeUsageAttribute("10368")]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.6.133.12845")]
internal static class ThisAssembly : object {
    internal static string AssemblyConfiguration;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyVersion;
    internal static DateTime GitCommitDate;
    internal static string GitCommitId;
    internal static bool IsPrerelease;
    internal static bool IsPublicRelease;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static string RootNamespace;
    private static ThisAssembly();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Assert : object {
    private static Type typeofDictionary;
    private static Type typeofHashSet;
    private static Type typeofSet;
    private static HashSet`1<char> charsLineEndings;
    private static HashSet`1<char> charsWhitespace;
    private static Assert();
    [ObsoleteAttribute("This is an override of Object.Equals(). Call Assert.Equal() instead.", "True")]
[EditorBrowsableAttribute("1")]
public static bool Equals(object a, object b);
    [ObsoleteAttribute("This is an override of Object.ReferenceEquals(). Call Assert.Same() instead.", "True")]
[EditorBrowsableAttribute("1")]
public static bool ReferenceEquals(object a, object b);
    [NullableContextAttribute("2")]
private static Type SafeGetGenericTypeDefinition(Type type);
    public static void False(bool condition);
    public static void False(Nullable`1<bool> condition);
    [NullableContextAttribute("2")]
public static void False(bool condition, string userMessage);
    [NullableContextAttribute("2")]
public static void False(Nullable`1<bool> condition, string userMessage);
    public static void True(bool condition);
    public static void True(Nullable`1<bool> condition);
    [NullableContextAttribute("2")]
public static void True(bool condition, string userMessage);
    [NullableContextAttribute("2")]
public static void True(Nullable`1<bool> condition, string userMessage);
    public static void All(IEnumerable`1<T> collection, Action`1<T> action);
    public static void All(IEnumerable`1<T> collection, Action`2<T, int> action);
    [AsyncStateMachineAttribute("Xunit.Assert/<AllAsync>d__14`1")]
public static Task AllAsync(IEnumerable`1<T> collection, Func`2<T, Task> action);
    [AsyncStateMachineAttribute("Xunit.Assert/<AllAsync>d__15`1")]
public static Task AllAsync(IEnumerable`1<T> collection, Func`3<T, int, Task> action);
    public static void Collection(IEnumerable`1<T> collection, Action`1[] elementInspectors);
    [AsyncStateMachineAttribute("Xunit.Assert/<CollectionAsync>d__17`1")]
public static Task CollectionAsync(IEnumerable`1<T> collection, Func`2[] elementInspectors);
    public static void Contains(T expected, IEnumerable`1<T> collection);
    public static void Contains(T expected, IEnumerable`1<T> collection, IEqualityComparer`1<T> comparer);
    public static void Contains(IEnumerable`1<T> collection, Predicate`1<T> filter);
    public static void Distinct(IEnumerable`1<T> collection);
    public static void Distinct(IEnumerable`1<T> collection, IEqualityComparer`1<T> comparer);
    public static void DoesNotContain(T expected, IEnumerable`1<T> collection);
    public static void DoesNotContain(T expected, IEnumerable`1<T> collection, IEqualityComparer`1<T> comparer);
    public static void DoesNotContain(IEnumerable`1<T> collection, Predicate`1<T> filter);
    public static void Empty(IEnumerable collection);
    [NullableContextAttribute("2")]
public static void Equal(IEnumerable`1<T> expected, IEnumerable`1<T> actual);
    public static void Equal(IEnumerable`1<T> expected, IEnumerable`1<T> actual, IEqualityComparer`1<T> comparer);
    public static void Equal(IEnumerable`1<T> expected, IEnumerable`1<T> actual, Func`3<T, T, bool> comparer);
    public static void NotEmpty(IEnumerable collection);
    [NullableContextAttribute("2")]
public static void NotEqual(IEnumerable`1<T> expected, IEnumerable`1<T> actual);
    public static void NotEqual(IEnumerable`1<T> expected, IEnumerable`1<T> actual, IEqualityComparer`1<T> comparer);
    public static void NotEqual(IEnumerable`1<T> expected, IEnumerable`1<T> actual, Func`3<T, T, bool> comparer);
    public static object Single(IEnumerable collection);
    public static void Single(IEnumerable collection, object expected);
    public static T Single(IEnumerable`1<T> collection);
    public static T Single(IEnumerable`1<T> collection, Predicate`1<T> predicate);
    private static T GetSingleResult(IEnumerable`1<T> collection, Predicate`1<T> predicate, string expected);
    [NullableContextAttribute("2")]
private static IEqualityComparer`1<T> GetEqualityComparer(IEqualityComparer innerComparer);
    private static IComparer`1<T> GetRangeComparer();
    public static TValue Contains(TKey expected, IDictionary`2<TKey, TValue> collection);
    public static TValue Contains(TKey expected, IReadOnlyDictionary`2<TKey, TValue> collection);
    public static TValue Contains(TKey expected, ConcurrentDictionary`2<TKey, TValue> collection);
    public static TValue Contains(TKey expected, Dictionary`2<TKey, TValue> collection);
    public static TValue Contains(TKey expected, ReadOnlyDictionary`2<TKey, TValue> collection);
    public static void DoesNotContain(TKey expected, IDictionary`2<TKey, TValue> collection);
    public static void DoesNotContain(TKey expected, IReadOnlyDictionary`2<TKey, TValue> collection);
    public static void DoesNotContain(TKey expected, ConcurrentDictionary`2<TKey, TValue> collection);
    public static void DoesNotContain(TKey expected, Dictionary`2<TKey, TValue> collection);
    public static void DoesNotContain(TKey expected, ReadOnlyDictionary`2<TKey, TValue> collection);
    public static void Equal(T expected, T actual);
    public static void Equal(T expected, T actual, Func`3<T, T, bool> comparer);
    public static void Equal(T expected, T actual, IEqualityComparer`1<T> comparer);
    public static void Equal(double expected, double actual, int precision);
    public static void Equal(double expected, double actual, int precision, MidpointRounding rounding);
    public static void Equal(double expected, double actual, double tolerance);
    public static void Equal(float expected, float actual, int precision);
    public static void Equal(float expected, float actual, int precision, MidpointRounding rounding);
    public static void Equal(float expected, float actual, float tolerance);
    public static void Equal(decimal expected, decimal actual, int precision);
    public static void Equal(DateTime expected, DateTime actual);
    public static void Equal(DateTime expected, DateTime actual, TimeSpan precision);
    public static void Equal(DateTimeOffset expected, DateTimeOffset actual);
    public static void Equal(DateTimeOffset expected, DateTimeOffset actual, TimeSpan precision);
    public static void NotEqual(T expected, T actual);
    public static void NotEqual(T expected, T actual, Func`3<T, T, bool> comparer);
    public static void NotEqual(T expected, T actual, IEqualityComparer`1<T> comparer);
    public static void NotEqual(double expected, double actual, int precision);
    public static void NotEqual(double expected, double actual, int precision, MidpointRounding rounding);
    public static void NotEqual(double expected, double actual, double tolerance);
    public static void NotEqual(float expected, float actual, int precision);
    public static void NotEqual(float expected, float actual, int precision, MidpointRounding rounding);
    public static void NotEqual(float expected, float actual, float tolerance);
    public static void NotEqual(decimal expected, decimal actual, int precision);
    public static void NotStrictEqual(T expected, T actual);
    public static void StrictEqual(T expected, T actual);
    [NullableContextAttribute("2")]
public static void Equivalent(object expected, object actual, bool strict);
    public static RaisedEvent`1<T> Raises(Action`1<EventHandler`1<T>> attach, Action`1<EventHandler`1<T>> detach, Action testCode);
    public static RaisedEvent`1<EventArgs> RaisesAny(Action`1<EventHandler> attach, Action`1<EventHandler> detach, Action testCode);
    public static RaisedEvent`1<T> RaisesAny(Action`1<EventHandler`1<T>> attach, Action`1<EventHandler`1<T>> detach, Action testCode);
    [AsyncStateMachineAttribute("Xunit.Assert/<RaisesAnyAsync>d__84")]
public static Task`1<RaisedEvent`1<EventArgs>> RaisesAnyAsync(Action`1<EventHandler> attach, Action`1<EventHandler> detach, Func`1<Task> testCode);
    [AsyncStateMachineAttribute("Xunit.Assert/<RaisesAnyAsync>d__85`1")]
public static Task`1<RaisedEvent`1<T>> RaisesAnyAsync(Action`1<EventHandler`1<T>> attach, Action`1<EventHandler`1<T>> detach, Func`1<Task> testCode);
    [AsyncStateMachineAttribute("Xunit.Assert/<RaisesAsync>d__86`1")]
public static Task`1<RaisedEvent`1<T>> RaisesAsync(Action`1<EventHandler`1<T>> attach, Action`1<EventHandler`1<T>> detach, Func`1<Task> testCode);
    private static RaisedEvent`1<EventArgs> RaisesInternal(Action`1<EventHandler> attach, Action`1<EventHandler> detach, Action testCode);
    private static RaisedEvent`1<T> RaisesInternal(Action`1<EventHandler`1<T>> attach, Action`1<EventHandler`1<T>> detach, Action testCode);
    [AsyncStateMachineAttribute("Xunit.Assert/<RaisesAsyncInternal>d__89")]
private static Task`1<RaisedEvent`1<EventArgs>> RaisesAsyncInternal(Action`1<EventHandler> attach, Action`1<EventHandler> detach, Func`1<Task> testCode);
    [AsyncStateMachineAttribute("Xunit.Assert/<RaisesAsyncInternal>d__90`1")]
private static Task`1<RaisedEvent`1<T>> RaisesAsyncInternal(Action`1<EventHandler`1<T>> attach, Action`1<EventHandler`1<T>> detach, Func`1<Task> testCode);
    private static Exception Throws(Type exceptionType, Exception exception);
    public static Exception Throws(Type exceptionType, Action testCode);
    public static Exception Throws(Type exceptionType, Func`1<object> testCode);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("You must call Assert.ThrowsAsync (and await the result) when testing async code.", "True")]
public static Exception Throws(Type exceptionType, Func`1<Task> testCode);
    public static T Throws(Action testCode);
    public static T Throws(Func`1<object> testCode);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("You must call Assert.ThrowsAsync<T> (and await the result) when testing async code.", "True")]
public static T Throws(Func`1<Task> testCode);
    public static T Throws(string paramName, Action testCode);
    public static T Throws(string paramName, Func`1<object> testCode);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("You must call Assert.ThrowsAsync<T> (and await the result) when testing async code.", "True")]
public static T Throws(string paramName, Func`1<Task> testCode);
    private static Exception ThrowsAny(Type exceptionType, Exception exception);
    public static T ThrowsAny(Action testCode);
    public static T ThrowsAny(Func`1<object> testCode);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("You must call Assert.ThrowsAnyAsync<T> (and await the result) when testing async code.", "True")]
public static T ThrowsAny(Func`1<Task> testCode);
    [AsyncStateMachineAttribute("Xunit.Assert/<ThrowsAnyAsync>d__106`1")]
public static Task`1<T> ThrowsAnyAsync(Func`1<Task> testCode);
    [AsyncStateMachineAttribute("Xunit.Assert/<ThrowsAsync>d__107")]
public static Task`1<Exception> ThrowsAsync(Type exceptionType, Func`1<Task> testCode);
    [AsyncStateMachineAttribute("Xunit.Assert/<ThrowsAsync>d__108`1")]
public static Task`1<T> ThrowsAsync(Func`1<Task> testCode);
    [AsyncStateMachineAttribute("Xunit.Assert/<ThrowsAsync>d__109`1")]
public static Task`1<T> ThrowsAsync(string paramName, Func`1<Task> testCode);
    [NullableContextAttribute("2")]
[DoesNotReturnAttribute]
public static void Fail(string message);
    internal static T GuardArgumentNotNull(string argName, T argValue);
    [NullableContextAttribute("2")]
public static void NotSame(object expected, object actual);
    [NullableContextAttribute("2")]
public static void Same(object expected, object actual);
    public static void Multiple(Action[] checks);
    [NullableContextAttribute("2")]
public static void NotNull(object object);
    [NullableContextAttribute("0")]
public static T NotNull(Nullable`1<T> value);
    [NullableContextAttribute("2")]
public static void Null(object object);
    [NullableContextAttribute("0")]
public static void Null(Nullable`1<T> value);
    public static void PropertyChanged(INotifyPropertyChanged object, string propertyName, Action testCode);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("You must call Assert.PropertyChangedAsync (and await the result) when testing async code.", "True")]
public static void PropertyChanged(INotifyPropertyChanged object, string propertyName, Func`1<Task> testCode);
    [AsyncStateMachineAttribute("Xunit.Assert/<PropertyChangedAsync>d__121")]
public static Task PropertyChangedAsync(INotifyPropertyChanged object, string propertyName, Func`1<Task> testCode);
    public static void InRange(T actual, T low, T high);
    public static void InRange(T actual, T low, T high, IComparer`1<T> comparer);
    public static void NotInRange(T actual, T low, T high);
    public static void NotInRange(T actual, T low, T high, IComparer`1<T> comparer);
    protected static Exception RecordException(Action testCode);
    protected static Exception RecordException(Func`1<object> testCode, string asyncMethodName);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("You must call Assert.RecordExceptionAsync (and await the result) when testing async code.", "True")]
protected static Exception RecordException(Func`1<Task> testCode);
    [AsyncStateMachineAttribute("Xunit.Assert/<RecordExceptionAsync>d__129")]
protected static Task`1<Exception> RecordExceptionAsync(Func`1<Task> testCode);
    public static void Contains(T expected, ISet`1<T> set);
    public static void Contains(T expected, HashSet`1<T> set);
    public static void Contains(T expected, SortedSet`1<T> set);
    public static void DoesNotContain(T expected, ISet`1<T> set);
    public static void DoesNotContain(T expected, HashSet`1<T> set);
    public static void DoesNotContain(T expected, SortedSet`1<T> set);
    public static void ProperSubset(ISet`1<T> expectedSubset, ISet`1<T> actual);
    public static void ProperSuperset(ISet`1<T> expectedSuperset, ISet`1<T> actual);
    public static void Subset(ISet`1<T> expectedSubset, ISet`1<T> actual);
    public static void Superset(ISet`1<T> expectedSuperset, ISet`1<T> actual);
    public static void Contains(string expectedSubstring, string actualString);
    public static void Contains(string expectedSubstring, string actualString, StringComparison comparisonType);
    public static void DoesNotContain(string expectedSubstring, string actualString);
    public static void DoesNotContain(string expectedSubstring, string actualString, StringComparison comparisonType);
    public static void DoesNotMatch(string expectedRegexPattern, string actualString);
    public static void DoesNotMatch(Regex expectedRegex, string actualString);
    public static void Empty(string value);
    [NullableContextAttribute("2")]
public static void EndsWith(string expectedEndString, string actualString);
    [NullableContextAttribute("2")]
public static void EndsWith(string expectedEndString, string actualString, StringComparison comparisonType);
    [NullableContextAttribute("2")]
public static void Equal(string expected, string actual);
    [NullableContextAttribute("2")]
public static void Equal(string expected, string actual, bool ignoreCase, bool ignoreLineEndingDifferences, bool ignoreWhiteSpaceDifferences, bool ignoreAllWhiteSpace);
    public static void Matches(string expectedRegexPattern, string actualString);
    public static void Matches(Regex expectedRegex, string actualString);
    [NullableContextAttribute("2")]
public static void StartsWith(string expectedStartString, string actualString);
    [NullableContextAttribute("2")]
public static void StartsWith(string expectedStartString, string actualString, StringComparison comparisonType);
    private static int SkipLineEnding(string value, int index);
    private static int SkipWhitespace(string value, int index);
    [NullableContextAttribute("2")]
public static T IsAssignableFrom(object object);
    public static void IsAssignableFrom(Type expectedType, object object);
    [NullableContextAttribute("2")]
public static void IsNotAssignableFrom(object object);
    public static void IsNotAssignableFrom(Type expectedType, object object);
    [NullableContextAttribute("2")]
public static void IsNotType(object object);
    public static void IsNotType(Type expectedType, object object);
    [NullableContextAttribute("2")]
public static T IsType(object object);
    public static void IsType(Type expectedType, object object);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Xunit.Internal.AssertHelper : object {
    private static Dictionary`2<char, string> encodings;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ConcurrentDictionary`2<Type, Dictionary`2<string, Func`2<object, object>>> gettersByType;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Lazy`1<TypeInfo> fileSystemInfoTypeInfo;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Lazy`1<PropertyInfo> fileSystemInfoFullNameProperty;
    private static Lazy`1<Assembly[]> getAssemblies;
    private static AssertHelper();
    private static Dictionary`2<string, Func`2<object, object>> GetGettersForType(Type type);
    private static TypeInfo GetTypeInfo(string typeName);
    internal static bool IsCompilerGenerated(Type type);
    internal static string ShortenAndEncodeString(string value, int index, Int32& pointerIndent);
    internal static string ShortenAndEncodeString(string value);
    internal static string ShortenAndEncodeStringEnd(string value);
    private static bool TryConvert(object value, Type targetType, Object& converted);
    [NullableContextAttribute("2")]
public static EquivalentException VerifyEquivalence(object expected, object actual, bool strict);
    private static EquivalentException VerifyEquivalence(object expected, object actual, bool strict, string prefix, HashSet`1<object> expectedRefs, HashSet`1<object> actualRefs, int depth);
    private static EquivalentException VerifyEquivalenceDateTime(object expected, object actual, string prefix);
    private static EquivalentException VerifyEquivalenceEnumerable(IEnumerable expected, IEnumerable actual, bool strict, string prefix, HashSet`1<object> expectedRefs, HashSet`1<object> actualRefs, int depth);
    private static EquivalentException VerifyEquivalenceFileSystemInfo(object expected, object actual, bool strict, string prefix, HashSet`1<object> expectedRefs, HashSet`1<object> actualRefs, int depth);
    private static EquivalentException VerifyEquivalenceIntrinsics(object expected, object actual, string prefix);
    private static EquivalentException VerifyEquivalenceReference(object expected, object actual, bool strict, string prefix, HashSet`1<object> expectedRefs, HashSet`1<object> actualRefs, int depth);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal static class Xunit.Internal.ExceptionUtility : object {
    [NullableAttribute("1")]
private static Regex transformRegex;
    private static ExceptionUtility();
    [NullableContextAttribute("1")]
private static bool FilterStackFrame(string stackFrame);
    public static string FilterStackTrace(string stack);
    public static string TransformStackFrame(string stackFrame, string indent);
    public static string TransformStackTrace(string stack, string indent);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Sdk.AllException : XunitException {
    private AllException(string message);
    public static AllException ForFailures(int totalItems, IReadOnlyList`1<Tuple`3<int, string, Exception>> errors);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Xunit.Sdk.ArgumentFormatter : object {
    internal static string EllipsisInBrackets;
    public static int MAX_DEPTH;
    public static int MAX_ENUMERABLE_LENGTH;
    public static int MAX_OBJECT_ITEM_COUNT;
    public static int MAX_STRING_LENGTH;
    private static Object[] EmptyObjects;
    private static Type[] EmptyTypes;
    [NullableAttribute("2")]
private static PropertyInfo tupleIndexer;
    [NullableAttribute("2")]
private static Type tupleInterfaceType;
    [NullableAttribute("2")]
private static PropertyInfo tupleLength;
    private static Dictionary`2<TypeInfo, string> TypeMappings;
    [CompilerGeneratedAttribute]
private static string <Ellipsis>k__BackingField;
    public static string Ellipsis { get; }
    private static ArgumentFormatter();
    [CompilerGeneratedAttribute]
public static string get_Ellipsis();
    public static string EscapeString(string s);
    public static string Format(object value, int depth);
    private static string FormatCharValue(char value);
    private static string FormatComplexValue(object value, int depth, Type type, bool isAnonymousType);
    private static string FormatDateTimeValue(object value);
    private static string FormatDoubleValue(object value);
    private static string FormatEnumValue(object value);
    private static string FormatEnumerableValue(IEnumerable enumerable, int depth);
    private static string FormatFloatValue(object value);
    private static string FormatStringValue(string value);
    private static string FormatTupleValue(object tupleParameter, int depth);
    public static string FormatTypeName(Type type, bool fullTypeName);
    private static string FormatValueTypeValue(object value, TypeInfo typeInfo);
    [NullableContextAttribute("2")]
internal static Type GetSetElementType(object obj);
    [ExtensionAttribute]
private static bool IsAnonymousType(TypeInfo typeInfo);
    [ExtensionAttribute]
private static bool IsSZArrayType(TypeInfo typeInfo);
    [NullableContextAttribute("2")]
private static bool SafeToMultiEnumerate(IEnumerable collection);
    [NullableContextAttribute("2")]
private static bool TryGetEscapeSequence(char ch, String& value);
    [NullableContextAttribute("2")]
internal static Exception UnwrapException(Exception ex);
    private static string WrapAndGetFormattedValue(Func`1<object> getter, int depth);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Xunit.Sdk.AssertEqualityComparer : object {
    private static ConcurrentDictionary`2<Type, IEqualityComparer> cachedDefaultComparers;
    private static ConcurrentDictionary`2<Type, IEqualityComparer> cachedDefaultInnerComparers;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Object[] singleNullObject;
    private static AssertEqualityComparer();
    internal static IEqualityComparer GetDefaultComparer(Type type);
    internal static IEqualityComparer GetDefaultInnerComparer(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Xunit.Sdk.AssertEqualityComparer`1 : object {
    internal static IEqualityComparer DefaultInnerComparer;
    private static ConcurrentDictionary`2<Type, TypeInfo> cacheOfIComparableOfT;
    private static ConcurrentDictionary`2<Type, TypeInfo> cacheOfIEquatableOfT;
    private Lazy`1<IEqualityComparer> innerComparer;
    private static Type typeKeyValuePair;
    public IEqualityComparer InnerComparer { get; }
    [NullableContextAttribute("2")]
public AssertEqualityComparer`1(IEqualityComparer innerComparer);
    private static AssertEqualityComparer`1();
    public IEqualityComparer get_InnerComparer();
    public sealed virtual bool Equals(T x, T y);
    internal bool Equals(T x, CollectionTracker xTracker, T y, CollectionTracker yTracker, Nullable`1& mismatchedIndex);
    public static IEqualityComparer`1<T> FromComparer(Func`3<T, T, bool> comparer);
    public sealed virtual int GetHashCode(T obj);
    internal static TArg GuardArgumentNotNull(string argName, TArg argValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Xunit.Sdk.AssertEqualityComparerAdapter`1 : object {
    private IEqualityComparer`1<T> innerComparer;
    public AssertEqualityComparerAdapter`1(IEqualityComparer`1<T> innerComparer);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(object x, object y);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(T x, T y);
    public sealed virtual int GetHashCode(object obj);
    public sealed virtual int GetHashCode(T obj);
}
internal class Xunit.Sdk.AssertRangeComparer`1 : object {
    [NullableContextAttribute("1")]
public sealed virtual int Compare(T x, T y);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Sdk.CollectionException : XunitException {
    private static Char[] crlfSeparators;
    private CollectionException(string message);
    private static CollectionException();
    private static string FormatInnerException(Exception innerException);
    public static CollectionException ForMismatchedItem(Exception exception, int indexFailurePoint, Nullable`1<int> failurePointerIndent, string formattedCollection);
    public static CollectionException ForMismatchedItemCount(int expectedCount, int actualCount, string formattedCollection);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Xunit.Sdk.CollectionTracker : object {
    private static MethodInfo openGenericCompareTypedSetsMethod;
    [CompilerGeneratedAttribute]
private IEnumerable <InnerEnumerable>k__BackingField;
    protected internal IEnumerable InnerEnumerable { get; protected set; }
    protected CollectionTracker(IEnumerable innerEnumerable);
    private static CollectionTracker();
    [CompilerGeneratedAttribute]
protected internal IEnumerable get_InnerEnumerable();
    [CompilerGeneratedAttribute]
protected void set_InnerEnumerable(IEnumerable value);
    [NullableContextAttribute("2")]
public static bool AreCollectionsEqual(CollectionTracker x, CollectionTracker y, IEqualityComparer itemComparer, bool isDefaultItemComparer, Nullable`1& mismatchedIndex);
    [NullableContextAttribute("2")]
private static Nullable`1<bool> CheckIfArraysAreEqual(CollectionTracker x, CollectionTracker y, IEqualityComparer itemComparer, bool isDefaultItemComparer, Nullable`1& mismatchedIndex);
    [NullableContextAttribute("2")]
private static Nullable`1<bool> CheckIfDictionariesAreEqual(CollectionTracker x, CollectionTracker y);
    [NullableContextAttribute("2")]
private static bool CheckIfEnumerablesAreEqual(CollectionTracker x, CollectionTracker y, IEqualityComparer itemComparer, bool isDefaultItemComparer, Nullable`1& mismatchIndex);
    [NullableContextAttribute("2")]
private static Nullable`1<bool> CheckIfSetsAreEqual(CollectionTracker x, CollectionTracker y, IEqualityComparer itemComparer);
    private static bool CompareTypedSets(ISet`1<T> setX, ISet`1<T> setY, IEqualityComparer`1<T> itemComparer);
    public abstract virtual void Dispose();
    public abstract virtual string FormatIndexedMismatch(Nullable`1<int> mismatchedIndex, Nullable`1& pointerIndent, int depth);
    public abstract virtual string FormatIndexedMismatch(int startIndex, int endIndex, Nullable`1<int> mismatchedIndex, Nullable`1& pointerIndent, int depth);
    public abstract virtual string FormatStart(int depth);
    public abstract virtual void GetMismatchExtents(Nullable`1<int> mismatchedIndex, Int32& startIndex, Int32& endIndex);
    protected internal abstract virtual IEnumerator GetSafeEnumerator();
    [NullableContextAttribute("2")]
public abstract virtual string TypeAt(Nullable`1<int> index);
    public static CollectionTracker`1<object> Wrap(IEnumerable enumerable);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Sdk.CollectionTracker`1 : CollectionTracker {
    private static int MAX_ENUMERABLE_LENGTH_HALF;
    private IEnumerable`1<T> collection;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Enumerator<T> enumerator;
    public int IterationCount { get; }
    internal CollectionTracker`1(IEnumerable collection, IEnumerable`1<T> castCollection);
    private CollectionTracker`1(IEnumerable`1<T> collection);
    public int get_IterationCount();
    public virtual void Dispose();
    public virtual string FormatIndexedMismatch(Nullable`1<int> mismatchedIndex, Nullable`1& pointerIndent, int depth);
    public virtual string FormatIndexedMismatch(int startIndex, int endIndex, Nullable`1<int> mismatchedIndex, Nullable`1& pointerIndent, int depth);
    private static string FormatIndexedMismatch(Dictionary`2<int, T> items, Func`1<bool> moreItemsPastEndIndex, int startIndex, int endIndex, Nullable`1<int> mismatchedIndex, Nullable`1& pointerIndent, int depth);
    public virtual string FormatStart(int depth);
    public static string FormatStart(IEnumerable`1<T> collection, int depth);
    private static string FormatStart(List`1<T> items, int currentIndex, int depth);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    protected internal virtual IEnumerator GetSafeEnumerator();
    public virtual void GetMismatchExtents(Nullable`1<int> mismatchedIndex, Int32& startIndex, Int32& endIndex);
    [NullableContextAttribute("2")]
public virtual string TypeAt(Nullable`1<int> index);
    public static CollectionTracker`1<T> Wrap(IEnumerable`1<T> collection);
    [CompilerGeneratedAttribute]
private bool <FormatIndexedMismatch>b__8_0();
    [CompilerGeneratedAttribute]
private bool <FormatIndexedMismatch>b__9_0();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Xunit.Sdk.CollectionTrackerExtensions : object {
    private static MethodInfo asTrackerOpenGeneric;
    [NullableAttribute("1")]
private static ConcurrentDictionary`2<Type, MethodInfo> cacheOfAsTrackerByType;
    private static CollectionTrackerExtensions();
    [ExtensionAttribute]
internal static CollectionTracker AsNonStringTracker(object value);
    [ExtensionAttribute]
public static CollectionTracker AsTracker(IEnumerable enumerable);
    [ExtensionAttribute]
public static CollectionTracker`1<T> AsTracker(IEnumerable`1<T> enumerable);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IEnumerator GetEnumerator(CollectionTracker tracker);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Sdk.ContainsException : XunitException {
    private ContainsException(string message);
    public static ContainsException ForCollectionFilterNotMatched(string collection);
    public static ContainsException ForCollectionItemNotFound(string item, string collection);
    public static ContainsException ForKeyNotFound(string expectedKey, string keys);
    public static ContainsException ForSetItemNotFound(string item, string set);
    public static ContainsException ForSubMemoryNotFound(string expectedSubMemory, string memory);
    public static ContainsException ForSubSpanNotFound(string expectedSubSpan, string span);
    public static ContainsException ForSubStringNotFound(string expectedSubString, string string);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Sdk.DistinctException : XunitException {
    private DistinctException(string message);
    public static DistinctException ForDuplicateItem(string item, string collection);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Sdk.DoesNotContainException : XunitException {
    private DoesNotContainException(string message);
    public static DoesNotContainException ForCollectionFilterMatched(int indexFailurePoint, Nullable`1<int> failurePointerIndent, string collection);
    public static DoesNotContainException ForCollectionItemFound(string item, int indexFailurePoint, Nullable`1<int> failurePointerIndent, string collection);
    public static DoesNotContainException ForKeyFound(string expectedKey, string keys);
    public static DoesNotContainException ForSetItemFound(string item, string set);
    public static DoesNotContainException ForSubMemoryFound(string expectedSubMemory, int indexFailurePoint, Nullable`1<int> failurePointerIndent, string memory);
    public static DoesNotContainException ForSubSpanFound(string expectedSubSpan, int indexFailurePoint, Nullable`1<int> failurePointerIndent, string span);
    public static DoesNotContainException ForSubStringFound(string expectedSubString, int indexFailurePoint, string string);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Sdk.DoesNotMatchException : XunitException {
    private DoesNotMatchException(string message);
    public static DoesNotMatchException ForMatch(string expectedRegexPattern, int indexFailurePoint, int failurePointerIndent, string string);
}
internal static class Xunit.Sdk.DynamicSkipToken : object {
    [NullableAttribute("1")]
public static string Value;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Sdk.EmptyException : XunitException {
    private EmptyException(string message);
    public static EmptyException ForNonEmptyCollection(string collection);
    public static EmptyException ForNonEmptyString(string value);
}
public class Xunit.Sdk.EndsWithException : XunitException {
    [NullableContextAttribute("1")]
private EndsWithException(string message);
    [NullableContextAttribute("2")]
public static EndsWithException ForStringNotFound(string expected, string actual);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Xunit.Sdk.EqualException : XunitException {
    [NullableAttribute("1")]
private static string newLineAndIndent;
    [NullableContextAttribute("1")]
private EqualException(string message, Exception innerException);
    private static EqualException();
    [NullableContextAttribute("1")]
public static EqualException ForMismatchedCollections(Nullable`1<int> mismatchedIndex, string expected, Nullable`1<int> expectedPointer, string expectedType, string actual, Nullable`1<int> actualPointer, string actualType, string collectionDisplay);
    public static EqualException ForMismatchedCollectionsWithError(Nullable`1<int> mismatchedIndex, string expected, Nullable`1<int> expectedPointer, string expectedType, string actual, Nullable`1<int> actualPointer, string actualType, Exception error, string collectionDisplay);
    public static EqualException ForMismatchedStrings(string expected, string actual, int expectedIndex, int actualIndex);
    public static EqualException ForMismatchedValues(object expected, object actual, string banner);
    public static EqualException ForMismatchedValuesWithError(object expected, object actual, Exception error, string banner);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Sdk.EquivalentException : XunitException {
    private EquivalentException(string message, Exception innerException);
    private static string FormatMemberNameList(IEnumerable`1<string> memberNames, string prefix);
    public static EquivalentException ForCircularReference(string memberName);
    public static EquivalentException ForExceededDepth(int depth, string memberName);
    public static EquivalentException ForMemberListMismatch(IEnumerable`1<string> expectedMemberNames, IEnumerable`1<string> actualMemberNames, string prefix);
    [NullableContextAttribute("2")]
public static EquivalentException ForMemberValueMismatch(object expected, object actual, string memberName, Exception innerException);
    public static EquivalentException ForMissingCollectionValue(object expected, IEnumerable`1<object> actual, string memberName);
    public static EquivalentException ForExtraCollectionValue(IEnumerable`1<object> expected, IEnumerable`1<object> actual, IEnumerable`1<object> actualLeftovers, string memberName);
    public static EquivalentException ForMismatchedTypes(Type expectedType, Type actualType, string memberName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Sdk.FailException : XunitException {
    private FailException(string message);
    public static FailException ForFailure(string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Sdk.FalseException : XunitException {
    private FalseException(string message);
    public static FalseException ForNonFalseValue(string message, Nullable`1<bool> value);
}
public interface Xunit.Sdk.IAssertionException {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Sdk.InRangeException : XunitException {
    private InRangeException(string message);
    public static InRangeException ForValueNotInRange(object actual, object low, object high);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Sdk.IsAssignableFromException : XunitException {
    private IsAssignableFromException(string message);
    public static IsAssignableFromException ForIncompatibleType(Type expected, object actual);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Sdk.IsNotAssignableFromException : XunitException {
    private IsNotAssignableFromException(string message);
    public static IsNotAssignableFromException ForCompatibleType(Type expected, object actual);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Sdk.IsNotTypeException : XunitException {
    private IsNotTypeException(string message);
    public static IsNotTypeException ForExactType(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Sdk.IsTypeException : XunitException {
    private IsTypeException(string message);
    public static IsTypeException ForMismatchedType(string expectedTypeName, string actualTypeName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Sdk.MatchesException : XunitException {
    private MatchesException(string message);
    public static MatchesException ForMatchNotFound(string expectedRegexPattern, string actual);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Sdk.MultipleException : XunitException {
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<Exception> <InnerExceptions>k__BackingField;
    public IReadOnlyCollection`1<Exception> InnerExceptions { get; }
    [NullableAttribute("2")]
public string StackTrace { get; }
    private MultipleException(IEnumerable`1<Exception> innerExceptions);
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<Exception> get_InnerExceptions();
    [NullableContextAttribute("2")]
public virtual string get_StackTrace();
    public static MultipleException ForFailures(IReadOnlyCollection`1<Exception> innerExceptions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Sdk.NotEmptyException : XunitException {
    private NotEmptyException(string message);
    public static NotEmptyException ForNonEmptyCollection();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Sdk.NotEqualException : XunitException {
    private NotEqualException(string message, Exception innerException);
    public static NotEqualException ForEqualCollections(string expected, string actual, string collectionDisplay);
    public static NotEqualException ForEqualCollectionsWithError(Nullable`1<int> mismatchedIndex, string expected, Nullable`1<int> expectedPointer, string actual, Nullable`1<int> actualPointer, Exception error, string collectionDisplay);
    public static NotEqualException ForEqualValues(string expected, string actual, string banner);
    public static NotEqualException ForEqualValuesWithError(string expected, string actual, Exception error, string banner);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Sdk.NotInRangeException : XunitException {
    private NotInRangeException(string message);
    public static NotInRangeException ForValueInRange(object actual, object low, object high);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Sdk.NotNullException : XunitException {
    private NotNullException(string message);
    public static Exception ForNullStruct(Type type);
    public static NotNullException ForNullValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Sdk.NotSameException : XunitException {
    private NotSameException(string message);
    public static NotSameException ForSameValues();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Sdk.NotStrictEqualException : XunitException {
    private NotStrictEqualException(string message);
    public static NotStrictEqualException ForEqualValues(string expected, string actual);
}
public class Xunit.Sdk.NullException : XunitException {
    [NullableContextAttribute("1")]
private NullException(string message);
    public static Exception ForNonNullStruct(Type type, Nullable`1<T> actual);
    [NullableContextAttribute("1")]
public static NullException ForNonNullValue(object actual);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Sdk.ProperSubsetException : XunitException {
    private ProperSubsetException(string message);
    public static ProperSubsetException ForFailure(string expected, string actual);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Sdk.ProperSupersetException : XunitException {
    private ProperSupersetException(string message);
    public static ProperSupersetException ForFailure(string expected, string actual);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Sdk.PropertyChangedException : XunitException {
    private PropertyChangedException(string message);
    public static PropertyChangedException ForUnsetProperty(string propertyName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Sdk.RaisesAnyException : XunitException {
    private RaisesAnyException(string message);
    public static RaisesAnyException ForNoEvent(Type expected);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Sdk.RaisesException : XunitException {
    private RaisesException(string message);
    public static RaisesException ForIncorrectType(Type expected, Type actual);
    public static RaisesException ForNoEvent(Type expected);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Sdk.SameException : XunitException {
    private SameException(string message);
    public static SameException ForFailure(string expected, string actual);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Sdk.SingleException : XunitException {
    private SingleException(string errorMessage);
    public static SingleException Empty(string expected, string collection);
    public static SingleException MoreThanOne(int count, string expected, string collection, ICollection`1<int> matchIndices);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Sdk.SkipException : XunitException {
    private SkipException(string message);
    public static SkipException ForSkip(string message);
}
public class Xunit.Sdk.StartsWithException : XunitException {
    [NullableContextAttribute("1")]
private StartsWithException(string message);
    [NullableContextAttribute("2")]
public static StartsWithException ForStringNotFound(string expected, string actual);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Sdk.StrictEqualException : XunitException {
    private StrictEqualException(string message);
    public static StrictEqualException ForEqualValues(string expected, string actual);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Sdk.SubsetException : XunitException {
    private SubsetException(string message);
    public static SubsetException ForFailure(string expected, string actual);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Sdk.SupersetException : XunitException {
    private SupersetException(string message);
    public static SupersetException ForFailure(string expected, string actual);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Sdk.ThrowsAnyException : XunitException {
    private ThrowsAnyException(string message, Exception innerException);
    public static ThrowsAnyException ForIncorrectExceptionType(Type expected, Exception actual);
    public static ThrowsAnyException ForNoException(Type expected);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Sdk.ThrowsException : XunitException {
    private ThrowsException(string message, Exception innerException);
    public static ThrowsException ForIncorrectExceptionType(Type expected, Exception actual);
    public static ThrowsException ForIncorrectParameterName(Type expected, string expectedParamName, string actualParamName);
    public static ThrowsException ForNoException(Type expected);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Sdk.TrueException : XunitException {
    private TrueException(string message);
    public static TrueException ForNonTrueValue(string message, Nullable`1<bool> value);
}
public class Xunit.Sdk.XunitException : Exception {
    [NullableContextAttribute("2")]
public XunitException(string userMessage);
    [NullableContextAttribute("2")]
public XunitException(string userMessage, Exception innerException);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
