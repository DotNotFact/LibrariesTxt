[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
public interface Microsoft.DeepDev.ITokenizer {
    public abstract virtual List`1<int> Encode(string text, IReadOnlyCollection`1<string> allowedSpecial);
    public abstract virtual ValueTuple`2<List`1<int>, string> EncodeTrimSuffix(string text, IReadOnlyCollection`1<string> allowedSpecial, int maxTokenCount);
    public abstract virtual ValueTuple`2<List`1<int>, string> EncodeTrimPrefix(string text, IReadOnlyCollection`1<string> allowedSpecial, int maxTokenCount);
    public abstract virtual List`1<int> Encode(string text, bool applySpecialTokens);
    public abstract virtual ValueTuple`2<List`1<int>, string> EncodeTrimSuffix(string text, int maxTokenCount, bool applySpecialTokens);
    public abstract virtual ValueTuple`2<List`1<int>, string> EncodeTrimPrefix(string text, int maxTokenCount, bool applySpecialTokens);
    public abstract virtual string Decode(Int32[] tokens);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.DeepDev.TikTokenizer : object {
    private IReadOnlyDictionary`2<string, int> SpecialTokensEncoder;
    private IReadOnlyCollection`1<string> SpecialTokens;
    private Regex Regex;
    private IReadOnlyDictionary`2<Byte[], int> Encoder;
    private IReadOnlyDictionary`2<int, Byte[]> Decoder;
    private Regex SpecialTokensRegex;
    private IReadOnlyDictionary`2<int, string> SpecialTokensDecoder;
    public static int DefaultCacheSize;
    private LruCache`2<string, Int32[]> Cache;
    public int NumOfCacheEntries { get; }
    public TikTokenizer(IReadOnlyDictionary`2<Byte[], int> encoder, IReadOnlyDictionary`2<string, int> specialTokensEncoder, string pattern, int cacheSize);
    public TikTokenizer(Stream tikTokenBpeFileStream, IReadOnlyDictionary`2<string, int> specialTokensEncoder, string pattern, int cacheSize);
    public int get_NumOfCacheEntries();
    private void Init(IReadOnlyDictionary`2<Byte[], int> encoder, IReadOnlyDictionary`2<string, int> specialTokensEncoder, string pattern);
    private Dictionary`2<Byte[], int> LoadTikTokenBpe(Stream tikTokenBpeFileStream);
    private List`1<int> EncodeInternal(string text, IReadOnlyCollection`1<string> allowedSpecial);
    public sealed virtual List`1<int> Encode(string text, IReadOnlyCollection`1<string> allowedSpecial);
    public sealed virtual List`1<int> Encode(string text, bool applySpecialTokens);
    private int EncodeSpecialToken(List`1<int> tokenIds, Match nextSpecial);
    private void FindNextSpecialToken(string text, IReadOnlyCollection`1<string> allowedSpecial, int start, Match& nextSpecial, Int32& end);
    private void Encode(string text, List`1<int> tokenIds, int start, int end);
    private ValueTuple`2<int, int> EncodeTrimSuffix(string text, List`1<int> tokenIds, int start, int end, int maxTokenCount, int tokenCount, int encodeLength);
    private ValueTuple`2<List`1<int>, string> EncodeTrimSuffixInternal(string text, IReadOnlyCollection`1<string> allowedSpecial, int maxTokenCount);
    public sealed virtual ValueTuple`2<List`1<int>, string> EncodeTrimSuffix(string text, IReadOnlyCollection`1<string> allowedSpecial, int maxTokenCount);
    public sealed virtual ValueTuple`2<List`1<int>, string> EncodeTrimSuffix(string text, int maxTokenCount, bool applySpecialTokens);
    private ValueTuple`2<List`1<int>, string> EncodeTrimPrefixInternal(string text, IReadOnlyCollection`1<string> allowedSpecial, int maxTokenCount);
    private static ValueTuple`2<List`1<int>, string> TrimPrefix(string text, int maxTokenCount, List`1<int> tokenIds, int tokenCount, SortedDictionary`2<int, int> tokenCountMap);
    private void Encode(string text, List`1<int> tokenIds, int start, Int32& tokenCount, Int32& encodeLength, SortedDictionary`2<int, int> tokenCountMap, int end);
    public sealed virtual ValueTuple`2<List`1<int>, string> EncodeTrimPrefix(string text, IReadOnlyCollection`1<string> allowedSpecial, int maxTokenCount);
    public sealed virtual ValueTuple`2<List`1<int>, string> EncodeTrimPrefix(string text, int maxTokenCount, bool applySpecialTokens);
    public sealed virtual string Decode(Int32[] tokens);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.DeepDev.TokenizerBuilder : object {
    private static IReadOnlyDictionary`2<string, string> MODEL_PREFIX_TO_ENCODING;
    private static IReadOnlyDictionary`2<string, string> MODEL_TO_ENCODING;
    private static string ENDOFTEXT;
    private static string FIM_PREFIX;
    private static string FIM_MIDDLE;
    private static string FIM_SUFFIX;
    private static string ENDOFPROMPT;
    private static HttpClient _httpClient;
    private static TokenizerBuilder();
    [AsyncStateMachineAttribute("Microsoft.DeepDev.TokenizerBuilder/<CreateByModelNameAsync>d__8")]
public static Task`1<ITokenizer> CreateByModelNameAsync(string modelName, IReadOnlyDictionary`2<string, int> extraSpecialTokens);
    [AsyncStateMachineAttribute("Microsoft.DeepDev.TokenizerBuilder/<CreateByEncoderNameAsync>d__9")]
public static Task`1<ITokenizer> CreateByEncoderNameAsync(string encoderName, IReadOnlyDictionary`2<string, int> extraSpecialTokens);
    [AsyncStateMachineAttribute("Microsoft.DeepDev.TokenizerBuilder/<CreateTokenizerAsync>d__10")]
private static Task`1<ITokenizer> CreateTokenizerAsync(string regexPatternStr, string mergeableRanksFileUrl, Dictionary`2<string, int> specialTokens);
    public static ITokenizer CreateTokenizer(Stream tikTokenBpeFileStream, IReadOnlyDictionary`2<string, int> specialTokensEncoder, string pattern, int cacheSize);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.DeepDev.TokenizerLib.Utils.ByteArrayComparer : object {
    public sealed virtual bool Equals(Byte[] x, Byte[] y);
    public sealed virtual int GetHashCode(Byte[] bytes);
}
internal class Microsoft.DeepDev.TokenizerLib.Utils.BytePairEncoder : object {
    [NullableContextAttribute("1")]
public static List`1<int> BytePairEncode(Byte[] mergingBytes, IReadOnlyDictionary`2<Byte[], int> ranks);
    [CompilerGeneratedAttribute]
internal static int <BytePairEncode>g__GetRank|0_0(int startIndex, int skip, <>c__DisplayClass0_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.DeepDev.TokenizerLib.Utils.LruCache`2 : object {
    public static int DefaultCacheSize;
    private object _lockObject;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<TKey, LinkedListNode`1<CacheItem<TKey, TValue>>> _cache;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private LinkedList`1<CacheItem<TKey, TValue>> _lruList;
    private int _cacheSize;
    public int Count { get; }
    public LruCache`2(int cacheSize);
    public bool Lookup(TKey key, TValue& value);
    protected virtual void OnEviction(TValue evictedValue);
    private void EvictIfNeeded();
    public void Add(TKey key, TValue value);
    public bool Replace(TKey key, TValue value, TValue& oldValue);
    private bool ReplaceInternal(TKey key, TValue value, TValue& oldValue);
    public int get_Count();
    public void Clear();
}
[IsReadOnlyAttribute]
internal class System.Index : ValueType {
    private int _value;
    public static Index Start { get; }
    public static Index End { get; }
    public int Value { get; }
    public bool IsFromEnd { get; }
    public Index(int value, bool fromEnd);
    private Index(int value);
    public static Index get_Start();
    public static Index get_End();
    public static Index FromStart(int value);
    public static Index FromEnd(int value);
    public int get_Value();
    public bool get_IsFromEnd();
    public int GetOffset(int length);
    [NullableContextAttribute("2")]
public virtual bool Equals(object value);
    public sealed virtual bool Equals(Index other);
    public virtual int GetHashCode();
    public static Index op_Implicit(int value);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[IsReadOnlyAttribute]
internal class System.Range : ValueType {
    [CompilerGeneratedAttribute]
private Index <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private Index <End>k__BackingField;
    public Index Start { get; }
    public Index End { get; }
    public static Range All { get; }
    public Range(Index start, Index end);
    [CompilerGeneratedAttribute]
public Index get_Start();
    [CompilerGeneratedAttribute]
public Index get_End();
    [NullableContextAttribute("2")]
public virtual bool Equals(object value);
    public sealed virtual bool Equals(Range other);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
public virtual string ToString();
    public static Range StartAt(Index start);
    public static Range EndAt(Index end);
    public static Range get_All();
    public ValueTuple`2<int, int> GetOffsetAndLength(int length);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
internal static class System.Runtime.CompilerServices.RuntimeHelpers : object {
    [NullableContextAttribute("1")]
public static T[] GetSubArray(T[] array, Range range);
}
