[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal static class Snappier.Internal.Constants : object {
    public static byte Literal;
    public static byte Copy1ByteOffset;
    public static byte Copy2ByteOffset;
    public static byte Copy4ByteOffset;
    public static long MaximumTagLength;
    public static int BlockLog;
    public static long BlockSize;
    public static long InputMarginBytes;
    [NullableAttribute("1")]
public static UInt16[] CharTable;
    private static Constants();
}
internal class Snappier.Internal.CopyHelpers : object {
    [NullableAttribute("1")]
public static SByte[0...,0...] PshufbFillPatterns;
    [NullableAttribute("1")]
private static Byte[] PatternSizeTable;
    private static CopyHelpers();
    public static void IncrementalCopy(Byte* source, Byte* op, Byte* opEnd, Byte* bufferEnd, SByte* pshufbFillPatterns);
    public static void IncrementalCopySlow(Byte* source, Byte* op, Byte* opEnd);
    public static void UnalignedCopy64(Byte* source, Byte* destination);
    public static void UnalignedCopy128(Byte* source, Byte* destination);
}
internal static class Snappier.Internal.Crc32CAlgorithm : object {
    private static UInt32 Poly;
    [NullableAttribute("1")]
private static UInt32[] Table;
    private static Crc32CAlgorithm();
    public static UInt32 Compute(ReadOnlySpan`1<byte> source);
    public static UInt32 Append(UInt32 crc, ReadOnlySpan`1<byte> source);
    public static UInt32 ApplyMask(UInt32 x);
}
internal class Snappier.Internal.EmptyMemoryOwner : object {
    private bool _disposed;
    public Memory`1<byte> Memory { get; }
    public sealed virtual void Dispose();
    public sealed virtual Memory`1<byte> get_Memory();
}
internal class Snappier.Internal.HashTable : object {
    private static int MinHashTableBits;
    private static int MinHashTableSize;
    private static int MaxHashTableBits;
    private static int MaxHashTableSize;
    [NullableAttribute("2")]
private IMemoryOwner`1<ushort> _buffer;
    public void EnsureCapacity(long inputSize);
    public Span`1<ushort> GetHashTable(int fragmentSize);
    private int CalculateTableSize(int inputSize);
    private void Dispose(bool disposing);
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
}
internal static class Snappier.Internal.Helpers : object {
    private static UInt32 HashMultiplier;
    [NullableAttribute("1")]
private static Byte[] LeftShiftOverflowsMasks;
    private static Helpers();
    public static int HashBytes(UInt32 bytes, int shift);
    public static int MaxCompressedLength(int sourceBytes);
    public static bool LeftShiftOverflows(byte value, int shift);
    public static UInt32 ExtractLowBytes(UInt32 value, int numBytes);
    public static int UnsafeReadInt32(Void* ptr);
    public static UInt32 UnsafeReadUInt32(Void* ptr);
    public static ulong UnsafeReadUInt64(Void* ptr);
    public static void UnsafeWriteUInt32(Void* ptr, UInt32 value);
    public static int Log2Floor(UInt32 n);
    public static int Log2FloorNonZero(UInt32 n);
    public static int FindLsbSetNonZero(UInt32 n);
}
internal class Snappier.Internal.SlicedMemoryOwner : object {
    [NullableAttribute("2")]
private IMemoryOwner`1<byte> _innerMemoryOwner;
    private int _length;
    public Memory`1<byte> Memory { get; }
    [NullableContextAttribute("1")]
public SlicedMemoryOwner(IMemoryOwner`1<byte> innerMemoryOwner, int length);
    public sealed virtual Memory`1<byte> get_Memory();
    public sealed virtual void Dispose();
}
internal class Snappier.Internal.SnappyCompressor : object {
    [NullableAttribute("2")]
private HashTable _workingMemory;
    public int Compress(ReadOnlySpan`1<byte> input, Span`1<byte> output);
    public sealed virtual void Dispose();
    private static int WriteUncompressedLength(Span`1<byte> output, int length);
    private static int CompressFragment(ReadOnlySpan`1<byte> input, Span`1<byte> output, Span`1<ushort> tableSpan);
    private static Byte* EmitLiteralFast(Byte* op, Byte* literal, UInt32 length);
    private static Byte* EmitLiteralSlow(Byte* op, Byte* literal, UInt32 length);
    private static Byte* EmitCopyAtMost64LenLessThan12(Byte* op, long offset, long length);
    private static Byte* EmitCopyAtMost64LenGreaterThanOrEqualTo12(Byte* op, long offset, long length);
    private static Byte* EmitCopyLenLessThan12(Byte* op, long offset, long length);
    private static Byte* EmitCopyLenGreaterThanOrEqualTo12(Byte* op, long offset, long length);
    internal static ValueTuple`2<long, bool> FindMatchLength(Byte* s1, Byte* s2, Byte* s2Limit, UInt64& data);
}
internal class Snappier.Internal.SnappyDecompressor : object {
    [NullableAttribute("1")]
private Byte[] _scratch;
    private UInt32 _scratchLength;
    private int _remainingLiteral;
    private int _uncompressedLengthShift;
    private int _uncompressedLength;
    [NullableAttribute("2")]
private IMemoryOwner`1<byte> _lookbackBufferOwner;
    private Memory`1<byte> _lookbackBuffer;
    [NativeIntegerAttribute]
private UIntPtr _lookbackBufferLength;
    [NativeIntegerAttribute]
private UIntPtr _lookbackPosition;
    private int _readPosition;
    private Nullable`1<int> _expectedLength;
    public bool NeedMoreData { get; }
    private Nullable`1<int> ExpectedLength { get; private set; }
    public int UnreadBytes { get; }
    public bool EndOfFile { get; }
    public bool AllDataDecompressed { get; }
    public bool get_NeedMoreData();
    public void Decompress(ReadOnlySpan`1<byte> input);
    public void Reset();
    private Nullable`1<int> ReadUncompressedLength(ReadOnlySpan`1& input);
    public static int ReadUncompressedLength(ReadOnlySpan`1<byte> input);
    internal void DecompressAllTags(ReadOnlySpan`1<byte> inputSpan);
    private bool RefillTagFromScratch(Byte*& input, Byte* inputEnd, Byte* scratch);
    private bool RefillTag(Byte*& input, Byte*& inputEnd, Byte* scratch);
    private Nullable`1<int> get_ExpectedLength();
    private void set_ExpectedLength(Nullable`1<int> value);
    public int get_UnreadBytes();
    public bool get_EndOfFile();
    public bool get_AllDataDecompressed();
    private void Append(ReadOnlySpan`1<byte> input);
    private void Append(Byte*& op, Byte* bufferEnd, Byte* input, UIntPtr length);
    [NullableContextAttribute("1")]
private static void ThrowInvalidDataException(string message);
    private bool TryFastAppend(Byte*& op, Byte* bufferEnd, Byte* input, UIntPtr available, UIntPtr length);
    private void AppendFromSelf(Byte*& op, Byte* buffer, Byte* bufferEnd, UInt32 copyOffset, UIntPtr length, SByte* pshufbFillPatterns);
    public int Read(Span`1<byte> destination);
    [NullableContextAttribute("1")]
public IMemoryOwner`1<byte> ExtractData();
    internal void WriteToBufferForTest(ReadOnlySpan`1<byte> toWrite);
    [NullableContextAttribute("1")]
internal void LoadScratchForTest(Byte[] newScratch, UInt32 newScratchLength);
    internal void SetExpectedLengthForTest(int expectedLength);
    public sealed virtual void Dispose();
}
internal class Snappier.Internal.SnappyStreamCompressor : object {
    [NullableAttribute("1")]
private static Byte[] SnappyHeader;
    [NullableAttribute("2")]
private SnappyCompressor _compressor;
    [NullableAttribute("2")]
private IMemoryOwner`1<byte> _inputBufferOwner;
    private Memory`1<byte> _inputBuffer;
    private int _inputBufferSize;
    [NullableAttribute("2")]
private IMemoryOwner`1<byte> _outputBufferOwner;
    private Memory`1<byte> _outputBuffer;
    private int _outputBufferSize;
    private bool _streamHeaderWritten;
    private static SnappyStreamCompressor();
    public void Write(ReadOnlySpan`1<byte> input, Stream stream);
    [AsyncStateMachineAttribute("Snappier.Internal.SnappyStreamCompressor/<WriteAsync>d__10")]
public ValueTask WriteAsync(ReadOnlyMemory`1<byte> input, Stream stream, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public void Flush(Stream stream);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Snappier.Internal.SnappyStreamCompressor/<FlushAsync>d__12")]
public ValueTask FlushAsync(Stream stream, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
private void WriteOutputBuffer(Stream stream);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Snappier.Internal.SnappyStreamCompressor/<WriteOutputBufferAsync>d__14")]
private ValueTask WriteOutputBufferAsync(Stream stream, CancellationToken cancellationToken);
    private void EnsureStreamHeaderWritten();
    private int CompressInput(ReadOnlySpan`1<byte> input);
    private void CompressBlock(ReadOnlySpan`1<byte> input);
    private void WriteCompressedBlockHeader(ReadOnlySpan`1<byte> input, Span`1<byte> output, int compressedSize);
    private void EnsureBuffer();
    public sealed virtual void Dispose();
}
internal class Snappier.Internal.SnappyStreamDecompressor : object {
    private static int ScratchBufferSize;
    [NullableAttribute("2")]
private SnappyDecompressor _decompressor;
    private ReadOnlyMemory`1<byte> _input;
    [NullableAttribute("1")]
private Byte[] _scratch;
    private int _scratchLength;
    private Nullable`1<ChunkType> _chunkType;
    private int _chunkSize;
    private int _chunkBytesProcessed;
    private UInt32 _expectedChunkCrc;
    private UInt32 _chunkCrc;
    public int Decompress(Span`1<byte> buffer);
    public void SetInput(ReadOnlyMemory`1<byte> input);
    private UInt32 ReadChunkHeader(Byte*& buffer, Byte* bufferEnd);
    private bool ReadChunkCrc(Byte*& inputPtr, Byte* inputEnd, Int32& chunkBytesProcessed);
    public sealed virtual void Dispose();
}
public static class Snappier.Snappy : object {
    public static int GetMaxCompressedLength(int inputLength);
    public static int Compress(ReadOnlySpan`1<byte> input, Span`1<byte> output);
    public static IMemoryOwner`1<byte> CompressToMemory(ReadOnlySpan`1<byte> input);
    public static Byte[] CompressToArray(ReadOnlySpan`1<byte> input);
    public static int GetUncompressedLength(ReadOnlySpan`1<byte> input);
    public static int Decompress(ReadOnlySpan`1<byte> input, Span`1<byte> output);
    public static IMemoryOwner`1<byte> DecompressToMemory(ReadOnlySpan`1<byte> input);
    public static Byte[] DecompressToArray(ReadOnlySpan`1<byte> input);
}
public class Snappier.SnappyStream : Stream {
    private static int DefaultBufferSize;
    [NullableAttribute("1")]
private Stream _stream;
    private CompressionMode _mode;
    private bool _leaveOpen;
    [NullableAttribute("2")]
private SnappyStreamDecompressor _decompressor;
    [NullableAttribute("2")]
private SnappyStreamCompressor _compressor;
    [NullableAttribute("2")]
private Byte[] _buffer;
    private bool _wroteBytes;
    private int _activeAsyncOperation;
    [NullableAttribute("1")]
public Stream BaseStream { get; }
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public bool CanSeek { get; }
    public long Length { get; }
    public long Position { get; public set; }
    private bool AsyncOperationIsActive { get; }
    [NullableContextAttribute("1")]
public SnappyStream(Stream stream, CompressionMode mode);
    [NullableContextAttribute("1")]
public SnappyStream(Stream stream, CompressionMode mode, bool leaveOpen);
    [NullableContextAttribute("1")]
public Stream get_BaseStream();
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual bool get_CanSeek();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    [NullableContextAttribute("1")]
public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    [NullableContextAttribute("1")]
public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual int Read(Span`1<byte> buffer);
    private int ReadCore(Span`1<byte> buffer);
    [NullableContextAttribute("1")]
public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual ValueTask`1<int> ReadAsync(Memory`1<byte> buffer, CancellationToken cancellationToken);
    private ValueTask`1<int> ReadAsyncCore(Memory`1<byte> buffer, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Snappier.SnappyStream/<FinishReadAsyncMemory>d__33")]
private ValueTask`1<int> FinishReadAsyncMemory(ValueTask`1<int> readTask, Memory`1<byte> buffer, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual void Write(ReadOnlySpan`1<byte> buffer);
    private void WriteCore(ReadOnlySpan`1<byte> buffer);
    [NullableContextAttribute("1")]
public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual ValueTask WriteAsync(ReadOnlyMemory`1<byte> buffer, CancellationToken cancellationToken);
    private ValueTask WriteAsyncCore(ReadOnlyMemory`1<byte> buffer, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Snappier.SnappyStream/<WriteAsyncMemoryCore>d__40")]
private ValueTask WriteAsyncMemoryCore(ReadOnlyMemory`1<byte> buffer, CancellationToken cancellationToken);
    private void PurgeBuffers();
    private ValueTask PurgeBuffersAsync();
    protected virtual void Dispose(bool disposing);
    [AsyncStateMachineAttribute("Snappier.SnappyStream/<DisposeAsync>d__44")]
public virtual ValueTask DisposeAsync();
    private void EnsureNotDisposed();
    private void EnsureDecompressionMode();
    private void EnsureCompressionMode();
    private void EnsureBufferInitialized();
    private bool get_AsyncOperationIsActive();
    private void EnsureNoActiveAsyncOperation();
    private void AsyncOperationStarting();
    private void AsyncOperationCompleting();
    private static void ThrowInvalidBeginCall();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NativeIntegerAttribute : Attribute {
    public Boolean[] TransformFlags;
    public NativeIntegerAttribute(Boolean[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
