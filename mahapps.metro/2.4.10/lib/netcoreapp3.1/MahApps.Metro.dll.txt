public static class MahApps.Metro.Accessibility.AccessibilitySwitches : object {
    internal static string UseLegacyAccessibilityFeatures3SwitchName;
    public static bool UseNetFx472CompatibleAccessibilityFeatures { get; }
    public static bool get_UseNetFx472CompatibleAccessibilityFeatures();
}
public class MahApps.Metro.Actions.CloseFlyoutAction : CommandTriggerAction {
    private Flyout associatedFlyout;
    private Flyout AssociatedFlyout { get; }
    private Flyout get_AssociatedFlyout();
    protected virtual void Invoke(object parameter);
    protected virtual object GetCommandParameter();
}
public class MahApps.Metro.Actions.CloseTabItemAction : CommandTriggerAction {
    private TabItem associatedTabItem;
    private TabItem AssociatedTabItem { get; }
    private TabItem get_AssociatedTabItem();
    protected virtual void Invoke(object parameter);
    protected virtual object GetCommandParameter();
}
public class MahApps.Metro.Actions.CommandTriggerAction : TriggerAction`1<FrameworkElement> {
    public static DependencyProperty CommandProperty;
    public static DependencyProperty CommandParameterProperty;
    public ICommand Command { get; public set; }
    public object CommandParameter { get; public set; }
    private static CommandTriggerAction();
    public ICommand get_Command();
    public void set_Command(ICommand value);
    public object get_CommandParameter();
    public void set_CommandParameter(object value);
    protected virtual void OnAttached();
    protected virtual void Invoke(object parameter);
    private static void OnCommandChanged(CommandTriggerAction action, DependencyPropertyChangedEventArgs e);
    protected virtual object GetCommandParameter();
    private void EnableDisableElement();
    private void OnCommandCanExecuteChanged(object sender, EventArgs e);
}
internal class MahApps.Metro.AppName : object {
    public static string MahApps;
}
public class MahApps.Metro.Automation.Peers.FlyoutAutomationPeer : FrameworkElementAutomationPeer {
    public FlyoutAutomationPeer(Flyout owner);
    protected virtual string GetClassNameCore();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetNameCore();
}
public class MahApps.Metro.Automation.Peers.MetroDialogAutomationPeer : FrameworkElementAutomationPeer {
    public MetroDialogAutomationPeer(BaseMetroDialog owner);
    protected virtual string GetClassNameCore();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetNameCore();
}
public class MahApps.Metro.Automation.Peers.MetroHeaderAutomationPeer : GroupBoxAutomationPeer {
    public MetroHeaderAutomationPeer(GroupBox owner);
    protected virtual string GetClassNameCore();
}
public class MahApps.Metro.Automation.Peers.MetroThumbContentControlAutomationPeer : FrameworkElementAutomationPeer {
    public MetroThumbContentControlAutomationPeer(FrameworkElement owner);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
}
public class MahApps.Metro.Automation.Peers.MetroWindowAutomationPeer : WindowAutomationPeer {
    public MetroWindowAutomationPeer(Window owner);
    protected virtual string GetClassNameCore();
}
public class MahApps.Metro.Automation.Peers.ToggleSwitchAutomationPeer : FrameworkElementAutomationPeer {
    public ToggleState ToggleState { get; }
    public ToggleSwitchAutomationPeer(ToggleSwitch owner);
    protected virtual string GetClassNameCore();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    public virtual object GetPattern(PatternInterface patternInterface);
    internal virtual void RaiseToggleStatePropertyChangedEvent(bool oldValue, bool newValue);
    private static ToggleState ConvertToToggleState(bool value);
    public sealed virtual ToggleState get_ToggleState();
    public sealed virtual void Toggle();
}
public class MahApps.Metro.Automation.Peers.WindowCommandsAutomationPeer : FrameworkElementAutomationPeer {
    public WindowCommandsAutomationPeer(WindowCommands owner);
    protected virtual string GetClassNameCore();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetNameCore();
    protected virtual bool IsOffscreenCore();
    protected virtual Point GetClickablePointCore();
}
public class MahApps.Metro.Behaviors.BindableResourceBehavior : Behavior`1<Shape> {
    public static DependencyProperty ResourceNameProperty;
    public static DependencyProperty PropertyProperty;
    public string ResourceName { get; public set; }
    public DependencyProperty Property { get; public set; }
    private static BindableResourceBehavior();
    protected virtual void OnAttached();
    public string get_ResourceName();
    public void set_ResourceName(string value);
    public DependencyProperty get_Property();
    public void set_Property(DependencyProperty value);
}
public class MahApps.Metro.Behaviors.BorderlessWindowBehavior : WindowChromeBehavior {
    protected virtual void OnAttached();
    protected virtual void OnDetaching();
    protected virtual void AssociatedObject_Loaded(object sender, RoutedEventArgs e);
}
public class MahApps.Metro.Behaviors.DatePickerTextBoxBehavior : Behavior`1<DatePickerTextBox> {
    protected virtual void OnAttached();
    protected virtual void OnDetaching();
    private void OnTextChanged(object sender, TextChangedEventArgs e);
    private void SetHasTextProperty();
}
public class MahApps.Metro.Behaviors.PasswordBoxBindingBehavior : Behavior`1<PasswordBox> {
    public static DependencyProperty PasswordProperty;
    private static DependencyProperty IsChangingProperty;
    private static DependencyProperty SelectionProperty;
    private static DependencyProperty RevealedPasswordTextBoxProperty;
    private static PasswordBoxBindingBehavior();
    [CategoryAttribute("MahApps.Metro")]
public static string GetPassword(DependencyObject dpo);
    public static void SetPassword(DependencyObject dpo, string value);
    private static void OnPasswordPropertyChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e);
    private static void PasswordBoxPasswordChanged(object sender, RoutedEventArgs e);
    private static void SetRevealedPasswordCaretIndex(PasswordBox passwordBox);
    private static int GetPasswordBoxCaretPosition(PasswordBox passwordBox);
    protected virtual void OnAttached();
    private void PasswordBoxLoaded(object sender, RoutedEventArgs e);
    private void PasswordBoxSelectionChanged(object sender, EventArgs e);
    protected virtual void OnDetaching();
    private static bool GetIsChanging(UIElement element);
    private static void SetIsChanging(UIElement element, bool value);
    private static TextSelection GetSelection(DependencyObject obj);
    private static void SetSelection(DependencyObject obj, TextSelection value);
    private static TextBox GetRevealedPasswordTextBox(DependencyObject obj);
    private static void SetRevealedPasswordTextBox(DependencyObject obj, TextBox value);
}
public static class MahApps.Metro.Behaviors.ReloadBehavior : object {
    public static DependencyProperty OnDataContextChangedProperty;
    public static DependencyProperty OnSelectedTabChangedProperty;
    internal static DependencyProperty ContentControlProperty;
    private static ReloadBehavior();
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.MetroContentControl")]
public static bool GetOnDataContextChanged(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.MetroContentControl")]
public static void SetOnDataContextChanged(UIElement element, bool value);
    private static void OnOnDataContextChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e);
    private static void ReloadOnDataContextChanged(object sender, DependencyPropertyChangedEventArgs e);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.MetroContentControl")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.TransitioningContentControl")]
public static bool GetOnSelectedTabChanged(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.MetroContentControl")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.TransitioningContentControl")]
public static void SetOnSelectedTabChanged(UIElement element, bool value);
    private static void OnSelectedTabChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e);
    private static void ReloadOnLoaded(object sender, RoutedEventArgs e);
    private static void ReloadOnSelectionChanged(object sender, SelectionChangedEventArgs e);
    internal static ContentControl GetContentControl(UIElement element);
    internal static void SetContentControl(UIElement element, ContentControl value);
}
public class MahApps.Metro.Behaviors.StylizedBehaviorCollection : FreezableCollection`1<Behavior> {
    protected virtual Freezable CreateInstanceCore();
}
public class MahApps.Metro.Behaviors.StylizedBehaviors : object {
    public static DependencyProperty BehaviorsProperty;
    private static DependencyProperty OriginalBehaviorProperty;
    private static StylizedBehaviors();
    [CategoryAttribute("MahApps.Metro")]
public static StylizedBehaviorCollection GetBehaviors(DependencyObject uie);
    public static void SetBehaviors(DependencyObject uie, StylizedBehaviorCollection value);
    private static void OnPropertyChanged(DependencyObject dpo, DependencyPropertyChangedEventArgs e);
    private static void Dispatcher_ShutdownStarted(object sender, EventArgs e);
    private static void FrameworkElementUnloaded(object sender, RoutedEventArgs e);
    private static void FrameworkElementLoaded(object sender, RoutedEventArgs e);
    private static int GetIndexOf(BehaviorCollection itemBehaviors, Behavior behavior);
    private static Behavior GetOriginalBehavior(DependencyObject obj);
    private static void SetOriginalBehavior(DependencyObject obj, Behavior value);
}
public class MahApps.Metro.Behaviors.TabControlSelectFirstVisibleTabBehavior : Behavior`1<TabControl> {
    protected virtual void OnAttached();
    private void OnSelectionChanged(object sender, SelectionChangedEventArgs args);
    protected virtual void OnDetaching();
}
public class MahApps.Metro.Behaviors.TiltBehavior : Behavior`1<FrameworkElement> {
    public static DependencyProperty KeepDraggingProperty;
    public static DependencyProperty TiltFactorProperty;
    private bool isPressed;
    private Thickness originalMargin;
    private Panel originalPanel;
    private Size originalSize;
    private FrameworkElement attachedElement;
    private Point current;
    private int times;
    [CompilerGeneratedAttribute]
private Planerator <RotatorParent>k__BackingField;
    public bool KeepDragging { get; public set; }
    public int TiltFactor { get; public set; }
    public Planerator RotatorParent { get; private set; }
    private static TiltBehavior();
    public bool get_KeepDragging();
    public void set_KeepDragging(bool value);
    public int get_TiltFactor();
    public void set_TiltFactor(int value);
    [CompilerGeneratedAttribute]
public Planerator get_RotatorParent();
    [CompilerGeneratedAttribute]
private void set_RotatorParent(Planerator value);
    protected virtual void OnAttached();
    private void ThemeManagerIsThemeChanged(object sender, ThemeChangedEventArgs e);
    protected virtual void OnDetaching();
    private void CompositionTargetRendering(object sender, EventArgs e);
    private static Panel GetParentPanel(DependencyObject element);
    [CompilerGeneratedAttribute]
private void <ThemeManagerIsThemeChanged>b__20_0();
}
public class MahApps.Metro.Behaviors.WindowsSettingBehavior : Behavior`1<MetroWindow> {
    protected virtual void OnAttached();
    protected virtual void OnDetaching();
    private void AssociatedObject_SourceInitialized(object sender, EventArgs e);
    private void AssociatedObject_Closing(object sender, CancelEventArgs e);
    private void AssociatedObject_Closed(object sender, EventArgs e);
    private void CurrentApplicationSessionEnding(object sender, SessionEndingCancelEventArgs e);
    private void AssociatedObject_StateChanged(object sender, EventArgs e);
    private void CleanUp(string fromWhere);
    private void LoadWindowState();
    private void SaveWindowState();
    [CompilerGeneratedAttribute]
private void <AssociatedObject_SourceInitialized>b__2_0(Application app);
    [CompilerGeneratedAttribute]
private void <CleanUp>b__7_0(Application app);
}
public enum MahApps.Metro.Controls.AddToRecentColorsTrigger : Enum {
    public int value__;
    public static AddToRecentColorsTrigger Never;
    public static AddToRecentColorsTrigger ColorPickerClosed;
    public static AddToRecentColorsTrigger SelectedColorChanged;
}
internal class MahApps.Metro.Controls.AmPmComparer : object {
    public sealed virtual int Compare(int x, int y);
}
[TemplatePartAttribute]
public class MahApps.Metro.Controls.Badged : BadgedEx {
    public static DependencyProperty BadgeChangedStoryboardProperty;
    public Storyboard BadgeChangedStoryboard { get; public set; }
    private static Badged();
    public Storyboard get_BadgeChangedStoryboard();
    public void set_BadgeChangedStoryboard(Storyboard value);
    public virtual void OnApplyTemplate();
    private void OnBadgeChanged(object sender, RoutedPropertyChangedEventArgs`1<object> e);
}
public abstract class MahApps.Metro.Controls.BaseMetroTabControl : TabControlEx {
    public static DependencyProperty TabStripMarginProperty;
    public static DependencyProperty CloseTabCommandProperty;
    [CompilerGeneratedAttribute]
private TabItemClosingEventHandler TabItemClosingEvent;
    public Thickness TabStripMargin { get; public set; }
    public ICommand CloseTabCommand { get; public set; }
    private static BaseMetroTabControl();
    public Thickness get_TabStripMargin();
    public void set_TabStripMargin(Thickness value);
    protected virtual bool IsItemItsOwnContainerOverride(object item);
    protected virtual DependencyObject GetContainerForItemOverride();
    protected virtual void PrepareContainerForItemOverride(DependencyObject element, object item);
    public ICommand get_CloseTabCommand();
    public void set_CloseTabCommand(ICommand value);
    [CompilerGeneratedAttribute]
public void add_TabItemClosingEvent(TabItemClosingEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_TabItemClosingEvent(TabItemClosingEventHandler value);
    internal bool RaiseTabItemClosingEvent(MetroTabItem closingItem);
    internal void CloseThisTabItem(MetroTabItem tabItem);
}
public static class MahApps.Metro.Controls.BuildInColorPalettes : object {
    [CompilerGeneratedAttribute]
private static Color[] <StandardColorsPalette>k__BackingField;
    [CompilerGeneratedAttribute]
private static ObservableCollection`1<Color> <WpfColorsPalette>k__BackingField;
    [CompilerGeneratedAttribute]
private static ObservableCollection`1<Nullable`1<Color>> <RecentColors>k__BackingField;
    public static DependencyProperty MaximumRecentColorsCountProperty;
    public static Color[] StandardColorsPalette { get; }
    public static ObservableCollection`1<Color> WpfColorsPalette { get; }
    public static ObservableCollection`1<Nullable`1<Color>> RecentColors { get; }
    private static BuildInColorPalettes();
    [CompilerGeneratedAttribute]
public static Color[] get_StandardColorsPalette();
    [CompilerGeneratedAttribute]
public static ObservableCollection`1<Color> get_WpfColorsPalette();
    [CompilerGeneratedAttribute]
public static ObservableCollection`1<Nullable`1<Color>> get_RecentColors();
    public static void AddColorToRecentColors(Nullable`1<Color> color, IEnumerable recentColors, int maxCount);
    [AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.ColorPickerBase")]
public static int GetMaximumRecentColorsCount(DependencyObject obj);
    [AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.ColorPickerBase")]
public static void SetMaximumRecentColorsCount(DependencyObject obj, int value);
}
public enum MahApps.Metro.Controls.ButtonsAlignment : Enum {
    public int value__;
    public static ButtonsAlignment Left;
    public static ButtonsAlignment Right;
    public static ButtonsAlignment Opposite;
}
public static class MahApps.Metro.Controls.CheckBoxHelper : object {
    public static DependencyProperty CheckSizeProperty;
    public static DependencyProperty CheckCornerRadiusProperty;
    public static DependencyProperty CheckStrokeThicknessProperty;
    public static DependencyProperty CheckGlyphUncheckedProperty;
    public static DependencyProperty CheckGlyphUncheckedTemplateProperty;
    public static DependencyProperty ForegroundUncheckedProperty;
    public static DependencyProperty BackgroundUncheckedProperty;
    public static DependencyProperty BorderBrushUncheckedProperty;
    public static DependencyProperty CheckBackgroundFillUncheckedProperty;
    public static DependencyProperty CheckBackgroundStrokeUncheckedProperty;
    public static DependencyProperty CheckGlyphForegroundUncheckedProperty;
    public static DependencyProperty ForegroundUncheckedMouseOverProperty;
    public static DependencyProperty BackgroundUncheckedMouseOverProperty;
    public static DependencyProperty BorderBrushUncheckedMouseOverProperty;
    public static DependencyProperty CheckBackgroundFillUncheckedMouseOverProperty;
    public static DependencyProperty CheckBackgroundStrokeUncheckedMouseOverProperty;
    public static DependencyProperty CheckGlyphForegroundUncheckedMouseOverProperty;
    public static DependencyProperty ForegroundUncheckedPressedProperty;
    public static DependencyProperty BackgroundUncheckedPressedProperty;
    public static DependencyProperty BorderBrushUncheckedPressedProperty;
    public static DependencyProperty CheckBackgroundFillUncheckedPressedProperty;
    public static DependencyProperty CheckBackgroundStrokeUncheckedPressedProperty;
    public static DependencyProperty CheckGlyphForegroundUncheckedPressedProperty;
    public static DependencyProperty ForegroundUncheckedDisabledProperty;
    public static DependencyProperty BackgroundUncheckedDisabledProperty;
    public static DependencyProperty BorderBrushUncheckedDisabledProperty;
    public static DependencyProperty CheckBackgroundFillUncheckedDisabledProperty;
    public static DependencyProperty CheckBackgroundStrokeUncheckedDisabledProperty;
    public static DependencyProperty CheckGlyphForegroundUncheckedDisabledProperty;
    public static DependencyProperty CheckGlyphCheckedProperty;
    public static DependencyProperty CheckGlyphCheckedTemplateProperty;
    public static DependencyProperty ForegroundCheckedProperty;
    public static DependencyProperty BackgroundCheckedProperty;
    public static DependencyProperty BorderBrushCheckedProperty;
    public static DependencyProperty CheckBackgroundFillCheckedProperty;
    public static DependencyProperty CheckBackgroundStrokeCheckedProperty;
    public static DependencyProperty CheckGlyphForegroundCheckedProperty;
    public static DependencyProperty ForegroundCheckedMouseOverProperty;
    public static DependencyProperty BackgroundCheckedMouseOverProperty;
    public static DependencyProperty BorderBrushCheckedMouseOverProperty;
    public static DependencyProperty CheckBackgroundFillCheckedMouseOverProperty;
    public static DependencyProperty CheckBackgroundStrokeCheckedMouseOverProperty;
    public static DependencyProperty CheckGlyphForegroundCheckedMouseOverProperty;
    public static DependencyProperty ForegroundCheckedPressedProperty;
    public static DependencyProperty BackgroundCheckedPressedProperty;
    public static DependencyProperty BorderBrushCheckedPressedProperty;
    public static DependencyProperty CheckBackgroundFillCheckedPressedProperty;
    public static DependencyProperty CheckBackgroundStrokeCheckedPressedProperty;
    public static DependencyProperty CheckGlyphForegroundCheckedPressedProperty;
    public static DependencyProperty ForegroundCheckedDisabledProperty;
    public static DependencyProperty BackgroundCheckedDisabledProperty;
    public static DependencyProperty BorderBrushCheckedDisabledProperty;
    public static DependencyProperty CheckBackgroundFillCheckedDisabledProperty;
    public static DependencyProperty CheckBackgroundStrokeCheckedDisabledProperty;
    public static DependencyProperty CheckGlyphForegroundCheckedDisabledProperty;
    public static DependencyProperty CheckGlyphIndeterminateProperty;
    public static DependencyProperty CheckGlyphIndeterminateTemplateProperty;
    public static DependencyProperty ForegroundIndeterminateProperty;
    public static DependencyProperty BackgroundIndeterminateProperty;
    public static DependencyProperty BorderBrushIndeterminateProperty;
    public static DependencyProperty CheckBackgroundFillIndeterminateProperty;
    public static DependencyProperty CheckBackgroundStrokeIndeterminateProperty;
    public static DependencyProperty CheckGlyphForegroundIndeterminateProperty;
    public static DependencyProperty ForegroundIndeterminateMouseOverProperty;
    public static DependencyProperty BackgroundIndeterminateMouseOverProperty;
    public static DependencyProperty BorderBrushIndeterminateMouseOverProperty;
    public static DependencyProperty CheckBackgroundFillIndeterminateMouseOverProperty;
    public static DependencyProperty CheckBackgroundStrokeIndeterminateMouseOverProperty;
    public static DependencyProperty CheckGlyphForegroundIndeterminateMouseOverProperty;
    public static DependencyProperty ForegroundIndeterminatePressedProperty;
    public static DependencyProperty BackgroundIndeterminatePressedProperty;
    public static DependencyProperty BorderBrushIndeterminatePressedProperty;
    public static DependencyProperty CheckBackgroundFillIndeterminatePressedProperty;
    public static DependencyProperty CheckBackgroundStrokeIndeterminatePressedProperty;
    public static DependencyProperty CheckGlyphForegroundIndeterminatePressedProperty;
    public static DependencyProperty ForegroundIndeterminateDisabledProperty;
    public static DependencyProperty BackgroundIndeterminateDisabledProperty;
    public static DependencyProperty BorderBrushIndeterminateDisabledProperty;
    public static DependencyProperty CheckBackgroundFillIndeterminateDisabledProperty;
    public static DependencyProperty CheckBackgroundStrokeIndeterminateDisabledProperty;
    public static DependencyProperty CheckGlyphForegroundIndeterminateDisabledProperty;
    private static CheckBoxHelper();
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static double GetCheckSize(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetCheckSize(DependencyObject obj, double value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static CornerRadius GetCheckCornerRadius(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetCheckCornerRadius(UIElement element, CornerRadius value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static double GetCheckStrokeThickness(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetCheckStrokeThickness(DependencyObject obj, double value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static object GetCheckGlyphUnchecked(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetCheckGlyphUnchecked(DependencyObject obj, object value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static DataTemplate GetCheckGlyphUncheckedTemplate(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetCheckGlyphUncheckedTemplate(DependencyObject obj, DataTemplate value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetForegroundUnchecked(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetForegroundUnchecked(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetBackgroundUnchecked(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetBackgroundUnchecked(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetBorderBrushUnchecked(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetBorderBrushUnchecked(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetCheckBackgroundFillUnchecked(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetCheckBackgroundFillUnchecked(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetCheckBackgroundStrokeUnchecked(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetCheckBackgroundStrokeUnchecked(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetCheckGlyphForegroundUnchecked(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetCheckGlyphForegroundUnchecked(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetForegroundUncheckedMouseOver(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetForegroundUncheckedMouseOver(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetBackgroundUncheckedMouseOver(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetBackgroundUncheckedMouseOver(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetBorderBrushUncheckedMouseOver(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetBorderBrushUncheckedMouseOver(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetCheckBackgroundFillUncheckedMouseOver(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetCheckBackgroundFillUncheckedMouseOver(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetCheckBackgroundStrokeUncheckedMouseOver(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetCheckBackgroundStrokeUncheckedMouseOver(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetCheckGlyphForegroundUncheckedMouseOver(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetCheckGlyphForegroundUncheckedMouseOver(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetForegroundUncheckedPressed(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetForegroundUncheckedPressed(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetBackgroundUncheckedPressed(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetBackgroundUncheckedPressed(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetBorderBrushUncheckedPressed(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetBorderBrushUncheckedPressed(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetCheckBackgroundFillUncheckedPressed(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetCheckBackgroundFillUncheckedPressed(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetCheckBackgroundStrokeUncheckedPressed(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetCheckBackgroundStrokeUncheckedPressed(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetCheckGlyphForegroundUncheckedPressed(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetCheckGlyphForegroundUncheckedPressed(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetForegroundUncheckedDisabled(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetForegroundUncheckedDisabled(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetBackgroundUncheckedDisabled(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetBackgroundUncheckedDisabled(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetBorderBrushUncheckedDisabled(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetBorderBrushUncheckedDisabled(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetCheckBackgroundFillUncheckedDisabled(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetCheckBackgroundFillUncheckedDisabled(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetCheckBackgroundStrokeUncheckedDisabled(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetCheckBackgroundStrokeUncheckedDisabled(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetCheckGlyphForegroundUncheckedDisabled(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetCheckGlyphForegroundUncheckedDisabled(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static object GetCheckGlyphChecked(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetCheckGlyphChecked(DependencyObject obj, object value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static DataTemplate GetCheckGlyphCheckedTemplate(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetCheckGlyphCheckedTemplate(DependencyObject obj, DataTemplate value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetForegroundChecked(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetForegroundChecked(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetBackgroundChecked(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetBackgroundChecked(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetBorderBrushChecked(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetBorderBrushChecked(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetCheckBackgroundFillChecked(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetCheckBackgroundFillChecked(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetCheckBackgroundStrokeChecked(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetCheckBackgroundStrokeChecked(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetCheckGlyphForegroundChecked(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetCheckGlyphForegroundChecked(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetForegroundCheckedMouseOver(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetForegroundCheckedMouseOver(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetBackgroundCheckedMouseOver(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetBackgroundCheckedMouseOver(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetBorderBrushCheckedMouseOver(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetBorderBrushCheckedMouseOver(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetCheckBackgroundFillCheckedMouseOver(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetCheckBackgroundFillCheckedMouseOver(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetCheckBackgroundStrokeCheckedMouseOver(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetCheckBackgroundStrokeCheckedMouseOver(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetCheckGlyphForegroundCheckedMouseOver(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetCheckGlyphForegroundCheckedMouseOver(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetForegroundCheckedPressed(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetForegroundCheckedPressed(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetBackgroundCheckedPressed(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetBackgroundCheckedPressed(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetBorderBrushCheckedPressed(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetBorderBrushCheckedPressed(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetCheckBackgroundFillCheckedPressed(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetCheckBackgroundFillCheckedPressed(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetCheckBackgroundStrokeCheckedPressed(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetCheckBackgroundStrokeCheckedPressed(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetCheckGlyphForegroundCheckedPressed(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetCheckGlyphForegroundCheckedPressed(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetForegroundCheckedDisabled(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetForegroundCheckedDisabled(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetBackgroundCheckedDisabled(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetBackgroundCheckedDisabled(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetBorderBrushCheckedDisabled(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetBorderBrushCheckedDisabled(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetCheckBackgroundFillCheckedDisabled(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetCheckBackgroundFillCheckedDisabled(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetCheckBackgroundStrokeCheckedDisabled(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetCheckBackgroundStrokeCheckedDisabled(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetCheckGlyphForegroundCheckedDisabled(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetCheckGlyphForegroundCheckedDisabled(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static object GetCheckGlyphIndeterminate(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetCheckGlyphIndeterminate(DependencyObject obj, object value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static DataTemplate GetCheckGlyphIndeterminateTemplate(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetCheckGlyphIndeterminateTemplate(DependencyObject obj, DataTemplate value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetForegroundIndeterminate(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetForegroundIndeterminate(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetBackgroundIndeterminate(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetBackgroundIndeterminate(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetBorderBrushIndeterminate(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetBorderBrushIndeterminate(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetCheckBackgroundFillIndeterminate(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetCheckBackgroundFillIndeterminate(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetCheckBackgroundStrokeIndeterminate(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetCheckBackgroundStrokeIndeterminate(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetCheckGlyphForegroundIndeterminate(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetCheckGlyphForegroundIndeterminate(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetForegroundIndeterminateMouseOver(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetForegroundIndeterminateMouseOver(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetBackgroundIndeterminateMouseOver(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetBackgroundIndeterminateMouseOver(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetBorderBrushIndeterminateMouseOver(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetBorderBrushIndeterminateMouseOver(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetCheckBackgroundFillIndeterminateMouseOver(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetCheckBackgroundFillIndeterminateMouseOver(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetCheckBackgroundStrokeIndeterminateMouseOver(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetCheckBackgroundStrokeIndeterminateMouseOver(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetCheckGlyphForegroundIndeterminateMouseOver(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetCheckGlyphForegroundIndeterminateMouseOver(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetForegroundIndeterminatePressed(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetForegroundIndeterminatePressed(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetBackgroundIndeterminatePressed(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetBackgroundIndeterminatePressed(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetBorderBrushIndeterminatePressed(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetBorderBrushIndeterminatePressed(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetCheckBackgroundFillIndeterminatePressed(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetCheckBackgroundFillIndeterminatePressed(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetCheckBackgroundStrokeIndeterminatePressed(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetCheckBackgroundStrokeIndeterminatePressed(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetCheckGlyphForegroundIndeterminatePressed(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetCheckGlyphForegroundIndeterminatePressed(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetForegroundIndeterminateDisabled(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetForegroundIndeterminateDisabled(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetBackgroundIndeterminateDisabled(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetBackgroundIndeterminateDisabled(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetBorderBrushIndeterminateDisabled(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetBorderBrushIndeterminateDisabled(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetCheckBackgroundFillIndeterminateDisabled(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetCheckBackgroundFillIndeterminateDisabled(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetCheckBackgroundStrokeIndeterminateDisabled(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetCheckBackgroundStrokeIndeterminateDisabled(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static Brush GetCheckGlyphForegroundIndeterminateDisabled(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
public static void SetCheckGlyphForegroundIndeterminateDisabled(DependencyObject obj, Brush value);
}
public class MahApps.Metro.Controls.ClipBorder : Decorator {
    private StreamGeometry _backgroundGeometryCache;
    private StreamGeometry _borderGeometryCache;
    public static DependencyProperty BorderThicknessProperty;
    public static DependencyProperty PaddingProperty;
    public static DependencyProperty CornerRadiusProperty;
    public static DependencyProperty BorderBrushProperty;
    public static DependencyProperty BackgroundProperty;
    public static DependencyProperty OptimizeClipRenderingProperty;
    public Thickness BorderThickness { get; public set; }
    public Thickness Padding { get; public set; }
    public CornerRadius CornerRadius { get; public set; }
    public Brush BorderBrush { get; public set; }
    public Brush Background { get; public set; }
    public bool OptimizeClipRendering { get; public set; }
    private static ClipBorder();
    public Thickness get_BorderThickness();
    public void set_BorderThickness(Thickness value);
    private static bool OnValidateThickness(object value);
    public Thickness get_Padding();
    public void set_Padding(Thickness value);
    public CornerRadius get_CornerRadius();
    public void set_CornerRadius(CornerRadius value);
    private static bool OnValidateCornerRadius(object value);
    public Brush get_BorderBrush();
    public void set_BorderBrush(Brush value);
    public Brush get_Background();
    public void set_Background(Brush value);
    public bool get_OptimizeClipRendering();
    public void set_OptimizeClipRendering(bool value);
    protected virtual Size MeasureOverride(Size constraint);
    protected virtual Size ArrangeOverride(Size finalSize);
    protected virtual void OnRender(DrawingContext dc);
    private static void GenerateGeometry(StreamGeometryContext ctx, Rect rect, BorderInfo borderInfo);
}
public class MahApps.Metro.Controls.ClosingWindowEventHandlerArgs : EventArgs {
    [CompilerGeneratedAttribute]
private bool <Cancelled>k__BackingField;
    public bool Cancelled { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Cancelled();
    [CompilerGeneratedAttribute]
public void set_Cancelled(bool value);
}
[TemplatePartAttribute]
[TemplatePartAttribute]
public class MahApps.Metro.Controls.ColorCanvas : ColorPickerBase {
    private FrameworkElement saturationValueBox;
    private static ColorCanvas();
    private void PART_SaturationValueBox_MouseLeftButtonUp(object sender, MouseButtonEventArgs e);
    private void PART_SaturationValueBox_MouseLeftButtonDown(object sender, MouseButtonEventArgs e);
    private void PART_SaturationValueBox_MouseMove(object sender, MouseEventArgs e);
    private void UpdateValues(Point position);
    public virtual void OnApplyTemplate();
}
public class MahApps.Metro.Controls.ColorEyeDropper : Button {
    private DispatcherOperation currentTask;
    internal ColorEyePreviewData previewData;
    private ToolTip previewToolTip;
    public static DependencyProperty SelectedColorProperty;
    public static DependencyProperty PreviewImageOuterPixelCountProperty;
    public static DependencyProperty EyeDropperCursorProperty;
    public static DependencyProperty PreviewContentTemplateProperty;
    public static RoutedEvent SelectedColorChangedEvent;
    public Nullable`1<Color> SelectedColor { get; public set; }
    public int PreviewImageOuterPixelCount { get; public set; }
    public Cursor EyeDropperCursor { get; public set; }
    public DataTemplate PreviewContentTemplate { get; public set; }
    private static ColorEyeDropper();
    public Nullable`1<Color> get_SelectedColor();
    public void set_SelectedColor(Nullable`1<Color> value);
    private static void OnSelectedColorPropertyChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e);
    public int get_PreviewImageOuterPixelCount();
    public void set_PreviewImageOuterPixelCount(int value);
    public Cursor get_EyeDropperCursor();
    public void set_EyeDropperCursor(Cursor value);
    public DataTemplate get_PreviewContentTemplate();
    public void set_PreviewContentTemplate(DataTemplate value);
    private void SetPreview(Point mousePos);
    protected virtual void OnPreviewMouseLeftButtonDown(MouseButtonEventArgs e);
    protected virtual void OnPreviewMouseLeftButtonUp(MouseButtonEventArgs e);
    protected virtual void OnMouseMove(MouseEventArgs e);
    public void add_SelectedColorChanged(RoutedPropertyChangedEventHandler`1<Nullable`1<Color>> value);
    public void remove_SelectedColorChanged(RoutedPropertyChangedEventHandler`1<Nullable`1<Color>> value);
}
[ExtensionAttribute]
internal static class MahApps.Metro.Controls.ColorEyePreview : object {
    public static ToolTip GetPreviewToolTip(ColorEyeDropper target);
    [ExtensionAttribute]
public static void Show(ToolTip toolTip);
    [ExtensionAttribute]
public static void Hide(ToolTip toolTip);
    [ExtensionAttribute]
public static void Move(ToolTip toolTip, Point point, Point offset);
}
public class MahApps.Metro.Controls.ColorEyePreviewData : DependencyObject {
    internal static DependencyPropertyKey PreviewImagePropertyKey;
    public static DependencyProperty PreviewImageProperty;
    internal static DependencyPropertyKey PreviewBrushPropertyKey;
    public static DependencyProperty PreviewBrushProperty;
    public ImageSource PreviewImage { get; }
    public Brush PreviewBrush { get; }
    private static ColorEyePreviewData();
    public ImageSource get_PreviewImage();
    public Brush get_PreviewBrush();
}
public static class MahApps.Metro.Controls.ColorHelper : object {
    [CompilerGeneratedAttribute]
private static Dictionary`2<Nullable`1<Color>, string> <ColorNamesDictionary>k__BackingField;
    public static Dictionary`2<Nullable`1<Color>, string> ColorNamesDictionary { get; public set; }
    private static ColorHelper();
    public static Nullable`1<Color> ColorFromString(string colorName, Dictionary`2<Nullable`1<Color>, string> colorNamesDictionary);
    public static Nullable`1<Color> ColorFromString(string colorName);
    [CompilerGeneratedAttribute]
public static Dictionary`2<Nullable`1<Color>, string> get_ColorNamesDictionary();
    [CompilerGeneratedAttribute]
public static void set_ColorNamesDictionary(Dictionary`2<Nullable`1<Color>, string> value);
    public static string GetColorName(Nullable`1<Color> color, Dictionary`2<Nullable`1<Color>, string> colorNamesDictionary);
    public static string GetColorName(Nullable`1<Color> color);
}
public class MahApps.Metro.Controls.ColorPalette : ListBox {
    public static DependencyProperty HeaderProperty;
    public static DependencyProperty ColorNamesDictionaryProperty;
    public static DependencyProperty HeaderTemplateProperty;
    public object Header { get; public set; }
    public DataTemplate HeaderTemplate { get; public set; }
    public Dictionary`2<Nullable`1<Color>, string> ColorNamesDictionary { get; public set; }
    private static ColorPalette();
    public object get_Header();
    public void set_Header(object value);
    public DataTemplate get_HeaderTemplate();
    public void set_HeaderTemplate(DataTemplate value);
    public Dictionary`2<Nullable`1<Color>, string> get_ColorNamesDictionary();
    public void set_ColorNamesDictionary(Dictionary`2<Nullable`1<Color>, string> value);
    internal bool FocusSelectedItem();
}
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[StyleTypedPropertyAttribute]
[StyleTypedPropertyAttribute]
[StyleTypedPropertyAttribute]
[StyleTypedPropertyAttribute]
[StyleTypedPropertyAttribute]
[StyleTypedPropertyAttribute]
[StyleTypedPropertyAttribute]
public class MahApps.Metro.Controls.ColorPicker : ColorPickerBase {
    private Popup PART_Popup;
    private ColorPalette PART_ColorPaletteStandard;
    private ColorPalette PART_ColorPaletteAvailable;
    private ColorPalette PART_ColorPaletteCustom01;
    private ColorPalette PART_ColorPaletteCustom02;
    private ColorPalette PART_ColorPaletteRecent;
    private TabControl PART_PopupTabControl;
    private TabItem PART_ColorPalettesTab;
    private TabItem PART_AdvancedTab;
    public static RoutedEvent DropDownClosedEvent;
    public static RoutedEvent DropDownOpenedEvent;
    public static DependencyProperty DropDownHeightProperty;
    public static DependencyProperty DropDownWidthProperty;
    public static DependencyProperty IsDropDownOpenProperty;
    public static DependencyProperty SelectedColorTemplateProperty;
    public static DependencyProperty AddToRecentColorsTriggerProperty;
    public static DependencyProperty IsAvailableColorPaletteVisibleProperty;
    public static DependencyProperty AvailableColorPaletteHeaderProperty;
    public static DependencyProperty AvailableColorPaletteHeaderTemplateProperty;
    public static DependencyProperty AvailableColorPaletteItemsSourceProperty;
    public static DependencyProperty AvailableColorPaletteStyleProperty;
    public static DependencyProperty IsCustomColorPalette01VisibleProperty;
    public static DependencyProperty CustomColorPalette01HeaderProperty;
    public static DependencyProperty CustomColorPalette01HeaderTemplateProperty;
    public static DependencyProperty CustomColorPalette01ItemsSourceProperty;
    public static DependencyProperty CustomColorPalette01StyleProperty;
    public static DependencyProperty IsCustomColorPalette02VisibleProperty;
    public static DependencyProperty CustomColorPalette02HeaderProperty;
    public static DependencyProperty CustomColorPalette02HeaderTemplateProperty;
    public static DependencyProperty CustomColorPalette02ItemsSourceProperty;
    public static DependencyProperty CustomColorPalette02StyleProperty;
    public static DependencyProperty IsRecentColorPaletteVisibleProperty;
    public static DependencyProperty RecentColorPaletteHeaderProperty;
    public static DependencyProperty RecentColorPaletteHeaderTemplateProperty;
    public static DependencyProperty RecentColorPaletteItemsSourceProperty;
    public static DependencyProperty RecentColorPaletteStyleProperty;
    public static DependencyProperty IsStandardColorPaletteVisibleProperty;
    public static DependencyProperty StandardColorPaletteHeaderProperty;
    public static DependencyProperty StandardColorPaletteHeaderTemplateProperty;
    public static DependencyProperty StandardColorPaletteItemsSourceProperty;
    public static DependencyProperty StandardColorPaletteStyleProperty;
    public static DependencyProperty TabControlStyleProperty;
    public static DependencyProperty TabItemStyleProperty;
    public static DependencyProperty ColorPalettesTabHeaderProperty;
    public static DependencyProperty ColorPalettesTabHeaderTemplateProperty;
    public static DependencyProperty IsColorPalettesTabVisibleProperty;
    public static DependencyProperty AdvancedTabHeaderProperty;
    public static DependencyProperty AdvancedTabHeaderTemplateProperty;
    public static DependencyProperty IsAdvancedTabVisibleProperty;
    public double DropDownHeight { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Layout")]
[TypeConverterAttribute("System.Windows.LengthConverter")]
public double DropDownWidth { get; public set; }
    [BindableAttribute("True")]
[BrowsableAttribute("False")]
[CategoryAttribute("Appearance")]
public bool IsDropDownOpen { get; public set; }
    public DataTemplate SelectedColorTemplate { get; public set; }
    public AddToRecentColorsTrigger AddToRecentColorsTrigger { get; public set; }
    public bool IsAvailableColorPaletteVisible { get; public set; }
    public object AvailableColorPaletteHeader { get; public set; }
    public DataTemplate AvailableColorPaletteHeaderTemplate { get; public set; }
    public IEnumerable AvailableColorPaletteItemsSource { get; public set; }
    public Style AvailableColorPaletteStyle { get; public set; }
    public bool IsCustomColorPalette01Visible { get; public set; }
    public object CustomColorPalette01Header { get; public set; }
    public DataTemplate CustomColorPalette01HeaderTemplate { get; public set; }
    public IEnumerable CustomColorPalette01ItemsSource { get; public set; }
    public Style CustomColorPalette01Style { get; public set; }
    public bool IsCustomColorPalette02Visible { get; public set; }
    public object CustomColorPalette02Header { get; public set; }
    public DataTemplate CustomColorPalette02HeaderTemplate { get; public set; }
    public IEnumerable CustomColorPalette02ItemsSource { get; public set; }
    public Style CustomColorPalette02Style { get; public set; }
    public bool IsRecentColorPaletteVisible { get; public set; }
    public object RecentColorPaletteHeader { get; public set; }
    public DataTemplate RecentColorPaletteHeaderTemplate { get; public set; }
    public IEnumerable RecentColorPaletteItemsSource { get; public set; }
    public Style RecentColorPaletteStyle { get; public set; }
    public bool IsStandardColorPaletteVisible { get; public set; }
    public object StandardColorPaletteHeader { get; public set; }
    public object StandardColorPaletteHeaderTemplate { get; public set; }
    public IEnumerable StandardColorPaletteItemsSource { get; public set; }
    public Style StandardColorPaletteStyle { get; public set; }
    public Style TabControlStyle { get; public set; }
    public Style TabItemStyle { get; public set; }
    public object ColorPalettesTabHeader { get; public set; }
    public DataTemplate ColorPalettesTabHeaderTemplate { get; public set; }
    public bool IsColorPalettesTabVisible { get; public set; }
    public object AdvancedTabHeader { get; public set; }
    public DataTemplate AdvancedTabHeaderTemplate { get; public set; }
    public bool IsAdvancedTabVisible { get; public set; }
    private static ColorPicker();
    public void add_DropDownClosed(EventHandler`1<EventArgs> value);
    public void remove_DropDownClosed(EventHandler`1<EventArgs> value);
    public void add_DropDownOpened(EventHandler`1<EventArgs> value);
    public void remove_DropDownOpened(EventHandler`1<EventArgs> value);
    public double get_DropDownHeight();
    public void set_DropDownHeight(double value);
    public double get_DropDownWidth();
    public void set_DropDownWidth(double value);
    public bool get_IsDropDownOpen();
    public void set_IsDropDownOpen(bool value);
    public DataTemplate get_SelectedColorTemplate();
    public void set_SelectedColorTemplate(DataTemplate value);
    public AddToRecentColorsTrigger get_AddToRecentColorsTrigger();
    public void set_AddToRecentColorsTrigger(AddToRecentColorsTrigger value);
    public bool get_IsAvailableColorPaletteVisible();
    public void set_IsAvailableColorPaletteVisible(bool value);
    public object get_AvailableColorPaletteHeader();
    public void set_AvailableColorPaletteHeader(object value);
    public DataTemplate get_AvailableColorPaletteHeaderTemplate();
    public void set_AvailableColorPaletteHeaderTemplate(DataTemplate value);
    public IEnumerable get_AvailableColorPaletteItemsSource();
    public void set_AvailableColorPaletteItemsSource(IEnumerable value);
    public Style get_AvailableColorPaletteStyle();
    public void set_AvailableColorPaletteStyle(Style value);
    public bool get_IsCustomColorPalette01Visible();
    public void set_IsCustomColorPalette01Visible(bool value);
    public object get_CustomColorPalette01Header();
    public void set_CustomColorPalette01Header(object value);
    public DataTemplate get_CustomColorPalette01HeaderTemplate();
    public void set_CustomColorPalette01HeaderTemplate(DataTemplate value);
    public IEnumerable get_CustomColorPalette01ItemsSource();
    public void set_CustomColorPalette01ItemsSource(IEnumerable value);
    public Style get_CustomColorPalette01Style();
    public void set_CustomColorPalette01Style(Style value);
    public bool get_IsCustomColorPalette02Visible();
    public void set_IsCustomColorPalette02Visible(bool value);
    public object get_CustomColorPalette02Header();
    public void set_CustomColorPalette02Header(object value);
    public DataTemplate get_CustomColorPalette02HeaderTemplate();
    public void set_CustomColorPalette02HeaderTemplate(DataTemplate value);
    public IEnumerable get_CustomColorPalette02ItemsSource();
    public void set_CustomColorPalette02ItemsSource(IEnumerable value);
    public Style get_CustomColorPalette02Style();
    public void set_CustomColorPalette02Style(Style value);
    public bool get_IsRecentColorPaletteVisible();
    public void set_IsRecentColorPaletteVisible(bool value);
    public object get_RecentColorPaletteHeader();
    public void set_RecentColorPaletteHeader(object value);
    public DataTemplate get_RecentColorPaletteHeaderTemplate();
    public void set_RecentColorPaletteHeaderTemplate(DataTemplate value);
    public IEnumerable get_RecentColorPaletteItemsSource();
    public void set_RecentColorPaletteItemsSource(IEnumerable value);
    public Style get_RecentColorPaletteStyle();
    public void set_RecentColorPaletteStyle(Style value);
    public bool get_IsStandardColorPaletteVisible();
    public void set_IsStandardColorPaletteVisible(bool value);
    public object get_StandardColorPaletteHeader();
    public void set_StandardColorPaletteHeader(object value);
    public object get_StandardColorPaletteHeaderTemplate();
    public void set_StandardColorPaletteHeaderTemplate(object value);
    public IEnumerable get_StandardColorPaletteItemsSource();
    public void set_StandardColorPaletteItemsSource(IEnumerable value);
    public Style get_StandardColorPaletteStyle();
    public void set_StandardColorPaletteStyle(Style value);
    public Style get_TabControlStyle();
    public void set_TabControlStyle(Style value);
    public Style get_TabItemStyle();
    public void set_TabItemStyle(Style value);
    public object get_ColorPalettesTabHeader();
    public void set_ColorPalettesTabHeader(object value);
    public DataTemplate get_ColorPalettesTabHeaderTemplate();
    public void set_ColorPalettesTabHeaderTemplate(DataTemplate value);
    public bool get_IsColorPalettesTabVisible();
    public void set_IsColorPalettesTabVisible(bool value);
    public object get_AdvancedTabHeader();
    public void set_AdvancedTabHeader(object value);
    public DataTemplate get_AdvancedTabHeaderTemplate();
    public void set_AdvancedTabHeaderTemplate(DataTemplate value);
    public bool get_IsAdvancedTabVisible();
    public void set_IsAdvancedTabVisible(bool value);
    public virtual void OnApplyTemplate();
    internal virtual void OnSelectedColorChanged(Nullable`1<Color> oldValue, Nullable`1<Color> newValue);
    private void ColorPalette_SelectionChanged(object sender, SelectionChangedEventArgs e);
    private static void OnIsDropDownOpenChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnLostMouseCapture(object sender, MouseEventArgs e);
    private static void OnMouseDown(object sender, MouseButtonEventArgs e);
    private void Close();
    private static void OnIsTabVisiblePropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void ValidateTabItems();
}
[DefaultEventAttribute("SelectedColorChanged")]
public class MahApps.Metro.Controls.ColorPickerBase : Control {
    protected bool ColorIsUpdating;
    protected bool UpdateHsvValues;
    public static DependencyProperty SelectedColorProperty;
    public static DependencyProperty DefaultColorProperty;
    private static DependencyPropertyKey SelectedHSVColorPropertyKey;
    public static DependencyProperty SelectedHSVColorProperty;
    public static DependencyProperty ColorNameProperty;
    public static DependencyProperty ColorNamesDictionaryProperty;
    public static DependencyProperty AProperty;
    public static DependencyProperty RProperty;
    public static DependencyProperty GProperty;
    public static DependencyProperty BProperty;
    public static DependencyProperty HueProperty;
    public static DependencyProperty SaturationProperty;
    public static DependencyProperty ValueProperty;
    public static DependencyProperty LabelAlphaChannelProperty;
    public static DependencyProperty LabelRedChannelProperty;
    public static DependencyProperty LabelGreenChannelProperty;
    public static DependencyProperty LabelBlueChannelProperty;
    public static DependencyProperty LabelColorPreviewProperty;
    public static DependencyProperty LabelHueChannelProperty;
    public static DependencyProperty LabelSaturationChannelProperty;
    public static DependencyProperty LabelValueChannelProperty;
    public static DependencyProperty LabelColorNameProperty;
    public static RoutedEvent SelectedColorChangedEvent;
    public Nullable`1<Color> SelectedColor { get; public set; }
    public Nullable`1<Color> DefaultColor { get; public set; }
    public HSVColor SelectedHSVColor { get; }
    public string ColorName { get; public set; }
    public Dictionary`2<Nullable`1<Color>, string> ColorNamesDictionary { get; public set; }
    public byte A { get; public set; }
    public byte R { get; public set; }
    public byte G { get; public set; }
    public byte B { get; public set; }
    public double Hue { get; public set; }
    public double Saturation { get; public set; }
    public double Value { get; public set; }
    public object LabelAlphaChannel { get; public set; }
    public object LabelRedChannel { get; public set; }
    public object LabelGreenChannel { get; public set; }
    public object LabelBlueChannel { get; public set; }
    public object LabelColorPreview { get; public set; }
    public object LabelHueChannel { get; public set; }
    public object LabelSaturationChannel { get; public set; }
    public object LabelValueChannel { get; public set; }
    public object LabelColorName { get; public set; }
    private static ColorPickerBase();
    private static void OnSelectedColorPropertyChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e);
    private static object CoerceSelectedColorProperty(DependencyObject dependencyObject, object basevalue);
    public Nullable`1<Color> get_SelectedColor();
    public void set_SelectedColor(Nullable`1<Color> value);
    private static void OnDefaultColorPropertyChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e);
    public Nullable`1<Color> get_DefaultColor();
    public void set_DefaultColor(Nullable`1<Color> value);
    public HSVColor get_SelectedHSVColor();
    private static void OnColorNamePropertyChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e);
    public string get_ColorName();
    public void set_ColorName(string value);
    public Dictionary`2<Nullable`1<Color>, string> get_ColorNamesDictionary();
    public void set_ColorNamesDictionary(Dictionary`2<Nullable`1<Color>, string> value);
    public byte get_A();
    public void set_A(byte value);
    public byte get_R();
    public void set_R(byte value);
    public byte get_G();
    public void set_G(byte value);
    public byte get_B();
    public void set_B(byte value);
    private static void OnHSVValuesChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e);
    public double get_Hue();
    public void set_Hue(double value);
    public double get_Saturation();
    public void set_Saturation(double value);
    public double get_Value();
    public void set_Value(double value);
    public object get_LabelAlphaChannel();
    public void set_LabelAlphaChannel(object value);
    public object get_LabelRedChannel();
    public void set_LabelRedChannel(object value);
    public object get_LabelGreenChannel();
    public void set_LabelGreenChannel(object value);
    public object get_LabelBlueChannel();
    public void set_LabelBlueChannel(object value);
    public object get_LabelColorPreview();
    public void set_LabelColorPreview(object value);
    public object get_LabelHueChannel();
    public void set_LabelHueChannel(object value);
    public object get_LabelSaturationChannel();
    public void set_LabelSaturationChannel(object value);
    public object get_LabelValueChannel();
    public void set_LabelValueChannel(object value);
    public object get_LabelColorName();
    public void set_LabelColorName(object value);
    public void add_SelectedColorChanged(RoutedPropertyChangedEventHandler`1<Nullable`1<Color>> value);
    public void remove_SelectedColorChanged(RoutedPropertyChangedEventHandler`1<Nullable`1<Color>> value);
    internal virtual void OnSelectedColorChanged(Nullable`1<Color> oldValue, Nullable`1<Color> newValue);
    internal static void OnColorChannelChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e);
}
public class MahApps.Metro.Controls.ComboBoxHelper : object {
    public static DependencyProperty MaxLengthProperty;
    public static DependencyProperty CharacterCasingProperty;
    private static ComboBoxHelper();
    private static bool ValidateMaxLength(object value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ComboBox")]
public static int GetMaxLength(UIElement obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ComboBox")]
public static void SetMaxLength(UIElement obj, int value);
    private static bool ValidateCharacterCasing(object value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ComboBox")]
public static CharacterCasing GetCharacterCasing(UIElement obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ComboBox")]
public static void SetCharacterCasing(UIElement obj, CharacterCasing value);
}
internal static class MahApps.Metro.Controls.CommandHelpers : object {
    internal static bool CanExecuteCommandSource(ICommandSource commandSource);
    [SecurityCriticalAttribute]
[SecuritySafeCriticalAttribute]
internal static void ExecuteCommandSource(ICommandSource commandSource);
    [SecurityCriticalAttribute]
internal static void CriticalExecuteCommandSource(ICommandSource commandSource);
    internal static bool CanExecuteCommandSource(ICommandSource commandSource, ICommand theCommand);
    [SecurityCriticalAttribute]
[SecuritySafeCriticalAttribute]
internal static void ExecuteCommandSource(ICommandSource commandSource, ICommand theCommand);
    [SecurityCriticalAttribute]
internal static void CriticalExecuteCommandSource(ICommandSource commandSource, ICommand theCommand);
}
public class MahApps.Metro.Controls.ContentControlEx : ContentControl {
    public static DependencyProperty ContentCharacterCasingProperty;
    public static DependencyProperty RecognizesAccessKeyProperty;
    public CharacterCasing ContentCharacterCasing { get; public set; }
    public bool RecognizesAccessKey { get; public set; }
    private static ContentControlEx();
    public CharacterCasing get_ContentCharacterCasing();
    public void set_ContentCharacterCasing(CharacterCasing value);
    public bool get_RecognizesAccessKey();
    public void set_RecognizesAccessKey(bool value);
    protected virtual void OnContentChanged(object oldContent, object newContent);
}
public class MahApps.Metro.Controls.ContentPresenterEx : ContentPresenter {
    private static ContentPresenterEx();
    private static void OnContentPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
}
public static class MahApps.Metro.Controls.ControlsHelper : object {
    public static DependencyProperty DisabledVisualElementVisibilityProperty;
    public static DependencyProperty ContentCharacterCasingProperty;
    public static DependencyProperty RecognizesAccessKeyProperty;
    public static DependencyProperty FocusBorderBrushProperty;
    public static DependencyProperty FocusBorderThicknessProperty;
    public static DependencyProperty MouseOverBorderBrushProperty;
    public static DependencyProperty CornerRadiusProperty;
    public static DependencyProperty IsReadOnlyProperty;
    private static ControlsHelper();
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.Primitives.TextBoxBase")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.PasswordBox")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.NumericUpDown")]
public static Visibility GetDisabledVisualElementVisibility(UIElement element);
    public static void SetDisabledVisualElementVisibility(UIElement element, Visibility value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ContentControl")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.DropDownButton")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.SplitButton")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.WindowCommands")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.ColorPalette")]
public static CharacterCasing GetContentCharacterCasing(UIElement element);
    public static void SetContentCharacterCasing(UIElement element, CharacterCasing value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ContentControl")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.DropDownButton")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.SplitButton")]
public static bool GetRecognizesAccessKey(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ContentControl")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.DropDownButton")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.SplitButton")]
public static void SetRecognizesAccessKey(UIElement element, bool value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TextBox")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.DatePicker")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ComboBox")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.Primitives.ButtonBase")]
public static Brush GetFocusBorderBrush(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TextBox")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.DatePicker")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ComboBox")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.Primitives.ButtonBase")]
public static void SetFocusBorderBrush(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TextBox")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.DatePicker")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ComboBox")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.Primitives.ButtonBase")]
public static Thickness GetFocusBorderThickness(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TextBox")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.DatePicker")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ComboBox")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.Primitives.ButtonBase")]
public static void SetFocusBorderThickness(DependencyObject obj, Thickness value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TextBox")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.DatePicker")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ComboBox")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.Tile")]
public static Brush GetMouseOverBorderBrush(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TextBox")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.CheckBox")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.DatePicker")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ComboBox")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.Tile")]
public static void SetMouseOverBorderBrush(DependencyObject obj, Brush value);
    [CategoryAttribute("MahApps.Metro")]
public static CornerRadius GetCornerRadius(UIElement element);
    public static void SetCornerRadius(UIElement element, CornerRadius value);
    public static bool GetIsReadOnly(UIElement element);
    public static void SetIsReadOnly(UIElement element, bool value);
}
public class MahApps.Metro.Controls.CustomValidationPopup : Popup {
    private Window hostWindow;
    private ScrollViewer scrollViewer;
    private MetroContentControl metroContentControl;
    private TransitioningContentControl transitioningContentControl;
    private Flyout flyout;
    public static DependencyProperty CloseOnMouseLeftButtonDownProperty;
    public static DependencyProperty ShowValidationErrorOnMouseOverProperty;
    public static DependencyProperty AdornedElementProperty;
    private static DependencyPropertyKey CanShowPropertyKey;
    public static DependencyProperty CanShowProperty;
    private Nullable`1<bool> appliedTopMost;
    public bool CloseOnMouseLeftButtonDown { get; public set; }
    public bool ShowValidationErrorOnMouseOver { get; public set; }
    public UIElement AdornedElement { get; public set; }
    public bool CanShow { get; protected set; }
    private static CustomValidationPopup();
    public bool get_CloseOnMouseLeftButtonDown();
    public void set_CloseOnMouseLeftButtonDown(bool value);
    public bool get_ShowValidationErrorOnMouseOver();
    public void set_ShowValidationErrorOnMouseOver(bool value);
    public UIElement get_AdornedElement();
    public void set_AdornedElement(UIElement value);
    public bool get_CanShow();
    protected void set_CanShow(bool value);
    protected virtual void OnPreviewMouseLeftButtonDown(MouseButtonEventArgs e);
    private void CustomValidationPopup_Loaded(object sender, RoutedEventArgs e);
    private void Flyout_OpeningFinished(object sender, RoutedEventArgs e);
    private void Flyout_IsOpenChanged(object sender, RoutedEventArgs e);
    private void Flyout_ClosingFinished(object sender, RoutedEventArgs e);
    private void OnTransitionStarted(object sender, RoutedEventArgs e);
    private void OnTransitionCompleted(object sender, RoutedEventArgs e);
    private void ScrollViewer_ScrollChanged(object sender, ScrollChangedEventArgs e);
    private static bool IsElementVisible(FrameworkElement element, FrameworkElement container);
    private void CustomValidationPopup_Opened(object sender, EventArgs e);
    private void OnHostWindowActivated(object sender, EventArgs e);
    private void OnHostWindowDeactivated(object sender, EventArgs e);
    private void CustomValidationPopup_Unloaded(object sender, RoutedEventArgs e);
    protected virtual void OnLoaded();
    protected virtual void OnUnLoaded();
    private void OnHostWindowStateChanged(object sender, EventArgs e);
    private void OnSizeOrLocationChanged(object sender, EventArgs e);
    private void RefreshPosition();
    private void SetTopmostState(bool isTop);
}
[MarkupExtensionReturnTypeAttribute("MahApps.Metro.Controls.DataGridColumnStylesHelperExtension")]
public class MahApps.Metro.Controls.DataGridColumnStylesHelperExtension : MarkupExtension {
    private WeakReference dataGridReference;
    private DataGrid DataGrid { get; }
    private DataGrid get_DataGrid();
    public sealed virtual void Attach(DataGrid aDataGrid);
    public sealed virtual void Detach();
    private void OnColumnsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    protected virtual void BindColumnStyles(DataGridColumn column);
    protected virtual void ClearColumnStyles(DataGridColumn column);
    protected static void SetBinding(DependencyObject target, DependencyProperty targetDependencyProperty, DependencyObject source, DependencyProperty sourceDependencyProperty);
    protected static void ClearBinding(DependencyObject target, DependencyProperty targetDependencyProperty, DependencyObject source, DependencyProperty sourceDependencyProperty);
    public virtual object ProvideValue(IServiceProvider serviceProvider);
}
public static class MahApps.Metro.Controls.DataGridHelper : object {
    private static DataGrid _suppressComboAutoDropDown;
    public static DependencyProperty AutoGeneratedCheckBoxColumnStyleProperty;
    public static DependencyProperty AutoGeneratedCheckBoxColumnEditingStyleProperty;
    public static DependencyProperty AutoGeneratedTextColumnStyleProperty;
    public static DependencyProperty AutoGeneratedTextColumnEditingStyleProperty;
    public static DependencyProperty AutoGeneratedComboBoxColumnStyleProperty;
    public static DependencyProperty AutoGeneratedComboBoxColumnEditingStyleProperty;
    public static DependencyProperty AutoGeneratedNumericUpDownColumnStyleProperty;
    public static DependencyProperty AutoGeneratedNumericUpDownColumnEditingStyleProperty;
    public static DependencyProperty AutoGeneratedHyperlinkColumnStyleProperty;
    public static DependencyProperty AutoGeneratedHyperlinkColumnEditingStyleProperty;
    public static DependencyProperty CellPaddingProperty;
    public static DependencyProperty ColumnHeaderPaddingProperty;
    public static DependencyProperty EnableCellEditAssistProperty;
    public static DependencyProperty SelectionUnitProperty;
    public static DependencyProperty ColumnStylesHelperProperty;
    private static DataGridHelper();
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.DataGrid")]
public static Style GetAutoGeneratedCheckBoxColumnStyle(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.DataGrid")]
public static void SetAutoGeneratedCheckBoxColumnStyle(UIElement element, Style value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.DataGrid")]
public static Style GetAutoGeneratedCheckBoxColumnEditingStyle(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.DataGrid")]
public static void SetAutoGeneratedCheckBoxColumnEditingStyle(UIElement element, Style value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.DataGrid")]
public static Style GetAutoGeneratedTextColumnStyle(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.DataGrid")]
public static void SetAutoGeneratedTextColumnStyle(UIElement element, Style value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.DataGrid")]
public static Style GetAutoGeneratedTextColumnEditingStyle(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.DataGrid")]
public static void SetAutoGeneratedTextColumnEditingStyle(UIElement element, Style value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.DataGrid")]
public static Style GetAutoGeneratedComboBoxColumnStyle(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.DataGrid")]
public static void SetAutoGeneratedComboBoxColumnStyle(UIElement element, Style value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.DataGrid")]
public static Style GetAutoGeneratedComboBoxColumnEditingStyle(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.DataGrid")]
public static void SetAutoGeneratedComboBoxColumnEditingStyle(UIElement element, Style value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.DataGrid")]
public static Style GetAutoGeneratedNumericUpDownColumnStyle(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.DataGrid")]
public static void SetAutoGeneratedNumericUpDownColumnStyle(UIElement element, Style value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.DataGrid")]
public static Style GetAutoGeneratedNumericUpDownColumnEditingStyle(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.DataGrid")]
public static void SetAutoGeneratedNumericUpDownColumnEditingStyle(UIElement element, Style value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.DataGrid")]
public static Style GetAutoGeneratedHyperlinkColumnStyle(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.DataGrid")]
public static void SetAutoGeneratedHyperlinkColumnStyle(UIElement element, Style value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.DataGrid")]
public static Style GetAutoGeneratedHyperlinkColumnEditingStyle(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.DataGrid")]
public static void SetAutoGeneratedHyperlinkColumnEditingStyle(UIElement element, Style value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.DataGrid")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.DataGridRow")]
public static Thickness GetCellPadding(DependencyObject element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.DataGrid")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.DataGridRow")]
public static void SetCellPadding(DependencyObject element, Thickness value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.DataGrid")]
public static Thickness GetColumnHeaderPadding(DependencyObject element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.DataGrid")]
public static void SetColumnHeaderPadding(DependencyObject element, Thickness value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.DataGrid")]
public static bool GetEnableCellEditAssist(DependencyObject element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.DataGrid")]
public static void SetEnableCellEditAssist(DependencyObject element, bool value);
    private static void EnableCellEditAssistPropertyChangedCallback(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void DataGridOnPreviewMouseLeftButtonDown(object sender, MouseButtonEventArgs e);
    private static void ComboBoxOnDropDownClosed(object sender, EventArgs eventArgs);
    private static bool IsDirectHitOnEditComponent(ContentControl contentControl, MouseEventArgs e, TControl& control);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.DataGridRow")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.DataGridCell")]
public static DataGridSelectionUnit GetSelectionUnit(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.DataGridRow")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.DataGridCell")]
public static void SetSelectionUnit(UIElement element, DataGridSelectionUnit value);
    private static void OnAutoGenerateColumnStylesHelperChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.DataGrid")]
public static IDataGridColumnStylesHelper GetColumnStylesHelper(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.DataGrid")]
public static void SetColumnStylesHelper(UIElement element, IDataGridColumnStylesHelper value);
}
public class MahApps.Metro.Controls.DataGridNumericUpDownColumn : DataGridBoundColumn {
    private static Style _defaultEditingElementStyle;
    private static Style _defaultElementStyle;
    public static DependencyProperty StringFormatProperty;
    public static DependencyProperty CultureProperty;
    public static DependencyProperty TextAlignmentProperty;
    public static DependencyProperty MinimumProperty;
    public static DependencyProperty MaximumProperty;
    public static DependencyProperty NumericInputModeProperty;
    public static DependencyProperty DecimalPointCorrectionProperty;
    public static DependencyProperty IntervalProperty;
    public static DependencyProperty DelayProperty;
    public static DependencyProperty SpeedupProperty;
    public static DependencyProperty SnapToMultipleOfIntervalProperty;
    public static DependencyProperty InterceptArrowKeysProperty;
    public static DependencyProperty InterceptManualEnterProperty;
    public static DependencyProperty InterceptMouseWheelProperty;
    public static DependencyProperty TrackMouseWheelWhenMouseOverProperty;
    public static DependencyProperty HideUpDownButtonsProperty;
    public static DependencyProperty SwitchUpDownButtonsProperty;
    public static DependencyProperty ButtonsAlignmentProperty;
    public static DependencyProperty UpDownButtonsWidthProperty;
    public static DependencyProperty FontFamilyProperty;
    public static DependencyProperty FontSizeProperty;
    public static DependencyProperty FontStyleProperty;
    public static DependencyProperty FontWeightProperty;
    public static DependencyProperty ForegroundProperty;
    public static Style DefaultEditingElementStyle { get; }
    public static Style DefaultElementStyle { get; }
    public string StringFormat { get; public set; }
    public CultureInfo Culture { get; public set; }
    public TextAlignment TextAlignment { get; public set; }
    public double Minimum { get; public set; }
    public double Maximum { get; public set; }
    public NumericInput NumericInputMode { get; public set; }
    public DecimalPointCorrectionMode DecimalPointCorrection { get; public set; }
    public double Interval { get; public set; }
    public int Delay { get; public set; }
    public bool Speedup { get; public set; }
    public bool SnapToMultipleOfInterval { get; public set; }
    public bool InterceptArrowKeys { get; public set; }
    public bool InterceptManualEnter { get; public set; }
    public bool InterceptMouseWheel { get; public set; }
    public bool TrackMouseWheelWhenMouseOver { get; public set; }
    public bool HideUpDownButtons { get; public set; }
    public bool SwitchUpDownButtons { get; public set; }
    public ButtonsAlignment ButtonsAlignment { get; public set; }
    public double UpDownButtonsWidth { get; public set; }
    public FontFamily FontFamily { get; public set; }
    [TypeConverterAttribute("System.Windows.FontSizeConverter")]
[LocalizabilityAttribute]
public double FontSize { get; public set; }
    public FontStyle FontStyle { get; public set; }
    public FontWeight FontWeight { get; public set; }
    public Brush Foreground { get; public set; }
    private static DataGridNumericUpDownColumn();
    public static Style get_DefaultEditingElementStyle();
    public static Style get_DefaultElementStyle();
    private static void ApplyBinding(BindingBase binding, DependencyObject target, DependencyProperty property);
    private void ApplyStyle(bool isEditing, bool defaultToElementStyle, FrameworkElement element);
    protected virtual FrameworkElement GenerateEditingElement(DataGridCell cell, object dataItem);
    protected virtual FrameworkElement GenerateElement(DataGridCell cell, object dataItem);
    private NumericUpDown GenerateNumericUpDown(bool isEditing, DataGridCell cell);
    protected virtual object PrepareCellForEdit(FrameworkElement editingElement, RoutedEventArgs editingEventArgs);
    internal static bool SyncColumnProperty(DependencyObject column, DependencyObject content, DependencyProperty columnProperty, DependencyProperty contentProperty);
    private static bool IsDefaultValue(DependencyObject d, DependencyProperty dp);
    private Style PickStyle(bool isEditing, bool defaultToElementStyle);
    public string get_StringFormat();
    public void set_StringFormat(string value);
    public CultureInfo get_Culture();
    public void set_Culture(CultureInfo value);
    public TextAlignment get_TextAlignment();
    public void set_TextAlignment(TextAlignment value);
    public double get_Minimum();
    public void set_Minimum(double value);
    public double get_Maximum();
    public void set_Maximum(double value);
    public NumericInput get_NumericInputMode();
    public void set_NumericInputMode(NumericInput value);
    public DecimalPointCorrectionMode get_DecimalPointCorrection();
    public void set_DecimalPointCorrection(DecimalPointCorrectionMode value);
    public double get_Interval();
    public void set_Interval(double value);
    public int get_Delay();
    public void set_Delay(int value);
    public bool get_Speedup();
    public void set_Speedup(bool value);
    public bool get_SnapToMultipleOfInterval();
    public void set_SnapToMultipleOfInterval(bool value);
    public bool get_InterceptArrowKeys();
    public void set_InterceptArrowKeys(bool value);
    public bool get_InterceptManualEnter();
    public void set_InterceptManualEnter(bool value);
    public bool get_InterceptMouseWheel();
    public void set_InterceptMouseWheel(bool value);
    public bool get_TrackMouseWheelWhenMouseOver();
    public void set_TrackMouseWheelWhenMouseOver(bool value);
    public bool get_HideUpDownButtons();
    public void set_HideUpDownButtons(bool value);
    public bool get_SwitchUpDownButtons();
    public void set_SwitchUpDownButtons(bool value);
    public ButtonsAlignment get_ButtonsAlignment();
    public void set_ButtonsAlignment(ButtonsAlignment value);
    public double get_UpDownButtonsWidth();
    public void set_UpDownButtonsWidth(double value);
    public FontFamily get_FontFamily();
    public void set_FontFamily(FontFamily value);
    public double get_FontSize();
    public void set_FontSize(double value);
    public FontStyle get_FontStyle();
    public void set_FontStyle(FontStyle value);
    public FontWeight get_FontWeight();
    public void set_FontWeight(FontWeight value);
    public Brush get_Foreground();
    public void set_Foreground(Brush value);
    private static void NotifyPropertyChangeForRefreshContent(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void RefreshCellContent(FrameworkElement element, string propertyName);
}
public static class MahApps.Metro.Controls.DatePickerHelper : object {
    public static DependencyProperty DropDownButtonContentProperty;
    public static DependencyProperty DropDownButtonContentTemplateProperty;
    public static DependencyProperty DropDownButtonFontFamilyProperty;
    public static DependencyProperty DropDownButtonFontSizeProperty;
    private static DatePickerHelper();
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.DatePicker")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.TimePickerBase")]
public static object GetDropDownButtonContent(DependencyObject d);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.DatePicker")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.TimePickerBase")]
public static void SetDropDownButtonContent(DependencyObject obj, object value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.DatePicker")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.TimePickerBase")]
public static DataTemplate GetDropDownButtonContentTemplate(DependencyObject d);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.DatePicker")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.TimePickerBase")]
public static void SetDropDownButtonContentTemplate(DependencyObject obj, DataTemplate value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.DatePicker")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.TimePickerBase")]
public static FontFamily GetDropDownButtonFontFamily(DependencyObject d);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.DatePicker")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.TimePickerBase")]
public static void SetDropDownButtonFontFamily(DependencyObject obj, FontFamily value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.DatePicker")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.TimePickerBase")]
public static double GetDropDownButtonFontSize(DependencyObject d);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.DatePicker")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.TimePickerBase")]
public static void SetDropDownButtonFontSize(DependencyObject obj, double value);
}
[TemplatePartAttribute]
[TemplatePartAttribute]
[StyleTypedPropertyAttribute]
public class MahApps.Metro.Controls.DateTimePicker : TimePickerBase {
    private static string PART_PopupContainer;
    private static string PART_Calendar;
    private FrameworkElement popupContainer;
    private ContentPresenter popupCalendarPresenter;
    private Calendar calendar;
    public static DependencyProperty DisplayDateEndProperty;
    public static DependencyProperty DisplayDateProperty;
    public static DependencyProperty DisplayDateStartProperty;
    public static DependencyProperty FirstDayOfWeekProperty;
    public static DependencyProperty IsTodayHighlightedProperty;
    public static DependencyProperty SelectedDateFormatProperty;
    public static DependencyProperty OrientationProperty;
    public static DependencyProperty CalendarStyleProperty;
    public Nullable`1<DateTime> DisplayDateEnd { get; public set; }
    public DateTime DisplayDate { get; public set; }
    public Nullable`1<DateTime> DisplayDateStart { get; public set; }
    public DayOfWeek FirstDayOfWeek { get; public set; }
    public bool IsTodayHighlighted { get; public set; }
    [CategoryAttribute("Appearance")]
[DefaultValueAttribute]
public DatePickerFormat SelectedDateFormat { get; public set; }
    [CategoryAttribute("Layout")]
public Orientation Orientation { get; public set; }
    public Style CalendarStyle { get; public set; }
    public CalendarBlackoutDatesCollection BlackoutDates { get; }
    private static DateTimePicker();
    public Nullable`1<DateTime> get_DisplayDateEnd();
    public void set_DisplayDateEnd(Nullable`1<DateTime> value);
    public DateTime get_DisplayDate();
    public void set_DisplayDate(DateTime value);
    public Nullable`1<DateTime> get_DisplayDateStart();
    public void set_DisplayDateStart(Nullable`1<DateTime> value);
    public DayOfWeek get_FirstDayOfWeek();
    public void set_FirstDayOfWeek(DayOfWeek value);
    public bool get_IsTodayHighlighted();
    public void set_IsTodayHighlighted(bool value);
    public DatePickerFormat get_SelectedDateFormat();
    public void set_SelectedDateFormat(DatePickerFormat value);
    public Orientation get_Orientation();
    public void set_Orientation(Orientation value);
    public Style get_CalendarStyle();
    public void set_CalendarStyle(Style value);
    public CalendarBlackoutDatesCollection get_BlackoutDates();
    protected virtual void FocusElementAfterIsDropDownOpenChanged();
    private void InitializeCalendar();
    public virtual void OnApplyTemplate();
    private static void CalendarPreviewMouseUp(object sender, MouseButtonEventArgs e);
    private void CalendarDisplayDateChanged(object sender, CalendarDateChangedEventArgs e);
    private void CalendarPreviewKeyDown(object sender, RoutedEventArgs e);
    protected virtual void OnPopUpOpened();
    protected virtual void OnPopUpClosed();
    private static void OnSelectedDateFormatChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void ApplyCulture();
    protected virtual string GetValueForTextBox();
    protected virtual void SetSelectedDateTime();
    private static object CoerceOrientation(DependencyObject d, object basevalue);
    private static void OnClockVisibilityChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void CalendarSelectedDateChanged(object sender, SelectionChangedEventArgs e);
    protected virtual void OnSelectedDateTimeChanged(Nullable`1<DateTime> oldValue, Nullable`1<DateTime> newValue);
    private Nullable`1<DateTime> GetSelectedDateTimeFromGUI();
    [CompilerGeneratedAttribute]
private void <FocusElementAfterIsDropDownOpenChanged>b__41_0();
}
public enum MahApps.Metro.Controls.DecimalPointCorrectionMode : Enum {
    public int value__;
    public static DecimalPointCorrectionMode Inherits;
    public static DecimalPointCorrectionMode Number;
    public static DecimalPointCorrectionMode Currency;
    public static DecimalPointCorrectionMode Percent;
}
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
public abstract class MahApps.Metro.Controls.Dialogs.BaseMetroDialog : ContentControl {
    private static string PART_Top;
    private static string PART_Content;
    private static string PART_Bottom;
    public static DependencyProperty DialogContentMarginProperty;
    public static DependencyProperty DialogContentWidthProperty;
    public static DependencyProperty TitleProperty;
    public static DependencyProperty DialogTopProperty;
    public static DependencyProperty DialogBottomProperty;
    public static DependencyProperty DialogTitleFontSizeProperty;
    public static DependencyProperty DialogMessageFontSizeProperty;
    public static DependencyProperty DialogButtonFontSizeProperty;
    [CompilerGeneratedAttribute]
private MetroDialogSettings <DialogSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private SizeChangedEventHandler <SizeChangedHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private Window <ParentDialogWindow>k__BackingField;
    [CompilerGeneratedAttribute]
private MetroWindow <OwningWindow>k__BackingField;
    public GridLength DialogContentMargin { get; public set; }
    public GridLength DialogContentWidth { get; public set; }
    public string Title { get; public set; }
    public object DialogTop { get; public set; }
    public object DialogBottom { get; public set; }
    public double DialogTitleFontSize { get; public set; }
    public double DialogMessageFontSize { get; public set; }
    public double DialogButtonFontSize { get; public set; }
    public MetroDialogSettings DialogSettings { get; private set; }
    internal SizeChangedEventHandler SizeChangedHandler { get; internal set; }
    protected IEnumerator LogicalChildren { get; }
    protected internal Window ParentDialogWindow { get; internal set; }
    protected internal MetroWindow OwningWindow { get; internal set; }
    private static BaseMetroDialog();
    protected BaseMetroDialog(MetroWindow owningWindow, MetroDialogSettings settings);
    public GridLength get_DialogContentMargin();
    public void set_DialogContentMargin(GridLength value);
    public GridLength get_DialogContentWidth();
    public void set_DialogContentWidth(GridLength value);
    public string get_Title();
    public void set_Title(string value);
    public object get_DialogTop();
    public void set_DialogTop(object value);
    public object get_DialogBottom();
    public void set_DialogBottom(object value);
    public double get_DialogTitleFontSize();
    public void set_DialogTitleFontSize(double value);
    public double get_DialogMessageFontSize();
    public void set_DialogMessageFontSize(double value);
    public double get_DialogButtonFontSize();
    public void set_DialogButtonFontSize(double value);
    [CompilerGeneratedAttribute]
public MetroDialogSettings get_DialogSettings();
    [CompilerGeneratedAttribute]
private void set_DialogSettings(MetroDialogSettings value);
    [CompilerGeneratedAttribute]
internal SizeChangedEventHandler get_SizeChangedHandler();
    [CompilerGeneratedAttribute]
internal void set_SizeChangedHandler(SizeChangedEventHandler value);
    private static void UpdateLogicalChild(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e);
    protected virtual IEnumerator get_LogicalChildren();
    protected virtual MetroDialogSettings ConfigureSettings(MetroDialogSettings settings);
    private void Initialize(MetroWindow owningWindow, MetroDialogSettings settings);
    private void BaseMetroDialogDataContextChanged(object sender, DependencyPropertyChangedEventArgs e);
    private void BaseMetroDialogLoaded(object sender, RoutedEventArgs e);
    private void BaseMetroDialogUnloaded(object sender, RoutedEventArgs e);
    private void ThemeManagerIsThemeChanged(object sender, ThemeChangedEventArgs e);
    private static object TryGetResource(Theme theme, string key);
    internal void HandleThemeChange();
    protected virtual void OnLoaded();
    private static Theme DetectTheme(BaseMetroDialog dialog);
    public Task WaitForLoadAsync();
    public Task RequestCloseAsync();
    protected internal virtual void OnShown();
    protected internal virtual void OnClose();
    protected internal virtual bool OnRequestClose();
    [CompilerGeneratedAttribute]
protected internal Window get_ParentDialogWindow();
    [CompilerGeneratedAttribute]
internal void set_ParentDialogWindow(Window value);
    [CompilerGeneratedAttribute]
protected internal MetroWindow get_OwningWindow();
    [CompilerGeneratedAttribute]
internal void set_OwningWindow(MetroWindow value);
    public Task WaitUntilUnloadedAsync();
    public Task WaitForCloseAsync();
    protected virtual AutomationPeer OnCreateAutomationPeer();
    [CompilerGeneratedAttribute]
private void <RequestCloseAsync>b__60_1(Task x);
    [CompilerGeneratedAttribute]
private void <RequestCloseAsync>b__60_3();
}
public class MahApps.Metro.Controls.Dialogs.CustomDialog : BaseMetroDialog {
    public CustomDialog(MetroWindow parentWindow);
    public CustomDialog(MetroDialogSettings settings);
    public CustomDialog(MetroWindow parentWindow, MetroDialogSettings settings);
}
public class MahApps.Metro.Controls.Dialogs.DialogCoordinator : object {
    public static IDialogCoordinator Instance;
    private static DialogCoordinator();
    public sealed virtual Task`1<string> ShowInputAsync(object context, string title, string message, MetroDialogSettings settings);
    public sealed virtual string ShowModalInputExternal(object context, string title, string message, MetroDialogSettings metroDialogSettings);
    public sealed virtual Task`1<LoginDialogData> ShowLoginAsync(object context, string title, string message, LoginDialogSettings settings);
    public sealed virtual LoginDialogData ShowModalLoginExternal(object context, string title, string message, LoginDialogSettings settings);
    public sealed virtual Task`1<MessageDialogResult> ShowMessageAsync(object context, string title, string message, MessageDialogStyle style, MetroDialogSettings settings);
    public sealed virtual MessageDialogResult ShowModalMessageExternal(object context, string title, string message, MessageDialogStyle style, MetroDialogSettings settings);
    public sealed virtual Task`1<ProgressDialogController> ShowProgressAsync(object context, string title, string message, bool isCancelable, MetroDialogSettings settings);
    public sealed virtual Task ShowMetroDialogAsync(object context, BaseMetroDialog dialog, MetroDialogSettings settings);
    public sealed virtual Task HideMetroDialogAsync(object context, BaseMetroDialog dialog, MetroDialogSettings settings);
    public sealed virtual Task`1<TDialog> GetCurrentDialogAsync(object context);
    private static MetroWindow GetMetroWindow(object context);
}
[ExtensionAttribute]
public static class MahApps.Metro.Controls.Dialogs.DialogManager : object {
    [CompilerGeneratedAttribute]
private static EventHandler`1<DialogStateChangedEventArgs> DialogOpened;
    [CompilerGeneratedAttribute]
private static EventHandler`1<DialogStateChangedEventArgs> DialogClosed;
    [ExtensionAttribute]
public static Task`1<LoginDialogData> ShowLoginAsync(MetroWindow window, string title, string message, LoginDialogSettings settings);
    [ExtensionAttribute]
public static Task`1<string> ShowInputAsync(MetroWindow window, string title, string message, MetroDialogSettings settings);
    [ExtensionAttribute]
public static Task`1<MessageDialogResult> ShowMessageAsync(MetroWindow window, string title, string message, MessageDialogStyle style, MetroDialogSettings settings);
    [ExtensionAttribute]
public static Task`1<ProgressDialogController> ShowProgressAsync(MetroWindow window, string title, string message, bool isCancelable, MetroDialogSettings settings);
    private static Task HandleOverlayOnHide(MetroDialogSettings settings, MetroWindow window);
    private static Task HandleOverlayOnShow(MetroDialogSettings settings, MetroWindow window);
    [ExtensionAttribute]
public static Task ShowMetroDialogAsync(MetroWindow window, BaseMetroDialog dialog, MetroDialogSettings settings);
    [ExtensionAttribute]
public static Task`1<TDialog> ShowMetroDialogAsync(MetroWindow window, MetroDialogSettings settings);
    [ExtensionAttribute]
public static Task HideMetroDialogAsync(MetroWindow window, BaseMetroDialog dialog, MetroDialogSettings settings);
    [ExtensionAttribute]
public static Task`1<TDialog> GetCurrentDialogAsync(MetroWindow window);
    private static SizeChangedEventHandler SetupAndOpenDialog(MetroWindow window, BaseMetroDialog dialog);
    [ExtensionAttribute]
private static void AddDialog(MetroWindow window, BaseMetroDialog dialog);
    [ExtensionAttribute]
private static void RemoveDialog(MetroWindow window, BaseMetroDialog dialog);
    [ExtensionAttribute]
public static TDialog ShowDialogExternally(TDialog dialog, Window windowOwner, Action`1<Window> handleExternalDialogWindow);
    [ExtensionAttribute]
public static TDialog ShowModalDialogExternally(TDialog dialog, Window windowOwner, Action`1<Window> handleExternalDialogWindow);
    private static MetroWindow CreateExternalWindow(Window windowOwner);
    private static MetroWindow SetupExternalDialogWindow(BaseMetroDialog dialog, Window windowOwner);
    private static MetroWindow CreateModalExternalWindow(MetroWindow windowOwner);
    [ExtensionAttribute]
public static LoginDialogData ShowModalLoginExternal(MetroWindow window, string title, string message, LoginDialogSettings settings);
    [ExtensionAttribute]
public static string ShowModalInputExternal(MetroWindow window, string title, string message, MetroDialogSettings settings);
    [ExtensionAttribute]
public static MessageDialogResult ShowModalMessageExternal(MetroWindow window, string title, string message, MessageDialogStyle style, MetroDialogSettings settings);
    private static void SetDialogFontSizes(MetroDialogSettings settings, BaseMetroDialog dialog);
    [CompilerGeneratedAttribute]
public static void add_DialogOpened(EventHandler`1<DialogStateChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_DialogOpened(EventHandler`1<DialogStateChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public static void add_DialogClosed(EventHandler`1<DialogStateChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_DialogClosed(EventHandler`1<DialogStateChangedEventArgs> value);
}
public static class MahApps.Metro.Controls.Dialogs.DialogParticipation : object {
    private static IDictionary`2<object, DependencyObject> ContextRegistrationIndex;
    public static DependencyProperty RegisterProperty;
    private static DialogParticipation();
    private static void RegisterPropertyChangedCallback(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs dependencyPropertyChangedEventArgs);
    public static void SetRegister(DependencyObject element, object context);
    public static object GetRegister(DependencyObject element);
    internal static bool IsRegistered(object context);
    internal static DependencyObject GetAssociation(object context);
}
public class MahApps.Metro.Controls.Dialogs.DialogStateChangedEventArgs : EventArgs {
}
public interface MahApps.Metro.Controls.Dialogs.IDialogCoordinator {
    public abstract virtual Task`1<string> ShowInputAsync(object context, string title, string message, MetroDialogSettings settings);
    public abstract virtual string ShowModalInputExternal(object context, string title, string message, MetroDialogSettings settings);
    public abstract virtual Task`1<LoginDialogData> ShowLoginAsync(object context, string title, string message, LoginDialogSettings settings);
    public abstract virtual LoginDialogData ShowModalLoginExternal(object context, string title, string message, LoginDialogSettings settings);
    public abstract virtual Task`1<MessageDialogResult> ShowMessageAsync(object context, string title, string message, MessageDialogStyle style, MetroDialogSettings settings);
    public abstract virtual MessageDialogResult ShowModalMessageExternal(object context, string title, string message, MessageDialogStyle style, MetroDialogSettings settings);
    public abstract virtual Task`1<ProgressDialogController> ShowProgressAsync(object context, string title, string message, bool isCancelable, MetroDialogSettings settings);
    public abstract virtual Task ShowMetroDialogAsync(object context, BaseMetroDialog dialog, MetroDialogSettings settings);
    public abstract virtual Task HideMetroDialogAsync(object context, BaseMetroDialog dialog, MetroDialogSettings settings);
    public abstract virtual Task`1<TDialog> GetCurrentDialogAsync(object context);
}
public class MahApps.Metro.Controls.Dialogs.InputDialog : BaseMetroDialog {
    private CancellationTokenRegistration cancellationTokenRegistration;
    public static DependencyProperty MessageProperty;
    public static DependencyProperty InputProperty;
    public static DependencyProperty AffirmativeButtonTextProperty;
    public static DependencyProperty NegativeButtonTextProperty;
    internal TextBox PART_TextBox;
    internal Button PART_AffirmativeButton;
    internal Button PART_NegativeButton;
    private bool _contentLoaded;
    public string Message { get; public set; }
    public string Input { get; public set; }
    public string AffirmativeButtonText { get; public set; }
    public string NegativeButtonText { get; public set; }
    internal InputDialog(MetroWindow parentWindow);
    internal InputDialog(MetroWindow parentWindow, MetroDialogSettings settings);
    private static InputDialog();
    public string get_Message();
    public void set_Message(string value);
    public string get_Input();
    public void set_Input(string value);
    public string get_AffirmativeButtonText();
    public void set_AffirmativeButtonText(string value);
    public string get_NegativeButtonText();
    public void set_NegativeButtonText(string value);
    internal Task`1<string> WaitForButtonPressAsync();
    protected virtual void OnLoaded();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "5.0.17.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "5.0.17.0")]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "5.0.17.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class MahApps.Metro.Controls.Dialogs.LoginDialog : BaseMetroDialog {
    private CancellationTokenRegistration cancellationTokenRegistration;
    public static DependencyProperty MessageProperty;
    public static DependencyProperty UsernameProperty;
    public static DependencyProperty UsernameWatermarkProperty;
    public static DependencyProperty UsernameCharacterCasingProperty;
    public static DependencyProperty PasswordProperty;
    public static DependencyProperty PasswordWatermarkProperty;
    public static DependencyProperty AffirmativeButtonTextProperty;
    public static DependencyProperty NegativeButtonTextProperty;
    public static DependencyProperty NegativeButtonButtonVisibilityProperty;
    public static DependencyProperty ShouldHideUsernameProperty;
    public static DependencyProperty RememberCheckBoxVisibilityProperty;
    public static DependencyProperty RememberCheckBoxTextProperty;
    public static DependencyProperty RememberCheckBoxCheckedProperty;
    internal TextBox PART_TextBox;
    internal PasswordBox PART_TextBox2;
    internal CheckBox PART_RememberCheckBox;
    internal Button PART_AffirmativeButton;
    internal Button PART_NegativeButton;
    private bool _contentLoaded;
    public string Message { get; public set; }
    public string Username { get; public set; }
    public string UsernameWatermark { get; public set; }
    public CharacterCasing UsernameCharacterCasing { get; public set; }
    public string Password { get; public set; }
    public string PasswordWatermark { get; public set; }
    public string AffirmativeButtonText { get; public set; }
    public string NegativeButtonText { get; public set; }
    public Visibility NegativeButtonButtonVisibility { get; public set; }
    public bool ShouldHideUsername { get; public set; }
    public Visibility RememberCheckBoxVisibility { get; public set; }
    public string RememberCheckBoxText { get; public set; }
    public bool RememberCheckBoxChecked { get; public set; }
    internal LoginDialog(MetroWindow parentWindow);
    internal LoginDialog(MetroWindow parentWindow, LoginDialogSettings settings);
    private static LoginDialog();
    public string get_Message();
    public void set_Message(string value);
    public string get_Username();
    public void set_Username(string value);
    public string get_UsernameWatermark();
    public void set_UsernameWatermark(string value);
    public CharacterCasing get_UsernameCharacterCasing();
    public void set_UsernameCharacterCasing(CharacterCasing value);
    public string get_Password();
    public void set_Password(string value);
    public string get_PasswordWatermark();
    public void set_PasswordWatermark(string value);
    public string get_AffirmativeButtonText();
    public void set_AffirmativeButtonText(string value);
    public string get_NegativeButtonText();
    public void set_NegativeButtonText(string value);
    public Visibility get_NegativeButtonButtonVisibility();
    public void set_NegativeButtonButtonVisibility(Visibility value);
    public bool get_ShouldHideUsername();
    public void set_ShouldHideUsername(bool value);
    public Visibility get_RememberCheckBoxVisibility();
    public void set_RememberCheckBoxVisibility(Visibility value);
    public string get_RememberCheckBoxText();
    public void set_RememberCheckBoxText(string value);
    public bool get_RememberCheckBoxChecked();
    public void set_RememberCheckBoxChecked(bool value);
    internal Task`1<LoginDialogData> WaitForButtonPressAsync();
    protected virtual void OnLoaded();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "5.0.17.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "5.0.17.0")]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "5.0.17.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class MahApps.Metro.Controls.Dialogs.LoginDialogData : object {
    [CompilerGeneratedAttribute]
private string <Username>k__BackingField;
    [CompilerGeneratedAttribute]
private SecureString <SecurePassword>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldRemember>k__BackingField;
    public string Username { get; internal set; }
    public string Password { get; }
    public SecureString SecurePassword { get; internal set; }
    public bool ShouldRemember { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_Username();
    [CompilerGeneratedAttribute]
internal void set_Username(string value);
    [SecurityCriticalAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public SecureString get_SecurePassword();
    [CompilerGeneratedAttribute]
internal void set_SecurePassword(SecureString value);
    [CompilerGeneratedAttribute]
public bool get_ShouldRemember();
    [CompilerGeneratedAttribute]
internal void set_ShouldRemember(bool value);
}
public class MahApps.Metro.Controls.Dialogs.LoginDialogSettings : MetroDialogSettings {
    private static string DefaultUsernameWatermark;
    private static string DefaultPasswordWatermark;
    private static string DefaultRememberCheckBoxText;
    [CompilerGeneratedAttribute]
private string <InitialUsername>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InitialPassword>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UsernameWatermark>k__BackingField;
    [CompilerGeneratedAttribute]
private CharacterCasing <UsernameCharacterCasing>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldHideUsername>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PasswordWatermark>k__BackingField;
    [CompilerGeneratedAttribute]
private Visibility <NegativeButtonVisibility>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnablePasswordPreview>k__BackingField;
    [CompilerGeneratedAttribute]
private Visibility <RememberCheckBoxVisibility>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RememberCheckBoxText>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RememberCheckBoxChecked>k__BackingField;
    public string InitialUsername { get; public set; }
    public string InitialPassword { get; public set; }
    public string UsernameWatermark { get; public set; }
    public CharacterCasing UsernameCharacterCasing { get; public set; }
    public bool ShouldHideUsername { get; public set; }
    public string PasswordWatermark { get; public set; }
    public Visibility NegativeButtonVisibility { get; public set; }
    public bool EnablePasswordPreview { get; public set; }
    public Visibility RememberCheckBoxVisibility { get; public set; }
    public string RememberCheckBoxText { get; public set; }
    public bool RememberCheckBoxChecked { get; public set; }
    [CompilerGeneratedAttribute]
public string get_InitialUsername();
    [CompilerGeneratedAttribute]
public void set_InitialUsername(string value);
    [CompilerGeneratedAttribute]
public string get_InitialPassword();
    [CompilerGeneratedAttribute]
public void set_InitialPassword(string value);
    [CompilerGeneratedAttribute]
public string get_UsernameWatermark();
    [CompilerGeneratedAttribute]
public void set_UsernameWatermark(string value);
    [CompilerGeneratedAttribute]
public CharacterCasing get_UsernameCharacterCasing();
    [CompilerGeneratedAttribute]
public void set_UsernameCharacterCasing(CharacterCasing value);
    [CompilerGeneratedAttribute]
public bool get_ShouldHideUsername();
    [CompilerGeneratedAttribute]
public void set_ShouldHideUsername(bool value);
    [CompilerGeneratedAttribute]
public string get_PasswordWatermark();
    [CompilerGeneratedAttribute]
public void set_PasswordWatermark(string value);
    [CompilerGeneratedAttribute]
public Visibility get_NegativeButtonVisibility();
    [CompilerGeneratedAttribute]
public void set_NegativeButtonVisibility(Visibility value);
    [CompilerGeneratedAttribute]
public bool get_EnablePasswordPreview();
    [CompilerGeneratedAttribute]
public void set_EnablePasswordPreview(bool value);
    [CompilerGeneratedAttribute]
public Visibility get_RememberCheckBoxVisibility();
    [CompilerGeneratedAttribute]
public void set_RememberCheckBoxVisibility(Visibility value);
    [CompilerGeneratedAttribute]
public string get_RememberCheckBoxText();
    [CompilerGeneratedAttribute]
public void set_RememberCheckBoxText(string value);
    [CompilerGeneratedAttribute]
public bool get_RememberCheckBoxChecked();
    [CompilerGeneratedAttribute]
public void set_RememberCheckBoxChecked(bool value);
}
public class MahApps.Metro.Controls.Dialogs.MessageDialog : BaseMetroDialog {
    private static string ACCENT_BUTTON_STYLE;
    private static string ACCENT_HIGHLIGHT_BUTTON_STYLE;
    private CancellationTokenRegistration cancellationTokenRegistration;
    public static DependencyProperty MessageProperty;
    public static DependencyProperty AffirmativeButtonTextProperty;
    public static DependencyProperty NegativeButtonTextProperty;
    public static DependencyProperty FirstAuxiliaryButtonTextProperty;
    public static DependencyProperty SecondAuxiliaryButtonTextProperty;
    public static DependencyProperty ButtonStyleProperty;
    internal ScrollViewer PART_MessageScrollViewer;
    internal TextBlock PART_MessageTextBlock;
    internal Button PART_AffirmativeButton;
    internal Button PART_NegativeButton;
    internal Button PART_FirstAuxiliaryButton;
    internal Button PART_SecondAuxiliaryButton;
    private bool _contentLoaded;
    public string Message { get; public set; }
    public string AffirmativeButtonText { get; public set; }
    public string NegativeButtonText { get; public set; }
    public string FirstAuxiliaryButtonText { get; public set; }
    public string SecondAuxiliaryButtonText { get; public set; }
    public MessageDialogStyle ButtonStyle { get; public set; }
    internal MessageDialog(MetroWindow parentWindow);
    internal MessageDialog(MetroWindow parentWindow, MetroDialogSettings settings);
    private static MessageDialog();
    public string get_Message();
    public void set_Message(string value);
    public string get_AffirmativeButtonText();
    public void set_AffirmativeButtonText(string value);
    public string get_NegativeButtonText();
    public void set_NegativeButtonText(string value);
    public string get_FirstAuxiliaryButtonText();
    public void set_FirstAuxiliaryButtonText(string value);
    public string get_SecondAuxiliaryButtonText();
    public void set_SecondAuxiliaryButtonText(string value);
    private static void ButtonStylePropertyChangedCallback(DependencyObject o, DependencyPropertyChangedEventArgs e);
    public MessageDialogStyle get_ButtonStyle();
    public void set_ButtonStyle(MessageDialogStyle value);
    internal Task`1<MessageDialogResult> WaitForButtonPressAsync();
    private static void SetButtonState(MessageDialog md);
    protected virtual void OnLoaded();
    private void OnKeyCopyExecuted(object sender, ExecutedRoutedEventArgs e);
    private bool IsApplicable(MessageDialogResult value);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "5.0.17.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "5.0.17.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public enum MahApps.Metro.Controls.Dialogs.MessageDialogResult : Enum {
    public int value__;
    public static MessageDialogResult Canceled;
    public static MessageDialogResult Negative;
    public static MessageDialogResult Affirmative;
    public static MessageDialogResult FirstAuxiliary;
    public static MessageDialogResult SecondAuxiliary;
}
public enum MahApps.Metro.Controls.Dialogs.MessageDialogStyle : Enum {
    public int value__;
    public static MessageDialogStyle Affirmative;
    public static MessageDialogStyle AffirmativeAndNegative;
    public static MessageDialogStyle AffirmativeAndNegativeAndSingleAuxiliary;
    public static MessageDialogStyle AffirmativeAndNegativeAndDoubleAuxiliary;
}
public enum MahApps.Metro.Controls.Dialogs.MetroDialogColorScheme : Enum {
    public int value__;
    public static MetroDialogColorScheme Theme;
    public static MetroDialogColorScheme Accented;
    public static MetroDialogColorScheme Inverted;
}
public class MahApps.Metro.Controls.Dialogs.MetroDialogSettings : object {
    [CompilerGeneratedAttribute]
private bool <OwnerCanCloseWithDialog>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AffirmativeButtonText>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AnimateHide>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AnimateShow>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    [CompilerGeneratedAttribute]
private MetroDialogColorScheme <ColorScheme>k__BackingField;
    [CompilerGeneratedAttribute]
private ResourceDictionary <CustomResourceDictionary>k__BackingField;
    [CompilerGeneratedAttribute]
private MessageDialogResult <DefaultButtonFocus>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultText>k__BackingField;
    [CompilerGeneratedAttribute]
private double <DialogMessageFontSize>k__BackingField;
    [CompilerGeneratedAttribute]
private double <DialogButtonFontSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<MessageDialogResult> <DialogResultOnCancel>k__BackingField;
    [CompilerGeneratedAttribute]
private double <DialogTitleFontSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FirstAuxiliaryButtonText>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MaximumBodyHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NegativeButtonText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SecondAuxiliaryButtonText>k__BackingField;
    public bool OwnerCanCloseWithDialog { get; public set; }
    public string AffirmativeButtonText { get; public set; }
    public bool AnimateHide { get; public set; }
    public bool AnimateShow { get; public set; }
    public CancellationToken CancellationToken { get; public set; }
    public MetroDialogColorScheme ColorScheme { get; public set; }
    public ResourceDictionary CustomResourceDictionary { get; public set; }
    public MessageDialogResult DefaultButtonFocus { get; public set; }
    public string DefaultText { get; public set; }
    public double DialogMessageFontSize { get; public set; }
    public double DialogButtonFontSize { get; public set; }
    public Nullable`1<MessageDialogResult> DialogResultOnCancel { get; public set; }
    public double DialogTitleFontSize { get; public set; }
    public string FirstAuxiliaryButtonText { get; public set; }
    public double MaximumBodyHeight { get; public set; }
    public string NegativeButtonText { get; public set; }
    public string SecondAuxiliaryButtonText { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_OwnerCanCloseWithDialog();
    [CompilerGeneratedAttribute]
public void set_OwnerCanCloseWithDialog(bool value);
    [CompilerGeneratedAttribute]
public string get_AffirmativeButtonText();
    [CompilerGeneratedAttribute]
public void set_AffirmativeButtonText(string value);
    [CompilerGeneratedAttribute]
public bool get_AnimateHide();
    [CompilerGeneratedAttribute]
public void set_AnimateHide(bool value);
    [CompilerGeneratedAttribute]
public bool get_AnimateShow();
    [CompilerGeneratedAttribute]
public void set_AnimateShow(bool value);
    [CompilerGeneratedAttribute]
public CancellationToken get_CancellationToken();
    [CompilerGeneratedAttribute]
public void set_CancellationToken(CancellationToken value);
    [CompilerGeneratedAttribute]
public MetroDialogColorScheme get_ColorScheme();
    [CompilerGeneratedAttribute]
public void set_ColorScheme(MetroDialogColorScheme value);
    [CompilerGeneratedAttribute]
public ResourceDictionary get_CustomResourceDictionary();
    [CompilerGeneratedAttribute]
public void set_CustomResourceDictionary(ResourceDictionary value);
    [CompilerGeneratedAttribute]
public MessageDialogResult get_DefaultButtonFocus();
    [CompilerGeneratedAttribute]
public void set_DefaultButtonFocus(MessageDialogResult value);
    [CompilerGeneratedAttribute]
public string get_DefaultText();
    [CompilerGeneratedAttribute]
public void set_DefaultText(string value);
    [CompilerGeneratedAttribute]
public double get_DialogMessageFontSize();
    [CompilerGeneratedAttribute]
public void set_DialogMessageFontSize(double value);
    [CompilerGeneratedAttribute]
public double get_DialogButtonFontSize();
    [CompilerGeneratedAttribute]
public void set_DialogButtonFontSize(double value);
    [CompilerGeneratedAttribute]
public Nullable`1<MessageDialogResult> get_DialogResultOnCancel();
    [CompilerGeneratedAttribute]
public void set_DialogResultOnCancel(Nullable`1<MessageDialogResult> value);
    [CompilerGeneratedAttribute]
public double get_DialogTitleFontSize();
    [CompilerGeneratedAttribute]
public void set_DialogTitleFontSize(double value);
    [CompilerGeneratedAttribute]
public string get_FirstAuxiliaryButtonText();
    [CompilerGeneratedAttribute]
public void set_FirstAuxiliaryButtonText(string value);
    [CompilerGeneratedAttribute]
public double get_MaximumBodyHeight();
    [CompilerGeneratedAttribute]
public void set_MaximumBodyHeight(double value);
    [CompilerGeneratedAttribute]
public string get_NegativeButtonText();
    [CompilerGeneratedAttribute]
public void set_NegativeButtonText(string value);
    [CompilerGeneratedAttribute]
public string get_SecondAuxiliaryButtonText();
    [CompilerGeneratedAttribute]
public void set_SecondAuxiliaryButtonText(string value);
}
public class MahApps.Metro.Controls.Dialogs.ProgressDialog : BaseMetroDialog {
    public static DependencyProperty MessageProperty;
    public static DependencyProperty IsCancelableProperty;
    public static DependencyProperty NegativeButtonTextProperty;
    public static DependencyProperty ProgressBarForegroundProperty;
    internal Button PART_NegativeButton;
    internal MetroProgressBar PART_ProgressBar;
    private bool _contentLoaded;
    public string Message { get; public set; }
    public bool IsCancelable { get; public set; }
    public string NegativeButtonText { get; public set; }
    public Brush ProgressBarForeground { get; public set; }
    internal CancellationToken CancellationToken { get; }
    internal double Minimum { get; internal set; }
    internal double Maximum { get; internal set; }
    internal double ProgressValue { get; internal set; }
    internal ProgressDialog(MetroWindow parentWindow);
    internal ProgressDialog(MetroWindow parentWindow, MetroDialogSettings settings);
    private static ProgressDialog();
    public string get_Message();
    public void set_Message(string value);
    public bool get_IsCancelable();
    public void set_IsCancelable(bool value);
    public string get_NegativeButtonText();
    public void set_NegativeButtonText(string value);
    public Brush get_ProgressBarForeground();
    public void set_ProgressBarForeground(Brush value);
    protected virtual void OnLoaded();
    internal CancellationToken get_CancellationToken();
    internal double get_Minimum();
    internal void set_Minimum(double value);
    internal double get_Maximum();
    internal void set_Maximum(double value);
    internal double get_ProgressValue();
    internal void set_ProgressValue(double value);
    internal void SetIndeterminate();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "5.0.17.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "5.0.17.0")]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "5.0.17.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class MahApps.Metro.Controls.Dialogs.ProgressDialogController : object {
    [CompilerGeneratedAttribute]
private ProgressDialog <WrappedDialog>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<Task> <CloseCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler Closed;
    [CompilerGeneratedAttribute]
private EventHandler Canceled;
    [CompilerGeneratedAttribute]
private bool <IsCanceled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOpen>k__BackingField;
    private ProgressDialog WrappedDialog { get; }
    private Func`1<Task> CloseCallback { get; }
    public bool IsCanceled { get; private set; }
    public bool IsOpen { get; private set; }
    public double Minimum { get; public set; }
    public double Maximum { get; public set; }
    internal ProgressDialogController(ProgressDialog dialog, Func`1<Task> closeCallBack);
    [CompilerGeneratedAttribute]
private ProgressDialog get_WrappedDialog();
    [CompilerGeneratedAttribute]
private Func`1<Task> get_CloseCallback();
    [CompilerGeneratedAttribute]
public void add_Closed(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Closed(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_Canceled(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Canceled(EventHandler value);
    [CompilerGeneratedAttribute]
public bool get_IsCanceled();
    [CompilerGeneratedAttribute]
private void set_IsCanceled(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsOpen();
    [CompilerGeneratedAttribute]
private void set_IsOpen(bool value);
    private void PART_NegativeButton_Click(object sender, RoutedEventArgs e);
    private void Abort();
    public void SetIndeterminate();
    public void SetCancelable(bool value);
    public void SetProgress(double value);
    public double get_Minimum();
    public void set_Minimum(double value);
    public double get_Maximum();
    public void set_Maximum(double value);
    public void SetMessage(string message);
    public void SetTitle(string title);
    public void SetProgressBarForegroundBrush(Brush brush);
    public Task CloseAsync();
    [CompilerGeneratedAttribute]
private void <.ctor>b__20_0();
    [CompilerGeneratedAttribute]
private void <.ctor>b__20_1();
    [CompilerGeneratedAttribute]
private void <SetIndeterminate>b__23_0();
    [CompilerGeneratedAttribute]
private double <get_Minimum>b__27_0();
    [CompilerGeneratedAttribute]
private double <get_Maximum>b__30_0();
    [CompilerGeneratedAttribute]
private void <CloseAsync>b__35_0();
    [CompilerGeneratedAttribute]
private void <CloseAsync>b__35_1(Task _);
    [CompilerGeneratedAttribute]
private void <CloseAsync>b__35_2();
}
[ContentPropertyAttribute("ItemsSource")]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[StyleTypedPropertyAttribute]
[StyleTypedPropertyAttribute]
public class MahApps.Metro.Controls.DropDownButton : ItemsControl {
    public static RoutedEvent ClickEvent;
    public static DependencyProperty IsExpandedProperty;
    public static DependencyProperty ExtraTagProperty;
    public static DependencyProperty OrientationProperty;
    public static DependencyProperty IconProperty;
    public static DependencyProperty IconTemplateProperty;
    public static DependencyProperty CommandProperty;
    public static DependencyProperty CommandTargetProperty;
    public static DependencyProperty CommandParameterProperty;
    public static DependencyProperty ContentProperty;
    public static DependencyProperty ContentTemplateProperty;
    public static DependencyProperty ContentTemplateSelectorProperty;
    public static DependencyProperty ContentStringFormatProperty;
    public static DependencyProperty ButtonStyleProperty;
    public static DependencyProperty MenuStyleProperty;
    public static DependencyProperty ArrowBrushProperty;
    public static DependencyProperty ArrowMouseOverBrushProperty;
    public static DependencyProperty ArrowPressedBrushProperty;
    public static DependencyProperty ArrowVisibilityProperty;
    private bool canExecute;
    private Button button;
    private ContextMenu contextMenu;
    public bool IsExpanded { get; public set; }
    public object ExtraTag { get; public set; }
    public Orientation Orientation { get; public set; }
    [BindableAttribute("True")]
public object Icon { get; public set; }
    [BindableAttribute("True")]
public DataTemplate IconTemplate { get; public set; }
    public ICommand Command { get; public set; }
    public IInputElement CommandTarget { get; public set; }
    public object CommandParameter { get; public set; }
    public object Content { get; public set; }
    [BindableAttribute("True")]
public DataTemplate ContentTemplate { get; public set; }
    [BindableAttribute("True")]
public DataTemplateSelector ContentTemplateSelector { get; public set; }
    [BindableAttribute("True")]
public string ContentStringFormat { get; public set; }
    public Style ButtonStyle { get; public set; }
    public Style MenuStyle { get; public set; }
    public Brush ArrowBrush { get; public set; }
    public Brush ArrowMouseOverBrush { get; public set; }
    public Brush ArrowPressedBrush { get; public set; }
    public Visibility ArrowVisibility { get; public set; }
    protected bool IsEnabledCore { get; }
    private bool CanExecute { get; private set; }
    private static DropDownButton();
    public void add_Click(RoutedEventHandler value);
    public void remove_Click(RoutedEventHandler value);
    private static void OnIsExpandedPropertyChangedCallback(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs dependencyPropertyChangedEventArgs);
    protected virtual void SetContextMenuPlacementTarget(ContextMenu contextMenu);
    public bool get_IsExpanded();
    public void set_IsExpanded(bool value);
    public object get_ExtraTag();
    public void set_ExtraTag(object value);
    public Orientation get_Orientation();
    public void set_Orientation(Orientation value);
    public object get_Icon();
    public void set_Icon(object value);
    public DataTemplate get_IconTemplate();
    public void set_IconTemplate(DataTemplate value);
    private static void OnCommandPropertyChangedCallback(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e);
    public sealed virtual ICommand get_Command();
    public void set_Command(ICommand value);
    public sealed virtual IInputElement get_CommandTarget();
    public void set_CommandTarget(IInputElement value);
    public sealed virtual object get_CommandParameter();
    public void set_CommandParameter(object value);
    public object get_Content();
    public void set_Content(object value);
    public DataTemplate get_ContentTemplate();
    public void set_ContentTemplate(DataTemplate value);
    public DataTemplateSelector get_ContentTemplateSelector();
    public void set_ContentTemplateSelector(DataTemplateSelector value);
    public string get_ContentStringFormat();
    public void set_ContentStringFormat(string value);
    public Style get_ButtonStyle();
    public void set_ButtonStyle(Style value);
    public Style get_MenuStyle();
    public void set_MenuStyle(Style value);
    public Brush get_ArrowBrush();
    public void set_ArrowBrush(Brush value);
    public Brush get_ArrowMouseOverBrush();
    public void set_ArrowMouseOverBrush(Brush value);
    public Brush get_ArrowPressedBrush();
    public void set_ArrowPressedBrush(Brush value);
    public Visibility get_ArrowVisibility();
    public void set_ArrowVisibility(Visibility value);
    private void OnCommandChanged(ICommand oldCommand, ICommand newCommand);
    private void UnhookCommand(ICommand command);
    private void HookCommand(ICommand command);
    private void OnCanExecuteChanged(object sender, EventArgs e);
    private void UpdateCanExecute();
    protected virtual bool get_IsEnabledCore();
    private bool get_CanExecute();
    private void set_CanExecute(bool value);
    private void ButtonClick(object sender, RoutedEventArgs e);
    public virtual void OnApplyTemplate();
    private void OnGroupStyleCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    protected virtual void OnMouseRightButtonUp(MouseButtonEventArgs e);
    private void TryRemoveVisualFromOldTree(object item);
    protected virtual void OnItemsChanged(NotifyCollectionChangedEventArgs e);
}
public static class MahApps.Metro.Controls.ExpanderHelper : object {
    public static DependencyProperty HeaderUpStyleProperty;
    public static DependencyProperty HeaderDownStyleProperty;
    public static DependencyProperty HeaderLeftStyleProperty;
    public static DependencyProperty HeaderRightStyleProperty;
    public static DependencyProperty ExpandStoryboardProperty;
    public static DependencyProperty CollapseStoryboardProperty;
    internal static DependencyProperty ExpandSiteControlProperty;
    private static ExpanderHelper();
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.Expander")]
public static Style GetHeaderUpStyle(UIElement element);
    public static void SetHeaderUpStyle(UIElement element, Style value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.Expander")]
public static Style GetHeaderDownStyle(UIElement element);
    public static void SetHeaderDownStyle(UIElement element, Style value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.Expander")]
public static Style GetHeaderLeftStyle(UIElement element);
    public static void SetHeaderLeftStyle(UIElement element, Style value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.Expander")]
public static Style GetHeaderRightStyle(UIElement element);
    public static void SetHeaderRightStyle(UIElement element, Style value);
    private static void OnExpandStoryboardPropertyChangedCallback(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e);
    private static void Expander_Expanded(object sender, RoutedEventArgs e);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.Expander")]
public static Storyboard GetExpandStoryboard(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.Expander")]
public static void SetExpandStoryboard(UIElement element, Storyboard value);
    private static void OnCollapseStoryboardPropertyChangedCallback(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e);
    private static void Expander_Collapsed(object sender, RoutedEventArgs e);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.Expander")]
public static Storyboard GetCollapseStoryboard(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.Expander")]
public static void SetCollapseStoryboard(UIElement element, Storyboard value);
    internal static FrameworkElement GetExpandSite(Expander expander);
    internal static FrameworkElement GetExpandSiteControl(UIElement element);
    internal static void SetExpandSiteControl(UIElement element, FrameworkElement value);
}
[ExtensionAttribute]
public static class MahApps.Metro.Controls.Extensions : object {
    [ExtensionAttribute]
public static T Invoke(DispatcherObject dispatcherObject, Func`1<T> func);
    [ExtensionAttribute]
public static void Invoke(DispatcherObject dispatcherObject, Action invokeAction);
    [ExtensionAttribute]
public static void BeginInvoke(DispatcherObject dispatcherObject, Action invokeAction, DispatcherPriority priority);
    [ExtensionAttribute]
public static void BeginInvoke(T dispatcherObject, Action`1<T> invokeAction, DispatcherPriority priority);
    [ExtensionAttribute]
public static void ExecuteWhenLoaded(FrameworkElement element, Action invokeAction);
}
internal static class MahApps.Metro.Controls.EyeDropperHelper : object {
    private static int SRCCOPY;
    private static int CAPTUREBLT;
    private static bool BitBlt(IntPtr hdcDest, int nxDest, int nyDest, int nWidth, int nHeight, IntPtr hdcSrc, int nXSrc, int nYSrc, int dwRop);
    private static IntPtr CreateCompatibleBitmap(IntPtr hdc, int width, int nHeight);
    private static IntPtr CreateCompatibleDC(IntPtr hdc);
    private static IntPtr DeleteDC(IntPtr hdc);
    private static IntPtr DeleteObject(IntPtr hObject);
    private static IntPtr GetDesktopWindow();
    private static IntPtr GetWindowDC(IntPtr hWnd);
    private static bool ReleaseDC(IntPtr hWnd, IntPtr hDc);
    private static IntPtr GetDC(IntPtr hwnd);
    private static UInt32 GetPixel(IntPtr hdc, int nXPos, int nYPos);
    private static IntPtr SelectObject(IntPtr hdc, IntPtr hObject);
    public static BitmapSource CaptureRegion(Int32Rect region);
    public static Color GetPixelColor(Point point);
}
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[StyleTypedPropertyAttribute]
[StyleTypedPropertyAttribute]
public class MahApps.Metro.Controls.FlipView : Selector {
    public static DependencyProperty MouseHoverBorderBrushProperty;
    public static DependencyProperty MouseHoverBorderEnabledProperty;
    public static DependencyProperty MouseHoverBorderThicknessProperty;
    public static DependencyProperty ShowIndexProperty;
    public static DependencyProperty IndexItemContainerStyleProperty;
    public static DependencyProperty IndexPlacementProperty;
    public static DependencyProperty IndexHorizontalAlignmentProperty;
    public static DependencyProperty IndexVerticalAlignmentProperty;
    public static DependencyProperty CircularNavigationProperty;
    public static DependencyProperty NavigationButtonsPositionProperty;
    public static DependencyProperty OrientationProperty;
    public static DependencyProperty LeftTransitionProperty;
    public static DependencyProperty RightTransitionProperty;
    public static DependencyProperty UpTransitionProperty;
    public static DependencyProperty DownTransitionProperty;
    public static DependencyProperty IsBannerEnabledProperty;
    public static DependencyProperty IsNavigationEnabledProperty;
    public static DependencyProperty BannerTextProperty;
    public static DependencyProperty BannerBackgroundProperty;
    public static DependencyProperty BannerTextTemplateProperty;
    public static DependencyProperty BannerTextTemplateSelectorProperty;
    public static DependencyProperty BannerTextStringFormatProperty;
    public static DependencyProperty BannerForegroundProperty;
    public static DependencyProperty BannerOpacityProperty;
    public static DependencyProperty NavigationButtonStyleProperty;
    public static DependencyProperty ButtonBackContentProperty;
    public static DependencyProperty ButtonBackContentTemplateProperty;
    public static DependencyProperty ButtonBackContentStringFormatProperty;
    public static DependencyProperty ButtonForwardContentProperty;
    public static DependencyProperty ButtonForwardContentTemplateProperty;
    public static DependencyProperty ButtonForwardContentStringFormatProperty;
    public static DependencyProperty ButtonUpContentProperty;
    public static DependencyProperty ButtonUpContentTemplateProperty;
    public static DependencyProperty ButtonUpContentStringFormatProperty;
    public static DependencyProperty ButtonDownContentProperty;
    public static DependencyProperty ButtonDownContentTemplateProperty;
    public static DependencyProperty ButtonDownContentStringFormatProperty;
    private static string PART_BackButton;
    private static string PART_BannerGrid;
    private static string PART_BannerLabel;
    private static string PART_DownButton;
    private static string PART_ForwardButton;
    private static string PART_Presenter;
    private static string PART_UpButton;
    private static string PART_Index;
    private bool loaded;
    private bool allowSelectedIndexChangedCallback;
    private Grid bannerGrid;
    private Label bannerLabel;
    private ListBox indexListBox;
    private Button backButton;
    private Button forwardButton;
    private Button downButton;
    private Button upButton;
    private Storyboard hideBannerStoryboard;
    private Storyboard hideControlStoryboard;
    private EventHandler hideControlStoryboardCompletedHandler;
    private TransitioningContentControl presenter;
    private Storyboard showBannerStoryboard;
    private Storyboard showControlStoryboard;
    private object savedBannerText;
    public Brush MouseHoverBorderBrush { get; public set; }
    public bool MouseHoverBorderEnabled { get; public set; }
    public Thickness MouseHoverBorderThickness { get; public set; }
    public bool ShowIndex { get; public set; }
    public Style IndexItemContainerStyle { get; public set; }
    public NavigationIndexPlacement IndexPlacement { get; public set; }
    public HorizontalAlignment IndexHorizontalAlignment { get; public set; }
    public VerticalAlignment IndexVerticalAlignment { get; public set; }
    public bool CircularNavigation { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Appearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public NavigationButtonsPosition NavigationButtonsPosition { get; public set; }
    public Orientation Orientation { get; public set; }
    public TransitionType LeftTransition { get; public set; }
    public TransitionType RightTransition { get; public set; }
    public TransitionType UpTransition { get; public set; }
    public TransitionType DownTransition { get; public set; }
    public bool IsBannerEnabled { get; public set; }
    public bool IsNavigationEnabled { get; public set; }
    public object BannerText { get; public set; }
    public DataTemplate BannerTextTemplate { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("MahApps.Metro")]
public DataTemplateSelector BannerTextTemplateSelector { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("MahApps.Metro")]
public string BannerTextStringFormat { get; public set; }
    public Brush BannerBackground { get; public set; }
    public Brush BannerForeground { get; public set; }
    public double BannerOpacity { get; public set; }
    public Style NavigationButtonStyle { get; public set; }
    [CategoryAttribute("MahApps.Metro")]
public object ButtonBackContent { get; public set; }
    public DataTemplate ButtonBackContentTemplate { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("MahApps.Metro")]
public string ButtonBackContentStringFormat { get; public set; }
    [CategoryAttribute("MahApps.Metro")]
public object ButtonForwardContent { get; public set; }
    public DataTemplate ButtonForwardContentTemplate { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("MahApps.Metro")]
public string ButtonForwardContentStringFormat { get; public set; }
    [CategoryAttribute("MahApps.Metro")]
public object ButtonUpContent { get; public set; }
    public DataTemplate ButtonUpContentTemplate { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("MahApps.Metro")]
public string ButtonUpContentStringFormat { get; public set; }
    [CategoryAttribute("MahApps.Metro")]
public object ButtonDownContent { get; public set; }
    public DataTemplate ButtonDownContentTemplate { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("MahApps.Metro")]
public string ButtonDownContentStringFormat { get; public set; }
    private static FlipView();
    public Brush get_MouseHoverBorderBrush();
    public void set_MouseHoverBorderBrush(Brush value);
    public bool get_MouseHoverBorderEnabled();
    public void set_MouseHoverBorderEnabled(bool value);
    public Thickness get_MouseHoverBorderThickness();
    public void set_MouseHoverBorderThickness(Thickness value);
    public bool get_ShowIndex();
    public void set_ShowIndex(bool value);
    public Style get_IndexItemContainerStyle();
    public void set_IndexItemContainerStyle(Style value);
    public NavigationIndexPlacement get_IndexPlacement();
    public void set_IndexPlacement(NavigationIndexPlacement value);
    public HorizontalAlignment get_IndexHorizontalAlignment();
    public void set_IndexHorizontalAlignment(HorizontalAlignment value);
    public VerticalAlignment get_IndexVerticalAlignment();
    public void set_IndexVerticalAlignment(VerticalAlignment value);
    public bool get_CircularNavigation();
    public void set_CircularNavigation(bool value);
    public NavigationButtonsPosition get_NavigationButtonsPosition();
    public void set_NavigationButtonsPosition(NavigationButtonsPosition value);
    public Orientation get_Orientation();
    public void set_Orientation(Orientation value);
    public TransitionType get_LeftTransition();
    public void set_LeftTransition(TransitionType value);
    public TransitionType get_RightTransition();
    public void set_RightTransition(TransitionType value);
    public TransitionType get_UpTransition();
    public void set_UpTransition(TransitionType value);
    public TransitionType get_DownTransition();
    public void set_DownTransition(TransitionType value);
    public bool get_IsBannerEnabled();
    public void set_IsBannerEnabled(bool value);
    private static void OnIsBannerEnabledPropertyChangedCallback(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public bool get_IsNavigationEnabled();
    public void set_IsNavigationEnabled(bool value);
    public object get_BannerText();
    public void set_BannerText(object value);
    public DataTemplate get_BannerTextTemplate();
    public void set_BannerTextTemplate(DataTemplate value);
    public DataTemplateSelector get_BannerTextTemplateSelector();
    public void set_BannerTextTemplateSelector(DataTemplateSelector value);
    public string get_BannerTextStringFormat();
    public void set_BannerTextStringFormat(string value);
    public Brush get_BannerBackground();
    public void set_BannerBackground(Brush value);
    public Brush get_BannerForeground();
    public void set_BannerForeground(Brush value);
    public double get_BannerOpacity();
    public void set_BannerOpacity(double value);
    public Style get_NavigationButtonStyle();
    public void set_NavigationButtonStyle(Style value);
    public object get_ButtonBackContent();
    public void set_ButtonBackContent(object value);
    public DataTemplate get_ButtonBackContentTemplate();
    public void set_ButtonBackContentTemplate(DataTemplate value);
    public string get_ButtonBackContentStringFormat();
    public void set_ButtonBackContentStringFormat(string value);
    public object get_ButtonForwardContent();
    public void set_ButtonForwardContent(object value);
    public DataTemplate get_ButtonForwardContentTemplate();
    public void set_ButtonForwardContentTemplate(DataTemplate value);
    public string get_ButtonForwardContentStringFormat();
    public void set_ButtonForwardContentStringFormat(string value);
    public object get_ButtonUpContent();
    public void set_ButtonUpContent(object value);
    public DataTemplate get_ButtonUpContentTemplate();
    public void set_ButtonUpContentTemplate(DataTemplate value);
    public string get_ButtonUpContentStringFormat();
    public void set_ButtonUpContentStringFormat(string value);
    public object get_ButtonDownContent();
    public void set_ButtonDownContent(object value);
    public DataTemplate get_ButtonDownContentTemplate();
    public void set_ButtonDownContentTemplate(DataTemplate value);
    public string get_ButtonDownContentStringFormat();
    public void set_ButtonDownContentStringFormat(string value);
    private static object CoerceSelectedIndexProperty(DependencyObject d, object value);
    public void GoBack();
    public void GoForward();
    public void ShowControlButtons();
    public void HideControlButtons();
    public virtual void OnApplyTemplate();
    private void OnIndexListBoxSelectionChanged(object sender, SelectionChangedEventArgs e);
    protected virtual DependencyObject GetContainerForItemOverride();
    protected virtual bool IsItemItsOwnContainerOverride(object item);
    protected virtual void OnItemsChanged(NotifyCollectionChangedEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnMouseDown(MouseButtonEventArgs e);
    protected virtual void OnSelectionChanged(SelectionChangedEventArgs e);
    protected virtual void PrepareContainerForItemOverride(DependencyObject element, object item);
    private void ApplyToNavigationButtons(Action`1<Button> prevButtonApply, Action`1<Button> nextButtonApply, Action`1<Button> inactiveButtonsApply);
    private void ChangeBannerText(object value);
    private void ComputeTransition(int fromIndex, int toIndex);
    private void DetectControlButtonsStatus(Visibility activeButtonsVisibility);
    private void FlipViewLoaded(object sender, RoutedEventArgs e);
    private void FlipViewUnloaded(object sender, RoutedEventArgs e);
    private void GetNavigationButtons(Button& prevButton, Button& nextButton, IEnumerable`1& inactiveButtons);
    private void HideBanner();
    private void NextButtonClick(object sender, RoutedEventArgs e);
    private void PrevButtonClick(object sender, RoutedEventArgs e);
    private void ShowBanner();
    [CompilerGeneratedAttribute]
private void <ShowControlButtons>b__178_0();
    [CompilerGeneratedAttribute]
private void <HideControlButtons>b__179_0();
    [CompilerGeneratedAttribute]
private void <OnApplyTemplate>b__180_0();
}
public class MahApps.Metro.Controls.FlipViewItem : ContentControl {
    public static DependencyProperty BannerTextProperty;
    private static DependencyPropertyKey OwnerPropertyKey;
    public static DependencyProperty OwnerProperty;
    public object BannerText { get; public set; }
    public FlipView Owner { get; protected set; }
    private static FlipViewItem();
    public object get_BannerText();
    public void set_BannerText(object value);
    public FlipView get_Owner();
    protected void set_Owner(FlipView value);
    public virtual void OnApplyTemplate();
}
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
public class MahApps.Metro.Controls.Flyout : HeaderedContentControl {
    public static RoutedEvent IsOpenChangedEvent;
    public static RoutedEvent OpeningFinishedEvent;
    public static RoutedEvent ClosingFinishedEvent;
    public static DependencyProperty PositionProperty;
    public static DependencyProperty IsPinnedProperty;
    public static DependencyProperty IsOpenProperty;
    private static DependencyPropertyKey IsShownPropertyKey;
    public static DependencyProperty IsShownProperty;
    public static DependencyProperty AnimateOnPositionChangeProperty;
    public static DependencyProperty AnimateOpacityProperty;
    public static DependencyProperty IsModalProperty;
    public static DependencyProperty CloseCommandProperty;
    public static DependencyProperty CloseCommandParameterProperty;
    public static DependencyProperty ThemeProperty;
    public static DependencyProperty ExternalCloseButtonProperty;
    public static DependencyProperty CloseButtonVisibilityProperty;
    public static DependencyProperty CloseButtonIsCancelProperty;
    public static DependencyProperty TitleVisibilityProperty;
    public static DependencyProperty AreAnimationsEnabledProperty;
    public static DependencyProperty FocusedElementProperty;
    public static DependencyProperty AllowFocusElementProperty;
    public static DependencyProperty IsAutoCloseEnabledProperty;
    public static DependencyProperty AutoCloseIntervalProperty;
    private static DependencyPropertyKey OwnerPropertyKey;
    public static DependencyProperty OwnerProperty;
    private DispatcherTimer autoCloseTimer;
    private FrameworkElement flyoutRoot;
    private Storyboard showStoryboard;
    private Storyboard hideStoryboard;
    private SplineDoubleKeyFrame hideFrame;
    private SplineDoubleKeyFrame hideFrameY;
    private SplineDoubleKeyFrame showFrame;
    private SplineDoubleKeyFrame showFrameY;
    private SplineDoubleKeyFrame fadeOutFrame;
    private FrameworkElement flyoutHeader;
    private FrameworkElement flyoutContent;
    private MetroWindow parentWindow;
    [CompilerGeneratedAttribute]
private PropertyChangeNotifier <IsOpenPropertyChangeNotifier>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyChangeNotifier <ThemePropertyChangeNotifier>k__BackingField;
    public Position Position { get; public set; }
    public bool IsPinned { get; public set; }
    public bool IsOpen { get; public set; }
    public bool IsShown { get; protected set; }
    public bool AnimateOnPositionChange { get; public set; }
    public bool AnimateOpacity { get; public set; }
    public bool IsModal { get; public set; }
    public ICommand CloseCommand { get; public set; }
    public object CloseCommandParameter { get; public set; }
    public FlyoutTheme Theme { get; public set; }
    public MouseButton ExternalCloseButton { get; public set; }
    public Visibility CloseButtonVisibility { get; public set; }
    public bool CloseButtonIsCancel { get; public set; }
    public Visibility TitleVisibility { get; public set; }
    public bool AreAnimationsEnabled { get; public set; }
    public FrameworkElement FocusedElement { get; public set; }
    public bool AllowFocusElement { get; public set; }
    public bool IsAutoCloseEnabled { get; public set; }
    public long AutoCloseInterval { get; public set; }
    public FlyoutsControl Owner { get; protected set; }
    private MetroWindow ParentWindow { get; }
    internal PropertyChangeNotifier IsOpenPropertyChangeNotifier { get; internal set; }
    internal PropertyChangeNotifier ThemePropertyChangeNotifier { get; internal set; }
    private static Flyout();
    public void add_IsOpenChanged(RoutedEventHandler value);
    public void remove_IsOpenChanged(RoutedEventHandler value);
    public void add_OpeningFinished(RoutedEventHandler value);
    public void remove_OpeningFinished(RoutedEventHandler value);
    public void add_ClosingFinished(RoutedEventHandler value);
    public void remove_ClosingFinished(RoutedEventHandler value);
    private static void OnPositionPropertyChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e);
    public Position get_Position();
    public void set_Position(Position value);
    public bool get_IsPinned();
    public void set_IsPinned(bool value);
    private static void OnIsOpenPropertyChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e);
    public bool get_IsOpen();
    public void set_IsOpen(bool value);
    public bool get_IsShown();
    protected void set_IsShown(bool value);
    public bool get_AnimateOnPositionChange();
    public void set_AnimateOnPositionChange(bool value);
    public bool get_AnimateOpacity();
    public void set_AnimateOpacity(bool value);
    public bool get_IsModal();
    public void set_IsModal(bool value);
    public ICommand get_CloseCommand();
    public void set_CloseCommand(ICommand value);
    public object get_CloseCommandParameter();
    public void set_CloseCommandParameter(object value);
    public FlyoutTheme get_Theme();
    public void set_Theme(FlyoutTheme value);
    public MouseButton get_ExternalCloseButton();
    public void set_ExternalCloseButton(MouseButton value);
    public Visibility get_CloseButtonVisibility();
    public void set_CloseButtonVisibility(Visibility value);
    public bool get_CloseButtonIsCancel();
    public void set_CloseButtonIsCancel(bool value);
    public Visibility get_TitleVisibility();
    public void set_TitleVisibility(Visibility value);
    public bool get_AreAnimationsEnabled();
    public void set_AreAnimationsEnabled(bool value);
    public FrameworkElement get_FocusedElement();
    public void set_FocusedElement(FrameworkElement value);
    public bool get_AllowFocusElement();
    public void set_AllowFocusElement(bool value);
    private static void OnIsAutoCloseEnabledPropertyChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e);
    public bool get_IsAutoCloseEnabled();
    public void set_IsAutoCloseEnabled(bool value);
    private static void AutoCloseIntervalChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e);
    public long get_AutoCloseInterval();
    public void set_AutoCloseInterval(long value);
    public FlyoutsControl get_Owner();
    protected void set_Owner(FlyoutsControl value);
    private MetroWindow get_ParentWindow();
    [CompilerGeneratedAttribute]
internal PropertyChangeNotifier get_IsOpenPropertyChangeNotifier();
    [CompilerGeneratedAttribute]
internal void set_IsOpenPropertyChangeNotifier(PropertyChangeNotifier value);
    [CompilerGeneratedAttribute]
internal PropertyChangeNotifier get_ThemePropertyChangeNotifier();
    [CompilerGeneratedAttribute]
internal void set_ThemePropertyChangeNotifier(PropertyChangeNotifier value);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    private void InitializeAutoCloseTimer();
    private void StartAutoCloseTimer();
    private void StopAutoCloseTimer();
    private void AutoCloseTimerCallback(object sender, EventArgs e);
    private void UpdateFlyoutTheme();
    private static Theme DetectTheme(Flyout flyout);
    internal void ChangeFlyoutTheme(Theme windowTheme);
    protected virtual void OverrideFlyoutResources(ResourceDictionary resources, bool accent);
    private void UpdateOpacityChange();
    private void HideStoryboardCompleted(object sender, EventArgs e);
    private void Hide();
    private void ShowStoryboardCompleted(object sender, EventArgs e);
    private void Shown();
    private void TryFocusElement();
    public virtual void OnApplyTemplate();
    internal void CleanUp();
    private void HeaderThumbOnPreviewMouseLeftButtonUp(object sender, MouseButtonEventArgs e);
    private void HeaderThumbMoveOnDragDelta(object sender, DragDeltaEventArgs dragDeltaEventArgs);
    private void HeaderThumbChangeWindowStateOnMouseDoubleClick(object sender, MouseButtonEventArgs mouseButtonEventArgs);
    private void HeaderThumbSystemMenuOnMouseRightButtonUp(object sender, MouseButtonEventArgs e);
    internal void ApplyAnimation(Position position, bool animateOpacity, bool resetShowFrame);
    protected virtual void OnRenderSizeChanged(SizeChangedInfo sizeInfo);
    [CompilerGeneratedAttribute]
private void <.ctor>b__121_0(object sender, RoutedEventArgs args);
}
[StyleTypedPropertyAttribute]
public class MahApps.Metro.Controls.FlyoutsControl : ItemsControl {
    public static DependencyProperty OverrideExternalCloseButtonProperty;
    public static DependencyProperty OverrideIsPinnedProperty;
    public Nullable`1<MouseButton> OverrideExternalCloseButton { get; public set; }
    public bool OverrideIsPinned { get; public set; }
    private static FlyoutsControl();
    public Nullable`1<MouseButton> get_OverrideExternalCloseButton();
    public void set_OverrideExternalCloseButton(Nullable`1<MouseButton> value);
    public bool get_OverrideIsPinned();
    public void set_OverrideIsPinned(bool value);
    protected virtual DependencyObject GetContainerForItemOverride();
    protected virtual bool IsItemItsOwnContainerOverride(object item);
    protected virtual void PrepareContainerForItemOverride(DependencyObject element, object item);
    protected virtual void ClearContainerForItemOverride(DependencyObject element, object item);
    private void AttachHandlers(Flyout flyout);
    private void FlyoutStatusChanged(object sender, EventArgs e);
    internal void HandleFlyoutStatusChange(Flyout flyout, MetroWindow parentWindow);
    private Flyout GetFlyout(object item);
    internal IEnumerable`1<Flyout> GetFlyouts();
    private IEnumerable`1<Flyout> GetFlyouts(IEnumerable items);
    private void ReorderZIndices(Flyout lastChanged);
    [CompilerGeneratedAttribute]
private Flyout <GetFlyouts>b__18_0(object item);
}
public enum MahApps.Metro.Controls.FlyoutTheme : Enum {
    public int value__;
    public static FlyoutTheme Adapt;
    public static FlyoutTheme Inverse;
    public static FlyoutTheme Dark;
    public static FlyoutTheme Light;
    public static FlyoutTheme Accent;
}
public class MahApps.Metro.Controls.FontIcon : IconElement {
    public static DependencyProperty GlyphProperty;
    public string Glyph { get; public set; }
    private static FontIcon();
    public string get_Glyph();
    public void set_Glyph(string value);
}
public class MahApps.Metro.Controls.GridLengthAnimation : AnimationTimeline {
    public static DependencyProperty FromProperty;
    public static DependencyProperty ToProperty;
    public GridLength From { get; public set; }
    public GridLength To { get; public set; }
    public Type TargetPropertyType { get; }
    private static GridLengthAnimation();
    public GridLength get_From();
    public void set_From(GridLength value);
    public GridLength get_To();
    public void set_To(GridLength value);
    public virtual Type get_TargetPropertyType();
    public virtual object GetCurrentValue(object defaultOriginValue, object defaultDestinationValue, AnimationClock animationClock);
    protected virtual Freezable CreateInstanceCore();
}
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[StyleTypedPropertyAttribute]
[StyleTypedPropertyAttribute]
[StyleTypedPropertyAttribute]
[StyleTypedPropertyAttribute]
[StyleTypedPropertyAttribute]
[StyleTypedPropertyAttribute]
[StyleTypedPropertyAttribute]
public class MahApps.Metro.Controls.HamburgerMenu : ContentControl {
    private Button hamburgerButton;
    private ListBox buttonsListView;
    private ListBox optionsListView;
    private PropertyChangeNotifier actualWidthPropertyChangeNotifier;
    public static RoutedEvent ItemClickEvent;
    public static RoutedEvent OptionsItemClickEvent;
    public static RoutedEvent ItemInvokedEvent;
    public static RoutedEvent HamburgerButtonClickEvent;
    public static DependencyProperty HamburgerWidthProperty;
    public static DependencyProperty HamburgerHeightProperty;
    public static DependencyProperty HamburgerMarginProperty;
    public static DependencyProperty HamburgerVisibilityProperty;
    public static DependencyProperty HamburgerButtonStyleProperty;
    public static DependencyProperty HamburgerButtonTemplateProperty;
    public static DependencyProperty HamburgerButtonNameProperty;
    public static DependencyProperty HamburgerButtonHelpTextProperty;
    public static DependencyProperty HamburgerMenuHeaderTemplateProperty;
    public static DependencyProperty OptionsItemsSourceProperty;
    public static DependencyProperty OptionsItemContainerStyleProperty;
    public static DependencyProperty OptionsItemTemplateProperty;
    public static DependencyProperty OptionsItemTemplateSelectorProperty;
    public static DependencyProperty OptionsVisibilityProperty;
    public static DependencyProperty SelectedOptionsItemProperty;
    public static DependencyProperty SelectedOptionsIndexProperty;
    public static DependencyProperty OptionsItemCommandProperty;
    public static DependencyProperty OptionsItemCommandParameterProperty;
    private ControlTemplate _defaultItemFocusVisualTemplate;
    public static DependencyProperty OpenPaneLengthProperty;
    public static DependencyProperty CompactPaneLengthProperty;
    public static DependencyProperty MinimumOpenPaneLengthProperty;
    public static DependencyProperty MaximumOpenPaneLengthProperty;
    public static DependencyProperty CanResizeOpenPaneProperty;
    public static DependencyProperty ResizeThumbStyleProperty;
    public static DependencyProperty PanePlacementProperty;
    public static DependencyProperty DisplayModeProperty;
    public static DependencyProperty PaneMarginProperty;
    public static DependencyProperty PaneHeaderMarginProperty;
    public static DependencyProperty PaneBackgroundProperty;
    public static DependencyProperty PaneForegroundProperty;
    public static DependencyProperty IsPaneOpenProperty;
    public static DependencyProperty ItemsSourceProperty;
    public static DependencyProperty ItemContainerStyleProperty;
    public static DependencyProperty HeaderItemContainerStyleProperty;
    public static DependencyProperty SeparatorItemContainerStyleProperty;
    public static DependencyProperty ItemTemplateProperty;
    public static DependencyProperty ItemTemplateSelectorProperty;
    public static DependencyProperty SelectedItemProperty;
    public static DependencyProperty SelectedIndexProperty;
    public static DependencyProperty ContentTransitionProperty;
    public static DependencyProperty ItemCommandProperty;
    public static DependencyProperty ItemCommandParameterProperty;
    public static DependencyProperty VerticalScrollBarOnLeftSideProperty;
    public static DependencyProperty ShowSelectionIndicatorProperty;
    private static DependencyPropertyKey ItemFocusVisualStylePropertyKey;
    public static DependencyProperty ItemFocusVisualStyleProperty;
    public double HamburgerWidth { get; public set; }
    public double HamburgerHeight { get; public set; }
    public Thickness HamburgerMargin { get; public set; }
    public Visibility HamburgerVisibility { get; public set; }
    public Style HamburgerButtonStyle { get; public set; }
    public DataTemplate HamburgerButtonTemplate { get; public set; }
    public string HamburgerButtonName { get; public set; }
    public string HamburgerButtonHelpText { get; public set; }
    public DataTemplate HamburgerMenuHeaderTemplate { get; public set; }
    public object OptionsItemsSource { get; public set; }
    public Style OptionsItemContainerStyle { get; public set; }
    public DataTemplate OptionsItemTemplate { get; public set; }
    public DataTemplateSelector OptionsItemTemplateSelector { get; public set; }
    public Visibility OptionsVisibility { get; public set; }
    public object SelectedOptionsItem { get; public set; }
    public int SelectedOptionsIndex { get; public set; }
    public ICommand OptionsItemCommand { get; public set; }
    public object OptionsItemCommandParameter { get; public set; }
    public ItemCollection OptionsItems { get; }
    public double OpenPaneLength { get; public set; }
    public double CompactPaneLength { get; public set; }
    public double MinimumOpenPaneLength { get; public set; }
    public double MaximumOpenPaneLength { get; public set; }
    public bool CanResizeOpenPane { get; public set; }
    public Style ResizeThumbStyle { get; public set; }
    public SplitViewPanePlacement PanePlacement { get; public set; }
    public SplitViewDisplayMode DisplayMode { get; public set; }
    public Thickness PaneMargin { get; public set; }
    public Thickness PaneHeaderMargin { get; public set; }
    public Brush PaneBackground { get; public set; }
    public Brush PaneForeground { get; public set; }
    public bool IsPaneOpen { get; public set; }
    public object ItemsSource { get; public set; }
    public Style ItemContainerStyle { get; public set; }
    public Style HeaderItemContainerStyle { get; public set; }
    public Style SeparatorItemContainerStyle { get; public set; }
    public DataTemplate ItemTemplate { get; public set; }
    public DataTemplateSelector ItemTemplateSelector { get; public set; }
    public object SelectedItem { get; public set; }
    public int SelectedIndex { get; public set; }
    public TransitionType ContentTransition { get; public set; }
    public ICommand ItemCommand { get; public set; }
    public object ItemCommandParameter { get; public set; }
    public bool VerticalScrollBarOnLeftSide { get; public set; }
    public bool ShowSelectionIndicator { get; public set; }
    public Style ItemFocusVisualStyle { get; protected set; }
    public ItemCollection Items { get; }
    private static HamburgerMenu();
    public virtual void OnApplyTemplate();
    private void HamburgerMenu_Loaded(object sender, RoutedEventArgs e);
    public void add_ItemClick(ItemClickRoutedEventHandler value);
    public void remove_ItemClick(ItemClickRoutedEventHandler value);
    public void add_OptionsItemClick(ItemClickRoutedEventHandler value);
    public void remove_OptionsItemClick(ItemClickRoutedEventHandler value);
    public void add_ItemInvoked(HamburgerMenuItemInvokedRoutedEventHandler value);
    public void remove_ItemInvoked(HamburgerMenuItemInvokedRoutedEventHandler value);
    public void add_HamburgerButtonClick(RoutedEventHandler value);
    public void remove_HamburgerButtonClick(RoutedEventHandler value);
    private void OnHamburgerButtonClick(object sender, RoutedEventArgs e);
    private bool OnItemClick();
    private bool CanRaiseItemEvents(object selectedItem);
    private bool RaiseItemEvents(object selectedItem);
    private bool OnOptionsItemClick();
    private bool CanRaiseOptionsItemEvents(object selectedItem);
    private bool RaiseOptionsItemEvents(object selectedItem);
    private void ButtonsListView_SelectionChanged(object sender, SelectionChangedEventArgs e);
    private void OptionsListView_SelectionChanged(object sender, SelectionChangedEventArgs e);
    public double get_HamburgerWidth();
    public void set_HamburgerWidth(double value);
    public double get_HamburgerHeight();
    public void set_HamburgerHeight(double value);
    public Thickness get_HamburgerMargin();
    public void set_HamburgerMargin(Thickness value);
    public Visibility get_HamburgerVisibility();
    public void set_HamburgerVisibility(Visibility value);
    public Style get_HamburgerButtonStyle();
    public void set_HamburgerButtonStyle(Style value);
    public DataTemplate get_HamburgerButtonTemplate();
    public void set_HamburgerButtonTemplate(DataTemplate value);
    public string get_HamburgerButtonName();
    public void set_HamburgerButtonName(string value);
    public string get_HamburgerButtonHelpText();
    public void set_HamburgerButtonHelpText(string value);
    public DataTemplate get_HamburgerMenuHeaderTemplate();
    public void set_HamburgerMenuHeaderTemplate(DataTemplate value);
    private static bool IsNotNull(object value);
    public object get_OptionsItemsSource();
    public void set_OptionsItemsSource(object value);
    public Style get_OptionsItemContainerStyle();
    public void set_OptionsItemContainerStyle(Style value);
    public DataTemplate get_OptionsItemTemplate();
    public void set_OptionsItemTemplate(DataTemplate value);
    public DataTemplateSelector get_OptionsItemTemplateSelector();
    public void set_OptionsItemTemplateSelector(DataTemplateSelector value);
    public Visibility get_OptionsVisibility();
    public void set_OptionsVisibility(Visibility value);
    public object get_SelectedOptionsItem();
    public void set_SelectedOptionsItem(object value);
    public int get_SelectedOptionsIndex();
    public void set_SelectedOptionsIndex(int value);
    public ICommand get_OptionsItemCommand();
    public void set_OptionsItemCommand(ICommand value);
    public object get_OptionsItemCommandParameter();
    public void set_OptionsItemCommandParameter(object value);
    public ItemCollection get_OptionsItems();
    public void RaiseOptionsItemCommand();
    private static object OnOpenPaneLengthCoerceValueCallback(DependencyObject dependencyObject, object inputValue);
    private static void OpenPaneLengthPropertyChangedCallback(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs args);
    public double get_OpenPaneLength();
    public void set_OpenPaneLength(double value);
    private static void OnCompactPaneLengthPropertyChangedCallback(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e);
    public double get_CompactPaneLength();
    public void set_CompactPaneLength(double value);
    private static void MinimumOpenPaneLengthPropertyChangedCallback(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e);
    public double get_MinimumOpenPaneLength();
    public void set_MinimumOpenPaneLength(double value);
    private static void OnMaximumOpenPaneLengthPropertyChangedCallback(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e);
    public double get_MaximumOpenPaneLength();
    public void set_MaximumOpenPaneLength(double value);
    private static void OnCanResizeOpenPanePropertyChangedCallback(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e);
    public bool get_CanResizeOpenPane();
    public void set_CanResizeOpenPane(bool value);
    public Style get_ResizeThumbStyle();
    public void set_ResizeThumbStyle(Style value);
    public SplitViewPanePlacement get_PanePlacement();
    public void set_PanePlacement(SplitViewPanePlacement value);
    private static void OnDisplayModePropertyChangedCallback(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e);
    public SplitViewDisplayMode get_DisplayMode();
    public void set_DisplayMode(SplitViewDisplayMode value);
    public Thickness get_PaneMargin();
    public void set_PaneMargin(Thickness value);
    public Thickness get_PaneHeaderMargin();
    public void set_PaneHeaderMargin(Thickness value);
    public Brush get_PaneBackground();
    public void set_PaneBackground(Brush value);
    public Brush get_PaneForeground();
    public void set_PaneForeground(Brush value);
    private static void IsPaneOpenPropertyChangedCallback(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs args);
    public bool get_IsPaneOpen();
    public void set_IsPaneOpen(bool value);
    public object get_ItemsSource();
    public void set_ItemsSource(object value);
    public Style get_ItemContainerStyle();
    public void set_ItemContainerStyle(Style value);
    public Style get_HeaderItemContainerStyle();
    public void set_HeaderItemContainerStyle(Style value);
    public Style get_SeparatorItemContainerStyle();
    public void set_SeparatorItemContainerStyle(Style value);
    public DataTemplate get_ItemTemplate();
    public void set_ItemTemplate(DataTemplate value);
    public DataTemplateSelector get_ItemTemplateSelector();
    public void set_ItemTemplateSelector(DataTemplateSelector value);
    public object get_SelectedItem();
    public void set_SelectedItem(object value);
    public int get_SelectedIndex();
    public void set_SelectedIndex(int value);
    public TransitionType get_ContentTransition();
    public void set_ContentTransition(TransitionType value);
    public ICommand get_ItemCommand();
    public void set_ItemCommand(ICommand value);
    public object get_ItemCommandParameter();
    public void set_ItemCommandParameter(object value);
    public bool get_VerticalScrollBarOnLeftSide();
    public void set_VerticalScrollBarOnLeftSide(bool value);
    public bool get_ShowSelectionIndicator();
    public void set_ShowSelectionIndicator(bool value);
    public Style get_ItemFocusVisualStyle();
    protected void set_ItemFocusVisualStyle(Style value);
    public ItemCollection get_Items();
    public void RaiseItemCommand();
    private void ChangeItemFocusVisualStyle();
    [CompilerGeneratedAttribute]
private void <.ctor>b__4_0(object s, EventArgs e);
}
public class MahApps.Metro.Controls.HamburgerMenuGlyphItem : HamburgerMenuItem {
    public static DependencyProperty GlyphProperty;
    public string Glyph { get; public set; }
    private static HamburgerMenuGlyphItem();
    public string get_Glyph();
    public void set_Glyph(string value);
    protected virtual Freezable CreateInstanceCore();
}
public class MahApps.Metro.Controls.HamburgerMenuHeaderItem : HamburgerMenuItemBase {
    public static DependencyProperty LabelProperty;
    public string Label { get; public set; }
    private static HamburgerMenuHeaderItem();
    public sealed virtual string get_Label();
    public sealed virtual void set_Label(string value);
    protected virtual Freezable CreateInstanceCore();
}
public class MahApps.Metro.Controls.HamburgerMenuIconItem : HamburgerMenuItem {
    public static DependencyProperty IconProperty;
    public object Icon { get; public set; }
    private static HamburgerMenuIconItem();
    public object get_Icon();
    public void set_Icon(object value);
    protected virtual Freezable CreateInstanceCore();
}
public class MahApps.Metro.Controls.HamburgerMenuImageItem : HamburgerMenuItem {
    public static DependencyProperty ThumbnailProperty;
    public ImageSource Thumbnail { get; public set; }
    private static HamburgerMenuImageItem();
    public ImageSource get_Thumbnail();
    public void set_Thumbnail(ImageSource value);
    protected virtual Freezable CreateInstanceCore();
}
public class MahApps.Metro.Controls.HamburgerMenuItem : HamburgerMenuItemBase {
    public static DependencyProperty LabelProperty;
    public static DependencyProperty TargetPageTypeProperty;
    public static DependencyProperty CommandProperty;
    public static DependencyProperty CommandParameterProperty;
    public static DependencyProperty CommandTargetProperty;
    public static DependencyProperty IsEnabledProperty;
    public static DependencyProperty ToolTipProperty;
    private bool canExecute;
    public string Label { get; public set; }
    public Type TargetPageType { get; public set; }
    public ICommand Command { get; public set; }
    public object CommandParameter { get; public set; }
    public IInputElement CommandTarget { get; public set; }
    public bool IsEnabled { get; public set; }
    public object ToolTip { get; public set; }
    private bool CanExecute { get; private set; }
    private static HamburgerMenuItem();
    public sealed virtual string get_Label();
    public sealed virtual void set_Label(string value);
    public Type get_TargetPageType();
    public void set_TargetPageType(Type value);
    public sealed virtual ICommand get_Command();
    public void set_Command(ICommand value);
    public sealed virtual object get_CommandParameter();
    public void set_CommandParameter(object value);
    public sealed virtual IInputElement get_CommandTarget();
    public void set_CommandTarget(IInputElement value);
    public sealed virtual bool get_IsEnabled();
    public sealed virtual void set_IsEnabled(bool value);
    public sealed virtual object get_ToolTip();
    public sealed virtual void set_ToolTip(object value);
    public void RaiseCommand();
    private static void OnCommandChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void OnCommandChanged(ICommand oldCommand, ICommand newCommand);
    private void UnhookCommand(ICommand command);
    private void HookCommand(ICommand command);
    private void OnCanExecuteChanged(object sender, EventArgs e);
    private void UpdateCanExecute();
    private static object IsEnabledCoerceValueCallback(DependencyObject d, object value);
    private bool get_CanExecute();
    private void set_CanExecute(bool value);
    protected virtual Freezable CreateInstanceCore();
}
public class MahApps.Metro.Controls.HamburgerMenuItemBase : Freezable {
    public static DependencyProperty TagProperty;
    public static DependencyProperty IsVisibleProperty;
    public object Tag { get; public set; }
    public bool IsVisible { get; public set; }
    private static HamburgerMenuItemBase();
    public object get_Tag();
    public void set_Tag(object value);
    public sealed virtual bool get_IsVisible();
    public sealed virtual void set_IsVisible(bool value);
    protected virtual Freezable CreateInstanceCore();
}
public class MahApps.Metro.Controls.HamburgerMenuItemCollection : FreezableCollection`1<HamburgerMenuItemBase> {
    protected virtual Freezable CreateInstanceCore();
}
public class MahApps.Metro.Controls.HamburgerMenuItemInvokedEventArgs : RoutedEventArgs {
    [CompilerGeneratedAttribute]
private object <InvokedItem>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsItemOptions>k__BackingField;
    public object InvokedItem { get; internal set; }
    public bool IsItemOptions { get; internal set; }
    public HamburgerMenuItemInvokedEventArgs(RoutedEvent routedEvent);
    public HamburgerMenuItemInvokedEventArgs(RoutedEvent routedEvent, object source);
    [CompilerGeneratedAttribute]
public object get_InvokedItem();
    [CompilerGeneratedAttribute]
internal void set_InvokedItem(object value);
    [CompilerGeneratedAttribute]
public bool get_IsItemOptions();
    [CompilerGeneratedAttribute]
internal void set_IsItemOptions(bool value);
}
public class MahApps.Metro.Controls.HamburgerMenuItemInvokedRoutedEventHandler : MulticastDelegate {
    public HamburgerMenuItemInvokedRoutedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, HamburgerMenuItemInvokedEventArgs args);
    public virtual IAsyncResult BeginInvoke(object sender, HamburgerMenuItemInvokedEventArgs args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class MahApps.Metro.Controls.HamburgerMenuItemStyleSelector : StyleSelector {
    [CompilerGeneratedAttribute]
private bool <IsItemOptions>k__BackingField;
    public bool IsItemOptions { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsItemOptions();
    [CompilerGeneratedAttribute]
public void set_IsItemOptions(bool value);
    public virtual Style SelectStyle(object item, DependencyObject container);
}
public class MahApps.Metro.Controls.HamburgerMenuListBox : ListBox {
    private BooleanToVisibilityConverter booleanToVisibilityConverter;
    private static HamburgerMenuListBox();
    protected virtual void PrepareContainerForItemOverride(DependencyObject element, object item);
    protected virtual void ClearContainerForItemOverride(DependencyObject element, object item);
}
public class MahApps.Metro.Controls.HamburgerMenuSeparatorItem : HamburgerMenuItemBase {
    protected virtual Freezable CreateInstanceCore();
}
public static class MahApps.Metro.Controls.HeaderedControlHelper : object {
    public static DependencyProperty HeaderForegroundProperty;
    public static DependencyProperty HeaderBackgroundProperty;
    public static DependencyProperty HeaderFontFamilyProperty;
    public static DependencyProperty HeaderFontSizeProperty;
    public static DependencyProperty HeaderFontStretchProperty;
    public static DependencyProperty HeaderFontWeightProperty;
    public static DependencyProperty HeaderMarginProperty;
    public static DependencyProperty HeaderHorizontalContentAlignmentProperty;
    public static DependencyProperty HeaderVerticalContentAlignmentProperty;
    private static HeaderedControlHelper();
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.HeaderedContentControl")]
public static Brush GetHeaderForeground(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.HeaderedContentControl")]
public static void SetHeaderForeground(UIElement element, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.HeaderedContentControl")]
public static Brush GetHeaderBackground(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.HeaderedContentControl")]
public static void SetHeaderBackground(UIElement element, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.HeaderedContentControl")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TabControl")]
public static FontFamily GetHeaderFontFamily(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.HeaderedContentControl")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TabControl")]
public static void SetHeaderFontFamily(UIElement element, FontFamily value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.HeaderedContentControl")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TabControl")]
public static double GetHeaderFontSize(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.HeaderedContentControl")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TabControl")]
public static void SetHeaderFontSize(UIElement element, double value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.HeaderedContentControl")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TabControl")]
public static FontStretch GetHeaderFontStretch(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.HeaderedContentControl")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TabControl")]
public static void SetHeaderFontStretch(UIElement element, FontStretch value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.HeaderedContentControl")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TabControl")]
public static FontWeight GetHeaderFontWeight(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.HeaderedContentControl")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TabControl")]
public static void SetHeaderFontWeight(UIElement element, FontWeight value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.HeaderedContentControl")]
public static Thickness GetHeaderMargin(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.HeaderedContentControl")]
public static void SetHeaderMargin(UIElement element, Thickness value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.HeaderedContentControl")]
public static HorizontalAlignment GetHeaderHorizontalContentAlignment(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.HeaderedContentControl")]
public static void SetHeaderHorizontalContentAlignment(UIElement element, HorizontalAlignment value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.HeaderedContentControl")]
public static VerticalAlignment GetHeaderVerticalContentAlignment(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.HeaderedContentControl")]
public static void SetHeaderVerticalContentAlignment(UIElement element, VerticalAlignment value);
}
public class MahApps.Metro.Controls.HotKey : object {
    private Key _key;
    private ModifierKeys _modifierKeys;
    public Key Key { get; }
    public ModifierKeys ModifierKeys { get; }
    public HotKey(Key key, ModifierKeys modifierKeys);
    public Key get_Key();
    public ModifierKeys get_ModifierKeys();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(HotKey other);
    public virtual string ToString();
    private static string GetLocalizedKeyString(Key key);
    private static string GetLocalizedKeyStringUnsafe(int key);
}
[TemplatePartAttribute]
public class MahApps.Metro.Controls.HotKeyBox : Control {
    private static string PART_TextBox;
    public static DependencyProperty HotKeyProperty;
    public static DependencyProperty AreModifierKeysRequiredProperty;
    private static DependencyPropertyKey TextPropertyKey;
    public static DependencyProperty TextProperty;
    private TextBox _textBox;
    public HotKey HotKey { get; public set; }
    public bool AreModifierKeysRequired { get; public set; }
    public string Text { get; protected set; }
    private static HotKeyBox();
    public HotKey get_HotKey();
    public void set_HotKey(HotKey value);
    private static void OnHotKeyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public bool get_AreModifierKeysRequired();
    public void set_AreModifierKeysRequired(bool value);
    public string get_Text();
    protected void set_Text(string value);
    private static void OnGotFocus(object sender, RoutedEventArgs e);
    public virtual void OnApplyTemplate();
    private void TextBoxOnTextChanged(object sender, TextChangedEventArgs args);
    private void TextBoxOnGotFocus(object sender, RoutedEventArgs routedEventArgs);
    private void ComponentDispatcherOnThreadPreprocessMessage(MSG& msg, Boolean& handled);
    private void TextBoxOnLostFocus(object sender, RoutedEventArgs routedEventArgs);
    private void TextBoxOnPreviewKeyDown2(object sender, KeyEventArgs e);
    private static ModifierKeys GetCurrentModifierKeys();
    private void UpdateText();
}
public class MahApps.Metro.Controls.HSVColor : ValueType {
    [CompilerGeneratedAttribute]
private double <A>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Hue>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Saturation>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Value>k__BackingField;
    public double A { get; }
    public double Hue { get; }
    public double Saturation { get; }
    public double Value { get; }
    public HSVColor(Color color);
    public HSVColor(double hue, double saturation, double value);
    public HSVColor(double a, double hue, double saturation, double value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_A();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_Hue();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_Saturation();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_Value();
    public Color ToColor();
    private byte GetColorComponent(int n);
    public sealed virtual bool Equals(HSVColor other);
}
public abstract class MahApps.Metro.Controls.IconElement : Control {
}
public interface MahApps.Metro.Controls.IDataGridColumnStylesHelper {
    public abstract virtual void Attach(DataGrid aDataGrid);
    public abstract virtual void Detach();
}
public interface MahApps.Metro.Controls.IHamburgerMenuHeaderItem {
    public string Label { get; public set; }
    public abstract virtual string get_Label();
    public abstract virtual void set_Label(string value);
}
public interface MahApps.Metro.Controls.IHamburgerMenuItem {
    public string Label { get; public set; }
    public object ToolTip { get; public set; }
    public bool IsEnabled { get; public set; }
    public abstract virtual string get_Label();
    public abstract virtual void set_Label(string value);
    public abstract virtual object get_ToolTip();
    public abstract virtual void set_ToolTip(object value);
    public abstract virtual bool get_IsEnabled();
    public abstract virtual void set_IsEnabled(bool value);
}
public interface MahApps.Metro.Controls.IHamburgerMenuItemBase {
    public bool IsVisible { get; public set; }
    public abstract virtual bool get_IsVisible();
    public abstract virtual void set_IsVisible(bool value);
}
public interface MahApps.Metro.Controls.IHamburgerMenuSeparatorItem {
}
public interface MahApps.Metro.Controls.IMetroThumb {
    [CompilerGeneratedAttribute]
public abstract virtual void add_DragStarted(DragStartedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DragStarted(DragStartedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_DragDelta(DragDeltaEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DragDelta(DragDeltaEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_DragCompleted(DragCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DragCompleted(DragCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_MouseDoubleClick(MouseButtonEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_MouseDoubleClick(MouseButtonEventHandler value);
}
public class MahApps.Metro.Controls.ItemClickEventArgs : RoutedEventArgs {
    [CompilerGeneratedAttribute]
private object <ClickedItem>k__BackingField;
    public object ClickedItem { get; internal set; }
    public ItemClickEventArgs(RoutedEvent routedEvent);
    public ItemClickEventArgs(RoutedEvent routedEvent, object source);
    [CompilerGeneratedAttribute]
public object get_ClickedItem();
    [CompilerGeneratedAttribute]
internal void set_ClickedItem(object value);
}
public class MahApps.Metro.Controls.ItemClickRoutedEventHandler : MulticastDelegate {
    public ItemClickRoutedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ItemClickEventArgs args);
    public virtual IAsyncResult BeginInvoke(object sender, ItemClickEventArgs args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public static class MahApps.Metro.Controls.ItemHelper : object {
    public static DependencyProperty ActiveSelectionBackgroundBrushProperty;
    public static DependencyProperty ActiveSelectionForegroundBrushProperty;
    public static DependencyProperty SelectedBackgroundBrushProperty;
    public static DependencyProperty SelectedForegroundBrushProperty;
    public static DependencyProperty HoverBackgroundBrushProperty;
    public static DependencyProperty HoverForegroundBrushProperty;
    public static DependencyProperty HoverSelectedBackgroundBrushProperty;
    public static DependencyProperty HoverSelectedForegroundBrushProperty;
    public static DependencyProperty DisabledSelectedBackgroundBrushProperty;
    public static DependencyProperty DisabledSelectedForegroundBrushProperty;
    public static DependencyProperty DisabledBackgroundBrushProperty;
    public static DependencyProperty DisabledForegroundBrushProperty;
    private static DependencyPropertyKey IsMouseLeftButtonPressedPropertyKey;
    public static DependencyProperty IsMouseLeftButtonPressedProperty;
    public static DependencyProperty MouseLeftButtonPressedBackgroundBrushProperty;
    public static DependencyProperty MouseLeftButtonPressedForegroundBrushProperty;
    private static DependencyPropertyKey IsMouseRightButtonPressedPropertyKey;
    public static DependencyProperty IsMouseRightButtonPressedProperty;
    public static DependencyProperty MouseRightButtonPressedBackgroundBrushProperty;
    public static DependencyProperty MouseRightButtonPressedForegroundBrushProperty;
    private static ItemHelper();
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ListBoxItem")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TreeViewItem")]
public static Brush GetActiveSelectionBackgroundBrush(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ListBoxItem")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TreeViewItem")]
public static void SetActiveSelectionBackgroundBrush(UIElement element, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ListBoxItem")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TreeViewItem")]
public static Brush GetActiveSelectionForegroundBrush(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ListBoxItem")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TreeViewItem")]
public static void SetActiveSelectionForegroundBrush(UIElement element, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ListBoxItem")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TreeViewItem")]
public static Brush GetSelectedBackgroundBrush(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ListBoxItem")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TreeViewItem")]
public static void SetSelectedBackgroundBrush(UIElement element, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ListBoxItem")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TreeViewItem")]
public static Brush GetSelectedForegroundBrush(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ListBoxItem")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TreeViewItem")]
public static void SetSelectedForegroundBrush(UIElement element, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ListBoxItem")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TreeViewItem")]
public static Brush GetHoverBackgroundBrush(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ListBoxItem")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TreeViewItem")]
public static void SetHoverBackgroundBrush(UIElement element, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ListBoxItem")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TreeViewItem")]
public static Brush GetHoverForegroundBrush(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ListBoxItem")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TreeViewItem")]
public static void SetHoverForegroundBrush(UIElement element, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ListBoxItem")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TreeViewItem")]
public static Brush GetHoverSelectedBackgroundBrush(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ListBoxItem")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TreeViewItem")]
public static void SetHoverSelectedBackgroundBrush(UIElement element, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ListBoxItem")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TreeViewItem")]
public static Brush GetHoverSelectedForegroundBrush(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ListBoxItem")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TreeViewItem")]
public static void SetHoverSelectedForegroundBrush(UIElement element, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ListBoxItem")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TreeViewItem")]
public static Brush GetDisabledSelectedBackgroundBrush(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ListBoxItem")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TreeViewItem")]
public static void SetDisabledSelectedBackgroundBrush(UIElement element, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ListBoxItem")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TreeViewItem")]
public static Brush GetDisabledSelectedForegroundBrush(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ListBoxItem")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TreeViewItem")]
public static void SetDisabledSelectedForegroundBrush(UIElement element, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ListBoxItem")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TreeViewItem")]
public static Brush GetDisabledBackgroundBrush(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ListBoxItem")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TreeViewItem")]
public static void SetDisabledBackgroundBrush(UIElement element, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ListBoxItem")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TreeViewItem")]
public static Brush GetDisabledForegroundBrush(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ListBoxItem")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TreeViewItem")]
public static void SetDisabledForegroundBrush(UIElement element, Brush value);
    public static bool GetIsMouseLeftButtonPressed(UIElement element);
    private static void OnMouseLeftButtonPressedBackgroundBrushPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnLeftMouseEnter(object sender, MouseEventArgs e);
    private static void OnLeftMouseLeave(object sender, MouseEventArgs e);
    private static void OnPreviewMouseLeftButtonDown(object sender, MouseButtonEventArgs e);
    private static void OnPreviewMouseLeftButtonUp(object sender, MouseButtonEventArgs e);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ListBoxItem")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TreeViewItem")]
public static Brush GetMouseLeftButtonPressedBackgroundBrush(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ListBoxItem")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TreeViewItem")]
public static void SetMouseLeftButtonPressedBackgroundBrush(UIElement element, Brush value);
    private static void OnMouseLeftButtonPressedForegroundBrushPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ListBoxItem")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TreeViewItem")]
public static Brush GetMouseLeftButtonPressedForegroundBrush(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ListBoxItem")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TreeViewItem")]
public static void SetMouseLeftButtonPressedForegroundBrush(UIElement element, Brush value);
    public static bool GetIsMouseRightButtonPressed(UIElement element);
    private static void OnMouseRightButtonPressedBackgroundBrushPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnPreviewMouseRightButtonDown(object sender, MouseButtonEventArgs e);
    private static void OnPreviewMouseRightButtonUp(object sender, MouseButtonEventArgs e);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ListBoxItem")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TreeViewItem")]
public static Brush GetMouseRightButtonPressedBackgroundBrush(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ListBoxItem")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TreeViewItem")]
public static void SetMouseRightButtonPressedBackgroundBrush(UIElement element, Brush value);
    private static void OnMouseRightButtonPressedForegroundBrushPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ListBoxItem")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TreeViewItem")]
public static Brush GetMouseRightButtonPressedForegroundBrush(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ListBoxItem")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TreeViewItem")]
public static void SetMouseRightButtonPressedForegroundBrush(UIElement element, Brush value);
}
public interface MahApps.Metro.Controls.IWindowPlacementSettings {
    public WINDOWPLACEMENT Placement { get; public set; }
    public bool UpgradeSettings { get; public set; }
    public abstract virtual WINDOWPLACEMENT get_Placement();
    public abstract virtual void set_Placement(WINDOWPLACEMENT value);
    public abstract virtual void Reload();
    public abstract virtual bool get_UpgradeSettings();
    public abstract virtual void set_UpgradeSettings(bool value);
    public abstract virtual void Upgrade();
    public abstract virtual void Save();
}
public class MahApps.Metro.Controls.LayoutInvalidationCatcher : Decorator {
    private Planerator PlaParent { get; }
    private Planerator get_PlaParent();
    protected virtual Size MeasureOverride(Size constraint);
    protected virtual Size ArrangeOverride(Size arrangeSize);
}
public static class MahApps.Metro.Controls.MahAppsCommands : object {
    [CompilerGeneratedAttribute]
private static ICommand <ClearControlCommand>k__BackingField;
    public static ICommand ClearControlCommand { get; }
    private static MahAppsCommands();
    [CompilerGeneratedAttribute]
public static ICommand get_ClearControlCommand();
    private static void CanClearControl(CanExecuteRoutedEventArgs args);
    public static void ClearControl(ExecutedRoutedEventArgs args);
}
public class MahApps.Metro.Controls.MetroAnimatedSingleRowTabControl : BaseMetroTabControl {
}
public class MahApps.Metro.Controls.MetroAnimatedTabControl : BaseMetroTabControl {
}
public class MahApps.Metro.Controls.MetroContentControl : ContentControl {
    private Storyboard afterLoadedStoryboard;
    private Storyboard afterLoadedReverseStoryboard;
    private bool transitionLoaded;
    public static DependencyProperty ReverseTransitionProperty;
    public static DependencyProperty TransitionsEnabledProperty;
    public static DependencyProperty OnlyLoadTransitionProperty;
    public static RoutedEvent TransitionStartedEvent;
    public static RoutedEvent TransitionCompletedEvent;
    private static DependencyPropertyKey IsTransitioningPropertyKey;
    public static DependencyProperty IsTransitioningProperty;
    public bool ReverseTransition { get; public set; }
    public bool TransitionsEnabled { get; public set; }
    public bool OnlyLoadTransition { get; public set; }
    public bool IsTransitioning { get; protected set; }
    private static MetroContentControl();
    public bool get_ReverseTransition();
    public void set_ReverseTransition(bool value);
    public bool get_TransitionsEnabled();
    public void set_TransitionsEnabled(bool value);
    public bool get_OnlyLoadTransition();
    public void set_OnlyLoadTransition(bool value);
    public void add_TransitionStarted(RoutedEventHandler value);
    public void remove_TransitionStarted(RoutedEventHandler value);
    public void add_TransitionCompleted(RoutedEventHandler value);
    public void remove_TransitionCompleted(RoutedEventHandler value);
    public bool get_IsTransitioning();
    protected void set_IsTransitioning(bool value);
    private void MetroContentControlIsVisibleChanged(object sender, DependencyPropertyChangedEventArgs e);
    private void MetroContentControlUnloaded(object sender, RoutedEventArgs e);
    private void MetroContentControlLoaded(object sender, RoutedEventArgs e);
    public void Reload();
    public virtual void OnApplyTemplate();
    private void AfterLoadedStoryboardCurrentTimeInvalidated(object sender, EventArgs e);
    private void AfterLoadedStoryboardCompleted(object sender, EventArgs e);
    private void SetStoryboardEvents();
    private void UnsetStoryboardEvents();
}
public class MahApps.Metro.Controls.MetroHeader : GroupBox {
    private static MetroHeader();
    protected virtual AutomationPeer OnCreateAutomationPeer();
}
[ContentPropertyAttribute("OverlayContent")]
public class MahApps.Metro.Controls.MetroNavigationWindow : MetroWindow {
    public static DependencyProperty OverlayContentProperty;
    public static DependencyProperty PageContentProperty;
    [CompilerGeneratedAttribute]
private Uri <System.Windows.Markup.IUriContext.BaseUri>k__BackingField;
    [CompilerGeneratedAttribute]
private FragmentNavigationEventHandler FragmentNavigation;
    [CompilerGeneratedAttribute]
private NavigatingCancelEventHandler Navigating;
    [CompilerGeneratedAttribute]
private NavigationFailedEventHandler NavigationFailed;
    [CompilerGeneratedAttribute]
private NavigationProgressEventHandler NavigationProgress;
    [CompilerGeneratedAttribute]
private NavigationStoppedEventHandler NavigationStopped;
    [CompilerGeneratedAttribute]
private NavigatedEventHandler Navigated;
    [CompilerGeneratedAttribute]
private LoadCompletedEventHandler LoadCompleted;
    internal Button PART_BackButton;
    internal Button PART_ForwardButton;
    internal Label PART_Title;
    internal Frame PART_Frame;
    private bool _contentLoaded;
    public object OverlayContent { get; public set; }
    public object PageContent { get; private set; }
    public IEnumerable ForwardStack { get; }
    public IEnumerable BackStack { get; }
    public NavigationService NavigationService { get; }
    public bool CanGoBack { get; }
    public bool CanGoForward { get; }
    private Uri System.Windows.Markup.IUriContext.BaseUri { get; private set; }
    public Uri Source { get; public set; }
    private static MetroNavigationWindow();
    private void MetroNavigationWindow_Loaded(object sender, RoutedEventArgs e);
    [DebuggerNonUserCodeAttribute]
private void PART_ForwardButton_Click(object sender, RoutedEventArgs e);
    [DebuggerNonUserCodeAttribute]
private void PART_Frame_FragmentNavigation(object sender, FragmentNavigationEventArgs e);
    [DebuggerNonUserCodeAttribute]
private void PART_Frame_LoadCompleted(object sender, NavigationEventArgs e);
    [DebuggerNonUserCodeAttribute]
private void PART_Frame_NavigationStopped(object sender, NavigationEventArgs e);
    [DebuggerNonUserCodeAttribute]
private void PART_Frame_NavigationProgress(object sender, NavigationProgressEventArgs e);
    [DebuggerNonUserCodeAttribute]
private void PART_Frame_NavigationFailed(object sender, NavigationFailedEventArgs e);
    [DebuggerNonUserCodeAttribute]
private void PART_Frame_Navigating(object sender, NavigatingCancelEventArgs e);
    [DebuggerNonUserCodeAttribute]
private void PART_BackButton_Click(object sender, RoutedEventArgs e);
    [DebuggerNonUserCodeAttribute]
private void MetroNavigationWindow_Closing(object sender, CancelEventArgs e);
    [DebuggerNonUserCodeAttribute]
private void PART_Frame_Navigated(object sender, NavigationEventArgs e);
    public object get_OverlayContent();
    public void set_OverlayContent(object value);
    public object get_PageContent();
    private void set_PageContent(object value);
    public IEnumerable get_ForwardStack();
    public IEnumerable get_BackStack();
    public NavigationService get_NavigationService();
    public bool get_CanGoBack();
    public bool get_CanGoForward();
    [CompilerGeneratedAttribute]
private sealed virtual override Uri System.Windows.Markup.IUriContext.get_BaseUri();
    [CompilerGeneratedAttribute]
private sealed virtual override void System.Windows.Markup.IUriContext.set_BaseUri(Uri value);
    public Uri get_Source();
    public void set_Source(Uri value);
    [DebuggerNonUserCodeAttribute]
public void AddBackEntry(CustomContentState state);
    [DebuggerNonUserCodeAttribute]
public JournalEntry RemoveBackEntry();
    [DebuggerNonUserCodeAttribute]
public void GoBack();
    [DebuggerNonUserCodeAttribute]
public void GoForward();
    [DebuggerNonUserCodeAttribute]
public bool Navigate(object content);
    [DebuggerNonUserCodeAttribute]
public bool Navigate(Uri source);
    [DebuggerNonUserCodeAttribute]
public bool Navigate(object content, object extraData);
    [DebuggerNonUserCodeAttribute]
public bool Navigate(Uri source, object extraData);
    [DebuggerNonUserCodeAttribute]
public void StopLoading();
    [CompilerGeneratedAttribute]
public void add_FragmentNavigation(FragmentNavigationEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_FragmentNavigation(FragmentNavigationEventHandler value);
    [CompilerGeneratedAttribute]
public void add_Navigating(NavigatingCancelEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Navigating(NavigatingCancelEventHandler value);
    [CompilerGeneratedAttribute]
public void add_NavigationFailed(NavigationFailedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_NavigationFailed(NavigationFailedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_NavigationProgress(NavigationProgressEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_NavigationProgress(NavigationProgressEventHandler value);
    [CompilerGeneratedAttribute]
public void add_NavigationStopped(NavigationStoppedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_NavigationStopped(NavigationStoppedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_Navigated(NavigatedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Navigated(NavigatedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_LoadCompleted(LoadCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_LoadCompleted(LoadCompletedEventHandler value);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "5.0.17.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "5.0.17.0")]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "5.0.17.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class MahApps.Metro.Controls.MetroProgressBar : ProgressBar {
    public static DependencyProperty EllipseDiameterProperty;
    public static DependencyProperty EllipseOffsetProperty;
    private object lockme;
    private Storyboard indeterminateStoryboard;
    public double EllipseDiameter { get; public set; }
    public double EllipseOffset { get; public set; }
    private static MetroProgressBar();
    private void VisibleChangedHandler(object sender, DependencyPropertyChangedEventArgs e);
    private static void OnIsIndeterminateChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e);
    private static void ToggleIndeterminate(MetroProgressBar bar, bool oldValue, bool newValue);
    public double get_EllipseDiameter();
    public void set_EllipseDiameter(double value);
    public double get_EllipseOffset();
    public void set_EllipseOffset(double value);
    private void SizeChangedHandler(object sender, SizeChangedEventArgs e);
    private double ActualSize(bool invalidateMeasureArrange);
    private void ResetStoryboard(double width, bool removeOldStoryboard);
    private VisualState GetIndeterminate();
    private void SetEllipseDiameter(double width);
    private void SetEllipseOffset(double width);
    private double CalcContainerAnimStart(double width);
    private double CalcContainerAnimEnd(double width);
    private double CalcEllipseAnimWell(double width);
    private double CalcEllipseAnimEnd(double width);
    public virtual void OnApplyTemplate();
    private void LoadedHandler(object sender, RoutedEventArgs routedEventArgs);
    protected virtual void OnRenderSizeChanged(SizeChangedInfo sizeInfo);
    private void UpdateEllipseProperties();
}
public class MahApps.Metro.Controls.MetroTabControl : BaseMetroTabControl {
    public static DependencyProperty KeepVisualTreeInMemoryWhenChangingTabsProperty;
    public bool KeepVisualTreeInMemoryWhenChangingTabs { get; public set; }
    private static MetroTabControl();
    public bool get_KeepVisualTreeInMemoryWhenChangingTabs();
    public void set_KeepVisualTreeInMemoryWhenChangingTabs(bool value);
}
public class MahApps.Metro.Controls.MetroTabItem : TabItem {
    public static DependencyProperty CloseButtonEnabledProperty;
    public static DependencyProperty CloseTabCommandProperty;
    public static DependencyProperty CloseTabCommandParameterProperty;
    public static DependencyProperty CloseButtonMarginProperty;
    public bool CloseButtonEnabled { get; public set; }
    public ICommand CloseTabCommand { get; public set; }
    public object CloseTabCommandParameter { get; public set; }
    public Thickness CloseButtonMargin { get; public set; }
    private static MetroTabItem();
    public bool get_CloseButtonEnabled();
    public void set_CloseButtonEnabled(bool value);
    public ICommand get_CloseTabCommand();
    public void set_CloseTabCommand(ICommand value);
    public object get_CloseTabCommandParameter();
    public void set_CloseTabCommandParameter(object value);
    public Thickness get_CloseButtonMargin();
    public void set_CloseButtonMargin(Thickness value);
}
public class MahApps.Metro.Controls.MetroThumb : Thumb {
    private TouchDevice currentDevice;
    protected virtual void OnPreviewTouchDown(TouchEventArgs e);
    protected virtual void OnPreviewTouchUp(TouchEventArgs e);
    protected virtual void OnLostTouchCapture(TouchEventArgs e);
    private void ReleaseCurrentDevice();
    private void CaptureCurrentDevice(TouchEventArgs e);
    private sealed virtual override void MahApps.Metro.Controls.IMetroThumb.add_DragStarted(DragStartedEventHandler value);
    private sealed virtual override void MahApps.Metro.Controls.IMetroThumb.remove_DragStarted(DragStartedEventHandler value);
    private sealed virtual override void MahApps.Metro.Controls.IMetroThumb.add_DragDelta(DragDeltaEventHandler value);
    private sealed virtual override void MahApps.Metro.Controls.IMetroThumb.remove_DragDelta(DragDeltaEventHandler value);
    private sealed virtual override void MahApps.Metro.Controls.IMetroThumb.add_DragCompleted(DragCompletedEventHandler value);
    private sealed virtual override void MahApps.Metro.Controls.IMetroThumb.remove_DragCompleted(DragCompletedEventHandler value);
    private sealed virtual override void MahApps.Metro.Controls.IMetroThumb.add_MouseDoubleClick(MouseButtonEventHandler value);
    private sealed virtual override void MahApps.Metro.Controls.IMetroThumb.remove_MouseDoubleClick(MouseButtonEventHandler value);
}
public class MahApps.Metro.Controls.MetroThumbContentControl : ContentControlEx {
    private TouchDevice currentDevice;
    private Point startDragPoint;
    private Point startDragScreenPoint;
    private Point oldDragScreenPoint;
    public static RoutedEvent DragStartedEvent;
    public static RoutedEvent DragDeltaEvent;
    public static RoutedEvent DragCompletedEvent;
    private static DependencyPropertyKey IsDraggingPropertyKey;
    public static DependencyProperty IsDraggingProperty;
    public bool IsDragging { get; protected set; }
    private static MetroThumbContentControl();
    public sealed virtual void add_DragStarted(DragStartedEventHandler value);
    public sealed virtual void remove_DragStarted(DragStartedEventHandler value);
    public sealed virtual void add_DragDelta(DragDeltaEventHandler value);
    public sealed virtual void remove_DragDelta(DragDeltaEventHandler value);
    public sealed virtual void add_DragCompleted(DragCompletedEventHandler value);
    public sealed virtual void remove_DragCompleted(DragCompletedEventHandler value);
    public bool get_IsDragging();
    protected void set_IsDragging(bool value);
    public void CancelDragAction();
    protected virtual void OnMouseLeftButtonDown(MouseButtonEventArgs e);
    protected virtual void OnMouseLeftButtonUp(MouseButtonEventArgs e);
    private static void OnLostMouseCapture(object sender, MouseEventArgs e);
    protected virtual void OnMouseMove(MouseEventArgs e);
    protected virtual void OnPreviewTouchDown(TouchEventArgs e);
    protected virtual void OnPreviewTouchUp(TouchEventArgs e);
    protected virtual void OnLostTouchCapture(TouchEventArgs e);
    private void ReleaseCurrentDevice();
    private void CaptureCurrentDevice(TouchEventArgs e);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    private sealed virtual override void MahApps.Metro.Controls.IMetroThumb.add_MouseDoubleClick(MouseButtonEventHandler value);
    private sealed virtual override void MahApps.Metro.Controls.IMetroThumb.remove_MouseDoubleClick(MouseButtonEventHandler value);
}
public class MahApps.Metro.Controls.MetroThumbContentControlDragCompletedEventArgs : DragCompletedEventArgs {
    public MetroThumbContentControlDragCompletedEventArgs(double horizontalOffset, double verticalOffset, bool canceled);
}
public class MahApps.Metro.Controls.MetroThumbContentControlDragStartedEventArgs : DragStartedEventArgs {
    public MetroThumbContentControlDragStartedEventArgs(double horizontalOffset, double verticalOffset);
}
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
public class MahApps.Metro.Controls.MetroWindow : Window {
    private static string PART_Icon;
    private static string PART_TitleBar;
    private static string PART_WindowTitleBackground;
    private static string PART_WindowTitleThumb;
    private static string PART_FlyoutModalDragMoveThumb;
    private static string PART_LeftWindowCommands;
    private static string PART_RightWindowCommands;
    private static string PART_WindowButtonCommands;
    private static string PART_OverlayBox;
    private static string PART_MetroActiveDialogContainer;
    private static string PART_MetroInactiveDialogsContainer;
    private static string PART_FlyoutModal;
    private static string PART_Content;
    public static DependencyProperty ShowIconOnTitleBarProperty;
    public static DependencyProperty IconEdgeModeProperty;
    public static DependencyProperty IconBitmapScalingModeProperty;
    public static DependencyProperty IconScalingModeProperty;
    public static DependencyProperty ShowTitleBarProperty;
    public static DependencyProperty ShowDialogsOverTitleBarProperty;
    internal static DependencyPropertyKey IsAnyDialogOpenPropertyKey;
    public static DependencyProperty IsAnyDialogOpenProperty;
    public static DependencyProperty ShowMinButtonProperty;
    public static DependencyProperty ShowMaxRestoreButtonProperty;
    public static DependencyProperty ShowCloseButtonProperty;
    public static DependencyProperty IsMinButtonEnabledProperty;
    public static DependencyProperty IsMaxRestoreButtonEnabledProperty;
    public static DependencyProperty IsCloseButtonEnabledProperty;
    internal static DependencyPropertyKey IsCloseButtonEnabledWithDialogPropertyKey;
    public static DependencyProperty IsCloseButtonEnabledWithDialogProperty;
    public static DependencyProperty ShowSystemMenuProperty;
    public static DependencyProperty ShowSystemMenuOnRightClickProperty;
    public static DependencyProperty TitleBarHeightProperty;
    public static DependencyProperty TitleCharacterCasingProperty;
    public static DependencyProperty TitleAlignmentProperty;
    public static DependencyProperty SaveWindowPositionProperty;
    public static DependencyProperty WindowPlacementSettingsProperty;
    public static DependencyProperty TitleForegroundProperty;
    public static DependencyProperty FlyoutsProperty;
    public static DependencyProperty WindowTransitionsEnabledProperty;
    public static DependencyProperty MetroDialogOptionsProperty;
    public static DependencyProperty WindowTitleBrushProperty;
    public static DependencyProperty NonActiveWindowTitleBrushProperty;
    public static DependencyProperty NonActiveBorderBrushProperty;
    public static DependencyProperty GlowBrushProperty;
    public static DependencyProperty NonActiveGlowBrushProperty;
    public static DependencyProperty OverlayBrushProperty;
    public static DependencyProperty OverlayOpacityProperty;
    public static DependencyProperty FlyoutOverlayBrushProperty;
    public static DependencyProperty OverlayFadeInProperty;
    public static DependencyProperty OverlayFadeOutProperty;
    public static DependencyProperty IconTemplateProperty;
    public static DependencyProperty TitleTemplateProperty;
    public static DependencyProperty LeftWindowCommandsProperty;
    public static DependencyProperty RightWindowCommandsProperty;
    public static DependencyProperty WindowButtonCommandsProperty;
    public static DependencyProperty LeftWindowCommandsOverlayBehaviorProperty;
    public static DependencyProperty RightWindowCommandsOverlayBehaviorProperty;
    public static DependencyProperty WindowButtonCommandsOverlayBehaviorProperty;
    public static DependencyProperty IconOverlayBehaviorProperty;
    public static DependencyProperty UseNoneWindowStyleProperty;
    public static DependencyProperty OverrideDefaultWindowCommandsBrushProperty;
    public static DependencyProperty IsWindowDraggableProperty;
    private FrameworkElement icon;
    private UIElement titleBar;
    private UIElement titleBarBackground;
    private Thumb windowTitleThumb;
    private Thumb flyoutModalDragMoveThumb;
    private IInputElement restoreFocus;
    internal ContentPresenter LeftWindowCommandsPresenter;
    internal ContentPresenter RightWindowCommandsPresenter;
    internal ContentPresenter WindowButtonCommandsPresenter;
    internal Grid overlayBox;
    internal Grid metroActiveDialogContainer;
    internal Grid metroInactiveDialogContainer;
    private Storyboard overlayStoryboard;
    private Rectangle flyoutModal;
    public static RoutedEvent FlyoutsStatusChangedEvent;
    public static RoutedEvent WindowTransitionCompletedEvent;
    public static DependencyProperty IgnoreTaskbarOnMaximizeProperty;
    public static DependencyProperty ResizeBorderThicknessProperty;
    public static DependencyProperty KeepBorderOnMaximizeProperty;
    public static DependencyProperty TryToBeFlickerFreeProperty;
    public Brush OverrideDefaultWindowCommandsBrush { get; public set; }
    public MetroDialogSettings MetroDialogOptions { get; public set; }
    public bool IsWindowDraggable { get; public set; }
    public WindowCommandsOverlayBehavior LeftWindowCommandsOverlayBehavior { get; public set; }
    public WindowCommandsOverlayBehavior RightWindowCommandsOverlayBehavior { get; public set; }
    public OverlayBehavior WindowButtonCommandsOverlayBehavior { get; public set; }
    public OverlayBehavior IconOverlayBehavior { get; public set; }
    public bool WindowTransitionsEnabled { get; public set; }
    public FlyoutsControl Flyouts { get; public set; }
    public DataTemplate IconTemplate { get; public set; }
    public DataTemplate TitleTemplate { get; public set; }
    public WindowCommands LeftWindowCommands { get; public set; }
    public WindowCommands RightWindowCommands { get; public set; }
    public WindowButtonCommands WindowButtonCommands { get; public set; }
    public bool IgnoreTaskbarOnMaximize { get; public set; }
    public Thickness ResizeBorderThickness { get; public set; }
    public bool KeepBorderOnMaximize { get; public set; }
    public bool TryToBeFlickerFree { get; public set; }
    public Brush TitleForeground { get; public set; }
    public bool SaveWindowPosition { get; public set; }
    public IWindowPlacementSettings WindowPlacementSettings { get; public set; }
    public bool ShowIconOnTitleBar { get; public set; }
    public bool ShowDialogsOverTitleBar { get; public set; }
    public bool IsAnyDialogOpen { get; protected set; }
    public EdgeMode IconEdgeMode { get; public set; }
    public BitmapScalingMode IconBitmapScalingMode { get; public set; }
    public MultiFrameImageMode IconScalingMode { get; public set; }
    public bool ShowTitleBar { get; public set; }
    public bool UseNoneWindowStyle { get; public set; }
    public bool ShowMinButton { get; public set; }
    public bool ShowMaxRestoreButton { get; public set; }
    public bool ShowCloseButton { get; public set; }
    public bool IsMinButtonEnabled { get; public set; }
    public bool IsMaxRestoreButtonEnabled { get; public set; }
    public bool IsCloseButtonEnabled { get; public set; }
    public bool IsCloseButtonEnabledWithDialog { get; protected set; }
    public bool ShowSystemMenu { get; public set; }
    public bool ShowSystemMenuOnRightClick { get; public set; }
    public int TitleBarHeight { get; public set; }
    public CharacterCasing TitleCharacterCasing { get; public set; }
    public HorizontalAlignment TitleAlignment { get; public set; }
    public Brush WindowTitleBrush { get; public set; }
    public Brush GlowBrush { get; public set; }
    public Brush NonActiveGlowBrush { get; public set; }
    public Brush NonActiveBorderBrush { get; public set; }
    public Brush NonActiveWindowTitleBrush { get; public set; }
    public Brush OverlayBrush { get; public set; }
    public double OverlayOpacity { get; public set; }
    public Brush FlyoutOverlayBrush { get; public set; }
    public Storyboard OverlayFadeIn { get; public set; }
    public Storyboard OverlayFadeOut { get; public set; }
    protected IEnumerator LogicalChildren { get; }
    protected internal IntPtr CriticalHandle { get; }
    private static MetroWindow();
    private static void OnLeftWindowCommandsPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnRightWindowCommandsPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public void add_FlyoutsStatusChanged(RoutedEventHandler value);
    public void remove_FlyoutsStatusChanged(RoutedEventHandler value);
    public void add_WindowTransitionCompleted(RoutedEventHandler value);
    public void remove_WindowTransitionCompleted(RoutedEventHandler value);
    public Brush get_OverrideDefaultWindowCommandsBrush();
    public void set_OverrideDefaultWindowCommandsBrush(Brush value);
    public MetroDialogSettings get_MetroDialogOptions();
    public void set_MetroDialogOptions(MetroDialogSettings value);
    public bool get_IsWindowDraggable();
    public void set_IsWindowDraggable(bool value);
    public WindowCommandsOverlayBehavior get_LeftWindowCommandsOverlayBehavior();
    public void set_LeftWindowCommandsOverlayBehavior(WindowCommandsOverlayBehavior value);
    public WindowCommandsOverlayBehavior get_RightWindowCommandsOverlayBehavior();
    public void set_RightWindowCommandsOverlayBehavior(WindowCommandsOverlayBehavior value);
    public OverlayBehavior get_WindowButtonCommandsOverlayBehavior();
    public void set_WindowButtonCommandsOverlayBehavior(OverlayBehavior value);
    public OverlayBehavior get_IconOverlayBehavior();
    public void set_IconOverlayBehavior(OverlayBehavior value);
    public bool get_WindowTransitionsEnabled();
    public void set_WindowTransitionsEnabled(bool value);
    public FlyoutsControl get_Flyouts();
    public void set_Flyouts(FlyoutsControl value);
    public DataTemplate get_IconTemplate();
    public void set_IconTemplate(DataTemplate value);
    public DataTemplate get_TitleTemplate();
    public void set_TitleTemplate(DataTemplate value);
    public WindowCommands get_LeftWindowCommands();
    public void set_LeftWindowCommands(WindowCommands value);
    public WindowCommands get_RightWindowCommands();
    public void set_RightWindowCommands(WindowCommands value);
    public WindowButtonCommands get_WindowButtonCommands();
    public void set_WindowButtonCommands(WindowButtonCommands value);
    public bool get_IgnoreTaskbarOnMaximize();
    public void set_IgnoreTaskbarOnMaximize(bool value);
    public Thickness get_ResizeBorderThickness();
    public void set_ResizeBorderThickness(Thickness value);
    public bool get_KeepBorderOnMaximize();
    public void set_KeepBorderOnMaximize(bool value);
    public bool get_TryToBeFlickerFree();
    public void set_TryToBeFlickerFree(bool value);
    public Brush get_TitleForeground();
    public void set_TitleForeground(Brush value);
    public bool get_SaveWindowPosition();
    public void set_SaveWindowPosition(bool value);
    public IWindowPlacementSettings get_WindowPlacementSettings();
    public void set_WindowPlacementSettings(IWindowPlacementSettings value);
    public virtual IWindowPlacementSettings GetWindowPlacementSettings();
    public bool get_ShowIconOnTitleBar();
    public void set_ShowIconOnTitleBar(bool value);
    private static void OnShowIconOnTitleBarPropertyChangedCallback(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public bool get_ShowDialogsOverTitleBar();
    public void set_ShowDialogsOverTitleBar(bool value);
    public bool get_IsAnyDialogOpen();
    protected void set_IsAnyDialogOpen(bool value);
    public EdgeMode get_IconEdgeMode();
    public void set_IconEdgeMode(EdgeMode value);
    public BitmapScalingMode get_IconBitmapScalingMode();
    public void set_IconBitmapScalingMode(BitmapScalingMode value);
    public MultiFrameImageMode get_IconScalingMode();
    public void set_IconScalingMode(MultiFrameImageMode value);
    public bool get_ShowTitleBar();
    public void set_ShowTitleBar(bool value);
    private static void OnShowTitleBarPropertyChangedCallback(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static object OnShowTitleBarCoerceValueCallback(DependencyObject d, object value);
    public bool get_UseNoneWindowStyle();
    public void set_UseNoneWindowStyle(bool value);
    private static void OnUseNoneWindowStylePropertyChangedCallback(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public bool get_ShowMinButton();
    public void set_ShowMinButton(bool value);
    public bool get_ShowMaxRestoreButton();
    public void set_ShowMaxRestoreButton(bool value);
    public bool get_ShowCloseButton();
    public void set_ShowCloseButton(bool value);
    public bool get_IsMinButtonEnabled();
    public void set_IsMinButtonEnabled(bool value);
    public bool get_IsMaxRestoreButtonEnabled();
    public void set_IsMaxRestoreButtonEnabled(bool value);
    public bool get_IsCloseButtonEnabled();
    public void set_IsCloseButtonEnabled(bool value);
    public bool get_IsCloseButtonEnabledWithDialog();
    protected void set_IsCloseButtonEnabledWithDialog(bool value);
    public bool get_ShowSystemMenu();
    public void set_ShowSystemMenu(bool value);
    public bool get_ShowSystemMenuOnRightClick();
    public void set_ShowSystemMenuOnRightClick(bool value);
    public int get_TitleBarHeight();
    public void set_TitleBarHeight(int value);
    private static void TitleBarHeightPropertyChangedCallback(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e);
    private void SetVisibiltyForIcon();
    private void SetVisibiltyForAllTitleElements();
    public CharacterCasing get_TitleCharacterCasing();
    public void set_TitleCharacterCasing(CharacterCasing value);
    public HorizontalAlignment get_TitleAlignment();
    public void set_TitleAlignment(HorizontalAlignment value);
    private static void OnTitleAlignmentChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e);
    public Brush get_WindowTitleBrush();
    public void set_WindowTitleBrush(Brush value);
    public Brush get_GlowBrush();
    public void set_GlowBrush(Brush value);
    public Brush get_NonActiveGlowBrush();
    public void set_NonActiveGlowBrush(Brush value);
    public Brush get_NonActiveBorderBrush();
    public void set_NonActiveBorderBrush(Brush value);
    public Brush get_NonActiveWindowTitleBrush();
    public void set_NonActiveWindowTitleBrush(Brush value);
    public Brush get_OverlayBrush();
    public void set_OverlayBrush(Brush value);
    public double get_OverlayOpacity();
    public void set_OverlayOpacity(double value);
    public Brush get_FlyoutOverlayBrush();
    public void set_FlyoutOverlayBrush(Brush value);
    public Storyboard get_OverlayFadeIn();
    public void set_OverlayFadeIn(Storyboard value);
    public Storyboard get_OverlayFadeOut();
    public void set_OverlayFadeOut(Storyboard value);
    private bool CanUseOverlayFadingStoryboard(Storyboard sb, DoubleAnimation& animation);
    public Task ShowOverlayAsync();
    public Task HideOverlayAsync();
    public bool IsOverlayVisible();
    public void ShowOverlay();
    public void HideOverlay();
    public void StoreFocus(IInputElement thisElement);
    internal void RestoreFocus();
    public void ResetStoredFocus();
    private void MetroWindow_Loaded(object sender, RoutedEventArgs e);
    private void InitializeWindowChromeBehavior();
    private void InitializeGlowWindowBehavior();
    private void InitializeSettingsBehavior();
    private void InitializeBehaviors();
    [AsyncStateMachineAttribute("MahApps.Metro.Controls.MetroWindow/<OnClosing>d__268")]
protected virtual void OnClosing(CancelEventArgs e);
    private void MetroWindow_DataContextChanged(object sender, DependencyPropertyChangedEventArgs e);
    private void MetroWindow_SizeChanged(object sender, RoutedEventArgs e);
    private void ThemeManagerOnIsThemeChanged(object sender, ThemeChangedEventArgs e);
    private void FlyoutsPreviewMouseDown(object sender, MouseButtonEventArgs e);
    private static void UpdateLogicalChilds(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e);
    protected virtual IEnumerator get_LogicalChildren();
    public virtual void OnApplyTemplate();
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected internal IntPtr get_CriticalHandle();
    private void ClearWindowEvents();
    private void SetWindowEvents();
    private void IconMouseDown(object sender, MouseButtonEventArgs e);
    private void WindowTitleThumbOnPreviewMouseLeftButtonUp(object sender, MouseButtonEventArgs e);
    private void WindowTitleThumbMoveOnDragDelta(object sender, DragDeltaEventArgs dragDeltaEventArgs);
    private void WindowTitleThumbChangeWindowStateOnMouseDoubleClick(object sender, MouseButtonEventArgs mouseButtonEventArgs);
    private void WindowTitleThumbSystemMenuOnMouseRightButtonUp(object sender, MouseButtonEventArgs e);
    internal static void DoWindowTitleThumbOnPreviewMouseLeftButtonUp(MetroWindow window, MouseButtonEventArgs mouseButtonEventArgs);
    internal static void DoWindowTitleThumbMoveOnDragDelta(IMetroThumb thumb, MetroWindow window, DragDeltaEventArgs dragDeltaEventArgs);
    internal static void DoWindowTitleThumbChangeWindowStateOnMouseDoubleClick(MetroWindow window, MouseButtonEventArgs mouseButtonEventArgs);
    internal static void DoWindowTitleThumbSystemMenuOnMouseRightButtonUp(MetroWindow window, MouseButtonEventArgs e);
    internal T GetPart(string name);
    internal DependencyObject GetPart(string name);
    internal void HandleFlyoutStatusChange(Flyout flyout, IList`1<Flyout> visibleFlyouts);
    [CompilerGeneratedAttribute]
private void <RestoreFocus>b__259_0();
    [CompilerGeneratedAttribute]
private void <MetroWindow_Loaded>b__263_0(object o, RoutedEventArgs args);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__0(CancelEventArgs e);
    [CompilerGeneratedAttribute]
private void <OnApplyTemplate>b__276_0(object sender, RoutedEventArgs args);
}
[ExtensionAttribute]
internal static class MahApps.Metro.Controls.MetroWindowHelpers : object {
    [ExtensionAttribute]
public static void SetIsHitTestVisibleInChromeProperty(MetroWindow window, string name, bool hitTestVisible);
    [ExtensionAttribute]
public static void SetWindowChromeResizeGripDirection(MetroWindow window, string name, ResizeGripDirection direction);
    [ExtensionAttribute]
public static void HandleWindowCommandsForFlyouts(MetroWindow window, IEnumerable`1<Flyout> flyouts);
    private static Theme GetCurrentTheme(MetroWindow window);
    [ExtensionAttribute]
public static void ResetAllWindowCommandsBrush(MetroWindow window);
    [ExtensionAttribute]
public static void UpdateWindowCommandsForFlyout(MetroWindow window, Flyout flyout);
    [ExtensionAttribute]
private static void ChangeAllWindowCommandsBrush(MetroWindow window, Brush foregroundBrush, Theme currentAppTheme);
    [ExtensionAttribute]
private static void ChangeAllWindowButtonCommandsBrush(MetroWindow window, Brush foregroundBrush, Theme currentAppTheme, FlyoutTheme flyoutTheme, Position position);
}
public enum MahApps.Metro.Controls.MouseWheelChange : Enum {
    public int value__;
    public static MouseWheelChange SmallChange;
    public static MouseWheelChange LargeChange;
}
public enum MahApps.Metro.Controls.MouseWheelState : Enum {
    public int value__;
    public static MouseWheelState None;
    public static MouseWheelState ControlFocused;
    public static MouseWheelState MouseHover;
}
public class MahApps.Metro.Controls.MultiFrameImage : Image {
    public static DependencyProperty MultiFrameImageModeProperty;
    private List`1<BitmapSource> _frames;
    public MultiFrameImageMode MultiFrameImageMode { get; public set; }
    private static MultiFrameImage();
    public MultiFrameImageMode get_MultiFrameImageMode();
    public void set_MultiFrameImageMode(MultiFrameImageMode value);
    private static void OnSourceChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void UpdateFrameList();
    protected virtual void OnRender(DrawingContext dc);
}
public enum MahApps.Metro.Controls.MultiFrameImageMode : Enum {
    public int value__;
    public static MultiFrameImageMode ScaleDownLargerFrame;
    public static MultiFrameImageMode NoScaleSmallerFrame;
}
public static class MahApps.Metro.Controls.MultiSelectorHelper : object {
    public static DependencyProperty SelectedItemsProperty;
    private static DependencyProperty SelectedItemBindingProperty;
    private static MultiSelectorHelper();
    private static void OnSelectedItemsChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ListBox")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.Primitives.MultiSelector")]
public static IList GetSelectedItems(DependencyObject element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ListBox")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.Primitives.MultiSelector")]
public static void SetSelectedItems(DependencyObject element, IList value);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ListBox")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.Primitives.MultiSelector")]
private static MultiSelectorBinding GetSelectedItemBinding(DependencyObject element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ListBox")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.Primitives.MultiSelector")]
private static void SetSelectedItemBinding(DependencyObject element, MultiSelectorBinding value);
}
public enum MahApps.Metro.Controls.NavigationButtonsPosition : Enum {
    public int value__;
    public static NavigationButtonsPosition Inside;
    public static NavigationButtonsPosition Outside;
}
public enum MahApps.Metro.Controls.NavigationIndexPlacement : Enum {
    public int value__;
    public static NavigationIndexPlacement Left;
    public static NavigationIndexPlacement Right;
    public static NavigationIndexPlacement Top;
    public static NavigationIndexPlacement Bottom;
    public static NavigationIndexPlacement LeftOverItem;
    public static NavigationIndexPlacement RightOverItem;
    public static NavigationIndexPlacement TopOverItem;
    public static NavigationIndexPlacement BottomOverItem;
}
[FlagsAttribute]
public enum MahApps.Metro.Controls.NumericInput : Enum {
    public int value__;
    public static NumericInput Numbers;
    public static NumericInput Decimal;
    public static NumericInput All;
}
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
public class MahApps.Metro.Controls.NumericUpDown : Control {
    private static string PART_NumericDown;
    private static string PART_NumericUp;
    private static string PART_TextBox;
    private static string PART_ContentHost;
    private static double DefaultInterval;
    private static int DefaultDelay;
    private static Regex RegexStringFormatHexadecimal;
    private static string RawRegexNumberString;
    private Regex regexNumber;
    private static Regex RegexHexadecimal;
    private static Regex RegexStringFormat;
    private Lazy`1<PropertyInfo> handlesMouseWheelScrolling;
    private double internalIntervalMultiplierForCalculation;
    private double internalLargeChange;
    private double intervalValueSinceReset;
    private bool manualChange;
    private RepeatButton repeatDown;
    private RepeatButton repeatUp;
    private TextBox valueTextBox;
    private ScrollViewer scrollViewer;
    public static RoutedEvent ValueIncrementedEvent;
    public static RoutedEvent ValueDecrementedEvent;
    public static RoutedEvent DelayChangedEvent;
    public static RoutedEvent MaximumReachedEvent;
    public static RoutedEvent MinimumReachedEvent;
    public static RoutedEvent ValueChangedEvent;
    public static DependencyProperty DelayProperty;
    public static DependencyProperty TextAlignmentProperty;
    public static DependencyProperty SpeedupProperty;
    public static DependencyProperty IsReadOnlyProperty;
    public static DependencyProperty StringFormatProperty;
    public static DependencyProperty InterceptArrowKeysProperty;
    public static DependencyProperty InterceptMouseWheelProperty;
    public static DependencyProperty InterceptManualEnterProperty;
    public static DependencyProperty ValueProperty;
    public static DependencyProperty MinimumProperty;
    public static DependencyProperty MaximumProperty;
    public static DependencyProperty IntervalProperty;
    public static DependencyProperty TrackMouseWheelWhenMouseOverProperty;
    public static DependencyProperty ButtonsAlignmentProperty;
    public static DependencyProperty HideUpDownButtonsProperty;
    public static DependencyProperty UpDownButtonsWidthProperty;
    public static DependencyProperty UpDownButtonsFocusableProperty;
    public static DependencyProperty SwitchUpDownButtonsProperty;
    public static DependencyProperty ChangeValueOnTextChangedProperty;
    public static DependencyProperty CultureProperty;
    public static DependencyProperty NumericInputModeProperty;
    public static DependencyProperty DecimalPointCorrectionProperty;
    public static DependencyProperty SnapToMultipleOfIntervalProperty;
    public static DependencyProperty ParsingNumberStyleProperty;
    [BindableAttribute("True")]
[DefaultValueAttribute("500")]
[CategoryAttribute("Behavior")]
public int Delay { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Common")]
[DefaultValueAttribute]
public TextAlignment TextAlignment { get; public set; }
    [CategoryAttribute("Common")]
[DefaultValueAttribute("True")]
public bool Speedup { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Appearance")]
[DefaultValueAttribute("False")]
public bool IsReadOnly { get; public set; }
    [CategoryAttribute("Common")]
public string StringFormat { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Behavior")]
[DefaultValueAttribute("True")]
public bool InterceptArrowKeys { get; public set; }
    [CategoryAttribute("Behavior")]
[DefaultValueAttribute("True")]
public bool InterceptMouseWheel { get; public set; }
    [CategoryAttribute("Behavior")]
[DefaultValueAttribute("True")]
public bool InterceptManualEnter { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Common")]
[DefaultValueAttribute("")]
public Nullable`1<double> Value { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Common")]
[DefaultValueAttribute("-1,7976931348623157E+308")]
public double Minimum { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Common")]
[DefaultValueAttribute("1,7976931348623157E+308")]
public double Maximum { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Behavior")]
[DefaultValueAttribute("1")]
public double Interval { get; public set; }
    [CategoryAttribute("Behavior")]
[DefaultValueAttribute("False")]
public bool TrackMouseWheelWhenMouseOver { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Appearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ButtonsAlignment ButtonsAlignment { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Appearance")]
[DefaultValueAttribute("False")]
public bool HideUpDownButtons { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Appearance")]
[DefaultValueAttribute("20")]
public double UpDownButtonsWidth { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Behavior")]
[DefaultValueAttribute("True")]
public bool UpDownButtonsFocusable { get; public set; }
    [CategoryAttribute("Appearance")]
[DefaultValueAttribute("False")]
public bool SwitchUpDownButtons { get; public set; }
    [CategoryAttribute("Behavior")]
public bool ChangeValueOnTextChanged { get; public set; }
    [CategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
public CultureInfo Culture { get; public set; }
    [CategoryAttribute("Common")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public NumericInput NumericInputMode { get; public set; }
    public DecimalPointCorrectionMode DecimalPointCorrection { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Common")]
[DefaultValueAttribute("False")]
public bool SnapToMultipleOfInterval { get; public set; }
    [CategoryAttribute("Common")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public NumberStyles ParsingNumberStyle { get; public set; }
    private CultureInfo SpecificCultureInfo { get; }
    private static NumericUpDown();
    public void add_ValueIncremented(NumericUpDownChangedRoutedEventHandler value);
    public void remove_ValueIncremented(NumericUpDownChangedRoutedEventHandler value);
    public void add_ValueDecremented(NumericUpDownChangedRoutedEventHandler value);
    public void remove_ValueDecremented(NumericUpDownChangedRoutedEventHandler value);
    public void add_DelayChanged(RoutedEventHandler value);
    public void remove_DelayChanged(RoutedEventHandler value);
    public void add_MaximumReached(RoutedEventHandler value);
    public void remove_MaximumReached(RoutedEventHandler value);
    public void add_MinimumReached(RoutedEventHandler value);
    public void remove_MinimumReached(RoutedEventHandler value);
    public void add_ValueChanged(RoutedPropertyChangedEventHandler`1<Nullable`1<double>> value);
    public void remove_ValueChanged(RoutedPropertyChangedEventHandler`1<Nullable`1<double>> value);
    private static void OnDelayPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public int get_Delay();
    public void set_Delay(int value);
    public TextAlignment get_TextAlignment();
    public void set_TextAlignment(TextAlignment value);
    private static void OnSpeedupPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public bool get_Speedup();
    public void set_Speedup(bool value);
    private static void OnIsReadOnlyPropertyChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e);
    public bool get_IsReadOnly();
    public void set_IsReadOnly(bool value);
    private static void OnStringFormatPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static object CoerceStringFormat(DependencyObject d, object baseValue);
    public string get_StringFormat();
    public void set_StringFormat(string value);
    public bool get_InterceptArrowKeys();
    public void set_InterceptArrowKeys(bool value);
    public bool get_InterceptMouseWheel();
    public void set_InterceptMouseWheel(bool value);
    private static void OnInterceptManualEnterPropertyChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e);
    public bool get_InterceptManualEnter();
    public void set_InterceptManualEnter(bool value);
    private static void OnValuePropertyChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e);
    private static object CoerceValue(DependencyObject d, object value);
    public Nullable`1<double> get_Value();
    public void set_Value(Nullable`1<double> value);
    private static void OnMinimumPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public double get_Minimum();
    public void set_Minimum(double value);
    private static void OnMaximumPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static object CoerceMaximum(DependencyObject d, object value);
    public double get_Maximum();
    public void set_Maximum(double value);
    private static void OnIntervalPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public double get_Interval();
    public void set_Interval(double value);
    public bool get_TrackMouseWheelWhenMouseOver();
    public void set_TrackMouseWheelWhenMouseOver(bool value);
    public ButtonsAlignment get_ButtonsAlignment();
    public void set_ButtonsAlignment(ButtonsAlignment value);
    public bool get_HideUpDownButtons();
    public void set_HideUpDownButtons(bool value);
    public double get_UpDownButtonsWidth();
    public void set_UpDownButtonsWidth(double value);
    public bool get_UpDownButtonsFocusable();
    public void set_UpDownButtonsFocusable(bool value);
    public bool get_SwitchUpDownButtons();
    public void set_SwitchUpDownButtons(bool value);
    public bool get_ChangeValueOnTextChanged();
    public void set_ChangeValueOnTextChanged(bool value);
    private static void OnCulturePropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public CultureInfo get_Culture();
    public void set_Culture(CultureInfo value);
    private static void OnNumericInputModePropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public NumericInput get_NumericInputMode();
    public void set_NumericInputMode(NumericInput value);
    public DecimalPointCorrectionMode get_DecimalPointCorrection();
    public void set_DecimalPointCorrection(DecimalPointCorrectionMode value);
    private static void OnSnapToMultipleOfIntervalPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public bool get_SnapToMultipleOfInterval();
    public void set_SnapToMultipleOfInterval(bool value);
    public NumberStyles get_ParsingNumberStyle();
    public void set_ParsingNumberStyle(NumberStyles value);
    private CultureInfo get_SpecificCultureInfo();
    private static void OnGotFocus(object sender, RoutedEventArgs e);
    public virtual void OnApplyTemplate();
    private void ToggleReadOnlyMode(bool isReadOnly);
    public void SelectAll();
    private void RaiseChangeDelay();
    protected virtual void OnDelayChanged(int oldDelay, int newDelay);
    protected virtual void OnSpeedupChanged(bool oldSpeedup, bool newSpeedup);
    protected virtual void OnMaximumChanged(double oldMaximum, double newMaximum);
    protected virtual void OnMinimumChanged(double oldMinimum, double newMinimum);
    protected virtual void OnPreviewKeyDown(KeyEventArgs e);
    protected virtual void OnPreviewKeyUp(KeyEventArgs e);
    protected virtual void OnPreviewMouseWheel(MouseWheelEventArgs e);
    protected void OnPreviewTextInput(object sender, TextCompositionEventArgs e);
    protected virtual void OnValueChanged(Nullable`1<double> oldValue, Nullable`1<double> newValue);
    private void InternalSetText(Nullable`1<double> newValue);
    private static string FormattedValueString(double newValue, string format, CultureInfo culture);
    private static double FormattedValue(double newValue, string format, CultureInfo culture);
    private static double ConvertStringFormatValue(double value, string format);
    private static bool TryFormatHexadecimal(double newValue, string format, CultureInfo culture, String& output);
    private ScrollViewer TryFindScrollViewer();
    private void ChangeValueWithSpeedUp(bool toPositive);
    private void ChangeValueInternal(bool addInterval);
    private void ChangeValueInternal(double interval);
    private void ChangeValueBy(double difference);
    private void SetValueTo(double newValue);
    private void EnableDisableDown();
    private void EnableDisableUp();
    private void EnableDisableUpDown();
    private void OnTextBoxKeyDown(object sender, KeyEventArgs e);
    [AsyncStateMachineAttribute("MahApps.Metro.Controls.NumericUpDown/<SimulateDecimalPointKeyPress>d__187")]
private static void SimulateDecimalPointKeyPress(TextBoxBase textBox, DecimalPointCorrectionMode mode, CultureInfo culture);
    private void OnTextBoxLostFocus(object sender, RoutedEventArgs e);
    private void ChangeValueFromTextInput(TextBox textBox);
    private void OnTextChanged(object sender, TextChangedEventArgs e);
    private void OnValueTextBoxPaste(object sender, DataObjectPastingEventArgs e);
    private void ResetInternal();
    private bool ValidateText(string text, Double& convertedValue);
    private bool ConvertNumber(string text, Double& convertedValue);
    private string TryGetNumberFromText(string text, bool isHex);
    [CompilerGeneratedAttribute]
private void <OnApplyTemplate>b__159_0(object o, RoutedEventArgs e);
    [CompilerGeneratedAttribute]
private void <OnApplyTemplate>b__159_1(object o, RoutedEventArgs e);
    [CompilerGeneratedAttribute]
private void <OnApplyTemplate>b__159_2(object o, MouseButtonEventArgs e);
    [CompilerGeneratedAttribute]
private void <OnApplyTemplate>b__159_3(object o, MouseButtonEventArgs e);
    [CompilerGeneratedAttribute]
private PropertyInfo <TryFindScrollViewer>b__177_0();
    [CompilerGeneratedAttribute]
private bool <ValidateText>b__193_0(char c);
    [CompilerGeneratedAttribute]
private bool <ValidateText>b__193_1(char c);
    [CompilerGeneratedAttribute]
private bool <ValidateText>b__193_2(char c);
    [CompilerGeneratedAttribute]
private bool <ConvertNumber>b__194_0(char c);
}
public class MahApps.Metro.Controls.NumericUpDownChangedRoutedEventArgs : RoutedEventArgs {
    [CompilerGeneratedAttribute]
private double <Interval>k__BackingField;
    public double Interval { get; public set; }
    public NumericUpDownChangedRoutedEventArgs(RoutedEvent routedEvent, double interval);
    [CompilerGeneratedAttribute]
public double get_Interval();
    [CompilerGeneratedAttribute]
public void set_Interval(double value);
}
public class MahApps.Metro.Controls.NumericUpDownChangedRoutedEventHandler : MulticastDelegate {
    public NumericUpDownChangedRoutedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, NumericUpDownChangedRoutedEventArgs args);
    public virtual IAsyncResult BeginInvoke(object sender, NumericUpDownChangedRoutedEventArgs args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[FlagsAttribute]
public enum MahApps.Metro.Controls.OverlayBehavior : Enum {
    public int value__;
    public static OverlayBehavior Never;
    public static OverlayBehavior Flyouts;
    public static OverlayBehavior HiddenTitleBar;
    public static OverlayBehavior Always;
}
public class MahApps.Metro.Controls.PasswordBoxHelper : object {
    public static DependencyProperty CapsLockIconProperty;
    public static DependencyProperty CapsLockWarningToolTipProperty;
    public static DependencyProperty RevealButtonContentProperty;
    public static DependencyProperty RevealButtonContentTemplateProperty;
    private static PasswordBoxHelper();
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.PasswordBox")]
public static object GetCapsLockIcon(PasswordBox element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.PasswordBox")]
public static void SetCapsLockIcon(PasswordBox element, object value);
    private static void ShowCapslockWarningChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void RefreshCapslockStatus(object sender, RoutedEventArgs e);
    private static void HandlePasswordBoxLostFocus(object sender, RoutedEventArgs e);
    private static FrameworkElement FindCapsLockIndicator(Control pb);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.PasswordBox")]
public static object GetCapsLockWarningToolTip(PasswordBox element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.PasswordBox")]
public static void SetCapsLockWarningToolTip(PasswordBox element, object value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.PasswordBox")]
public static object GetRevealButtonContent(DependencyObject d);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.PasswordBox")]
public static void SetRevealButtonContent(DependencyObject obj, object value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.PasswordBox")]
public static DataTemplate GetRevealButtonContentTemplate(DependencyObject d);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.PasswordBox")]
public static void SetRevealButtonContentTemplate(DependencyObject obj, DataTemplate value);
}
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
public class MahApps.Metro.Controls.Pivot : ItemsControl {
    private ScrollViewer scroller;
    private ListView headers;
    private PivotItem selectedItem;
    private ScrollViewerOffsetMediator mediator;
    internal int internalIndex;
    public static RoutedEvent SelectionChangedEvent;
    public static DependencyProperty HeaderProperty;
    public static DependencyProperty HeaderTemplateProperty;
    public static DependencyProperty SelectedIndexProperty;
    public DataTemplate HeaderTemplate { get; public set; }
    public string Header { get; public set; }
    public int SelectedIndex { get; public set; }
    private static Pivot();
    public DataTemplate get_HeaderTemplate();
    public void set_HeaderTemplate(DataTemplate value);
    public string get_Header();
    public void set_Header(string value);
    public int get_SelectedIndex();
    public void set_SelectedIndex(int value);
    public void add_SelectionChanged(RoutedEventHandler value);
    public void remove_SelectionChanged(RoutedEventHandler value);
    public void GoToItem(PivotItem item);
    private void sb_Completed(object sender, EventArgs e);
    public virtual void OnApplyTemplate();
    private void scroller_MouseWheel(object sender, MouseWheelEventArgs e);
    private void headers_SelectionChanged(object sender, SelectionChangedEventArgs e);
    private void scroller_ScrollChanged(object sender, ScrollChangedEventArgs e);
    private static void SelectedItemChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e);
}
public class MahApps.Metro.Controls.PivotItem : ContentControl {
    public static DependencyProperty HeaderProperty;
    public string Header { get; public set; }
    private static PivotItem();
    public string get_Header();
    public void set_Header(string value);
}
[ContentPropertyAttribute("Child")]
public class MahApps.Metro.Controls.Planerator : FrameworkElement {
    public static DependencyProperty RotationXProperty;
    public static DependencyProperty RotationYProperty;
    public static DependencyProperty RotationZProperty;
    public static DependencyProperty FieldOfViewProperty;
    private static Point3D[] Mesh;
    private static Point[] TexCoords;
    private static Int32[] Indices;
    private static Vector3D XAxis;
    private static Vector3D YAxis;
    private static Vector3D ZAxis;
    private QuaternionRotation3D quaternionRotation;
    private RotateTransform3D rotationTransform;
    private ScaleTransform3D scaleTransform;
    private Decorator logicalChild;
    private FrameworkElement originalChild;
    private Viewport3D viewport3D;
    private FrameworkElement visualChild;
    private Viewport2DVisual3D frontModel;
    public double RotationX { get; public set; }
    public double RotationY { get; public set; }
    public double RotationZ { get; public set; }
    public double FieldOfView { get; public set; }
    public FrameworkElement Child { get; public set; }
    protected int VisualChildrenCount { get; }
    private static Planerator();
    public double get_RotationX();
    public void set_RotationX(double value);
    public double get_RotationY();
    public void set_RotationY(double value);
    public double get_RotationZ();
    public void set_RotationZ(double value);
    public double get_FieldOfView();
    public void set_FieldOfView(double value);
    public FrameworkElement get_Child();
    public void set_Child(FrameworkElement value);
    protected virtual int get_VisualChildrenCount();
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual Size ArrangeOverride(Size finalSize);
    protected virtual Visual GetVisualChild(int index);
    private FrameworkElement CreateVisualChild();
    public void Refresh();
    private void SetCachingForObject(DependencyObject d);
    private void UpdateRotation();
    private void Update3D();
}
public enum MahApps.Metro.Controls.Position : Enum {
    public int value__;
    public static Position Left;
    public static Position Right;
    public static Position Top;
    public static Position Bottom;
}
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
public class MahApps.Metro.Controls.ProgressRing : Control {
    private static DependencyPropertyKey BindableWidthPropertyKey;
    public static DependencyProperty BindableWidthProperty;
    public static DependencyProperty IsActiveProperty;
    public static DependencyProperty IsLargeProperty;
    private static DependencyPropertyKey MaxSideLengthPropertyKey;
    public static DependencyProperty MaxSideLengthProperty;
    private static DependencyPropertyKey EllipseDiameterPropertyKey;
    public static DependencyProperty EllipseDiameterProperty;
    private static DependencyPropertyKey EllipseOffsetPropertyKey;
    public static DependencyProperty EllipseOffsetProperty;
    public static DependencyProperty EllipseDiameterScaleProperty;
    private List`1<Action> deferredActions;
    public double BindableWidth { get; protected set; }
    public bool IsActive { get; public set; }
    public bool IsLarge { get; public set; }
    public double MaxSideLength { get; protected set; }
    public double EllipseDiameter { get; protected set; }
    public Thickness EllipseOffset { get; protected set; }
    public double EllipseDiameterScale { get; public set; }
    private static ProgressRing();
    public double get_BindableWidth();
    protected void set_BindableWidth(double value);
    public bool get_IsActive();
    public void set_IsActive(bool value);
    public bool get_IsLarge();
    public void set_IsLarge(bool value);
    public double get_MaxSideLength();
    protected void set_MaxSideLength(double value);
    public double get_EllipseDiameter();
    protected void set_EllipseDiameter(double value);
    public Thickness get_EllipseOffset();
    protected void set_EllipseOffset(Thickness value);
    public double get_EllipseDiameterScale();
    public void set_EllipseDiameterScale(double value);
    private static void OnBindableWidthPropertyChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs dependencyPropertyChangedEventArgs);
    private void SetMaxSideLength(double width);
    private void SetEllipseDiameter(double width);
    private void SetEllipseOffset(double width);
    private static void OnIsLargePropertyChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs dependencyPropertyChangedEventArgs);
    private void UpdateLargeState();
    private void OnSizeChanged(object sender, SizeChangedEventArgs sizeChangedEventArgs);
    private static void OnIsActivePropertyChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs dependencyPropertyChangedEventArgs);
    private void UpdateActiveState();
    public virtual void OnApplyTemplate();
    [CompilerGeneratedAttribute]
private void <UpdateLargeState>b__40_0();
    [CompilerGeneratedAttribute]
private void <UpdateLargeState>b__40_1();
    [CompilerGeneratedAttribute]
private void <UpdateActiveState>b__43_0();
    [CompilerGeneratedAttribute]
private void <UpdateActiveState>b__43_1();
}
public static class MahApps.Metro.Controls.RadioButtonHelper : object {
    public static DependencyProperty RadioSizeProperty;
    public static DependencyProperty RadioCheckSizeProperty;
    public static DependencyProperty RadioStrokeThicknessProperty;
    public static DependencyProperty ForegroundPointerOverProperty;
    public static DependencyProperty ForegroundPressedProperty;
    public static DependencyProperty ForegroundDisabledProperty;
    public static DependencyProperty BackgroundPointerOverProperty;
    public static DependencyProperty BackgroundPressedProperty;
    public static DependencyProperty BackgroundDisabledProperty;
    public static DependencyProperty BorderBrushPointerOverProperty;
    public static DependencyProperty BorderBrushPressedProperty;
    public static DependencyProperty BorderBrushDisabledProperty;
    public static DependencyProperty OuterEllipseFillProperty;
    public static DependencyProperty OuterEllipseFillPointerOverProperty;
    public static DependencyProperty OuterEllipseFillPressedProperty;
    public static DependencyProperty OuterEllipseFillDisabledProperty;
    public static DependencyProperty OuterEllipseStrokeProperty;
    public static DependencyProperty OuterEllipseStrokePointerOverProperty;
    public static DependencyProperty OuterEllipseStrokePressedProperty;
    public static DependencyProperty OuterEllipseStrokeDisabledProperty;
    public static DependencyProperty OuterEllipseCheckedFillProperty;
    public static DependencyProperty OuterEllipseCheckedFillPointerOverProperty;
    public static DependencyProperty OuterEllipseCheckedFillPressedProperty;
    public static DependencyProperty OuterEllipseCheckedFillDisabledProperty;
    public static DependencyProperty OuterEllipseCheckedStrokeProperty;
    public static DependencyProperty OuterEllipseCheckedStrokePointerOverProperty;
    public static DependencyProperty OuterEllipseCheckedStrokePressedProperty;
    public static DependencyProperty OuterEllipseCheckedStrokeDisabledProperty;
    public static DependencyProperty CheckGlyphFillProperty;
    public static DependencyProperty CheckGlyphFillPointerOverProperty;
    public static DependencyProperty CheckGlyphFillPressedProperty;
    public static DependencyProperty CheckGlyphFillDisabledProperty;
    public static DependencyProperty CheckGlyphStrokeProperty;
    public static DependencyProperty CheckGlyphStrokePointerOverProperty;
    public static DependencyProperty CheckGlyphStrokePressedProperty;
    public static DependencyProperty CheckGlyphStrokeDisabledProperty;
    private static RadioButtonHelper();
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static double GetRadioSize(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static void SetRadioSize(UIElement element, double value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static double GetRadioCheckSize(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static void SetRadioCheckSize(UIElement element, double value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static double GetRadioStrokeThickness(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static void SetRadioStrokeThickness(UIElement element, double value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static Brush GetForegroundPointerOver(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static void SetForegroundPointerOver(UIElement element, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static Brush GetForegroundPressed(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static void SetForegroundPressed(UIElement element, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static Brush GetForegroundDisabled(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static void SetForegroundDisabled(UIElement element, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static Brush GetBackgroundPointerOver(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static void SetBackgroundPointerOver(UIElement element, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static Brush GetBackgroundPressed(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static void SetBackgroundPressed(UIElement element, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static Brush GetBackgroundDisabled(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static void SetBackgroundDisabled(UIElement element, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static Brush GetBorderBrushPointerOver(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static void SetBorderBrushPointerOver(UIElement element, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static Brush GetBorderBrushPressed(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static void SetBorderBrushPressed(UIElement element, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static Brush GetBorderBrushDisabled(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static void SetBorderBrushDisabled(UIElement element, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static Brush GetOuterEllipseFill(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static void SetOuterEllipseFill(UIElement element, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static Brush GetOuterEllipseFillPointerOver(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static void SetOuterEllipseFillPointerOver(UIElement element, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static Brush GetOuterEllipseFillPressed(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static void SetOuterEllipseFillPressed(UIElement element, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static Brush GetOuterEllipseFillDisabled(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static void SetOuterEllipseFillDisabled(UIElement element, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static Brush GetOuterEllipseStroke(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static void SetOuterEllipseStroke(UIElement element, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static Brush GetOuterEllipseStrokePointerOver(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static void SetOuterEllipseStrokePointerOver(UIElement element, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static Brush GetOuterEllipseStrokePressed(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static void SetOuterEllipseStrokePressed(UIElement element, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static Brush GetOuterEllipseStrokeDisabled(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static void SetOuterEllipseStrokeDisabled(UIElement element, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static Brush GetOuterEllipseCheckedFill(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static void SetOuterEllipseCheckedFill(UIElement element, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static Brush GetOuterEllipseCheckedFillPointerOver(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static void SetOuterEllipseCheckedFillPointerOver(UIElement element, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static Brush GetOuterEllipseCheckedFillPressed(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static void SetOuterEllipseCheckedFillPressed(UIElement element, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static Brush GetOuterEllipseCheckedFillDisabled(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static void SetOuterEllipseCheckedFillDisabled(UIElement element, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static Brush GetOuterEllipseCheckedStroke(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static void SetOuterEllipseCheckedStroke(UIElement element, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static Brush GetOuterEllipseCheckedStrokePointerOver(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static void SetOuterEllipseCheckedStrokePointerOver(UIElement element, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static Brush GetOuterEllipseCheckedStrokePressed(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static void SetOuterEllipseCheckedStrokePressed(UIElement element, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static Brush GetOuterEllipseCheckedStrokeDisabled(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static void SetOuterEllipseCheckedStrokeDisabled(UIElement element, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static Brush GetCheckGlyphFill(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static void SetCheckGlyphFill(UIElement element, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static Brush GetCheckGlyphFillPointerOver(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static void SetCheckGlyphFillPointerOver(UIElement element, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static Brush GetCheckGlyphFillPressed(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static void SetCheckGlyphFillPressed(UIElement element, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static Brush GetCheckGlyphFillDisabled(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static void SetCheckGlyphFillDisabled(UIElement element, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static Brush GetCheckGlyphStroke(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static void SetCheckGlyphStroke(UIElement element, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static Brush GetCheckGlyphStrokePointerOver(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static void SetCheckGlyphStrokePointerOver(UIElement element, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static Brush GetCheckGlyphStrokePressed(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static void SetCheckGlyphStrokePressed(UIElement element, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static Brush GetCheckGlyphStrokeDisabled(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
public static void SetCheckGlyphStrokeDisabled(UIElement element, Brush value);
}
public class MahApps.Metro.Controls.RangeSelectionChangedEventArgs`1 : RoutedEventArgs {
    [CompilerGeneratedAttribute]
private T <OldLowerValue>k__BackingField;
    [CompilerGeneratedAttribute]
private T <NewLowerValue>k__BackingField;
    [CompilerGeneratedAttribute]
private T <OldUpperValue>k__BackingField;
    [CompilerGeneratedAttribute]
private T <NewUpperValue>k__BackingField;
    public T OldLowerValue { get; }
    public T NewLowerValue { get; }
    public T OldUpperValue { get; }
    public T NewUpperValue { get; }
    public RangeSelectionChangedEventArgs`1(T oldLowerValue, T newLowerValue, T oldUpperValue, T newUpperValue);
    public RangeSelectionChangedEventArgs`1(T oldLowerValue, T newLowerValue, T oldUpperValue, T newUpperValue, RoutedEvent routedEvent);
    [CompilerGeneratedAttribute]
public T get_OldLowerValue();
    [CompilerGeneratedAttribute]
public T get_NewLowerValue();
    [CompilerGeneratedAttribute]
public T get_OldUpperValue();
    [CompilerGeneratedAttribute]
public T get_NewUpperValue();
    protected virtual void InvokeEventHandler(Delegate genericHandler, object genericTarget);
}
public class MahApps.Metro.Controls.RangeSelectionChangedEventHandler`1 : MulticastDelegate {
    public RangeSelectionChangedEventHandler`1(object object, IntPtr method);
    public virtual void Invoke(object sender, RangeSelectionChangedEventArgs`1<T> e);
    public virtual IAsyncResult BeginInvoke(object sender, RangeSelectionChangedEventArgs`1<T> e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DefaultEventAttribute("RangeSelectionChanged")]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
public class MahApps.Metro.Controls.RangeSlider : RangeBase {
    public static RoutedUICommand MoveBack;
    public static RoutedUICommand MoveForward;
    public static RoutedUICommand MoveAllForward;
    public static RoutedUICommand MoveAllBack;
    public static RoutedEvent RangeSelectionChangedEvent;
    public static RoutedEvent LowerValueChangedEvent;
    public static RoutedEvent UpperValueChangedEvent;
    public static RoutedEvent LowerThumbDragStartedEvent;
    public static RoutedEvent LowerThumbDragCompletedEvent;
    public static RoutedEvent UpperThumbDragStartedEvent;
    public static RoutedEvent UpperThumbDragCompletedEvent;
    public static RoutedEvent CentralThumbDragStartedEvent;
    public static RoutedEvent CentralThumbDragCompletedEvent;
    public static RoutedEvent LowerThumbDragDeltaEvent;
    public static RoutedEvent UpperThumbDragDeltaEvent;
    public static RoutedEvent CentralThumbDragDeltaEvent;
    public static DependencyProperty UpperValueProperty;
    public static DependencyProperty LowerValueProperty;
    public static DependencyProperty MinRangeProperty;
    public static DependencyProperty MinRangeWidthProperty;
    public static DependencyProperty MoveWholeRangeProperty;
    public static DependencyProperty ExtendedModeProperty;
    public static DependencyProperty IsSnapToTickEnabledProperty;
    public static DependencyProperty OrientationProperty;
    public static DependencyProperty TickPlacementProperty;
    public static DependencyProperty TickFrequencyProperty;
    public static DependencyProperty TicksProperty;
    public static DependencyProperty IsMoveToPointEnabledProperty;
    public static DependencyProperty AutoToolTipPlacementProperty;
    public static DependencyProperty AutoToolTipPrecisionProperty;
    public static DependencyProperty AutoToolTipLowerValueTemplateProperty;
    public static DependencyProperty AutoToolTipUpperValueTemplateProperty;
    public static DependencyProperty AutoToolTipRangeValuesTemplateProperty;
    public static DependencyProperty IntervalProperty;
    public static DependencyProperty IsSelectionRangeEnabledProperty;
    public static DependencyProperty SelectionStartProperty;
    public static DependencyProperty SelectionEndProperty;
    private static double Epsilon;
    private bool _internalUpdate;
    private Thumb _centerThumb;
    private Thumb _leftThumb;
    private Thumb _rightThumb;
    private RepeatButton _leftButton;
    private RepeatButton _rightButton;
    private StackPanel _visualElementsContainer;
    private FrameworkElement _container;
    private double _movableWidth;
    private DispatcherTimer _timer;
    private UInt32 _tickCount;
    private double _currentpoint;
    private bool _isInsideRange;
    private bool _centerThumbBlocked;
    private Direction _direction;
    private ButtonType _bType;
    private Point _position;
    private Point _basePoint;
    private double _currenValue;
    private double _density;
    private ToolTip _autoToolTip;
    private double _oldLower;
    private double _oldUpper;
    private bool _isMoved;
    private bool _roundToPrecision;
    private int _precision;
    private PropertyChangeNotifier actualWidthPropertyChangeNotifier;
    private PropertyChangeNotifier actualHeightPropertyChangeNotifier;
    [BindableAttribute("True")]
[CategoryAttribute("Common")]
public double UpperValue { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Common")]
public double LowerValue { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Common")]
public double MinRange { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Common")]
public double MinRangeWidth { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Behavior")]
public bool MoveWholeRange { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Behavior")]
public bool ExtendedMode { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Appearance")]
public bool IsSnapToTickEnabled { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Common")]
public Orientation Orientation { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Appearance")]
public TickPlacement TickPlacement { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Appearance")]
public double TickFrequency { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Appearance")]
public DoubleCollection Ticks { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Behavior")]
public bool IsMoveToPointEnabled { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Behavior")]
public AutoToolTipPlacement AutoToolTipPlacement { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Appearance")]
public int AutoToolTipPrecision { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Behavior")]
public DataTemplate AutoToolTipLowerValueTemplate { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Behavior")]
public DataTemplate AutoToolTipUpperValueTemplate { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Behavior")]
public DataTemplate AutoToolTipRangeValuesTemplate { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Behavior")]
public int Interval { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Appearance")]
public bool IsSelectionRangeEnabled { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Appearance")]
public double SelectionStart { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Appearance")]
public double SelectionEnd { get; public set; }
    protected double MovableRange { get; }
    private static RangeSlider();
    public void add_RangeSelectionChanged(RangeSelectionChangedEventHandler`1<double> value);
    public void remove_RangeSelectionChanged(RangeSelectionChangedEventHandler`1<double> value);
    public void add_LowerValueChanged(RoutedPropertyChangedEventHandler`1<double> value);
    public void remove_LowerValueChanged(RoutedPropertyChangedEventHandler`1<double> value);
    public void add_UpperValueChanged(RoutedPropertyChangedEventHandler`1<double> value);
    public void remove_UpperValueChanged(RoutedPropertyChangedEventHandler`1<double> value);
    public void add_LowerThumbDragStarted(DragStartedEventHandler value);
    public void remove_LowerThumbDragStarted(DragStartedEventHandler value);
    public void add_LowerThumbDragCompleted(DragCompletedEventHandler value);
    public void remove_LowerThumbDragCompleted(DragCompletedEventHandler value);
    public void add_UpperThumbDragStarted(DragStartedEventHandler value);
    public void remove_UpperThumbDragStarted(DragStartedEventHandler value);
    public void add_UpperThumbDragCompleted(DragCompletedEventHandler value);
    public void remove_UpperThumbDragCompleted(DragCompletedEventHandler value);
    public void add_CentralThumbDragStarted(DragStartedEventHandler value);
    public void remove_CentralThumbDragStarted(DragStartedEventHandler value);
    public void add_CentralThumbDragCompleted(DragCompletedEventHandler value);
    public void remove_CentralThumbDragCompleted(DragCompletedEventHandler value);
    public void add_LowerThumbDragDelta(DragDeltaEventHandler value);
    public void remove_LowerThumbDragDelta(DragDeltaEventHandler value);
    public void add_UpperThumbDragDelta(DragDeltaEventHandler value);
    public void remove_UpperThumbDragDelta(DragDeltaEventHandler value);
    public void add_CentralThumbDragDelta(DragDeltaEventHandler value);
    public void remove_CentralThumbDragDelta(DragDeltaEventHandler value);
    public double get_UpperValue();
    public void set_UpperValue(double value);
    internal static object CoerceUpperValue(DependencyObject d, object basevalue);
    public double get_LowerValue();
    public void set_LowerValue(double value);
    private static void RangesChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e);
    private void CoerceLowerUpperValues();
    internal static object CoerceLowerValue(DependencyObject d, object basevalue);
    public double get_MinRange();
    public void set_MinRange(double value);
    private static void MinRangeChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e);
    private static object CoerceMinRange(DependencyObject d, object basevalue);
    public double get_MinRangeWidth();
    public void set_MinRangeWidth(double value);
    private static void MinRangeWidthChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e);
    private static object CoerceMinRangeWidth(DependencyObject d, object basevalue);
    private static bool IsValidMinRange(object value);
    public bool get_MoveWholeRange();
    public void set_MoveWholeRange(bool value);
    public bool get_ExtendedMode();
    public void set_ExtendedMode(bool value);
    public bool get_IsSnapToTickEnabled();
    public void set_IsSnapToTickEnabled(bool value);
    public Orientation get_Orientation();
    public void set_Orientation(Orientation value);
    public TickPlacement get_TickPlacement();
    public void set_TickPlacement(TickPlacement value);
    public double get_TickFrequency();
    public void set_TickFrequency(double value);
    public DoubleCollection get_Ticks();
    public void set_Ticks(DoubleCollection value);
    public bool get_IsMoveToPointEnabled();
    public void set_IsMoveToPointEnabled(bool value);
    public AutoToolTipPlacement get_AutoToolTipPlacement();
    public void set_AutoToolTipPlacement(AutoToolTipPlacement value);
    public int get_AutoToolTipPrecision();
    public void set_AutoToolTipPrecision(int value);
    public DataTemplate get_AutoToolTipLowerValueTemplate();
    public void set_AutoToolTipLowerValueTemplate(DataTemplate value);
    public DataTemplate get_AutoToolTipUpperValueTemplate();
    public void set_AutoToolTipUpperValueTemplate(DataTemplate value);
    public DataTemplate get_AutoToolTipRangeValuesTemplate();
    public void set_AutoToolTipRangeValuesTemplate(DataTemplate value);
    public int get_Interval();
    public void set_Interval(int value);
    public bool get_IsSelectionRangeEnabled();
    public void set_IsSelectionRangeEnabled(bool value);
    public double get_SelectionStart();
    public void set_SelectionStart(double value);
    private static void OnSelectionStartChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static object CoerceSelectionStart(DependencyObject d, object value);
    public double get_SelectionEnd();
    public void set_SelectionEnd(double value);
    private static void OnSelectionEndChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static object CoerceSelectionEnd(DependencyObject d, object value);
    protected double get_MovableRange();
    protected virtual void OnMinimumChanged(double oldMinimum, double newMinimum);
    protected virtual void OnMaximumChanged(double oldMaximum, double newMaximum);
    private static void MoveThumb(FrameworkElement x, FrameworkElement y, double change, Orientation orientation);
    private static void MoveThumb(FrameworkElement x, FrameworkElement y, double change, Orientation orientation, Direction& direction);
    private static void MoveThumbHorizontal(FrameworkElement x, FrameworkElement y, double horizonalChange);
    private static void MoveThumbVertical(FrameworkElement x, FrameworkElement y, double verticalChange);
    private void ReCalculateSize();
    private void ReCalculateRangeSelected(bool reCalculateLowerValue, bool reCalculateUpperValue, Direction direction);
    private void ReCalculateRangeSelected(bool reCalculateLowerValue, bool reCalculateUpperValue, double value, Direction direction);
    private void ReCalculateRangeSelected(double newLower, double newUpper, Direction direction);
    public void MoveSelection(bool isLeft);
    public void ResetSelection(bool isStart);
    public virtual void OnApplyTemplate();
    private void InitializeVisualElementsContainer();
    private void VisualElementsContainerPreviewMouseDown(object sender, MouseButtonEventArgs e);
    private void VisualElementsContainerMouseDown(object sender, MouseButtonEventArgs e);
    private void VisualElementsContainerMouseLeave(object sender, MouseEventArgs e);
    private void VisualElementsContainerPreviewMouseUp(object sender, MouseButtonEventArgs e);
    private void LeftButtonMouseDown();
    private void RightButtonMouseDown();
    private void CentralThumbMouseDown();
    private void LeftThumbDragStart(object sender, DragStartedEventArgs e);
    private void LeftThumbDragDelta(object sender, DragDeltaEventArgs e);
    private void LeftThumbDragComplete(object sender, DragCompletedEventArgs e);
    private void RightThumbDragStart(object sender, DragStartedEventArgs e);
    private void RightThumbDragDelta(object sender, DragDeltaEventArgs e);
    private void RightThumbDragComplete(object sender, DragCompletedEventArgs e);
    private void CenterThumbDragStarted(object sender, DragStartedEventArgs e);
    private void CenterThumbDragDelta(object sender, DragDeltaEventArgs e);
    private void CenterThumbDragCompleted(object sender, DragCompletedEventArgs e);
    private static double GetChangeKeepPositive(double width, double increment);
    private double UpdateEndPoint(ButtonType type, Direction dir);
    private bool GetResult(double currentPoint, double endPoint, Direction direction);
    private void MoveToNextValue(object sender, EventArgs e);
    private void SnapToTickHandle(ButtonType type, Direction direction, double difference);
    private double CalculateNextTick(Direction direction, double checkingValue, double distance, bool moveDirectlyToNextTick);
    private void JumpToNextTick(Direction direction, ButtonType type, double distance, double checkingValue, bool jumpDirectlyToTick);
    private void RelocateAutoToolTip();
    private bool ApproximatelyEquals(double value1, double value2);
    private bool IsDoubleCloseToInt(double val);
    internal string GetToolTipNumber(double value);
    private CustomPopupPlacement[] PopupPlacementCallback(Size popupSize, Size targetSize, Point offset);
    private static bool IsValidDoubleValue(object value);
    private static bool IsValidDouble(double d);
    private static bool IsValidPrecision(object value);
    private static object CoerceMinimum(DependencyObject d, object basevalue);
    private static object CoerceMaximum(DependencyObject d, object basevalue);
    private static void MaxPropertyChangedCallback(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs dependencyPropertyChangedEventArgs);
    private static void MinPropertyChangedCallback(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs dependencyPropertyChangedEventArgs);
    private static void IntervalChangedCallback(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e);
    private static void RaiseValueChangedEvents(DependencyObject dependencyObject, bool lowerValueReCalculated, bool upperValueReCalculated);
    [CompilerGeneratedAttribute]
private void <.ctor>b__180_0(object sender, ExecutedRoutedEventArgs e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__180_1(object sender, ExecutedRoutedEventArgs e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__180_2(object sender, ExecutedRoutedEventArgs e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__180_3(object sender, ExecutedRoutedEventArgs e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__180_4(object s, EventArgs e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__180_5(object s, EventArgs e);
}
public class MahApps.Metro.Controls.RangeSliderAutoTooltipValues : object {
    private string lowerValue;
    private string upperValue;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public string LowerValue { get; public set; }
    public string UpperValue { get; public set; }
    internal RangeSliderAutoTooltipValues(RangeSlider rangeSlider);
    public string get_LowerValue();
    public void set_LowerValue(string value);
    public string get_UpperValue();
    public void set_UpperValue(string value);
    internal void UpdateValues(RangeSlider rangeSlider);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    protected virtual void OnPropertyChanged(string propertyName);
}
public class MahApps.Metro.Controls.RevealImage : UserControl {
    public static DependencyProperty TextProperty;
    public static DependencyProperty ImageProperty;
    internal RevealImage revealImage;
    internal BeginStoryboard OnMouseLeave1_BeginStoryboard;
    internal Grid grid;
    internal Border border;
    internal TextBlock textBlock;
    private bool _contentLoaded;
    public string Text { get; public set; }
    public ImageSource Image { get; public set; }
    private static RevealImage();
    public string get_Text();
    public void set_Text(string value);
    public ImageSource get_Image();
    public void set_Image(ImageSource value);
    private static void TypewriteTextblock(string textToAnimate, TextBlock txt, TimeSpan timeSpan);
    private void GridMouseEnter(object sender, MouseEventArgs e);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "5.0.17.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "5.0.17.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public static class MahApps.Metro.Controls.ScrollViewerHelper : object {
    public static DependencyProperty VerticalScrollBarOnLeftSideProperty;
    public static DependencyProperty IsHorizontalScrollWheelEnabledProperty;
    public static DependencyProperty EndOfVerticalScrollReachedCommandProperty;
    public static DependencyProperty EndOfHorizontalScrollReachedCommandProperty;
    public static DependencyProperty EndOfScrollReachedCommandParameterProperty;
    public static DependencyProperty BubbleUpScrollEventToParentScrollviewerProperty;
    private static List`1<MouseWheelEventArgs> _reentrantList;
    private static ScrollViewerHelper();
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ScrollViewer")]
public static bool GetVerticalScrollBarOnLeftSide(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ScrollViewer")]
public static void SetVerticalScrollBarOnLeftSide(UIElement element, bool value);
    private static void OnIsHorizontalScrollWheelEnabledPropertyChangedCallback(DependencyObject o, DependencyPropertyChangedEventArgs e);
    private static void ScrollViewerOnPreviewMouseWheel(object sender, MouseWheelEventArgs e);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.UIElement")]
public static bool GetIsHorizontalScrollWheelEnabled(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.UIElement")]
public static void SetIsHorizontalScrollWheelEnabled(UIElement element, bool value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ScrollViewer")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ItemsControl")]
public static ICommand GetEndOfVerticalScrollReachedCommand(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ScrollViewer")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ItemsControl")]
public static void SetEndOfVerticalScrollReachedCommand(DependencyObject obj, ICommand value);
    private static void EndOfVerticalScrollReachedCommandPropertyChanged(DependencyObject obj, DependencyPropertyChangedEventArgs e);
    private static void OnEndOfVerticalScrollReachedCommandItemsControlLoaded(object sender, RoutedEventArgs e);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ScrollViewer")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ItemsControl")]
public static ICommand GetEndOfHorizontalScrollReachedCommand(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ScrollViewer")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ItemsControl")]
public static void SetEndOfHorizontalScrollReachedCommand(DependencyObject obj, ICommand value);
    private static void EndOfHorizontalScrollReachedCommandPropertyChanged(DependencyObject obj, DependencyPropertyChangedEventArgs e);
    private static void OnEndOfHorizontalScrollReachedCommandItemsControlLoaded(object sender, RoutedEventArgs e);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ScrollViewer")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ItemsControl")]
public static object GetEndOfScrollReachedCommandParameter(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ScrollViewer")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ItemsControl")]
public static void SetEndOfScrollReachedCommandParameter(DependencyObject obj, object value);
    private static void EndOfScrollReachedCommandParameterPropertyChanged(DependencyObject obj, DependencyPropertyChangedEventArgs e);
    private static void OnEndOfScrollReachedCommandParameterItemsControlLoaded(object sender, RoutedEventArgs e);
    private static void OnScrollViewerLoaded(object sender, RoutedEventArgs e);
    private static void OnScrollViewerScrollChanged(object sender, ScrollChangedEventArgs e);
    private static void OnScrollViewerUnloaded(object sender, RoutedEventArgs e);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ScrollViewer")]
public static bool GetBubbleUpScrollEventToParentScrollviewer(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ScrollViewer")]
public static void SetBubbleUpScrollEventToParentScrollviewer(DependencyObject obj, bool value);
    public static void OnBubbleUpScrollEventToParentScrollviewerPropertyChanged(object sender, DependencyPropertyChangedEventArgs e);
    private static void HandlePreviewMouseWheel(object sender, MouseWheelEventArgs e);
}
public class MahApps.Metro.Controls.ScrollViewerOffsetMediator : FrameworkElement {
    public static DependencyProperty ScrollViewerProperty;
    public static DependencyProperty HorizontalOffsetProperty;
    public ScrollViewer ScrollViewer { get; public set; }
    public double HorizontalOffset { get; public set; }
    private static ScrollViewerOffsetMediator();
    public ScrollViewer get_ScrollViewer();
    public void set_ScrollViewer(ScrollViewer value);
    public double get_HorizontalOffset();
    public void set_HorizontalOffset(double value);
    private static void OnScrollViewerChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    private static void OnHorizontalOffsetChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
}
public class MahApps.Metro.Controls.SliderHelper : object {
    public static DependencyProperty ThumbFillBrushProperty;
    public static DependencyProperty ThumbFillHoverBrushProperty;
    public static DependencyProperty ThumbFillPressedBrushProperty;
    public static DependencyProperty ThumbFillDisabledBrushProperty;
    public static DependencyProperty TrackFillBrushProperty;
    public static DependencyProperty TrackFillHoverBrushProperty;
    public static DependencyProperty TrackFillPressedBrushProperty;
    public static DependencyProperty TrackFillDisabledBrushProperty;
    public static DependencyProperty TrackValueFillBrushProperty;
    public static DependencyProperty TrackValueFillHoverBrushProperty;
    public static DependencyProperty TrackValueFillPressedBrushProperty;
    public static DependencyProperty TrackValueFillDisabledBrushProperty;
    public static DependencyProperty ChangeValueByProperty;
    public static DependencyProperty EnableMouseWheelProperty;
    private static SliderHelper();
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.Slider")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.RangeSlider")]
public static Brush GetThumbFillBrush(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.Slider")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.RangeSlider")]
public static void SetThumbFillBrush(UIElement element, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.Slider")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.RangeSlider")]
public static Brush GetThumbFillHoverBrush(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.Slider")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.RangeSlider")]
public static void SetThumbFillHoverBrush(UIElement element, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.Slider")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.RangeSlider")]
public static Brush GetThumbFillPressedBrush(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.Slider")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.RangeSlider")]
public static void SetThumbFillPressedBrush(UIElement element, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.Slider")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.RangeSlider")]
public static Brush GetThumbFillDisabledBrush(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.Slider")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.RangeSlider")]
public static void SetThumbFillDisabledBrush(UIElement element, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.Slider")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.RangeSlider")]
public static Brush GetTrackFillBrush(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.Slider")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.RangeSlider")]
public static void SetTrackFillBrush(UIElement element, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.Slider")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.RangeSlider")]
public static Brush GetTrackFillHoverBrush(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.Slider")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.RangeSlider")]
public static void SetTrackFillHoverBrush(UIElement element, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.Slider")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.RangeSlider")]
public static Brush GetTrackFillPressedBrush(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.Slider")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.RangeSlider")]
public static void SetTrackFillPressedBrush(UIElement element, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.Slider")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.RangeSlider")]
public static Brush GetTrackFillDisabledBrush(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.Slider")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.RangeSlider")]
public static void SetTrackFillDisabledBrush(UIElement element, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.Slider")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.RangeSlider")]
public static Brush GetTrackValueFillBrush(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.Slider")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.RangeSlider")]
public static void SetTrackValueFillBrush(UIElement element, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.Slider")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.RangeSlider")]
public static Brush GetTrackValueFillHoverBrush(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.Slider")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.RangeSlider")]
public static void SetTrackValueFillHoverBrush(UIElement element, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.Slider")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.RangeSlider")]
public static Brush GetTrackValueFillPressedBrush(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.Slider")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.RangeSlider")]
public static void SetTrackValueFillPressedBrush(UIElement element, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.Slider")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.RangeSlider")]
public static Brush GetTrackValueFillDisabledBrush(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.Slider")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.RangeSlider")]
public static void SetTrackValueFillDisabledBrush(UIElement element, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.Slider")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.RangeSlider")]
public static MouseWheelChange GetChangeValueBy(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.Slider")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.RangeSlider")]
public static void SetChangeValueBy(UIElement element, MouseWheelChange value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.Slider")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.RangeSlider")]
public static MouseWheelState GetEnableMouseWheel(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.Slider")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.RangeSlider")]
public static void SetEnableMouseWheel(UIElement element, MouseWheelState value);
    private static void OnEnableMouseWheelChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    internal static object ConstrainToRange(RangeBase rangeBase, double value);
    private static void OnSliderPreviewMouseWheel(object sender, MouseWheelEventArgs e);
    private static void OnRangeSliderPreviewMouseWheel(object sender, MouseWheelEventArgs e);
}
public static class MahApps.Metro.Controls.Spelling : object {
    [CompilerGeneratedAttribute]
private static ResourceKey <SuggestionMenuItemStyleKey>k__BackingField;
    [CompilerGeneratedAttribute]
private static ResourceKey <IgnoreAllMenuItemStyleKey>k__BackingField;
    [CompilerGeneratedAttribute]
private static ResourceKey <NoSuggestionsMenuItemStyleKey>k__BackingField;
    [CompilerGeneratedAttribute]
private static ResourceKey <SeparatorStyleKey>k__BackingField;
    public static ResourceKey SuggestionMenuItemStyleKey { get; }
    public static ResourceKey IgnoreAllMenuItemStyleKey { get; }
    public static ResourceKey NoSuggestionsMenuItemStyleKey { get; }
    public static ResourceKey SeparatorStyleKey { get; }
    private static Spelling();
    [CompilerGeneratedAttribute]
public static ResourceKey get_SuggestionMenuItemStyleKey();
    [CompilerGeneratedAttribute]
public static ResourceKey get_IgnoreAllMenuItemStyleKey();
    [CompilerGeneratedAttribute]
public static ResourceKey get_NoSuggestionsMenuItemStyleKey();
    [CompilerGeneratedAttribute]
public static ResourceKey get_SeparatorStyleKey();
}
internal enum MahApps.Metro.Controls.SpellingResourceKeyId : Enum {
    public int value__;
    public static SpellingResourceKeyId SuggestionMenuItemStyle;
    public static SpellingResourceKeyId IgnoreAllMenuItemStyle;
    public static SpellingResourceKeyId NoSuggestionsMenuItemStyle;
    public static SpellingResourceKeyId SeparatorStyle;
}
[ContentPropertyAttribute("ItemsSource")]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[StyleTypedPropertyAttribute]
[StyleTypedPropertyAttribute]
public class MahApps.Metro.Controls.SplitButton : ComboBox {
    public static RoutedEvent ClickEvent;
    public static DependencyProperty ExtraTagProperty;
    public static DependencyProperty OrientationProperty;
    public static DependencyProperty IconProperty;
    public static DependencyProperty IconTemplateProperty;
    public static DependencyProperty CommandProperty;
    public static DependencyProperty CommandTargetProperty;
    public static DependencyProperty CommandParameterProperty;
    public static DependencyProperty ButtonStyleProperty;
    public static DependencyProperty ButtonArrowStyleProperty;
    public static DependencyProperty ArrowBrushProperty;
    public static DependencyProperty ArrowMouseOverBrushProperty;
    public static DependencyProperty ArrowPressedBrushProperty;
    private bool canExecute;
    private Button button;
    private Button expanderButton;
    public object ExtraTag { get; public set; }
    public Orientation Orientation { get; public set; }
    [BindableAttribute("True")]
public object Icon { get; public set; }
    [BindableAttribute("True")]
public DataTemplate IconTemplate { get; public set; }
    public ICommand Command { get; public set; }
    public IInputElement CommandTarget { get; public set; }
    public object CommandParameter { get; public set; }
    public Style ButtonStyle { get; public set; }
    public Style ButtonArrowStyle { get; public set; }
    public Brush ArrowBrush { get; public set; }
    public Brush ArrowMouseOverBrush { get; public set; }
    public Brush ArrowPressedBrush { get; public set; }
    protected bool IsEnabledCore { get; }
    private bool CanExecute { get; private set; }
    private static SplitButton();
    public void add_Click(RoutedEventHandler value);
    public void remove_Click(RoutedEventHandler value);
    public object get_ExtraTag();
    public void set_ExtraTag(object value);
    public Orientation get_Orientation();
    public void set_Orientation(Orientation value);
    public object get_Icon();
    public void set_Icon(object value);
    public DataTemplate get_IconTemplate();
    public void set_IconTemplate(DataTemplate value);
    private static void OnCommandPropertyChangedCallback(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e);
    public sealed virtual ICommand get_Command();
    public void set_Command(ICommand value);
    public sealed virtual IInputElement get_CommandTarget();
    public void set_CommandTarget(IInputElement value);
    public sealed virtual object get_CommandParameter();
    public void set_CommandParameter(object value);
    public Style get_ButtonStyle();
    public void set_ButtonStyle(Style value);
    public Style get_ButtonArrowStyle();
    public void set_ButtonArrowStyle(Style value);
    public Brush get_ArrowBrush();
    public void set_ArrowBrush(Brush value);
    public Brush get_ArrowMouseOverBrush();
    public void set_ArrowMouseOverBrush(Brush value);
    public Brush get_ArrowPressedBrush();
    public void set_ArrowPressedBrush(Brush value);
    private void OnCommandChanged(ICommand oldCommand, ICommand newCommand);
    private void UnhookCommand(ICommand command);
    private void HookCommand(ICommand command);
    private void OnCanExecuteChanged(object sender, EventArgs e);
    private void UpdateCanExecute();
    protected virtual bool get_IsEnabledCore();
    private bool get_CanExecute();
    private void set_CanExecute(bool value);
    private static object CoerceIsEditableProperty(DependencyObject dependencyObject, object value);
    private void ButtonClick(object sender, RoutedEventArgs e);
    private void ExpanderMouseLeftButtonDown(object sender, MouseButtonEventArgs e);
    public virtual void OnApplyTemplate();
}
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[ContentPropertyAttribute("Content")]
[StyleTypedPropertyAttribute]
public class MahApps.Metro.Controls.SplitView : Control {
    private Rectangle lightDismissLayer;
    private RectangleGeometry paneClipRectangle;
    private MetroThumb resizingThumb;
    public static DependencyProperty CompactPaneLengthProperty;
    public static DependencyProperty ContentProperty;
    public static DependencyProperty DisplayModeProperty;
    public static DependencyProperty IsPaneOpenProperty;
    public static DependencyProperty OverlayBrushProperty;
    public static DependencyProperty OpenPaneLengthProperty;
    public static DependencyProperty MinimumOpenPaneLengthProperty;
    public static DependencyProperty MaximumOpenPaneLengthProperty;
    public static DependencyProperty CanResizeOpenPaneProperty;
    public static DependencyProperty ResizeThumbStyleProperty;
    public static DependencyProperty PaneProperty;
    public static DependencyProperty PaneBackgroundProperty;
    public static DependencyProperty PaneForegroundProperty;
    public static DependencyProperty PanePlacementProperty;
    public static DependencyProperty TemplateSettingsProperty;
    [CompilerGeneratedAttribute]
private EventHandler PaneClosed;
    [CompilerGeneratedAttribute]
private EventHandler`1<SplitViewPaneClosingEventArgs> PaneClosing;
    public double CompactPaneLength { get; public set; }
    public UIElement Content { get; public set; }
    public SplitViewDisplayMode DisplayMode { get; public set; }
    public bool IsPaneOpen { get; public set; }
    public Brush OverlayBrush { get; public set; }
    public double OpenPaneLength { get; public set; }
    public double MinimumOpenPaneLength { get; public set; }
    public double MaximumOpenPaneLength { get; public set; }
    public bool CanResizeOpenPane { get; public set; }
    public Style ResizeThumbStyle { get; public set; }
    public UIElement Pane { get; public set; }
    public Brush PaneBackground { get; public set; }
    public Brush PaneForeground { get; public set; }
    public SplitViewPanePlacement PanePlacement { get; public set; }
    public SplitViewTemplateSettings TemplateSettings { get; private set; }
    protected IEnumerator LogicalChildren { get; }
    private static SplitView();
    private static void OnCompactPaneLengthPropertyChangedCallback(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e);
    public double get_CompactPaneLength();
    public void set_CompactPaneLength(double value);
    public UIElement get_Content();
    public void set_Content(UIElement value);
    private static void OnDisplayModePropertyChangedCallback(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e);
    public SplitViewDisplayMode get_DisplayMode();
    public void set_DisplayMode(SplitViewDisplayMode value);
    private static void OnIsPaneOpenChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public bool get_IsPaneOpen();
    public void set_IsPaneOpen(bool value);
    public Brush get_OverlayBrush();
    public void set_OverlayBrush(Brush value);
    private static object OnOpenPaneLengthCoerceValueCallback(DependencyObject dependencyObject, object inputValue);
    private static void OnOpenPaneLengthPropertyChangedCallback(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e);
    public double get_OpenPaneLength();
    public void set_OpenPaneLength(double value);
    private static void MinimumOpenPaneLengthPropertyChangedCallback(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e);
    public double get_MinimumOpenPaneLength();
    public void set_MinimumOpenPaneLength(double value);
    private static void OnMaximumOpenPaneLengthPropertyChangedCallback(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e);
    public double get_MaximumOpenPaneLength();
    public void set_MaximumOpenPaneLength(double value);
    private static void OnCanResizeOpenPanePropertyChangedCallback(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e);
    public bool get_CanResizeOpenPane();
    public void set_CanResizeOpenPane(bool value);
    public Style get_ResizeThumbStyle();
    public void set_ResizeThumbStyle(Style value);
    public UIElement get_Pane();
    public void set_Pane(UIElement value);
    public Brush get_PaneBackground();
    public void set_PaneBackground(Brush value);
    public Brush get_PaneForeground();
    public void set_PaneForeground(Brush value);
    private static void OnPanePlacementPropertyChangedCallback(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e);
    public SplitViewPanePlacement get_PanePlacement();
    public void set_PanePlacement(SplitViewPanePlacement value);
    public SplitViewTemplateSettings get_TemplateSettings();
    private void set_TemplateSettings(SplitViewTemplateSettings value);
    private void SplitViewDataContextChanged(object sender, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_PaneClosed(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_PaneClosed(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_PaneClosing(EventHandler`1<SplitViewPaneClosingEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_PaneClosing(EventHandler`1<SplitViewPaneClosingEventArgs> value);
    public virtual void OnApplyTemplate();
    private void ResizingThumb_DragDelta(object sender, DragDeltaEventArgs e);
    private static void UpdateLogicalChild(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e);
    protected virtual IEnumerator get_LogicalChildren();
    protected virtual void OnRenderSizeChanged(SizeChangedInfo info);
    protected virtual void ChangeVisualState(bool animated, bool reset);
    protected void OnIsPaneOpenChanged();
    private void OnLightDismiss(object sender, MouseButtonEventArgs e);
    [CompilerGeneratedAttribute]
private void <OnApplyTemplate>b__80_0();
}
public enum MahApps.Metro.Controls.SplitViewDisplayMode : Enum {
    public int value__;
    public static SplitViewDisplayMode Overlay;
    public static SplitViewDisplayMode Inline;
    public static SplitViewDisplayMode CompactOverlay;
    public static SplitViewDisplayMode CompactInline;
}
public class MahApps.Metro.Controls.SplitViewPaneClosingEventArgs : object {
    [CompilerGeneratedAttribute]
private bool <Cancel>k__BackingField;
    public bool Cancel { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Cancel();
    [CompilerGeneratedAttribute]
public void set_Cancel(bool value);
}
public enum MahApps.Metro.Controls.SplitViewPanePlacement : Enum {
    public int value__;
    public static SplitViewPanePlacement Left;
    public static SplitViewPanePlacement Right;
}
public class MahApps.Metro.Controls.SplitViewTemplateSettings : DependencyObject {
    internal static DependencyProperty CompactPaneGridLengthProperty;
    internal static DependencyProperty NegativeOpenPaneLengthProperty;
    internal static DependencyProperty NegativeOpenPaneLengthMinusCompactLengthProperty;
    internal static DependencyProperty OpenPaneGridLengthProperty;
    internal static DependencyProperty OpenPaneLengthProperty;
    internal static DependencyProperty OpenPaneLengthMinusCompactLengthProperty;
    [CompilerGeneratedAttribute]
private SplitView <Owner>k__BackingField;
    public GridLength CompactPaneGridLength { get; private set; }
    public double NegativeOpenPaneLength { get; private set; }
    public double NegativeOpenPaneLengthMinusCompactLength { get; public set; }
    public GridLength OpenPaneGridLength { get; private set; }
    public double OpenPaneLength { get; private set; }
    public double OpenPaneLengthMinusCompactLength { get; private set; }
    internal SplitView Owner { get; }
    internal SplitViewTemplateSettings(SplitView owner);
    private static SplitViewTemplateSettings();
    public GridLength get_CompactPaneGridLength();
    private void set_CompactPaneGridLength(GridLength value);
    public double get_NegativeOpenPaneLength();
    private void set_NegativeOpenPaneLength(double value);
    public double get_NegativeOpenPaneLengthMinusCompactLength();
    public void set_NegativeOpenPaneLengthMinusCompactLength(double value);
    public GridLength get_OpenPaneGridLength();
    private void set_OpenPaneGridLength(GridLength value);
    public double get_OpenPaneLength();
    private void set_OpenPaneLength(double value);
    public double get_OpenPaneLengthMinusCompactLength();
    private void set_OpenPaneLengthMinusCompactLength(double value);
    [CompilerGeneratedAttribute]
internal SplitView get_Owner();
    internal void Update();
}
[ExtensionAttribute]
public static class MahApps.Metro.Controls.TabControlHelper : object {
    public static DependencyProperty CloseButtonEnabledProperty;
    public static DependencyProperty CloseTabCommandProperty;
    public static DependencyProperty CloseTabCommandParameterProperty;
    public static DependencyProperty UnderlinedProperty;
    public static DependencyProperty UnderlineBrushProperty;
    public static DependencyProperty UnderlineSelectedBrushProperty;
    public static DependencyProperty UnderlineMouseOverBrushProperty;
    public static DependencyProperty UnderlineMouseOverSelectedBrushProperty;
    public static DependencyProperty TransitionProperty;
    public static DependencyProperty UnderlinePlacementProperty;
    private static TabControlHelper();
    [ExtensionAttribute]
public static void ClearStyle(TabItem tabItem);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TabItem")]
public static bool GetCloseButtonEnabled(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TabItem")]
public static void SetCloseButtonEnabled(UIElement element, bool value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TabItem")]
public static ICommand GetCloseTabCommand(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TabItem")]
public static void SetCloseTabCommand(UIElement element, ICommand value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TabItem")]
public static object GetCloseTabCommandParameter(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TabItem")]
public static void SetCloseTabCommandParameter(UIElement element, object value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TabControl")]
public static UnderlinedType GetUnderlined(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TabControl")]
public static void SetUnderlined(UIElement element, UnderlinedType value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TabControl")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TabItem")]
public static Brush GetUnderlineBrush(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TabControl")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TabItem")]
public static void SetUnderlineBrush(UIElement element, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TabControl")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TabItem")]
public static Brush GetUnderlineSelectedBrush(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TabControl")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TabItem")]
public static void SetUnderlineSelectedBrush(UIElement element, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TabControl")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TabItem")]
public static Brush GetUnderlineMouseOverBrush(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TabControl")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TabItem")]
public static void SetUnderlineMouseOverBrush(UIElement element, Brush value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TabControl")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TabItem")]
public static Brush GetUnderlineMouseOverSelectedBrush(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TabControl")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TabItem")]
public static void SetUnderlineMouseOverSelectedBrush(UIElement element, Brush value);
    [CategoryAttribute("MahApps.Metro")]
public static TransitionType GetTransition(DependencyObject obj);
    public static void SetTransition(DependencyObject obj, TransitionType value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TabControl")]
public static Nullable`1<Dock> GetUnderlinePlacement(UIElement element);
    public static void SetUnderlinePlacement(UIElement element, Nullable`1<Dock> value);
}
public class MahApps.Metro.Controls.TextBoxHelper : object {
    public static DependencyProperty IsMonitoringProperty;
    public static DependencyProperty WatermarkProperty;
    public static DependencyProperty WatermarkAlignmentProperty;
    public static DependencyProperty WatermarkTrimmingProperty;
    public static DependencyProperty WatermarkWrappingProperty;
    public static DependencyProperty UseFloatingWatermarkProperty;
    public static DependencyProperty TextLengthProperty;
    public static DependencyProperty ClearTextButtonProperty;
    public static DependencyProperty TextButtonProperty;
    public static DependencyProperty ButtonsAlignmentProperty;
    public static DependencyProperty IsClearTextButtonBehaviorEnabledProperty;
    public static DependencyProperty ButtonWidthProperty;
    public static DependencyProperty ButtonCommandProperty;
    public static DependencyProperty ButtonCommandParameterProperty;
    public static DependencyProperty ButtonContentProperty;
    public static DependencyProperty ButtonContentTemplateProperty;
    public static DependencyProperty ButtonTemplateProperty;
    public static DependencyProperty ButtonFontFamilyProperty;
    public static DependencyProperty ButtonFontSizeProperty;
    public static DependencyProperty SelectAllOnFocusProperty;
    public static DependencyProperty IsWaitingForDataProperty;
    public static DependencyProperty HasTextProperty;
    public static DependencyProperty IsSpellCheckContextMenuEnabledProperty;
    public static DependencyProperty AutoWatermarkProperty;
    private static Dictionary`2<Type, DependencyProperty> AutoWatermarkPropertyMapping;
    private static TextBoxHelper();
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.Primitives.TextBoxBase")]
public static bool GetIsSpellCheckContextMenuEnabled(UIElement element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.Primitives.TextBoxBase")]
public static void SetIsSpellCheckContextMenuEnabled(UIElement element, bool value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TextBox")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ComboBox")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.DatePicker")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.TimePickerBase")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.NumericUpDown")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.HotKeyBox")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.ColorPicker")]
public static bool GetAutoWatermark(DependencyObject element);
    public static void SetAutoWatermark(DependencyObject element, bool value);
    private static void OnAutoWatermarkChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnControlWithAutoWatermarkSupportLoaded(object o, RoutedEventArgs routedEventArgs);
    private static PropertyInfo ResolvePropertyFromBindingExpression(BindingExpression bindingExpression);
    private static void IsSpellCheckContextMenuEnabledChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void TextBoxBaseLostFocus(object sender, RoutedEventArgs e);
    private static void TextBoxBaseContextMenuClosing(object sender, ContextMenuEventArgs e);
    private static void TextBoxBaseContextMenuOpening(object sender, ContextMenuEventArgs e);
    private static void RemoveSpellCheckMenuItems(ContextMenu contextMenu);
    public static void SetIsWaitingForData(DependencyObject obj, bool value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.Primitives.TextBoxBase")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.PasswordBox")]
public static bool GetIsWaitingForData(DependencyObject obj);
    public static void SetSelectAllOnFocus(DependencyObject obj, bool value);
    public static bool GetSelectAllOnFocus(DependencyObject obj);
    public static void SetIsMonitoring(DependencyObject obj, bool value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.Primitives.TextBoxBase")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.PasswordBox")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ComboBox")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.DatePicker")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.TimePickerBase")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.NumericUpDown")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.HotKeyBox")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.ColorPicker")]
public static string GetWatermark(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.Primitives.TextBoxBase")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.PasswordBox")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ComboBox")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.DatePicker")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.TimePickerBase")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.NumericUpDown")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.HotKeyBox")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.ColorPicker")]
public static void SetWatermark(DependencyObject obj, string value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.Primitives.TextBoxBase")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.PasswordBox")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ComboBox")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.DatePicker")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.TimePickerBase")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.NumericUpDown")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.HotKeyBox")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.ColorPicker")]
public static TextAlignment GetWatermarkAlignment(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.Primitives.TextBoxBase")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.PasswordBox")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ComboBox")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.DatePicker")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.TimePickerBase")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.NumericUpDown")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.HotKeyBox")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.ColorPicker")]
public static void SetWatermarkAlignment(DependencyObject obj, TextAlignment value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.Primitives.TextBoxBase")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.PasswordBox")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ComboBox")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.DatePicker")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.TimePickerBase")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.NumericUpDown")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.HotKeyBox")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.ColorPicker")]
public static TextTrimming GetWatermarkTrimming(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.Primitives.TextBoxBase")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.PasswordBox")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ComboBox")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.DatePicker")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.TimePickerBase")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.NumericUpDown")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.HotKeyBox")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.ColorPicker")]
public static void SetWatermarkTrimming(DependencyObject obj, TextTrimming value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.Primitives.TextBoxBase")]
public static TextWrapping GetWatermarkWrapping(DependencyObject obj);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.Primitives.TextBoxBase")]
public static void SetWatermarkWrapping(DependencyObject obj, TextWrapping value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.Primitives.TextBoxBase")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.PasswordBox")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ComboBox")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.NumericUpDown")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.HotKeyBox")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.ColorPicker")]
public static bool GetUseFloatingWatermark(DependencyObject obj);
    public static void SetUseFloatingWatermark(DependencyObject obj, bool value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.Primitives.TextBoxBase")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.PasswordBox")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ComboBox")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.DatePicker")]
[AttachedPropertyBrowsableForTypeAttribute("MahApps.Metro.Controls.NumericUpDown")]
public static bool GetHasText(DependencyObject obj);
    public static void SetHasText(DependencyObject obj, bool value);
    private static void OnIsMonitoringChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void RichTextBox_TextChanged(object sender, TextChangedEventArgs e);
    private static void SetTextLength(TDependencyObject sender, Func`2<TDependencyObject, int> funcTextLength);
    private static void TextChanged(object sender, RoutedEventArgs e);
    private static void OnNumericUpDownValueChaged(object sender, RoutedEventArgs e);
    private static void PasswordChanged(object sender, RoutedEventArgs e);
    private static void OnDatePickerBaseSelectedDateChanged(object sender, RoutedEventArgs e);
    private static void OnTimePickerBaseSelectedDateTimeChanged(object sender, RoutedEventArgs e);
    private static void TextBoxGotFocus(object sender, RoutedEventArgs e);
    private static void UIElementPreviewMouseLeftButtonDown(object sender, MouseButtonEventArgs e);
    private static void PasswordGotFocus(object sender, RoutedEventArgs e);
    private static void ControlGotFocus(TDependencyObject sender, Action`1<TDependencyObject> action);
    [CategoryAttribute("MahApps.Metro")]
public static bool GetClearTextButton(DependencyObject d);
    public static void SetClearTextButton(DependencyObject obj, bool value);
    [CategoryAttribute("MahApps.Metro")]
public static bool GetTextButton(DependencyObject d);
    public static void SetTextButton(DependencyObject obj, bool value);
    [CategoryAttribute("MahApps.Metro")]
public static ButtonsAlignment GetButtonsAlignment(DependencyObject d);
    public static void SetButtonsAlignment(DependencyObject obj, ButtonsAlignment value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.Primitives.ButtonBase")]
public static bool GetIsClearTextButtonBehaviorEnabled(Button d);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.Primitives.ButtonBase")]
public static void SetIsClearTextButtonBehaviorEnabled(Button obj, bool value);
    [CategoryAttribute("MahApps.Metro")]
public static double GetButtonWidth(DependencyObject obj);
    public static void SetButtonWidth(DependencyObject obj, double value);
    [CategoryAttribute("MahApps.Metro")]
public static ICommand GetButtonCommand(DependencyObject d);
    public static void SetButtonCommand(DependencyObject obj, ICommand value);
    [CategoryAttribute("MahApps.Metro")]
public static object GetButtonCommandParameter(DependencyObject d);
    public static void SetButtonCommandParameter(DependencyObject obj, object value);
    [CategoryAttribute("MahApps.Metro")]
public static object GetButtonContent(DependencyObject d);
    public static void SetButtonContent(DependencyObject obj, object value);
    [CategoryAttribute("MahApps.Metro")]
public static DataTemplate GetButtonContentTemplate(DependencyObject d);
    public static void SetButtonContentTemplate(DependencyObject obj, DataTemplate value);
    [CategoryAttribute("MahApps.Metro")]
public static ControlTemplate GetButtonTemplate(DependencyObject d);
    public static void SetButtonTemplate(DependencyObject obj, ControlTemplate value);
    [CategoryAttribute("MahApps.Metro")]
public static FontFamily GetButtonFontFamily(DependencyObject d);
    public static void SetButtonFontFamily(DependencyObject obj, FontFamily value);
    [CategoryAttribute("MahApps.Metro")]
public static double GetButtonFontSize(DependencyObject d);
    public static void SetButtonFontSize(DependencyObject obj, double value);
    private static void IsClearTextButtonBehaviorEnabledChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public static void ButtonClicked(object sender, RoutedEventArgs e);
    private static void ButtonCommandOrClearTextChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void RichTextBoxLoaded(object sender, RoutedEventArgs e);
    private static void SetRichTextBoxTextLength(RichTextBox richTextBox);
    private static void ComboBoxLoaded(object sender, RoutedEventArgs e);
}
public class MahApps.Metro.Controls.Tile : Button {
    public static DependencyProperty TitleProperty;
    public static DependencyProperty HorizontalTitleAlignmentProperty;
    public static DependencyProperty VerticalTitleAlignmentProperty;
    public static DependencyProperty CountProperty;
    public static DependencyProperty KeepDraggingProperty;
    public static DependencyProperty TiltFactorProperty;
    public static DependencyProperty TitleFontSizeProperty;
    public static DependencyProperty CountFontSizeProperty;
    public string Title { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Layout")]
public HorizontalAlignment HorizontalTitleAlignment { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Layout")]
public VerticalAlignment VerticalTitleAlignment { get; public set; }
    public string Count { get; public set; }
    public bool KeepDragging { get; public set; }
    public int TiltFactor { get; public set; }
    public double TitleFontSize { get; public set; }
    public double CountFontSize { get; public set; }
    private static Tile();
    public string get_Title();
    public void set_Title(string value);
    public HorizontalAlignment get_HorizontalTitleAlignment();
    public void set_HorizontalTitleAlignment(HorizontalAlignment value);
    public VerticalAlignment get_VerticalTitleAlignment();
    public void set_VerticalTitleAlignment(VerticalAlignment value);
    public string get_Count();
    public void set_Count(string value);
    public bool get_KeepDragging();
    public void set_KeepDragging(bool value);
    public int get_TiltFactor();
    public void set_TiltFactor(int value);
    public double get_TitleFontSize();
    public void set_TitleFontSize(double value);
    public double get_CountFontSize();
    public void set_CountFontSize(double value);
}
[FlagsAttribute]
public enum MahApps.Metro.Controls.TimePartVisibility : Enum {
    public int value__;
    public static TimePartVisibility Hour;
    public static TimePartVisibility Minute;
    public static TimePartVisibility Second;
    public static TimePartVisibility HourMinute;
    public static TimePartVisibility All;
}
public class MahApps.Metro.Controls.TimePicker : TimePickerBase {
    private static TimePicker();
    protected virtual void FocusElementAfterIsDropDownOpenChanged();
    protected virtual void SetSelectedDateTime();
    [CompilerGeneratedAttribute]
private void <FocusElementAfterIsDropDownOpenChanged>b__2_0();
}
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[DefaultEventAttribute("SelectedDateTimeChanged")]
public abstract class MahApps.Metro.Controls.TimePickerBase : Control {
    private static string ElementAmPmSwitcher;
    private static string ElementButton;
    private static string ElementHourHand;
    private static string ElementHourPicker;
    private static string ElementMinuteHand;
    private static string ElementMinutePicker;
    private static string ElementPopup;
    private static string ElementSecondHand;
    private static string ElementSecondPicker;
    private static string ElementTextBox;
    private Selector ampmSwitcher;
    private Button dropDownButton;
    private bool deactivateRangeBaseEvent;
    private bool deactivateTextChangedEvent;
    private bool textInputChanged;
    private UIElement hourHand;
    protected Selector hourInput;
    private UIElement minuteHand;
    private Selector minuteInput;
    private Popup popUp;
    private bool disablePopupReopen;
    private UIElement secondHand;
    private Selector secondInput;
    protected DatePickerTextBox textBox;
    protected Nullable`1<DateTime> originalSelectedDateTime;
    public static IEnumerable`1<int> IntervalOf5;
    public static IEnumerable`1<int> IntervalOf10;
    public static IEnumerable`1<int> IntervalOf15;
    public static DependencyProperty SourceHoursProperty;
    public static DependencyProperty SourceMinutesProperty;
    public static DependencyProperty SourceSecondsProperty;
    public static DependencyProperty IsDropDownOpenProperty;
    public static DependencyProperty IsClockVisibleProperty;
    public static DependencyProperty IsReadOnlyProperty;
    public static DependencyProperty HandVisibilityProperty;
    public static DependencyProperty CultureProperty;
    public static DependencyProperty PickerVisibilityProperty;
    public static RoutedEvent SelectedDateTimeChangedEvent;
    public static DependencyProperty SelectedDateTimeProperty;
    public static DependencyProperty SelectedTimeFormatProperty;
    public static DependencyProperty HoursItemStringFormatProperty;
    public static DependencyProperty MinutesItemStringFormatProperty;
    public static DependencyProperty SecondsItemStringFormatProperty;
    private static DependencyPropertyKey IsDatePickerVisiblePropertyKey;
    public static DependencyProperty IsDatePickerVisibleProperty;
    [CategoryAttribute("Common")]
public IEnumerable`1<int> SourceHours { get; public set; }
    [CategoryAttribute("Common")]
public IEnumerable`1<int> SourceMinutes { get; public set; }
    [CategoryAttribute("Common")]
public IEnumerable`1<int> SourceSeconds { get; public set; }
    public bool IsDropDownOpen { get; public set; }
    [CategoryAttribute("Appearance")]
public bool IsClockVisible { get; public set; }
    public bool IsReadOnly { get; public set; }
    [CategoryAttribute("Appearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public TimePartVisibility HandVisibility { get; public set; }
    [CategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
public CultureInfo Culture { get; public set; }
    [CategoryAttribute("Appearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public TimePartVisibility PickerVisibility { get; public set; }
    public Nullable`1<DateTime> SelectedDateTime { get; public set; }
    [CategoryAttribute("Appearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public TimePickerFormat SelectedTimeFormat { get; public set; }
    public string HoursItemStringFormat { get; public set; }
    public string MinutesItemStringFormat { get; public set; }
    public string SecondsItemStringFormat { get; public set; }
    public bool IsDatePickerVisible { get; protected set; }
    public bool IsMilitaryTime { get; }
    protected CultureInfo SpecificCultureInfo { get; }
    private static TimePickerBase();
    public IEnumerable`1<int> get_SourceHours();
    public void set_SourceHours(IEnumerable`1<int> value);
    public IEnumerable`1<int> get_SourceMinutes();
    public void set_SourceMinutes(IEnumerable`1<int> value);
    public IEnumerable`1<int> get_SourceSeconds();
    public void set_SourceSeconds(IEnumerable`1<int> value);
    public bool get_IsDropDownOpen();
    public void set_IsDropDownOpen(bool value);
    private static object OnCoerceIsDropDownOpen(DependencyObject d, object baseValue);
    private static void OnIsDropDownOpenChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void FocusElementAfterIsDropDownOpenChanged();
    public bool get_IsClockVisible();
    public void set_IsClockVisible(bool value);
    public bool get_IsReadOnly();
    public void set_IsReadOnly(bool value);
    public TimePartVisibility get_HandVisibility();
    public void set_HandVisibility(TimePartVisibility value);
    public CultureInfo get_Culture();
    public void set_Culture(CultureInfo value);
    public TimePartVisibility get_PickerVisibility();
    public void set_PickerVisibility(TimePartVisibility value);
    public void add_SelectedDateTimeChanged(RoutedPropertyChangedEventHandler`1<Nullable`1<DateTime>> value);
    public void remove_SelectedDateTimeChanged(RoutedPropertyChangedEventHandler`1<Nullable`1<DateTime>> value);
    public Nullable`1<DateTime> get_SelectedDateTime();
    public void set_SelectedDateTime(Nullable`1<DateTime> value);
    public TimePickerFormat get_SelectedTimeFormat();
    public void set_SelectedTimeFormat(TimePickerFormat value);
    public string get_HoursItemStringFormat();
    public void set_HoursItemStringFormat(string value);
    public string get_MinutesItemStringFormat();
    public void set_MinutesItemStringFormat(string value);
    public string get_SecondsItemStringFormat();
    public void set_SecondsItemStringFormat(string value);
    public bool get_IsDatePickerVisible();
    protected void set_IsDatePickerVisible(bool value);
    private static void OnIsEnabledChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public bool get_IsMilitaryTime();
    protected CultureInfo get_SpecificCultureInfo();
    public virtual void OnApplyTemplate();
    protected virtual void ApplyCulture();
    protected Binding GetBinding(DependencyProperty property, BindingMode bindingMode);
    protected virtual string GetValueForTextBox();
    protected virtual void ClockSelectedTimeChanged();
    protected void RaiseSelectedDateTimeChangedEvent(Nullable`1<DateTime> oldValue, Nullable`1<DateTime> newValue);
    private static void OnSelectedTimeFormatChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected void SetDefaultTimeOfDayValues();
    private void SubscribeEvents();
    private void UnSubscribeEvents();
    private void OutsideCapturedElementHandler(object sender, MouseButtonEventArgs e);
    private void PopUp_PreviewMouseLeftButtonDown(object sender, MouseButtonEventArgs e);
    private void PopUp_Opened(object sender, EventArgs e);
    protected virtual void OnPopUpOpened();
    private void PopUp_Closed(object sender, EventArgs e);
    protected virtual void OnPopUpClosed();
    protected virtual void WriteValueToTextBox();
    private static IList`1<int> CreateValueList(int interval);
    private static object CoerceSource60(DependencyObject d, object basevalue);
    private static object CoerceSourceHours(DependencyObject d, object basevalue);
    private void TimePickerPreviewKeyDown(object sender, RoutedEventArgs e);
    private void TimePickerSelectionChanged(object sender, SelectionChangedEventArgs e);
    private static void OnCultureChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnLanguageChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnGotFocus(object sender, RoutedEventArgs e);
    private static void OnHandVisibilityChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnPickerVisibilityChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnSelectedDateTimeChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnSelectedDateTimeChanged(Nullable`1<DateTime> oldValue, Nullable`1<DateTime> newValue);
    private static void SetVisibility(UIElement partHours, UIElement partMinutes, UIElement partSeconds, TimePartVisibility visibility);
    private static bool IsValueSelected(Selector selector);
    private static void SetDefaultTimeOfDayValue(Selector selector);
    protected Nullable`1<TimeSpan> GetSelectedTimeFromGUI();
    private int GetAmPmOffset(int currentHour);
    private void OnDropDownButtonClicked(object sender, RoutedEventArgs e);
    private void DropDownButton_MouseLeave(object sender, MouseEventArgs e);
    private void TogglePopUp();
    private void SetAmPmVisibility();
    private void SetHandVisibility(TimePartVisibility visibility);
    private void SetHourPartValues(TimeSpan timeOfDay);
    private void SetPickerVisibility(TimePartVisibility visibility);
    private void UnsubscribeTimePickerEvents(Selector[] selectors);
    private void SubscribeTimePickerEvents(Selector[] selectors);
    private bool ProcessKey(KeyEventArgs e);
    protected abstract virtual void SetSelectedDateTime();
    private void TextBox_LostFocus(object sender, RoutedEventArgs e);
    private void TextBox_KeyDown(object sender, KeyEventArgs e);
    private void TextBox_TextChanged(object sender, TextChangedEventArgs e);
}
public enum MahApps.Metro.Controls.TimePickerFormat : Enum {
    public int value__;
    public static TimePickerFormat Long;
    public static TimePickerFormat Short;
}
public static class MahApps.Metro.Controls.ToggleButtonHelper : object {
    public static DependencyProperty ContentDirectionProperty;
    private static ToggleButtonHelper();
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.Primitives.ToggleButton")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.RadioButton")]
[CategoryAttribute("MahApps.Metro")]
public static FlowDirection GetContentDirection(UIElement element);
    public static void SetContentDirection(UIElement element, FlowDirection value);
    private static void ContentDirectionPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
}
[ContentPropertyAttribute("Content")]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
public class MahApps.Metro.Controls.ToggleSwitch : HeaderedContentControl {
    private static string ContentStatesGroup;
    private static string OffContentState;
    private static string OnContentState;
    private static string ToggleStatesGroup;
    private static string DraggingState;
    private static string OffState;
    private static string OnState;
    private double onTranslation;
    private double startTranslation;
    private bool wasDragged;
    [CompilerGeneratedAttribute]
private ContentPresenter <HeaderContentPresenter>k__BackingField;
    [CompilerGeneratedAttribute]
private ContentPresenter <ContentPresenter>k__BackingField;
    [CompilerGeneratedAttribute]
private ContentPresenter <OffContentPresenter>k__BackingField;
    [CompilerGeneratedAttribute]
private ContentPresenter <OnContentPresenter>k__BackingField;
    [CompilerGeneratedAttribute]
private FrameworkElement <SwitchKnobBounds>k__BackingField;
    [CompilerGeneratedAttribute]
private FrameworkElement <SwitchKnob>k__BackingField;
    [CompilerGeneratedAttribute]
private TranslateTransform <KnobTranslateTransform>k__BackingField;
    [CompilerGeneratedAttribute]
private Thumb <SwitchThumb>k__BackingField;
    public static DependencyProperty ContentDirectionProperty;
    public static DependencyProperty ContentPaddingProperty;
    public static DependencyProperty IsOnProperty;
    public static DependencyProperty OnContentProperty;
    public static DependencyProperty OnContentTemplateProperty;
    public static DependencyProperty OnContentTemplateSelectorProperty;
    public static DependencyProperty OnContentStringFormatProperty;
    public static DependencyProperty OffContentProperty;
    public static DependencyProperty OffContentTemplateProperty;
    public static DependencyProperty OffContentTemplateSelectorProperty;
    public static DependencyProperty OffContentStringFormatProperty;
    private static DependencyPropertyKey IsPressedPropertyKey;
    public static DependencyProperty IsPressedProperty;
    public static DependencyProperty CommandProperty;
    public static DependencyProperty OnCommandProperty;
    public static DependencyProperty OffCommandProperty;
    public static DependencyProperty CommandParameterProperty;
    public static DependencyProperty CommandTargetProperty;
    [CompilerGeneratedAttribute]
private RoutedEventHandler Toggled;
    private bool canExecute;
    private ContentPresenter HeaderContentPresenter { get; private set; }
    private ContentPresenter ContentPresenter { get; private set; }
    private ContentPresenter OffContentPresenter { get; private set; }
    private ContentPresenter OnContentPresenter { get; private set; }
    private FrameworkElement SwitchKnobBounds { get; private set; }
    private FrameworkElement SwitchKnob { get; private set; }
    private TranslateTransform KnobTranslateTransform { get; private set; }
    private Thumb SwitchThumb { get; private set; }
    [BindableAttribute("True")]
[CategoryAttribute("MahApps.Metro")]
public FlowDirection ContentDirection { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("MahApps.Metro")]
public Thickness ContentPadding { get; public set; }
    [CategoryAttribute("MahApps.Metro")]
public bool IsOn { get; public set; }
    [CategoryAttribute("MahApps.Metro")]
public object OnContent { get; public set; }
    public DataTemplate OnContentTemplate { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("MahApps.Metro")]
public DataTemplateSelector OnContentTemplateSelector { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("MahApps.Metro")]
public string OnContentStringFormat { get; public set; }
    [CategoryAttribute("MahApps.Metro")]
public object OffContent { get; public set; }
    [CategoryAttribute("MahApps.Metro")]
public DataTemplate OffContentTemplate { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("MahApps.Metro")]
public DataTemplateSelector OffContentTemplateSelector { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("MahApps.Metro")]
public string OffContentStringFormat { get; public set; }
    [BrowsableAttribute("False")]
[ReadOnlyAttribute("True")]
[CategoryAttribute("MahApps.Metro")]
public bool IsPressed { get; protected set; }
    [CategoryAttribute("MahApps.Metro")]
public ICommand Command { get; public set; }
    [CategoryAttribute("MahApps.Metro")]
public ICommand OnCommand { get; public set; }
    [CategoryAttribute("MahApps.Metro")]
public ICommand OffCommand { get; public set; }
    public object CommandParameter { get; public set; }
    public IInputElement CommandTarget { get; public set; }
    protected bool IsEnabledCore { get; }
    private bool CanExecute { get; private set; }
    private static ToggleSwitch();
    [CompilerGeneratedAttribute]
private ContentPresenter get_HeaderContentPresenter();
    [CompilerGeneratedAttribute]
private void set_HeaderContentPresenter(ContentPresenter value);
    [CompilerGeneratedAttribute]
private ContentPresenter get_ContentPresenter();
    [CompilerGeneratedAttribute]
private void set_ContentPresenter(ContentPresenter value);
    [CompilerGeneratedAttribute]
private ContentPresenter get_OffContentPresenter();
    [CompilerGeneratedAttribute]
private void set_OffContentPresenter(ContentPresenter value);
    [CompilerGeneratedAttribute]
private ContentPresenter get_OnContentPresenter();
    [CompilerGeneratedAttribute]
private void set_OnContentPresenter(ContentPresenter value);
    [CompilerGeneratedAttribute]
private FrameworkElement get_SwitchKnobBounds();
    [CompilerGeneratedAttribute]
private void set_SwitchKnobBounds(FrameworkElement value);
    [CompilerGeneratedAttribute]
private FrameworkElement get_SwitchKnob();
    [CompilerGeneratedAttribute]
private void set_SwitchKnob(FrameworkElement value);
    [CompilerGeneratedAttribute]
private TranslateTransform get_KnobTranslateTransform();
    [CompilerGeneratedAttribute]
private void set_KnobTranslateTransform(TranslateTransform value);
    [CompilerGeneratedAttribute]
private Thumb get_SwitchThumb();
    [CompilerGeneratedAttribute]
private void set_SwitchThumb(Thumb value);
    public FlowDirection get_ContentDirection();
    public void set_ContentDirection(FlowDirection value);
    public Thickness get_ContentPadding();
    public void set_ContentPadding(Thickness value);
    private static void OnIsOnChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public bool get_IsOn();
    public void set_IsOn(bool value);
    private static void OnOnContentChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnOnContentChanged(object oldContent, object newContent);
    public object get_OnContent();
    public void set_OnContent(object value);
    public DataTemplate get_OnContentTemplate();
    public void set_OnContentTemplate(DataTemplate value);
    public DataTemplateSelector get_OnContentTemplateSelector();
    public void set_OnContentTemplateSelector(DataTemplateSelector value);
    public string get_OnContentStringFormat();
    public void set_OnContentStringFormat(string value);
    private static void OnOffContentChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnOffContentChanged(object oldContent, object newContent);
    public object get_OffContent();
    public void set_OffContent(object value);
    public DataTemplate get_OffContentTemplate();
    public void set_OffContentTemplate(DataTemplate value);
    public DataTemplateSelector get_OffContentTemplateSelector();
    public void set_OffContentTemplateSelector(DataTemplateSelector value);
    public string get_OffContentStringFormat();
    public void set_OffContentStringFormat(string value);
    public bool get_IsPressed();
    protected void set_IsPressed(bool value);
    public sealed virtual ICommand get_Command();
    public void set_Command(ICommand value);
    public ICommand get_OnCommand();
    public void set_OnCommand(ICommand value);
    public ICommand get_OffCommand();
    public void set_OffCommand(ICommand value);
    public sealed virtual object get_CommandParameter();
    public void set_CommandParameter(object value);
    public sealed virtual IInputElement get_CommandTarget();
    public void set_CommandTarget(IInputElement value);
    [CompilerGeneratedAttribute]
public void add_Toggled(RoutedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Toggled(RoutedEventHandler value);
    protected virtual void OnToggled();
    public virtual void OnApplyTemplate();
    private void OnIsEnabledChanged(object sender, DependencyPropertyChangedEventArgs e);
    private static void OnMouseLeftButtonDown(object sender, MouseButtonEventArgs e);
    protected virtual void OnKeyUp(KeyEventArgs e);
    protected virtual void OnHeaderChanged(object oldHeader, object newHeader);
    private void UpdateHeaderContentPresenterVisibility();
    protected virtual void OnContentChanged(object oldContent, object newContent);
    private void UpdateContentPresenterVisibility();
    protected virtual void OnPropertyChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnRenderSizeChanged(SizeChangedInfo sizeInfo);
    private void OnSwitchThumbDragStarted(object sender, DragStartedEventArgs e);
    private void OnSwitchThumbDragDelta(object sender, DragDeltaEventArgs e);
    private void OnSwitchThumbDragCompleted(object sender, DragCompletedEventArgs e);
    private void UpdateVisualStates(bool useTransitions);
    private void Toggle();
    private static void OnCommandChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void OnCommandChanged(ICommand oldCommand, ICommand newCommand);
    private void UnhookCommand(ICommand command);
    private void HookCommand(ICommand command);
    private void OnCanExecuteChanged(object sender, EventArgs e);
    private void UpdateCanExecute();
    protected virtual bool get_IsEnabledCore();
    private bool get_CanExecute();
    private void set_CanExecute(bool value);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    internal void AutomationPeerToggle();
}
public class MahApps.Metro.Controls.TransitioningContentControl : ContentControl {
    internal static string PresentationGroup;
    internal static string HiddenState;
    internal static string PreviousContentPresentationSitePartName;
    internal static string CurrentContentPresentationSitePartName;
    private ContentPresenter currentContentPresentationSite;
    private ContentPresenter previousContentPresentationSite;
    private bool allowIsTransitioningPropertyWrite;
    private Storyboard currentTransition;
    [CompilerGeneratedAttribute]
private RoutedEventHandler TransitionCompleted;
    public static TransitionType DefaultTransitionState;
    public static DependencyProperty IsTransitioningProperty;
    public static DependencyProperty TransitionProperty;
    public static DependencyProperty RestartTransitionOnContentChangeProperty;
    public static DependencyProperty CustomVisualStatesProperty;
    public static DependencyProperty CustomVisualStatesNameProperty;
    public ObservableCollection`1<VisualState> CustomVisualStates { get; public set; }
    public string CustomVisualStatesName { get; public set; }
    public bool IsTransitioning { get; private set; }
    public TransitionType Transition { get; public set; }
    public bool RestartTransitionOnContentChange { get; public set; }
    internal Storyboard CurrentTransition { get; internal set; }
    private static TransitioningContentControl();
    [CompilerGeneratedAttribute]
public void add_TransitionCompleted(RoutedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_TransitionCompleted(RoutedEventHandler value);
    public ObservableCollection`1<VisualState> get_CustomVisualStates();
    public void set_CustomVisualStates(ObservableCollection`1<VisualState> value);
    public string get_CustomVisualStatesName();
    public void set_CustomVisualStatesName(string value);
    public bool get_IsTransitioning();
    private void set_IsTransitioning(bool value);
    public TransitionType get_Transition();
    public void set_Transition(TransitionType value);
    public bool get_RestartTransitionOnContentChange();
    public void set_RestartTransitionOnContentChange(bool value);
    private static void OnIsTransitioningPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    internal Storyboard get_CurrentTransition();
    internal void set_CurrentTransition(Storyboard value);
    private static void OnTransitionPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnRestartTransitionOnContentChangePropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnRestartTransitionOnContentChangeChanged(bool oldValue, bool newValue);
    public virtual void OnApplyTemplate();
    protected virtual void OnContentChanged(object oldContent, object newContent);
    private void StartTransition(object oldContent, object newContent);
    public void ReloadTransition();
    private void OnTransitionCompleted(object sender, EventArgs e);
    public void AbortTransition();
    private Storyboard GetStoryboard(TransitionType newTransition);
    private string GetTransitionName(TransitionType transition);
}
public enum MahApps.Metro.Controls.TransitionType : Enum {
    public int value__;
    public static TransitionType Default;
    public static TransitionType Normal;
    public static TransitionType Up;
    public static TransitionType Down;
    public static TransitionType Right;
    public static TransitionType RightReplace;
    public static TransitionType Left;
    public static TransitionType LeftReplace;
    public static TransitionType Custom;
}
[ExtensionAttribute]
public static class MahApps.Metro.Controls.TreeHelper : object {
    [ExtensionAttribute]
public static T TryFindParent(DependencyObject child);
    [IteratorStateMachineAttribute("MahApps.Metro.Controls.TreeHelper/<GetAncestors>d__1")]
[ExtensionAttribute]
public static IEnumerable`1<DependencyObject> GetAncestors(DependencyObject child);
    [IteratorStateMachineAttribute("MahApps.Metro.Controls.TreeHelper/<GetVisualAncestry>d__2")]
[ExtensionAttribute]
public static IEnumerable`1<DependencyObject> GetVisualAncestry(DependencyObject leaf);
    [ExtensionAttribute]
public static T GetVisualAncestor(DependencyObject leaf);
    [ExtensionAttribute]
public static T FindChild(DependencyObject parent, string childName);
    [ExtensionAttribute]
public static DependencyObject GetParentObject(DependencyObject child);
    [IteratorStateMachineAttribute("MahApps.Metro.Controls.TreeHelper/<FindChildren>d__6`1")]
[ExtensionAttribute]
public static IEnumerable`1<T> FindChildren(DependencyObject source, bool forceUsingTheVisualTreeHelper);
    [IteratorStateMachineAttribute("MahApps.Metro.Controls.TreeHelper/<GetChildObjects>d__7")]
[ExtensionAttribute]
public static IEnumerable`1<DependencyObject> GetChildObjects(DependencyObject parent, bool forceUsingTheVisualTreeHelper);
    public static T TryFindFromPoint(UIElement reference, Point point);
    [ExtensionAttribute]
public static bool IsDescendantOf(DependencyObject node, DependencyObject reference);
}
public static class MahApps.Metro.Controls.TreeViewItemHelper : object {
    public static DependencyProperty ToggleButtonStyleProperty;
    private static TreeViewItemHelper();
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TreeViewItem")]
public static Style GetToggleButtonStyle(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.TreeViewItem")]
public static void SetToggleButtonStyle(UIElement element, Style value);
}
[TemplatePartAttribute]
public class MahApps.Metro.Controls.Underline : ContentControl {
    public static string UnderlineBorderPartName;
    private Border underlineBorder;
    public static DependencyProperty PlacementProperty;
    public static DependencyProperty LineThicknessProperty;
    public static DependencyProperty LineExtentProperty;
    public Dock Placement { get; public set; }
    public double LineThickness { get; public set; }
    public double LineExtent { get; public set; }
    private static Underline();
    public Dock get_Placement();
    public void set_Placement(Dock value);
    public double get_LineThickness();
    public void set_LineThickness(double value);
    public double get_LineExtent();
    public void set_LineExtent(double value);
    public virtual void OnApplyTemplate();
    private void ApplyBorderProperties();
    [CompilerGeneratedAttribute]
private void <ApplyBorderProperties>g__Execute|16_0();
}
public enum MahApps.Metro.Controls.UnderlinedType : Enum {
    public int value__;
    public static UnderlinedType None;
    public static UnderlinedType TabItems;
    public static UnderlinedType SelectedTabItem;
    public static UnderlinedType TabPanel;
}
[ExtensionAttribute]
public static class MahApps.Metro.Controls.Utils : object {
    internal static double DBL_EPSILON;
    internal static float FLT_MIN;
    [ExtensionAttribute]
public static bool IsCloseTo(double value1, double value2);
    public static bool IsLessThan(double value1, double value2);
    [ExtensionAttribute]
public static bool IsGreaterThan(double value1, double value2);
    [ExtensionAttribute]
public static bool IsOne(double value);
    [ExtensionAttribute]
public static bool IsZero(double value);
    [ExtensionAttribute]
public static bool IsCloseTo(Point point1, Point point2);
    [ExtensionAttribute]
public static bool IsCloseTo(Size size1, Size size2);
    [ExtensionAttribute]
public static bool IsCloseTo(Vector vector1, Vector vector2);
    [ExtensionAttribute]
public static bool IsCloseTo(Rect rect1, Rect rect2);
    public static bool IsNaN(double value);
    public static double RoundLayoutValue(double value, double dpiScale);
    [ExtensionAttribute]
public static bool IsValid(Thickness thick, bool allowNegative, bool allowNaN, bool allowPositiveInfinity, bool allowNegativeInfinity);
    [ExtensionAttribute]
public static Size CollapseThickness(Thickness thick);
    [ExtensionAttribute]
public static bool IsZero(Thickness thick);
    [ExtensionAttribute]
public static bool IsUniform(Thickness thick);
    [ExtensionAttribute]
public static bool IsValid(CornerRadius corner, bool allowNegative, bool allowNaN, bool allowPositiveInfinity, bool allowNegativeInfinity);
    [ExtensionAttribute]
public static bool IsZero(CornerRadius corner);
    [ExtensionAttribute]
public static bool IsUniform(CornerRadius corner);
    [ExtensionAttribute]
public static Rect Deflate(Rect rect, Thickness thick);
    [ExtensionAttribute]
public static Rect Inflate(Rect rect, Thickness thick);
    [ExtensionAttribute]
public static bool IsOpaqueSolidColorBrush(Brush brush);
    [ExtensionAttribute]
public static bool IsEqualTo(Brush brush, Brush otherBrush);
}
public static class MahApps.Metro.Controls.ValidationHelper : object {
    public static DependencyProperty CloseOnMouseLeftButtonDownProperty;
    public static DependencyProperty ShowValidationErrorOnMouseOverProperty;
    private static ValidationHelper();
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.UIElement")]
public static bool GetCloseOnMouseLeftButtonDown(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.UIElement")]
public static void SetCloseOnMouseLeftButtonDown(UIElement element, bool value);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.UIElement")]
public static bool GetShowValidationErrorOnMouseOver(UIElement element);
    [CategoryAttribute("MahApps.Metro")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.UIElement")]
public static void SetShowValidationErrorOnMouseOver(UIElement element, bool value);
}
public static class MahApps.Metro.Controls.VisibilityHelper : object {
    public static DependencyProperty IsVisibleProperty;
    public static DependencyProperty IsCollapsedProperty;
    public static DependencyProperty IsHiddenProperty;
    private static VisibilityHelper();
    private static void IsVisibleChangedCallback(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public static void SetIsVisible(DependencyObject element, Nullable`1<bool> value);
    [CategoryAttribute("MahApps.Metro")]
public static Nullable`1<bool> GetIsVisible(DependencyObject element);
    private static void IsCollapsedChangedCallback(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public static void SetIsCollapsed(DependencyObject element, Nullable`1<bool> value);
    [CategoryAttribute("MahApps.Metro")]
public static Nullable`1<bool> GetIsCollapsed(DependencyObject element);
    private static void IsHiddenChangedCallback(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public static void SetIsHidden(DependencyObject element, Nullable`1<bool> value);
    [CategoryAttribute("MahApps.Metro")]
public static Nullable`1<bool> GetIsHidden(DependencyObject element);
}
internal static class MahApps.Metro.Controls.VisualStates : object {
    public static string GroupCommon;
    public static string StateNormal;
    public static string StateReadOnly;
    public static string StateMouseOver;
    public static string StatePressed;
    public static string StateDisabled;
    public static string GroupFocus;
    public static string StateUnfocused;
    public static string StateFocused;
    public static string GroupSelection;
    public static string StateSelected;
    public static string StateUnselected;
    public static string StateSelectedInactive;
    public static string GroupExpansion;
    public static string StateExpanded;
    public static string StateCollapsed;
    public static string GroupPopup;
    public static string StatePopupOpened;
    public static string StatePopupClosed;
    public static string GroupValidation;
    public static string StateValid;
    public static string StateInvalidFocused;
    public static string StateInvalidUnfocused;
    public static string GroupExpandDirection;
    public static string StateExpandDown;
    public static string StateExpandUp;
    public static string StateExpandLeft;
    public static string StateExpandRight;
    public static string GroupHasItems;
    public static string StateHasItems;
    public static string StateNoItems;
    public static string GroupIncrease;
    public static string StateIncreaseEnabled;
    public static string StateIncreaseDisabled;
    public static string GroupDecrease;
    public static string StateDecreaseEnabled;
    public static string StateDecreaseDisabled;
    public static string GroupInteractionMode;
    public static string StateEdit;
    public static string StateDisplay;
    public static string GroupLocked;
    public static string StateLocked;
    public static string StateUnlocked;
    public static string StateActive;
    public static string StateInactive;
    public static string GroupActive;
    public static string StateUnwatermarked;
    public static string StateWatermarked;
    public static string GroupWatermark;
    public static string StateCalendarButtonUnfocused;
    public static string StateCalendarButtonFocused;
    public static string GroupCalendarButtonFocus;
    public static string StateBusy;
    public static string StateIdle;
    public static string GroupBusyStatus;
    public static string StateVisible;
    public static string StateHidden;
    public static string GroupVisibility;
    public static void GoToState(Control control, bool useTransitions, String[] stateNames);
    public static FrameworkElement GetImplementationRoot(DependencyObject dependencyObject);
    public static VisualStateGroup TryGetVisualStateGroup(DependencyObject dependencyObject, string groupName);
}
[ExtensionAttribute]
public static class MahApps.Metro.Controls.WinApiHelper : object {
    [ExtensionAttribute]
public static Size GetMonitorWorkSize(Visual visual);
    [ExtensionAttribute]
internal static string GetWindowText(Window window);
    [ExtensionAttribute]
internal static Rect GetWindowBoundingRectangle(Window window);
}
internal class MahApps.Metro.Controls.WindowApplicationSettings : ApplicationSettingsBase {
    [UserScopedSettingAttribute]
public WINDOWPLACEMENT Placement { get; public set; }
    [UserScopedSettingAttribute]
public bool UpgradeSettings { get; public set; }
    public WindowApplicationSettings(Window window);
    public sealed virtual WINDOWPLACEMENT get_Placement();
    public sealed virtual void set_Placement(WINDOWPLACEMENT value);
    public sealed virtual bool get_UpgradeSettings();
    public sealed virtual void set_UpgradeSettings(bool value);
    private sealed virtual override void MahApps.Metro.Controls.IWindowPlacementSettings.Reload();
}
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[StyleTypedPropertyAttribute]
[StyleTypedPropertyAttribute]
[StyleTypedPropertyAttribute]
[StyleTypedPropertyAttribute]
[StyleTypedPropertyAttribute]
[StyleTypedPropertyAttribute]
public class MahApps.Metro.Controls.WindowButtonCommands : ContentControl {
    [CompilerGeneratedAttribute]
private ClosingWindowEventHandler ClosingWindow;
    public static DependencyProperty LightMinButtonStyleProperty;
    public static DependencyProperty LightMaxButtonStyleProperty;
    public static DependencyProperty LightCloseButtonStyleProperty;
    public static DependencyProperty DarkMinButtonStyleProperty;
    public static DependencyProperty DarkMaxButtonStyleProperty;
    public static DependencyProperty DarkCloseButtonStyleProperty;
    public static DependencyProperty ThemeProperty;
    public static DependencyProperty MinimizeProperty;
    public static DependencyProperty MaximizeProperty;
    public static DependencyProperty CloseProperty;
    public static DependencyProperty RestoreProperty;
    internal static DependencyPropertyKey ParentWindowPropertyKey;
    public static DependencyProperty ParentWindowProperty;
    private SafeLibraryHandle user32;
    public Style LightMinButtonStyle { get; public set; }
    public Style LightMaxButtonStyle { get; public set; }
    public Style LightCloseButtonStyle { get; public set; }
    public Style DarkMinButtonStyle { get; public set; }
    public Style DarkMaxButtonStyle { get; public set; }
    public Style DarkCloseButtonStyle { get; public set; }
    public string Theme { get; public set; }
    public string Minimize { get; public set; }
    public string Maximize { get; public set; }
    public string Close { get; public set; }
    public string Restore { get; public set; }
    public Window ParentWindow { get; protected set; }
    private static WindowButtonCommands();
    [CompilerGeneratedAttribute]
public void add_ClosingWindow(ClosingWindowEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ClosingWindow(ClosingWindowEventHandler value);
    public Style get_LightMinButtonStyle();
    public void set_LightMinButtonStyle(Style value);
    public Style get_LightMaxButtonStyle();
    public void set_LightMaxButtonStyle(Style value);
    public Style get_LightCloseButtonStyle();
    public void set_LightCloseButtonStyle(Style value);
    public Style get_DarkMinButtonStyle();
    public void set_DarkMinButtonStyle(Style value);
    public Style get_DarkMaxButtonStyle();
    public void set_DarkMaxButtonStyle(Style value);
    public Style get_DarkCloseButtonStyle();
    public void set_DarkCloseButtonStyle(Style value);
    public string get_Theme();
    public void set_Theme(string value);
    public string get_Minimize();
    public void set_Minimize(string value);
    public string get_Maximize();
    public void set_Maximize(string value);
    public string get_Close();
    public void set_Close(string value);
    public string get_Restore();
    public void set_Restore(string value);
    public Window get_ParentWindow();
    protected void set_ParentWindow(Window value);
    private void MinimizeWindow(object sender, ExecutedRoutedEventArgs e);
    private void MaximizeWindow(object sender, ExecutedRoutedEventArgs e);
    private void RestoreWindow(object sender, ExecutedRoutedEventArgs e);
    private void CloseWindow(object sender, ExecutedRoutedEventArgs e);
    private string GetCaption(int id);
    [CompilerGeneratedAttribute]
private void <.ctor>b__54_0();
}
[StyleTypedPropertyAttribute]
public class MahApps.Metro.Controls.WindowCommands : ToolBar {
    public static DependencyProperty ThemeProperty;
    public static DependencyProperty LightTemplateProperty;
    public static DependencyProperty DarkTemplateProperty;
    public static DependencyProperty ShowSeparatorsProperty;
    public static DependencyProperty ShowLastSeparatorProperty;
    public static DependencyProperty SeparatorHeightProperty;
    internal static DependencyPropertyKey ParentWindowPropertyKey;
    public static DependencyProperty ParentWindowProperty;
    public string Theme { get; public set; }
    public ControlTemplate LightTemplate { get; public set; }
    public ControlTemplate DarkTemplate { get; public set; }
    public bool ShowSeparators { get; public set; }
    public bool ShowLastSeparator { get; public set; }
    [TypeConverterAttribute("System.Windows.LengthConverter")]
public double SeparatorHeight { get; public set; }
    public Window ParentWindow { get; protected set; }
    private static WindowCommands();
    private static void OnThemePropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public string get_Theme();
    public void set_Theme(string value);
    public ControlTemplate get_LightTemplate();
    public void set_LightTemplate(ControlTemplate value);
    public ControlTemplate get_DarkTemplate();
    public void set_DarkTemplate(ControlTemplate value);
    private static void OnShowSeparatorsPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public bool get_ShowSeparators();
    public void set_ShowSeparators(bool value);
    private static void OnShowLastSeparatorPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public bool get_ShowLastSeparator();
    public void set_ShowLastSeparator(bool value);
    public double get_SeparatorHeight();
    public void set_SeparatorHeight(double value);
    public Window get_ParentWindow();
    protected void set_ParentWindow(Window value);
    protected virtual DependencyObject GetContainerForItemOverride();
    protected virtual bool IsItemItsOwnContainerOverride(object item);
    protected virtual void PrepareContainerForItemOverride(DependencyObject element, object item);
    protected virtual void ClearContainerForItemOverride(DependencyObject element, object item);
    private void AttachVisibilityHandler(WindowCommandsItem container, UIElement item);
    private void DetachVisibilityHandler(WindowCommandsItem container);
    private void VisibilityPropertyChanged(object sender, EventArgs e);
    protected virtual void OnItemsChanged(NotifyCollectionChangedEventArgs e);
    private void ResetSeparators(bool reset);
    private WindowCommandsItem GetWindowCommandsItem(object item);
    [IteratorStateMachineAttribute("MahApps.Metro.Controls.WindowCommands/<GetWindowCommandsItems>d__44")]
private IEnumerable`1<WindowCommandsItem> GetWindowCommandsItems();
    private void WindowCommandsLoaded(object sender, RoutedEventArgs e);
    protected virtual AutomationPeer OnCreateAutomationPeer();
}
[TemplatePartAttribute]
[TemplatePartAttribute]
public class MahApps.Metro.Controls.WindowCommandsItem : ContentControl {
    private static string PART_ContentPresenter;
    private static string PART_Separator;
    [CompilerGeneratedAttribute]
private PropertyChangeNotifier <VisibilityPropertyChangeNotifier>k__BackingField;
    public static DependencyProperty IsSeparatorVisibleProperty;
    private static DependencyPropertyKey ParentWindowCommandsPropertyKey;
    public static DependencyProperty ParentWindowCommandsProperty;
    internal PropertyChangeNotifier VisibilityPropertyChangeNotifier { get; internal set; }
    public bool IsSeparatorVisible { get; public set; }
    public WindowCommands ParentWindowCommands { get; protected set; }
    private static WindowCommandsItem();
    [CompilerGeneratedAttribute]
internal PropertyChangeNotifier get_VisibilityPropertyChangeNotifier();
    [CompilerGeneratedAttribute]
internal void set_VisibilityPropertyChangeNotifier(PropertyChangeNotifier value);
    public bool get_IsSeparatorVisible();
    public void set_IsSeparatorVisible(bool value);
    public WindowCommands get_ParentWindowCommands();
    protected void set_ParentWindowCommands(WindowCommands value);
    public virtual void OnApplyTemplate();
}
[FlagsAttribute]
public enum MahApps.Metro.Controls.WindowCommandsOverlayBehavior : Enum {
    public int value__;
    public static WindowCommandsOverlayBehavior Never;
    public static WindowCommandsOverlayBehavior HiddenTitleBar;
}
public class MahApps.Metro.Converters.BackgroundToForegroundConverter : object {
    private static BackgroundToForegroundConverter _instance;
    public static BackgroundToForegroundConverter Instance { get; }
    private static BackgroundToForegroundConverter();
    public static BackgroundToForegroundConverter get_Instance();
    private Color IdealTextColor(Color bg);
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
[ValueConversionAttribute("System.Double", "System.Double")]
public class MahApps.Metro.Converters.ClockDegreeConverter : object {
    [CompilerGeneratedAttribute]
private double <TotalParts>k__BackingField;
    public double TotalParts { get; public set; }
    [CompilerGeneratedAttribute]
public double get_TotalParts();
    [CompilerGeneratedAttribute]
public void set_TotalParts(double value);
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
[ValueConversionAttribute("System.Windows.Media.Color", "System.Windows.Media.Color")]
public class MahApps.Metro.Converters.ColorChannelMinMaxConverter : object {
    [CompilerGeneratedAttribute]
private static ColorChannelMinMaxConverter <Default>k__BackingField;
    public static ColorChannelMinMaxConverter Default { get; }
    private static ColorChannelMinMaxConverter();
    [CompilerGeneratedAttribute]
public static ColorChannelMinMaxConverter get_Default();
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public enum MahApps.Metro.Converters.ColorChannelType : Enum {
    public int value__;
    public static ColorChannelType RMin;
    public static ColorChannelType RMax;
    public static ColorChannelType GMin;
    public static ColorChannelType GMax;
    public static ColorChannelType BMin;
    public static ColorChannelType BMax;
    public static ColorChannelType AMin;
    public static ColorChannelType AMax;
}
[MarkupExtensionReturnTypeAttribute("MahApps.Metro.Converters.ColorToNameConverter")]
[ValueConversionAttribute("System.Nullable`1<System.Windows.Media.Color>", "System.String")]
public class MahApps.Metro.Converters.ColorToNameConverter : MarkupMultiConverter {
    public virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
    public virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
[ValueConversionAttribute("System.Windows.Media.Color", "System.Windows.Media.SolidColorBrush")]
public class MahApps.Metro.Converters.ColorToSolidColorBrushConverter : object {
    private static ColorToSolidColorBrushConverter defaultInstance;
    [CompilerGeneratedAttribute]
private SolidColorBrush <FallbackBrush>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Color> <FallbackColor>k__BackingField;
    public static ColorToSolidColorBrushConverter DefaultInstance { get; }
    public SolidColorBrush FallbackBrush { get; public set; }
    public Nullable`1<Color> FallbackColor { get; public set; }
    public static ColorToSolidColorBrushConverter get_DefaultInstance();
    [CompilerGeneratedAttribute]
public SolidColorBrush get_FallbackBrush();
    [CompilerGeneratedAttribute]
public void set_FallbackBrush(SolidColorBrush value);
    [CompilerGeneratedAttribute]
public Nullable`1<Color> get_FallbackColor();
    [CompilerGeneratedAttribute]
public void set_FallbackColor(Nullable`1<Color> value);
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
[ValueConversionAttribute("System.Windows.CornerRadius", "System.Windows.CornerRadius")]
public class MahApps.Metro.Converters.CornerRadiusBindingConverter : object {
    [CompilerGeneratedAttribute]
private RadiusType <IgnoreRadius>k__BackingField;
    public RadiusType IgnoreRadius { get; public set; }
    [CompilerGeneratedAttribute]
public RadiusType get_IgnoreRadius();
    [CompilerGeneratedAttribute]
public void set_IgnoreRadius(RadiusType value);
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class MahApps.Metro.Converters.CornerRadiusFilterConverter : object {
    [CompilerGeneratedAttribute]
private RadiusType <Filter>k__BackingField;
    public RadiusType Filter { get; public set; }
    [CompilerGeneratedAttribute]
public RadiusType get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(RadiusType value);
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class MahApps.Metro.Converters.FontSizeOffsetConverter : object {
    private static FontSizeOffsetConverter _instance;
    public static FontSizeOffsetConverter Instance { get; }
    private static FontSizeOffsetConverter();
    public static FontSizeOffsetConverter get_Instance();
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
[ValueConversionAttribute("System.Object", "System.Object")]
internal class MahApps.Metro.Converters.HamburgerMenuItemAccessibleConverter : object {
    [CompilerGeneratedAttribute]
private static HamburgerMenuItemAccessibleConverter <Default>k__BackingField;
    internal static HamburgerMenuItemAccessibleConverter Default { get; }
    private static HamburgerMenuItemAccessibleConverter();
    [CompilerGeneratedAttribute]
internal static HamburgerMenuItemAccessibleConverter get_Default();
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
[ValueConversionAttribute("MahApps.Metro.Controls.HSVColor", "System.Windows.Media.Color")]
public class MahApps.Metro.Converters.HSVColorChannelMinMaxConverter : object {
    [CompilerGeneratedAttribute]
private static HSVColorChannelMinMaxConverter <Default>k__BackingField;
    public static HSVColorChannelMinMaxConverter Default { get; }
    private static HSVColorChannelMinMaxConverter();
    [CompilerGeneratedAttribute]
public static HSVColorChannelMinMaxConverter get_Default();
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public enum MahApps.Metro.Converters.HSVColorChannelType : Enum {
    public int value__;
    public static HSVColorChannelType SMin;
    public static HSVColorChannelType SMax;
    public static HSVColorChannelType VMin;
    public static HSVColorChannelType VMax;
    public static HSVColorChannelType SVMax;
}
public class MahApps.Metro.Converters.IsNullConverter : object {
    private static IsNullConverter _instance;
    public static IsNullConverter Instance { get; }
    private static IsNullConverter();
    public static IsNullConverter get_Instance();
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
[MarkupExtensionReturnTypeAttribute("System.Windows.Data.IValueConverter")]
public abstract class MahApps.Metro.Converters.MarkupConverter : MarkupExtension {
    public virtual object ProvideValue(IServiceProvider serviceProvider);
    protected abstract virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    protected abstract virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
    private sealed virtual override object System.Windows.Data.IValueConverter.Convert(object value, Type targetType, object parameter, CultureInfo culture);
    private sealed virtual override object System.Windows.Data.IValueConverter.ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
[MarkupExtensionReturnTypeAttribute("MahApps.Metro.Converters.MarkupMultiConverter")]
public abstract class MahApps.Metro.Converters.MarkupMultiConverter : MarkupExtension {
    public abstract virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public abstract virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public abstract virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
    public abstract virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
    public virtual object ProvideValue(IServiceProvider serviceProvider);
}
[MarkupExtensionReturnTypeAttribute("MahApps.Metro.Converters.MathAddConverter")]
public class MahApps.Metro.Converters.MathAddConverter : MarkupMultiConverter {
    private static MathConverter MathConverter;
    private static MathAddConverter();
    public virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
    public virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
[ValueConversionAttribute("System.Object", "System.Object")]
public class MahApps.Metro.Converters.MathConverter : object {
    [CompilerGeneratedAttribute]
private MathOperation <Operation>k__BackingField;
    public MathOperation Operation { get; public set; }
    [CompilerGeneratedAttribute]
public MathOperation get_Operation();
    [CompilerGeneratedAttribute]
public void set_Operation(MathOperation value);
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
    private static object DoConvert(object firstValue, object secondValue, MathOperation operation);
}
[MarkupExtensionReturnTypeAttribute("MahApps.Metro.Converters.MathDivideConverter")]
public class MahApps.Metro.Converters.MathDivideConverter : MarkupMultiConverter {
    private static MathConverter MathConverter;
    private static MathDivideConverter();
    public virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
    public virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
[MarkupExtensionReturnTypeAttribute("MahApps.Metro.Converters.MathMultiplyConverter")]
public class MahApps.Metro.Converters.MathMultiplyConverter : MarkupMultiConverter {
    private static MathConverter MathConverter;
    private static MathMultiplyConverter();
    public virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
    public virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public enum MahApps.Metro.Converters.MathOperation : Enum {
    public int value__;
    public static MathOperation Add;
    public static MathOperation Subtract;
    public static MathOperation Multiply;
    public static MathOperation Divide;
}
[MarkupExtensionReturnTypeAttribute("MahApps.Metro.Converters.MathSubtractConverter")]
public class MahApps.Metro.Converters.MathSubtractConverter : MarkupMultiConverter {
    private static MathConverter MathConverter;
    private static MathSubtractConverter();
    public virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
    public virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class MahApps.Metro.Converters.MetroTabItemCloseButtonWidthConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class MahApps.Metro.Converters.NullToUnsetValueConverter : MarkupConverter {
    private static NullToUnsetValueConverter _instance;
    private static NullToUnsetValueConverter();
    public virtual object ProvideValue(IServiceProvider serviceProvider);
    protected virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    protected virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
[ValueConversionAttribute("System.Double", "System.Windows.GridLength")]
public class MahApps.Metro.Converters.PercentageToGridLengthConverter : object {
    [CompilerGeneratedAttribute]
private static PercentageToGridLengthConverter <Default>k__BackingField;
    public static PercentageToGridLengthConverter Default { get; }
    private static PercentageToGridLengthConverter();
    [CompilerGeneratedAttribute]
public static PercentageToGridLengthConverter get_Default();
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public enum MahApps.Metro.Converters.RadiusType : Enum {
    public int value__;
    public static RadiusType None;
    public static RadiusType Left;
    public static RadiusType Top;
    public static RadiusType Right;
    public static RadiusType Bottom;
    public static RadiusType TopLeft;
    public static RadiusType TopRight;
    public static RadiusType BottomRight;
    public static RadiusType BottomLeft;
}
public class MahApps.Metro.Converters.ResizeModeMinMaxButtonVisibilityConverter : object {
    private static ResizeModeMinMaxButtonVisibilityConverter _instance;
    public static ResizeModeMinMaxButtonVisibilityConverter Instance { get; }
    private static ResizeModeMinMaxButtonVisibilityConverter();
    public static ResizeModeMinMaxButtonVisibilityConverter get_Instance();
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
[ValueConversionAttribute("System.Double", "System.Windows.CornerRadius")]
[MarkupExtensionReturnTypeAttribute("MahApps.Metro.Converters.SizeToCornerRadiusConverter")]
public class MahApps.Metro.Converters.SizeToCornerRadiusConverter : MarkupConverter {
    protected virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    protected virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
    public virtual object ProvideValue(IServiceProvider serviceProvider);
}
[ValueConversionAttribute("System.String", "System.Windows.Visibility")]
[MarkupExtensionReturnTypeAttribute("MahApps.Metro.Converters.StringToVisibilityConverter")]
public class MahApps.Metro.Converters.StringToVisibilityConverter : MarkupExtension {
    [CompilerGeneratedAttribute]
private Visibility <FalseEquivalent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OppositeStringValue>k__BackingField;
    public Visibility FalseEquivalent { get; public set; }
    public bool OppositeStringValue { get; public set; }
    [CompilerGeneratedAttribute]
public Visibility get_FalseEquivalent();
    [CompilerGeneratedAttribute]
public void set_FalseEquivalent(Visibility value);
    [CompilerGeneratedAttribute]
public bool get_OppositeStringValue();
    [CompilerGeneratedAttribute]
public void set_OppositeStringValue(bool value);
    public virtual object ProvideValue(IServiceProvider serviceProvider);
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
[ValueConversionAttribute("System.Windows.Thickness", "System.Windows.Thickness")]
public class MahApps.Metro.Converters.ThicknessBindingConverter : object {
    [CompilerGeneratedAttribute]
private ThicknessSideType <IgnoreThicknessSide>k__BackingField;
    public ThicknessSideType IgnoreThicknessSide { get; public set; }
    [CompilerGeneratedAttribute]
public ThicknessSideType get_IgnoreThicknessSide();
    [CompilerGeneratedAttribute]
public void set_IgnoreThicknessSide(ThicknessSideType value);
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public enum MahApps.Metro.Converters.ThicknessSideType : Enum {
    public int value__;
    public static ThicknessSideType None;
    public static ThicknessSideType Left;
    public static ThicknessSideType Top;
    public static ThicknessSideType Right;
    public static ThicknessSideType Bottom;
}
[ValueConversionAttribute("System.Windows.Thickness", "System.Double")]
public class MahApps.Metro.Converters.ThicknessToDoubleConverter : object {
    [CompilerGeneratedAttribute]
private ThicknessSideType <TakeThicknessSide>k__BackingField;
    public ThicknessSideType TakeThicknessSide { get; public set; }
    [CompilerGeneratedAttribute]
public ThicknessSideType get_TakeThicknessSide();
    [CompilerGeneratedAttribute]
public void set_TakeThicknessSide(ThicknessSideType value);
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
[ValueConversionAttribute("System.Nullable`1<System.TimeSpan>", "System.String")]
internal class MahApps.Metro.Converters.TimeSpanToStringConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
[MarkupExtensionReturnTypeAttribute("MahApps.Metro.Converters.ToLowerConverter")]
public class MahApps.Metro.Converters.ToLowerConverter : MarkupConverter {
    private static ToLowerConverter _instance;
    private static ToLowerConverter();
    public virtual object ProvideValue(IServiceProvider serviceProvider);
    protected virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    protected virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
[MarkupExtensionReturnTypeAttribute("MahApps.Metro.Converters.ToUpperConverter")]
public class MahApps.Metro.Converters.ToUpperConverter : MarkupConverter {
    private static ToUpperConverter _instance;
    private static ToUpperConverter();
    public virtual object ProvideValue(IServiceProvider serviceProvider);
    protected virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    protected virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
[ExtensionAttribute]
public static class MahApps.Metro.Converters.TreeViewItemExtensions : object {
    [ExtensionAttribute]
public static int GetDepth(TreeViewItem item);
}
public class MahApps.Metro.Converters.TreeViewMarginConverter : object {
    [CompilerGeneratedAttribute]
private double <Length>k__BackingField;
    public double Length { get; public set; }
    [CompilerGeneratedAttribute]
public double get_Length();
    [CompilerGeneratedAttribute]
public void set_Length(double value);
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class MahApps.Metro.Lang.ColorNames : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
}
public class MahApps.Metro.MahAppsException : Exception {
    public MahAppsException(string message);
    public MahAppsException(string message, Exception innerException);
    protected MahAppsException(SerializationInfo info, StreamingContext context);
}
[MarkupExtensionReturnTypeAttribute("System.Object")]
[LocalizabilityAttribute]
public class MahApps.Metro.Markup.StaticResourceExtension : StaticResourceExtension {
    public StaticResourceExtension(object resourceKey);
}
public class MahApps.Metro.Theming.MahAppsLibraryThemeProvider : LibraryThemeProvider {
    public static MahAppsLibraryThemeProvider DefaultInstance;
    private static MahAppsLibraryThemeProvider();
    public virtual void FillColorSchemeValues(Dictionary`2<string, string> values, RuntimeThemeColorValues colorValues);
}
public static class MahApps.Metro.ValueBoxes.BooleanBoxes : object {
    public static object TrueBox;
    public static object FalseBox;
    private static BooleanBoxes();
    public static object Box(bool value);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
