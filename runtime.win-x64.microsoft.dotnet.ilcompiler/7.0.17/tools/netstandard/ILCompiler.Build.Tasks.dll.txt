public class Build.Tasks.ComputeManagedAssembliesToCompileToNative : DesktopCompatibleTask {
    [CompilerGeneratedAttribute]
private ITaskItem[] <Assemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <SdkAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <FrameworkAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DotNetAppHostExecutableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DotNetHostFxrLibraryName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DotNetHostPolicyLibraryName>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ManagedAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <AssembliesToSkipPublish>k__BackingField;
    [RequiredAttribute]
public ITaskItem[] Assemblies { get; public set; }
    [RequiredAttribute]
public ITaskItem[] SdkAssemblies { get; public set; }
    [RequiredAttribute]
public ITaskItem[] FrameworkAssemblies { get; public set; }
    [RequiredAttribute]
public string DotNetAppHostExecutableName { get; public set; }
    [RequiredAttribute]
public string DotNetHostFxrLibraryName { get; public set; }
    [RequiredAttribute]
public string DotNetHostPolicyLibraryName { get; public set; }
    [OutputAttribute]
public ITaskItem[] ManagedAssemblies { get; public set; }
    [OutputAttribute]
public ITaskItem[] AssembliesToSkipPublish { get; public set; }
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Assemblies();
    [CompilerGeneratedAttribute]
public void set_Assemblies(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_SdkAssemblies();
    [CompilerGeneratedAttribute]
public void set_SdkAssemblies(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_FrameworkAssemblies();
    [CompilerGeneratedAttribute]
public void set_FrameworkAssemblies(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_DotNetAppHostExecutableName();
    [CompilerGeneratedAttribute]
public void set_DotNetAppHostExecutableName(string value);
    [CompilerGeneratedAttribute]
public string get_DotNetHostFxrLibraryName();
    [CompilerGeneratedAttribute]
public void set_DotNetHostFxrLibraryName(string value);
    [CompilerGeneratedAttribute]
public string get_DotNetHostPolicyLibraryName();
    [CompilerGeneratedAttribute]
public void set_DotNetHostPolicyLibraryName(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ManagedAssemblies();
    [CompilerGeneratedAttribute]
public void set_ManagedAssemblies(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_AssembliesToSkipPublish();
    [CompilerGeneratedAttribute]
public void set_AssembliesToSkipPublish(ITaskItem[] value);
    public virtual bool Execute();
}
public abstract class Build.Tasks.DesktopCompatibleTask : Task {
    private static DesktopCompatibleTask();
    private static Assembly CurrentDomain_AssemblyResolve(object sender, ResolveEventArgs args);
    private static bool Probe(string filePath, Version minimumVersion, Assembly& assembly);
}
public class Build.Tasks.DumpNativeResources : DesktopCompatibleTask {
    [CompilerGeneratedAttribute]
private string <MainAssembly>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResourceFile>k__BackingField;
    [RequiredAttribute]
public string MainAssembly { get; public set; }
    [RequiredAttribute]
public string ResourceFile { get; public set; }
    [CompilerGeneratedAttribute]
public string get_MainAssembly();
    [CompilerGeneratedAttribute]
public void set_MainAssembly(string value);
    [CompilerGeneratedAttribute]
public string get_ResourceFile();
    [CompilerGeneratedAttribute]
public void set_ResourceFile(string value);
    public virtual bool Execute();
}
[ExtensionAttribute]
internal static class Build.Tasks.ResourceHelper : object {
    [ExtensionAttribute]
public static void WriteNameOrId(BinaryWriter bw, object nameOrId);
}
internal class Build.Tasks.ResWriter : object {
    private PEMemoryBlock _memoryBlock;
    private PEReader _peReader;
    private int _rsrcOffset;
    private int _rsrcSize;
    private BinaryWriter _bw;
    private object _typeIdOrName;
    private object _resourceIdOrName;
    private int _languageId;
    private ResWriter(PEMemoryBlock memoryBlock, PEReader peReader, int rsrcOffset, int rsrcSize, BinaryWriter bw);
    public static void WriteResources(PEReader reader, int rsrcOffset, int rsrcSize, BinaryWriter bw);
    private void DumpDirectory(BlobReader br, int level);
    private void DumpEntry(BlobReader br);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
