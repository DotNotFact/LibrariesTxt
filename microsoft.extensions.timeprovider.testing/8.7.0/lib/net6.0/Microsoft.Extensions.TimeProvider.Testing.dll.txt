[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.Time.Testing.FakeTimeProvider : TimeProvider {
    internal HashSet`1<Waiter> Waiters;
    private DateTimeOffset _now;
    private TimeZoneInfo _localTimeZone;
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _wakeWaitersGate;
    private TimeSpan _autoAdvanceAmount;
    [CompilerGeneratedAttribute]
private DateTimeOffset <Start>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private EventHandler GateOpening;
    public DateTimeOffset Start { get; }
    public TimeSpan AutoAdvanceAmount { get; public set; }
    public TimeZoneInfo LocalTimeZone { get; }
    public long TimestampFrequency { get; }
    public FakeTimeProvider(DateTimeOffset startDateTime);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_Start();
    public TimeSpan get_AutoAdvanceAmount();
    public void set_AutoAdvanceAmount(TimeSpan value);
    public virtual DateTimeOffset GetUtcNow();
    public void SetUtcNow(DateTimeOffset value);
    public void Advance(TimeSpan delta);
    [ExperimentalAttribute("EXTEXP0004")]
public void AdjustTime(DateTimeOffset value);
    public virtual long GetTimestamp();
    public virtual TimeZoneInfo get_LocalTimeZone();
    public void SetLocalTimeZone(TimeZoneInfo localTimeZone);
    public virtual long get_TimestampFrequency();
    public virtual string ToString();
    public virtual ITimer CreateTimer(TimerCallback callback, object state, TimeSpan dueTime, TimeSpan period);
    internal void RemoveWaiter(Waiter waiter);
    internal void AddWaiter(Waiter waiter, long dueTime);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void add_GateOpening(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void remove_GateOpening(EventHandler value);
    private void WakeWaiters();
}
internal class Microsoft.Extensions.Time.Testing.Timer : object {
    private static UInt32 MaxSupportedTimeout;
    [NullableAttribute("2")]
private Waiter _waiter;
    [NullableAttribute("2")]
private FakeTimeProvider _timeProvider;
    [NullableAttribute("2")]
private TimerCallback _callback;
    [NullableAttribute("2")]
private object _state;
    [NullableContextAttribute("1")]
public Timer(FakeTimeProvider timeProvider, TimerCallback callback, object state);
    public sealed virtual bool Change(TimeSpan dueTime, TimeSpan period);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    public sealed virtual ValueTask DisposeAsync();
    private void Dispose(bool _);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.Time.Testing.Waiter : object {
    private TimerCallback _callback;
    [NullableAttribute("2")]
private object _state;
    [CompilerGeneratedAttribute]
private long <ScheduledOn>k__BackingField;
    [CompilerGeneratedAttribute]
private long <WakeupTime>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Period>k__BackingField;
    public long ScheduledOn { get; public set; }
    public long WakeupTime { get; public set; }
    public long Period { get; }
    public Waiter(TimerCallback callback, object state, long period);
    [CompilerGeneratedAttribute]
public long get_ScheduledOn();
    [CompilerGeneratedAttribute]
public void set_ScheduledOn(long value);
    [CompilerGeneratedAttribute]
public long get_WakeupTime();
    [CompilerGeneratedAttribute]
public void set_WakeupTime(long value);
    [CompilerGeneratedAttribute]
public long get_Period();
    public void InvokeCallback();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.Shared.DiagnosticIds.DiagnosticIds : object {
    internal static string UrlFormat;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExcludeFromCodeCoverageAttribute]
internal static class Microsoft.Shared.Diagnostics.Throw : object {
    public static T IfNull(T argument, string paramName);
    public static TMember IfNullOrMemberNull(TParameter argument, TMember member, string paramName, string memberName);
    public static TMember IfMemberNull(TParameter argument, TMember member, string paramName, string memberName);
    public static string IfNullOrWhitespace(string argument, string paramName);
    public static string IfNullOrEmpty(string argument, string paramName);
    public static void IfBufferTooSmall(int bufferSize, int requiredSize, string paramName);
    [NullableContextAttribute("0")]
public static T IfOutOfRange(T argument, string paramName);
    [ExcludeFromCodeCoverageAttribute]
public static IEnumerable`1<T> IfNullOrEmpty(IEnumerable`1<T> argument, string paramName);
    [DoesNotReturnAttribute]
public static void ArgumentNullException(string paramName);
    [DoesNotReturnAttribute]
public static void ArgumentNullException(string paramName, string message);
    [DoesNotReturnAttribute]
public static void ArgumentOutOfRangeException(string paramName);
    [DoesNotReturnAttribute]
public static void ArgumentOutOfRangeException(string paramName, string message);
    [NullableContextAttribute("2")]
[DoesNotReturnAttribute]
public static void ArgumentOutOfRangeException(string paramName, object actualValue, string message);
    [DoesNotReturnAttribute]
public static void ArgumentException(string paramName, string message);
    [NullableContextAttribute("2")]
[DoesNotReturnAttribute]
public static void ArgumentException(string paramName, string message, Exception innerException);
    [DoesNotReturnAttribute]
public static void InvalidOperationException(string message);
    [DoesNotReturnAttribute]
public static void InvalidOperationException(string message, Exception innerException);
    public static int IfLessThan(int argument, int min, string paramName);
    public static int IfGreaterThan(int argument, int max, string paramName);
    public static int IfLessThanOrEqual(int argument, int min, string paramName);
    public static int IfGreaterThanOrEqual(int argument, int max, string paramName);
    public static int IfOutOfRange(int argument, int min, int max, string paramName);
    public static int IfZero(int argument, string paramName);
    public static UInt32 IfLessThan(UInt32 argument, UInt32 min, string paramName);
    public static UInt32 IfGreaterThan(UInt32 argument, UInt32 max, string paramName);
    public static UInt32 IfLessThanOrEqual(UInt32 argument, UInt32 min, string paramName);
    public static UInt32 IfGreaterThanOrEqual(UInt32 argument, UInt32 max, string paramName);
    public static UInt32 IfOutOfRange(UInt32 argument, UInt32 min, UInt32 max, string paramName);
    public static UInt32 IfZero(UInt32 argument, string paramName);
    public static long IfLessThan(long argument, long min, string paramName);
    public static long IfGreaterThan(long argument, long max, string paramName);
    public static long IfLessThanOrEqual(long argument, long min, string paramName);
    public static long IfGreaterThanOrEqual(long argument, long max, string paramName);
    public static long IfOutOfRange(long argument, long min, long max, string paramName);
    public static long IfZero(long argument, string paramName);
    public static ulong IfLessThan(ulong argument, ulong min, string paramName);
    public static ulong IfGreaterThan(ulong argument, ulong max, string paramName);
    public static ulong IfLessThanOrEqual(ulong argument, ulong min, string paramName);
    public static ulong IfGreaterThanOrEqual(ulong argument, ulong max, string paramName);
    public static ulong IfOutOfRange(ulong argument, ulong min, ulong max, string paramName);
    public static ulong IfZero(ulong argument, string paramName);
    public static double IfLessThan(double argument, double min, string paramName);
    public static double IfGreaterThan(double argument, double max, string paramName);
    public static double IfLessThanOrEqual(double argument, double min, string paramName);
    public static double IfGreaterThanOrEqual(double argument, double max, string paramName);
    public static double IfOutOfRange(double argument, double min, double max, string paramName);
    public static double IfZero(double argument, string paramName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExcludeFromCodeCoverageAttribute]
[AttributeUsageAttribute("6141")]
internal class System.Diagnostics.CodeAnalysis.ExperimentalAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <DiagnosticId>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <UrlFormat>k__BackingField;
    public string DiagnosticId { get; }
    [NullableAttribute("2")]
public string UrlFormat { get; public set; }
    public ExperimentalAttribute(string diagnosticId);
    [CompilerGeneratedAttribute]
public string get_DiagnosticId();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_UrlFormat();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_UrlFormat(string value);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
