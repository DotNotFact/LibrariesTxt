[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.Data.Sqlite.Properties.Resources : object {
    private static ResourceManager _resourceManager;
    public static string CannotStoreNaN { get; }
    public static string ConnectionStringRequiresClosedConnection { get; }
    public static string DataReaderOpen { get; }
    public static string DefaultNativeError { get; }
    public static string InvalidOffsetAndCount { get; }
    public static string NoData { get; }
    public static string ParallelTransactionsNotSupported { get; }
    public static string ResizeNotSupported { get; }
    public static string SeekBeforeBegin { get; }
    public static string SqlBlobRequiresOpenConnection { get; }
    public static string TransactionCompleted { get; }
    public static string TransactionConnectionMismatch { get; }
    public static string TransactionRequired { get; }
    public static string WriteNotSupported { get; }
    private static Resources();
    [NullableContextAttribute("2")]
public static string AmbiguousColumnName(object name, object column1, object column2);
    public static string AmbiguousParameterName(object parameterName);
    public static string CalledOnNullValue(object ordinal);
    public static string CallRequiresOpenConnection(object methodName);
    public static string get_CannotStoreNaN();
    public static string get_ConnectionStringRequiresClosedConnection();
    [NullableContextAttribute("2")]
public static string ConvertFailed(object sourceType, object targetType);
    public static string DataReaderClosed(object operation);
    public static string get_DataReaderOpen();
    public static string get_DefaultNativeError();
    public static string EncryptionNotSupported(object libraryName);
    public static string InvalidCommandType(object commandType);
    [NullableContextAttribute("2")]
public static string InvalidEnumValue(object enumType, object value);
    public static string InvalidIsolationLevel(object isolationLevel);
    public static string get_InvalidOffsetAndCount();
    public static string InvalidParameterDirection(object direction);
    public static string KeywordNotSupported(object keyword);
    public static string MissingParameters(object parameters);
    public static string get_NoData();
    public static string get_ParallelTransactionsNotSupported();
    public static string ParameterNotFound(object parameterName);
    public static string RequiresSet(object propertyName);
    public static string get_ResizeNotSupported();
    public static string get_SeekBeforeBegin();
    public static string SetRequiresNoOpenReader(object propertyName);
    public static string get_SqlBlobRequiresOpenConnection();
    [NullableContextAttribute("2")]
public static string SqliteNativeError(object errorCode, object message);
    public static string TooManyRestrictions(object collectionName);
    public static string get_TransactionCompleted();
    public static string get_TransactionConnectionMismatch();
    public static string get_TransactionRequired();
    [NullableContextAttribute("2")]
public static string UDFCalledWithNull(object function, object ordinal);
    public static string UnknownCollection(object collectionName);
    public static string UnknownDataType(object typeName);
    public static string get_WriteNotSupported();
    private static string GetString(string name, String[] formatterNames);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Data.Sqlite.SqliteBlob : Stream {
    private sqlite3_blob _blob;
    private SqliteConnection _connection;
    private long _position;
    [CompilerGeneratedAttribute]
private bool <CanWrite>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Length>k__BackingField;
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public bool CanSeek { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public SqliteBlob(SqliteConnection connection, string tableName, string columnName, long rowid, bool readOnly);
    public SqliteBlob(SqliteConnection connection, string databaseName, string tableName, string columnName, long rowid, bool readOnly);
    public virtual bool get_CanRead();
    [CompilerGeneratedAttribute]
public virtual bool get_CanWrite();
    public virtual bool get_CanSeek();
    [CompilerGeneratedAttribute]
public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    [NullableContextAttribute("0")]
public virtual int Read(Span`1<byte> buffer);
    public virtual void Write(Byte[] buffer, int offset, int count);
    [NullableContextAttribute("0")]
public virtual void Write(ReadOnlySpan`1<byte> buffer);
    public virtual long Seek(long offset, SeekOrigin origin);
    protected virtual void Dispose(bool disposing);
    public virtual void Flush();
    public virtual void SetLength(long value);
}
public enum Microsoft.Data.Sqlite.SqliteCacheMode : Enum {
    public int value__;
    public static SqliteCacheMode Default;
    public static SqliteCacheMode Private;
    public static SqliteCacheMode Shared;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Data.Sqlite.SqliteCommand : DbCommand {
    private SqliteParameterCollection _parameters;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<ValueTuple`2<sqlite3_stmt, int>> _preparedStatements;
    private SqliteConnection _connection;
    private string _commandText;
    private bool _prepared;
    private Nullable`1<int> _commandTimeout;
    [CompilerGeneratedAttribute]
private SqliteTransaction <Transaction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DesignTimeVisible>k__BackingField;
    [CompilerGeneratedAttribute]
private UpdateRowSource <UpdatedRowSource>k__BackingField;
    [CompilerGeneratedAttribute]
private SqliteDataReader <DataReader>k__BackingField;
    public CommandType CommandType { get; public set; }
    [NullableAttribute("1")]
public string CommandText { get; public set; }
    public SqliteConnection Connection { get; public set; }
    protected DbConnection DbConnection { get; protected set; }
    public SqliteTransaction Transaction { get; public set; }
    protected DbTransaction DbTransaction { get; protected set; }
    [NullableAttribute("1")]
public SqliteParameterCollection Parameters { get; }
    [NullableAttribute("1")]
protected DbParameterCollection DbParameterCollection { get; }
    public int CommandTimeout { get; public set; }
    public bool DesignTimeVisible { get; public set; }
    public UpdateRowSource UpdatedRowSource { get; public set; }
    protected internal SqliteDataReader DataReader { get; protected internal set; }
    public SqliteCommand(string commandText);
    public SqliteCommand(string commandText, SqliteConnection connection);
    public SqliteCommand(string commandText, SqliteConnection connection, SqliteTransaction transaction);
    public virtual CommandType get_CommandType();
    public virtual void set_CommandType(CommandType value);
    [NullableContextAttribute("1")]
public virtual string get_CommandText();
    [NullableContextAttribute("1")]
public virtual void set_CommandText(string value);
    public virtual SqliteConnection get_Connection();
    public virtual void set_Connection(SqliteConnection value);
    protected virtual DbConnection get_DbConnection();
    protected virtual void set_DbConnection(DbConnection value);
    [CompilerGeneratedAttribute]
public virtual SqliteTransaction get_Transaction();
    [CompilerGeneratedAttribute]
public virtual void set_Transaction(SqliteTransaction value);
    protected virtual DbTransaction get_DbTransaction();
    protected virtual void set_DbTransaction(DbTransaction value);
    [NullableContextAttribute("1")]
public virtual SqliteParameterCollection get_Parameters();
    [NullableContextAttribute("1")]
protected virtual DbParameterCollection get_DbParameterCollection();
    public virtual int get_CommandTimeout();
    public virtual void set_CommandTimeout(int value);
    [CompilerGeneratedAttribute]
public virtual bool get_DesignTimeVisible();
    [CompilerGeneratedAttribute]
public virtual void set_DesignTimeVisible(bool value);
    [CompilerGeneratedAttribute]
public virtual UpdateRowSource get_UpdatedRowSource();
    [CompilerGeneratedAttribute]
public virtual void set_UpdatedRowSource(UpdateRowSource value);
    [CompilerGeneratedAttribute]
protected internal virtual SqliteDataReader get_DataReader();
    [CompilerGeneratedAttribute]
protected internal virtual void set_DataReader(SqliteDataReader value);
    protected virtual void Dispose(bool disposing);
    [NullableContextAttribute("1")]
public virtual SqliteParameter CreateParameter();
    [NullableContextAttribute("1")]
protected virtual DbParameter CreateDbParameter();
    public virtual void Prepare();
    [NullableContextAttribute("1")]
public virtual SqliteDataReader ExecuteReader();
    [NullableContextAttribute("1")]
public virtual SqliteDataReader ExecuteReader(CommandBehavior behavior);
    [IteratorStateMachineAttribute("Microsoft.Data.Sqlite.SqliteCommand/<GetStatements>d__54")]
private IEnumerable`1<sqlite3_stmt> GetStatements();
    [NullableContextAttribute("1")]
protected virtual DbDataReader ExecuteDbDataReader(CommandBehavior behavior);
    [NullableContextAttribute("1")]
public virtual Task`1<SqliteDataReader> ExecuteReaderAsync();
    [NullableContextAttribute("1")]
public virtual Task`1<SqliteDataReader> ExecuteReaderAsync(CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public virtual Task`1<SqliteDataReader> ExecuteReaderAsync(CommandBehavior behavior);
    [NullableContextAttribute("1")]
public virtual Task`1<SqliteDataReader> ExecuteReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Microsoft.Data.Sqlite.SqliteCommand/<ExecuteDbDataReaderAsync>d__60")]
protected virtual Task`1<DbDataReader> ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken);
    public virtual int ExecuteNonQuery();
    public virtual object ExecuteScalar();
    public virtual void Cancel();
    [IteratorStateMachineAttribute("Microsoft.Data.Sqlite.SqliteCommand/<PrepareAndEnumerateStatements>d__64")]
private IEnumerable`1<ValueTuple`2<sqlite3_stmt, int>> PrepareAndEnumerateStatements();
    private void DisposePreparedStatements(bool disposing);
    private static bool IsBusy(int rc);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Data.Sqlite.SqliteConnection : DbConnection {
    [NullableAttribute("1")]
internal static string MainDatabaseName;
    private static int SQLITE_WIN32_DATA_DIRECTORY_TYPE;
    private static int SQLITE_WIN32_TEMP_DIRECTORY_TYPE;
    private List`1<WeakReference`1<SqliteCommand>> _commands;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, ValueTuple`2<object, strdelegate_collation>> _collations;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<ValueTuple`2<string, int>, ValueTuple`3<int, object, delegate_function_scalar>> _functions;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<ValueTuple`2<string, int>, ValueTuple`4<int, object, delegate_function_aggregate_step, delegate_function_aggregate_final>> _aggregates;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private HashSet`1<ValueTuple`2<string, string>> _extensions;
    private string _connectionString;
    private ConnectionState _state;
    private SqliteConnectionInternal _innerConnection;
    private bool _extensionsEnabled;
    private Nullable`1<int> _defaultTimeout;
    private static StateChangeEventArgs _fromClosedToOpenEventArgs;
    private static StateChangeEventArgs _fromOpenToClosedEventArgs;
    [CompilerGeneratedAttribute]
private SqliteConnectionPoolGroup <PoolGroup>k__BackingField;
    [CompilerGeneratedAttribute]
private SqliteTransaction <Transaction>k__BackingField;
    public sqlite3 Handle { get; }
    [NullableAttribute("1")]
public string ConnectionString { get; public set; }
    [NullableAttribute("1")]
internal SqliteConnectionPoolGroup PoolGroup { get; internal set; }
    [NullableAttribute("1")]
internal SqliteConnectionStringBuilder ConnectionOptions { get; }
    [NullableAttribute("1")]
public string Database { get; }
    [NullableAttribute("1")]
public string DataSource { get; }
    public int DefaultTimeout { get; public set; }
    [NullableAttribute("1")]
public string ServerVersion { get; }
    public ConnectionState State { get; }
    [NullableAttribute("1")]
protected DbProviderFactory DbProviderFactory { get; }
    protected internal SqliteTransaction Transaction { get; protected internal set; }
    private static SqliteConnection();
    public SqliteConnection(string connectionString);
    [NullableContextAttribute("1")]
public virtual void CreateAggregate(string name, Func`2<TAccumulate, TAccumulate> func, bool isDeterministic);
    public virtual void CreateAggregate(string name, Func`3<TAccumulate, T1, TAccumulate> func, bool isDeterministic);
    public virtual void CreateAggregate(string name, Func`4<TAccumulate, T1, T2, TAccumulate> func, bool isDeterministic);
    public virtual void CreateAggregate(string name, Func`5<TAccumulate, T1, T2, T3, TAccumulate> func, bool isDeterministic);
    public virtual void CreateAggregate(string name, Func`6<TAccumulate, T1, T2, T3, T4, TAccumulate> func, bool isDeterministic);
    public virtual void CreateAggregate(string name, Func`7<TAccumulate, T1, T2, T3, T4, T5, TAccumulate> func, bool isDeterministic);
    public virtual void CreateAggregate(string name, Func`8<TAccumulate, T1, T2, T3, T4, T5, T6, TAccumulate> func, bool isDeterministic);
    public virtual void CreateAggregate(string name, Func`9<TAccumulate, T1, T2, T3, T4, T5, T6, T7, TAccumulate> func, bool isDeterministic);
    public virtual void CreateAggregate(string name, Func`10<TAccumulate, T1, T2, T3, T4, T5, T6, T7, T8, TAccumulate> func, bool isDeterministic);
    public virtual void CreateAggregate(string name, Func`11<TAccumulate, T1, T2, T3, T4, T5, T6, T7, T8, T9, TAccumulate> func, bool isDeterministic);
    public virtual void CreateAggregate(string name, Func`12<TAccumulate, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TAccumulate> func, bool isDeterministic);
    public virtual void CreateAggregate(string name, Func`13<TAccumulate, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TAccumulate> func, bool isDeterministic);
    public virtual void CreateAggregate(string name, Func`14<TAccumulate, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TAccumulate> func, bool isDeterministic);
    public virtual void CreateAggregate(string name, Func`15<TAccumulate, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TAccumulate> func, bool isDeterministic);
    public virtual void CreateAggregate(string name, Func`16<TAccumulate, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TAccumulate> func, bool isDeterministic);
    public virtual void CreateAggregate(string name, Func`17<TAccumulate, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TAccumulate> func, bool isDeterministic);
    [NullableContextAttribute("1")]
public virtual void CreateAggregate(string name, Func`3<TAccumulate, Object[], TAccumulate> func, bool isDeterministic);
    [NullableContextAttribute("1")]
public virtual void CreateAggregate(string name, TAccumulate seed, Func`2<TAccumulate, TAccumulate> func, bool isDeterministic);
    [NullableContextAttribute("1")]
public virtual void CreateAggregate(string name, TAccumulate seed, Func`3<TAccumulate, T1, TAccumulate> func, bool isDeterministic);
    public virtual void CreateAggregate(string name, TAccumulate seed, Func`4<TAccumulate, T1, T2, TAccumulate> func, bool isDeterministic);
    public virtual void CreateAggregate(string name, TAccumulate seed, Func`5<TAccumulate, T1, T2, T3, TAccumulate> func, bool isDeterministic);
    public virtual void CreateAggregate(string name, TAccumulate seed, Func`6<TAccumulate, T1, T2, T3, T4, TAccumulate> func, bool isDeterministic);
    public virtual void CreateAggregate(string name, TAccumulate seed, Func`7<TAccumulate, T1, T2, T3, T4, T5, TAccumulate> func, bool isDeterministic);
    public virtual void CreateAggregate(string name, TAccumulate seed, Func`8<TAccumulate, T1, T2, T3, T4, T5, T6, TAccumulate> func, bool isDeterministic);
    public virtual void CreateAggregate(string name, TAccumulate seed, Func`9<TAccumulate, T1, T2, T3, T4, T5, T6, T7, TAccumulate> func, bool isDeterministic);
    public virtual void CreateAggregate(string name, TAccumulate seed, Func`10<TAccumulate, T1, T2, T3, T4, T5, T6, T7, T8, TAccumulate> func, bool isDeterministic);
    public virtual void CreateAggregate(string name, TAccumulate seed, Func`11<TAccumulate, T1, T2, T3, T4, T5, T6, T7, T8, T9, TAccumulate> func, bool isDeterministic);
    public virtual void CreateAggregate(string name, TAccumulate seed, Func`12<TAccumulate, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TAccumulate> func, bool isDeterministic);
    public virtual void CreateAggregate(string name, TAccumulate seed, Func`13<TAccumulate, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TAccumulate> func, bool isDeterministic);
    public virtual void CreateAggregate(string name, TAccumulate seed, Func`14<TAccumulate, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TAccumulate> func, bool isDeterministic);
    public virtual void CreateAggregate(string name, TAccumulate seed, Func`15<TAccumulate, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TAccumulate> func, bool isDeterministic);
    public virtual void CreateAggregate(string name, TAccumulate seed, Func`16<TAccumulate, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TAccumulate> func, bool isDeterministic);
    public virtual void CreateAggregate(string name, TAccumulate seed, Func`17<TAccumulate, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TAccumulate> func, bool isDeterministic);
    [NullableContextAttribute("1")]
public virtual void CreateAggregate(string name, TAccumulate seed, Func`3<TAccumulate, Object[], TAccumulate> func, bool isDeterministic);
    [NullableContextAttribute("1")]
public virtual void CreateAggregate(string name, TAccumulate seed, Func`2<TAccumulate, TAccumulate> func, Func`2<TAccumulate, TResult> resultSelector, bool isDeterministic);
    public virtual void CreateAggregate(string name, TAccumulate seed, Func`3<TAccumulate, T1, TAccumulate> func, Func`2<TAccumulate, TResult> resultSelector, bool isDeterministic);
    public virtual void CreateAggregate(string name, TAccumulate seed, Func`4<TAccumulate, T1, T2, TAccumulate> func, Func`2<TAccumulate, TResult> resultSelector, bool isDeterministic);
    public virtual void CreateAggregate(string name, TAccumulate seed, Func`5<TAccumulate, T1, T2, T3, TAccumulate> func, Func`2<TAccumulate, TResult> resultSelector, bool isDeterministic);
    public virtual void CreateAggregate(string name, TAccumulate seed, Func`6<TAccumulate, T1, T2, T3, T4, TAccumulate> func, Func`2<TAccumulate, TResult> resultSelector, bool isDeterministic);
    public virtual void CreateAggregate(string name, TAccumulate seed, Func`7<TAccumulate, T1, T2, T3, T4, T5, TAccumulate> func, Func`2<TAccumulate, TResult> resultSelector, bool isDeterministic);
    public virtual void CreateAggregate(string name, TAccumulate seed, Func`8<TAccumulate, T1, T2, T3, T4, T5, T6, TAccumulate> func, Func`2<TAccumulate, TResult> resultSelector, bool isDeterministic);
    public virtual void CreateAggregate(string name, TAccumulate seed, Func`9<TAccumulate, T1, T2, T3, T4, T5, T6, T7, TAccumulate> func, Func`2<TAccumulate, TResult> resultSelector, bool isDeterministic);
    public virtual void CreateAggregate(string name, TAccumulate seed, Func`10<TAccumulate, T1, T2, T3, T4, T5, T6, T7, T8, TAccumulate> func, Func`2<TAccumulate, TResult> resultSelector, bool isDeterministic);
    public virtual void CreateAggregate(string name, TAccumulate seed, Func`11<TAccumulate, T1, T2, T3, T4, T5, T6, T7, T8, T9, TAccumulate> func, Func`2<TAccumulate, TResult> resultSelector, bool isDeterministic);
    public virtual void CreateAggregate(string name, TAccumulate seed, Func`12<TAccumulate, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TAccumulate> func, Func`2<TAccumulate, TResult> resultSelector, bool isDeterministic);
    public virtual void CreateAggregate(string name, TAccumulate seed, Func`13<TAccumulate, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TAccumulate> func, Func`2<TAccumulate, TResult> resultSelector, bool isDeterministic);
    public virtual void CreateAggregate(string name, TAccumulate seed, Func`14<TAccumulate, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TAccumulate> func, Func`2<TAccumulate, TResult> resultSelector, bool isDeterministic);
    public virtual void CreateAggregate(string name, TAccumulate seed, Func`15<TAccumulate, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TAccumulate> func, Func`2<TAccumulate, TResult> resultSelector, bool isDeterministic);
    public virtual void CreateAggregate(string name, TAccumulate seed, Func`16<TAccumulate, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TAccumulate> func, Func`2<TAccumulate, TResult> resultSelector, bool isDeterministic);
    public virtual void CreateAggregate(string name, TAccumulate seed, Func`17<TAccumulate, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TAccumulate> func, Func`2<TAccumulate, TResult> resultSelector, bool isDeterministic);
    [NullableContextAttribute("1")]
public virtual void CreateAggregate(string name, TAccumulate seed, Func`3<TAccumulate, Object[], TAccumulate> func, Func`2<TAccumulate, TResult> resultSelector, bool isDeterministic);
    [NullableContextAttribute("1")]
public virtual void CreateFunction(string name, Func`1<TResult> function, bool isDeterministic);
    public virtual void CreateFunction(string name, Func`2<T1, TResult> function, bool isDeterministic);
    public virtual void CreateFunction(string name, Func`3<T1, T2, TResult> function, bool isDeterministic);
    public virtual void CreateFunction(string name, Func`4<T1, T2, T3, TResult> function, bool isDeterministic);
    public virtual void CreateFunction(string name, Func`5<T1, T2, T3, T4, TResult> function, bool isDeterministic);
    public virtual void CreateFunction(string name, Func`6<T1, T2, T3, T4, T5, TResult> function, bool isDeterministic);
    public virtual void CreateFunction(string name, Func`7<T1, T2, T3, T4, T5, T6, TResult> function, bool isDeterministic);
    public virtual void CreateFunction(string name, Func`8<T1, T2, T3, T4, T5, T6, T7, TResult> function, bool isDeterministic);
    public virtual void CreateFunction(string name, Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TResult> function, bool isDeterministic);
    public virtual void CreateFunction(string name, Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> function, bool isDeterministic);
    public virtual void CreateFunction(string name, Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> function, bool isDeterministic);
    public virtual void CreateFunction(string name, Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> function, bool isDeterministic);
    public virtual void CreateFunction(string name, Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult> function, bool isDeterministic);
    public virtual void CreateFunction(string name, Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> function, bool isDeterministic);
    public virtual void CreateFunction(string name, Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> function, bool isDeterministic);
    public virtual void CreateFunction(string name, Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult> function, bool isDeterministic);
    public virtual void CreateFunction(string name, Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> function, bool isDeterministic);
    [NullableContextAttribute("1")]
public virtual void CreateFunction(string name, Func`2<Object[], TResult> function, bool isDeterministic);
    [NullableContextAttribute("1")]
public virtual void CreateFunction(string name, TState state, Func`2<TState, TResult> function, bool isDeterministic);
    public virtual void CreateFunction(string name, TState state, Func`3<TState, T1, TResult> function, bool isDeterministic);
    public virtual void CreateFunction(string name, TState state, Func`4<TState, T1, T2, TResult> function, bool isDeterministic);
    public virtual void CreateFunction(string name, TState state, Func`5<TState, T1, T2, T3, TResult> function, bool isDeterministic);
    public virtual void CreateFunction(string name, TState state, Func`6<TState, T1, T2, T3, T4, TResult> function, bool isDeterministic);
    public virtual void CreateFunction(string name, TState state, Func`7<TState, T1, T2, T3, T4, T5, TResult> function, bool isDeterministic);
    public virtual void CreateFunction(string name, TState state, Func`8<TState, T1, T2, T3, T4, T5, T6, TResult> function, bool isDeterministic);
    public virtual void CreateFunction(string name, TState state, Func`9<TState, T1, T2, T3, T4, T5, T6, T7, TResult> function, bool isDeterministic);
    public virtual void CreateFunction(string name, TState state, Func`10<TState, T1, T2, T3, T4, T5, T6, T7, T8, TResult> function, bool isDeterministic);
    public virtual void CreateFunction(string name, TState state, Func`11<TState, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> function, bool isDeterministic);
    public virtual void CreateFunction(string name, TState state, Func`12<TState, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> function, bool isDeterministic);
    public virtual void CreateFunction(string name, TState state, Func`13<TState, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> function, bool isDeterministic);
    public virtual void CreateFunction(string name, TState state, Func`14<TState, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult> function, bool isDeterministic);
    public virtual void CreateFunction(string name, TState state, Func`15<TState, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> function, bool isDeterministic);
    public virtual void CreateFunction(string name, TState state, Func`16<TState, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> function, bool isDeterministic);
    public virtual void CreateFunction(string name, TState state, Func`17<TState, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult> function, bool isDeterministic);
    [NullableContextAttribute("1")]
public virtual void CreateFunction(string name, TState state, Func`3<TState, Object[], TResult> function, bool isDeterministic);
    public virtual sqlite3 get_Handle();
    [NullableContextAttribute("1")]
public virtual string get_ConnectionString();
    [NullableContextAttribute("1")]
[MemberNotNullAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public virtual void set_ConnectionString(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal SqliteConnectionPoolGroup get_PoolGroup();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal void set_PoolGroup(SqliteConnectionPoolGroup value);
    [NullableContextAttribute("1")]
internal SqliteConnectionStringBuilder get_ConnectionOptions();
    [NullableContextAttribute("1")]
public virtual string get_Database();
    [NullableContextAttribute("1")]
public virtual string get_DataSource();
    public virtual int get_DefaultTimeout();
    public virtual void set_DefaultTimeout(int value);
    [NullableContextAttribute("1")]
public virtual string get_ServerVersion();
    public virtual ConnectionState get_State();
    [NullableContextAttribute("1")]
protected virtual DbProviderFactory get_DbProviderFactory();
    [CompilerGeneratedAttribute]
protected internal virtual SqliteTransaction get_Transaction();
    [CompilerGeneratedAttribute]
protected internal virtual void set_Transaction(SqliteTransaction value);
    public static void ClearAllPools();
    [NullableContextAttribute("1")]
public static void ClearPool(SqliteConnection connection);
    public virtual void Open();
    public virtual void Close();
    internal void Deactivate();
    protected virtual void Dispose(bool disposing);
    [NullableContextAttribute("1")]
public virtual SqliteCommand CreateCommand();
    [NullableContextAttribute("1")]
protected virtual DbCommand CreateDbCommand();
    [NullableContextAttribute("1")]
internal void AddCommand(SqliteCommand command);
    [NullableContextAttribute("1")]
internal void RemoveCommand(SqliteCommand command);
    [NullableContextAttribute("1")]
public virtual void CreateCollation(string name, Comparison`1<string> comparison);
    [NullableContextAttribute("1")]
public virtual void CreateCollation(string name, T state, Func`4<T, string, string, int> comparison);
    [NullableContextAttribute("1")]
public virtual SqliteTransaction BeginTransaction();
    [NullableContextAttribute("1")]
public virtual SqliteTransaction BeginTransaction(bool deferred);
    [NullableContextAttribute("1")]
protected virtual DbTransaction BeginDbTransaction(IsolationLevel isolationLevel);
    [NullableContextAttribute("1")]
public virtual SqliteTransaction BeginTransaction(IsolationLevel isolationLevel);
    [NullableContextAttribute("1")]
public virtual SqliteTransaction BeginTransaction(IsolationLevel isolationLevel, bool deferred);
    [NullableContextAttribute("1")]
public virtual void ChangeDatabase(string databaseName);
    public virtual void EnableExtensions(bool enable);
    [NullableContextAttribute("1")]
public virtual void LoadExtension(string file, string proc);
    private void LoadExtensionCore(string file, string proc);
    [NullableContextAttribute("1")]
public virtual void BackupDatabase(SqliteConnection destination);
    [NullableContextAttribute("1")]
public virtual void BackupDatabase(SqliteConnection destination, string destinationName, string sourceName);
    [NullableContextAttribute("1")]
public virtual DataTable GetSchema();
    [NullableContextAttribute("1")]
public virtual DataTable GetSchema(string collectionName);
    [NullableContextAttribute("1")]
public virtual DataTable GetSchema(string collectionName, String[] restrictionValues);
    private void CreateFunctionCore(string name, int arity, TState state, Func`3<TState, SqliteValueReader, TResult> function, bool isDeterministic);
    private void CreateAggregateCore(string name, int arity, TAccumulate seed, Func`3<TAccumulate, SqliteValueReader, TAccumulate> func, Func`2<TAccumulate, TResult> resultSelector, bool isDeterministic);
    private static Func`3<TState, SqliteValueReader, TResult> IfNotNull(object x, Func`3<TState, SqliteValueReader, TResult> value);
    private static Object[] GetValues(SqliteValueReader reader);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.Data.Sqlite.SqliteConnectionExtensions : object {
    [ExtensionAttribute]
public static int ExecuteNonQuery(SqliteConnection connection, string commandText, SqliteParameter[] parameters);
    [ExtensionAttribute]
public static T ExecuteScalar(SqliteConnection connection, string commandText, SqliteParameter[] parameters);
    [ExtensionAttribute]
private static object ExecuteScalar(SqliteConnection connection, string commandText, SqliteParameter[] parameters);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Data.Sqlite.SqliteConnectionFactory : object {
    public static SqliteConnectionFactory Instance;
    private Timer _pruneTimer;
    private List`1<SqliteConnectionPoolGroup> _idlePoolGroups;
    private List`1<SqliteConnectionPool> _poolsToRelease;
    private ReaderWriterLockSlim _lock;
    private Dictionary`2<string, SqliteConnectionPoolGroup> _poolGroups;
    private static SqliteConnectionFactory();
    public SqliteConnectionInternal GetConnection(SqliteConnection outerConnection);
    public SqliteConnectionPoolGroup GetPoolGroup(string connectionString);
    public void ReleasePool(SqliteConnectionPool pool, bool clearing);
    public void ClearPools();
    private void PruneCallback(object _);
    [CompilerGeneratedAttribute]
private void <.ctor>b__6_0(object _, EventArgs _);
    [CompilerGeneratedAttribute]
private void <.ctor>b__6_1(object _, EventArgs _);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Data.Sqlite.SqliteConnectionInternal : object {
    private static string DataDirectoryMacro;
    private sqlite3 _db;
    private WeakReference`1<SqliteConnection> _outerConnection;
    private SqliteConnectionPool _pool;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _active;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _canBePooled;
    public bool Leaked { get; }
    public bool CanBePooled { get; }
    [NullableAttribute("2")]
public sqlite3 Handle { get; }
    public SqliteConnectionInternal(SqliteConnectionStringBuilder connectionOptions, SqliteConnectionPool pool);
    public bool get_Leaked();
    public bool get_CanBePooled();
    [NullableContextAttribute("2")]
public sqlite3 get_Handle();
    public void DoNotPool();
    public void Activate(SqliteConnection outerConnection);
    public void Close();
    public void Deactivate();
    public void Dispose();
    private void ExecuteNonQuery(string sql, int timeout);
    private string ExecuteScalar(string sql, string p1, int timeout);
    private void RetryWhileBusy(Func`1<int> action, int timeout, Stopwatch timer);
    private void RetryWhileBusy(Func`1<int> action, Action reset, int timeout, Stopwatch timer);
    private static bool IsBusy(int rc);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Data.Sqlite.SqliteConnectionPool : object {
    private static Random _random;
    private SqliteConnectionStringBuilder _connectionOptions;
    private List`1<SqliteConnectionInternal> _connections;
    private ConcurrentStack`1<SqliteConnectionInternal> _warmPool;
    private ConcurrentStack`1<SqliteConnectionInternal> _coldPool;
    private Semaphore _poolSemaphore;
    private Timer _pruneTimer;
    private State _state;
    public int Count { get; }
    public SqliteConnectionPool(SqliteConnectionStringBuilder connectionOptions);
    private static SqliteConnectionPool();
    public int get_Count();
    public void Shutdown();
    public SqliteConnectionInternal GetConnection();
    public void Return(SqliteConnectionInternal connection);
    public void Clear();
    private void PruneCallback(object _);
    private void DisposeConnection(SqliteConnectionInternal connection);
    private bool ReclaimLeakedConnections();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Data.Sqlite.SqliteConnectionPoolGroup : object {
    private SqliteConnectionPool _pool;
    private State _state;
    [CompilerGeneratedAttribute]
private SqliteConnectionStringBuilder <ConnectionOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectionString>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNonPooled>k__BackingField;
    public SqliteConnectionStringBuilder ConnectionOptions { get; }
    public string ConnectionString { get; }
    public bool IsNonPooled { get; }
    public bool IsDisabled { get; }
    public SqliteConnectionPoolGroup(SqliteConnectionStringBuilder connectionOptions, string connectionString, bool isNonPooled);
    [CompilerGeneratedAttribute]
public SqliteConnectionStringBuilder get_ConnectionOptions();
    [CompilerGeneratedAttribute]
public string get_ConnectionString();
    [CompilerGeneratedAttribute]
public bool get_IsNonPooled();
    public bool get_IsDisabled();
    [NullableContextAttribute("2")]
public SqliteConnectionPool GetPool();
    public bool Clear();
    public bool Prune();
    private bool KeepAlive();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Microsoft.Data.Sqlite.SqliteConnectionStringBuilder : DbConnectionStringBuilder {
    private static string DataSourceKeyword;
    private static string DataSourceNoSpaceKeyword;
    private static string ModeKeyword;
    private static string CacheKeyword;
    private static string FilenameKeyword;
    private static string PasswordKeyword;
    private static string ForeignKeysKeyword;
    private static string RecursiveTriggersKeyword;
    private static string DefaultTimeoutKeyword;
    private static string CommandTimeoutKeyword;
    private static string PoolingKeyword;
    private static IReadOnlyList`1<string> _validKeywords;
    private static IReadOnlyDictionary`2<string, Keywords> _keywords;
    private string _dataSource;
    private SqliteOpenMode _mode;
    private SqliteCacheMode _cache;
    private string _password;
    private Nullable`1<bool> _foreignKeys;
    private bool _recursiveTriggers;
    private int _defaultTimeout;
    private bool _pooling;
    public string DataSource { get; public set; }
    public SqliteOpenMode Mode { get; public set; }
    public ICollection Keys { get; }
    public ICollection Values { get; }
    public SqliteCacheMode Cache { get; public set; }
    public string Password { get; public set; }
    public Nullable`1<bool> ForeignKeys { get; public set; }
    public bool RecursiveTriggers { get; public set; }
    public int DefaultTimeout { get; public set; }
    public bool Pooling { get; public set; }
    [NullableAttribute("2")]
public object Item { get; public set; }
    private static SqliteConnectionStringBuilder();
    [NullableContextAttribute("2")]
public SqliteConnectionStringBuilder(string connectionString);
    public virtual string get_DataSource();
    public virtual void set_DataSource(string value);
    public virtual SqliteOpenMode get_Mode();
    public virtual void set_Mode(SqliteOpenMode value);
    public virtual ICollection get_Keys();
    public virtual ICollection get_Values();
    public virtual SqliteCacheMode get_Cache();
    public virtual void set_Cache(SqliteCacheMode value);
    public string get_Password();
    public void set_Password(string value);
    public Nullable`1<bool> get_ForeignKeys();
    public void set_ForeignKeys(Nullable`1<bool> value);
    public bool get_RecursiveTriggers();
    public void set_RecursiveTriggers(bool value);
    public int get_DefaultTimeout();
    public void set_DefaultTimeout(int value);
    public bool get_Pooling();
    public void set_Pooling(bool value);
    public virtual object get_Item(string keyword);
    public virtual void set_Item(string keyword, object value);
    private static TEnum ConvertToEnum(object value);
    private static Nullable`1<bool> ConvertToNullableBoolean(object value);
    public virtual void Clear();
    public virtual bool ContainsKey(string keyword);
    public virtual bool Remove(string keyword);
    public virtual bool ShouldSerialize(string keyword);
    public virtual bool TryGetValue(string keyword, Object& value);
    private object GetAt(Keywords index);
    private static Keywords GetIndex(string keyword);
    private void Reset(Keywords index);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Microsoft.Data.Sqlite.SqliteDataReader : DbDataReader {
    private SqliteCommand _command;
    private bool _closeConnection;
    private TimeSpan _totalElapsedTime;
    private IEnumerator`1<sqlite3_stmt> _stmtEnumerator;
    private SqliteDataRecord _record;
    private bool _closed;
    private int _recordsAffected;
    public int Depth { get; }
    public int FieldCount { get; }
    [NullableAttribute("2")]
public sqlite3_stmt Handle { get; }
    public bool HasRows { get; }
    public bool IsClosed { get; }
    public int RecordsAffected { get; }
    public object Item { get; }
    public object Item { get; }
    internal SqliteDataReader(SqliteCommand command, IEnumerable`1<sqlite3_stmt> stmts, bool closeConnection);
    public virtual int get_Depth();
    public virtual int get_FieldCount();
    [NullableContextAttribute("2")]
public virtual sqlite3_stmt get_Handle();
    public virtual bool get_HasRows();
    public virtual bool get_IsClosed();
    public virtual int get_RecordsAffected();
    public virtual object get_Item(string name);
    public virtual object get_Item(int ordinal);
    public virtual IEnumerator GetEnumerator();
    public virtual bool Read();
    public virtual bool NextResult();
    private static bool IsBusy(int rc);
    private void AddChanges(int changes);
    public virtual void Close();
    protected virtual void Dispose(bool disposing);
    public virtual string GetName(int ordinal);
    public virtual int GetOrdinal(string name);
    public virtual string GetDataTypeName(int ordinal);
    public virtual Type GetFieldType(int ordinal);
    public virtual bool IsDBNull(int ordinal);
    public virtual bool GetBoolean(int ordinal);
    public virtual byte GetByte(int ordinal);
    public virtual char GetChar(int ordinal);
    public virtual DateTime GetDateTime(int ordinal);
    public virtual DateTimeOffset GetDateTimeOffset(int ordinal);
    public virtual TimeSpan GetTimeSpan(int ordinal);
    public virtual decimal GetDecimal(int ordinal);
    public virtual double GetDouble(int ordinal);
    public virtual float GetFloat(int ordinal);
    public virtual Guid GetGuid(int ordinal);
    public virtual short GetInt16(int ordinal);
    public virtual int GetInt32(int ordinal);
    public virtual long GetInt64(int ordinal);
    public virtual string GetString(int ordinal);
    [NullableContextAttribute("2")]
public virtual long GetBytes(int ordinal, long dataOffset, Byte[] buffer, int bufferOffset, int length);
    [NullableContextAttribute("2")]
public virtual long GetChars(int ordinal, long dataOffset, Char[] buffer, int bufferOffset, int length);
    public virtual Stream GetStream(int ordinal);
    public virtual TextReader GetTextReader(int ordinal);
    [NullableContextAttribute("0")]
public virtual T GetFieldValue(int ordinal);
    public virtual object GetValue(int ordinal);
    public virtual int GetValues(Object[] values);
    public virtual DataTable GetSchemaTable();
    [CompilerGeneratedAttribute]
internal static DataColumn <GetSchemaTable>g__CreateDataTypeColumn|57_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class Microsoft.Data.Sqlite.SqliteDataRecord : SqliteValueReader {
    private SqliteConnection _connection;
    private Action`1<int> _addChanges;
    private Byte[][] _blobCache;
    private Nullable`1[] _typeCache;
    private Dictionary`2<string, int> _columnNameOrdinalCache;
    private String[] _columnNameCache;
    private bool _stepped;
    private Nullable`1<int> _rowidOrdinal;
    private bool _alreadyThrown;
    private bool _alreadyAddedChanges;
    [CompilerGeneratedAttribute]
private sqlite3_stmt <Handle>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasRows>k__BackingField;
    public object Item { get; }
    public object Item { get; }
    public int FieldCount { get; }
    public sqlite3_stmt Handle { get; }
    public bool HasRows { get; }
    public SqliteDataRecord(sqlite3_stmt stmt, bool hasRows, SqliteConnection connection, Action`1<int> addChanges);
    public virtual object get_Item(string name);
    public virtual object get_Item(int ordinal);
    public virtual int get_FieldCount();
    [CompilerGeneratedAttribute]
public sqlite3_stmt get_Handle();
    [CompilerGeneratedAttribute]
public bool get_HasRows();
    public virtual bool IsDBNull(int ordinal);
    public virtual object GetValue(int ordinal);
    protected virtual double GetDoubleCore(int ordinal);
    protected virtual long GetInt64Core(int ordinal);
    protected virtual string GetStringCore(int ordinal);
    public virtual T GetFieldValue(int ordinal);
    protected virtual Byte[] GetBlob(int ordinal);
    protected virtual Byte[] GetBlobCore(int ordinal);
    protected virtual int GetSqliteType(int ordinal);
    protected virtual T GetNull(int ordinal);
    public virtual string GetName(int ordinal);
    public virtual int GetOrdinal(string name);
    public virtual string GetDataTypeName(int ordinal);
    public virtual Type GetFieldType(int ordinal);
    internal static Type GetFieldTypeFromSqliteType(int sqliteType);
    public static Type GetFieldType(string type);
    [NullableContextAttribute("2")]
public virtual long GetBytes(int ordinal, long dataOffset, Byte[] buffer, int bufferOffset, int length);
    [NullableContextAttribute("2")]
public virtual long GetChars(int ordinal, long dataOffset, Char[] buffer, int bufferOffset, int length);
    public virtual Stream GetStream(int ordinal);
    public virtual TextReader GetTextReader(int ordinal);
    public bool Read();
    public sealed virtual void Dispose();
    private void AddChanges();
    private Byte[] GetCachedBlob(int ordinal);
    internal static int Sqlite3AffinityType(string dataTypeName);
    private static bool Contains(string haystack, string needle);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Data.Sqlite.SqliteException : DbException {
    [CompilerGeneratedAttribute]
private int <SqliteErrorCode>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SqliteExtendedErrorCode>k__BackingField;
    public int SqliteErrorCode { get; }
    public int SqliteExtendedErrorCode { get; }
    public SqliteException(string message, int errorCode);
    public SqliteException(string message, int errorCode, int extendedErrorCode);
    [CompilerGeneratedAttribute]
public virtual int get_SqliteErrorCode();
    [CompilerGeneratedAttribute]
public virtual int get_SqliteExtendedErrorCode();
    public static void ThrowExceptionForRC(int rc, sqlite3 db);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Data.Sqlite.SqliteFactory : DbProviderFactory {
    public static SqliteFactory Instance;
    private static SqliteFactory();
    public virtual DbCommand CreateCommand();
    public virtual DbConnection CreateConnection();
    public virtual DbConnectionStringBuilder CreateConnectionStringBuilder();
    public virtual DbParameter CreateParameter();
}
public enum Microsoft.Data.Sqlite.SqliteOpenMode : Enum {
    public int value__;
    public static SqliteOpenMode ReadWriteCreate;
    public static SqliteOpenMode ReadWrite;
    public static SqliteOpenMode ReadOnly;
    public static SqliteOpenMode Memory;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Data.Sqlite.SqliteParameter : DbParameter {
    private string _parameterName;
    private object _value;
    private Nullable`1<int> _size;
    private Nullable`1<SqliteType> _sqliteType;
    private string _sourceColumn;
    [CompilerGeneratedAttribute]
private DbType <DbType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNullable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SourceColumnNullMapping>k__BackingField;
    private static Char[] _parameterPrefixes;
    public DbType DbType { get; public set; }
    public SqliteType SqliteType { get; public set; }
    public ParameterDirection Direction { get; public set; }
    public bool IsNullable { get; public set; }
    public string ParameterName { get; public set; }
    public int Size { get; public set; }
    public string SourceColumn { get; public set; }
    public bool SourceColumnNullMapping { get; public set; }
    [NullableAttribute("2")]
public object Value { get; public set; }
    [NullableContextAttribute("2")]
public SqliteParameter(string name, object value);
    [NullableContextAttribute("2")]
public SqliteParameter(string name, SqliteType type);
    [NullableContextAttribute("2")]
public SqliteParameter(string name, SqliteType type, int size);
    [NullableContextAttribute("2")]
public SqliteParameter(string name, SqliteType type, int size, string sourceColumn);
    private static SqliteParameter();
    [CompilerGeneratedAttribute]
public virtual DbType get_DbType();
    [CompilerGeneratedAttribute]
public virtual void set_DbType(DbType value);
    public virtual SqliteType get_SqliteType();
    public virtual void set_SqliteType(SqliteType value);
    public virtual ParameterDirection get_Direction();
    public virtual void set_Direction(ParameterDirection value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsNullable();
    [CompilerGeneratedAttribute]
public virtual void set_IsNullable(bool value);
    public virtual string get_ParameterName();
    public virtual void set_ParameterName(string value);
    public virtual int get_Size();
    public virtual void set_Size(int value);
    public virtual string get_SourceColumn();
    public virtual void set_SourceColumn(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_SourceColumnNullMapping();
    [CompilerGeneratedAttribute]
public virtual void set_SourceColumnNullMapping(bool value);
    [NullableContextAttribute("2")]
public virtual object get_Value();
    [NullableContextAttribute("2")]
public virtual void set_Value(object value);
    public virtual void ResetDbType();
    public virtual void ResetSqliteType();
    internal bool Bind(sqlite3_stmt stmt);
    private int FindPrefixedParameter(sqlite3_stmt stmt);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Data.Sqlite.SqliteParameterBinder : SqliteValueBinder {
    private sqlite3_stmt _stmt;
    private int _index;
    private Nullable`1<int> _size;
    public SqliteParameterBinder(sqlite3_stmt stmt, int index, object value, Nullable`1<int> size, Nullable`1<SqliteType> sqliteType);
    protected virtual void BindBlob(Byte[] value);
    protected virtual void BindDoubleCore(double value);
    protected virtual void BindInt64(long value);
    protected virtual void BindNull();
    protected virtual void BindText(string value);
    private bool ShouldTruncate(int length);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Microsoft.Data.Sqlite.SqliteParameterCollection : DbParameterCollection {
    private List`1<SqliteParameter> _parameters;
    public int Count { get; }
    public object SyncRoot { get; }
    public SqliteParameter Item { get; public set; }
    public SqliteParameter Item { get; public set; }
    public virtual int get_Count();
    public virtual object get_SyncRoot();
    public virtual SqliteParameter get_Item(int index);
    public virtual void set_Item(int index, SqliteParameter value);
    public virtual SqliteParameter get_Item(string parameterName);
    public virtual void set_Item(string parameterName, SqliteParameter value);
    public virtual int Add(object value);
    public virtual SqliteParameter Add(SqliteParameter value);
    public virtual SqliteParameter Add(string parameterName, SqliteType type);
    public virtual SqliteParameter Add(string parameterName, SqliteType type, int size);
    [NullableContextAttribute("2")]
public virtual SqliteParameter Add(string parameterName, SqliteType type, int size, string sourceColumn);
    public virtual void AddRange(Array values);
    public virtual void AddRange(IEnumerable`1<SqliteParameter> values);
    [NullableContextAttribute("2")]
public virtual SqliteParameter AddWithValue(string parameterName, object value);
    public virtual void Clear();
    public virtual bool Contains(object value);
    public virtual bool Contains(SqliteParameter value);
    public virtual bool Contains(string value);
    public virtual void CopyTo(Array array, int index);
    public virtual void CopyTo(SqliteParameter[] array, int index);
    public virtual IEnumerator GetEnumerator();
    protected virtual DbParameter GetParameter(int index);
    protected virtual DbParameter GetParameter(string parameterName);
    public virtual int IndexOf(object value);
    public virtual int IndexOf(SqliteParameter value);
    public virtual int IndexOf(string parameterName);
    public virtual void Insert(int index, object value);
    public virtual void Insert(int index, SqliteParameter value);
    public virtual void Remove(object value);
    public virtual void Remove(SqliteParameter value);
    public virtual void RemoveAt(int index);
    public virtual void RemoveAt(string parameterName);
    protected virtual void SetParameter(int index, DbParameter value);
    protected virtual void SetParameter(string parameterName, DbParameter value);
    internal int Bind(sqlite3_stmt stmt);
    private int IndexOfChecked(string parameterName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Data.Sqlite.SqliteParameterReader : SqliteValueReader {
    private string _function;
    private sqlite3_value[] _values;
    public int FieldCount { get; }
    public SqliteParameterReader(string function, sqlite3_value[] values);
    public virtual int get_FieldCount();
    protected virtual string GetOnNullErrorMsg(int ordinal);
    protected virtual double GetDoubleCore(int ordinal);
    protected virtual long GetInt64Core(int ordinal);
    protected virtual string GetStringCore(int ordinal);
    protected virtual Byte[] GetBlobCore(int ordinal);
    protected virtual int GetSqliteType(int ordinal);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Data.Sqlite.SqliteResultBinder : SqliteValueBinder {
    private sqlite3_context _ctx;
    public SqliteResultBinder(sqlite3_context ctx, object value);
    protected virtual void BindBlob(Byte[] value);
    protected virtual void BindDoubleCore(double value);
    protected virtual void BindInt64(long value);
    protected virtual void BindNull();
    protected virtual void BindText(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Data.Sqlite.SqliteTransaction : DbTransaction {
    private SqliteConnection _connection;
    private bool _completed;
    [CompilerGeneratedAttribute]
private bool <ExternalRollback>k__BackingField;
    [CompilerGeneratedAttribute]
private IsolationLevel <IsolationLevel>k__BackingField;
    [NullableAttribute("2")]
public SqliteConnection Connection { get; }
    [NullableAttribute("2")]
protected DbConnection DbConnection { get; }
    internal bool ExternalRollback { get; private set; }
    public IsolationLevel IsolationLevel { get; }
    internal SqliteTransaction(SqliteConnection connection, IsolationLevel isolationLevel, bool deferred);
    [NullableContextAttribute("2")]
public virtual SqliteConnection get_Connection();
    [NullableContextAttribute("2")]
protected virtual DbConnection get_DbConnection();
    [CompilerGeneratedAttribute]
internal bool get_ExternalRollback();
    [CompilerGeneratedAttribute]
private void set_ExternalRollback(bool value);
    [CompilerGeneratedAttribute]
public virtual IsolationLevel get_IsolationLevel();
    public virtual void Commit();
    public virtual void Rollback();
    public virtual void Save(string savepointName);
    public virtual void Rollback(string savepointName);
    public virtual void Release(string savepointName);
    protected virtual void Dispose(bool disposing);
    private void Complete();
    private void RollbackInternal();
    private void RollbackExternal(object userData);
}
public enum Microsoft.Data.Sqlite.SqliteType : Enum {
    public int value__;
    public static SqliteType Integer;
    public static SqliteType Real;
    public static SqliteType Text;
    public static SqliteType Blob;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal abstract class Microsoft.Data.Sqlite.SqliteValueBinder : object {
    private object _value;
    private Nullable`1<SqliteType> _sqliteType;
    private static Dictionary`2<Type, SqliteType> _sqliteTypeMapping;
    protected SqliteValueBinder(object value);
    protected SqliteValueBinder(object value, Nullable`1<SqliteType> sqliteType);
    private static SqliteValueBinder();
    protected abstract virtual void BindInt64(long value);
    protected virtual void BindDouble(double value);
    protected abstract virtual void BindDoubleCore(double value);
    [NullableContextAttribute("1")]
protected abstract virtual void BindText(string value);
    [NullableContextAttribute("1")]
protected abstract virtual void BindBlob(Byte[] value);
    protected abstract virtual void BindNull();
    public virtual void Bind();
    internal static SqliteType GetSqliteType(object value);
    private static double ToJulianDate(DateTime dateTime);
    private static double ToJulianDate(int year, int month, int day, int hour, int minute, int second, int millisecond);
    private static double GetTotalDays(int hour, int minute, int second, int millisecond);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Microsoft.Data.Sqlite.SqliteValueReader : object {
    public int FieldCount { get; }
    public abstract virtual int get_FieldCount();
    protected abstract virtual int GetSqliteType(int ordinal);
    public virtual bool IsDBNull(int ordinal);
    public virtual bool GetBoolean(int ordinal);
    public virtual byte GetByte(int ordinal);
    public virtual char GetChar(int ordinal);
    public virtual DateTime GetDateTime(int ordinal);
    public virtual DateTimeOffset GetDateTimeOffset(int ordinal);
    public virtual decimal GetDecimal(int ordinal);
    public virtual double GetDouble(int ordinal);
    protected abstract virtual double GetDoubleCore(int ordinal);
    public virtual float GetFloat(int ordinal);
    public virtual Guid GetGuid(int ordinal);
    public virtual TimeSpan GetTimeSpan(int ordinal);
    public virtual short GetInt16(int ordinal);
    public virtual int GetInt32(int ordinal);
    public virtual long GetInt64(int ordinal);
    protected abstract virtual long GetInt64Core(int ordinal);
    public virtual string GetString(int ordinal);
    protected abstract virtual string GetStringCore(int ordinal);
    [NullableContextAttribute("2")]
public virtual T GetFieldValue(int ordinal);
    [NullableContextAttribute("2")]
public virtual object GetValue(int ordinal);
    public virtual int GetValues(Object[] values);
    [NullableContextAttribute("2")]
protected virtual Byte[] GetBlob(int ordinal);
    protected abstract virtual Byte[] GetBlobCore(int ordinal);
    [NullableContextAttribute("2")]
protected virtual T GetNull(int ordinal);
    protected virtual string GetOnNullErrorMsg(int ordinal);
    private static DateTime FromJulianDate(double julianDate);
}
[IsReadOnlyAttribute]
internal class Microsoft.Data.Sqlite.Utilities.SharedStopwatch : ValueType {
    private static Stopwatch Stopwatch;
    private TimeSpan _started;
    public TimeSpan Elapsed { get; }
    private SharedStopwatch(TimeSpan started);
    private static SharedStopwatch();
    public TimeSpan get_Elapsed();
    public static SharedStopwatch StartNew();
    private static SharedStopwatch StartNewCore();
}
internal static class SQLitePCL.SQLitePCLExtensions : object {
    private static Dictionary`2<string, bool> _knownLibraries;
    private static SQLitePCLExtensions();
    public static Nullable`1<bool> EncryptionSupported();
    [NullableContextAttribute("1")]
public static Nullable`1<bool> EncryptionSupported(String& libraryName);
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class System.TypeExtensions : object {
    [ExtensionAttribute]
public static Type UnwrapEnumType(Type type);
    [ExtensionAttribute]
public static Type UnwrapNullableType(Type type);
}
