[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.KernelMemory.DependencyInjection : object {
    [ExtensionAttribute]
public static IServiceCollection AddMongoDbAtlasAsMemoryDb(IServiceCollection services, MongoDbAtlasConfig config);
    [ExtensionAttribute]
public static IServiceCollection AddMongoDbAtlasAsDocumentStorage(IServiceCollection services, MongoDbAtlasConfig config);
    [ExtensionAttribute]
public static IServiceCollection AddMongoDbAtlasAsMemoryDbAndDocumentStorage(IServiceCollection services, MongoDbAtlasConfig config);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.KernelMemory.KernelMemoryBuilderExtensions : object {
    [ExtensionAttribute]
public static IKernelMemoryBuilder WithMongoDbAtlasMemoryDb(IKernelMemoryBuilder builder, MongoDbAtlasConfig config);
    [ExtensionAttribute]
public static IKernelMemoryBuilder WithMongoDbAtlasStorage(IKernelMemoryBuilder builder, MongoDbAtlasConfig config);
    [ExtensionAttribute]
public static IKernelMemoryBuilder WithMongoDbAtlasMemoryDbAndDocumentStorage(IKernelMemoryBuilder builder, MongoDbAtlasConfig config);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExperimentalAttribute("KMEXP03")]
public abstract class Microsoft.KernelMemory.MongoDbAtlas.MongoDbAtlasBaseStorage : object {
    [CompilerGeneratedAttribute]
private IMongoDatabase <Database>k__BackingField;
    [CompilerGeneratedAttribute]
private MongoDbAtlasConfig <Config>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Collections>k__BackingField;
    protected IMongoDatabase Database { get; private set; }
    protected MongoDbAtlasConfig Config { get; private set; }
    private Dictionary`2<string, object> Collections { get; private set; }
    protected MongoDbAtlasBaseStorage(MongoDbAtlasConfig config);
    [CompilerGeneratedAttribute]
protected IMongoDatabase get_Database();
    [CompilerGeneratedAttribute]
private void set_Database(IMongoDatabase value);
    [CompilerGeneratedAttribute]
protected MongoDbAtlasConfig get_Config();
    [CompilerGeneratedAttribute]
private void set_Config(MongoDbAtlasConfig value);
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> get_Collections();
    [CompilerGeneratedAttribute]
private void set_Collections(Dictionary`2<string, object> value);
    protected IMongoCollection`1<BsonDocument> GetCollection(string collectionName);
    protected GridFSBucket`1<string> GetBucketForIndex(string indexName);
    protected IMongoCollection`1<T> GetCollection(string collectionName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.KernelMemory.MongoDbAtlas.MongoDbAtlasConfig : object {
    [CompilerGeneratedAttribute]
private string <ConnectionString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DatabaseName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseSingleCollectionForVectorSearch>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<Task> <AfterIndexCallbackAsync>k__BackingField;
    public string ConnectionString { get; public set; }
    public string DatabaseName { get; public set; }
    public bool UseSingleCollectionForVectorSearch { get; public set; }
    public Func`1<Task> AfterIndexCallbackAsync { get; private set; }
    [CompilerGeneratedAttribute]
public string get_ConnectionString();
    [CompilerGeneratedAttribute]
public void set_ConnectionString(string value);
    [CompilerGeneratedAttribute]
public string get_DatabaseName();
    [CompilerGeneratedAttribute]
public void set_DatabaseName(string value);
    [CompilerGeneratedAttribute]
public bool get_UseSingleCollectionForVectorSearch();
    [CompilerGeneratedAttribute]
public void set_UseSingleCollectionForVectorSearch(bool value);
    [CompilerGeneratedAttribute]
public Func`1<Task> get_AfterIndexCallbackAsync();
    [CompilerGeneratedAttribute]
private void set_AfterIndexCallbackAsync(Func`1<Task> value);
    public MongoDbAtlasConfig WithConnectionString(string mongoConnection);
    public MongoDbAtlasConfig WithDatabaseName(string databaseName);
    public MongoDbAtlasConfig WithSingleCollectionForVectorSearch(bool useSingleCollectionForVectorSearch);
    public MongoDbAtlasConfig WithAfterIndexCallback(Func`1<Task> afterIndexCallback);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.KernelMemory.MongoDbAtlas.MongoDbAtlasDatabaseHelper : object {
    private static ConcurrentDictionary`2<string, IMongoClient> s_mongoClientCache;
    private static MongoDbAtlasDatabaseHelper();
    internal static IMongoDatabase GetDatabase(string connectionString, string databaseName);
    internal static IMongoClient GetClient(string connectionString);
    private static string GetConnectionKey(string connectionString);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.KernelMemory.MongoDbAtlas.MongoDbAtlasException : KernelMemoryException {
    public MongoDbAtlasException(string message);
    public MongoDbAtlasException(string message, Exception innerException);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExperimentalAttribute("KMEXP03")]
public class Microsoft.KernelMemory.MongoDbAtlas.MongoDbAtlasMemory : MongoDbAtlasBaseStorage {
    private static string ConnectionNamePrefix;
    private ITextEmbeddingGenerator _embeddingGenerator;
    private ILogger`1<MongoDbAtlasMemory> _log;
    private MongoDbAtlasSearchHelper _utils;
    public MongoDbAtlasMemory(MongoDbAtlasConfig config, ITextEmbeddingGenerator embeddingGenerator, ILoggerFactory loggerFactory);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.MongoDbAtlas.MongoDbAtlasMemory/<CreateIndexAsync>d__5")]
public sealed virtual Task CreateIndexAsync(string index, int vectorSize, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.MongoDbAtlas.MongoDbAtlasMemory/<DeleteIndexAsync>d__6")]
public sealed virtual Task DeleteIndexAsync(string index, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.MongoDbAtlas.MongoDbAtlasMemory/<GetIndexesAsync>d__7")]
public sealed virtual Task`1<IEnumerable`1<string>> GetIndexesAsync(CancellationToken cancellationToken);
    public sealed virtual Task DeleteAsync(string index, MemoryRecord record, CancellationToken cancellationToken);
    [AsyncIteratorStateMachineAttribute("Microsoft.KernelMemory.MongoDbAtlas.MongoDbAtlasMemory/<GetListAsync>d__9")]
public sealed virtual IAsyncEnumerable`1<MemoryRecord> GetListAsync(string index, ICollection`1<MemoryFilter> filters, int limit, bool withEmbeddings, CancellationToken cancellationToken);
    [AsyncIteratorStateMachineAttribute("Microsoft.KernelMemory.MongoDbAtlas.MongoDbAtlasMemory/<GetSimilarListAsync>d__10")]
public sealed virtual IAsyncEnumerable`1<ValueTuple`2<MemoryRecord, double>> GetSimilarListAsync(string index, string text, ICollection`1<MemoryFilter> filters, double minRelevance, int limit, bool withEmbeddings, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.MongoDbAtlas.MongoDbAtlasMemory/<UpsertAsync>d__11")]
public sealed virtual Task`1<string> UpsertAsync(string index, MemoryRecord record, CancellationToken cancellationToken);
    private FilterDefinition`1<MongoDbAtlasMemoryRecord> TranslateFilters(ICollection`1<MemoryFilter> filters, string index);
    private IMongoCollection`1<MongoDbAtlasMemoryRecord> GetCollectionFromIndexName(string indexName);
    private string GetCollectionName(string indexName);
    private static double CosineSim(Embedding vec1, Single[] vec2);
    private static string GetIndexListCollectionName();
    private static MemoryRecord FromMongodbMemoryRecord(MongoDbAtlasMemoryRecord doc, bool withEmbeddings);
    private static string NormalizeIndexName(string indexName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.KernelMemory.MongoDbAtlas.MongoDbAtlasMemoryRecord : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private Single[] <Embedding>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Tag> <Tags>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Payload> <Payloads>k__BackingField;
    public string Id { get; public set; }
    public string Index { get; public set; }
    public Single[] Embedding { get; public set; }
    public List`1<Tag> Tags { get; public set; }
    public List`1<Payload> Payloads { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(string value);
    [CompilerGeneratedAttribute]
public Single[] get_Embedding();
    [CompilerGeneratedAttribute]
public void set_Embedding(Single[] value);
    [CompilerGeneratedAttribute]
public List`1<Tag> get_Tags();
    [CompilerGeneratedAttribute]
public void set_Tags(List`1<Tag> value);
    [CompilerGeneratedAttribute]
public List`1<Payload> get_Payloads();
    [CompilerGeneratedAttribute]
public void set_Payloads(List`1<Payload> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.KernelMemory.MongoDbAtlas.MongoDbAtlasSearchHelper : object {
    private IMongoDatabase _db;
    private static IndexInfo s_falseIndexInfo;
    public MongoDbAtlasSearchHelper(string connection, string dbName);
    private static MongoDbAtlasSearchHelper();
    public string GetIndexName(string collectionName);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.MongoDbAtlas.MongoDbAtlasSearchHelper/<CreateIndexAsync>d__3")]
public Task`1<IndexInfo> CreateIndexAsync(string collectionName, int embeddingDimension);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.MongoDbAtlas.MongoDbAtlasSearchHelper/<DeleteIndicesAsync>d__4")]
public Task DeleteIndicesAsync(string collectionName);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.MongoDbAtlas.MongoDbAtlasSearchHelper/<WaitForIndexToBeReadyAsync>d__5")]
public Task WaitForIndexToBeReadyAsync(string collectionName, int secondsToWait);
    public BsonDocument CreateCreationCommand(string collectionName, int embeddingDimension);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.MongoDbAtlas.MongoDbAtlasSearchHelper/<DropDatabaseAsync>d__7")]
public Task DropDatabaseAsync();
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.MongoDbAtlas.MongoDbAtlasSearchHelper/<DropAllDocumentsFromCollectionsAsync>d__8")]
public Task DropAllDocumentsFromCollectionsAsync();
    private BsonArray GetAnalyzersList();
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.MongoDbAtlas.MongoDbAtlasSearchHelper/<CollectionExistsAsync>d__11")]
private Task`1<bool> CollectionExistsAsync(string connectionName);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.MongoDbAtlas.MongoDbAtlasSearchHelper/<GetIndexInfoAsync>d__12")]
private Task`1<IndexInfo> GetIndexInfoAsync(string collectionName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExperimentalAttribute("KMEXP03")]
public class Microsoft.KernelMemory.MongoDbAtlas.MongoDbAtlasStorage : MongoDbAtlasBaseStorage {
    private IMimeTypeDetection _mimeTypeDetection;
    public MongoDbAtlasStorage(MongoDbAtlasConfig config, IMimeTypeDetection mimeTypeDetection);
    public sealed virtual Task CreateIndexDirectoryAsync(string index, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.MongoDbAtlas.MongoDbAtlasStorage/<DeleteIndexDirectoryAsync>d__3")]
public sealed virtual Task DeleteIndexDirectoryAsync(string index, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.MongoDbAtlas.MongoDbAtlasStorage/<EmptyDocumentDirectoryAsync>d__4")]
public sealed virtual Task EmptyDocumentDirectoryAsync(string index, string documentId, CancellationToken cancellationToken);
    public sealed virtual Task DeleteDocumentDirectoryAsync(string index, string documentId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.MongoDbAtlas.MongoDbAtlasStorage/<WriteFileAsync>d__6")]
public sealed virtual Task WriteFileAsync(string index, string documentId, string fileName, Stream streamContent, CancellationToken cancellationToken);
    public sealed virtual Task CreateDocumentDirectoryAsync(string index, string documentId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.MongoDbAtlas.MongoDbAtlasStorage/<ReadFileAsync>d__8")]
public sealed virtual Task`1<StreamableFileContent> ReadFileAsync(string index, string documentId, string fileName, bool logErrIfNotFound, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.MongoDbAtlas.MongoDbAtlasStorage/<SaveDocumentAsync>d__9")]
private Task SaveDocumentAsync(string index, string id, BsonDocument doc, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.MongoDbAtlas.MongoDbAtlasStorage/<GetFromBucketByIdAsync>d__10")]
private static Task`1<IAsyncCursor`1<GridFSFileInfo`1<string>>> GetFromBucketByIdAsync(string id, GridFSBucket`1<string> bucket, CancellationToken cancellationToken);
    private static FilterDefinition`1<GridFSFileInfo`1<string>> GetBucketFilterById(string id);
}
