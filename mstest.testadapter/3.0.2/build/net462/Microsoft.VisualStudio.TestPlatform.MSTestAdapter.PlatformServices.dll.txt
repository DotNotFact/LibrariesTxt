[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.AdapterTraceLogger : object {
    public sealed virtual void LogError(string format, Object[] args);
    public sealed virtual void LogWarning(string format, Object[] args);
    public sealed virtual void LogInfo(string format, Object[] args);
    private static string PrependAdapterName(string format);
}
internal class Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.AppDomainWrapper : object {
    [NullableContextAttribute("1")]
public sealed virtual AppDomain CreateDomain(string friendlyName, Evidence securityInfo, AppDomainSetup info);
    [NullableContextAttribute("1")]
public sealed virtual void Unload(AppDomain appDomain);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.AssemblyResolver : MarshalByRefObject {
    private static string LoggerAssemblyNameLegacy;
    private static string LoggerAssemblyName;
    private Queue`1<RecursiveDirectoryPath> _directoryList;
    private List`1<string> _searchDirectories;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, Assembly> _resolvedAssemblies;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, Assembly> _reflectionOnlyResolvedAssemblies;
    private object _syncLock;
    private bool _disposed;
    public AssemblyResolver(IList`1<string> directories);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    [NullableContextAttribute("2")]
[SecurityCriticalAttribute]
public virtual object InitializeLifetimeService();
    public void AddSearchDirectoriesFromRunSetting(List`1<RecursiveDirectoryPath> recursiveDirectoryPath);
    internal Assembly ReflectionOnlyOnResolve(object sender, ResolveEventArgs args);
    internal Assembly OnResolve(object sender, ResolveEventArgs args);
    internal void AddSubdirectories(string path, List`1<string> searchDirectories);
    protected virtual void Dispose(bool disposing);
    protected virtual bool DoesDirectoryExist(string path);
    protected virtual String[] GetDirectories(string path);
    protected virtual bool DoesFileExist(string filePath);
    protected virtual Assembly LoadAssemblyFrom(string path);
    protected virtual Assembly ReflectionOnlyLoadAssemblyFrom(string path);
    protected virtual Assembly SearchAssembly(List`1<string> searchDirectorypaths, string name, bool isReflectionOnly);
    private static bool RequestedAssemblyNameMatchesFound(AssemblyName requestedName, AssemblyName foundName);
    private void WindowsRuntimeMetadataReflectionOnlyNamespaceResolve(object sender, NamespaceResolveEventArgs args);
    private Assembly OnResolveInternal(object senderAppDomain, ResolveEventArgs args, bool isReflectionOnly);
    private bool TryLoadFromCache(string assemblyName, bool isReflectionOnly, Assembly& assembly);
    private static void SafeLog(string assemblyName, Action loggerAction);
    private Assembly SearchAndLoadAssembly(string assemblyPath, string assemblyName, AssemblyName requestedName, bool isReflectionOnly);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.Constants : object {
    public static string TargetFrameworkAttributeFullName;
    public static string DotNetFrameWorkStringPrefix;
    public static string TargetFrameworkName;
    public static string PublicAssemblies;
    public static string PrivateAssemblies;
    public static TestProperty DeploymentItemsProperty;
    internal static string DllExtension;
    internal static string ExeExtension;
    internal static string AppxPackageExtension;
    internal static string PhoneAppxPackageExtension;
    internal static string VisualStudioRootRegKey32ForDev14;
    internal static string VisualStudioRootRegKey64ForDev14;
    internal static string VisualStudioVersion;
    private static string DeploymentItemsLabel;
    private static Constants();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.Data.CsvDataConnection : TestDataConnection {
    private static string CsvConnectionTemplate;
    private static string CsvConnectionTemplate64;
    private string _fileName;
    private string TableName { get; }
    public CsvDataConnection(string fileName, List`1<string> dataFolders);
    private string get_TableName();
    public virtual List`1<string> GetDataTablesAndViews();
    public virtual List`1<string> GetColumns(string tableName);
    public DataTable ReadTable(string tableName, IEnumerable columns, int maxRows);
    public virtual DataTable ReadTable(string tableName, IEnumerable columns);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.Data.OdbcDataConnection : TestDataConnectionSql {
    private bool _isMSSql;
    public OdbcCommandBuilder CommandBuilder { get; }
    public OdbcConnection Connection { get; }
    public OdbcDataConnection(string invariantProviderName, string connectionString, List`1<string> dataFolders);
    public OdbcCommandBuilder get_CommandBuilder();
    public OdbcConnection get_Connection();
    public virtual void GetQuoteLiterals();
    [NullableContextAttribute("2")]
public virtual string GetDefaultSchema();
    protected virtual SchemaMetaData[] GetSchemaMetaData();
    protected virtual string QuoteIdentifier(string identifier);
    protected virtual string UnquoteIdentifier(string identifier);
    private static string FixConnectionString(string connectionString, List`1<string> dataFolders);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.Data.OleDataConnection : TestDataConnectionSql {
    private bool _isMSSql;
    public OleDbCommandBuilder CommandBuilder { get; }
    public OleDbConnection Connection { get; }
    public OleDataConnection(string invariantProviderName, string connectionString, List`1<string> dataFolders);
    public OleDbCommandBuilder get_CommandBuilder();
    public OleDbConnection get_Connection();
    public virtual void GetQuoteLiterals();
    [NullableContextAttribute("2")]
public virtual string GetDefaultSchema();
    protected virtual SchemaMetaData[] GetSchemaMetaData();
    protected virtual string QuoteIdentifier(string identifier);
    protected virtual string UnquoteIdentifier(string identifier);
    private static string FixConnectionString(string connectionString, List`1<string> dataFolders);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.Data.SqlDataConnection : TestDataConnectionSql {
    public SqlDataConnection(string invariantProviderName, string connectionString, List`1<string> dataFolders);
    [NullableContextAttribute("2")]
public virtual string GetDefaultSchema();
    protected virtual SchemaMetaData[] GetSchemaMetaData();
    private static string FixConnectionString(string connectionString, List`1<string> dataFolders);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.Data.TestDataConnection : object {
    internal static string ConnectionDirectoryKey;
    private static Nullable`1<bool> s_extendedDiagnosticsEnabled;
    private List`1<string> _dataFolders;
    [NullableAttribute("2")]
public DbConnection Connection { get; }
    private static bool ExtendedDiagnosticsEnabled { get; }
    protected internal TestDataConnection(List`1<string> dataFolders);
    [NullableContextAttribute("2")]
public virtual DbConnection get_Connection();
    private static bool get_ExtendedDiagnosticsEnabled();
    public abstract virtual List`1<string> GetDataTablesAndViews();
    public abstract virtual List`1<string> GetColumns(string tableName);
    [NullableContextAttribute("2")]
public abstract virtual DataTable ReadTable(string tableName, IEnumerable columns);
    public virtual void Dispose();
    internal static bool PathNeedsFixup(string path);
    internal static string GetRelativePart(string path);
    internal static string FixPath(string path, List`1<string> foldersToCheck);
    [ConditionalAttribute("DEBUG")]
protected internal static void WriteDiagnostics(string formatString, Object[] parameters);
    protected string FixPath(string path);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.Data.TestDataConnectionFactory : object {
    private static string CsvProvider;
    private static string XmlProvider;
    private static Dictionary`2<string, TestDataConnectionFactory> SpecializedProviders;
    private static TestDataConnectionFactory();
    public virtual TestDataConnection Create(string invariantProviderName, string connectionString, List`1<string> dataFolders);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.Data.TestDataConnectionSql : TestDataConnection {
    private DbCommandBuilder _commandBuilder;
    private DbConnection _connection;
    private DbProviderFactory _factory;
    [NullableAttribute("2")]
private string _quoteSuffix;
    [NullableAttribute("2")]
private string _quotePrefix;
    public DbConnection Connection { get; }
    protected DbCommandBuilder CommandBuilder { get; }
    protected DbProviderFactory Factory { get; }
    [MemberNotNullAttribute("_quotePrefix")]
public string QuotePrefix { get; public set; }
    [MemberNotNullAttribute("_quoteSuffix")]
public string QuoteSuffix { get; public set; }
    private char CatalogSeparatorChar { get; }
    private char SchemaSeparatorChar { get; }
    protected internal TestDataConnectionSql(string invariantProviderName, string connectionString, List`1<string> dataFolders);
    public virtual DbConnection get_Connection();
    protected DbCommandBuilder get_CommandBuilder();
    protected DbProviderFactory get_Factory();
    public static TestDataConnectionSql Create(string invariantProviderName, string connectionString, List`1<string> dataFolders);
    protected virtual SchemaMetaData[] GetSchemaMetaData();
    [MemberNotNullAttribute("_quotePrefix")]
public virtual string get_QuotePrefix();
    [MemberNotNullAttribute("_quotePrefix")]
public virtual void set_QuotePrefix(string value);
    [MemberNotNullAttribute("_quoteSuffix")]
public virtual string get_QuoteSuffix();
    [MemberNotNullAttribute("_quoteSuffix")]
public virtual void set_QuoteSuffix(string value);
    private char get_CatalogSeparatorChar();
    private char get_SchemaSeparatorChar();
    public string PrepareNameForSql(string tableName);
    public String[] SplitName(string name);
    public string JoinAndQuoteName(String[] parts, bool fullyQuote);
    [MemberNotNullAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public virtual void GetQuoteLiterals();
    protected virtual string QuoteIdentifier(string identifier);
    protected virtual string UnquoteIdentifier(string identifier);
    [MemberNotNullAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected void GetQuoteLiteralsHelper();
    private string MaybeQuote(string identifier, bool force);
    private int FindSeparators(string text, int from);
    private int FindIdentifierEnd(string text, int start);
    [NullableContextAttribute("2")]
public virtual string GetDefaultSchema();
    public virtual List`1<string> GetDataTablesAndViews();
    public virtual List`1<string> GetColumns(string tableName);
    protected void SplitTableName(string name, String& schemaName, String& tableName);
    [NullableContextAttribute("2")]
protected string FormatTableNameForDisplay(string tableSchema, string tableName);
    [NullableContextAttribute("2")]
private static bool IsInArray(string candidate, String[] values);
    public bool IsOpen();
    protected static bool IsMSSql(string providerName);
    protected virtual bool IsUserSchema(string tableSchema);
    [NullableContextAttribute("2")]
protected string GetDefaultSchemaMSSql();
    public virtual DataTable ReadTable(string tableName, IEnumerable columns);
    private string GetColumnsSQL(IEnumerable columns);
    public virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.Data.XmlDataConnection : TestDataConnection {
    private string _fileName;
    public XmlDataConnection(string fileName, List`1<string> dataFolders);
    public virtual List`1<string> GetDataTablesAndViews();
    public virtual List`1<string> GetColumns(string tableName);
    [NullableContextAttribute("2")]
public virtual DataTable ReadTable(string tableName, IEnumerable columns);
    [NullableContextAttribute("2")]
private DataSet LoadDataSet(bool schemaOnly);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.Deployment.AssemblyLoadWorker : MarshalByRefObject {
    private IAssemblyUtility _assemblyUtility;
    internal AssemblyLoadWorker(IAssemblyUtility assemblyUtility);
    public String[] GetFullPathToDependentAssemblies(string assemblyPath, IList`1& warnings);
    [NullableContextAttribute("2")]
public virtual object InitializeLifetimeService();
    internal string GetTargetFrameworkVersionStringFromPath(string path, String& errorMessage);
    private static string GetTargetFrameworkStringFromAssembly(Assembly assembly);
    private void ProcessChildren(Assembly assembly, IList`1<string> result, ISet`1<string> visitedAssemblies, IList`1<string> warnings);
    private void GetDependentAssembliesInternal(string assemblyString, IList`1<string> result, ISet`1<string> visitedAssemblies, IList`1<string> warnings);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.Deployment.DeploymentItem : object {
    [CompilerGeneratedAttribute]
private string <SourcePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RelativeOutputDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private DeploymentItemOriginType <OriginType>k__BackingField;
    internal string SourcePath { get; private set; }
    internal string RelativeOutputDirectory { get; private set; }
    internal DeploymentItemOriginType OriginType { get; private set; }
    internal DeploymentItem(string sourcePath);
    internal DeploymentItem(string sourcePath, string relativeOutputDirectory);
    internal DeploymentItem(string sourcePath, string relativeOutputDirectory, DeploymentItemOriginType originType);
    [CompilerGeneratedAttribute]
internal string get_SourcePath();
    [CompilerGeneratedAttribute]
private void set_SourcePath(string value);
    [CompilerGeneratedAttribute]
internal string get_RelativeOutputDirectory();
    [CompilerGeneratedAttribute]
private void set_RelativeOutputDirectory(string value);
    [CompilerGeneratedAttribute]
internal DeploymentItemOriginType get_OriginType();
    [CompilerGeneratedAttribute]
private void set_OriginType(DeploymentItemOriginType value);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal enum Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.Deployment.DeploymentItemOriginType : Enum {
    public int value__;
    public static DeploymentItemOriginType PerTestDeployment;
    public static DeploymentItemOriginType TestStorage;
    public static DeploymentItemOriginType Dependency;
    public static DeploymentItemOriginType Satellite;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.Deployment.TestRunDirectories : object {
    internal static string DefaultDeploymentRootDirectory;
    internal static string DeploymentInDirectorySuffix;
    internal static string DeploymentOutDirectorySuffix;
    [CompilerGeneratedAttribute]
private string <RootDeploymentDirectory>k__BackingField;
    public string RootDeploymentDirectory { get; public set; }
    public string InDirectory { get; }
    public string OutDirectory { get; }
    public string InMachineNameDirectory { get; }
    public TestRunDirectories(string rootDirectory);
    [CompilerGeneratedAttribute]
public string get_RootDeploymentDirectory();
    [CompilerGeneratedAttribute]
public void set_RootDeploymentDirectory(string value);
    public string get_InDirectory();
    public string get_OutDirectory();
    public string get_InMachineNameDirectory();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal static class Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.DiaSessionOperations : object {
    private static MethodInfo s_methodGetNavigationData;
    private static PropertyInfo s_propertyFileName;
    private static PropertyInfo s_propertyMinLineNumber;
    private static Type s_typeDiaSession;
    private static Type s_typeDiaNavigationData;
    private static DiaSessionOperations();
    [NullableContextAttribute("1")]
internal static object CreateNavigationSession(string source);
    [NullableContextAttribute("1")]
internal static void GetNavigationData(object navigationSession, string className, string methodName, Int32& minLineNumber, String& fileName);
    internal static void DisposeNavigationSession(object navigationSession);
    [NullableContextAttribute("1")]
internal static void Initialize(string diaSession, string diaNavigationData);
    private static object SafeInvoke(Func`1<T> action);
}
[ExtensionAttribute]
internal static class Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.Extensions.ExceptionExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static string GetExceptionMessage(Exception exception);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.FileOperations : object {
    public sealed virtual Assembly LoadAssembly(string assemblyName, bool isReflectionOnly);
    public sealed virtual string GetAssemblyPath(Assembly assembly);
    public sealed virtual bool DoesFileExist(string assemblyFileName);
    public sealed virtual object CreateNavigationSession(string source);
    public sealed virtual void GetNavigationData(object navigationSession, string className, string methodName, Int32& minLineNumber, String& fileName);
    [NullableContextAttribute("2")]
public sealed virtual void DisposeNavigationSession(object navigationSession);
    public sealed virtual string GetFullFilePath(string assemblyFileName);
    [NullableContextAttribute("2")]
private static object SafeInvoke(Func`1<T> action, string messageFormatOnException);
}
[NullableContextAttribute("1")]
internal interface Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.IAppDomain {
    public abstract virtual void Unload(AppDomain appDomain);
    public abstract virtual AppDomain CreateDomain(string friendlyName, Evidence securityInfo, AppDomainSetup info);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.Interface.IAdapterTraceLogger {
    public abstract virtual void LogError(string format, Object[] args);
    public abstract virtual void LogWarning(string format, Object[] args);
    public abstract virtual void LogInfo(string format, Object[] args);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.Interface.IFileOperations {
    public abstract virtual Assembly LoadAssembly(string assemblyName, bool isReflectionOnly);
    public abstract virtual string GetAssemblyPath(Assembly assembly);
    public abstract virtual bool DoesFileExist(string assemblyFileName);
    public abstract virtual object CreateNavigationSession(string source);
    public abstract virtual void GetNavigationData(object navigationSession, string className, string methodName, Int32& minLineNumber, String& fileName);
    [NullableContextAttribute("2")]
public abstract virtual void DisposeNavigationSession(object navigationSession);
    public abstract virtual string GetFullFilePath(string assemblyFileName);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.Interface.IReflectionOperations {
    public abstract virtual Object[] GetCustomAttributes(MemberInfo memberInfo, bool inherit);
    public abstract virtual Object[] GetCustomAttributes(MemberInfo memberInfo, Type type, bool inherit);
    public abstract virtual Object[] GetCustomAttributes(Assembly assembly, Type type);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.Interface.ISettingsProvider {
    public abstract virtual void Load(XmlReader reader);
    public abstract virtual IDictionary`2<string, object> GetProperties(string source);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.Interface.ITestContext {
    public TestContext Context { get; }
    public abstract virtual TestContext get_Context();
    public abstract virtual bool TryGetPropertyValue(string propertyName, Object& propertyValue);
    public abstract virtual void AddProperty(string propertyName, string propertyValue);
    public abstract virtual void SetOutcome(UnitTestOutcome outcome);
    [NullableContextAttribute("2")]
public abstract virtual void SetDataRow(object dataRow);
    [NullableContextAttribute("2")]
public abstract virtual void SetDataConnection(object dbConnection);
    public abstract virtual IList`1<string> GetResultFiles();
    [NullableContextAttribute("2")]
public abstract virtual string GetDiagnosticMessages();
    public abstract virtual void ClearDiagnosticMessages();
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.Interface.ITestDataSource {
    public abstract virtual IEnumerable`1<object> GetData(ITestMethod testMethodInfo, ITestContext testContext);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.Interface.ITestDeployment {
    public abstract virtual bool Deploy(IEnumerable`1<TestCase> testCases, IRunContext runContext, IFrameworkHandle frameworkHandle);
    public abstract virtual KeyValuePair`2[] GetDeploymentItems(MethodInfo method, Type type, ICollection`1<string> warnings);
    public abstract virtual void Cleanup();
    [NullableContextAttribute("2")]
public abstract virtual string GetDeploymentDirectory();
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.Interface.ITestSource {
    public IEnumerable`1<string> ValidSourceExtensions { get; }
    public abstract virtual IEnumerable`1<string> get_ValidSourceExtensions();
    public abstract virtual bool IsAssemblyReferenced(AssemblyName assemblyName, string source);
    public abstract virtual IEnumerable`1<string> GetTestSources(IEnumerable`1<string> sources);
}
public interface Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.Interface.ITestSourceHost {
    public abstract virtual void SetupHost();
    [NullableContextAttribute("2")]
public abstract virtual object CreateInstanceForType(Type type, Object[] args);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.Interface.IThreadOperations {
    public abstract virtual bool Execute(Action action, int timeout, CancellationToken cancelToken);
}
[NullableContextAttribute("2")]
public interface Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.Interface.ITraceListener {
    public abstract virtual TextWriter GetWriter();
    public abstract virtual void Dispose();
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.Interface.ITraceListenerManager {
    public abstract virtual void Add(ITraceListener traceListener);
    public abstract virtual void Remove(ITraceListener traceListener);
    public abstract virtual void Dispose(ITraceListener traceListener);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.Interface.ObjectModel.ITestMethod {
    public string Name { get; }
    public string FullClassName { get; }
    [NullableAttribute("2")]
public string DeclaringClassFullName { get; }
    public string AssemblyName { get; }
    public bool IsAsync { get; }
    [NullableAttribute("2")]
public string ManagedTypeName { get; }
    [NullableAttribute("2")]
public string ManagedMethodName { get; }
    public TestIdGenerationStrategy TestIdGenerationStrategy { get; }
    public bool HasManagedMethodAndTypeProperties { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyCollection`1<string> Hierarchy { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_FullClassName();
    [NullableContextAttribute("2")]
public abstract virtual string get_DeclaringClassFullName();
    public abstract virtual string get_AssemblyName();
    public abstract virtual bool get_IsAsync();
    [NullableContextAttribute("2")]
public abstract virtual string get_ManagedTypeName();
    [NullableContextAttribute("2")]
public abstract virtual string get_ManagedMethodName();
    public abstract virtual TestIdGenerationStrategy get_TestIdGenerationStrategy();
    public abstract virtual bool get_HasManagedMethodAndTypeProperties();
    public abstract virtual IReadOnlyCollection`1<string> get_Hierarchy();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.MSTestAdapterSettings : object {
    [CompilerGeneratedAttribute]
private bool <DeploymentEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DeleteDeploymentDirectoryAfterTestRunIsComplete>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DeployTestSourceDependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<RecursiveDirectoryPath> <SearchDirectories>k__BackingField;
    public bool DeploymentEnabled { get; private set; }
    public bool DeleteDeploymentDirectoryAfterTestRunIsComplete { get; private set; }
    public bool DeployTestSourceDependencies { get; private set; }
    protected List`1<RecursiveDirectoryPath> SearchDirectories { get; private set; }
    [CompilerGeneratedAttribute]
public bool get_DeploymentEnabled();
    [CompilerGeneratedAttribute]
private void set_DeploymentEnabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_DeleteDeploymentDirectoryAfterTestRunIsComplete();
    [CompilerGeneratedAttribute]
private void set_DeleteDeploymentDirectoryAfterTestRunIsComplete(bool value);
    [CompilerGeneratedAttribute]
public bool get_DeployTestSourceDependencies();
    [CompilerGeneratedAttribute]
private void set_DeployTestSourceDependencies(bool value);
    [CompilerGeneratedAttribute]
protected List`1<RecursiveDirectoryPath> get_SearchDirectories();
    [CompilerGeneratedAttribute]
private void set_SearchDirectories(List`1<RecursiveDirectoryPath> value);
    public static MSTestAdapterSettings ToSettings(XmlReader reader);
    [NullableContextAttribute("2")]
public static bool IsAppDomainCreationDisabled(string settingsXml);
    public List`1<RecursiveDirectoryPath> GetDirectoryListWithRecursiveProperty(string baseDirectory);
    internal string ResolveEnvironmentVariableAndReturnFullPathIfExist(string path, string baseDirectory);
    protected virtual bool DoesDirectoryExist(string path);
    protected virtual string ExpandEnvironmentVariables(string path);
    private void ReadAssemblyResolutionPath(XmlReader reader);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.MSTestSettingsProvider : object {
    [NullableAttribute("2")]
private static MSTestAdapterSettings s_settings;
    public static MSTestAdapterSettings Settings { get; }
    public static MSTestAdapterSettings get_Settings();
    public static void Reset();
    public sealed virtual void Load(XmlReader reader);
    public sealed virtual IDictionary`2<string, object> GetProperties(string source);
}
internal class Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.RandomIntPermutation : object {
    [NullableAttribute("1")]
private Int32[] _objects;
    public RandomIntPermutation(int numberOfObjects);
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.RandomIntPermutation/<GetEnumerator>d__2")]
public sealed virtual IEnumerator`1<int> GetEnumerator();
    [NullableContextAttribute("1")]
private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.RecursiveDirectoryPath : MarshalByRefObject {
    [CompilerGeneratedAttribute]
private string <DirectoryPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeSubDirectories>k__BackingField;
    public string DirectoryPath { get; private set; }
    public bool IncludeSubDirectories { get; private set; }
    public RecursiveDirectoryPath(string dirPath, bool includeSubDirectories);
    [CompilerGeneratedAttribute]
public string get_DirectoryPath();
    [CompilerGeneratedAttribute]
private void set_DirectoryPath(string value);
    [CompilerGeneratedAttribute]
public bool get_IncludeSubDirectories();
    [CompilerGeneratedAttribute]
private void set_IncludeSubDirectories(bool value);
    [SecurityCriticalAttribute]
public virtual object InitializeLifetimeService();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.ReflectionOperations : object {
    public sealed virtual Object[] GetCustomAttributes(MemberInfo memberInfo, bool inherit);
    public sealed virtual Object[] GetCustomAttributes(MemberInfo memberInfo, Type type, bool inherit);
    public sealed virtual Object[] GetCustomAttributes(Assembly assembly, Type type);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.Resource : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string CannotFindFile { get; }
    internal static string Common_CannotBeNullOrEmpty { get; }
    internal static string DeploymentErrorBadDeploymentItem { get; }
    internal static string DeploymentErrorFailedToAccesOutputDirectory { get; }
    internal static string DeploymentErrorFailedToAccessFile { get; }
    internal static string DeploymentErrorFailedToCopyWithOverwrite { get; }
    internal static string DeploymentErrorFailedToDeployDependencies { get; }
    internal static string DeploymentErrorFailedToGetFileForDeploymentItem { get; }
    internal static string DeploymentErrorGettingSatellite { get; }
    internal static string DeploymentItem { get; }
    internal static string DeploymentItemContainsInvalidCharacters { get; }
    internal static string DeploymentItemOutputDirectoryCannotBeNull { get; }
    internal static string DeploymentItemOutputDirectoryMustBeRelative { get; }
    internal static string DeploymentItemPathCannotBeNullOrEmpty { get; }
    internal static string DeploymentItemWithOutputDirectory { get; }
    internal static string InvalidSettingsXmlElement { get; }
    internal static string MissingDeploymentDependency { get; }
    internal static string MissingDeploymentDependencyWithoutReason { get; }
    internal static string TestRunName { get; }
    internal static string UTA_DataSourceConfigurationSectionMissing { get; }
    internal static string UTA_ErrorDataConnectionFailed { get; }
    internal static string WrongNumberOfObjects { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_CannotFindFile();
    internal static string get_Common_CannotBeNullOrEmpty();
    internal static string get_DeploymentErrorBadDeploymentItem();
    internal static string get_DeploymentErrorFailedToAccesOutputDirectory();
    internal static string get_DeploymentErrorFailedToAccessFile();
    internal static string get_DeploymentErrorFailedToCopyWithOverwrite();
    internal static string get_DeploymentErrorFailedToDeployDependencies();
    internal static string get_DeploymentErrorFailedToGetFileForDeploymentItem();
    internal static string get_DeploymentErrorGettingSatellite();
    internal static string get_DeploymentItem();
    internal static string get_DeploymentItemContainsInvalidCharacters();
    internal static string get_DeploymentItemOutputDirectoryCannotBeNull();
    internal static string get_DeploymentItemOutputDirectoryMustBeRelative();
    internal static string get_DeploymentItemPathCannotBeNullOrEmpty();
    internal static string get_DeploymentItemWithOutputDirectory();
    internal static string get_InvalidSettingsXmlElement();
    internal static string get_MissingDeploymentDependency();
    internal static string get_MissingDeploymentDependencyWithoutReason();
    internal static string get_TestRunName();
    internal static string get_UTA_DataSourceConfigurationSectionMissing();
    internal static string get_UTA_ErrorDataConnectionFailed();
    internal static string get_WrongNumberOfObjects();
}
internal class Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.SequentialIntPermutation : object {
    private int _numberOfObjects;
    public SequentialIntPermutation(int numberOfObjects);
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.SequentialIntPermutation/<GetEnumerator>d__2")]
public sealed virtual IEnumerator`1<int> GetEnumerator();
    [NullableContextAttribute("1")]
private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.TestContextImplementation : TestContext {
    [NullableAttribute("1")]
private IList`1<string> _testResultFiles;
    [NullableAttribute("1")]
private ThreadSafeStringWriter _threadSafeStringWriter;
    [NullableAttribute("1")]
private ITestMethod _testMethod;
    private bool _stringWriterDisposed;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IDictionary`2<string, object> _properties;
    private UnitTestOutcome _outcome;
    private DbConnection _dbConnection;
    private DataRow _dataRow;
    public UnitTestOutcome CurrentTestOutcome { get; }
    public DbConnection DataConnection { get; }
    public DataRow DataRow { get; }
    [NullableAttribute("1")]
public IDictionary Properties { get; }
    public string TestRunDirectory { get; }
    public string DeploymentDirectory { get; }
    public string ResultsDirectory { get; }
    public string TestRunResultsDirectory { get; }
    public string TestResultsDirectory { get; }
    public string TestDir { get; }
    public string TestDeploymentDir { get; }
    public string TestLogsDir { get; }
    [NullableAttribute("1")]
public string FullyQualifiedTestClassName { get; }
    [NullableAttribute("1")]
public string ManagedType { get; }
    [NullableAttribute("1")]
public string ManagedMethod { get; }
    [NullableAttribute("1")]
public string TestName { get; }
    [NullableAttribute("1")]
public TestContext Context { get; }
    [NullableContextAttribute("1")]
public TestContextImplementation(ITestMethod testMethod, StringWriter stringWriter, IDictionary`2<string, object> properties);
    public virtual UnitTestOutcome get_CurrentTestOutcome();
    public virtual DbConnection get_DataConnection();
    public virtual DataRow get_DataRow();
    [NullableContextAttribute("1")]
public virtual IDictionary get_Properties();
    public virtual string get_TestRunDirectory();
    public virtual string get_DeploymentDirectory();
    public virtual string get_ResultsDirectory();
    public virtual string get_TestRunResultsDirectory();
    public virtual string get_TestResultsDirectory();
    public virtual string get_TestDir();
    public virtual string get_TestDeploymentDir();
    public virtual string get_TestLogsDir();
    [NullableContextAttribute("1")]
public virtual string get_FullyQualifiedTestClassName();
    [NullableContextAttribute("1")]
public virtual string get_ManagedType();
    [NullableContextAttribute("1")]
public virtual string get_ManagedMethod();
    [NullableContextAttribute("1")]
public virtual string get_TestName();
    [NullableContextAttribute("1")]
public sealed virtual TestContext get_Context();
    [NullableContextAttribute("1")]
public virtual void AddResultFile(string fileName);
    [NullableContextAttribute("1")]
[ObsoleteAttribute("This method is only available for .NET framework and only throws NotSupportedException. It will be removed in a future update.")]
public virtual void BeginTimer(string timerName);
    [NullableContextAttribute("1")]
[ObsoleteAttribute("This method is only available for .NET framework and only throws NotSupportedException. It will be removed in a future update.")]
public virtual void EndTimer(string timerName);
    public virtual void Write(string message);
    [NullableContextAttribute("1")]
public virtual void Write(string format, Object[] args);
    public virtual void WriteLine(string message);
    [NullableContextAttribute("1")]
public virtual void WriteLine(string format, Object[] args);
    public sealed virtual void SetOutcome(UnitTestOutcome outcome);
    public sealed virtual void SetDataRow(object dataRow);
    public sealed virtual void SetDataConnection(object dbConnection);
    [NullableContextAttribute("1")]
public sealed virtual bool TryGetPropertyValue(string propertyName, Object& propertyValue);
    [NullableContextAttribute("1")]
public sealed virtual void AddProperty(string propertyName, string propertyValue);
    public sealed virtual IList`1<string> GetResultFiles();
    public sealed virtual string GetDiagnosticMessages();
    public sealed virtual void ClearDiagnosticMessages();
    private static UnitTestOutcome ToUTF(UnitTestOutcome outcome);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.TestDataSource : object {
    public sealed virtual IEnumerable`1<object> GetData(ITestMethod testMethodInfo, ITestContext testContext);
    private static IEnumerable`1<int> GetPermutation(DataAccessMethod dataAccessMethod, int length);
    private static void GetConnectionProperties(DataSourceAttribute dataSourceAttribute, String& providerNameInvariant, String& connectionString, String& tableName, DataAccessMethod& dataAccessMethod);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.TestDeployment : object {
    private DeploymentItemUtility _deploymentItemUtility;
    private DeploymentUtility _deploymentUtility;
    private FileUtility _fileUtility;
    [NullableAttribute("2")]
private MSTestAdapterSettings _adapterSettings;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private static TestRunDirectories <RunDirectories>k__BackingField;
    [NullableAttribute("2")]
internal static TestRunDirectories RunDirectories { get; private set; }
    internal TestDeployment(DeploymentItemUtility deploymentItemUtility, DeploymentUtility deploymentUtility, FileUtility fileUtility);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static TestRunDirectories get_RunDirectories();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private static void set_RunDirectories(TestRunDirectories value);
    public sealed virtual KeyValuePair`2[] GetDeploymentItems(MethodInfo method, Type type, ICollection`1<string> warnings);
    public sealed virtual void Cleanup();
    [NullableContextAttribute("2")]
public sealed virtual string GetDeploymentDirectory();
    public sealed virtual bool Deploy(IEnumerable`1<TestCase> tests, IRunContext runContext, IFrameworkHandle frameworkHandle);
    internal static IDictionary`2<string, object> GetDeploymentInformation(string source);
    internal static void Reset();
    private bool CanDeploy();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.TestSource : object {
    public IEnumerable`1<string> ValidSourceExtensions { get; }
    public sealed virtual IEnumerable`1<string> get_ValidSourceExtensions();
    public sealed virtual bool IsAssemblyReferenced(AssemblyName assemblyName, string source);
    public sealed virtual IEnumerable`1<string> GetTestSources(IEnumerable`1<string> sources);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.TestSourceHost : object {
    [NullableAttribute("1")]
private string _sourceFileName;
    private string _currentDirectory;
    private bool _isAppDomainCreationDisabled;
    private IRunSettings _runSettings;
    private IFrameworkHandle _frameworkHandle;
    [NullableAttribute("1")]
private IAppDomain _appDomain;
    private AssemblyResolver _parentDomainAssemblyResolver;
    private AssemblyResolver _childDomainAssemblyResolver;
    private string _targetFrameworkVersion;
    [CompilerGeneratedAttribute]
private AppDomain <AppDomain>k__BackingField;
    internal AppDomain AppDomain { get; private set; }
    public TestSourceHost(string sourceFileName, IRunSettings runSettings, IFrameworkHandle frameworkHandle);
    [NullableContextAttribute("1")]
internal TestSourceHost(string sourceFileName, IRunSettings runSettings, IFrameworkHandle frameworkHandle, IAppDomain appDomain);
    [CompilerGeneratedAttribute]
internal AppDomain get_AppDomain();
    [CompilerGeneratedAttribute]
private void set_AppDomain(AppDomain value);
    public sealed virtual void SetupHost();
    public sealed virtual object CreateInstanceForType(Type type, Object[] args);
    public sealed virtual void Dispose();
    private void SetContext(string source);
    private void ResetContext();
    [NullableContextAttribute("1")]
internal string GetAppBaseAsPerPlatform();
    [NullableContextAttribute("1")]
internal virtual List`1<string> GetResolutionPaths(string sourceFileName, bool isPortableMode);
    [NullableContextAttribute("1")]
internal virtual string GetTargetFrameworkVersionString(string sourceFileName);
    [NullableContextAttribute("1")]
private static string GetConfigFileForTestSource(string sourceFileName);
    [NullableContextAttribute("1")]
private static void AddSearchDirectoriesSpecifiedInRunSettingsToAssemblyResolver(AssemblyResolver assemblyResolver, string baseDirectory);
}
public class Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.ThreadOperations : object {
    [NullableContextAttribute("1")]
public sealed virtual bool Execute(Action action, int timeout, CancellationToken cancelToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.ThreadSafeStringWriter : StringWriter {
    private static AsyncLocal`1<Dictionary`2<string, ThreadSafeStringBuilder>> State;
    private static object StaticLockObject;
    private string _outputType;
    public ThreadSafeStringWriter(IFormatProvider formatProvider, string outputType);
    private static ThreadSafeStringWriter();
    public virtual StringBuilder GetStringBuilder();
    public virtual string ToString();
    [NullableContextAttribute("2")]
public string ToStringAndClear();
    public virtual void Write(char value);
    [NullableContextAttribute("2")]
public virtual void Write(string value);
    [NullableContextAttribute("2")]
public virtual void WriteLine(string value);
    public virtual void Write(Char[] buffer, int index, int count);
    protected virtual void Dispose(bool disposing);
    [NullableContextAttribute("2")]
private ThreadSafeStringBuilder GetStringBuilderOrNull();
    private ThreadSafeStringBuilder GetOrAddStringBuilder();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.TraceListenerManager : object {
    private TextWriter _origStdOut;
    private TextWriter _origStdErr;
    public TraceListenerManager(TextWriter outputWriter, TextWriter errorWriter);
    public sealed virtual void Add(ITraceListener traceListener);
    public sealed virtual void Remove(ITraceListener traceListener);
    public sealed virtual void Dispose(ITraceListener traceListener);
}
public class Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.TraceListenerWrapper : TextWriterTraceListener {
    [NullableContextAttribute("1")]
public TraceListenerWrapper(TextWriter textWriter);
    [NullableContextAttribute("2")]
public sealed virtual TextWriter GetWriter();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.Utilities.AppDomainUtilities : object {
    private static string ObjectModelVersionBuiltAgainst;
    private static Version DefaultVersion;
    private static Version Version45;
    [NullableAttribute("2")]
private static XmlUtilities s_xmlUtilities;
    internal static XmlUtilities XmlUtilities { get; internal set; }
    private static AppDomainUtilities();
    internal static XmlUtilities get_XmlUtilities();
    internal static void set_XmlUtilities(XmlUtilities value);
    internal static void SetAppDomainFrameworkVersionBasedOnTestSource(AppDomainSetup setup, string frameworkVersionString);
    internal static string GetTargetFrameworkVersionString(string testSourcePath);
    internal static void SetConfigurationFile(AppDomainSetup appDomainSetup, string testSourceConfigFile);
    internal static object CreateInstance(AppDomain appDomain, Type type, Object[] arguments);
    internal static Version GetTargetFrameworkVersionFromVersionString(string version);
    internal static void EnsureAppDomainUsesCorrectUICulture(AppDomain appDomain, CultureInfo uiCulture);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.Utilities.AssemblyUtility : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Dictionary`2<string, object> s_cultures;
    private String[] _assemblyExtensions;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Dictionary`2<string, object> Cultures { get; }
    private static Dictionary`2<string, object> get_Cultures();
    public sealed virtual Assembly ReflectionOnlyLoadFrom(string assemblyPath);
    public sealed virtual Assembly ReflectionOnlyLoad(string assemblyString);
    internal bool IsAssemblyExtension(string extensionWithLeadingDot);
    internal static bool IsAssembly(string path);
    internal virtual List`1<string> GetSatelliteAssemblies(string assemblyPath);
    internal virtual String[] GetFullPathToDependentAssemblies(string assemblyPath, string configFile, IList`1& warnings);
    internal static IList`1<string> GetResolutionPaths();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.Utilities.DeploymentItemUtility : object {
    private ReflectionUtility _reflectionUtility;
    private Dictionary`2<Type, IList`1<DeploymentItem>> _classLevelDeploymentItems;
    internal DeploymentItemUtility(ReflectionUtility reflectionUtility);
    internal IList`1<DeploymentItem> GetClassLevelDeploymentItems(Type type, ICollection`1<string> warnings);
    internal KeyValuePair`2[] GetDeploymentItems(MethodInfo method, IList`1<DeploymentItem> classLevelDeploymentItems, ICollection`1<string> warnings);
    [NullableContextAttribute("2")]
internal static bool IsValidDeploymentItem(string sourcePath, string relativeOutputDirectory, String& warning);
    internal static bool HasDeploymentItems(TestCase testCase);
    internal static IList`1<DeploymentItem> GetDeploymentItems(IEnumerable`1<TestCase> tests);
    internal static void AddDeploymentItem(IList`1<DeploymentItem> deploymentItemList, DeploymentItem deploymentItem);
    private static bool IsInvalidPath(string path);
    private static IList`1<DeploymentItem> GetDeploymentItems(Object[] deploymentItemAttributes, ICollection`1<string> warnings);
    private static IList`1<DeploymentItem> Concat(IList`1<DeploymentItem> deploymentItemList1, IList`1<DeploymentItem> deploymentItemList2);
    private static KeyValuePair`2[] GetDeploymentItems(TestCase testCase);
    private static KeyValuePair`2[] ToKeyValuePairs(IList`1<DeploymentItem> deploymentItemList);
    private static IList`1<DeploymentItem> FromKeyValuePairs(KeyValuePair`2[] deploymentItemsData);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.Utilities.DeploymentUtility : DeploymentUtilityBase {
    public DeploymentUtility(DeploymentItemUtility deploymentItemUtility, AssemblyUtility assemblyUtility, FileUtility fileUtility);
    public virtual void AddDeploymentItemsBasedOnMsTestSetting(string testSource, IList`1<DeploymentItem> deploymentItems, List`1<string> warnings);
    public virtual string GetRootDeploymentDirectory(string baseDirectory);
    protected virtual void AddDependenciesOfDeploymentItem(string deploymentItemFile, IList`1<string> filesToDeploy, IList`1<string> warnings);
    protected void ProcessNewStorage(string testSource, IList`1<DeploymentItem> deploymentItems, IList`1<string> warnings);
    protected IEnumerable`1<DeploymentItem> GetSatellites(IEnumerable`1<DeploymentItem> deploymentItems, string testSource, IList`1<string> warnings);
    private void AddDependencies(string testSource, string configFile, IList`1<DeploymentItem> deploymentItems, IList`1<string> warnings);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.Utilities.DeploymentUtilityBase : object {
    protected static string TestAssemblyConfigFileExtension;
    protected static string NetAppConfigFile;
    protected static string DeploymentFolderPrefix;
    [CompilerGeneratedAttribute]
private FileUtility <FileUtility>k__BackingField;
    [CompilerGeneratedAttribute]
private DeploymentItemUtility <DeploymentItemUtility>k__BackingField;
    [CompilerGeneratedAttribute]
private AssemblyUtility <AssemblyUtility>k__BackingField;
    protected FileUtility FileUtility { get; protected set; }
    protected DeploymentItemUtility DeploymentItemUtility { get; protected set; }
    protected AssemblyUtility AssemblyUtility { get; protected set; }
    public DeploymentUtilityBase(DeploymentItemUtility deploymentItemUtility, AssemblyUtility assemblyUtility, FileUtility fileUtility);
    [CompilerGeneratedAttribute]
protected FileUtility get_FileUtility();
    [CompilerGeneratedAttribute]
protected void set_FileUtility(FileUtility value);
    [CompilerGeneratedAttribute]
protected DeploymentItemUtility get_DeploymentItemUtility();
    [CompilerGeneratedAttribute]
protected void set_DeploymentItemUtility(DeploymentItemUtility value);
    [CompilerGeneratedAttribute]
protected AssemblyUtility get_AssemblyUtility();
    [CompilerGeneratedAttribute]
protected void set_AssemblyUtility(AssemblyUtility value);
    public bool Deploy(IEnumerable`1<TestCase> tests, string source, IRunContext runContext, ITestExecutionRecorder testExecutionRecorder, TestRunDirectories runDirectories);
    public TestRunDirectories CreateDeploymentDirectories(IRunContext runContext);
    public abstract virtual void AddDeploymentItemsBasedOnMsTestSetting(string testSource, IList`1<DeploymentItem> deploymentItems, List`1<string> warnings);
    public static string GetTestResultsDirectory(IRunContext runContext);
    public abstract virtual string GetRootDeploymentDirectory(string baseDirectory);
    internal string GetConfigFile(string testSource);
    protected IEnumerable`1<string> Deploy(IList`1<DeploymentItem> deploymentItems, string testSource, string deploymentDirectory, string resultsDirectory);
    protected abstract virtual void AddDependenciesOfDeploymentItem(string deploymentItemFile, IList`1<string> filesToDeploy, IList`1<string> warnings);
    protected String[] GetFullPathToFilesCorrespondingToDeploymentItem(DeploymentItem deploymentItem, string testSource, string resultsDirectory, IList`1<string> warnings, Boolean& isDirectory);
    protected static string GetFullPathToDeploymentItemSource(string deploymentItemSourcePath, string testSource);
    protected static bool IsOutputDirectoryValid(DeploymentItem deploymentItem, string deploymentDirectory, IList`1<string> warnings);
    protected string AddTestSourceConfigFileIfExists(string testSource, IList`1<DeploymentItem> deploymentItems);
    private static void LogWarnings(ITestExecutionRecorder testExecutionRecorder, IEnumerable`1<string> warnings);
    private bool Deploy(string source, IRunContext runContext, ITestExecutionRecorder testExecutionRecorder, IList`1<DeploymentItem> deploymentItems, TestRunDirectories runDirectories);
    private bool IsDeploymentItemSourceAFile(string deploymentItemSourcePath, string testSource, String& file);
    private bool IsDeploymentItemSourceADirectory(DeploymentItem deploymentItem, string testSource, String& resultDirectory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.Utilities.FileUtility : object {
    private AssemblyUtility _assemblyUtility;
    public virtual void CreateDirectoryIfNotExists(string directory);
    public static string ReplaceInvalidFileNameCharacters(string fileName);
    public virtual string GetNextIterationDirectoryName(string parentDirectoryName, string originalDirectoryName);
    public virtual string CopyFileOverwrite(string source, string destination, String& warning);
    public string FindAndDeployPdb(string destinationFile, string relativeDestination, string sourceFile, Dictionary`2<string, string> destToSource);
    public virtual List`1<string> AddFilesFromDirectory(string directoryPath, bool ignoreIOExceptions);
    public virtual List`1<string> AddFilesFromDirectory(string directoryPath, Func`2<string, bool> ignoreDirectory, bool ignoreIOExceptions);
    public static string TryConvertPathToRelative(string path, string rootDir);
    public virtual void DeleteDirectories(string filePath);
    public virtual bool DoesDirectoryExist(string deploymentDirectory);
    public virtual bool DoesFileExist(string testSource);
    public virtual void SetAttributes(string path, FileAttributes fileAttributes);
    public virtual String[] GetFilesInADirectory(string directoryPath);
    public virtual String[] GetDirectoriesInADirectory(string directoryPath);
    [NullableContextAttribute("2")]
private static string GetSymbolsFileName(string path);
}
[NullableContextAttribute("1")]
internal interface Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.Utilities.IAssemblyUtility {
    public abstract virtual Assembly ReflectionOnlyLoadFrom(string assemblyPath);
    public abstract virtual Assembly ReflectionOnlyLoad(string assemblyString);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.Utilities.ReflectionUtility : object {
    internal virtual Object[] GetCustomAttributes(MemberInfo attributeProvider, Type type);
    internal static Object[] GetCustomAttributes(MemberInfo memberInfo, bool inherit);
    [NullableContextAttribute("2")]
internal static Object[] GetCustomAttributes(MemberInfo memberInfo, Type type, bool inherit);
    internal static Object[] GetCustomAttributes(Assembly assembly, Type type);
    private static Attribute CreateAttributeInstance(CustomAttributeData attributeData);
    private static void AddNewAttributes(IList`1<CustomAttributeData> customAttributes, bool shouldGetAllAttributes, Type type, Dictionary`2<string, object> uniqueAttributes, List`1<object> nonUniqueAttributes);
    [NullableContextAttribute("2")]
private static bool IsReflectionOnlyLoad(MemberInfo memberInfo);
    private static bool IsTypeInheriting(Type type1, Type type2);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.Utilities.Validate : object {
    public static void IsFalse(bool condition, string errorMessage);
    public static void IsTrue(bool condition, string errorMessage);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.Utilities.VSInstallationUtilities : object {
    private static string PublicAssembliesDirectoryName;
    private static string PrivateAssembliesFolderName;
    private static string PortableVsTestManifestFilename;
    [NullableAttribute("2")]
private static string s_vsInstallPath;
    private static bool s_vsInstallPathEvaluated;
    [NullableAttribute("2")]
public static string VSInstallPath { get; }
    [NullableAttribute("2")]
public static string PathToPublicAssemblies { get; }
    [NullableAttribute("2")]
public static string PathToPrivateAssemblies { get; }
    [NullableContextAttribute("2")]
public static string get_VSInstallPath();
    [NullableContextAttribute("2")]
public static string get_PathToPublicAssemblies();
    [NullableContextAttribute("2")]
public static string get_PathToPrivateAssemblies();
    public static bool IsCurrentProcessRunningInPortableMode();
    public static bool IsProcessRunningInPortableMode(string exeName);
    private static string GetFullPath(string folderName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.Utilities.XmlUtilities : object {
    private static string XmlNamespace;
    internal Byte[] AddAssemblyRedirection(string configFile, AssemblyName assemblyName, string oldVersion, string newVersion);
    internal virtual XmlDocument GetXmlDocument(string configFile);
    private static XmlElement FindOrCreateElement(XmlDocument doc, XmlNode parent, string name);
    private static XmlElement FindOrCreateAssemblyBindingSection(XmlDocument doc, XmlElement configurationElement);
    private static void AddAssemblyBindingRedirect(XmlDocument doc, XmlElement assemblyBindingSection, AssemblyName assemblyName, string fromVersion, string toVersion);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
