[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.AssemblyCleanupAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.AssemblyInitializeAttribute : Attribute {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.Assert : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private static Assert <That>k__BackingField;
    [NullableAttribute("1")]
public static Assert That { get; }
    private static Assert();
    public static void AreEqual(T expected, T actual);
    public static void AreEqual(T expected, T actual, IEqualityComparer`1<T> comparer);
    public static void AreEqual(T expected, T actual, string message);
    public static void AreEqual(T expected, T actual, IEqualityComparer`1<T> comparer, string message);
    public static void AreEqual(T expected, T actual, string message, Object[] parameters);
    public static void AreEqual(T expected, T actual, IEqualityComparer`1<T> comparer, string message, Object[] parameters);
    public static void AreNotEqual(T notExpected, T actual);
    public static void AreNotEqual(T notExpected, T actual, IEqualityComparer`1<T> comparer);
    public static void AreNotEqual(T notExpected, T actual, string message);
    public static void AreNotEqual(T notExpected, T actual, IEqualityComparer`1<T> comparer, string message);
    public static void AreNotEqual(T notExpected, T actual, string message, Object[] parameters);
    public static void AreNotEqual(T notExpected, T actual, IEqualityComparer`1<T> comparer, string message, Object[] parameters);
    public static void AreEqual(float expected, float actual, float delta);
    public static void AreEqual(float expected, float actual, float delta, string message);
    public static void AreEqual(float expected, float actual, float delta, string message, Object[] parameters);
    public static void AreNotEqual(float notExpected, float actual, float delta);
    public static void AreNotEqual(float notExpected, float actual, float delta, string message);
    public static void AreNotEqual(float notExpected, float actual, float delta, string message, Object[] parameters);
    public static void AreEqual(decimal expected, decimal actual, decimal delta);
    public static void AreEqual(decimal expected, decimal actual, decimal delta, string message);
    public static void AreEqual(decimal expected, decimal actual, decimal delta, string message, Object[] parameters);
    public static void AreNotEqual(decimal notExpected, decimal actual, decimal delta);
    public static void AreNotEqual(decimal notExpected, decimal actual, decimal delta, string message);
    public static void AreNotEqual(decimal notExpected, decimal actual, decimal delta, string message, Object[] parameters);
    public static void AreEqual(long expected, long actual, long delta);
    public static void AreEqual(long expected, long actual, long delta, string message);
    public static void AreEqual(long expected, long actual, long delta, string message, Object[] parameters);
    public static void AreNotEqual(long notExpected, long actual, long delta);
    public static void AreNotEqual(long notExpected, long actual, long delta, string message);
    public static void AreNotEqual(long notExpected, long actual, long delta, string message, Object[] parameters);
    public static void AreEqual(double expected, double actual, double delta);
    public static void AreEqual(double expected, double actual, double delta, string message);
    public static void AreEqual(double expected, double actual, double delta, string message, Object[] parameters);
    public static void AreNotEqual(double notExpected, double actual, double delta);
    public static void AreNotEqual(double notExpected, double actual, double delta, string message);
    public static void AreNotEqual(double notExpected, double actual, double delta, string message, Object[] parameters);
    public static void AreEqual(string expected, string actual, bool ignoreCase);
    public static void AreEqual(string expected, string actual, bool ignoreCase, string message);
    public static void AreEqual(string expected, string actual, bool ignoreCase, string message, Object[] parameters);
    public static void AreEqual(string expected, string actual, bool ignoreCase, CultureInfo culture);
    public static void AreEqual(string expected, string actual, bool ignoreCase, CultureInfo culture, string message);
    public static void AreEqual(string expected, string actual, bool ignoreCase, CultureInfo culture, string message, Object[] parameters);
    public static void AreNotEqual(string notExpected, string actual, bool ignoreCase);
    public static void AreNotEqual(string notExpected, string actual, bool ignoreCase, string message);
    public static void AreNotEqual(string notExpected, string actual, bool ignoreCase, string message, Object[] parameters);
    public static void AreNotEqual(string notExpected, string actual, bool ignoreCase, CultureInfo culture);
    public static void AreNotEqual(string notExpected, string actual, bool ignoreCase, CultureInfo culture, string message);
    public static void AreNotEqual(string notExpected, string actual, bool ignoreCase, CultureInfo culture, string message, Object[] parameters);
    public static void AreSame(T expected, T actual);
    public static void AreSame(T expected, T actual, string message);
    public static void AreSame(T expected, T actual, string message, Object[] parameters);
    public static void AreNotSame(T notExpected, T actual);
    public static void AreNotSame(T notExpected, T actual, string message);
    public static void AreNotSame(T notExpected, T actual, string message, Object[] parameters);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public static Assert get_That();
    public static string ReplaceNullChars(string input);
    [NullableContextAttribute("1")]
[DoesNotReturnAttribute]
internal static void ThrowAssertFailed(string assertionName, string message);
    internal static string BuildUserMessage(string format, Object[] parameters);
    internal static void CheckParameterNotNull(object param, string assertionName, string parameterName, string message, Object[] parameters);
    [NullableContextAttribute("1")]
internal static string ReplaceNulls(object input);
    private static int CompareInternal(string expected, string actual, bool ignoreCase, CultureInfo culture);
    public static bool Equals(object objA, object objB);
    [DoesNotReturnAttribute]
public static void Fail();
    [DoesNotReturnAttribute]
public static void Fail(string message);
    [DoesNotReturnAttribute]
public static void Fail(string message, Object[] parameters);
    [DoesNotReturnAttribute]
public static void Inconclusive();
    [DoesNotReturnAttribute]
public static void Inconclusive(string message);
    [DoesNotReturnAttribute]
public static void Inconclusive(string message, Object[] parameters);
    public static void IsInstanceOfType(object value, Type expectedType);
    public static void IsInstanceOfType(object value);
    public static void IsInstanceOfType(object value, Type expectedType, string message);
    public static void IsInstanceOfType(object value, string message);
    public static void IsInstanceOfType(object value, Type expectedType, string message, Object[] parameters);
    public static void IsInstanceOfType(object value, string message, Object[] parameters);
    public static void IsNotInstanceOfType(object value, Type wrongType);
    public static void IsNotInstanceOfType(object value);
    public static void IsNotInstanceOfType(object value, Type wrongType, string message);
    public static void IsNotInstanceOfType(object value, string message);
    public static void IsNotInstanceOfType(object value, Type wrongType, string message, Object[] parameters);
    public static void IsNotInstanceOfType(object value, string message, Object[] parameters);
    public static void IsNull(object value);
    public static void IsNull(object value, string message);
    public static void IsNull(object value, string message, Object[] parameters);
    public static void IsNotNull(object value);
    public static void IsNotNull(object value, string message);
    public static void IsNotNull(object value, string message, Object[] parameters);
    public static void IsTrue(bool condition);
    public static void IsTrue(Nullable`1<bool> condition);
    public static void IsTrue(bool condition, string message);
    public static void IsTrue(Nullable`1<bool> condition, string message);
    public static void IsTrue(bool condition, string message, Object[] parameters);
    public static void IsTrue(Nullable`1<bool> condition, string message, Object[] parameters);
    public static void IsFalse(bool condition);
    public static void IsFalse(Nullable`1<bool> condition);
    public static void IsFalse(bool condition, string message);
    public static void IsFalse(Nullable`1<bool> condition, string message);
    public static void IsFalse(bool condition, string message, Object[] parameters);
    public static void IsFalse(Nullable`1<bool> condition, string message, Object[] parameters);
    [NullableContextAttribute("1")]
public static T ThrowsException(Action action);
    [NullableContextAttribute("1")]
public static T ThrowsException(Action action, string message);
    [NullableContextAttribute("1")]
public static T ThrowsException(Func`1<object> action);
    [NullableContextAttribute("1")]
public static T ThrowsException(Func`1<object> action, string message);
    [NullableContextAttribute("1")]
public static T ThrowsException(Func`1<object> action, string message, Object[] parameters);
    [NullableContextAttribute("1")]
public static T ThrowsException(Action action, string message, Object[] parameters);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Microsoft.VisualStudio.TestTools.UnitTesting.Assert/<ThrowsExceptionAsync>d__107`1")]
public static Task`1<T> ThrowsExceptionAsync(Func`1<Task> action);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Microsoft.VisualStudio.TestTools.UnitTesting.Assert/<ThrowsExceptionAsync>d__108`1")]
public static Task`1<T> ThrowsExceptionAsync(Func`1<Task> action, string message);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Microsoft.VisualStudio.TestTools.UnitTesting.Assert/<ThrowsExceptionAsync>d__109`1")]
public static Task`1<T> ThrowsExceptionAsync(Func`1<Task> action, string message, Object[] parameters);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException : UnitTestAssertException {
    public AssertFailedException(string msg, Exception ex);
    public AssertFailedException(string msg);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException : UnitTestAssertException {
    public AssertInconclusiveException(string msg, Exception ex);
    public AssertInconclusiveException(string msg);
}
[AttributeUsageAttribute("64")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute : Attribute {
    [CompilerGeneratedAttribute]
private InheritanceBehavior <InheritanceBehavior>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ClassCleanupBehavior> <CleanupBehavior>k__BackingField;
    public InheritanceBehavior InheritanceBehavior { get; }
    public Nullable`1<ClassCleanupBehavior> CleanupBehavior { get; }
    public ClassCleanupAttribute(InheritanceBehavior inheritanceBehavior);
    public ClassCleanupAttribute(ClassCleanupBehavior cleanupBehavior);
    public ClassCleanupAttribute(InheritanceBehavior inheritanceBehavior, ClassCleanupBehavior cleanupBehavior);
    private ClassCleanupAttribute(InheritanceBehavior inheritanceBehavior, Nullable`1<ClassCleanupBehavior> cleanupBehavior);
    [CompilerGeneratedAttribute]
public InheritanceBehavior get_InheritanceBehavior();
    [CompilerGeneratedAttribute]
public Nullable`1<ClassCleanupBehavior> get_CleanupBehavior();
}
public enum Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior : Enum {
    public int value__;
    public static ClassCleanupBehavior EndOfAssembly;
    public static ClassCleanupBehavior EndOfClass;
}
[AttributeUsageAttribute("1")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupExecutionAttribute : Attribute {
    public static ClassCleanupBehavior DefaultClassCleanupLifecycle;
    [CompilerGeneratedAttribute]
private ClassCleanupBehavior <CleanupBehavior>k__BackingField;
    public ClassCleanupBehavior CleanupBehavior { get; }
    public ClassCleanupExecutionAttribute(ClassCleanupBehavior cleanupBehavior);
    [CompilerGeneratedAttribute]
public ClassCleanupBehavior get_CleanupBehavior();
}
[AttributeUsageAttribute("64")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private InheritanceBehavior <InheritanceBehavior>k__BackingField;
    public InheritanceBehavior InheritanceBehavior { get; }
    public ClassInitializeAttribute(InheritanceBehavior inheritanceBehavior);
    [CompilerGeneratedAttribute]
public InheritanceBehavior get_InheritanceBehavior();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private static CollectionAssert <That>k__BackingField;
    [NullableAttribute("1")]
public static CollectionAssert That { get; }
    private static CollectionAssert();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public static CollectionAssert get_That();
    public static void Contains(ICollection collection, object element);
    public static void Contains(ICollection collection, object element, string message);
    public static void Contains(ICollection collection, object element, string message, Object[] parameters);
    public static void DoesNotContain(ICollection collection, object element);
    public static void DoesNotContain(ICollection collection, object element, string message);
    public static void DoesNotContain(ICollection collection, object element, string message, Object[] parameters);
    public static void AllItemsAreNotNull(ICollection collection);
    public static void AllItemsAreNotNull(ICollection collection, string message);
    public static void AllItemsAreNotNull(ICollection collection, string message, Object[] parameters);
    public static void AllItemsAreUnique(ICollection collection);
    public static void AllItemsAreUnique(ICollection collection, string message);
    public static void AllItemsAreUnique(ICollection collection, string message, Object[] parameters);
    public static void IsSubsetOf(ICollection subset, ICollection superset);
    public static void IsSubsetOf(ICollection subset, ICollection superset, string message);
    public static void IsSubsetOf(ICollection subset, ICollection superset, string message, Object[] parameters);
    public static void IsNotSubsetOf(ICollection subset, ICollection superset);
    public static void IsNotSubsetOf(ICollection subset, ICollection superset, string message);
    public static void IsNotSubsetOf(ICollection subset, ICollection superset, string message, Object[] parameters);
    public static void AreEquivalent(ICollection expected, ICollection actual);
    public static void AreEquivalent(ICollection expected, ICollection actual, string message);
    public static void AreEquivalent(ICollection expected, ICollection actual, string message, Object[] parameters);
    public static void AreNotEquivalent(ICollection expected, ICollection actual);
    public static void AreNotEquivalent(ICollection expected, ICollection actual, string message);
    public static void AreNotEquivalent(ICollection expected, ICollection actual, string message, Object[] parameters);
    public static void AllItemsAreInstancesOfType(ICollection collection, Type expectedType);
    public static void AllItemsAreInstancesOfType(ICollection collection, Type expectedType, string message);
    public static void AllItemsAreInstancesOfType(ICollection collection, Type expectedType, string message, Object[] parameters);
    public static void AreEqual(ICollection expected, ICollection actual);
    public static void AreEqual(ICollection expected, ICollection actual, string message);
    public static void AreEqual(ICollection expected, ICollection actual, string message, Object[] parameters);
    public static void AreNotEqual(ICollection notExpected, ICollection actual);
    public static void AreNotEqual(ICollection notExpected, ICollection actual, string message);
    public static void AreNotEqual(ICollection notExpected, ICollection actual, string message, Object[] parameters);
    public static void AreEqual(ICollection expected, ICollection actual, IComparer comparer);
    public static void AreEqual(ICollection expected, ICollection actual, IComparer comparer, string message);
    public static void AreEqual(ICollection expected, ICollection actual, IComparer comparer, string message, Object[] parameters);
    public static void AreNotEqual(ICollection notExpected, ICollection actual, IComparer comparer);
    public static void AreNotEqual(ICollection notExpected, ICollection actual, IComparer comparer, string message);
    public static void AreNotEqual(ICollection notExpected, ICollection actual, IComparer comparer, string message, Object[] parameters);
    [NullableContextAttribute("1")]
internal static bool IsSubsetOfHelper(ICollection subset, ICollection superset);
    [NullableContextAttribute("1")]
private static Dictionary`2<object, int> GetElementCounts(ICollection collection, Int32& nullCount);
    [NullableContextAttribute("1")]
private static bool FindMismatchedElement(ICollection expected, ICollection actual, Int32& expectedCount, Int32& actualCount, Object& mismatchedElement);
    private static bool AreCollectionsEqual(ICollection expected, ICollection actual, IComparer comparer, String& reason);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("64")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.CssIterationAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <CssIteration>k__BackingField;
    public string CssIteration { get; }
    public CssIterationAttribute(string cssIteration);
    [CompilerGeneratedAttribute]
public string get_CssIteration();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("64")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.CssProjectStructureAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <CssProjectStructure>k__BackingField;
    public string CssProjectStructure { get; }
    public CssProjectStructureAttribute(string cssProjectStructure);
    [CompilerGeneratedAttribute]
public string get_CssProjectStructure();
}
public enum Microsoft.VisualStudio.TestTools.UnitTesting.DataAccessMethod : Enum {
    public int value__;
    public static DataAccessMethod Sequential;
    public static DataAccessMethod Random;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("64")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute : Attribute {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Object[] <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[] Data { get; }
    public string DisplayName { get; public set; }
    public DataRowAttribute(object arg1);
    public DataRowAttribute(object arg1, object arg2);
    public DataRowAttribute(object arg1, object arg2, object arg3);
    public DataRowAttribute(object arg1, object arg2, object arg3, object arg4);
    public DataRowAttribute(object arg1, object arg2, object arg3, object arg4, object arg5);
    public DataRowAttribute(object arg1, object arg2, object arg3, object arg4, object arg5, object arg6);
    public DataRowAttribute(object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7);
    public DataRowAttribute(object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8);
    public DataRowAttribute(object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8, object arg9);
    public DataRowAttribute(object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8, object arg9, object arg10);
    public DataRowAttribute(object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8, object arg9, object arg10, object arg11);
    public DataRowAttribute(object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8, object arg9, object arg10, object arg11, object arg12);
    public DataRowAttribute(object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8, object arg9, object arg10, object arg11, object arg12, object arg13);
    public DataRowAttribute(object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8, object arg9, object arg10, object arg11, object arg12, object arg13, object arg14);
    public DataRowAttribute(object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8, object arg9, object arg10, object arg11, object arg12, object arg13, object arg14, object arg15);
    public DataRowAttribute(object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8, object arg9, object arg10, object arg11, object arg12, object arg13, object arg14, object arg15, object arg16);
    [CompilerGeneratedAttribute]
public Object[] get_Data();
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [NullableContextAttribute("1")]
public sealed virtual IEnumerable`1<Object[]> GetData(MethodInfo methodInfo);
    public virtual string GetDisplayName(MethodInfo methodInfo, Object[] data);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("64")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute : Attribute {
    [NullableAttribute("1")]
public static string DefaultProviderName;
    public static DataAccessMethod DefaultDataAccessMethod;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <ProviderInvariantName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectionString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private DataAccessMethod <DataAccessMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataSourceSettingName>k__BackingField;
    [NullableAttribute("1")]
public string ProviderInvariantName { get; }
    public string ConnectionString { get; }
    public string TableName { get; }
    public DataAccessMethod DataAccessMethod { get; }
    public string DataSourceSettingName { get; }
    [NullableContextAttribute("1")]
public DataSourceAttribute(string providerInvariantName, string connectionString, string tableName, DataAccessMethod dataAccessMethod);
    [NullableContextAttribute("1")]
public DataSourceAttribute(string connectionString, string tableName);
    [NullableContextAttribute("1")]
public DataSourceAttribute(string dataSourceSettingName);
    private static DataSourceAttribute();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_ProviderInvariantName();
    [CompilerGeneratedAttribute]
public string get_ConnectionString();
    [CompilerGeneratedAttribute]
public string get_TableName();
    [CompilerGeneratedAttribute]
public DataAccessMethod get_DataAccessMethod();
    [CompilerGeneratedAttribute]
public string get_DataSourceSettingName();
}
[AttributeUsageAttribute("64")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.DataTestMethodAttribute : TestMethodAttribute {
}
internal static class Microsoft.VisualStudio.TestTools.UnitTesting.DebugEx : object {
    [NullableContextAttribute("1")]
[ConditionalAttribute("DEBUG")]
public static void Assert(bool b, string message);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("64")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public string Description { get; }
    public DescriptionAttribute(string description);
    [CompilerGeneratedAttribute]
public string get_Description();
}
[AttributeUsageAttribute("1")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.DiscoverInternalsAttribute : Attribute {
}
[AttributeUsageAttribute("69")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.DoNotParallelizeAttribute : Attribute {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("64")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.DynamicDataAttribute : Attribute {
    [NullableAttribute("1")]
private string _dynamicDataSourceName;
    private DynamicDataSourceType _dynamicDataSourceType;
    private Type _dynamicDataDeclaringType;
    [CompilerGeneratedAttribute]
private string <DynamicDataDisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DynamicDataDisplayNameDeclaringType>k__BackingField;
    public string DynamicDataDisplayName { get; public set; }
    public Type DynamicDataDisplayNameDeclaringType { get; public set; }
    [NullableContextAttribute("1")]
public DynamicDataAttribute(string dynamicDataSourceName, DynamicDataSourceType dynamicDataSourceType);
    [NullableContextAttribute("1")]
public DynamicDataAttribute(string dynamicDataSourceName, Type dynamicDataDeclaringType, DynamicDataSourceType dynamicDataSourceType);
    [CompilerGeneratedAttribute]
public string get_DynamicDataDisplayName();
    [CompilerGeneratedAttribute]
public void set_DynamicDataDisplayName(string value);
    [CompilerGeneratedAttribute]
public Type get_DynamicDataDisplayNameDeclaringType();
    [CompilerGeneratedAttribute]
public void set_DynamicDataDisplayNameDeclaringType(Type value);
    [NullableContextAttribute("1")]
public sealed virtual IEnumerable`1<Object[]> GetData(MethodInfo methodInfo);
    public sealed virtual string GetDisplayName(MethodInfo methodInfo, Object[] data);
}
public enum Microsoft.VisualStudio.TestTools.UnitTesting.DynamicDataSourceType : Enum {
    public int value__;
    public static DynamicDataSourceType Property;
    public static DynamicDataSourceType Method;
}
public enum Microsoft.VisualStudio.TestTools.UnitTesting.ExecutionScope : Enum {
    public int value__;
    public static ExecutionScope ClassLevel;
    public static ExecutionScope MethodLevel;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("64")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionAttribute : ExpectedExceptionBaseAttribute {
    [CompilerGeneratedAttribute]
private Type <ExceptionType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowDerivedTypes>k__BackingField;
    public Type ExceptionType { get; private set; }
    public bool AllowDerivedTypes { get; public set; }
    protected internal string NoExceptionMessage { get; }
    public ExpectedExceptionAttribute(Type exceptionType);
    public ExpectedExceptionAttribute(Type exceptionType, string noExceptionMessage);
    [CompilerGeneratedAttribute]
public Type get_ExceptionType();
    [CompilerGeneratedAttribute]
private void set_ExceptionType(Type value);
    [CompilerGeneratedAttribute]
public bool get_AllowDerivedTypes();
    [CompilerGeneratedAttribute]
public void set_AllowDerivedTypes(bool value);
    protected internal virtual string get_NoExceptionMessage();
    protected internal virtual void Verify(Exception exception);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("64")]
public abstract class Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionBaseAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <SpecifiedNoExceptionMessage>k__BackingField;
    protected internal string NoExceptionMessage { get; }
    protected string SpecifiedNoExceptionMessage { get; private set; }
    [NullableContextAttribute("2")]
protected ExpectedExceptionBaseAttribute(string noExceptionMessage);
    protected internal virtual string get_NoExceptionMessage();
    [CompilerGeneratedAttribute]
protected string get_SpecifiedNoExceptionMessage();
    [CompilerGeneratedAttribute]
private void set_SpecifiedNoExceptionMessage(string value);
    internal static string GetDefaultNoExceptionMessage(string expectedExceptionAttributeTypeName);
    protected internal abstract virtual void Verify(Exception exception);
    protected void RethrowIfAssertException(Exception exception);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AccessStringInvalidSyntax { get; }
    internal static string ActualHasMismatchedElements { get; }
    internal static string AllItemsAreUniqueFailMsg { get; }
    internal static string AreEqualCaseFailMsg { get; }
    internal static string AreEqualDeltaFailMsg { get; }
    internal static string AreEqualDifferentTypesFailMsg { get; }
    internal static string AreEqualFailMsg { get; }
    internal static string AreNotEqualDeltaFailMsg { get; }
    internal static string AreNotEqualFailMsg { get; }
    internal static string AreSameGivenValues { get; }
    internal static string ArgumentXMustDeriveFromClassY { get; }
    internal static string AssertionFailed { get; }
    internal static string AsyncUITestMethodNotSupported { get; }
    internal static string AsyncUITestMethodWithNoDispatcherQueue { get; }
    internal static string BothCollectionsEmpty { get; }
    internal static string BothCollectionsSameElements { get; }
    internal static string BothCollectionsSameReference { get; }
    internal static string BothSameElements { get; }
    internal static string CollectionEqualReason { get; }
    internal static string Common_NullInMessages { get; }
    internal static string Common_ObjectString { get; }
    internal static string ContainsFail { get; }
    internal static string DataDrivenResultDisplayName { get; }
    internal static string DoNotUseAssertEquals { get; }
    internal static string DynamicDataDisplayName { get; }
    internal static string DynamicDataIEnumerableEmpty { get; }
    internal static string DynamicDataIEnumerableNull { get; }
    internal static string DynamicDataValueNull { get; }
    internal static string ElementNumbersDontMatch { get; }
    internal static string ElementsAtIndexDontMatch { get; }
    internal static string ElementTypesAtIndexDontMatch { get; }
    internal static string ElementTypesAtIndexDontMatch2 { get; }
    internal static string EndsWithFail { get; }
    internal static string EqualsTesterInvalidArgs { get; }
    internal static string ErrorInvalidCast { get; }
    internal static string InternalObjectNotValid { get; }
    internal static string InvalidParameterToAssert { get; }
    internal static string InvalidPropertyType { get; }
    internal static string IsInstanceOfFailMsg { get; }
    internal static string IsMatchFail { get; }
    internal static string IsNotInstanceOfFailMsg { get; }
    internal static string IsNotMatchFail { get; }
    internal static string NoDataRow { get; }
    internal static string NoExceptionThrown { get; }
    internal static string NullParameterToAssert { get; }
    internal static string NumberOfElementsDiff { get; }
    internal static string PrivateAccessorConstructorNotFound { get; }
    internal static string PrivateAccessorMemberNotFound { get; }
    internal static string StartsWithFail { get; }
    internal static string UTF_ExpectedExceptionTypeMustDeriveFromException { get; }
    internal static string UTF_FailedToGetExceptionMessage { get; }
    internal static string UTF_TestMethodNoException { get; }
    internal static string UTF_TestMethodNoExceptionDefault { get; }
    internal static string UTF_TestMethodWrongException { get; }
    internal static string UTF_TestMethodWrongExceptionDerivedAllowed { get; }
    internal static string WrongExceptionThrown { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AccessStringInvalidSyntax();
    internal static string get_ActualHasMismatchedElements();
    internal static string get_AllItemsAreUniqueFailMsg();
    internal static string get_AreEqualCaseFailMsg();
    internal static string get_AreEqualDeltaFailMsg();
    internal static string get_AreEqualDifferentTypesFailMsg();
    internal static string get_AreEqualFailMsg();
    internal static string get_AreNotEqualDeltaFailMsg();
    internal static string get_AreNotEqualFailMsg();
    internal static string get_AreSameGivenValues();
    internal static string get_ArgumentXMustDeriveFromClassY();
    internal static string get_AssertionFailed();
    internal static string get_AsyncUITestMethodNotSupported();
    internal static string get_AsyncUITestMethodWithNoDispatcherQueue();
    internal static string get_BothCollectionsEmpty();
    internal static string get_BothCollectionsSameElements();
    internal static string get_BothCollectionsSameReference();
    internal static string get_BothSameElements();
    internal static string get_CollectionEqualReason();
    internal static string get_Common_NullInMessages();
    internal static string get_Common_ObjectString();
    internal static string get_ContainsFail();
    internal static string get_DataDrivenResultDisplayName();
    internal static string get_DoNotUseAssertEquals();
    internal static string get_DynamicDataDisplayName();
    internal static string get_DynamicDataIEnumerableEmpty();
    internal static string get_DynamicDataIEnumerableNull();
    internal static string get_DynamicDataValueNull();
    internal static string get_ElementNumbersDontMatch();
    internal static string get_ElementsAtIndexDontMatch();
    internal static string get_ElementTypesAtIndexDontMatch();
    internal static string get_ElementTypesAtIndexDontMatch2();
    internal static string get_EndsWithFail();
    internal static string get_EqualsTesterInvalidArgs();
    internal static string get_ErrorInvalidCast();
    internal static string get_InternalObjectNotValid();
    internal static string get_InvalidParameterToAssert();
    internal static string get_InvalidPropertyType();
    internal static string get_IsInstanceOfFailMsg();
    internal static string get_IsMatchFail();
    internal static string get_IsNotInstanceOfFailMsg();
    internal static string get_IsNotMatchFail();
    internal static string get_NoDataRow();
    internal static string get_NoExceptionThrown();
    internal static string get_NullParameterToAssert();
    internal static string get_NumberOfElementsDiff();
    internal static string get_PrivateAccessorConstructorNotFound();
    internal static string get_PrivateAccessorMemberNotFound();
    internal static string get_StartsWithFail();
    internal static string get_UTF_ExpectedExceptionTypeMustDeriveFromException();
    internal static string get_UTF_FailedToGetExceptionMessage();
    internal static string get_UTF_TestMethodNoException();
    internal static string get_UTF_TestMethodNoExceptionDefault();
    internal static string get_UTF_TestMethodWrongException();
    internal static string get_UTF_TestMethodWrongExceptionDerivedAllowed();
    internal static string get_WrongExceptionThrown();
}
public class Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper : object {
    [NullableAttribute("1")]
private static Random Randomizer;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<object> _ienumerableStore;
    [CompilerGeneratedAttribute]
private int <Data>k__BackingField;
    public int Data { get; public set; }
    public GenericParameterHelper(int data);
    private static GenericParameterHelper();
    [CompilerGeneratedAttribute]
public int get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(int value);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
public sealed virtual int CompareTo(object obj);
    [NullableContextAttribute("1")]
public sealed virtual IEnumerator GetEnumerator();
    [NullableContextAttribute("1")]
public object Clone();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.VisualStudio.TestTools.UnitTesting.Helper : object {
    internal static void CheckParameterNotNull(object param, string parameterName, string message);
    internal static void CheckParameterNotNullOrEmpty(string param, string parameterName, string message);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("68")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <IgnoreMessage>k__BackingField;
    public string IgnoreMessage { get; }
    public IgnoreAttribute(string message);
    [CompilerGeneratedAttribute]
public string get_IgnoreMessage();
}
public enum Microsoft.VisualStudio.TestTools.UnitTesting.InheritanceBehavior : Enum {
    public int value__;
    public static InheritanceBehavior None;
    public static InheritanceBehavior BeforeEachDerivedClass;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.InternalTestFailureException : UnitTestAssertException {
    public InternalTestFailureException(string msg, Exception ex);
    public InternalTestFailureException(string msg);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.TestTools.UnitTesting.ITestDataSource {
    public abstract virtual IEnumerable`1<Object[]> GetData(MethodInfo methodInfo);
    [NullableContextAttribute("2")]
public abstract virtual string GetDisplayName(MethodInfo methodInfo, Object[] data);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.TestTools.UnitTesting.ITestMethod {
    public string TestMethodName { get; }
    public string TestClassName { get; }
    public Type ReturnType { get; }
    [NullableAttribute("2")]
public Object[] Arguments { get; }
    public ParameterInfo[] ParameterTypes { get; }
    public MethodInfo MethodInfo { get; }
    public abstract virtual string get_TestMethodName();
    public abstract virtual string get_TestClassName();
    public abstract virtual Type get_ReturnType();
    [NullableContextAttribute("2")]
public abstract virtual Object[] get_Arguments();
    public abstract virtual ParameterInfo[] get_ParameterTypes();
    public abstract virtual MethodInfo get_MethodInfo();
    public abstract virtual TestResult Invoke(Object[] arguments);
    public abstract virtual Attribute[] GetAllAttributes(bool inherit);
    public abstract virtual TAttributeType[] GetAttributes(bool inherit);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.Logging.Logger : object {
    [CompilerGeneratedAttribute]
private static LogMessageHandler OnLogMessage;
    [CompilerGeneratedAttribute]
public static void add_OnLogMessage(LogMessageHandler value);
    [CompilerGeneratedAttribute]
public static void remove_OnLogMessage(LogMessageHandler value);
    [NullableContextAttribute("1")]
public static void LogMessage(string format, Object[] args);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("64")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.OwnerAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Owner>k__BackingField;
    public string Owner { get; }
    public OwnerAttribute(string owner);
    [CompilerGeneratedAttribute]
public string get_Owner();
}
[AttributeUsageAttribute("1")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.ParallelizeAttribute : Attribute {
    private static int DefaultParallelWorkers;
    private static ExecutionScope DefaultExecutionScope;
    [CompilerGeneratedAttribute]
private int <Workers>k__BackingField;
    [CompilerGeneratedAttribute]
private ExecutionScope <Scope>k__BackingField;
    public int Workers { get; public set; }
    public ExecutionScope Scope { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Workers();
    [CompilerGeneratedAttribute]
public void set_Workers(int value);
    [CompilerGeneratedAttribute]
public ExecutionScope get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(ExecutionScope value);
}
[AttributeUsageAttribute("64")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.PriorityAttribute : Attribute {
    [CompilerGeneratedAttribute]
private int <Priority>k__BackingField;
    public int Priority { get; }
    public PriorityAttribute(int priority);
    [CompilerGeneratedAttribute]
public int get_Priority();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert : object {
    [NullableAttribute("1")]
private static Object[] Empty;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private static StringAssert <That>k__BackingField;
    [NullableAttribute("1")]
public static StringAssert That { get; }
    private static StringAssert();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public static StringAssert get_That();
    public static void Contains(string value, string substring);
    public static void Contains(string value, string substring, StringComparison comparisonType);
    public static void Contains(string value, string substring, string message);
    public static void Contains(string value, string substring, string message, StringComparison comparisonType);
    public static void Contains(string value, string substring, string message, Object[] parameters);
    public static void Contains(string value, string substring, string message, StringComparison comparisonType, Object[] parameters);
    public static void StartsWith(string value, string substring);
    public static void StartsWith(string value, string substring, StringComparison comparisonType);
    public static void StartsWith(string value, string substring, string message);
    public static void StartsWith(string value, string substring, string message, Object[] parameters);
    public static void StartsWith(string value, string substring, string message, StringComparison comparisonType);
    public static void StartsWith(string value, string substring, string message, StringComparison comparisonType, Object[] parameters);
    public static void EndsWith(string value, string substring);
    public static void EndsWith(string value, string substring, StringComparison comparisonType);
    public static void EndsWith(string value, string substring, string message);
    public static void EndsWith(string value, string substring, string message, Object[] parameters);
    public static void EndsWith(string value, string substring, string message, StringComparison comparisonType);
    public static void EndsWith(string value, string substring, string message, StringComparison comparisonType, Object[] parameters);
    public static void Matches(string value, Regex pattern);
    public static void Matches(string value, Regex pattern, string message);
    public static void Matches(string value, Regex pattern, string message, Object[] parameters);
    public static void DoesNotMatch(string value, Regex pattern);
    public static void DoesNotMatch(string value, Regex pattern, string message);
    public static void DoesNotMatch(string value, Regex pattern, string message, Object[] parameters);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal static class Microsoft.VisualStudio.TestTools.UnitTesting.StringEx : object {
    public static bool IsNullOrEmpty(string value);
    public static bool IsNullOrWhiteSpace(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("69")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute : TestCategoryBaseAttribute {
    [CompilerGeneratedAttribute]
private IList`1<string> <TestCategories>k__BackingField;
    public IList`1<string> TestCategories { get; }
    public TestCategoryAttribute(string testCategory);
    [CompilerGeneratedAttribute]
public virtual IList`1<string> get_TestCategories();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("69")]
public abstract class Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryBaseAttribute : Attribute {
    public IList`1<string> TestCategories { get; }
    public abstract virtual IList`1<string> get_TestCategories();
}
[AttributeUsageAttribute("4")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute : Attribute {
    [NullableContextAttribute("2")]
public virtual TestMethodAttribute GetTestMethodAttribute(TestMethodAttribute testMethodAttribute);
}
[AttributeUsageAttribute("64")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute : Attribute {
}
[AttributeUsageAttribute("1")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.TestDataSourceDiscoveryAttribute : Attribute {
    [CompilerGeneratedAttribute]
private TestDataSourceDiscoveryOption <DiscoveryOption>k__BackingField;
    public TestDataSourceDiscoveryOption DiscoveryOption { get; }
    public TestDataSourceDiscoveryAttribute(TestDataSourceDiscoveryOption discoveryOption);
    [CompilerGeneratedAttribute]
public TestDataSourceDiscoveryOption get_DiscoveryOption();
}
public enum Microsoft.VisualStudio.TestTools.UnitTesting.TestDataSourceDiscoveryOption : Enum {
    public int value__;
    public static TestDataSourceDiscoveryOption DuringExecution;
    public static TestDataSourceDiscoveryOption DuringDiscovery;
}
public enum Microsoft.VisualStudio.TestTools.UnitTesting.TestIdGenerationStrategy : Enum {
    public int value__;
    [ObsoleteAttribute("This strategy is provided to reduce impact on existing users. It will be removed in a future release.")]
public static TestIdGenerationStrategy Legacy;
    [ObsoleteAttribute("This strategy is provided to reduce impact on existing users. It will be removed in a future release.")]
public static TestIdGenerationStrategy DisplayName;
    public static TestIdGenerationStrategy FullyQualified;
}
[AttributeUsageAttribute("1")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.TestIdGenerationStrategyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private TestIdGenerationStrategy <Strategy>k__BackingField;
    public TestIdGenerationStrategy Strategy { get; }
    public TestIdGenerationStrategyAttribute(TestIdGenerationStrategy strategy);
    [CompilerGeneratedAttribute]
public TestIdGenerationStrategy get_Strategy();
}
[AttributeUsageAttribute("64")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute : Attribute {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("64")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    public string DisplayName { get; }
    public TestMethodAttribute(string displayName);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [NullableContextAttribute("1")]
public virtual TestResult[] Execute(ITestMethod testMethod);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("64")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Name { get; }
    public string Value { get; }
    public TestPropertyAttribute(string name, string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_Value();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.TestResult : object {
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private UnitTestOutcome <Outcome>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <TestFailureException>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LogOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LogError>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DebugTrace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestContextMessages>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ExecutionId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ParentExecId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <InnerResultsCount>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Duration>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DatarowIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ReturnValue>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IList`1<string> <ResultFiles>k__BackingField;
    public string DisplayName { get; public set; }
    public UnitTestOutcome Outcome { get; public set; }
    public Exception TestFailureException { get; public set; }
    public string LogOutput { get; public set; }
    public string LogError { get; public set; }
    public string DebugTrace { get; public set; }
    public string TestContextMessages { get; public set; }
    public Guid ExecutionId { get; public set; }
    public Guid ParentExecId { get; public set; }
    public int InnerResultsCount { get; public set; }
    public TimeSpan Duration { get; public set; }
    public int DatarowIndex { get; public set; }
    public object ReturnValue { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IList`1<string> ResultFiles { get; public set; }
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public UnitTestOutcome get_Outcome();
    [CompilerGeneratedAttribute]
public void set_Outcome(UnitTestOutcome value);
    [CompilerGeneratedAttribute]
public Exception get_TestFailureException();
    [CompilerGeneratedAttribute]
public void set_TestFailureException(Exception value);
    [CompilerGeneratedAttribute]
public string get_LogOutput();
    [CompilerGeneratedAttribute]
public void set_LogOutput(string value);
    [CompilerGeneratedAttribute]
public string get_LogError();
    [CompilerGeneratedAttribute]
public void set_LogError(string value);
    [CompilerGeneratedAttribute]
public string get_DebugTrace();
    [CompilerGeneratedAttribute]
public void set_DebugTrace(string value);
    [CompilerGeneratedAttribute]
public string get_TestContextMessages();
    [CompilerGeneratedAttribute]
public void set_TestContextMessages(string value);
    [CompilerGeneratedAttribute]
public Guid get_ExecutionId();
    [CompilerGeneratedAttribute]
public void set_ExecutionId(Guid value);
    [CompilerGeneratedAttribute]
public Guid get_ParentExecId();
    [CompilerGeneratedAttribute]
public void set_ParentExecId(Guid value);
    [CompilerGeneratedAttribute]
public int get_InnerResultsCount();
    [CompilerGeneratedAttribute]
public void set_InnerResultsCount(int value);
    [CompilerGeneratedAttribute]
public TimeSpan get_Duration();
    [CompilerGeneratedAttribute]
public void set_Duration(TimeSpan value);
    [CompilerGeneratedAttribute]
public int get_DatarowIndex();
    [CompilerGeneratedAttribute]
public void set_DatarowIndex(int value);
    [CompilerGeneratedAttribute]
public object get_ReturnValue();
    [CompilerGeneratedAttribute]
public void set_ReturnValue(object value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_ResultFiles();
    [CompilerGeneratedAttribute]
public void set_ResultFiles(IList`1<string> value);
}
public enum Microsoft.VisualStudio.TestTools.UnitTesting.TestTimeout : Enum {
    public int value__;
    public static TestTimeout Infinite;
}
[AttributeUsageAttribute("64")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.TimeoutAttribute : Attribute {
    [CompilerGeneratedAttribute]
private int <Timeout>k__BackingField;
    public int Timeout { get; }
    public TimeoutAttribute(int timeout);
    public TimeoutAttribute(TestTimeout timeout);
    [CompilerGeneratedAttribute]
public int get_Timeout();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestAssertException : Exception {
    protected UnitTestAssertException(string msg, Exception ex);
    protected UnitTestAssertException(string msg);
}
public enum Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestOutcome : Enum {
    public int value__;
    public static UnitTestOutcome Failed;
    public static UnitTestOutcome Inconclusive;
    public static UnitTestOutcome Passed;
    public static UnitTestOutcome InProgress;
    public static UnitTestOutcome Error;
    public static UnitTestOutcome Timeout;
    public static UnitTestOutcome Aborted;
    public static UnitTestOutcome Unknown;
    public static UnitTestOutcome NotRunnable;
}
internal static class Microsoft.VisualStudio.TestTools.UnitTesting.UtfHelper : object {
    [NullableContextAttribute("1")]
internal static string GetExceptionMsg(Exception ex);
}
[AttributeUsageAttribute("64")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.WorkItemAttribute : Attribute {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    public int Id { get; }
    public WorkItemAttribute(int id);
    [CompilerGeneratedAttribute]
public int get_Id();
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public bool ReturnValue { get; }
    public String[] Members { get; }
    public MemberNotNullWhenAttribute(bool returnValue, string member);
    public MemberNotNullWhenAttribute(bool returnValue, String[] members);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("10368")]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
