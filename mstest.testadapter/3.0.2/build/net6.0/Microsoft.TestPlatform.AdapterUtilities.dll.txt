[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.TestPlatform.AdapterUtilities.Helpers.ReflectionHelpers : object {
    private static void AssertSupport(T obj, string methodName, string className);
    internal static string ParseEscapedString(string escapedString);
    private static int ParseEscapedStringSegment(string escapedStringSegment, int pos, StringBuilder stringBuilder);
    internal static bool IsMethod(MethodBase method);
    internal static Type GetReflectedType(MethodBase method);
    internal static RuntimeMethodHandle GetMethodHandle(MethodBase method);
    internal static bool IsGenericType(Type type);
    internal static MethodBase GetDeclaringMethod(Type type);
}
public static class Microsoft.TestPlatform.AdapterUtilities.HierarchyConstants : object {
    [NullableAttribute("1")]
public static string HierarchyLabel;
    [NullableAttribute("1")]
public static string HierarchyPropertyId;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.TestPlatform.AdapterUtilities.ManagedNameConstants : object {
    public static string ManagedTypeLabel;
    public static string ManagedMethodLabel;
    public static string ManagedTypePropertyId;
    public static string ManagedMethodPropertyId;
}
public class Microsoft.TestPlatform.AdapterUtilities.ManagedNameUtilities.InvalidManagedNameException : Exception {
    [NullableContextAttribute("2")]
public InvalidManagedNameException(string message);
    [NullableContextAttribute("1")]
protected InvalidManagedNameException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.TestPlatform.AdapterUtilities.ManagedNameUtilities.ManagedNameHelper : object {
    public static void GetManagedName(MethodBase method, String& managedTypeName, String& managedMethodName);
    public static void GetManagedName(MethodBase method, String& managedTypeName, String& managedMethodName, String[]& hierarchyValues);
    public static String[] GetManagedHierarchy(MethodBase method);
    private static void GetManagedNameAndHierarchy(MethodBase method, bool useClosedTypes, String& managedTypeName, String& managedMethodName, String[]& hierarchyValues);
    public static MethodBase GetMethod(Assembly assembly, string managedTypeName, string managedMethodName);
    private static MethodInfo FindMethod(Type type, string methodName, int methodArity, String[] parameterTypes);
    [NullableContextAttribute("2")]
private static Int32[] AppendTypeString(StringBuilder b, Type type, bool closedType);
    private static void AppendNamespace(StringBuilder b, string namespaceString);
    private static void AppendMethodString(StringBuilder methodBuilder, string name, int methodArity);
    private static void NormalizeAndAppendString(StringBuilder b, string name);
    private static int AppendNestedTypeName(StringBuilder b, Type type, bool closedType);
    private static void AppendGenericMethodParameters(StringBuilder methodBuilder, MethodBase method);
    private static void AppendGenericTypeParameters(StringBuilder b, Type type);
    private static void AppendGenericArguments(StringBuilder b, Type[] genericArguments);
    private static bool IsNormalized(string s);
    private static bool NeedsEscaping(char c, int pos);
    private static string GetTypeString(Type type, bool closedType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.TestPlatform.AdapterUtilities.ManagedNameUtilities.ManagedNameParser : object {
    public static void ParseManagedTypeName(string managedTypeName, String& namespaceName, String& typeName);
    public static void ParseManagedMethodName(string managedMethodName, String& methodName, Int32& arity, String[]& parameterTypes);
    private static string Capture(string managedMethodName, int start, int end);
    private static int ParseMethodName(string managedMethodName, int start, String& methodName, Int32& arity);
    private static int ParseArity(string managedMethodName, int start, Int32& arity);
    private static int ParseParameterTypeList(string managedMethodName, int start, String[]& parameterTypes);
    private static int ParseParameterType(string managedMethodName, int start, String& parameterType);
    private static int ParseArrayBrackets(string managedMethodName, int start);
    private static int ParseGenericBrackets(string managedMethodName, int start);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.TestPlatform.AdapterUtilities.Resources.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ErrorCannotAppendAfterHashCalculation { get; }
    internal static string ErrorIncompleteManagedName { get; }
    internal static string ErrorInvalidSequenceAt { get; }
    internal static string ErrorMethodArityMustBeNumeric { get; }
    internal static string ErrorMethodExpectedAsAnArgument { get; }
    internal static string ErrorMethodNotFound { get; }
    internal static string ErrorNoClosingQuote { get; }
    internal static string ErrorTypeNotFound { get; }
    internal static string ErrorUnexpectedCharactersAtEnd { get; }
    internal static string ErrorWhitespaceNotValid { get; }
    internal static string MethodNotImplementedOnPlatform { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ErrorCannotAppendAfterHashCalculation();
    internal static string get_ErrorIncompleteManagedName();
    internal static string get_ErrorInvalidSequenceAt();
    internal static string get_ErrorMethodArityMustBeNumeric();
    internal static string get_ErrorMethodExpectedAsAnArgument();
    internal static string get_ErrorMethodNotFound();
    internal static string get_ErrorNoClosingQuote();
    internal static string get_ErrorTypeNotFound();
    internal static string get_ErrorUnexpectedCharactersAtEnd();
    internal static string get_ErrorWhitespaceNotValid();
    internal static string get_MethodNotImplementedOnPlatform();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.TestPlatform.AdapterUtilities.StringUtils : object {
    [ExtensionAttribute]
public static bool IsNullOrEmpty(string value);
    [ExtensionAttribute]
public static bool IsNullOrWhiteSpace(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.TestPlatform.AdapterUtilities.TestIdProvider : object {
    internal static int BlockBits;
    internal static int DigestBits;
    internal static int BlockBytes;
    internal static int DigestBytes;
    private Guid _id;
    [NullableAttribute("2")]
private Byte[] _hash;
    private Byte[] _lastBlock;
    private int _position;
    private Sha1Implementation _hasher;
    public void AppendString(string str);
    public void AppendBytes(Byte[] bytes);
    public Byte[] GetHash();
    public Guid GetId();
}
internal static class Microsoft.TestPlatform.AdapterUtilities.TPDebug : object {
    [ConditionalAttribute("DEBUG")]
public static void Assert(bool b);
    [NullableContextAttribute("1")]
[ConditionalAttribute("DEBUG")]
public static void Assert(bool b, string message);
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public bool ReturnValue { get; }
    public String[] Members { get; }
    public MemberNotNullWhenAttribute(bool returnValue, string member);
    public MemberNotNullWhenAttribute(bool returnValue, String[] members);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("10368")]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
