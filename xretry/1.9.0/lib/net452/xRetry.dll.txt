public class xRetry.BlockingMessageBus : object {
    private IMessageBus underlyingMessageBus;
    private MessageTransformer messageTransformer;
    private ConcurrentQueue`1<IMessageSinkMessage> messageQueue;
    public BlockingMessageBus(IMessageBus underlyingMessageBus, MessageTransformer messageTransformer);
    public sealed virtual bool QueueMessage(IMessageSinkMessage rawMessage);
    public void Clear();
    public void Flush();
    public sealed virtual void Dispose();
}
public class xRetry.Exceptions.SkipTestException : Exception {
    public string Reason;
    public SkipTestException(string reason);
    protected SkipTestException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[ExtensionAttribute]
public static class xRetry.Extensions.EnumerableExtensions : object {
    [ExtensionAttribute]
public static bool ContainsAny(IEnumerable`1<T> values, T[] searchFor, IEqualityComparer`1<T> comparer);
}
public interface xRetry.IRetryableTestCase {
    public int MaxRetries { get; }
    public int DelayBetweenRetriesMs { get; }
    public String[] SkipOnExceptionFullNames { get; }
    public abstract virtual int get_MaxRetries();
    public abstract virtual int get_DelayBetweenRetriesMs();
    public abstract virtual String[] get_SkipOnExceptionFullNames();
}
public class xRetry.MessageTransformer : object {
    private String[] skipOnExceptionFullNames;
    [CompilerGeneratedAttribute]
private bool <Skipped>k__BackingField;
    public bool Skipped { get; private set; }
    public MessageTransformer(String[] skipOnExceptionFullNames);
    [CompilerGeneratedAttribute]
public bool get_Skipped();
    [CompilerGeneratedAttribute]
private void set_Skipped(bool value);
    public IMessageSinkMessage Transform(IMessageSinkMessage message);
}
[XunitTestCaseDiscovererAttribute("xRetry.RetryFactDiscoverer", "xRetry")]
[AttributeUsageAttribute("64")]
public class xRetry.RetryFactAttribute : FactAttribute {
    public static int DEFAULT_MAX_RETRIES;
    public static int DEFAULT_DELAY_BETWEEN_RETRIES_MS;
    public int MaxRetries;
    public int DelayBetweenRetriesMs;
    public Type[] SkipOnExceptions;
    public RetryFactAttribute(Type[] skipOnExceptions);
    public RetryFactAttribute(int maxRetries, int delayBetweenRetriesMs, Type[] skipOnExceptions);
}
public class xRetry.RetryFactDiscoverer : object {
    private IMessageSink messageSink;
    public RetryFactDiscoverer(IMessageSink messageSink);
    public sealed virtual IEnumerable`1<IXunitTestCase> Discover(ITestFrameworkDiscoveryOptions discoveryOptions, ITestMethod testMethod, IAttributeInfo factAttribute);
}
public class xRetry.RetryTestCase : XunitTestCase {
    [CompilerGeneratedAttribute]
private int <MaxRetries>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DelayBetweenRetriesMs>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <SkipOnExceptionFullNames>k__BackingField;
    public int MaxRetries { get; private set; }
    public int DelayBetweenRetriesMs { get; private set; }
    public String[] SkipOnExceptionFullNames { get; private set; }
    public RetryTestCase(IMessageSink diagnosticMessageSink, TestMethodDisplay defaultMethodDisplay, TestMethodDisplayOptions defaultMethodDisplayOptions, ITestMethod testMethod, int maxRetries, int delayBetweenRetriesMs, Type[] skipOnExceptions, Object[] testMethodArguments);
    [CompilerGeneratedAttribute]
public sealed virtual int get_MaxRetries();
    [CompilerGeneratedAttribute]
private void set_MaxRetries(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_DelayBetweenRetriesMs();
    [CompilerGeneratedAttribute]
private void set_DelayBetweenRetriesMs(int value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_SkipOnExceptionFullNames();
    [CompilerGeneratedAttribute]
private void set_SkipOnExceptionFullNames(String[] value);
    public virtual Task`1<RunSummary> RunAsync(IMessageSink diagnosticMessageSink, IMessageBus messageBus, Object[] constructorArguments, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource);
    public virtual void Serialize(IXunitSerializationInfo data);
    public virtual void Deserialize(IXunitSerializationInfo data);
    public static String[] GetSkipOnExceptionFullNames(Type[] customSkipOnExceptions);
}
public static class xRetry.RetryTestCaseRunner : object {
    [AsyncStateMachineAttribute("xRetry.RetryTestCaseRunner/<RunAsync>d__0")]
public static Task`1<RunSummary> RunAsync(IRetryableTestCase testCase, IMessageSink diagnosticMessageSink, IMessageBus messageBus, CancellationTokenSource cancellationTokenSource, Func`2<IMessageBus, Task`1<RunSummary>> fnRunSingle);
}
[XunitTestCaseDiscovererAttribute("xRetry.RetryTheoryDiscoverer", "xRetry")]
[AttributeUsageAttribute("64")]
public class xRetry.RetryTheoryAttribute : RetryFactAttribute {
    public RetryTheoryAttribute(Type[] skipOnExceptions);
    public RetryTheoryAttribute(int maxRetries, int delayBetweenRetriesMs, Type[] skipOnExceptions);
}
public class xRetry.RetryTheoryDiscoverer : TheoryDiscoverer {
    public RetryTheoryDiscoverer(IMessageSink diagnosticMessageSink);
    protected virtual IEnumerable`1<IXunitTestCase> CreateTestCasesForDataRow(ITestFrameworkDiscoveryOptions discoveryOptions, ITestMethod testMethod, IAttributeInfo theoryAttribute, Object[] dataRow);
    protected virtual IEnumerable`1<IXunitTestCase> CreateTestCasesForTheory(ITestFrameworkDiscoveryOptions discoveryOptions, ITestMethod testMethod, IAttributeInfo theoryAttribute);
}
public class xRetry.RetryTheoryDiscoveryAtRuntimeCase : XunitTestCase {
    [CompilerGeneratedAttribute]
private int <MaxRetries>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DelayBetweenRetriesMs>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <SkipOnExceptionFullNames>k__BackingField;
    public int MaxRetries { get; private set; }
    public int DelayBetweenRetriesMs { get; private set; }
    public String[] SkipOnExceptionFullNames { get; private set; }
    public RetryTheoryDiscoveryAtRuntimeCase(IMessageSink diagnosticMessageSink, TestMethodDisplay defaultMethodDisplay, TestMethodDisplayOptions defaultMethodDisplayOptions, ITestMethod testMethod, int maxRetries, int delayBetweenRetriesMs, Type[] skipOnExceptions);
    [CompilerGeneratedAttribute]
public sealed virtual int get_MaxRetries();
    [CompilerGeneratedAttribute]
private void set_MaxRetries(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_DelayBetweenRetriesMs();
    [CompilerGeneratedAttribute]
private void set_DelayBetweenRetriesMs(int value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_SkipOnExceptionFullNames();
    [CompilerGeneratedAttribute]
private void set_SkipOnExceptionFullNames(String[] value);
    public virtual Task`1<RunSummary> RunAsync(IMessageSink diagnosticMessageSink, IMessageBus messageBus, Object[] constructorArguments, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource);
    public virtual void Serialize(IXunitSerializationInfo data);
    public virtual void Deserialize(IXunitSerializationInfo data);
}
public static class xRetry.Skip : object {
    public static void Always(string reason);
}
