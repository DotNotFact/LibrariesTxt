public class System.Security.Cryptography.AesCng : Aes {
    public Byte[] Key { get; public set; }
    public int KeySize { get; public set; }
    public AesCng(string keyName);
    public AesCng(string keyName, CngProvider provider);
    public AesCng(string keyName, CngProvider provider, CngKeyOpenOptions openOptions);
    public virtual Byte[] get_Key();
    public virtual void set_Key(Byte[] value);
    public virtual int get_KeySize();
    public virtual void set_KeySize(int value);
    public virtual ICryptoTransform CreateDecryptor();
    public virtual ICryptoTransform CreateDecryptor(Byte[] rgbKey, Byte[] rgbIV);
    public virtual ICryptoTransform CreateEncryptor();
    public virtual ICryptoTransform CreateEncryptor(Byte[] rgbKey, Byte[] rgbIV);
    protected virtual void Dispose(bool disposing);
    public virtual void GenerateIV();
    public virtual void GenerateKey();
}
public class System.Security.Cryptography.DSACng : DSA {
    public CngKey Key { get; }
    public string KeyExchangeAlgorithm { get; }
    public KeySizes[] LegalKeySizes { get; }
    public string SignatureAlgorithm { get; }
    public DSACng(int keySize);
    public DSACng(CngKey key);
    public CngKey get_Key();
    public virtual string get_KeyExchangeAlgorithm();
    public virtual KeySizes[] get_LegalKeySizes();
    public virtual Byte[] CreateSignature(Byte[] rgbHash);
    public virtual string get_SignatureAlgorithm();
    protected virtual void Dispose(bool disposing);
    public virtual DSAParameters ExportParameters(bool includePrivateParameters);
    public virtual void ImportParameters(DSAParameters parameters);
    public virtual bool VerifySignature(Byte[] rgbHash, Byte[] rgbSignature);
}
public class System.Security.Cryptography.TripleDESCng : TripleDES {
    public Byte[] Key { get; public set; }
    public int KeySize { get; public set; }
    public TripleDESCng(string keyName);
    public TripleDESCng(string keyName, CngProvider provider);
    public TripleDESCng(string keyName, CngProvider provider, CngKeyOpenOptions openOptions);
    public virtual Byte[] get_Key();
    public virtual void set_Key(Byte[] value);
    public virtual int get_KeySize();
    public virtual void set_KeySize(int value);
    public virtual ICryptoTransform CreateDecryptor();
    public virtual ICryptoTransform CreateDecryptor(Byte[] rgbKey, Byte[] rgbIV);
    public virtual ICryptoTransform CreateEncryptor();
    public virtual ICryptoTransform CreateEncryptor(Byte[] rgbKey, Byte[] rgbIV);
    protected virtual void Dispose(bool disposing);
    public virtual void GenerateIV();
    public virtual void GenerateKey();
}
