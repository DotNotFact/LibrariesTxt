public class Microsoft.Graph.AsyncMonitor`1 : object {
    private AsyncOperationStatus asyncOperationStatus;
    private IBaseClient client;
    internal string monitorUrl;
    public AsyncMonitor`1(IBaseClient client, string monitorUrl);
    [AsyncStateMachineAttribute("Microsoft.Graph.AsyncMonitor`1/<PollForOperationCompletionAsync>d__4")]
public sealed virtual Task`1<T> PollForOperationCompletionAsync(IProgress`1<AsyncOperationStatus> progress, CancellationToken cancellationToken);
}
[JsonConverterAttribute("Microsoft.Graph.DerivedTypeConverter`1<Microsoft.Graph.AsyncOperationStatus>")]
public class Microsoft.Graph.AsyncOperationStatus : object {
    [CompilerGeneratedAttribute]
private string <Operation>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <PercentageComplete>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <AdditionalData>k__BackingField;
    [JsonPropertyNameAttribute("operation")]
public string Operation { get; public set; }
    [JsonPropertyNameAttribute("percentageComplete")]
public Nullable`1<double> PercentageComplete { get; public set; }
    [JsonPropertyNameAttribute("status")]
public string Status { get; public set; }
    [JsonExtensionDataAttribute]
public IDictionary`2<string, object> AdditionalData { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Operation();
    [CompilerGeneratedAttribute]
public void set_Operation(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_PercentageComplete();
    [CompilerGeneratedAttribute]
public void set_PercentageComplete(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public string get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_AdditionalData();
    [CompilerGeneratedAttribute]
public void set_AdditionalData(IDictionary`2<string, object> value);
}
internal static class Microsoft.Graph.AuthConstants : object {
    internal static string DefaultScopeUrl;
}
public class Microsoft.Graph.AuthenticateRequestAsyncDelegate : MulticastDelegate {
    public AuthenticateRequestAsyncDelegate(object object, IntPtr method);
    public virtual Task Invoke(HttpRequestMessage request);
    public virtual IAsyncResult BeginInvoke(HttpRequestMessage request, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public class Microsoft.Graph.AuthenticationException : Exception {
    [CompilerGeneratedAttribute]
private Error <Error>k__BackingField;
    public Error Error { get; private set; }
    public AuthenticationException(Error error, Exception innerException);
    [CompilerGeneratedAttribute]
public Error get_Error();
    [CompilerGeneratedAttribute]
private void set_Error(Error value);
}
public class Microsoft.Graph.AuthenticationHandler : DelegatingHandler {
    [CompilerGeneratedAttribute]
private int <MaxRetry>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthenticationHandlerOption <AuthOption>k__BackingField;
    [CompilerGeneratedAttribute]
private IAuthenticationProvider <AuthenticationProvider>k__BackingField;
    private Regex ClaimsRegex;
    private int MaxRetry { get; private set; }
    internal AuthenticationHandlerOption AuthOption { get; internal set; }
    public IAuthenticationProvider AuthenticationProvider { get; public set; }
    public AuthenticationHandler(IAuthenticationProvider authenticationProvider, AuthenticationHandlerOption authOption);
    public AuthenticationHandler(IAuthenticationProvider authenticationProvider, HttpMessageHandler innerHandler, AuthenticationHandlerOption authOption);
    [CompilerGeneratedAttribute]
private int get_MaxRetry();
    [CompilerGeneratedAttribute]
private void set_MaxRetry(int value);
    [CompilerGeneratedAttribute]
internal AuthenticationHandlerOption get_AuthOption();
    [CompilerGeneratedAttribute]
internal void set_AuthOption(AuthenticationHandlerOption value);
    [CompilerGeneratedAttribute]
public IAuthenticationProvider get_AuthenticationProvider();
    [CompilerGeneratedAttribute]
public void set_AuthenticationProvider(IAuthenticationProvider value);
    private bool IsUnauthorized(HttpResponseMessage httpResponseMessage);
    [AsyncStateMachineAttribute("Microsoft.Graph.AuthenticationHandler/<SendRetryAsync>d__15")]
private Task`1<HttpResponseMessage> SendRetryAsync(HttpResponseMessage httpResponseMessage, IAuthenticationProvider authProvider, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Graph.AuthenticationHandler/<SendAsync>d__16")]
protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage httpRequestMessage, CancellationToken cancellationToken);
    private void AddClaimsToRequestContext(HttpRequestMessage newRequest, string wwwAuthenticateHeader);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<HttpResponseMessage> <>n__0(HttpRequestMessage request, CancellationToken cancellationToken);
}
public class Microsoft.Graph.AuthenticationHandlerOption : object {
    [CompilerGeneratedAttribute]
private IAuthenticationProvider <AuthenticationProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IAuthenticationProviderOption <AuthenticationProviderOption>k__BackingField;
    internal IAuthenticationProvider AuthenticationProvider { get; internal set; }
    public IAuthenticationProviderOption AuthenticationProviderOption { get; public set; }
    [CompilerGeneratedAttribute]
internal IAuthenticationProvider get_AuthenticationProvider();
    [CompilerGeneratedAttribute]
internal void set_AuthenticationProvider(IAuthenticationProvider value);
    [CompilerGeneratedAttribute]
public IAuthenticationProviderOption get_AuthenticationProviderOption();
    [CompilerGeneratedAttribute]
public void set_AuthenticationProviderOption(IAuthenticationProviderOption value);
}
public abstract class Microsoft.Graph.BaseActionMethodRequestBuilder`1 : BaseRequestBuilder {
    private Dictionary`2<string, object> _parameters;
    public BaseActionMethodRequestBuilder`1(string requestUrl, IBaseClient client);
    protected abstract virtual T CreateRequest(string functionUrl, IEnumerable`1<Option> options);
    public T Request(IEnumerable`1<Option> options);
    protected void SetParameter(string name, U value, bool nullable);
    protected bool HasParameter(string name);
    protected U GetParameter(string name);
}
public class Microsoft.Graph.BaseClient : object {
    private string baseUrl;
    [CompilerGeneratedAttribute]
private IAuthenticationProvider <AuthenticationProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IHttpProvider <HttpProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<IAuthenticationProvider> <PerRequestAuthProvider>k__BackingField;
    public IAuthenticationProvider AuthenticationProvider { get; public set; }
    public string BaseUrl { get; public set; }
    public IHttpProvider HttpProvider { get; private set; }
    public Func`1<IAuthenticationProvider> PerRequestAuthProvider { get; public set; }
    public IBatchRequestBuilder Batch { get; }
    public BaseClient(string baseUrl, IAuthenticationProvider authenticationProvider, IHttpProvider httpProvider);
    public BaseClient(string baseUrl, TokenCredential tokenCredential, IEnumerable`1<string> scopes, IHttpProvider httpProvider);
    public BaseClient(string baseUrl, HttpClient httpClient);
    [CompilerGeneratedAttribute]
public sealed virtual IAuthenticationProvider get_AuthenticationProvider();
    [CompilerGeneratedAttribute]
public void set_AuthenticationProvider(IAuthenticationProvider value);
    public sealed virtual string get_BaseUrl();
    public void set_BaseUrl(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IHttpProvider get_HttpProvider();
    [CompilerGeneratedAttribute]
private void set_HttpProvider(IHttpProvider value);
    [CompilerGeneratedAttribute]
public sealed virtual Func`1<IAuthenticationProvider> get_PerRequestAuthProvider();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PerRequestAuthProvider(Func`1<IAuthenticationProvider> value);
    public sealed virtual IBatchRequestBuilder get_Batch();
}
public abstract class Microsoft.Graph.BaseFunctionMethodRequestBuilder`1 : BaseRequestBuilder {
    private List`1<string> _parameters;
    public BaseFunctionMethodRequestBuilder`1(string requestUrl, IBaseClient client);
    protected abstract virtual T CreateRequest(string functionUrl, IEnumerable`1<Option> options);
    public T Request(IEnumerable`1<Option> options);
    protected void SetParameter(string name, object value, bool nullable);
    private string EscapeStringValue(string value);
    protected void SetFunctionParameters();
}
public class Microsoft.Graph.BaseRequest : object {
    private IResponseHandler responseHandler;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<HeaderOption> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private IBaseClient <Client>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpMethods <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<QueryOption> <QueryOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RequestUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, IMiddlewareOption> <MiddlewareOptions>k__BackingField;
    public IResponseHandler ResponseHandler { get; public set; }
    public string ContentType { get; public set; }
    public IList`1<HeaderOption> Headers { get; private set; }
    public IBaseClient Client { get; private set; }
    public HttpMethods Method { get; public set; }
    public IList`1<QueryOption> QueryOptions { get; public set; }
    public string RequestUrl { get; internal set; }
    public IDictionary`2<string, IMiddlewareOption> MiddlewareOptions { get; private set; }
    public BaseRequest(string requestUrl, IBaseClient client, IEnumerable`1<Option> options);
    public sealed virtual IResponseHandler get_ResponseHandler();
    public sealed virtual void set_ResponseHandler(IResponseHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ContentType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ContentType(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<HeaderOption> get_Headers();
    [CompilerGeneratedAttribute]
private void set_Headers(IList`1<HeaderOption> value);
    [CompilerGeneratedAttribute]
public sealed virtual IBaseClient get_Client();
    [CompilerGeneratedAttribute]
private void set_Client(IBaseClient value);
    [CompilerGeneratedAttribute]
public sealed virtual HttpMethods get_Method();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Method(HttpMethods value);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<QueryOption> get_QueryOptions();
    [CompilerGeneratedAttribute]
public void set_QueryOptions(IList`1<QueryOption> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_RequestUrl();
    [CompilerGeneratedAttribute]
internal void set_RequestUrl(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, IMiddlewareOption> get_MiddlewareOptions();
    [CompilerGeneratedAttribute]
private void set_MiddlewareOptions(IDictionary`2<string, IMiddlewareOption> value);
    [AsyncStateMachineAttribute("Microsoft.Graph.BaseRequest/<SendAsync>d__33")]
public Task SendAsync(object serializableObject, CancellationToken cancellationToken, HttpCompletionOption completionOption);
    [AsyncStateMachineAttribute("Microsoft.Graph.BaseRequest/<SendAsync>d__34`1")]
public Task`1<T> SendAsync(object serializableObject, CancellationToken cancellationToken, HttpCompletionOption completionOption);
    [AsyncStateMachineAttribute("Microsoft.Graph.BaseRequest/<SendMultiPartAsync>d__35`1")]
public Task`1<T> SendMultiPartAsync(MultipartContent multipartContent, CancellationToken cancellationToken, HttpCompletionOption completionOption);
    [AsyncStateMachineAttribute("Microsoft.Graph.BaseRequest/<SendStreamRequestAsync>d__36")]
public Task`1<Stream> SendStreamRequestAsync(object serializableObject, CancellationToken cancellationToken, HttpCompletionOption completionOption);
    [AsyncStateMachineAttribute("Microsoft.Graph.BaseRequest/<SendMultiPartRequestAsync>d__37")]
public Task`1<HttpResponseMessage> SendMultiPartRequestAsync(MultipartContent multipartContent, CancellationToken cancellationToken, HttpCompletionOption completionOption);
    [AsyncStateMachineAttribute("Microsoft.Graph.BaseRequest/<SendAsyncWithGraphResponse>d__38")]
public Task`1<GraphResponse> SendAsyncWithGraphResponse(object serializableObject, CancellationToken cancellationToken, HttpCompletionOption completionOption);
    [AsyncStateMachineAttribute("Microsoft.Graph.BaseRequest/<SendAsyncWithGraphResponse>d__39`1")]
public Task`1<GraphResponse`1<T>> SendAsyncWithGraphResponse(object serializableObject, CancellationToken cancellationToken, HttpCompletionOption completionOption);
    [AsyncStateMachineAttribute("Microsoft.Graph.BaseRequest/<SendRequestAsync>d__40")]
public Task`1<HttpResponseMessage> SendRequestAsync(object serializableObject, CancellationToken cancellationToken, HttpCompletionOption completionOption);
    public HttpRequestMessage GetHttpRequestMessage(CancellationToken cancellationToken);
    public sealed virtual HttpRequestMessage GetHttpRequestMessage();
    private void AddHeadersToRequest(HttpRequestMessage request);
    private void AddRequestContextToRequest(HttpRequestMessage httpRequestMessage, CancellationToken cancellationToken);
    public void AppendSegmentToRequestUrl(string urlSegment);
    internal string BuildQueryString();
    [AsyncStateMachineAttribute("Microsoft.Graph.BaseRequest/<AuthenticateRequestAsync>d__47")]
private Task AuthenticateRequestAsync(HttpRequestMessage request);
    private string InitializeUrl(string requestUrl);
    private string GetHeaderValue(HttpRequestMessage requestMessage, string headerName);
    private bool ShouldAuthenticateRequest();
}
public class Microsoft.Graph.BaseRequestBuilder : object {
    [CompilerGeneratedAttribute]
private IBaseClient <Client>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RequestUrl>k__BackingField;
    public IBaseClient Client { get; private set; }
    public string RequestUrl { get; internal set; }
    public BaseRequestBuilder(string requestUrl, IBaseClient client);
    [CompilerGeneratedAttribute]
public sealed virtual IBaseClient get_Client();
    [CompilerGeneratedAttribute]
private void set_Client(IBaseClient value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_RequestUrl();
    [CompilerGeneratedAttribute]
internal void set_RequestUrl(string value);
    public sealed virtual string AppendSegmentToRequestUrl(string urlSegment);
}
[ExtensionAttribute]
public static class Microsoft.Graph.BaseRequestExtensions : object {
    [ExtensionAttribute]
internal static T WithDefaultAuthProvider(T baseRequest);
    [ExtensionAttribute]
public static T WithPerRequestAuthProvider(T baseRequest);
    [ExtensionAttribute]
public static T WithShouldRetry(T baseRequest, Func`4<int, int, HttpResponseMessage, bool> shouldRetry);
    [ExtensionAttribute]
public static T WithMaxRetry(T baseRequest, int maxRetry);
    [ExtensionAttribute]
public static T WithMaxRetry(T baseRequest, TimeSpan retriesTimeLimit);
    [ExtensionAttribute]
public static T WithMaxRedirects(T baseRequest, int maxRedirects);
    [ExtensionAttribute]
public static T WithResponseHandler(T baseRequest, IResponseHandler responseHandler);
    [ExtensionAttribute]
public static T WithScopes(T baseRequest, String[] scopes);
}
public class Microsoft.Graph.BatchRequestContent : HttpContent {
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, BatchRequestStep> <BatchRequestSteps>k__BackingField;
    [CompilerGeneratedAttribute]
private ISerializer <Serializer>k__BackingField;
    public IReadOnlyDictionary`2<string, BatchRequestStep> BatchRequestSteps { get; private set; }
    public ISerializer Serializer { get; private set; }
    public BatchRequestContent(BatchRequestStep[] batchRequestSteps, ISerializer serializer);
    public BatchRequestContent(BatchRequestStep[] batchRequestSteps);
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, BatchRequestStep> get_BatchRequestSteps();
    [CompilerGeneratedAttribute]
private void set_BatchRequestSteps(IReadOnlyDictionary`2<string, BatchRequestStep> value);
    [CompilerGeneratedAttribute]
public ISerializer get_Serializer();
    [CompilerGeneratedAttribute]
private void set_Serializer(ISerializer value);
    public bool AddBatchRequestStep(BatchRequestStep batchRequestStep);
    public string AddBatchRequestStep(HttpRequestMessage httpRequestMessage);
    public string AddBatchRequestStep(IBaseRequest request);
    public bool RemoveBatchRequestStepWithId(string requestId);
    [AsyncStateMachineAttribute("Microsoft.Graph.BatchRequestContent/<GetBatchRequestContentAsync>d__15")]
internal Task`1<Stream> GetBatchRequestContentAsync();
    private bool ContainsCorrespondingRequestId(IList`1<string> dependsOn);
    [AsyncStateMachineAttribute("Microsoft.Graph.BatchRequestContent/<WriteBatchRequestStepAsync>d__17")]
private Task WriteBatchRequestStepAsync(BatchRequestStep batchRequestStep, Utf8JsonWriter writer);
    [AsyncStateMachineAttribute("Microsoft.Graph.BatchRequestContent/<GetRequestContentAsync>d__18")]
private Task`1<JsonDocument> GetRequestContentAsync(HttpRequestMessage request);
    private string GetHeaderValuesAsString(IEnumerable`1<string> headerValues);
    private string GetRelativeUrl(Uri requestUri);
    [AsyncStateMachineAttribute("Microsoft.Graph.BatchRequestContent/<SerializeToStreamAsync>d__21")]
protected virtual Task SerializeToStreamAsync(Stream stream, TransportContext context);
    protected virtual bool TryComputeLength(Int64& length);
    [CompilerGeneratedAttribute]
private bool <ContainsCorrespondingRequestId>b__16_0(string requestId);
}
public class Microsoft.Graph.BatchRequestStep : object {
    [CompilerGeneratedAttribute]
private string <RequestId>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpRequestMessage <Request>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <DependsOn>k__BackingField;
    public string RequestId { get; private set; }
    public HttpRequestMessage Request { get; private set; }
    public List`1<string> DependsOn { get; public set; }
    public BatchRequestStep(string requestId, HttpRequestMessage httpRequestMessage, List`1<string> dependsOn);
    [CompilerGeneratedAttribute]
public string get_RequestId();
    [CompilerGeneratedAttribute]
private void set_RequestId(string value);
    [CompilerGeneratedAttribute]
public HttpRequestMessage get_Request();
    [CompilerGeneratedAttribute]
private void set_Request(HttpRequestMessage value);
    [CompilerGeneratedAttribute]
public List`1<string> get_DependsOn();
    [CompilerGeneratedAttribute]
public void set_DependsOn(List`1<string> value);
}
public class Microsoft.Graph.BatchResponseContent : object {
    private JsonDocument jBatchResponseObject;
    private HttpResponseMessage batchResponseMessage;
    [CompilerGeneratedAttribute]
private ISerializer <Serializer>k__BackingField;
    [CompilerGeneratedAttribute]
private IResponseHandler <ResponseHandler>k__BackingField;
    public ISerializer Serializer { get; private set; }
    public IResponseHandler ResponseHandler { get; private set; }
    public BatchResponseContent(HttpResponseMessage httpResponseMessage, ISerializer serializer, IResponseHandler responseHandler);
    [CompilerGeneratedAttribute]
public ISerializer get_Serializer();
    [CompilerGeneratedAttribute]
private void set_Serializer(ISerializer value);
    [CompilerGeneratedAttribute]
public IResponseHandler get_ResponseHandler();
    [CompilerGeneratedAttribute]
private void set_ResponseHandler(IResponseHandler value);
    [AsyncStateMachineAttribute("Microsoft.Graph.BatchResponseContent/<GetResponsesAsync>d__11")]
public Task`1<Dictionary`2<string, HttpResponseMessage>> GetResponsesAsync();
    [AsyncStateMachineAttribute("Microsoft.Graph.BatchResponseContent/<GetResponseByIdAsync>d__12")]
public Task`1<HttpResponseMessage> GetResponseByIdAsync(string requestId);
    [AsyncStateMachineAttribute("Microsoft.Graph.BatchResponseContent/<GetResponseByIdAsync>d__13`1")]
public Task`1<T> GetResponseByIdAsync(string requestId);
    [AsyncStateMachineAttribute("Microsoft.Graph.BatchResponseContent/<GetResponseStreamByIdAsync>d__14")]
public Task`1<Stream> GetResponseStreamByIdAsync(string requestId);
    [AsyncStateMachineAttribute("Microsoft.Graph.BatchResponseContent/<ValidateSuccessfulResponse>d__15")]
private Task ValidateSuccessfulResponse(HttpResponseMessage httpResponseMessage);
    [AsyncStateMachineAttribute("Microsoft.Graph.BatchResponseContent/<GetNextLinkAsync>d__16")]
public Task`1<string> GetNextLinkAsync();
    private HttpResponseMessage GetResponseMessageFromJObject(JsonElement jResponseItem);
    [AsyncStateMachineAttribute("Microsoft.Graph.BatchResponseContent/<GetBatchResponseContentAsync>d__18")]
private Task`1<JsonDocument> GetBatchResponseContentAsync();
}
internal class Microsoft.Graph.CaeAuthenticationProviderOption : object {
    [CompilerGeneratedAttribute]
private String[] <Scopes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Claims>k__BackingField;
    public String[] Scopes { get; public set; }
    public string Claims { get; public set; }
    public CaeAuthenticationProviderOption(IAuthenticationProviderOption authenticationProviderOption);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_Scopes();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Scopes(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Claims();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Claims(string value);
}
public class Microsoft.Graph.ChaosHandler : DelegatingHandler {
    private DiagnosticSource _logger;
    private Random _random;
    private ChaosHandlerOption _globalChaosHandlerOptions;
    private List`1<HttpResponseMessage> _KnownGraphFailures;
    public ChaosHandler(ChaosHandlerOption chaosHandlerOptions);
    [AsyncStateMachineAttribute("Microsoft.Graph.ChaosHandler/<SendAsync>d__5")]
protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    private ChaosHandlerOption GetPerRequestOptions(HttpRequestMessage request);
    private HttpResponseMessage CreateChaosResponse(List`1<HttpResponseMessage> knownFailures);
    private void LoadKnownGraphFailures(List`1<HttpResponseMessage> knownFailures);
    public static HttpResponseMessage Create429TooManyRequestsResponse(TimeSpan retry);
    public static HttpResponseMessage Create503Response(TimeSpan retry);
    public static HttpResponseMessage Create502BadGatewayResponse();
    public static HttpResponseMessage Create500InternalServerErrorResponse();
    public static HttpResponseMessage Create504GatewayTimeoutResponse(TimeSpan retry);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<HttpResponseMessage> <>n__0(HttpRequestMessage request, CancellationToken cancellationToken);
}
public class Microsoft.Graph.ChaosHandlerOption : object {
    [CompilerGeneratedAttribute]
private int <ChaosPercentLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<HttpResponseMessage> <KnownChaos>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<HttpRequestMessage, HttpResponseMessage> <PlannedChaosFactory>k__BackingField;
    public int ChaosPercentLevel { get; public set; }
    public List`1<HttpResponseMessage> KnownChaos { get; public set; }
    public Func`2<HttpRequestMessage, HttpResponseMessage> PlannedChaosFactory { get; public set; }
    [CompilerGeneratedAttribute]
public int get_ChaosPercentLevel();
    [CompilerGeneratedAttribute]
public void set_ChaosPercentLevel(int value);
    [CompilerGeneratedAttribute]
public List`1<HttpResponseMessage> get_KnownChaos();
    [CompilerGeneratedAttribute]
public void set_KnownChaos(List`1<HttpResponseMessage> value);
    [CompilerGeneratedAttribute]
public Func`2<HttpRequestMessage, HttpResponseMessage> get_PlannedChaosFactory();
    [CompilerGeneratedAttribute]
public void set_PlannedChaosFactory(Func`2<HttpRequestMessage, HttpResponseMessage> value);
}
public class Microsoft.Graph.ClientException : ServiceException {
    public ClientException(Error error, Exception innerException);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Graph.CollectionPage`1 : object {
    [CompilerGeneratedAttribute]
private IList`1<T> <CurrentPage>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <AdditionalData>k__BackingField;
    public IList`1<T> CurrentPage { get; private set; }
    public T Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public IDictionary`2<string, object> AdditionalData { get; public set; }
    public CollectionPage`1(IList`1<T> currentPage);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<T> get_CurrentPage();
    [CompilerGeneratedAttribute]
private void set_CurrentPage(IList`1<T> value);
    public sealed virtual int IndexOf(T item);
    public sealed virtual void Insert(int index, T item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual T get_Item(int index);
    public sealed virtual void set_Item(int index, T value);
    public sealed virtual void Add(T item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(T item);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_AdditionalData();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AdditionalData(IDictionary`2<string, object> value);
}
public class Microsoft.Graph.CompressionHandler : DelegatingHandler {
    public CompressionHandler(HttpMessageHandler innerHandler);
    [AsyncStateMachineAttribute("Microsoft.Graph.CompressionHandler/<SendAsync>d__2")]
protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage httpRequest, CancellationToken cancellationToken);
    private bool ShouldDecompressContent(HttpResponseMessage httpResponse);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<HttpResponseMessage> <>n__0(HttpRequestMessage request, CancellationToken cancellationToken);
}
internal class Microsoft.Graph.Core.Models.UploadSession : object {
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <ExpirationDateTime>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <NextExpectedRanges>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UploadUrl>k__BackingField;
    public Nullable`1<DateTimeOffset> ExpirationDateTime { get; public set; }
    public IEnumerable`1<string> NextExpectedRanges { get; public set; }
    public string UploadUrl { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DateTimeOffset> get_ExpirationDateTime();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ExpirationDateTime(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<string> get_NextExpectedRanges();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NextExpectedRanges(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_UploadUrl();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UploadUrl(string value);
}
public class Microsoft.Graph.Core.Requests.BatchRequest : BaseRequest {
    public BatchRequest(string requestUrl, IBaseClient client, IEnumerable`1<Option> options);
    public sealed virtual Task`1<BatchResponseContent> PostAsync(BatchRequestContent batchRequestContent);
    [AsyncStateMachineAttribute("Microsoft.Graph.Core.Requests.BatchRequest/<PostAsync>d__2")]
public sealed virtual Task`1<BatchResponseContent> PostAsync(BatchRequestContent batchRequestContent, CancellationToken cancellationToken);
}
public class Microsoft.Graph.Core.Requests.BatchRequestBuilder : BaseRequestBuilder {
    public BatchRequestBuilder(string requestUrl, IBaseClient client);
    public sealed virtual IBatchRequest Request();
    public sealed virtual IBatchRequest Request(IEnumerable`1<Option> options);
}
public interface Microsoft.Graph.Core.Requests.IBatchRequest {
    public abstract virtual Task`1<BatchResponseContent> PostAsync(BatchRequestContent batchRequestContent);
    public abstract virtual Task`1<BatchResponseContent> PostAsync(BatchRequestContent batchRequestContent, CancellationToken cancellationToken);
}
public interface Microsoft.Graph.Core.Requests.IBatchRequestBuilder {
    public abstract virtual IBatchRequest Request();
    public abstract virtual IBatchRequest Request(IEnumerable`1<Option> options);
}
public static class Microsoft.Graph.CoreConstants : object {
    public static int PollingIntervalInMs;
}
[JsonConverterAttribute("Microsoft.Graph.DateConverter")]
public class Microsoft.Graph.Date : object {
    [CompilerGeneratedAttribute]
private DateTime <DateTime>k__BackingField;
    internal DateTime DateTime { get; internal set; }
    public int Year { get; }
    public int Month { get; }
    public int Day { get; }
    internal Date(DateTime dateTime);
    public Date(int year, int month, int day);
    [CompilerGeneratedAttribute]
internal DateTime get_DateTime();
    [CompilerGeneratedAttribute]
internal void set_DateTime(DateTime value);
    public int get_Year();
    public int get_Month();
    public int get_Day();
    public virtual string ToString();
}
public class Microsoft.Graph.DateConverter : JsonConverter`1<Date> {
    public virtual bool CanConvert(Type objectType);
    public virtual Date Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, Date date, JsonSerializerOptions options);
}
public class Microsoft.Graph.DateTimeOffsetConverter : JsonConverter`1<DateTimeOffset> {
    public virtual DateTimeOffset Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, DateTimeOffset dateTimeOffsetValue, JsonSerializerOptions options);
}
public class Microsoft.Graph.DelegateAuthenticationProvider : object {
    [CompilerGeneratedAttribute]
private AuthenticateRequestAsyncDelegate <AuthenticateRequestAsyncDelegate>k__BackingField;
    public AuthenticateRequestAsyncDelegate AuthenticateRequestAsyncDelegate { get; public set; }
    public DelegateAuthenticationProvider(AuthenticateRequestAsyncDelegate authenticateRequestAsyncDelegate);
    [CompilerGeneratedAttribute]
public AuthenticateRequestAsyncDelegate get_AuthenticateRequestAsyncDelegate();
    [CompilerGeneratedAttribute]
public void set_AuthenticateRequestAsyncDelegate(AuthenticateRequestAsyncDelegate value);
    public sealed virtual Task AuthenticateRequestAsync(HttpRequestMessage request);
}
public class Microsoft.Graph.DeltaResponseHandler : object {
    private ISerializer serializer;
    [AsyncStateMachineAttribute("Microsoft.Graph.DeltaResponseHandler/<HandleResponse>d__2`1")]
public sealed virtual Task`1<T> HandleResponse(HttpResponseMessage response);
    [AsyncStateMachineAttribute("Microsoft.Graph.DeltaResponseHandler/<GetResponseString>d__3")]
private Task`1<string> GetResponseString(HttpResponseMessage hrm);
    [AsyncStateMachineAttribute("Microsoft.Graph.DeltaResponseHandler/<GetResponseBodyWithChangelist>d__4")]
private Task`1<string> GetResponseBodyWithChangelist(string deltaResponseBody);
    [AsyncStateMachineAttribute("Microsoft.Graph.DeltaResponseHandler/<DiscoverChangedProperties>d__5")]
private Task`1<JsonDocument> DiscoverChangedProperties(JsonElement responseItem);
    [AsyncStateMachineAttribute("Microsoft.Graph.DeltaResponseHandler/<GetObjectProperties>d__6")]
private Task GetObjectProperties(JsonElement changedObject, List`1<string> changes, string parentName);
    private string AddOrReplacePropertyToObject(JsonElement jsonElement, string propertyName, object newItem);
}
public class Microsoft.Graph.DerivedTypeConverter`1 : JsonConverter`1<T> {
    internal static ConcurrentDictionary`2<string, Type> TypeMappingCache;
    private static ConcurrentDictionary`2<Type, PropertyMapping<T>> PropertyMappingCache;
    private static ConcurrentDictionary`2<Type, Func`1<object>> FactoryCache;
    private static DerivedTypeConverter`1();
    public virtual bool CanConvert(Type objectType);
    public virtual T Read(Utf8JsonReader& reader, Type objectType, JsonSerializerOptions options);
    private void PopulateObject(object target, JsonElement json, JsonSerializerOptions options);
    private void AddToAdditionalDataBag(object target, PropertyInfo additionalDataInfo, JsonProperty property);
    public virtual void Write(Utf8JsonWriter writer, T value, JsonSerializerOptions options);
    private object Create(string typeString, Assembly typeAssembly);
    private object Create(Type type);
    private static Func`1<object> CompileFactory(Type type);
    private static PropertyMapping<T> ReadPropertyMapping(Type type);
}
[JsonConverterAttribute("Microsoft.Graph.DurationConverter")]
public class Microsoft.Graph.Duration : object {
    [CompilerGeneratedAttribute]
private TimeSpan <TimeSpan>k__BackingField;
    internal TimeSpan TimeSpan { get; internal set; }
    public Duration(TimeSpan timeSpan);
    public Duration(string duration);
    [CompilerGeneratedAttribute]
internal TimeSpan get_TimeSpan();
    [CompilerGeneratedAttribute]
internal void set_TimeSpan(TimeSpan value);
    public virtual string ToString();
}
public class Microsoft.Graph.DurationConverter : JsonConverter`1<Duration> {
    public virtual bool CanConvert(Type objectType);
    public virtual Duration Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, Duration value, JsonSerializerOptions options);
}
public class Microsoft.Graph.Error : object {
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ErrorDetail> <Details>k__BackingField;
    [CompilerGeneratedAttribute]
private Error <InnerError>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ThrowSite>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientRequestId>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <AdditionalData>k__BackingField;
    [JsonPropertyNameAttribute("code")]
public string Code { get; public set; }
    [JsonPropertyNameAttribute("message")]
public string Message { get; public set; }
    [JsonPropertyNameAttribute("target")]
public string Target { get; public set; }
    [JsonPropertyNameAttribute("details")]
public IEnumerable`1<ErrorDetail> Details { get; public set; }
    [JsonPropertyNameAttribute("innererror")]
public Error InnerError { get; public set; }
    public string ThrowSite { get; internal set; }
    public string ClientRequestId { get; internal set; }
    [JsonExtensionDataAttribute]
public IDictionary`2<string, object> AdditionalData { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Code();
    [CompilerGeneratedAttribute]
public void set_Code(string value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<ErrorDetail> get_Details();
    [CompilerGeneratedAttribute]
public void set_Details(IEnumerable`1<ErrorDetail> value);
    [CompilerGeneratedAttribute]
public Error get_InnerError();
    [CompilerGeneratedAttribute]
public void set_InnerError(Error value);
    [CompilerGeneratedAttribute]
public string get_ThrowSite();
    [CompilerGeneratedAttribute]
internal void set_ThrowSite(string value);
    [CompilerGeneratedAttribute]
public string get_ClientRequestId();
    [CompilerGeneratedAttribute]
internal void set_ClientRequestId(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_AdditionalData();
    [CompilerGeneratedAttribute]
public void set_AdditionalData(IDictionary`2<string, object> value);
    public virtual string ToString();
}
internal static class Microsoft.Graph.ErrorConstants : object {
}
public class Microsoft.Graph.ErrorDetail : object {
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <AdditionalData>k__BackingField;
    [JsonPropertyNameAttribute("code")]
public string Code { get; public set; }
    [JsonPropertyNameAttribute("message")]
public string Message { get; public set; }
    [JsonPropertyNameAttribute("target")]
public string Target { get; public set; }
    [JsonExtensionDataAttribute]
public IDictionary`2<string, object> AdditionalData { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Code();
    [CompilerGeneratedAttribute]
public void set_Code(string value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_AdditionalData();
    [CompilerGeneratedAttribute]
public void set_AdditionalData(IDictionary`2<string, object> value);
    public virtual string ToString();
}
public class Microsoft.Graph.ErrorResponse : object {
    [CompilerGeneratedAttribute]
private Error <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <AdditionalData>k__BackingField;
    [JsonPropertyNameAttribute("error")]
public Error Error { get; public set; }
    [JsonExtensionDataAttribute]
public IDictionary`2<string, object> AdditionalData { get; public set; }
    [CompilerGeneratedAttribute]
public Error get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(Error value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_AdditionalData();
    [CompilerGeneratedAttribute]
public void set_AdditionalData(IDictionary`2<string, object> value);
}
public static class Microsoft.Graph.ExpressionExtractHelper : object {
    public static string ExtractMembers(Expression`1<Func`2<T, object>> expression, String& error);
    private static string ProcessSimpleMemberExpression(MemberExpression memberExpression, String& error);
    private static string GetMemberWireName(MemberInfo member);
}
[FlagsAttribute]
public enum Microsoft.Graph.FeatureFlag : Enum {
    public int value__;
    public static FeatureFlag None;
    public static FeatureFlag RedirectHandler;
    public static FeatureFlag RetryHandler;
    public static FeatureFlag AuthHandler;
    public static FeatureFlag DefaultHttpProvider;
    public static FeatureFlag LoggingHandler;
    public static FeatureFlag ServiceDiscoveryHandler;
    public static FeatureFlag CompressionHandler;
    public static FeatureFlag ConnectionPoolManager;
    public static FeatureFlag LongRunningOperationHandler;
    public static FeatureFlag BatchRequestContext;
    public static FeatureFlag PageIteratorTask;
    public static FeatureFlag FileUploadTask;
}
public static class Microsoft.Graph.GraphClientFactory : object {
    private static string SdkVersionHeaderName;
    private static Version assemblyVersion;
    private static string SdkVersionHeaderValue;
    private static TimeSpan defaultTimeout;
    private static Dictionary`2<string, string> cloudList;
    public static string Global_Cloud;
    public static string USGOV_Cloud;
    public static string USGOV_DOD_Cloud;
    public static string China_Cloud;
    public static string Germany_Cloud;
    private static GraphClientFactory();
    public static HttpClient Create(IAuthenticationProvider authenticationProvider, string version, string nationalCloud, IWebProxy proxy, HttpMessageHandler finalHandler);
    public static HttpClient Create(IEnumerable`1<DelegatingHandler> handlers, string version, string nationalCloud, IWebProxy proxy, HttpMessageHandler finalHandler);
    public static IList`1<DelegatingHandler> CreateDefaultHandlers(IAuthenticationProvider authenticationProvider);
    public static HttpMessageHandler CreatePipeline(IEnumerable`1<DelegatingHandler> handlers, HttpMessageHandler finalHandler);
    internal static ValueTuple`2<HttpMessageHandler, FeatureFlag> CreatePipelineWithFeatureFlags(IEnumerable`1<DelegatingHandler> handlers, HttpMessageHandler finalHandler);
    internal static HttpMessageHandler GetNativePlatformHttpHandler(IWebProxy proxy);
    private static FeatureFlag GetHandlerFeatureFlag(DelegatingHandler delegatingHandler);
    private static Uri DetermineBaseAddress(string nationalCloud, string version);
}
public class Microsoft.Graph.GraphRequestContext : object {
    [CompilerGeneratedAttribute]
private string <ClientRequestId>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    [CompilerGeneratedAttribute]
private FeatureFlag <FeatureUsage>k__BackingField;
    [CompilerGeneratedAttribute]
private GraphUserAccount <User>k__BackingField;
    private IDictionary`2<string, IMiddlewareOption> _middlewareOptions;
    public string ClientRequestId { get; public set; }
    public IDictionary`2<string, IMiddlewareOption> MiddlewareOptions { get; public set; }
    public CancellationToken CancellationToken { get; public set; }
    public FeatureFlag FeatureUsage { get; public set; }
    public GraphUserAccount User { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ClientRequestId();
    [CompilerGeneratedAttribute]
public void set_ClientRequestId(string value);
    public IDictionary`2<string, IMiddlewareOption> get_MiddlewareOptions();
    public void set_MiddlewareOptions(IDictionary`2<string, IMiddlewareOption> value);
    [CompilerGeneratedAttribute]
public CancellationToken get_CancellationToken();
    [CompilerGeneratedAttribute]
public void set_CancellationToken(CancellationToken value);
    [CompilerGeneratedAttribute]
public FeatureFlag get_FeatureUsage();
    [CompilerGeneratedAttribute]
public void set_FeatureUsage(FeatureFlag value);
    [CompilerGeneratedAttribute]
public GraphUserAccount get_User();
    [CompilerGeneratedAttribute]
public void set_User(GraphUserAccount value);
}
public class Microsoft.Graph.GraphResponse : object {
    private HttpResponseMessage httpResponseMessage;
    public IBaseRequest BaseRequest;
    public HttpStatusCode StatusCode { get; }
    public HttpContent Content { get; }
    public HttpResponseHeaders HttpHeaders { get; }
    public GraphResponse(IBaseRequest iBaseRequest, HttpResponseMessage httpResponseMessage);
    public HttpStatusCode get_StatusCode();
    public HttpContent get_Content();
    public HttpResponseHeaders get_HttpHeaders();
    public HttpResponseMessage ToHttpResponseMessage();
    public sealed virtual void Dispose();
}
public class Microsoft.Graph.GraphResponse`1 : GraphResponse {
    public GraphResponse`1(IBaseRequest iBaseRequest, HttpResponseMessage httpResponseMessage);
    [AsyncStateMachineAttribute("Microsoft.Graph.GraphResponse`1/<GetResponseObjectAsync>d__1")]
public Task`1<T> GetResponseObjectAsync();
}
public class Microsoft.Graph.GraphUserAccount : object {
    [CompilerGeneratedAttribute]
private string <Email>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Environment>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ObjectId>k__BackingField;
    public string Email { get; public set; }
    public string Environment { get; public set; }
    public string TenantId { get; public set; }
    public string ObjectId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Email();
    [CompilerGeneratedAttribute]
public void set_Email(string value);
    [CompilerGeneratedAttribute]
public string get_Environment();
    [CompilerGeneratedAttribute]
public void set_Environment(string value);
    [CompilerGeneratedAttribute]
public string get_TenantId();
    [CompilerGeneratedAttribute]
public void set_TenantId(string value);
    [CompilerGeneratedAttribute]
public string get_ObjectId();
    [CompilerGeneratedAttribute]
public void set_ObjectId(string value);
}
public class Microsoft.Graph.HeaderOption : Option {
    public HeaderOption(string name, string value);
}
[ExtensionAttribute]
internal static class Microsoft.Graph.HttpClientExtensions : object {
    [ExtensionAttribute]
internal static void SetFeatureFlag(HttpClient httpClient, FeatureFlag featureFlag);
    [ExtensionAttribute]
internal static bool ContainsFeatureFlag(HttpClient httpClient, FeatureFlag featureFlag);
}
public enum Microsoft.Graph.HttpMethods : Enum {
    public int value__;
    public static HttpMethods GET;
    public static HttpMethods POST;
    public static HttpMethods PATCH;
    public static HttpMethods PUT;
    public static HttpMethods DELETE;
    public static HttpMethods HEAD;
    public static HttpMethods CONNECT;
    public static HttpMethods OPTIONS;
    public static HttpMethods TRACE;
}
public class Microsoft.Graph.HttpProvider : object {
    internal bool disposeHandler;
    internal HttpClient httpClient;
    internal HttpMessageHandler httpMessageHandler;
    [CompilerGeneratedAttribute]
private ISerializer <Serializer>k__BackingField;
    public CacheControlHeaderValue CacheControlHeader { get; public set; }
    public TimeSpan OverallTimeout { get; public set; }
    public ISerializer Serializer { get; private set; }
    public HttpProvider(ISerializer serializer);
    public HttpProvider(HttpClientHandler httpClientHandler, bool disposeHandler, ISerializer serializer);
    public HttpProvider(HttpMessageHandler httpMessageHandler, bool disposeHandler, ISerializer serializer);
    public CacheControlHeaderValue get_CacheControlHeader();
    public void set_CacheControlHeader(CacheControlHeaderValue value);
    public sealed virtual TimeSpan get_OverallTimeout();
    public sealed virtual void set_OverallTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public sealed virtual ISerializer get_Serializer();
    [CompilerGeneratedAttribute]
private void set_Serializer(ISerializer value);
    public sealed virtual void Dispose();
    public sealed virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request);
    [AsyncStateMachineAttribute("Microsoft.Graph.HttpProvider/<SendAsync>d__18")]
public sealed virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, HttpCompletionOption completionOption, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Graph.HttpProvider/<SendRequestAsync>d__19")]
internal Task`1<HttpResponseMessage> SendRequestAsync(HttpRequestMessage request, HttpCompletionOption completionOption, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Graph.HttpProvider/<ConvertErrorResponseAsync>d__20")]
private Task`1<ErrorResponse> ConvertErrorResponseAsync(HttpResponseMessage response);
}
[ExtensionAttribute]
public static class Microsoft.Graph.HttpRequestMessageExtensions : object {
    [ExtensionAttribute]
internal static bool IsBuffered(HttpRequestMessage httpRequestMessage);
    [ExtensionAttribute]
internal static FeatureFlag GetFeatureFlags(HttpRequestMessage httpRequestMessage);
    [AsyncStateMachineAttribute("Microsoft.Graph.HttpRequestMessageExtensions/<CloneAsync>d__2")]
[ExtensionAttribute]
internal static Task`1<HttpRequestMessage> CloneAsync(HttpRequestMessage originalRequest);
    [ExtensionAttribute]
public static GraphRequestContext GetRequestContext(HttpRequestMessage httpRequestMessage);
    [ExtensionAttribute]
public static T GetMiddlewareOption(HttpRequestMessage httpRequestMessage);
    [ExtensionAttribute]
internal static ScopedAuthenticationProviderOptions GetScopedAuthenticationProviderOption(HttpRequestMessage httpRequestMessage);
}
public interface Microsoft.Graph.IAsyncMonitor`1 {
    public abstract virtual Task`1<T> PollForOperationCompletionAsync(IProgress`1<AsyncOperationStatus> progress, CancellationToken cancellationToken);
}
public interface Microsoft.Graph.IAuthenticationProvider {
    public abstract virtual Task AuthenticateRequestAsync(HttpRequestMessage request);
}
public interface Microsoft.Graph.IAuthenticationProviderOption {
    public String[] Scopes { get; public set; }
    public abstract virtual String[] get_Scopes();
    public abstract virtual void set_Scopes(String[] value);
}
public interface Microsoft.Graph.IBaseClient {
    public IAuthenticationProvider AuthenticationProvider { get; }
    public string BaseUrl { get; }
    public IHttpProvider HttpProvider { get; }
    public Func`1<IAuthenticationProvider> PerRequestAuthProvider { get; public set; }
    public IBatchRequestBuilder Batch { get; }
    public abstract virtual IAuthenticationProvider get_AuthenticationProvider();
    public abstract virtual string get_BaseUrl();
    public abstract virtual IHttpProvider get_HttpProvider();
    public abstract virtual Func`1<IAuthenticationProvider> get_PerRequestAuthProvider();
    public abstract virtual void set_PerRequestAuthProvider(Func`1<IAuthenticationProvider> value);
    public abstract virtual IBatchRequestBuilder get_Batch();
}
public interface Microsoft.Graph.IBaseRequest {
    public string ContentType { get; public set; }
    public IList`1<HeaderOption> Headers { get; }
    public IBaseClient Client { get; }
    public HttpMethods Method { get; public set; }
    public string RequestUrl { get; }
    public IList`1<QueryOption> QueryOptions { get; }
    public IDictionary`2<string, IMiddlewareOption> MiddlewareOptions { get; }
    public IResponseHandler ResponseHandler { get; public set; }
    public abstract virtual string get_ContentType();
    public abstract virtual void set_ContentType(string value);
    public abstract virtual IList`1<HeaderOption> get_Headers();
    public abstract virtual IBaseClient get_Client();
    public abstract virtual HttpMethods get_Method();
    public abstract virtual void set_Method(HttpMethods value);
    public abstract virtual string get_RequestUrl();
    public abstract virtual IList`1<QueryOption> get_QueryOptions();
    public abstract virtual IDictionary`2<string, IMiddlewareOption> get_MiddlewareOptions();
    public abstract virtual IResponseHandler get_ResponseHandler();
    public abstract virtual void set_ResponseHandler(IResponseHandler value);
    public abstract virtual HttpRequestMessage GetHttpRequestMessage();
}
public interface Microsoft.Graph.IBaseRequestBuilder {
    public IBaseClient Client { get; }
    public string RequestUrl { get; }
    public abstract virtual IBaseClient get_Client();
    public abstract virtual string get_RequestUrl();
    public abstract virtual string AppendSegmentToRequestUrl(string urlSegment);
}
public interface Microsoft.Graph.ICaeAuthenticationProviderOption {
    public String[] Scopes { get; public set; }
    public string Claims { get; public set; }
    public abstract virtual String[] get_Scopes();
    public abstract virtual void set_Scopes(String[] value);
    public abstract virtual string get_Claims();
    public abstract virtual void set_Claims(string value);
}
public interface Microsoft.Graph.ICollectionPage`1 {
    public IList`1<T> CurrentPage { get; }
    public IDictionary`2<string, object> AdditionalData { get; public set; }
    public abstract virtual IList`1<T> get_CurrentPage();
    public abstract virtual IDictionary`2<string, object> get_AdditionalData();
    public abstract virtual void set_AdditionalData(IDictionary`2<string, object> value);
}
public interface Microsoft.Graph.IDecryptableContent {
    public string Data { get; public set; }
    public string DataKey { get; public set; }
    public string DataSignature { get; public set; }
    public string EncryptionCertificateId { get; public set; }
    public string EncryptionCertificateThumbprint { get; public set; }
    public abstract virtual string get_Data();
    public abstract virtual void set_Data(string value);
    public abstract virtual string get_DataKey();
    public abstract virtual void set_DataKey(string value);
    public abstract virtual string get_DataSignature();
    public abstract virtual void set_DataSignature(string value);
    public abstract virtual string get_EncryptionCertificateId();
    public abstract virtual void set_EncryptionCertificateId(string value);
    public abstract virtual string get_EncryptionCertificateThumbprint();
    public abstract virtual void set_EncryptionCertificateThumbprint(string value);
}
[ExtensionAttribute]
public static class Microsoft.Graph.IDecryptableContentExtensions : object {
    [AsyncStateMachineAttribute("Microsoft.Graph.IDecryptableContentExtensions/<DecryptAsync>d__0`1")]
[ExtensionAttribute]
public static Task`1<T> DecryptAsync(IDecryptableContent encryptedContent, Func`3<string, string, Task`1<X509Certificate2>> certificateProvider);
    [AsyncStateMachineAttribute("Microsoft.Graph.IDecryptableContentExtensions/<DecryptAsync>d__1")]
[ExtensionAttribute]
public static Task`1<string> DecryptAsync(IDecryptableContent encryptedContent, Func`3<string, string, Task`1<X509Certificate2>> certificateProvider);
    private static Byte[] AesDecrypt(Byte[] dataToDecrypt, Byte[] key);
}
public interface Microsoft.Graph.IEncryptableSubscription {
    public string EncryptionCertificate { get; public set; }
    public abstract virtual string get_EncryptionCertificate();
    public abstract virtual void set_EncryptionCertificate(string value);
}
[ExtensionAttribute]
public static class Microsoft.Graph.IEncryptableSubscriptionExtensions : object {
    [ExtensionAttribute]
public static void AddPublicEncryptionCertificate(IEncryptableSubscription subscription, X509Certificate2 certificate);
}
public interface Microsoft.Graph.IEncryptedContentBearer`1 {
    public T EncryptedContent { get; public set; }
    public abstract virtual T get_EncryptedContent();
    public abstract virtual void set_EncryptedContent(T value);
}
public interface Microsoft.Graph.IHttpProvider {
    public ISerializer Serializer { get; }
    public TimeSpan OverallTimeout { get; public set; }
    public abstract virtual ISerializer get_Serializer();
    public abstract virtual TimeSpan get_OverallTimeout();
    public abstract virtual void set_OverallTimeout(TimeSpan value);
    public abstract virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request);
    public abstract virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, HttpCompletionOption completionOption, CancellationToken cancellationToken);
}
public interface Microsoft.Graph.IMiddlewareOption {
}
public class Microsoft.Graph.IntegratedWindowsTokenCredential : TokenCredential {
    private static HashSet`1<string> WellKnownTenants;
    private IPublicClientApplication _clientApplication;
    public IntegratedWindowsTokenCredential(IPublicClientApplication publicClientApplication);
    private static IntegratedWindowsTokenCredential();
    public virtual AccessToken GetToken(TokenRequestContext requestContext, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Graph.IntegratedWindowsTokenCredential/<GetTokenAsync>d__4")]
public virtual ValueTask`1<AccessToken> GetTokenAsync(TokenRequestContext requestContext, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Graph.IntegratedWindowsTokenCredential/<GetNewAccessTokenAsync>d__5")]
private Task`1<AuthenticationResult> GetNewAccessTokenAsync(TokenRequestContext requestContext);
}
public class Microsoft.Graph.InterfaceConverter`1 : JsonConverter`1<T> {
    public virtual bool CanConvert(Type typeToConvert);
    public virtual T Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, T value, JsonSerializerOptions options);
}
[AttributeUsageAttribute("1024")]
public class Microsoft.Graph.InterfaceConverterAttribute : JsonConverterAttribute {
    public InterfaceConverterAttribute(Type converterType);
}
public interface Microsoft.Graph.IResponseHandler {
    public abstract virtual Task`1<T> HandleResponse(HttpResponseMessage response);
}
public interface Microsoft.Graph.ISerializer {
    public abstract virtual T DeserializeObject(Stream stream);
    public abstract virtual T DeserializeObject(string inputString);
    public abstract virtual string SerializeObject(object serializeableObject);
}
public interface Microsoft.Graph.ITokenValidable`2 {
    public IEnumerable`1<string> ValidationTokens { get; public set; }
    public IEnumerable`1<T1> Value { get; public set; }
    public abstract virtual IEnumerable`1<string> get_ValidationTokens();
    public abstract virtual void set_ValidationTokens(IEnumerable`1<string> value);
    public abstract virtual IEnumerable`1<T1> get_Value();
    public abstract virtual void set_Value(IEnumerable`1<T1> value);
}
[ExtensionAttribute]
public static class Microsoft.Graph.ITokenValidableExtension : object {
    [AsyncStateMachineAttribute("Microsoft.Graph.ITokenValidableExtension/<AreTokensValid>d__0`2")]
[ExtensionAttribute]
public static Task`1<bool> AreTokensValid(ITokenValidable`2<T1, T2> collection, IEnumerable`1<Guid> tenantIds, IEnumerable`1<Guid> appIds, string wellKnownUri, string issuerPrefix);
    private static bool IsTokenValid(string token, JwtSecurityTokenHandler handler, OpenIdConnectConfiguration openIdConfig, IEnumerable`1<string> issuersToValidate, IEnumerable`1<string> appIds);
}
public interface Microsoft.Graph.IUploadSession {
    public Nullable`1<DateTimeOffset> ExpirationDateTime { get; public set; }
    public IEnumerable`1<string> NextExpectedRanges { get; public set; }
    public string UploadUrl { get; public set; }
    public abstract virtual Nullable`1<DateTimeOffset> get_ExpirationDateTime();
    public abstract virtual void set_ExpirationDateTime(Nullable`1<DateTimeOffset> value);
    public abstract virtual IEnumerable`1<string> get_NextExpectedRanges();
    public abstract virtual void set_NextExpectedRanges(IEnumerable`1<string> value);
    public abstract virtual string get_UploadUrl();
    public abstract virtual void set_UploadUrl(string value);
}
public class Microsoft.Graph.LargeFileUploadTask`1 : object {
    private static int DefaultMaxSliceSize;
    [CompilerGeneratedAttribute]
private IUploadSession <Session>k__BackingField;
    private IBaseClient _client;
    private Stream _uploadStream;
    private int _maxSliceSize;
    private List`1<Tuple`2<long, long>> _rangesRemaining;
    private IUploadSession Session { get; private set; }
    private long TotalUploadLength { get; }
    public LargeFileUploadTask`1(IUploadSession uploadSession, Stream uploadStream, int maxSliceSize, IBaseClient baseClient);
    [CompilerGeneratedAttribute]
private IUploadSession get_Session();
    [CompilerGeneratedAttribute]
private void set_Session(IUploadSession value);
    private long get_TotalUploadLength();
    private IBaseClient InitializeClient(string uploadUrl);
    [AsyncStateMachineAttribute("Microsoft.Graph.LargeFileUploadTask`1/<UploadSliceAsync>d__13")]
private Task`1<UploadResult`1<T>> UploadSliceAsync(UploadSliceRequest`1<T> uploadSliceRequest, ICollection`1<Exception> exceptionTrackingList);
    [IteratorStateMachineAttribute("Microsoft.Graph.LargeFileUploadTask`1/<GetUploadSliceRequests>d__14")]
internal IEnumerable`1<UploadSliceRequest`1<T>> GetUploadSliceRequests();
    [AsyncStateMachineAttribute("Microsoft.Graph.LargeFileUploadTask`1/<UploadAsync>d__15")]
public Task`1<UploadResult`1<T>> UploadAsync(IProgress`1<long> progress, int maxTries);
    [AsyncStateMachineAttribute("Microsoft.Graph.LargeFileUploadTask`1/<ResumeAsync>d__16")]
public Task`1<UploadResult`1<T>> ResumeAsync(IProgress`1<long> progress, int maxTries);
    [AsyncStateMachineAttribute("Microsoft.Graph.LargeFileUploadTask`1/<UpdateSessionStatusAsync>d__17")]
public Task`1<IUploadSession> UpdateSessionStatusAsync();
    [AsyncStateMachineAttribute("Microsoft.Graph.LargeFileUploadTask`1/<DeleteSessionAsync>d__18")]
public Task DeleteSessionAsync();
    private List`1<Tuple`2<long, long>> GetRangesRemaining(IUploadSession session);
    private long NextSliceSize(long rangeBegin, long rangeEnd);
}
public class Microsoft.Graph.NextLinkConverter : JsonConverter`1<string> {
    public virtual bool CanConvert(Type objectType);
    public virtual string Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, string value, JsonSerializerOptions options);
}
public class Microsoft.Graph.ODataMethodBooleanResponse : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <AdditionalData>k__BackingField;
    [JsonPropertyNameAttribute("value")]
public Nullable`1<bool> Value { get; public set; }
    [JsonExtensionDataAttribute]
public IDictionary`2<string, object> AdditionalData { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_AdditionalData();
    [CompilerGeneratedAttribute]
public void set_AdditionalData(IDictionary`2<string, object> value);
}
public class Microsoft.Graph.ODataMethodIntResponse : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <AdditionalData>k__BackingField;
    [JsonPropertyNameAttribute("value")]
public Nullable`1<int> Value { get; public set; }
    [JsonExtensionDataAttribute]
public IDictionary`2<string, object> AdditionalData { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_AdditionalData();
    [CompilerGeneratedAttribute]
public void set_AdditionalData(IDictionary`2<string, object> value);
}
public class Microsoft.Graph.ODataMethodLongResponse : object {
    [CompilerGeneratedAttribute]
private Nullable`1<long> <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <AdditionalData>k__BackingField;
    [JsonPropertyNameAttribute("value")]
public Nullable`1<long> Value { get; public set; }
    [JsonExtensionDataAttribute]
public IDictionary`2<string, object> AdditionalData { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_AdditionalData();
    [CompilerGeneratedAttribute]
public void set_AdditionalData(IDictionary`2<string, object> value);
}
public class Microsoft.Graph.ODataMethodStringResponse : object {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <AdditionalData>k__BackingField;
    [JsonPropertyNameAttribute("value")]
public string Value { get; public set; }
    [JsonExtensionDataAttribute]
public IDictionary`2<string, object> AdditionalData { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_AdditionalData();
    [CompilerGeneratedAttribute]
public void set_AdditionalData(IDictionary`2<string, object> value);
}
public abstract class Microsoft.Graph.Option : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Name { get; private set; }
    public string Value { get; private set; }
    protected Option(string name, string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(string value);
}
public class Microsoft.Graph.PageIterator`1 : object {
    private IBaseClient _client;
    private ICollectionPage`1<TEntity> _currentPage;
    private Queue`1<TEntity> _pageItemQueue;
    private Func`2<TEntity, bool> _processPageItemCallback;
    private Func`2<IBaseRequest, IBaseRequest> _requestConfigurator;
    [CompilerGeneratedAttribute]
private string <Deltalink>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Nextlink>k__BackingField;
    [CompilerGeneratedAttribute]
private PagingState <State>k__BackingField;
    public string Deltalink { get; private set; }
    public string Nextlink { get; private set; }
    public PagingState State { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Deltalink();
    [CompilerGeneratedAttribute]
private void set_Deltalink(string value);
    [CompilerGeneratedAttribute]
public string get_Nextlink();
    [CompilerGeneratedAttribute]
private void set_Nextlink(string value);
    [CompilerGeneratedAttribute]
public PagingState get_State();
    [CompilerGeneratedAttribute]
public void set_State(PagingState value);
    public static PageIterator`1<TEntity> CreatePageIterator(IBaseClient client, ICollectionPage`1<TEntity> page, Func`2<TEntity, bool> callback, Func`2<IBaseRequest, IBaseRequest> requestConfigurator);
    private bool IntrapageIterate();
    [AsyncStateMachineAttribute("Microsoft.Graph.PageIterator`1/<InterpageIterateAsync>d__19")]
private Task InterpageIterateAsync(CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Graph.PageIterator`1/<IterateAsync>d__20")]
public Task IterateAsync();
    [AsyncStateMachineAttribute("Microsoft.Graph.PageIterator`1/<IterateAsync>d__21")]
public Task IterateAsync(CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Graph.PageIterator`1/<ResumeAsync>d__22")]
public Task ResumeAsync();
    [AsyncStateMachineAttribute("Microsoft.Graph.PageIterator`1/<ResumeAsync>d__23")]
public Task ResumeAsync(CancellationToken token);
}
public enum Microsoft.Graph.PagingState : Enum {
    public int value__;
    public static PagingState NotStarted;
    public static PagingState Paused;
    public static PagingState IntrapageIteration;
    public static PagingState InterpageIteration;
    public static PagingState Delta;
    public static PagingState Complete;
}
public class Microsoft.Graph.QueryOption : Option {
    public QueryOption(string name, string value);
}
internal class Microsoft.Graph.ReadOnlySubStream : Stream {
    private long _startInSuperStream;
    private long _positionInSuperStream;
    private long _endInSuperStream;
    private Stream _superStream;
    private bool _canRead;
    private bool _isDisposed;
    public long Length { get; }
    public long Position { get; public set; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public ReadOnlySubStream(Stream superStream, long startPosition, long maxLength);
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    private void ThrowIfDisposed();
    private void ThrowIfCantRead();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual void Flush();
    protected virtual void Dispose(bool disposing);
}
public class Microsoft.Graph.RedirectHandler : DelegatingHandler {
    [CompilerGeneratedAttribute]
private RedirectHandlerOption <RedirectOption>k__BackingField;
    internal RedirectHandlerOption RedirectOption { get; internal set; }
    public RedirectHandler(RedirectHandlerOption redirectOption);
    public RedirectHandler(HttpMessageHandler innerHandler, RedirectHandlerOption redirectOption);
    [CompilerGeneratedAttribute]
internal RedirectHandlerOption get_RedirectOption();
    [CompilerGeneratedAttribute]
internal void set_RedirectOption(RedirectHandlerOption value);
    [AsyncStateMachineAttribute("Microsoft.Graph.RedirectHandler/<SendAsync>d__6")]
protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    private bool IsRedirect(HttpStatusCode statusCode);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<HttpResponseMessage> <>n__0(HttpRequestMessage request, CancellationToken cancellationToken);
}
public class Microsoft.Graph.RedirectHandlerOption : object {
    internal static int DEFAULT_MAX_REDIRECT;
    internal static int MAX_MAX_REDIRECT;
    private int _maxRedirect;
    [CompilerGeneratedAttribute]
private Func`2<HttpResponseMessage, bool> <ShouldRedirect>k__BackingField;
    public int MaxRedirect { get; public set; }
    public Func`2<HttpResponseMessage, bool> ShouldRedirect { get; public set; }
    public int get_MaxRedirect();
    public void set_MaxRedirect(int value);
    [CompilerGeneratedAttribute]
public Func`2<HttpResponseMessage, bool> get_ShouldRedirect();
    [CompilerGeneratedAttribute]
public void set_ShouldRedirect(Func`2<HttpResponseMessage, bool> value);
}
public class Microsoft.Graph.ReferenceRequestBody : object {
    [CompilerGeneratedAttribute]
private string <ODataId>k__BackingField;
    [JsonPropertyNameAttribute("@odata.id")]
public string ODataId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ODataId();
    [CompilerGeneratedAttribute]
public void set_ODataId(string value);
}
public class Microsoft.Graph.ResponseHandler : object {
    private ISerializer serializer;
    public ResponseHandler(ISerializer serializer);
    [AsyncStateMachineAttribute("Microsoft.Graph.ResponseHandler/<HandleResponse>d__2`1")]
public sealed virtual Task`1<T> HandleResponse(HttpResponseMessage response);
}
public class Microsoft.Graph.RetryHandler : DelegatingHandler {
    private static string RETRY_AFTER;
    private static string RETRY_ATTEMPT;
    private double m_pow;
    [CompilerGeneratedAttribute]
private RetryHandlerOption <RetryOption>k__BackingField;
    internal RetryHandlerOption RetryOption { get; internal set; }
    public RetryHandler(RetryHandlerOption retryOption);
    public RetryHandler(HttpMessageHandler innerHandler, RetryHandlerOption retryOption);
    [CompilerGeneratedAttribute]
internal RetryHandlerOption get_RetryOption();
    [CompilerGeneratedAttribute]
internal void set_RetryOption(RetryHandlerOption value);
    [AsyncStateMachineAttribute("Microsoft.Graph.RetryHandler/<SendAsync>d__9")]
protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage httpRequest, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Graph.RetryHandler/<SendRetryAsync>d__10")]
private Task`1<HttpResponseMessage> SendRetryAsync(HttpResponseMessage response, CancellationToken cancellationToken);
    private void AddOrUpdateRetryAttempt(HttpRequestMessage request, int retry_count);
    internal Task Delay(HttpResponseMessage response, int retry_count, int delay, Double& delayInSeconds, CancellationToken cancellationToken);
    private bool ShouldRetry(HttpResponseMessage response);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<HttpResponseMessage> <>n__0(HttpRequestMessage request, CancellationToken cancellationToken);
}
public class Microsoft.Graph.RetryHandlerOption : object {
    internal static int DEFAULT_DELAY;
    internal static int DEFAULT_MAX_RETRY;
    internal static int MAX_MAX_RETRY;
    internal static int MAX_DELAY;
    private int _delay;
    private int _maxRetry;
    [CompilerGeneratedAttribute]
private TimeSpan <RetriesTimeLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`4<int, int, HttpResponseMessage, bool> <ShouldRetry>k__BackingField;
    public int Delay { get; public set; }
    public int MaxRetry { get; public set; }
    public TimeSpan RetriesTimeLimit { get; public set; }
    public Func`4<int, int, HttpResponseMessage, bool> ShouldRetry { get; public set; }
    public int get_Delay();
    public void set_Delay(int value);
    public int get_MaxRetry();
    public void set_MaxRetry(int value);
    [CompilerGeneratedAttribute]
public TimeSpan get_RetriesTimeLimit();
    [CompilerGeneratedAttribute]
public void set_RetriesTimeLimit(TimeSpan value);
    [CompilerGeneratedAttribute]
public Func`4<int, int, HttpResponseMessage, bool> get_ShouldRetry();
    [CompilerGeneratedAttribute]
public void set_ShouldRetry(Func`4<int, int, HttpResponseMessage, bool> value);
}
internal class Microsoft.Graph.ScopedAuthenticationProviderOptions : object {
    [CompilerGeneratedAttribute]
private String[] <Scopes>k__BackingField;
    public String[] Scopes { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_Scopes();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Scopes(String[] value);
}
public class Microsoft.Graph.Serializer : object {
    private JsonSerializerOptions jsonSerializerOptions;
    public Serializer(JsonSerializerOptions jsonSerializerSettings);
    public sealed virtual T DeserializeObject(Stream stream);
    public sealed virtual T DeserializeObject(string inputString);
    public sealed virtual string SerializeObject(object serializeableObject);
}
[ExtensionAttribute]
public static class Microsoft.Graph.SerializerExtentions : object {
    [ExtensionAttribute]
public static HttpContent SerializeAsJsonContent(ISerializer serializer, object source);
}
public class Microsoft.Graph.ServiceException : Exception {
    [CompilerGeneratedAttribute]
private Error <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpResponseHeaders <ResponseHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpStatusCode <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawResponseBody>k__BackingField;
    public Error Error { get; }
    public HttpResponseHeaders ResponseHeaders { get; }
    public HttpStatusCode StatusCode { get; }
    public string RawResponseBody { get; }
    public ServiceException(Error error, Exception innerException);
    public ServiceException(Error error, HttpResponseHeaders responseHeaders, HttpStatusCode statusCode, Exception innerException);
    public ServiceException(Error error, HttpResponseHeaders responseHeaders, HttpStatusCode statusCode, string rawResponseBody, Exception innerException);
    [CompilerGeneratedAttribute]
public Error get_Error();
    [CompilerGeneratedAttribute]
public HttpResponseHeaders get_ResponseHeaders();
    [CompilerGeneratedAttribute]
public HttpStatusCode get_StatusCode();
    [CompilerGeneratedAttribute]
public string get_RawResponseBody();
    public bool IsMatch(string errorCode);
    public virtual string ToString();
}
public class Microsoft.Graph.SimpleHttpProvider : object {
    internal HttpClient httpClient;
    [CompilerGeneratedAttribute]
private ISerializer <Serializer>k__BackingField;
    public ISerializer Serializer { get; private set; }
    public TimeSpan OverallTimeout { get; public set; }
    public SimpleHttpProvider(HttpClient httpClient, ISerializer serializer);
    [CompilerGeneratedAttribute]
public sealed virtual ISerializer get_Serializer();
    [CompilerGeneratedAttribute]
private void set_Serializer(ISerializer value);
    public sealed virtual TimeSpan get_OverallTimeout();
    public sealed virtual void set_OverallTimeout(TimeSpan value);
    public sealed virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request);
    [AsyncStateMachineAttribute("Microsoft.Graph.SimpleHttpProvider/<SendAsync>d__10")]
public sealed virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, HttpCompletionOption completionOption, CancellationToken cancellationToken);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Microsoft.Graph.SimpleHttpProvider/<ConvertErrorResponseAsync>d__12")]
private Task`1<ErrorResponse> ConvertErrorResponseAsync(HttpResponseMessage response);
    [AsyncStateMachineAttribute("Microsoft.Graph.SimpleHttpProvider/<SendRequestAsync>d__13")]
private Task`1<HttpResponseMessage> SendRequestAsync(HttpRequestMessage request, HttpCompletionOption completionOption, CancellationToken cancellationToken);
}
public static class Microsoft.Graph.StringHelper : object {
    public static string ConvertTypeToTitleCase(string typeString);
    public static string ConvertTypeToLowerCamelCase(string typeString);
    public static string ConvertIdentifierToLowerCamelCase(string identifierString);
}
[JsonConverterAttribute("Microsoft.Graph.TimeOfDayConverter")]
public class Microsoft.Graph.TimeOfDay : object {
    [CompilerGeneratedAttribute]
private DateTime <DateTime>k__BackingField;
    internal DateTime DateTime { get; internal set; }
    public int Hour { get; }
    public int Minute { get; }
    public int Second { get; }
    internal TimeOfDay(DateTime dateTime);
    public TimeOfDay(int hour, int minute, int second);
    [CompilerGeneratedAttribute]
internal DateTime get_DateTime();
    [CompilerGeneratedAttribute]
internal void set_DateTime(DateTime value);
    public int get_Hour();
    public int get_Minute();
    public int get_Second();
    public virtual string ToString();
}
public class Microsoft.Graph.TimeOfDayConverter : JsonConverter`1<TimeOfDay> {
    public virtual bool CanConvert(Type objectType);
    public virtual TimeOfDay Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, TimeOfDay value, JsonSerializerOptions options);
}
public class Microsoft.Graph.TokenCredentialAuthProvider : object {
    private TokenCredential _credential;
    private IEnumerable`1<string> _scopes;
    public TokenCredentialAuthProvider(TokenCredential tokenCredential, IEnumerable`1<string> scopes);
    [AsyncStateMachineAttribute("Microsoft.Graph.TokenCredentialAuthProvider/<AuthenticateRequestAsync>d__3")]
public sealed virtual Task AuthenticateRequestAsync(HttpRequestMessage request);
}
[ExtensionAttribute]
internal static class Microsoft.Graph.TokenCredentialExtensions : object {
    [ExtensionAttribute]
internal static TimeSpan GetRetryAfter(TokenCredential tokenCredential, MsalServiceException serviceException);
}
internal class Microsoft.Graph.UploadResponseHandler : object {
    private ISerializer _serializer;
    public UploadResponseHandler(ISerializer serializer);
    [AsyncStateMachineAttribute("Microsoft.Graph.UploadResponseHandler/<HandleResponse>d__2`1")]
public Task`1<UploadResult`1<T>> HandleResponse(HttpResponseMessage response);
}
public class Microsoft.Graph.UploadResult`1 : object {
    public IUploadSession UploadSession;
    public T ItemResponse;
    public Uri Location;
    public bool UploadSucceeded { get; }
    public bool get_UploadSucceeded();
}
internal class Microsoft.Graph.UploadSessionRequest : BaseRequest {
    private UploadResponseHandler responseHandler;
    public UploadSessionRequest(IUploadSession session, IBaseClient client);
    public Task DeleteAsync();
    [AsyncStateMachineAttribute("Microsoft.Graph.UploadSessionRequest/<DeleteAsync>d__3")]
public Task DeleteAsync(CancellationToken cancellationToken);
    public Task`1<IUploadSession> GetAsync();
    [AsyncStateMachineAttribute("Microsoft.Graph.UploadSessionRequest/<GetAsync>d__5")]
public Task`1<IUploadSession> GetAsync(CancellationToken cancellationToken);
}
internal class Microsoft.Graph.UploadSliceRequest`1 : BaseRequest {
    private UploadResponseHandler responseHandler;
    [CompilerGeneratedAttribute]
private long <RangeBegin>k__BackingField;
    [CompilerGeneratedAttribute]
private long <RangeEnd>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TotalSessionLength>k__BackingField;
    public long RangeBegin { get; private set; }
    public long RangeEnd { get; private set; }
    public long TotalSessionLength { get; private set; }
    public int RangeLength { get; }
    public UploadSliceRequest`1(string sessionUrl, IBaseClient client, long rangeBegin, long rangeEnd, long totalSessionLength);
    [CompilerGeneratedAttribute]
public long get_RangeBegin();
    [CompilerGeneratedAttribute]
private void set_RangeBegin(long value);
    [CompilerGeneratedAttribute]
public long get_RangeEnd();
    [CompilerGeneratedAttribute]
private void set_RangeEnd(long value);
    [CompilerGeneratedAttribute]
public long get_TotalSessionLength();
    [CompilerGeneratedAttribute]
private void set_TotalSessionLength(long value);
    public int get_RangeLength();
    public Task`1<UploadResult`1<T>> PutAsync(Stream stream);
    [AsyncStateMachineAttribute("Microsoft.Graph.UploadSliceRequest`1/<PutAsync>d__17")]
public virtual Task`1<UploadResult`1<T>> PutAsync(Stream stream, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Graph.UploadSliceRequest`1/<SendRequestAsync>d__18")]
private Task`1<HttpResponseMessage> SendRequestAsync(Stream stream, CancellationToken cancellationToken, HttpCompletionOption completionOption);
}
public static class Microsoft.Graph.UrlHelper : object {
    public static IDictionary`2<string, string> GetQueryOptions(Uri resultUri);
}
