[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class MeltySynth.ArrayMath : object {
    public static void MultiplyAdd(float a, Single[] x, Single[] destination);
    public static void MultiplyAdd(float a, float step, Single[] x, Single[] destination);
}
[ExtensionAttribute]
public static class MeltySynth.AudioRendererEx : object {
    [ExtensionAttribute]
public static void RenderInterleaved(IAudioRenderer renderer, Span`1<float> destination);
    [ExtensionAttribute]
public static void RenderMono(IAudioRenderer renderer, Span`1<float> destination);
    [ExtensionAttribute]
public static void RenderInt16(IAudioRenderer renderer, Span`1<short> left, Span`1<short> right);
    [ExtensionAttribute]
public static void RenderInterleavedInt16(IAudioRenderer renderer, Span`1<short> destination);
    [ExtensionAttribute]
public static void RenderMonoInt16(IAudioRenderer renderer, Span`1<short> destination);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class MeltySynth.BinaryReaderEx : object {
    [ExtensionAttribute]
public static string ReadFourCC(BinaryReader reader);
    [ExtensionAttribute]
public static string ReadFixedLengthString(BinaryReader reader, int length);
    [ExtensionAttribute]
public static short ReadInt16BigEndian(BinaryReader reader);
    [ExtensionAttribute]
public static int ReadInt32BigEndian(BinaryReader reader);
    [ExtensionAttribute]
public static int ReadIntVariableLength(BinaryReader reader);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MeltySynth.BiQuadFilter : object {
    private static float resonancePeakOffset;
    private Synthesizer synthesizer;
    private bool active;
    private float a0;
    private float a1;
    private float a2;
    private float a3;
    private float a4;
    private float x1;
    private float x2;
    private float y1;
    private float y2;
    internal BiQuadFilter(Synthesizer synthesizer);
    private static BiQuadFilter();
    public void ClearBuffer();
    public void SetLowPassFilter(float cutoffFrequency, float resonance);
    public void Process(Single[] block);
    private void SetCoefficients(float a0, float a1, float a2, float b0, float b1, float b2);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MeltySynth.Channel : object {
    private Synthesizer synthesizer;
    private bool isPercussionChannel;
    private int bankNumber;
    private int patchNumber;
    private short modulation;
    private short volume;
    private short pan;
    private short expression;
    private bool holdPedal;
    private byte reverbSend;
    private byte chorusSend;
    private short rpn;
    private short pitchBendRange;
    private short coarseTune;
    private short fineTune;
    private float pitchBend;
    public bool IsPercussionChannel { get; }
    public int BankNumber { get; }
    public int PatchNumber { get; }
    public float Modulation { get; }
    public float Volume { get; }
    public float Pan { get; }
    public float Expression { get; }
    public bool HoldPedal { get; }
    public float ReverbSend { get; }
    public float ChorusSend { get; }
    public float PitchBendRange { get; }
    public float Tune { get; }
    public float PitchBend { get; }
    internal Channel(Synthesizer synthesizer, bool isPercussionChannel);
    public void Reset();
    public void ResetAllControllers();
    public void SetBank(int value);
    public void SetPatch(int value);
    public void SetModulationCoarse(int value);
    public void SetModulationFine(int value);
    public void SetVolumeCoarse(int value);
    public void SetVolumeFine(int value);
    public void SetPanCoarse(int value);
    public void SetPanFine(int value);
    public void SetExpressionCoarse(int value);
    public void SetExpressionFine(int value);
    public void SetHoldPedal(int value);
    public void SetReverbSend(int value);
    public void SetChorusSend(int value);
    public void SetRpnCoarse(int value);
    public void SetRpnFine(int value);
    public void DataEntryCoarse(int value);
    public void DataEntryFine(int value);
    public void SetPitchBend(int value1, int value2);
    public bool get_IsPercussionChannel();
    public int get_BankNumber();
    public int get_PatchNumber();
    public float get_Modulation();
    public float get_Volume();
    public float get_Pan();
    public float get_Expression();
    public bool get_HoldPedal();
    public float get_ReverbSend();
    public float get_ChorusSend();
    public float get_PitchBendRange();
    public float get_Tune();
    public float get_PitchBend();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MeltySynth.Chorus : object {
    private Single[] bufferL;
    private Single[] bufferR;
    private Single[] delayTable;
    private int bufferIndex;
    private int delayTableIndexL;
    private int delayTableIndexR;
    internal Chorus(int sampleRate, double delay, double depth, double frequency);
    public void Process(Single[] inputLeft, Single[] inputRight, Single[] outputLeft, Single[] outputRight);
    public void Mute();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MeltySynth.Generator : ValueType {
    private GeneratorType type;
    private ushort value;
    public GeneratorType Type { get; }
    public ushort Value { get; }
    private Generator(BinaryReader reader);
    internal static Generator[] ReadFromChunk(BinaryReader reader, int size);
    public GeneratorType get_Type();
    public ushort get_Value();
}
internal enum MeltySynth.GeneratorType : Enum {
    public ushort value__;
    public static GeneratorType StartAddressOffset;
    public static GeneratorType EndAddressOffset;
    public static GeneratorType StartLoopAddressOffset;
    public static GeneratorType EndLoopAddressOffset;
    public static GeneratorType StartAddressCoarseOffset;
    public static GeneratorType ModulationLfoToPitch;
    public static GeneratorType VibratoLfoToPitch;
    public static GeneratorType ModulationEnvelopeToPitch;
    public static GeneratorType InitialFilterCutoffFrequency;
    public static GeneratorType InitialFilterQ;
    public static GeneratorType ModulationLfoToFilterCutoffFrequency;
    public static GeneratorType ModulationEnvelopeToFilterCutoffFrequency;
    public static GeneratorType EndAddressCoarseOffset;
    public static GeneratorType ModulationLfoToVolume;
    public static GeneratorType Unused1;
    public static GeneratorType ChorusEffectsSend;
    public static GeneratorType ReverbEffectsSend;
    public static GeneratorType Pan;
    public static GeneratorType Unused2;
    public static GeneratorType Unused3;
    public static GeneratorType Unused4;
    public static GeneratorType DelayModulationLfo;
    public static GeneratorType FrequencyModulationLfo;
    public static GeneratorType DelayVibratoLfo;
    public static GeneratorType FrequencyVibratoLfo;
    public static GeneratorType DelayModulationEnvelope;
    public static GeneratorType AttackModulationEnvelope;
    public static GeneratorType HoldModulationEnvelope;
    public static GeneratorType DecayModulationEnvelope;
    public static GeneratorType SustainModulationEnvelope;
    public static GeneratorType ReleaseModulationEnvelope;
    public static GeneratorType KeyNumberToModulationEnvelopeHold;
    public static GeneratorType KeyNumberToModulationEnvelopeDecay;
    public static GeneratorType DelayVolumeEnvelope;
    public static GeneratorType AttackVolumeEnvelope;
    public static GeneratorType HoldVolumeEnvelope;
    public static GeneratorType DecayVolumeEnvelope;
    public static GeneratorType SustainVolumeEnvelope;
    public static GeneratorType ReleaseVolumeEnvelope;
    public static GeneratorType KeyNumberToVolumeEnvelopeHold;
    public static GeneratorType KeyNumberToVolumeEnvelopeDecay;
    public static GeneratorType Instrument;
    public static GeneratorType Reserved1;
    public static GeneratorType KeyRange;
    public static GeneratorType VelocityRange;
    public static GeneratorType StartLoopAddressCoarseOffset;
    public static GeneratorType KeyNumber;
    public static GeneratorType Velocity;
    public static GeneratorType InitialAttenuation;
    public static GeneratorType Reserved2;
    public static GeneratorType EndLoopAddressCoarseOffset;
    public static GeneratorType CoarseTune;
    public static GeneratorType FineTune;
    public static GeneratorType SampleID;
    public static GeneratorType SampleModes;
    public static GeneratorType Reserved3;
    public static GeneratorType ScaleTuning;
    public static GeneratorType ExclusiveClass;
    public static GeneratorType OverridingRootKey;
    public static GeneratorType Unused5;
    public static GeneratorType UnusedEnd;
}
public interface MeltySynth.IAudioRenderer {
    public abstract virtual void Render(Span`1<float> left, Span`1<float> right);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MeltySynth.Instrument : object {
    internal static Instrument Default;
    private string name;
    private InstrumentRegion[] regions;
    public string Name { get; }
    public IReadOnlyList`1<InstrumentRegion> Regions { get; }
    internal InstrumentRegion[] RegionArray { get; }
    private Instrument(InstrumentInfo info, Zone[] zones, SampleHeader[] samples);
    private static Instrument();
    internal static Instrument[] Create(InstrumentInfo[] infos, Zone[] zones, SampleHeader[] samples);
    public virtual string ToString();
    public string get_Name();
    public IReadOnlyList`1<InstrumentRegion> get_Regions();
    internal InstrumentRegion[] get_RegionArray();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MeltySynth.InstrumentInfo : object {
    private string name;
    private int zoneStartIndex;
    private int zoneEndIndex;
    public string Name { get; }
    public int ZoneStartIndex { get; }
    public int ZoneEndIndex { get; }
    private InstrumentInfo(BinaryReader reader);
    internal static InstrumentInfo[] ReadFromChunk(BinaryReader reader, int size);
    public string get_Name();
    public int get_ZoneStartIndex();
    public int get_ZoneEndIndex();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class MeltySynth.InstrumentRegion : object {
    internal static InstrumentRegion Default;
    private Int16[] gs;
    private SampleHeader sample;
    internal short Item { get; }
    public SampleHeader Sample { get; }
    public int SampleStart { get; }
    public int SampleEnd { get; }
    public int SampleStartLoop { get; }
    public int SampleEndLoop { get; }
    public int StartAddressOffset { get; }
    public int EndAddressOffset { get; }
    public int StartLoopAddressOffset { get; }
    public int EndLoopAddressOffset { get; }
    public int ModulationLfoToPitch { get; }
    public int VibratoLfoToPitch { get; }
    public int ModulationEnvelopeToPitch { get; }
    public float InitialFilterCutoffFrequency { get; }
    public float InitialFilterQ { get; }
    public int ModulationLfoToFilterCutoffFrequency { get; }
    public int ModulationEnvelopeToFilterCutoffFrequency { get; }
    public float ModulationLfoToVolume { get; }
    public float ChorusEffectsSend { get; }
    public float ReverbEffectsSend { get; }
    public float Pan { get; }
    public float DelayModulationLfo { get; }
    public float FrequencyModulationLfo { get; }
    public float DelayVibratoLfo { get; }
    public float FrequencyVibratoLfo { get; }
    public float DelayModulationEnvelope { get; }
    public float AttackModulationEnvelope { get; }
    public float HoldModulationEnvelope { get; }
    public float DecayModulationEnvelope { get; }
    public float SustainModulationEnvelope { get; }
    public float ReleaseModulationEnvelope { get; }
    public int KeyNumberToModulationEnvelopeHold { get; }
    public int KeyNumberToModulationEnvelopeDecay { get; }
    public float DelayVolumeEnvelope { get; }
    public float AttackVolumeEnvelope { get; }
    public float HoldVolumeEnvelope { get; }
    public float DecayVolumeEnvelope { get; }
    public float SustainVolumeEnvelope { get; }
    public float ReleaseVolumeEnvelope { get; }
    public int KeyNumberToVolumeEnvelopeHold { get; }
    public int KeyNumberToVolumeEnvelopeDecay { get; }
    public int KeyRangeStart { get; }
    public int KeyRangeEnd { get; }
    public int VelocityRangeStart { get; }
    public int VelocityRangeEnd { get; }
    public float InitialAttenuation { get; }
    public int CoarseTune { get; }
    public int FineTune { get; }
    public LoopMode SampleModes { get; }
    public int ScaleTuning { get; }
    public int ExclusiveClass { get; }
    public int RootKey { get; }
    private InstrumentRegion(Instrument instrument, Zone global, Zone local, SampleHeader[] samples);
    private static InstrumentRegion();
    internal static InstrumentRegion[] Create(Instrument instrument, Span`1<Zone> zones, SampleHeader[] samples);
    private void SetParameter(Generator generator);
    public bool Contains(int key, int velocity);
    public virtual string ToString();
    internal short get_Item(GeneratorType generatortType);
    public SampleHeader get_Sample();
    public int get_SampleStart();
    public int get_SampleEnd();
    public int get_SampleStartLoop();
    public int get_SampleEndLoop();
    public int get_StartAddressOffset();
    public int get_EndAddressOffset();
    public int get_StartLoopAddressOffset();
    public int get_EndLoopAddressOffset();
    public int get_ModulationLfoToPitch();
    public int get_VibratoLfoToPitch();
    public int get_ModulationEnvelopeToPitch();
    public float get_InitialFilterCutoffFrequency();
    public float get_InitialFilterQ();
    public int get_ModulationLfoToFilterCutoffFrequency();
    public int get_ModulationEnvelopeToFilterCutoffFrequency();
    public float get_ModulationLfoToVolume();
    public float get_ChorusEffectsSend();
    public float get_ReverbEffectsSend();
    public float get_Pan();
    public float get_DelayModulationLfo();
    public float get_FrequencyModulationLfo();
    public float get_DelayVibratoLfo();
    public float get_FrequencyVibratoLfo();
    public float get_DelayModulationEnvelope();
    public float get_AttackModulationEnvelope();
    public float get_HoldModulationEnvelope();
    public float get_DecayModulationEnvelope();
    public float get_SustainModulationEnvelope();
    public float get_ReleaseModulationEnvelope();
    public int get_KeyNumberToModulationEnvelopeHold();
    public int get_KeyNumberToModulationEnvelopeDecay();
    public float get_DelayVolumeEnvelope();
    public float get_AttackVolumeEnvelope();
    public float get_HoldVolumeEnvelope();
    public float get_DecayVolumeEnvelope();
    public float get_SustainVolumeEnvelope();
    public float get_ReleaseVolumeEnvelope();
    public int get_KeyNumberToVolumeEnvelopeHold();
    public int get_KeyNumberToVolumeEnvelopeDecay();
    public int get_KeyRangeStart();
    public int get_KeyRangeEnd();
    public int get_VelocityRangeStart();
    public int get_VelocityRangeEnd();
    public float get_InitialAttenuation();
    public int get_CoarseTune();
    public int get_FineTune();
    public LoopMode get_SampleModes();
    public int get_ScaleTuning();
    public int get_ExclusiveClass();
    public int get_RootKey();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MeltySynth.Lfo : object {
    private Synthesizer synthesizer;
    private bool active;
    private double delay;
    private double period;
    private int processedSampleCount;
    private float value;
    public float Value { get; }
    internal Lfo(Synthesizer synthesizer);
    public void Start(float delay, float frequency);
    public void Process();
    public float get_Value();
}
public enum MeltySynth.LoopMode : Enum {
    public int value__;
    public static LoopMode NoLoop;
    public static LoopMode Continuous;
    public static LoopMode LoopUntilNoteOff;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MeltySynth.MidiFile : object {
    private Message[] messages;
    private TimeSpan[] times;
    public TimeSpan Length { get; }
    internal Message[] Messages { get; }
    internal TimeSpan[] Times { get; }
    public MidiFile(Stream stream);
    public MidiFile(Stream stream, int loopPoint);
    public MidiFile(Stream stream, MidiFileLoopType loopType);
    public MidiFile(string path);
    public MidiFile(string path, int loopPoint);
    public MidiFile(string path, MidiFileLoopType loopType);
    internal static TimeSpan GetTimeSpanFromSeconds(double value);
    private void Load(Stream stream, int loopPoint, MidiFileLoopType loopType);
    private static ValueTuple`2<List`1<Message>, List`1<int>> ReadTrack(BinaryReader reader, MidiFileLoopType loopType);
    private static ValueTuple`2<Message[], TimeSpan[]> MergeTracks(List`1[] messageLists, List`1[] tickLists, int resolution);
    private static int ReadTempo(BinaryReader reader);
    private static void DiscardData(BinaryReader reader);
    public TimeSpan get_Length();
    internal Message[] get_Messages();
    internal TimeSpan[] get_Times();
}
public enum MeltySynth.MidiFileLoopType : Enum {
    public int value__;
    public static MidiFileLoopType None;
    public static MidiFileLoopType RpgMaker;
    public static MidiFileLoopType IncredibleMachine;
    public static MidiFileLoopType FinalFantasy;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MeltySynth.MidiFileSequencer : object {
    private Synthesizer synthesizer;
    private float speed;
    [NullableAttribute("2")]
private MidiFile midiFile;
    private bool loop;
    private int blockWrote;
    private TimeSpan currentTime;
    private int msgIndex;
    private int loopIndex;
    [NullableAttribute("2")]
private MessageHook onSendMessage;
    public Synthesizer Synthesizer { get; }
    public TimeSpan Position { get; }
    public bool EndOfSequence { get; }
    public float Speed { get; public set; }
    [NullableAttribute("2")]
public MessageHook OnSendMessage { get; public set; }
    public MidiFileSequencer(Synthesizer synthesizer);
    public void Play(MidiFile midiFile, bool loop);
    public void Stop();
    [NullableContextAttribute("0")]
public sealed virtual void Render(Span`1<float> left, Span`1<float> right);
    private void ProcessEvents();
    public Synthesizer get_Synthesizer();
    public TimeSpan get_Position();
    public bool get_EndOfSequence();
    public float get_Speed();
    public void set_Speed(float value);
    [NullableContextAttribute("2")]
public MessageHook get_OnSendMessage();
    [NullableContextAttribute("2")]
public void set_OnSendMessage(MessageHook value);
}
internal class MeltySynth.ModulationEnvelope : object {
    [NullableAttribute("1")]
private Synthesizer synthesizer;
    private double attackSlope;
    private double decaySlope;
    private double releaseSlope;
    private double attackStartTime;
    private double holdStartTime;
    private double decayStartTime;
    private double decayEndTime;
    private double releaseEndTime;
    private float sustainLevel;
    private float releaseLevel;
    private int processedSampleCount;
    private Stage stage;
    private float value;
    public float Value { get; }
    [NullableContextAttribute("1")]
internal ModulationEnvelope(Synthesizer synthesizer);
    public void Start(float delay, float attack, float hold, float decay, float sustain, float release);
    public void Release();
    public bool Process();
    private bool Process(int sampleCount);
    public float get_Value();
}
internal static class MeltySynth.Modulator : object {
    [NullableContextAttribute("1")]
internal static void DiscardData(BinaryReader reader, int size);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MeltySynth.Oscillator : object {
    private static int fracBits;
    private static long fracUnit;
    private static float fpToSample;
    private Synthesizer synthesizer;
    [NullableAttribute("2")]
private Int16[] data;
    private LoopMode loopMode;
    private int sampleRate;
    private int start;
    private int end;
    private int startLoop;
    private int endLoop;
    private int rootKey;
    private float tune;
    private float pitchChangeScale;
    private float sampleRateRatio;
    private bool looping;
    private long position_fp;
    internal Oscillator(Synthesizer synthesizer);
    public void Start(Int16[] data, LoopMode loopMode, int sampleRate, int start, int end, int startLoop, int endLoop, int rootKey, int coarseTune, int fineTune, int scaleTuning);
    public void Release();
    public bool Process(Single[] block, float pitch);
    internal bool FillBlock(Single[] block, double pitchRatio);
    private bool FillBlock_NoLoop(Single[] block, long pitchRatio_fp);
    private bool FillBlock_Continuous(Single[] block, long pitchRatio_fp);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MeltySynth.Preset : object {
    internal static Preset Default;
    private string name;
    private int patchNumber;
    private int bankNumber;
    private int library;
    private int genre;
    private int morphology;
    private PresetRegion[] regions;
    public string Name { get; }
    public int PatchNumber { get; }
    public int BankNumber { get; }
    public IReadOnlyList`1<PresetRegion> Regions { get; }
    internal PresetRegion[] RegionArray { get; }
    private Preset(PresetInfo info, Zone[] zones, Instrument[] instruments);
    private static Preset();
    internal static Preset[] Create(PresetInfo[] infos, Zone[] zones, Instrument[] instruments);
    public virtual string ToString();
    public string get_Name();
    public int get_PatchNumber();
    public int get_BankNumber();
    public IReadOnlyList`1<PresetRegion> get_Regions();
    internal PresetRegion[] get_RegionArray();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MeltySynth.PresetInfo : object {
    private string name;
    private int patchNumber;
    private int bankNumber;
    private int zoneStartIndex;
    private int zoneEndIndex;
    private int library;
    private int genre;
    private int morphology;
    public string Name { get; }
    public int PatchNumber { get; }
    public int BankNumber { get; }
    public int ZoneStartIndex { get; }
    public int ZoneEndIndex { get; }
    public int Library { get; }
    public int Genre { get; }
    public int Morphology { get; }
    private PresetInfo(BinaryReader reader);
    internal static PresetInfo[] ReadFromChunk(BinaryReader reader, int size);
    public string get_Name();
    public int get_PatchNumber();
    public int get_BankNumber();
    public int get_ZoneStartIndex();
    public int get_ZoneEndIndex();
    public int get_Library();
    public int get_Genre();
    public int get_Morphology();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class MeltySynth.PresetRegion : object {
    internal static PresetRegion Default;
    private Int16[] gs;
    private Instrument instrument;
    internal short Item { get; }
    public Instrument Instrument { get; }
    public int ModulationLfoToPitch { get; }
    public int VibratoLfoToPitch { get; }
    public int ModulationEnvelopeToPitch { get; }
    public float InitialFilterCutoffFrequency { get; }
    public float InitialFilterQ { get; }
    public int ModulationLfoToFilterCutoffFrequency { get; }
    public int ModulationEnvelopeToFilterCutoffFrequency { get; }
    public float ModulationLfoToVolume { get; }
    public float ChorusEffectsSend { get; }
    public float ReverbEffectsSend { get; }
    public float Pan { get; }
    public float DelayModulationLfo { get; }
    public float FrequencyModulationLfo { get; }
    public float DelayVibratoLfo { get; }
    public float FrequencyVibratoLfo { get; }
    public float DelayModulationEnvelope { get; }
    public float AttackModulationEnvelope { get; }
    public float HoldModulationEnvelope { get; }
    public float DecayModulationEnvelope { get; }
    public float SustainModulationEnvelope { get; }
    public float ReleaseModulationEnvelope { get; }
    public int KeyNumberToModulationEnvelopeHold { get; }
    public int KeyNumberToModulationEnvelopeDecay { get; }
    public float DelayVolumeEnvelope { get; }
    public float AttackVolumeEnvelope { get; }
    public float HoldVolumeEnvelope { get; }
    public float DecayVolumeEnvelope { get; }
    public float SustainVolumeEnvelope { get; }
    public float ReleaseVolumeEnvelope { get; }
    public int KeyNumberToVolumeEnvelopeHold { get; }
    public int KeyNumberToVolumeEnvelopeDecay { get; }
    public int KeyRangeStart { get; }
    public int KeyRangeEnd { get; }
    public int VelocityRangeStart { get; }
    public int VelocityRangeEnd { get; }
    public float InitialAttenuation { get; }
    public int CoarseTune { get; }
    public int FineTune { get; }
    public int ScaleTuning { get; }
    private PresetRegion(Preset preset, Zone global, Zone local, Instrument[] instruments);
    private static PresetRegion();
    internal static PresetRegion[] Create(Preset preset, Span`1<Zone> zones, Instrument[] instruments);
    private void SetParameter(Generator generator);
    public bool Contains(int key, int velocity);
    public virtual string ToString();
    internal short get_Item(GeneratorType generatortType);
    public Instrument get_Instrument();
    public int get_ModulationLfoToPitch();
    public int get_VibratoLfoToPitch();
    public int get_ModulationEnvelopeToPitch();
    public float get_InitialFilterCutoffFrequency();
    public float get_InitialFilterQ();
    public int get_ModulationLfoToFilterCutoffFrequency();
    public int get_ModulationEnvelopeToFilterCutoffFrequency();
    public float get_ModulationLfoToVolume();
    public float get_ChorusEffectsSend();
    public float get_ReverbEffectsSend();
    public float get_Pan();
    public float get_DelayModulationLfo();
    public float get_FrequencyModulationLfo();
    public float get_DelayVibratoLfo();
    public float get_FrequencyVibratoLfo();
    public float get_DelayModulationEnvelope();
    public float get_AttackModulationEnvelope();
    public float get_HoldModulationEnvelope();
    public float get_DecayModulationEnvelope();
    public float get_SustainModulationEnvelope();
    public float get_ReleaseModulationEnvelope();
    public int get_KeyNumberToModulationEnvelopeHold();
    public int get_KeyNumberToModulationEnvelopeDecay();
    public float get_DelayVolumeEnvelope();
    public float get_AttackVolumeEnvelope();
    public float get_HoldVolumeEnvelope();
    public float get_DecayVolumeEnvelope();
    public float get_SustainVolumeEnvelope();
    public float get_ReleaseVolumeEnvelope();
    public int get_KeyNumberToVolumeEnvelopeHold();
    public int get_KeyNumberToVolumeEnvelopeDecay();
    public int get_KeyRangeStart();
    public int get_KeyRangeEnd();
    public int get_VelocityRangeStart();
    public int get_VelocityRangeEnd();
    public float get_InitialAttenuation();
    public int get_CoarseTune();
    public int get_FineTune();
    public int get_ScaleTuning();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class MeltySynth.RegionEx : object {
    [ExtensionAttribute]
public static void Start(Oscillator oscillator, Int16[] data, InstrumentRegion region);
    [ExtensionAttribute]
public static void Start(Oscillator oscillator, Int16[] data, RegionPair region);
    [ExtensionAttribute]
public static void Start(VolumeEnvelope envelope, InstrumentRegion region, int key, int velocity);
    [ExtensionAttribute]
public static void Start(VolumeEnvelope envelope, RegionPair region, int key, int velocity);
    [ExtensionAttribute]
public static void Start(ModulationEnvelope envelope, InstrumentRegion region, int key, int velocity);
    [ExtensionAttribute]
public static void Start(ModulationEnvelope envelope, RegionPair region, int key, int velocity);
    [ExtensionAttribute]
public static void StartVibrato(Lfo lfo, InstrumentRegion region, int key, int velocity);
    [ExtensionAttribute]
public static void StartVibrato(Lfo lfo, RegionPair region, int key, int velocity);
    [ExtensionAttribute]
public static void StartModulation(Lfo lfo, InstrumentRegion region, int key, int velocity);
    [ExtensionAttribute]
public static void StartModulation(Lfo lfo, RegionPair region, int key, int velocity);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class MeltySynth.RegionPair : ValueType {
    private PresetRegion preset;
    private InstrumentRegion instrument;
    private int Item { get; }
    public PresetRegion Preset { get; }
    public InstrumentRegion Instrument { get; }
    public int SampleStart { get; }
    public int SampleEnd { get; }
    public int SampleStartLoop { get; }
    public int SampleEndLoop { get; }
    public int StartAddressOffset { get; }
    public int EndAddressOffset { get; }
    public int StartLoopAddressOffset { get; }
    public int EndLoopAddressOffset { get; }
    public int ModulationLfoToPitch { get; }
    public int VibratoLfoToPitch { get; }
    public int ModulationEnvelopeToPitch { get; }
    public float InitialFilterCutoffFrequency { get; }
    public float InitialFilterQ { get; }
    public int ModulationLfoToFilterCutoffFrequency { get; }
    public int ModulationEnvelopeToFilterCutoffFrequency { get; }
    public float ModulationLfoToVolume { get; }
    public float ChorusEffectsSend { get; }
    public float ReverbEffectsSend { get; }
    public float Pan { get; }
    public float DelayModulationLfo { get; }
    public float FrequencyModulationLfo { get; }
    public float DelayVibratoLfo { get; }
    public float FrequencyVibratoLfo { get; }
    public float DelayModulationEnvelope { get; }
    public float AttackModulationEnvelope { get; }
    public float HoldModulationEnvelope { get; }
    public float DecayModulationEnvelope { get; }
    public float SustainModulationEnvelope { get; }
    public float ReleaseModulationEnvelope { get; }
    public int KeyNumberToModulationEnvelopeHold { get; }
    public int KeyNumberToModulationEnvelopeDecay { get; }
    public float DelayVolumeEnvelope { get; }
    public float AttackVolumeEnvelope { get; }
    public float HoldVolumeEnvelope { get; }
    public float DecayVolumeEnvelope { get; }
    public float SustainVolumeEnvelope { get; }
    public float ReleaseVolumeEnvelope { get; }
    public int KeyNumberToVolumeEnvelopeHold { get; }
    public int KeyNumberToVolumeEnvelopeDecay { get; }
    public float InitialAttenuation { get; }
    public int CoarseTune { get; }
    public int FineTune { get; }
    public LoopMode SampleModes { get; }
    public int ScaleTuning { get; }
    public int ExclusiveClass { get; }
    public int RootKey { get; }
    internal RegionPair(PresetRegion preset, InstrumentRegion instrument);
    private int get_Item(GeneratorType generatortType);
    public PresetRegion get_Preset();
    public InstrumentRegion get_Instrument();
    public int get_SampleStart();
    public int get_SampleEnd();
    public int get_SampleStartLoop();
    public int get_SampleEndLoop();
    public int get_StartAddressOffset();
    public int get_EndAddressOffset();
    public int get_StartLoopAddressOffset();
    public int get_EndLoopAddressOffset();
    public int get_ModulationLfoToPitch();
    public int get_VibratoLfoToPitch();
    public int get_ModulationEnvelopeToPitch();
    public float get_InitialFilterCutoffFrequency();
    public float get_InitialFilterQ();
    public int get_ModulationLfoToFilterCutoffFrequency();
    public int get_ModulationEnvelopeToFilterCutoffFrequency();
    public float get_ModulationLfoToVolume();
    public float get_ChorusEffectsSend();
    public float get_ReverbEffectsSend();
    public float get_Pan();
    public float get_DelayModulationLfo();
    public float get_FrequencyModulationLfo();
    public float get_DelayVibratoLfo();
    public float get_FrequencyVibratoLfo();
    public float get_DelayModulationEnvelope();
    public float get_AttackModulationEnvelope();
    public float get_HoldModulationEnvelope();
    public float get_DecayModulationEnvelope();
    public float get_SustainModulationEnvelope();
    public float get_ReleaseModulationEnvelope();
    public int get_KeyNumberToModulationEnvelopeHold();
    public int get_KeyNumberToModulationEnvelopeDecay();
    public float get_DelayVolumeEnvelope();
    public float get_AttackVolumeEnvelope();
    public float get_HoldVolumeEnvelope();
    public float get_DecayVolumeEnvelope();
    public float get_SustainVolumeEnvelope();
    public float get_ReleaseVolumeEnvelope();
    public int get_KeyNumberToVolumeEnvelopeHold();
    public int get_KeyNumberToVolumeEnvelopeDecay();
    public float get_InitialAttenuation();
    public int get_CoarseTune();
    public int get_FineTune();
    public LoopMode get_SampleModes();
    public int get_ScaleTuning();
    public int get_ExclusiveClass();
    public int get_RootKey();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MeltySynth.Reverb : object {
    private static float fixedGain;
    private static float scaleWet;
    private static float scaleDamp;
    private static float scaleRoom;
    private static float offsetRoom;
    private static float initialRoom;
    private static float initialDamp;
    private static float initialWet;
    private static float initialWidth;
    private static int stereoSpread;
    private static int cfTuningL1;
    private static int cfTuningR1;
    private static int cfTuningL2;
    private static int cfTuningR2;
    private static int cfTuningL3;
    private static int cfTuningR3;
    private static int cfTuningL4;
    private static int cfTuningR4;
    private static int cfTuningL5;
    private static int cfTuningR5;
    private static int cfTuningL6;
    private static int cfTuningR6;
    private static int cfTuningL7;
    private static int cfTuningR7;
    private static int cfTuningL8;
    private static int cfTuningR8;
    private static int apfTuningL1;
    private static int apfTuningR1;
    private static int apfTuningL2;
    private static int apfTuningR2;
    private static int apfTuningL3;
    private static int apfTuningR3;
    private static int apfTuningL4;
    private static int apfTuningR4;
    private CombFilter[] cfsL;
    private CombFilter[] cfsR;
    private AllPassFilter[] apfsL;
    private AllPassFilter[] apfsR;
    private float gain;
    private float roomSize;
    private float roomSize1;
    private float damp;
    private float damp1;
    private float wet;
    private float wet1;
    private float wet2;
    private float width;
    public float InputGain { get; }
    public float RoomSize { get; public set; }
    public float Damp { get; public set; }
    public float Wet { get; public set; }
    public float Width { get; public set; }
    internal Reverb(int sampleRate);
    private int ScaleTuning(int sampleRate, int tuning);
    public void Process(Single[] input, Single[] outputLeft, Single[] outputRight);
    public void Mute();
    private void Update();
    public float get_InputGain();
    public float get_RoomSize();
    public void set_RoomSize(float value);
    public float get_Damp();
    public void set_Damp(float value);
    public float get_Wet();
    public void set_Wet(float value);
    public float get_Width();
    public void set_Width(float value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MeltySynth.SampleHeader : object {
    internal static SampleHeader Default;
    private string name;
    private int start;
    private int end;
    private int startLoop;
    private int endLoop;
    private int sampleRate;
    private byte originalPitch;
    private sbyte pitchCorrection;
    private ushort link;
    private SampleType type;
    public string Name { get; }
    public int Start { get; }
    public int End { get; }
    public int StartLoop { get; }
    public int EndLoop { get; }
    public int SampleRate { get; }
    public byte OriginalPitch { get; }
    public sbyte PitchCorrection { get; }
    private SampleHeader(BinaryReader reader);
    private static SampleHeader();
    internal static SampleHeader[] ReadFromChunk(BinaryReader reader, int size);
    public virtual string ToString();
    public string get_Name();
    public int get_Start();
    public int get_End();
    public int get_StartLoop();
    public int get_EndLoop();
    public int get_SampleRate();
    public byte get_OriginalPitch();
    public sbyte get_PitchCorrection();
}
internal enum MeltySynth.SampleType : Enum {
    public int value__;
    public static SampleType Mono;
    public static SampleType Right;
    public static SampleType Left;
    public static SampleType Linked;
    public static SampleType RomMono;
    public static SampleType RomRight;
    public static SampleType RomLeft;
    public static SampleType RomLinked;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MeltySynth.SoundFont : object {
    private SoundFontInfo info;
    private int bitsPerSample;
    private Int16[] waveData;
    private SampleHeader[] sampleHeaders;
    private Preset[] presets;
    private Instrument[] instruments;
    public SoundFontInfo Info { get; }
    public int BitsPerSample { get; }
    [NullableAttribute("0")]
public ReadOnlySpan`1<short> WaveData { get; }
    public IReadOnlyList`1<SampleHeader> SampleHeaders { get; }
    public IReadOnlyList`1<Preset> Presets { get; }
    public IReadOnlyList`1<Instrument> Instruments { get; }
    internal Int16[] WaveDataArray { get; }
    internal SampleHeader[] SampleHeaderArray { get; }
    internal Preset[] PresetArray { get; }
    internal Instrument[] InstrumentArray { get; }
    public SoundFont(Stream stream);
    public SoundFont(string path);
    private void Load(Stream stream);
    public virtual string ToString();
    private void CheckSamples();
    private void CheckRegions();
    public SoundFontInfo get_Info();
    public int get_BitsPerSample();
    [NullableContextAttribute("0")]
public ReadOnlySpan`1<short> get_WaveData();
    public IReadOnlyList`1<SampleHeader> get_SampleHeaders();
    public IReadOnlyList`1<Preset> get_Presets();
    public IReadOnlyList`1<Instrument> get_Instruments();
    internal Int16[] get_WaveDataArray();
    internal SampleHeader[] get_SampleHeaderArray();
    internal Preset[] get_PresetArray();
    internal Instrument[] get_InstrumentArray();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MeltySynth.SoundFontInfo : object {
    private SoundFontVersion version;
    private string targetSoundEngine;
    private string bankName;
    private string romName;
    private SoundFontVersion romVersion;
    private string creationDate;
    private string author;
    private string targetProduct;
    private string copyright;
    private string comments;
    private string tools;
    public SoundFontVersion Version { get; }
    public string TargetSoundEngine { get; }
    public string BankName { get; }
    public string RomName { get; }
    public SoundFontVersion RomVersion { get; }
    public string CeationDate { get; }
    public string Author { get; }
    public string TargetProduct { get; }
    public string Copyright { get; }
    public string Comments { get; }
    public string Tools { get; }
    internal SoundFontInfo(BinaryReader reader);
    public virtual string ToString();
    public SoundFontVersion get_Version();
    public string get_TargetSoundEngine();
    public string get_BankName();
    public string get_RomName();
    public SoundFontVersion get_RomVersion();
    public string get_CeationDate();
    public string get_Author();
    public string get_TargetProduct();
    public string get_Copyright();
    public string get_Comments();
    public string get_Tools();
}
internal static class MeltySynth.SoundFontMath : object {
    public static float HalfPi;
    public static float NonAudible;
    private static double logNonAudible;
    private static SoundFontMath();
    public static float TimecentsToSeconds(float x);
    public static float CentsToHertz(float x);
    public static float CentsToMultiplyingFactor(float x);
    public static float DecibelsToLinear(float x);
    public static float LinearToDecibels(float x);
    public static float KeyNumberToMultiplyingFactor(int cents, int key);
    public static double ExpCutoff(double x);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MeltySynth.SoundFontParameters : object {
    private SampleHeader[] sampleHeaders;
    private Preset[] presets;
    private Instrument[] instruments;
    public SampleHeader[] SampleHeaders { get; }
    public Preset[] Presets { get; }
    public Instrument[] Instruments { get; }
    internal SoundFontParameters(BinaryReader reader);
    public SampleHeader[] get_SampleHeaders();
    public Preset[] get_Presets();
    public Instrument[] get_Instruments();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MeltySynth.SoundFontSampleData : object {
    private int bitsPerSample;
    private Int16[] samples;
    public int BitsPerSample { get; }
    public Int16[] Samples { get; }
    internal SoundFontSampleData(BinaryReader reader);
    public int get_BitsPerSample();
    public Int16[] get_Samples();
}
public class MeltySynth.SoundFontVersion : ValueType {
    private short major;
    private short minor;
    public short Major { get; }
    public short Minor { get; }
    internal SoundFontVersion(short major, short minor);
    [NullableContextAttribute("1")]
public virtual string ToString();
    public short get_Major();
    public short get_Minor();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MeltySynth.Synthesizer : object {
    private static int channelCount;
    private static int percussionChannel;
    private SoundFont soundFont;
    private int sampleRate;
    private int blockSize;
    private int maximumPolyphony;
    private bool enableReverbAndChorus;
    private int minimumVoiceDuration;
    private Dictionary`2<int, Preset> presetLookup;
    private Preset defaultPreset;
    private Channel[] channels;
    private VoiceCollection voices;
    private Single[] blockLeft;
    private Single[] blockRight;
    private float inverseBlockSize;
    private int blockRead;
    private float masterVolume;
    [NullableAttribute("2")]
private Reverb reverb;
    [NullableAttribute("2")]
private Single[] reverbInput;
    [NullableAttribute("2")]
private Single[] reverbOutputLeft;
    [NullableAttribute("2")]
private Single[] reverbOutputRight;
    [NullableAttribute("2")]
private Chorus chorus;
    [NullableAttribute("2")]
private Single[] chorusInputLeft;
    [NullableAttribute("2")]
private Single[] chorusInputRight;
    [NullableAttribute("2")]
private Single[] chorusOutputLeft;
    [NullableAttribute("2")]
private Single[] chorusOutputRight;
    public int BlockSize { get; }
    public int MaximumPolyphony { get; }
    public int ChannelCount { get; }
    public int PercussionChannel { get; }
    public SoundFont SoundFont { get; }
    public int SampleRate { get; }
    public int ActiveVoiceCount { get; }
    public float MasterVolume { get; public set; }
    internal int MinimumVoiceDuration { get; }
    internal Channel[] Channels { get; }
    public Synthesizer(string soundFontPath, int sampleRate);
    public Synthesizer(SoundFont soundFont, int sampleRate);
    public Synthesizer(string soundFontPath, SynthesizerSettings settings);
    public Synthesizer(SoundFont soundFont, SynthesizerSettings settings);
    private static Synthesizer();
    public void ProcessMidiMessage(int channel, int command, int data1, int data2);
    public void NoteOff(int channel, int key);
    public void NoteOn(int channel, int key, int velocity);
    public void NoteOffAll(bool immediate);
    public void NoteOffAll(int channel, bool immediate);
    public void ResetAllControllers();
    public void ResetAllControllers(int channel);
    public void Reset();
    [NullableContextAttribute("0")]
public sealed virtual void Render(Span`1<float> left, Span`1<float> right);
    private void RenderBlock();
    private void WriteBlock(float previousGain, float currentGain, Single[] source, Single[] destination);
    public int get_BlockSize();
    public int get_MaximumPolyphony();
    public int get_ChannelCount();
    public int get_PercussionChannel();
    public SoundFont get_SoundFont();
    public int get_SampleRate();
    public int get_ActiveVoiceCount();
    public float get_MasterVolume();
    public void set_MasterVolume(float value);
    internal int get_MinimumVoiceDuration();
    internal Channel[] get_Channels();
}
public class MeltySynth.SynthesizerSettings : object {
    internal static int DefaultBlockSize;
    internal static int DefaultMaximumPolyphony;
    internal static bool DefaultEnableReverbAndChorus;
    private int sampleRate;
    private int blockSize;
    private int maximumPolyphony;
    private bool enableReverbAndChorus;
    public int SampleRate { get; public set; }
    public int BlockSize { get; public set; }
    public int MaximumPolyphony { get; public set; }
    public bool EnableReverbAndChorus { get; public set; }
    public SynthesizerSettings(int sampleRate);
    private static SynthesizerSettings();
    private static void CheckSampleRate(int value);
    private static void CheckBlockSize(int value);
    private static void CheckMaximumPolyphony(int value);
    public int get_SampleRate();
    public void set_SampleRate(int value);
    public int get_BlockSize();
    public void set_BlockSize(int value);
    public int get_MaximumPolyphony();
    public void set_MaximumPolyphony(int value);
    public bool get_EnableReverbAndChorus();
    public void set_EnableReverbAndChorus(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MeltySynth.Voice : object {
    private Synthesizer synthesizer;
    private VolumeEnvelope volEnv;
    private ModulationEnvelope modEnv;
    private Lfo vibLfo;
    private Lfo modLfo;
    private Oscillator oscillator;
    private BiQuadFilter filter;
    private Single[] block;
    private float previousMixGainLeft;
    private float previousMixGainRight;
    private float currentMixGainLeft;
    private float currentMixGainRight;
    private float previousReverbSend;
    private float previousChorusSend;
    private float currentReverbSend;
    private float currentChorusSend;
    private int exclusiveClass;
    private int channel;
    private int key;
    private int velocity;
    private float noteGain;
    private float cutoff;
    private float resonance;
    private float vibLfoToPitch;
    private float modLfoToPitch;
    private float modEnvToPitch;
    private int modLfoToCutoff;
    private int modEnvToCutoff;
    private bool dynamicCutoff;
    private float modLfoToVolume;
    private bool dynamicVolume;
    private float instrumentPan;
    private float instrumentReverb;
    private float instrumentChorus;
    private float smoothedCutoff;
    private VoiceState voiceState;
    private int voiceLength;
    public float Priority { get; }
    public Single[] Block { get; }
    public float PreviousMixGainLeft { get; }
    public float PreviousMixGainRight { get; }
    public float CurrentMixGainLeft { get; }
    public float CurrentMixGainRight { get; }
    public float PreviousReverbSend { get; }
    public float PreviousChorusSend { get; }
    public float CurrentReverbSend { get; }
    public float CurrentChorusSend { get; }
    public int ExclusiveClass { get; }
    public int Channel { get; }
    public int Key { get; }
    public int Velocity { get; }
    public int VoiceLength { get; }
    internal Voice(Synthesizer synthesizer);
    public void Start(RegionPair region, int channel, int key, int velocity);
    public void End();
    public void Kill();
    public bool Process();
    private void ReleaseIfNecessary(Channel channelInfo);
    public float get_Priority();
    public Single[] get_Block();
    public float get_PreviousMixGainLeft();
    public float get_PreviousMixGainRight();
    public float get_CurrentMixGainLeft();
    public float get_CurrentMixGainRight();
    public float get_PreviousReverbSend();
    public float get_PreviousChorusSend();
    public float get_CurrentReverbSend();
    public float get_CurrentChorusSend();
    public int get_ExclusiveClass();
    public int get_Channel();
    public int get_Key();
    public int get_Velocity();
    public int get_VoiceLength();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MeltySynth.VoiceCollection : object {
    private Synthesizer synthesizer;
    private Voice[] voices;
    private int activeVoiceCount;
    public int ActiveVoiceCount { get; }
    internal VoiceCollection(Synthesizer synthesizer, int maxActiveVoiceCount);
    public Voice RequestNew(InstrumentRegion region, int channel);
    public void Process();
    public void Clear();
    public Enumerator GetEnumerator();
    public int get_ActiveVoiceCount();
}
internal class MeltySynth.VolumeEnvelope : object {
    [NullableAttribute("1")]
private Synthesizer synthesizer;
    private double attackSlope;
    private double decaySlope;
    private double releaseSlope;
    private double attackStartTime;
    private double holdStartTime;
    private double decayStartTime;
    private double releaseStartTime;
    private float sustainLevel;
    private float releaseLevel;
    private int processedSampleCount;
    private Stage stage;
    private float value;
    private float priority;
    public float Value { get; }
    public float Priority { get; }
    [NullableContextAttribute("1")]
internal VolumeEnvelope(Synthesizer synthesizer);
    public void Start(float delay, float attack, float hold, float decay, float sustain, float release);
    public void Release();
    public bool Process();
    private bool Process(int sampleCount);
    public float get_Value();
    public float get_Priority();
}
internal class MeltySynth.Zone : ValueType {
    private ArraySegment`1<Generator> generators;
    public static Zone Empty { get; }
    public ArraySegment`1<Generator> Generators { get; }
    private Zone(ArraySegment`1<Generator> generators);
    [NullableContextAttribute("1")]
private Zone(ZoneInfo info, Generator[] generators);
    [NullableContextAttribute("1")]
internal static Zone[] Create(ZoneInfo[] infos, Generator[] generators);
    public static Zone get_Empty();
    public ArraySegment`1<Generator> get_Generators();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MeltySynth.ZoneInfo : object {
    private int generatorIndex;
    private int modulatorIndex;
    private int generatorCount;
    private int modulatorCount;
    public int GeneratorIndex { get; }
    public int ModulatorIndex { get; }
    public int GeneratorCount { get; }
    public int ModulatorCount { get; }
    private ZoneInfo(BinaryReader reader);
    internal static ZoneInfo[] ReadFromChunk(BinaryReader reader, int size);
    public int get_GeneratorIndex();
    public int get_ModulatorIndex();
    public int get_GeneratorCount();
    public int get_ModulatorCount();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
