public class ControlzEx.Automation.Peers.TabControlExAutomationPeer : TabControlAutomationPeer {
    public TabControlExAutomationPeer(TabControl owner);
    protected virtual ItemAutomationPeer CreateItemAutomationPeer(object item);
}
public class ControlzEx.Automation.Peers.TabItemExAutomationPeer : TabItemAutomationPeer {
    public TabItemExAutomationPeer(object owner, TabControlAutomationPeer tabControlAutomationPeer);
    protected virtual List`1<AutomationPeer> GetChildrenCore();
    private UIElement GetWrapper();
}
[TemplatePartAttribute]
public class ControlzEx.BadgedEx : ContentControl {
    public static string BadgeContainerPartName;
    [CLSCompliantAttribute("False")]
protected FrameworkElement _badgeContainer;
    public static DependencyProperty BadgeProperty;
    public static DependencyProperty BadgeFontFamilyProperty;
    public static DependencyProperty BadgeFontStyleProperty;
    public static DependencyProperty BadgeFontWeightProperty;
    public static DependencyProperty BadgeFontStretchProperty;
    public static DependencyProperty BadgeFontSizeProperty;
    public static DependencyProperty BadgeBackgroundProperty;
    public static DependencyProperty BadgeForegroundProperty;
    public static DependencyProperty BadgeBorderBrushProperty;
    public static DependencyProperty BadgeBorderThicknessProperty;
    public static DependencyProperty BadgePlacementModeProperty;
    public static DependencyProperty BadgeMarginProperty;
    public static DependencyProperty BadgeTemplateProperty;
    public static DependencyProperty BadgeTemplateSelectorProperty;
    public static DependencyProperty BadgeStringFormatProperty;
    public static RoutedEvent BadgeChangedEvent;
    private static DependencyPropertyKey IsBadgeSetPropertyKey;
    public static DependencyProperty IsBadgeSetProperty;
    public object Badge { get; public set; }
    [BindableAttribute("True")]
[LocalizabilityAttribute]
public FontFamily BadgeFontFamily { get; public set; }
    [BindableAttribute("True")]
public FontStyle BadgeFontStyle { get; public set; }
    [BindableAttribute("True")]
public FontWeight BadgeFontWeight { get; public set; }
    [BindableAttribute("True")]
public FontStretch BadgeFontStretch { get; public set; }
    [TypeConverterAttribute("System.Windows.FontSizeConverter")]
[LocalizabilityAttribute]
public double BadgeFontSize { get; public set; }
    public Brush BadgeBackground { get; public set; }
    public Brush BadgeForeground { get; public set; }
    public Brush BadgeBorderBrush { get; public set; }
    public Thickness BadgeBorderThickness { get; public set; }
    public BadgePlacementMode BadgePlacementMode { get; public set; }
    public Thickness BadgeMargin { get; public set; }
    public DataTemplate BadgeTemplate { get; public set; }
    public DataTemplateSelector BadgeTemplateSelector { get; public set; }
    public string BadgeStringFormat { get; public set; }
    public bool IsBadgeSet { get; private set; }
    private static BadgedEx();
    public object get_Badge();
    public void set_Badge(object value);
    public FontFamily get_BadgeFontFamily();
    public void set_BadgeFontFamily(FontFamily value);
    public FontStyle get_BadgeFontStyle();
    public void set_BadgeFontStyle(FontStyle value);
    public FontWeight get_BadgeFontWeight();
    public void set_BadgeFontWeight(FontWeight value);
    public FontStretch get_BadgeFontStretch();
    public void set_BadgeFontStretch(FontStretch value);
    public double get_BadgeFontSize();
    public void set_BadgeFontSize(double value);
    public Brush get_BadgeBackground();
    public void set_BadgeBackground(Brush value);
    public Brush get_BadgeForeground();
    public void set_BadgeForeground(Brush value);
    public Brush get_BadgeBorderBrush();
    public void set_BadgeBorderBrush(Brush value);
    public Thickness get_BadgeBorderThickness();
    public void set_BadgeBorderThickness(Thickness value);
    public BadgePlacementMode get_BadgePlacementMode();
    public void set_BadgePlacementMode(BadgePlacementMode value);
    public Thickness get_BadgeMargin();
    public void set_BadgeMargin(Thickness value);
    public DataTemplate get_BadgeTemplate();
    public void set_BadgeTemplate(DataTemplate value);
    public DataTemplateSelector get_BadgeTemplateSelector();
    public void set_BadgeTemplateSelector(DataTemplateSelector value);
    public string get_BadgeStringFormat();
    public void set_BadgeStringFormat(string value);
    public void add_BadgeChanged(RoutedPropertyChangedEventHandler`1<object> value);
    public void remove_BadgeChanged(RoutedPropertyChangedEventHandler`1<object> value);
    public bool get_IsBadgeSet();
    private void set_IsBadgeSet(bool value);
    private static void OnBadgeChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public virtual void OnApplyTemplate();
    protected virtual Size ArrangeOverride(Size arrangeBounds);
}
public enum ControlzEx.BadgePlacementMode : Enum {
    public int value__;
    public static BadgePlacementMode TopLeft;
    public static BadgePlacementMode Top;
    public static BadgePlacementMode TopRight;
    public static BadgePlacementMode Right;
    public static BadgePlacementMode BottomRight;
    public static BadgePlacementMode Bottom;
    public static BadgePlacementMode BottomLeft;
    public static BadgePlacementMode Left;
}
public class ControlzEx.Behaviors.GlowWindowBehavior : Behavior`1<Window> {
    private static TimeSpan glowTimerDelay;
    private GlowWindow left;
    private GlowWindow right;
    private GlowWindow top;
    private GlowWindow bottom;
    private DispatcherTimer makeGlowVisibleTimer;
    private IntPtr windowHandle;
    private HwndSource hwndSource;
    public static DependencyProperty GlowBrushProperty;
    public static DependencyProperty NonActiveGlowBrushProperty;
    public static DependencyProperty IsGlowTransitionEnabledProperty;
    public static DependencyProperty ResizeBorderThicknessProperty;
    private WINDOWPOS prevWindowPos;
    private GlowWindow[] loadedGlowWindows;
    private bool updatingZOrder;
    public Brush GlowBrush { get; public set; }
    public Brush NonActiveGlowBrush { get; public set; }
    public bool IsGlowTransitionEnabled { get; public set; }
    public Thickness ResizeBorderThickness { get; public set; }
    private bool IsActiveGlowDisabled { get; }
    private bool IsNoneActiveGlowDisabled { get; }
    private static GlowWindowBehavior();
    private static void OnGlowBrushChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public Brush get_GlowBrush();
    public void set_GlowBrush(Brush value);
    public Brush get_NonActiveGlowBrush();
    public void set_NonActiveGlowBrush(Brush value);
    public bool get_IsGlowTransitionEnabled();
    public void set_IsGlowTransitionEnabled(bool value);
    public Thickness get_ResizeBorderThickness();
    public void set_ResizeBorderThickness(Thickness value);
    private bool get_IsActiveGlowDisabled();
    private bool get_IsNoneActiveGlowDisabled();
    protected virtual void OnAttached();
    protected virtual void OnDetaching();
    private void AssociatedObjectSourceInitialized(object sender, EventArgs e);
    private void AssociatedObjectStateChanged(object sender, EventArgs e);
    private void AssociatedObjectUnloaded(object sender, RoutedEventArgs e);
    private void DestroyGlowVisibleTimer();
    private void GlowVisibleTimerOnTick(object sender, EventArgs e);
    private void RestoreGlow();
    private void HideGlow();
    private void AssociatedObjectOnLoaded(object sender, RoutedEventArgs routedEventArgs);
    private void AssociatedObjectOnClosing(object o, CancelEventArgs args);
    private IntPtr AssociatedObjectWindowProc(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, Boolean& handled);
    private void UpdateZOrderOfThisAndOwner();
    private void UpdateZOrderOfOwner(IntPtr hwndWindow, IntPtr hwndOwner);
    private void AssociatedObjectActivatedOrDeactivated(object sender, EventArgs e);
    private void AssociatedObjectIsVisibleChanged(object sender, DependencyPropertyChangedEventArgs e);
    private void Update();
    private void UpdateCore();
    private void SetOpacityTo(double newOpacity);
    private void StartOpacityStoryboard();
    private void Show();
    private void Close();
    [CompilerGeneratedAttribute]
private void <AssociatedObjectOnLoaded>b__38_0();
}
public class ControlzEx.Behaviors.TextBoxInputMaskBehavior : Behavior`1<TextBox> {
    private PropertyChangeNotifier textPropertyNotifier;
    public static DependencyProperty InputMaskProperty;
    public static DependencyProperty PromptCharProperty;
    public static DependencyProperty ResetOnSpaceProperty;
    public static DependencyProperty IgnoreSpaceProperty;
    [CompilerGeneratedAttribute]
private MaskedTextProvider <Provider>k__BackingField;
    public string InputMask { get; public set; }
    public char PromptChar { get; public set; }
    public bool ResetOnSpace { get; public set; }
    public bool IgnoreSpace { get; public set; }
    public MaskedTextProvider Provider { get; private set; }
    private static TextBoxInputMaskBehavior();
    public string get_InputMask();
    public void set_InputMask(string value);
    public char get_PromptChar();
    public void set_PromptChar(char value);
    public bool get_ResetOnSpace();
    public void set_ResetOnSpace(bool value);
    public bool get_IgnoreSpace();
    public void set_IgnoreSpace(bool value);
    [CompilerGeneratedAttribute]
public MaskedTextProvider get_Provider();
    [CompilerGeneratedAttribute]
private void set_Provider(MaskedTextProvider value);
    protected virtual void OnAttached();
    protected virtual void OnDetaching();
    private void AssociatedObjectLoaded(object sender, RoutedEventArgs e);
    private void AssociatedObjectPreviewTextInput(object sender, TextCompositionEventArgs e);
    private void AssociatedObjectPreviewKeyDown(object sender, KeyEventArgs e);
    private void Pasting(object sender, DataObjectPastingEventArgs e);
    private void UpdateText(object sender, EventArgs eventArgs);
    private string HandleCharacterCasing(string text);
    private bool TreatSelectedText();
    private void RefreshText(int position);
    private void SetText(string text);
    private int GetNextCharacterPosition(int caretIndex);
    private string GetProviderText();
    private int GetAnzahlIncludeLiterals(int index);
    private void Debug(string name);
}
public class ControlzEx.Behaviors.WindowChromeBehavior : Behavior`1<Window> {
    [SecurityCriticalAttribute]
private IntPtr windowHandle;
    [SecurityCriticalAttribute]
private HwndSource hwndSource;
    private PropertyChangeNotifier topMostChangeNotifier;
    private PropertyChangeNotifier borderThicknessChangeNotifier;
    private PropertyChangeNotifier resizeBorderThicknessChangeNotifier;
    private Nullable`1<Thickness> savedBorderThickness;
    private Nullable`1<Thickness> savedResizeBorderThickness;
    private bool savedTopMost;
    private bool isCleanedUp;
    private bool dpiChanged;
    public static DependencyProperty ResizeBorderThicknessProperty;
    public static DependencyProperty IgnoreTaskbarOnMaximizeProperty;
    public static DependencyProperty KeepBorderOnMaximizeProperty;
    public static DependencyProperty TryToBeFlickerFreeProperty;
    private static DependencyPropertyKey IsNCActivePropertyKey;
    public static DependencyProperty IsNCActiveProperty;
    public static DependencyProperty EnableMinimizeProperty;
    public static DependencyProperty EnableMaxRestoreProperty;
    private static List`1<_SystemParameterBoundProperty> _BoundProperties;
    private static SWP SwpFlags;
    private List`1<KeyValuePair`2<WM, MessageHandler>> messageTable;
    private WindowState _lastRegionWindowState;
    private WindowState lastMenuState;
    private WINDOWPOS previousWp;
    private static HT[0...,0...] hitTestBorders;
    public Thickness ResizeBorderThickness { get; public set; }
    public bool IgnoreTaskbarOnMaximize { get; public set; }
    public bool KeepBorderOnMaximize { get; public set; }
    public bool TryToBeFlickerFree { get; public set; }
    public bool IsNCActive { get; private set; }
    public bool EnableMinimize { get; public set; }
    public bool EnableMaxRestore { get; public set; }
    private bool MinimizeAnimation { get; }
    private static WindowChromeBehavior();
    public Thickness get_ResizeBorderThickness();
    public void set_ResizeBorderThickness(Thickness value);
    public bool get_IgnoreTaskbarOnMaximize();
    public void set_IgnoreTaskbarOnMaximize(bool value);
    public bool get_KeepBorderOnMaximize();
    public void set_KeepBorderOnMaximize(bool value);
    public bool get_TryToBeFlickerFree();
    public void set_TryToBeFlickerFree(bool value);
    public bool get_IsNCActive();
    private void set_IsNCActive(bool value);
    private static void OnEnableMinimizeChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void _UpdateMinimizeSystemMenu(bool isVisible);
    public bool get_EnableMinimize();
    public void set_EnableMinimize(bool value);
    private static void OnEnableMaxRestoreChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void _UpdateMaxRestoreSystemMenu(bool isVisible);
    public bool get_EnableMaxRestore();
    public void set_EnableMaxRestore(bool value);
    protected virtual void OnAttached();
    private void TopMostHack();
    public static Thickness GetDefaultResizeBorderThickness();
    private void BorderThicknessChangeNotifierOnValueChanged(object sender, EventArgs e);
    private void ResizeBorderThicknessChangeNotifierOnValueChanged(object sender, EventArgs e);
    private void TopMostChangeNotifierOnValueChanged(object sender, EventArgs e);
    private static void OnIgnoreTaskbarOnMaximizeChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnKeepBorderOnMaximizeChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnTryToBeFlickerFreeChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    [SecuritySafeCriticalAttribute]
private void Cleanup(bool isClosing);
    protected virtual void OnCleanup();
    protected virtual void OnDetaching();
    private void AssociatedObject_SourceInitialized(object sender, EventArgs e);
    protected virtual void AssociatedObject_Loaded(object sender, RoutedEventArgs e);
    private void AssociatedObject_Unloaded(object sender, RoutedEventArgs e);
    private void AssociatedObject_Closed(object sender, EventArgs e);
    private void AssociatedObject_StateChanged(object sender, EventArgs e);
    private void AssociatedObject_Deactivated(object sender, EventArgs e);
    private void AssociatedObject_LostFocus(object sender, RoutedEventArgs e);
    private void HandleMaximize();
    private void HandleBorderAndResizeBorderThicknessDuringMaximize();
    private static void Invoke(DispatcherObject dispatcherObject, Action invokeAction);
    [SecuritySafeCriticalAttribute]
private void _OnChromePropertyChangedThatRequiresRepaint();
    [SecurityCriticalAttribute]
private void _ApplyNewCustomChrome();
    private bool get_MinimizeAnimation();
    [SecurityCriticalAttribute]
private IntPtr WindowProc(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, Boolean& handled);
    [SecurityCriticalAttribute]
private IntPtr _HandleNCUAHDRAWCAPTION(WM uMsg, IntPtr wParam, IntPtr lParam, Boolean& handled);
    private IntPtr _HandleSETICONOrSETTEXT(WM uMsg, IntPtr wParam, IntPtr lParam, Boolean& handled);
    [SecurityCriticalAttribute]
private IntPtr _HandleSYSCOMMAND(WM uMsg, IntPtr wParam, IntPtr lParam, Boolean& handled);
    [SecurityCriticalAttribute]
private IntPtr _HandleNCACTIVATE(WM uMsg, IntPtr wParam, IntPtr lParam, Boolean& handled);
    [SecurityCriticalAttribute]
private static RECT AdjustWorkingAreaForAutoHide(IntPtr monitorContainingApplication, RECT area);
    [SecurityCriticalAttribute]
private IntPtr _HandleNCCALCSIZE(WM uMsg, IntPtr wParam, IntPtr lParam, Boolean& handled);
    private HT _GetHTFromResizeGripDirection(ResizeGripDirection direction);
    [SecurityCriticalAttribute]
private IntPtr _HandleNCPAINT(WM uMsg, IntPtr wParam, IntPtr lParam, Boolean& handled);
    [SecurityCriticalAttribute]
private IntPtr _HandleNCHITTEST(WM uMsg, IntPtr wParam, IntPtr lParam, Boolean& handled);
    [SecurityCriticalAttribute]
private IntPtr _HandleNCRBUTTONUP(WM uMsg, IntPtr wParam, IntPtr lParam, Boolean& handled);
    [SecurityCriticalAttribute]
private IntPtr _HandleSIZE(WM uMsg, IntPtr wParam, IntPtr lParam, Boolean& handled);
    [SecurityCriticalAttribute]
private IntPtr _HandleWINDOWPOSCHANGING(WM uMsg, IntPtr wParam, IntPtr lParam, Boolean& handled);
    [SecurityCriticalAttribute]
private IntPtr _HandleWINDOWPOSCHANGED(WM uMsg, IntPtr wParam, IntPtr lParam, Boolean& handled);
    [SecurityCriticalAttribute]
private IntPtr _HandleGETMINMAXINFO(WM uMsg, IntPtr wParam, IntPtr lParam, Boolean& handled);
    [SecurityCriticalAttribute]
private IntPtr _HandleDWMCOMPOSITIONCHANGED(WM uMsg, IntPtr wParam, IntPtr lParam, Boolean& handled);
    [SecurityCriticalAttribute]
private IntPtr _HandleENTERSIZEMOVEForAnimation(WM uMsg, IntPtr wParam, IntPtr lParam, Boolean& handled);
    [SecurityCriticalAttribute]
private IntPtr _HandleEXITSIZEMOVEForAnimation(WM uMsg, IntPtr wParam, IntPtr lParam, Boolean& handled);
    [SecurityCriticalAttribute]
private IntPtr _HandleMOVEForRealSize(WM uMsg, IntPtr wParam, IntPtr lParam, Boolean& handled);
    [SecurityCriticalAttribute]
private IntPtr _HandleDPICHANGED(WM uMsg, IntPtr wParam, IntPtr lParam, Boolean& handled);
    [SecurityCriticalAttribute]
private bool _ModifyStyle(WS removeStyle, WS addStyle);
    [SecurityCriticalAttribute]
private WindowState _GetHwndState();
    [SecurityCriticalAttribute]
private Rect _GetWindowRect();
    [SecurityCriticalAttribute]
private void _UpdateSystemMenu(Nullable`1<WindowState> assumeState);
    [SecurityCriticalAttribute]
private void _UpdateFrameState(bool force);
    [SecurityCriticalAttribute]
private void _ClearRegion();
    [SecurityCriticalAttribute]
private RECT _GetClientRectRelativeToWindowRect(IntPtr hWnd);
    [SecurityCriticalAttribute]
private void _SetRegion(Nullable`1<WINDOWPOS> wp);
    [SecurityCriticalAttribute]
private static IntPtr _CreateRectRgn(Rect region);
    private HT _HitTestNca(Rect windowPosition, Point mousePosition);
    [SecurityCriticalAttribute]
private void _RestoreStandardChromeState(bool isClosing);
    [SecurityCriticalAttribute]
private void _RestoreHrgn();
    [CompilerGeneratedAttribute]
private void <AssociatedObject_SourceInitialized>b__56_0();
}
public class ControlzEx.Controls.Glow : Control {
    public static DependencyProperty GlowBrushProperty;
    public static DependencyProperty NonActiveGlowBrushProperty;
    public static DependencyProperty IsGlowProperty;
    public static DependencyProperty DirectionProperty;
    public Brush GlowBrush { get; public set; }
    public Brush NonActiveGlowBrush { get; public set; }
    public bool IsGlow { get; public set; }
    public GlowDirection Direction { get; public set; }
    private static Glow();
    public Brush get_GlowBrush();
    public void set_GlowBrush(Brush value);
    public Brush get_NonActiveGlowBrush();
    public void set_NonActiveGlowBrush(Brush value);
    public bool get_IsGlow();
    public void set_IsGlow(bool value);
    public GlowDirection get_Direction();
    public void set_Direction(GlowDirection value);
}
public enum ControlzEx.Controls.GlowDirection : Enum {
    public int value__;
    public static GlowDirection Left;
    public static GlowDirection Right;
    public static GlowDirection Top;
    public static GlowDirection Bottom;
}
[DebuggerDisplayAttribute("{Title}")]
public class ControlzEx.Controls.GlowWindow : Window {
    private Func`3<Point, RECT, HT> getHitTestValue;
    private Func`2<RECT, double> getLeft;
    private Func`2<RECT, double> getTop;
    private Func`2<RECT, double> getWidth;
    private Func`2<RECT, double> getHeight;
    private IntPtr windowHandle;
    private IntPtr ownerWindowHandle;
    private bool closing;
    private HwndSource hwndSource;
    private PropertyChangeNotifier resizeModeChangeNotifier;
    private Window owner;
    private RECT lastUpdateCoreRect;
    [CompilerGeneratedAttribute]
private bool <IsGlowing>k__BackingField;
    [CompilerGeneratedAttribute]
private Storyboard <OpacityStoryboard>k__BackingField;
    public static DependencyProperty ResizeBorderThicknessProperty;
    internal GlowWindow glowWindow;
    private Glow glow;
    private bool _contentLoaded;
    public bool IsGlowing { get; public set; }
    public Storyboard OpacityStoryboard { get; public set; }
    public Thickness ResizeBorderThickness { get; public set; }
    private static GlowWindow();
    public GlowWindow(Window owner, GlowWindowBehavior behavior, GlowDirection direction);
    private static IntPtr LoadCursor(IntPtr hInstance, IDC_SIZE_CURSORS cursor);
    private static IntPtr SetCursor(IntPtr cursor);
    [CompilerGeneratedAttribute]
public void set_IsGlowing(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsGlowing();
    [CompilerGeneratedAttribute]
public Storyboard get_OpacityStoryboard();
    [CompilerGeneratedAttribute]
public void set_OpacityStoryboard(Storyboard value);
    public Thickness get_ResizeBorderThickness();
    public void set_ResizeBorderThickness(Thickness value);
    private static void OnResizeBorderThicknessChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public virtual void OnApplyTemplate();
    protected virtual void OnSourceInitialized(EventArgs e);
    private void ResizeModeChanged(object sender, EventArgs e);
    public void Update();
    private void SetVisibilityIfPossible(Visibility newVisibility);
    private bool IsWindowHandleValid();
    private bool IsOwnerHandleValid();
    internal bool CanUpdateCore();
    internal void UpdateCore(RECT rect);
    private void OnOwnerActivated(object sender, EventArgs e);
    private void OnOwnerDeactivated(object sender, EventArgs e);
    private void OnOwnerIsVisibleChanged(object sender, DependencyPropertyChangedEventArgs e);
    internal void InternalClose();
    private IntPtr WndProc(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, Boolean& handled);
    private void InvokeIfCanUpdateCore(Action invokeAction);
    private void InvokeAsyncIfCanUpdateCore(DispatcherPriority dispatcherPriority, Action invokeAction);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.8.1.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.8.1.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
    [CompilerGeneratedAttribute]
private void <.ctor>b__16_0(object sender, CancelEventArgs e);
    [CompilerGeneratedAttribute]
private double <.ctor>b__16_1(RECT rect);
    [CompilerGeneratedAttribute]
private double <.ctor>b__16_2(RECT rect);
    [CompilerGeneratedAttribute]
private double <.ctor>b__16_3(RECT rect);
    [CompilerGeneratedAttribute]
private double <.ctor>b__16_4(RECT rect);
    [CompilerGeneratedAttribute]
private HT <.ctor>b__16_5(Point p, RECT rect);
    [CompilerGeneratedAttribute]
private double <.ctor>b__16_7(RECT rect);
    [CompilerGeneratedAttribute]
private double <.ctor>b__16_8(RECT rect);
    [CompilerGeneratedAttribute]
private double <.ctor>b__16_9(RECT rect);
    [CompilerGeneratedAttribute]
private HT <.ctor>b__16_10(Point p, RECT rect);
    [CompilerGeneratedAttribute]
private double <.ctor>b__16_11(RECT rect);
    [CompilerGeneratedAttribute]
private double <.ctor>b__16_12(RECT rect);
    [CompilerGeneratedAttribute]
private double <.ctor>b__16_13(RECT rect);
    [CompilerGeneratedAttribute]
private double <.ctor>b__16_14(RECT rect);
    [CompilerGeneratedAttribute]
private HT <.ctor>b__16_15(Point p, RECT rect);
    [CompilerGeneratedAttribute]
private double <.ctor>b__16_16(RECT rect);
    [CompilerGeneratedAttribute]
private double <.ctor>b__16_18(RECT rect);
    [CompilerGeneratedAttribute]
private double <.ctor>b__16_19(RECT rect);
    [CompilerGeneratedAttribute]
private HT <.ctor>b__16_20(Point p, RECT rect);
    [CompilerGeneratedAttribute]
private void <.ctor>b__16_21(object sender, EventArgs e);
    [CompilerGeneratedAttribute]
private void <Update>b__33_0();
    [CompilerGeneratedAttribute]
private void <Update>b__33_1();
    [CompilerGeneratedAttribute]
private void <WndProc>g__FixWindowZOrder|43_0();
}
[TemplatePartAttribute]
[TemplatePartAttribute]
public class ControlzEx.Controls.TabControlEx : TabControl {
    private static MethodInfo updateSelectedContentMethodInfo;
    private Panel itemsHolder;
    public static DependencyProperty ChildContentVisibilityProperty;
    public static DependencyProperty TabPanelVisibilityProperty;
    public static DependencyProperty OwningTabItemProperty;
    public static DependencyProperty OwningItemProperty;
    public static DependencyProperty MoveFocusToContentWhenSelectionChangesProperty;
    public bool MoveFocusToContentWhenSelectionChanges { get; public set; }
    public Visibility TabPanelVisibility { get; public set; }
    public Visibility ChildContentVisibility { get; public set; }
    private static TabControlEx();
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ContentPresenter")]
public static TabItem GetOwningTabItem(DependencyObject element);
    public static void SetOwningTabItem(DependencyObject element, TabItem value);
    public static void SetOwningItem(DependencyObject element, object value);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ContentPresenter")]
public static object GetOwningItem(DependencyObject element);
    public bool get_MoveFocusToContentWhenSelectionChanges();
    public void set_MoveFocusToContentWhenSelectionChanges(bool value);
    public Visibility get_TabPanelVisibility();
    public void set_TabPanelVisibility(Visibility value);
    public Visibility get_ChildContentVisibility();
    public void set_ChildContentVisibility(Visibility value);
    public virtual void OnApplyTemplate();
    protected virtual void OnInitialized(EventArgs e);
    protected virtual void OnItemsChanged(NotifyCollectionChangedEventArgs e);
    protected virtual void OnSelectionChanged(SelectionChangedEventArgs e);
    private void RaiseSelectionChangedEvent(SelectionChangedEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    public TabItem GetSelectedTabItem();
    private void ClearItemsHolder();
    private void RefreshItemsHolder();
    private void HandleTabControlExLoaded(object sender, RoutedEventArgs e);
    private void HandleTabControlExUnloaded(object sender, RoutedEventArgs e);
    private void OnGeneratorStatusChanged(object sender, EventArgs e);
    private void OnGeneratorItemsChanged(object sender, ItemsChangedEventArgs e);
    private void UpdateSelectedContent();
    private void CreateChildContentPresenterIfRequired(object item, TabItem tabItem);
    public ContentPresenter FindChildContentPresenter(object item, TabItem tabItem);
    private void MoveFocusToContent(ContentPresenter contentPresenter, TabItem tabItem);
}
internal static class ControlzEx.DesignerConstants : object {
    public static string LibraryName;
    public static string Win32ElementWarning;
}
internal static class ControlzEx.Internal.FrameworkAppContextSwitches : object {
    private static PropertyInfo SelectionPropertiesCanLagBehindSelectionChangedEventPropertyInfo;
    private static bool SelectionPropertiesCanLagBehindSelectionChangedEventDefaultValue;
    internal static bool SelectionPropertiesCanLagBehindSelectionChangedEvent { get; }
    private static FrameworkAppContextSwitches();
    internal static bool get_SelectionPropertiesCanLagBehindSelectionChangedEvent();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class ControlzEx.Internal.ResourceDictionaryHelper : object {
    public static object GetValueFromKey(ResourceDictionary resourceDictionary, object key);
    public static bool ContainsKey(ResourceDictionary resourceDictionary, object key);
}
[ExtensionAttribute]
internal static class ControlzEx.Internal.SelectorAutomationPeerExtensions : object {
    private static MethodInfo RaiseSelectionEventsMethodInfo;
    private static SelectorAutomationPeerExtensions();
    [ExtensionAttribute]
internal static void RaiseSelectionEvents(SelectorAutomationPeer selectorAutomationPeer, SelectionChangedEventArgs e);
}
[ExtensionAttribute]
internal static class ControlzEx.Internal.TabItemExtensions : object {
    private static MethodInfo SetFocusMethodInfo;
    private static TabItemExtensions();
    [ExtensionAttribute]
internal static bool SetFocus(TabItem tabItem);
}
internal static class ControlzEx.Internal.WindowHelper : object {
    public static bool IsWindowHandleValid(IntPtr windowHandle);
}
public class ControlzEx.KeyboardNavigationEx : object {
    private static KeyboardNavigationEx _instance;
    private PropertyInfo _alwaysShowFocusVisual;
    private MethodInfo _showFocusVisual;
    public static DependencyProperty AlwaysShowFocusVisualProperty;
    internal static KeyboardNavigationEx Instance { get; }
    internal bool AlwaysShowFocusVisualInternal { get; internal set; }
    private static KeyboardNavigationEx();
    internal static KeyboardNavigationEx get_Instance();
    internal void ShowFocusVisualInternal();
    internal bool get_AlwaysShowFocusVisualInternal();
    internal void set_AlwaysShowFocusVisualInternal(bool value);
    public static void Focus(UIElement element);
    private static void OnAlwaysShowFocusVisualChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs args);
    private static void FrameworkElementGotFocus(object sender, RoutedEventArgs e);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.UIElement")]
public static bool GetAlwaysShowFocusVisual(UIElement element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.UIElement")]
public static void SetAlwaysShowFocusVisual(UIElement element, bool value);
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
public static class ControlzEx.Native.Constants : object {
    public static int GCLP_HBRBACKGROUND;
    [CLSCompliantAttribute("False")]
public static UInt32 TPM_RETURNCMD;
    [CLSCompliantAttribute("False")]
public static UInt32 TPM_LEFTBUTTON;
    [CLSCompliantAttribute("False")]
public static UInt32 SYSCOMMAND;
    public static int MF_GRAYED;
    public static int MF_BYCOMMAND;
    public static int MF_ENABLED;
    public static int VK_SHIFT;
    public static int VK_CONTROL;
    public static int VK_MENU;
    [CLSCompliantAttribute("False")]
public static UInt32 MAPVK_VK_TO_VSC;
    [CLSCompliantAttribute("False")]
public static UInt32 MAPVK_VSC_TO_VK;
    [CLSCompliantAttribute("False")]
public static UInt32 MAPVK_VK_TO_CHAR;
    [CLSCompliantAttribute("False")]
public static UInt32 MAPVK_VSC_TO_VK_EX;
    [CLSCompliantAttribute("False")]
public static UInt32 MAPVK_VK_TO_VSC_EX;
    public static IntPtr HWND_TOPMOST;
    public static IntPtr HWND_NOTOPMOST;
    public static IntPtr HWND_TOP;
    public static IntPtr HWND_BOTTOM;
    public static int CC_ANYCOLOR;
    private static Constants();
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
public class ControlzEx.Native.SafeLibraryHandle : SafeHandleZeroOrMinusOneIsInvalid {
    protected virtual bool ReleaseHandle();
}
[SuppressUnmanagedCodeSecurityAttribute]
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
public static class ControlzEx.Native.UnsafeNativeMethods : object {
    internal static IntPtr MonitorFromWindow(IntPtr handle, MonitorOptions flags);
    [CLSCompliantAttribute("False")]
public static int LoadString(SafeLibraryHandle hInstance, UInt32 uID, StringBuilder lpBuffer, int nBufferMax);
    internal static bool IsWindow(IntPtr hWnd);
    public static SafeLibraryHandle LoadLibrary(string lpFileName);
    public static bool FreeLibrary(IntPtr hModule);
    public static bool ReleaseCapture();
    public static bool GetWindowRect(IntPtr hWnd, RECT& lpRect);
    public static int GetKeyNameText(int lParam, StringBuilder str, int size);
}
public abstract class ControlzEx.PackIconBase : Control {
    internal abstract virtual void UpdateData();
}
public abstract class ControlzEx.PackIconBase`1 : PackIconBase {
    private static Lazy`1<IDictionary`2<TKind, string>> _dataIndex;
    public static DependencyProperty KindProperty;
    private static DependencyPropertyKey DataPropertyKey;
    public static DependencyProperty DataProperty;
    public TKind Kind { get; public set; }
    [TypeConverterAttribute("System.Windows.Media.GeometryConverter")]
public string Data { get; private set; }
    protected PackIconBase`1(Func`1<IDictionary`2<TKind, string>> dataIndexFactory);
    private static PackIconBase`1();
    private static void OnKindChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs dependencyPropertyChangedEventArgs);
    public TKind get_Kind();
    public void set_Kind(TKind value);
    public string get_Data();
    private void set_Data(string value);
    public virtual void OnApplyTemplate();
    internal virtual void UpdateData();
}
public class ControlzEx.PopupEx : Popup {
    public static DependencyProperty CloseOnMouseLeftButtonDownProperty;
    public static DependencyProperty AllowTopMostProperty;
    private Window hostWindow;
    private Nullable`1<bool> appliedTopMost;
    private static IntPtr HWND_TOPMOST;
    private static IntPtr HWND_NOTOPMOST;
    private static IntPtr HWND_TOP;
    private static IntPtr HWND_BOTTOM;
    public bool CloseOnMouseLeftButtonDown { get; public set; }
    public bool AllowTopMost { get; public set; }
    private static PopupEx();
    public bool get_CloseOnMouseLeftButtonDown();
    public void set_CloseOnMouseLeftButtonDown(bool value);
    public bool get_AllowTopMost();
    public void set_AllowTopMost(bool value);
    public void RefreshPosition();
    private void PopupEx_Loaded(object sender, RoutedEventArgs e);
    private void PopupEx_Opened(object sender, EventArgs e);
    private void hostWindow_Activated(object sender, EventArgs e);
    private void hostWindow_Deactivated(object sender, EventArgs e);
    private void PopupEx_Unloaded(object sender, RoutedEventArgs e);
    private void hostWindow_StateChanged(object sender, EventArgs e);
    private void hostWindow_SizeOrLocationChanged(object sender, EventArgs e);
    private void SetTopmostState(bool isTop);
    protected virtual void OnPreviewMouseLeftButtonDown(MouseButtonEventArgs e);
    internal static int LOWORD(int i);
    [SecurityCriticalAttribute]
private static bool GetWindowRect(IntPtr hWnd, RECT& lpRect);
    [SecurityCriticalAttribute]
private static bool _SetWindowPos(IntPtr hWnd, IntPtr hWndInsertAfter, int x, int y, int cx, int cy, SWP uFlags);
    [SecurityCriticalAttribute]
private static bool SetWindowPos(IntPtr hWnd, IntPtr hWndInsertAfter, int x, int y, int cx, int cy, SWP uFlags);
}
public class ControlzEx.PropertyChangeNotifier : DependencyObject {
    private WeakReference propertySource;
    public static DependencyProperty ValueProperty;
    [CompilerGeneratedAttribute]
private EventHandler ValueChanged;
    [CompilerGeneratedAttribute]
private bool <RaiseValueChanged>k__BackingField;
    public DependencyObject PropertySource { get; }
    [DescriptionAttribute("Gets or sets the value of the watched property.")]
[CategoryAttribute("Behavior")]
[BindableAttribute("True")]
public object Value { get; public set; }
    public bool RaiseValueChanged { get; public set; }
    public PropertyChangeNotifier(DependencyObject propertySource, string path);
    public PropertyChangeNotifier(DependencyObject propertySource, DependencyProperty property);
    public PropertyChangeNotifier(DependencyObject propertySource, PropertyPath property);
    private static PropertyChangeNotifier();
    public DependencyObject get_PropertySource();
    public object get_Value();
    public void set_Value(object value);
    private static void OnValueChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_ValueChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ValueChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public bool get_RaiseValueChanged();
    [CompilerGeneratedAttribute]
public void set_RaiseValueChanged(bool value);
    public sealed virtual void Dispose();
}
internal enum ControlzEx.Standard.ABEdge : Enum {
    public int value__;
    public static ABEdge ABE_LEFT;
    public static ABEdge ABE_TOP;
    public static ABEdge ABE_RIGHT;
    public static ABEdge ABE_BOTTOM;
}
internal enum ControlzEx.Standard.ABMsg : Enum {
    public int value__;
    public static ABMsg ABM_NEW;
    public static ABMsg ABM_REMOVE;
    public static ABMsg ABM_QUERYPOS;
    public static ABMsg ABM_SETPOS;
    public static ABMsg ABM_GETSTATE;
    public static ABMsg ABM_GETTASKBARPOS;
    public static ABMsg ABM_ACTIVATE;
    public static ABMsg ABM_GETAUTOHIDEBAR;
    public static ABMsg ABM_SETAUTOHIDEBAR;
    public static ABMsg ABM_WINDOWPOSCHANGED;
    public static ABMsg ABM_SETSTATE;
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
public enum ControlzEx.Standard.AC : Enum {
    public byte value__;
    public static AC SRC_OVER;
    public static AC SRC_ALPHA;
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
public class ControlzEx.Standard.APPBARDATA : ValueType {
    public int cbSize;
    public IntPtr hWnd;
    public int uCallbackMessage;
    public int uEdge;
    public RECT rc;
    public bool lParam;
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
internal static class ControlzEx.Standard.Assert : object {
    private static void _Break();
    [ConditionalAttribute("DEBUG")]
public static void Evaluate(EvaluateFunction argument);
    [ObsoleteAttribute("Use Assert.AreEqual instead of Assert.Equals", "False")]
[ConditionalAttribute("DEBUG")]
public static void Equals(T expected, T actual);
    [ConditionalAttribute("DEBUG")]
public static void AreEqual(T expected, T actual);
    [ConditionalAttribute("DEBUG")]
public static void LazyAreEqual(Func`1<T> expectedResult, Func`1<T> actualResult);
    [ConditionalAttribute("DEBUG")]
public static void AreNotEqual(T notExpected, T actual);
    [ConditionalAttribute("DEBUG")]
public static void Implies(bool condition, bool result);
    [ConditionalAttribute("DEBUG")]
public static void Implies(bool condition, ImplicationFunction result);
    [ConditionalAttribute("DEBUG")]
public static void IsNeitherNullNorEmpty(string value);
    [ConditionalAttribute("DEBUG")]
public static void IsNeitherNullNorWhitespace(string value);
    [ConditionalAttribute("DEBUG")]
public static void IsNotNull(T value);
    [ConditionalAttribute("DEBUG")]
public static void IsDefault(T value);
    [ConditionalAttribute("DEBUG")]
public static void IsNotDefault(T value);
    [ConditionalAttribute("DEBUG")]
public static void IsFalse(bool condition);
    [ConditionalAttribute("DEBUG")]
public static void IsFalse(bool condition, string message);
    [ConditionalAttribute("DEBUG")]
public static void IsTrue(bool condition);
    [ConditionalAttribute("DEBUG")]
public static void IsTrue(Predicate`1<T> predicate, T arg);
    [ConditionalAttribute("DEBUG")]
public static void IsTrue(bool condition, string message);
    [ConditionalAttribute("DEBUG")]
public static void Fail();
    [ConditionalAttribute("DEBUG")]
public static void Fail(string message);
    [ConditionalAttribute("DEBUG")]
public static void IsNull(T item);
    [ConditionalAttribute("DEBUG")]
public static void BoundedDoubleInc(double lowerBoundInclusive, double value, double upperBoundInclusive);
    [ConditionalAttribute("DEBUG")]
public static void BoundedInteger(int lowerBoundInclusive, int value, int upperBoundExclusive);
    [ConditionalAttribute("DEBUG")]
public static void IsApartmentState(ApartmentState expectedState);
    [ConditionalAttribute("DEBUG")]
public static void NullableIsNotNull(Nullable`1<T> value);
    [ConditionalAttribute("DEBUG")]
public static void NullableIsNull(Nullable`1<T> value);
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
public enum ControlzEx.Standard.BI : Enum {
    public int value__;
    public static BI RGB;
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
public class ControlzEx.Standard.BITMAPINFO : ValueType {
    public BITMAPINFOHEADER bmiHeader;
    public RGBQUAD bmiColors;
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
public class ControlzEx.Standard.BITMAPINFOHEADER : ValueType {
    public int biSize;
    public int biWidth;
    public int biHeight;
    public short biPlanes;
    public short biBitCount;
    public BI biCompression;
    public int biSizeImage;
    public int biXPelsPerMeter;
    public int biYPelsPerMeter;
    public int biClrUsed;
    public int biClrImportant;
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
public class ControlzEx.Standard.BLENDFUNCTION : ValueType {
    public AC BlendOp;
    public byte BlendFlags;
    public byte SourceConstantAlpha;
    public AC AlphaFormat;
}
internal class ControlzEx.Standard.CHANGEFILTERSTRUCT : ValueType {
    public UInt32 cbSize;
    public MSGFLTINFO ExtStatus;
}
internal static class ControlzEx.Standard.CLSID : object {
    public static string ApplicationAssociationRegistration;
    public static string DragDropHelper;
    public static string FileOpenDialog;
    public static string FileSaveDialog;
    public static string TaskbarList;
    public static string EnumerableObjectCollection;
    public static string ShellLink;
    public static string WICImagingFactory;
    public static string DestinationList;
    public static string ApplicationDestinations;
    public static string ApplicationDocumentLists;
    public static T CoCreateInstance(string clsid);
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
public enum ControlzEx.Standard.CombineRgnResult : Enum {
    public int value__;
    public static CombineRgnResult ERROR;
    public static CombineRgnResult NULLREGION;
    public static CombineRgnResult SIMPLEREGION;
    public static CombineRgnResult COMPLEXREGION;
}
internal class ControlzEx.Standard.ComStream : Stream {
    private static int STATFLAG_NONAME;
    private IStream _source;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public ComStream(IStream& stream);
    private void _Validate();
    public virtual void Close();
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual void Flush();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
}
internal class ControlzEx.Standard.CREATESTRUCT : ValueType {
    public IntPtr lpCreateParams;
    public IntPtr hInstance;
    public IntPtr hMenu;
    public IntPtr hwndParent;
    public int cy;
    public int cx;
    public int y;
    public int x;
    public WS style;
    public string lpszName;
    public string lpszClass;
    public WS_EX dwExStyle;
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
[FlagsAttribute]
[CLSCompliantAttribute("False")]
public enum ControlzEx.Standard.CS : Enum {
    public UInt32 value__;
    public static CS VREDRAW;
    public static CS HREDRAW;
    public static CS DBLCLKS;
    public static CS OWNDC;
    public static CS CLASSDC;
    public static CS PARENTDC;
    public static CS NOCLOSE;
    public static CS SAVEBITS;
    public static CS BYTEALIGNCLIENT;
    public static CS BYTEALIGNWINDOW;
    public static CS GLOBALCLASS;
    public static CS IME;
    public static CS DROPSHADOW;
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
public enum ControlzEx.Standard.DeviceCap : Enum {
    public int value__;
    public static DeviceCap BITSPIXEL;
    public static DeviceCap PLANES;
    public static DeviceCap LOGPIXELSX;
    public static DeviceCap LOGPIXELSY;
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
public enum ControlzEx.Standard.DOGIF : Enum {
    public int value__;
    public static DOGIF DEFAULT;
    public static DOGIF TRAVERSE_LINK;
    public static DOGIF NO_HDROP;
    public static DOGIF NO_URL;
    public static DOGIF ONLY_IF_ONE;
}
[ExtensionAttribute]
internal static class ControlzEx.Standard.DoubleUtilities : object {
    private static double Epsilon;
    public static bool AreClose(double value1, double value2);
    [ExtensionAttribute]
public static bool IsCloseTo(double value1, double value2);
    [ExtensionAttribute]
public static bool IsStrictlyLessThan(double value1, double value2);
    [ExtensionAttribute]
public static bool IsStrictlyGreaterThan(double value1, double value2);
    [ExtensionAttribute]
public static bool IsLessThanOrCloseTo(double value1, double value2);
    [ExtensionAttribute]
public static bool IsGreaterThanOrCloseTo(double value1, double value2);
    [ExtensionAttribute]
public static bool IsFinite(double value);
    [ExtensionAttribute]
public static bool IsValidSize(double value);
    [ExtensionAttribute]
public static bool IsFiniteAndNonNegative(double d);
}
[ExtensionAttribute]
internal static class ControlzEx.Standard.DpiHelper : object {
    [ThreadStaticAttribute]
private static Matrix _transformToDevice;
    [ThreadStaticAttribute]
private static Matrix _transformToDip;
    public static Point LogicalPixelsToDevice(Point logicalPoint, double dpiScaleX, double dpiScaleY);
    public static Point DevicePixelsToLogical(Point devicePoint, double dpiScaleX, double dpiScaleY);
    public static Rect LogicalRectToDevice(Rect logicalRectangle, double dpiScaleX, double dpiScaleY);
    public static Rect DeviceRectToLogical(Rect deviceRectangle, double dpiScaleX, double dpiScaleY);
    public static Size LogicalSizeToDevice(Size logicalSize, double dpiScaleX, double dpiScaleY);
    public static Size DeviceSizeToLogical(Size deviceSize, double dpiScaleX, double dpiScaleY);
    public static Thickness LogicalThicknessToDevice(Thickness logicalThickness, double dpiScaleX, double dpiScaleY);
    public static double TransformToDeviceY(Visual visual, double y, double dpiScaleY);
    public static double TransformToDeviceX(Visual visual, double x, double dpiScaleX);
    public static double TransformToDeviceY(double y, double dpiScaleY);
    public static double TransformToDeviceX(double x, double dpiScaleX);
    [ExtensionAttribute]
public static DpiScale GetDpi(Visual visual);
    [ExtensionAttribute]
internal static DpiScale GetDpi(Window window);
}
internal class ControlzEx.Standard.DROPDESCRIPTION : ValueType {
    public DROPIMAGETYPE type;
    public string szMessage;
    public string szInsert;
}
internal enum ControlzEx.Standard.DROPEFFECT : Enum {
    public int value__;
    public static DROPEFFECT NONE;
    public static DROPEFFECT COPY;
    public static DROPEFFECT MOVE;
    public static DROPEFFECT LINK;
    public static DROPEFFECT SCROLL;
}
internal enum ControlzEx.Standard.DROPIMAGETYPE : Enum {
    public int value__;
    public static DROPIMAGETYPE INVALID;
    public static DROPIMAGETYPE NONE;
    public static DROPIMAGETYPE COPY;
    public static DROPIMAGETYPE MOVE;
    public static DROPIMAGETYPE LINK;
    public static DROPIMAGETYPE LABEL;
    public static DROPIMAGETYPE WARNING;
    public static DROPIMAGETYPE NOIMAGE;
}
internal enum ControlzEx.Standard.DSH : Enum {
    public int value__;
    public static DSH ALLOWDROPDESCRIPTIONTEXT;
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
public enum ControlzEx.Standard.DWM_SIT : Enum {
    public int value__;
    public static DWM_SIT None;
    public static DWM_SIT DISPLAYFRAME;
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
[CLSCompliantAttribute("False")]
public class ControlzEx.Standard.DWM_TIMING_INFO : ValueType {
    public int cbSize;
    public UNSIGNED_RATIO rateRefresh;
    public ulong qpcRefreshPeriod;
    public UNSIGNED_RATIO rateCompose;
    public ulong qpcVBlank;
    public ulong cRefresh;
    public UInt32 cDXRefresh;
    public ulong qpcCompose;
    public ulong cFrame;
    public UInt32 cDXPresent;
    public ulong cRefreshFrame;
    public ulong cFrameSubmitted;
    public UInt32 cDXPresentSubmitted;
    public ulong cFrameConfirmed;
    public UInt32 cDXPresentConfirmed;
    public ulong cRefreshConfirmed;
    public UInt32 cDXRefreshConfirmed;
    public ulong cFramesLate;
    public UInt32 cFramesOutstanding;
    public ulong cFrameDisplayed;
    public ulong qpcFrameDisplayed;
    public ulong cRefreshFrameDisplayed;
    public ulong cFrameComplete;
    public ulong qpcFrameComplete;
    public ulong cFramePending;
    public ulong qpcFramePending;
    public ulong cFramesDisplayed;
    public ulong cFramesComplete;
    public ulong cFramesPending;
    public ulong cFramesAvailable;
    public ulong cFramesDropped;
    public ulong cFramesMissed;
    public ulong cRefreshNextDisplayed;
    public ulong cRefreshNextPresented;
    public ulong cRefreshesDisplayed;
    public ulong cRefreshesPresented;
    public ulong cRefreshStarted;
    public ulong cPixelsReceived;
    public ulong cPixelsDrawn;
    public ulong cBuffersEmpty;
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
public enum ControlzEx.Standard.DWMFLIP3D : Enum {
    public int value__;
    public static DWMFLIP3D DEFAULT;
    public static DWMFLIP3D EXCLUDEBELOW;
    public static DWMFLIP3D EXCLUDEABOVE;
}
internal enum ControlzEx.Standard.DWMNCRP : Enum {
    public int value__;
    public static DWMNCRP USEWINDOWSTYLE;
    public static DWMNCRP DISABLED;
    public static DWMNCRP ENABLED;
}
internal enum ControlzEx.Standard.DWMWA : Enum {
    public int value__;
    public static DWMWA NCRENDERING_ENABLED;
    public static DWMWA NCRENDERING_POLICY;
    public static DWMWA TRANSITIONS_FORCEDISABLED;
    public static DWMWA ALLOW_NCPAINT;
    public static DWMWA CAPTION_BUTTON_BOUNDS;
    public static DWMWA NONCLIENT_RTL_LAYOUT;
    public static DWMWA FORCE_ICONIC_REPRESENTATION;
    public static DWMWA FLIP3D_POLICY;
    public static DWMWA EXTENDED_FRAME_BOUNDS;
    public static DWMWA HAS_ICONIC_BITMAP;
    public static DWMWA DISALLOW_PEEK;
    public static DWMWA EXCLUDED_FROM_PEEK;
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
[FlagsAttribute]
public enum ControlzEx.Standard.ErrorModes : Enum {
    public int value__;
    public static ErrorModes Default;
    public static ErrorModes FailCriticalErrors;
    public static ErrorModes NoGpFaultErrorBox;
    public static ErrorModes NoAlignmentFaultExcept;
    public static ErrorModes NoOpenFileErrorBox;
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
public enum ControlzEx.Standard.Facility : Enum {
    public int value__;
    public static Facility Null;
    public static Facility Rpc;
    public static Facility Dispatch;
    public static Facility Storage;
    public static Facility Itf;
    public static Facility Win32;
    public static Facility Windows;
    public static Facility Control;
    public static Facility Ese;
    public static Facility WinCodec;
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
public enum ControlzEx.Standard.FO : Enum {
    public int value__;
    public static FO MOVE;
    public static FO COPY;
    public static FO DELETE;
    public static FO RENAME;
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
[CLSCompliantAttribute("False")]
public enum ControlzEx.Standard.FOF : Enum {
    public ushort value__;
    public static FOF MULTIDESTFILES;
    public static FOF CONFIRMMOUSE;
    public static FOF SILENT;
    public static FOF RENAMEONCOLLISION;
    public static FOF NOCONFIRMATION;
    public static FOF WANTMAPPINGHANDLE;
    public static FOF ALLOWUNDO;
    public static FOF FILESONLY;
    public static FOF SIMPLEPROGRESS;
    public static FOF NOCONFIRMMKDIR;
    public static FOF NOERRORUI;
    public static FOF NOCOPYSECURITYATTRIBS;
    public static FOF NORECURSION;
    public static FOF NO_CONNECTED_ELEMENTS;
    public static FOF WANTNUKEWARNING;
    public static FOF NORECURSEREPARSE;
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
public enum ControlzEx.Standard.GCLP : Enum {
    public int value__;
    public static GCLP HBRBACKGROUND;
    public static GCLP HICON;
    public static GCLP STYLE;
    public static GCLP HICONSM;
}
public enum ControlzEx.Standard.GW : Enum {
    public int value__;
    public static GW HWNDFIRST;
    public static GW HWNDLAST;
    public static GW HWNDNEXT;
    public static GW HWNDPREV;
    public static GW OWNER;
    public static GW CHILD;
    public static GW ENABLEDPOPUP;
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
public enum ControlzEx.Standard.GWL : Enum {
    public int value__;
    public static GWL WNDPROC;
    public static GWL HINSTANCE;
    public static GWL HWNDPARENT;
    public static GWL STYLE;
    public static GWL EXSTYLE;
    public static GWL USERDATA;
    public static GWL ID;
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
[FlagsAttribute]
public enum ControlzEx.Standard.HCF : Enum {
    public int value__;
    public static HCF HIGHCONTRASTON;
    public static HCF AVAILABLE;
    public static HCF HOTKEYACTIVE;
    public static HCF CONFIRMHOTKEY;
    public static HCF HOTKEYSOUND;
    public static HCF INDICATOR;
    public static HCF HOTKEYAVAILABLE;
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
public class ControlzEx.Standard.HIGHCONTRAST : ValueType {
    public int cbSize;
    public HCF dwFlags;
    public IntPtr lpszDefaultScheme;
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
public class ControlzEx.Standard.HRESULT : ValueType {
    private UInt32 _value;
    public static HRESULT S_OK;
    public static HRESULT S_FALSE;
    public static HRESULT E_PENDING;
    public static HRESULT E_NOTIMPL;
    public static HRESULT E_NOINTERFACE;
    public static HRESULT E_POINTER;
    public static HRESULT E_ABORT;
    public static HRESULT E_FAIL;
    public static HRESULT E_UNEXPECTED;
    public static HRESULT STG_E_INVALIDFUNCTION;
    public static HRESULT OLE_E_ADVISENOTSUPPORTED;
    public static HRESULT DV_E_FORMATETC;
    public static HRESULT DV_E_TYMED;
    public static HRESULT DV_E_CLIPFORMAT;
    public static HRESULT DV_E_DVASPECT;
    public static HRESULT REGDB_E_CLASSNOTREG;
    public static HRESULT DESTS_E_NO_MATCHING_ASSOC_HANDLER;
    public static HRESULT DESTS_E_NORECDOCS;
    public static HRESULT DESTS_E_NOTALLCLEARED;
    public static HRESULT E_ACCESSDENIED;
    public static HRESULT E_OUTOFMEMORY;
    public static HRESULT E_INVALIDARG;
    public static HRESULT INTSAFE_E_ARITHMETIC_OVERFLOW;
    public static HRESULT COR_E_OBJECTDISPOSED;
    public static HRESULT WC_E_GREATERTHAN;
    public static HRESULT WC_E_SYNTAX;
    public static HRESULT WINCODEC_ERR_GENERIC_ERROR;
    public static HRESULT WINCODEC_ERR_INVALIDPARAMETER;
    public static HRESULT WINCODEC_ERR_OUTOFMEMORY;
    public static HRESULT WINCODEC_ERR_NOTIMPLEMENTED;
    public static HRESULT WINCODEC_ERR_ABORTED;
    public static HRESULT WINCODEC_ERR_ACCESSDENIED;
    public static HRESULT WINCODEC_ERR_VALUEOVERFLOW;
    public static HRESULT WINCODEC_ERR_WRONGSTATE;
    public static HRESULT WINCODEC_ERR_VALUEOUTOFRANGE;
    public static HRESULT WINCODEC_ERR_UNKNOWNIMAGEFORMAT;
    public static HRESULT WINCODEC_ERR_UNSUPPORTEDVERSION;
    public static HRESULT WINCODEC_ERR_NOTINITIALIZED;
    public static HRESULT WINCODEC_ERR_ALREADYLOCKED;
    public static HRESULT WINCODEC_ERR_PROPERTYNOTFOUND;
    public static HRESULT WINCODEC_ERR_PROPERTYNOTSUPPORTED;
    public static HRESULT WINCODEC_ERR_PROPERTYSIZE;
    public static HRESULT WINCODEC_ERR_CODECPRESENT;
    public static HRESULT WINCODEC_ERR_CODECNOTHUMBNAIL;
    public static HRESULT WINCODEC_ERR_PALETTEUNAVAILABLE;
    public static HRESULT WINCODEC_ERR_CODECTOOMANYSCANLINES;
    public static HRESULT WINCODEC_ERR_INTERNALERROR;
    public static HRESULT WINCODEC_ERR_SOURCERECTDOESNOTMATCHDIMENSIONS;
    public static HRESULT WINCODEC_ERR_COMPONENTNOTFOUND;
    public static HRESULT WINCODEC_ERR_IMAGESIZEOUTOFRANGE;
    public static HRESULT WINCODEC_ERR_TOOMUCHMETADATA;
    public static HRESULT WINCODEC_ERR_BADIMAGE;
    public static HRESULT WINCODEC_ERR_BADHEADER;
    public static HRESULT WINCODEC_ERR_FRAMEMISSING;
    public static HRESULT WINCODEC_ERR_BADMETADATAHEADER;
    public static HRESULT WINCODEC_ERR_BADSTREAMDATA;
    public static HRESULT WINCODEC_ERR_STREAMWRITE;
    public static HRESULT WINCODEC_ERR_STREAMREAD;
    public static HRESULT WINCODEC_ERR_STREAMNOTAVAILABLE;
    public static HRESULT WINCODEC_ERR_UNSUPPORTEDPIXELFORMAT;
    public static HRESULT WINCODEC_ERR_UNSUPPORTEDOPERATION;
    public static HRESULT WINCODEC_ERR_INVALIDREGISTRATION;
    public static HRESULT WINCODEC_ERR_COMPONENTINITIALIZEFAILURE;
    public static HRESULT WINCODEC_ERR_INSUFFICIENTBUFFER;
    public static HRESULT WINCODEC_ERR_DUPLICATEMETADATAPRESENT;
    public static HRESULT WINCODEC_ERR_PROPERTYUNEXPECTEDTYPE;
    public static HRESULT WINCODEC_ERR_UNEXPECTEDSIZE;
    public static HRESULT WINCODEC_ERR_INVALIDQUERYREQUEST;
    public static HRESULT WINCODEC_ERR_UNEXPECTEDMETADATATYPE;
    public static HRESULT WINCODEC_ERR_REQUESTONLYVALIDATMETADATAROOT;
    public static HRESULT WINCODEC_ERR_INVALIDQUERYCHARACTER;
    public Facility Facility { get; }
    public int Code { get; }
    public bool Succeeded { get; }
    public bool Failed { get; }
    [CLSCompliantAttribute("False")]
public HRESULT(UInt32 i);
    public HRESULT(int i);
    private static HRESULT();
    public static int op_Explicit(HRESULT hr);
    public static HRESULT Make(bool severe, Facility facility, int code);
    public Facility get_Facility();
    public static Facility GetFacility(int errorCode);
    public int get_Code();
    public static int GetCode(int error);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(HRESULT hrLeft, HRESULT hrRight);
    public static bool op_Inequality(HRESULT hrLeft, HRESULT hrRight);
    public bool get_Succeeded();
    public bool get_Failed();
    public void ThrowIfFailed();
    public void ThrowIfFailed(string message);
    public static void ThrowLastError();
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
public enum ControlzEx.Standard.HT : Enum {
    public int value__;
    public static HT ERROR;
    public static HT TRANSPARENT;
    public static HT NOWHERE;
    public static HT CLIENT;
    public static HT CAPTION;
    public static HT SYSMENU;
    public static HT GROWBOX;
    public static HT MENU;
    public static HT HSCROLL;
    public static HT VSCROLL;
    public static HT MINBUTTON;
    public static HT MAXBUTTON;
    public static HT LEFT;
    public static HT RIGHT;
    public static HT TOP;
    public static HT TOPLEFT;
    public static HT TOPRIGHT;
    public static HT BOTTOM;
    public static HT BOTTOMLEFT;
    public static HT BOTTOMRIGHT;
    public static HT BORDER;
    public static HT OBJECT;
    public static HT CLOSE;
    public static HT HELP;
}
[GuidAttribute("DE5BF786-477A-11D2-839D-00C04FD918D0")]
[InterfaceTypeAttribute("1")]
internal interface ControlzEx.Standard.IDragSourceHelper {
    public abstract virtual void InitializeFromBitmap(SHDRAGIMAGE& pshdi, IDataObject pDataObject);
    public abstract virtual void InitializeFromWindow(IntPtr hwnd, POINT& ppt, IDataObject pDataObject);
}
[GuidAttribute("83E07D0D-0C5F-4163-BF1A-60B274051E40")]
[InterfaceTypeAttribute("1")]
internal interface ControlzEx.Standard.IDragSourceHelper2 {
    public abstract virtual void InitializeFromBitmap(SHDRAGIMAGE& pshdi, IDataObject pDataObject);
    public abstract virtual void InitializeFromWindow(IntPtr hwnd, POINT& ppt, IDataObject pDataObject);
    public abstract virtual void SetFlags(DSH dwFlags);
}
[GuidAttribute("4657278B-411B-11D2-839A-00C04FD918D0")]
[InterfaceTypeAttribute("1")]
internal interface ControlzEx.Standard.IDropTargetHelper {
    public abstract virtual void DragEnter(IntPtr hwndTarget, IDataObject pDataObject, POINT& ppt, int effect);
    public abstract virtual void DragLeave();
    public abstract virtual void DragOver(POINT& ppt, int effect);
    public abstract virtual void Drop(IDataObject dataObject, POINT& ppt, int effect);
    public abstract virtual void Show(bool fShow);
}
internal static class ControlzEx.Standard.IID : object {
    public static string ApplicationAssociationRegistration;
    public static string ConnectionPoint;
    public static string ConnectionPointContainer;
    public static string DragSourceHelper;
    public static string DragSourceHelper2;
    public static string DropTargetHelper;
    public static string EnumConnectionPoints;
    public static string EnumConnections;
    public static string EnumIdList;
    public static string EnumObjects;
    public static string FileDialog;
    public static string FileDialogEvents;
    public static string FileOpenDialog;
    public static string FileSaveDialog;
    public static string HtmlDocument;
    public static string HtmlDocument2;
    public static string ModalWindow;
    public static string ObjectArray;
    public static string ObjectCollection;
    public static string PropertyNotifySink;
    public static string PropertyStore;
    public static string ServiceProvider;
    public static string ShellFolder;
    public static string ShellLink;
    public static string ShellItem;
    public static string ShellItem2;
    public static string ShellItemArray;
    public static string TaskbarList;
    public static string TaskbarList2;
    public static string Unknown;
    public static string WebBrowser2;
    public static string WebBrowserEvents;
    public static string WebBrowserEvents2;
    public static string WICBitmapDecoder;
    public static string WICBitmapFlipRotator;
    public static string WICBitmapFrameDecode;
    public static string WICBitmap;
    public static string WICBitmapSource;
    public static string WICFormatConverter;
    public static string WICImagingFactory;
    public static string WICStream;
    public static string ApplicationDestinations;
    public static string ApplicationDocumentLists;
    public static string CustomDestinationList;
    public static string ObjectWithAppUserModelId;
    public static string ObjectWithProgId;
    public static string TaskbarList3;
    public static string TaskbarList4;
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
public class ControlzEx.Standard.INPUT : ValueType {
    [CLSCompliantAttribute("False")]
public UInt32 type;
    public MOUSEINPUT mi;
}
internal enum ControlzEx.Standard.INPUT_TYPE : Enum {
    public UInt32 value__;
    public static INPUT_TYPE MOUSE;
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("6d5140c1-7436-11ce-8034-00aa006009fa")]
internal interface ControlzEx.Standard.IServiceProvider {
    public abstract virtual object QueryService(Guid& guidService, Guid& riid);
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
public class ControlzEx.Standard.LOGFONT : ValueType {
    public int lfHeight;
    public int lfWidth;
    public int lfEscapement;
    public int lfOrientation;
    public int lfWeight;
    public byte lfItalic;
    public byte lfUnderline;
    public byte lfStrikeOut;
    public byte lfCharSet;
    public byte lfOutPrecision;
    public byte lfClipPrecision;
    public byte lfQuality;
    public byte lfPitchAndFamily;
    public string lfFaceName;
}
internal class ControlzEx.Standard.ManagedIStream : object {
    private static int STGTY_STREAM;
    private static int STGM_READWRITE;
    private static int LOCK_EXCLUSIVE;
    private Stream _source;
    public ManagedIStream(Stream source);
    private void _Validate();
    [ObsoleteAttribute("The method is not implemented", "True")]
public sealed virtual void Clone(IStream& ppstm);
    public sealed virtual void Commit(int grfCommitFlags);
    public sealed virtual void CopyTo(IStream pstm, long cb, IntPtr pcbRead, IntPtr pcbWritten);
    [ObsoleteAttribute("The method is not implemented", "True")]
public sealed virtual void LockRegion(long libOffset, long cb, int dwLockType);
    public sealed virtual void Read(Byte[] pv, int cb, IntPtr pcbRead);
    [ObsoleteAttribute("The method is not implemented", "True")]
public sealed virtual void Revert();
    public sealed virtual void Seek(long dlibMove, int dwOrigin, IntPtr plibNewPosition);
    public sealed virtual void SetSize(long libNewSize);
    public sealed virtual void Stat(STATSTG& pstatstg, int grfStatFlag);
    [ObsoleteAttribute("The method is not implemented", "True")]
public sealed virtual void UnlockRegion(long libOffset, long cb, int dwLockType);
    public sealed virtual void Write(Byte[] pv, int cb, IntPtr pcbWritten);
    public sealed virtual void Dispose();
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
public class ControlzEx.Standard.MARGINS : ValueType {
    public int cxLeftWidth;
    public int cxRightWidth;
    public int cyTopHeight;
    public int cyBottomHeight;
}
internal class ControlzEx.Standard.MessageHandler : MulticastDelegate {
    public MessageHandler(object object, IntPtr method);
    public virtual IntPtr Invoke(WM uMsg, IntPtr wParam, IntPtr lParam, Boolean& handled);
    public virtual IAsyncResult BeginInvoke(WM uMsg, IntPtr wParam, IntPtr lParam, Boolean& handled, AsyncCallback callback, object object);
    public virtual IntPtr EndInvoke(Boolean& handled, IAsyncResult result);
}
internal class ControlzEx.Standard.MessageWindow : DispatcherObject {
    private static WndProc s_WndProc;
    private static Dictionary`2<IntPtr, MessageWindow> s_windowLookup;
    private WndProc _wndProcCallback;
    private string _className;
    private bool _isDisposed;
    [CompilerGeneratedAttribute]
private IntPtr <Handle>k__BackingField;
    public IntPtr Handle { get; private set; }
    public MessageWindow(CS classStyle, WS style, WS_EX exStyle, Rect location, string name, WndProc callback);
    private static MessageWindow();
    [CompilerGeneratedAttribute]
public IntPtr get_Handle();
    [CompilerGeneratedAttribute]
private void set_Handle(IntPtr value);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    private void _Dispose(bool disposing, bool isHwndBeingDestroyed);
    private static IntPtr _WndProc(IntPtr hwnd, WM msg, IntPtr wParam, IntPtr lParam);
    private static object _DestroyWindow(IntPtr hwnd, string className);
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
[FlagsAttribute]
[CLSCompliantAttribute("False")]
public enum ControlzEx.Standard.MF : Enum {
    public UInt32 value__;
    public static MF DOES_NOT_EXIST;
    public static MF ENABLED;
    public static MF BYCOMMAND;
    public static MF GRAYED;
    public static MF DISABLED;
}
internal class ControlzEx.Standard.MINMAXINFO : ValueType {
    public POINT ptReserved;
    public POINT ptMaxSize;
    public POINT ptMaxPosition;
    public POINT ptMinTrackSize;
    public POINT ptMaxTrackSize;
}
internal static class ControlzEx.Standard.MonitorHelper : object {
    public static MONITORINFO GetMonitorInfoFromPoint();
    public static bool TryGetMonitorInfoFromPoint(MONITORINFO& monitorInfo);
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
public class ControlzEx.Standard.MONITORINFO : ValueType {
    public int cbSize;
    public RECT rcMonitor;
    public RECT rcWork;
    [CLSCompliantAttribute("False")]
public UInt32 dwFlags;
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
[CLSCompliantAttribute("False")]
public enum ControlzEx.Standard.MonitorOptions : Enum {
    public UInt32 value__;
    public static MonitorOptions MONITOR_DEFAULTTONULL;
    public static MonitorOptions MONITOR_DEFAULTTOPRIMARY;
    public static MonitorOptions MONITOR_DEFAULTTONEAREST;
}
internal enum ControlzEx.Standard.MOUSEEVENTF : Enum {
    public int value__;
    public static MOUSEEVENTF LEFTDOWN;
    public static MOUSEEVENTF LEFTUP;
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
public class ControlzEx.Standard.MOUSEINPUT : ValueType {
    public int dx;
    public int dy;
    public int mouseData;
    public int dwFlags;
    public int time;
    public IntPtr dwExtraInfo;
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
public enum ControlzEx.Standard.MSGFLT : Enum {
    public int value__;
    public static MSGFLT RESET;
    public static MSGFLT ALLOW;
    public static MSGFLT DISALLOW;
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
public enum ControlzEx.Standard.MSGFLTINFO : Enum {
    public int value__;
    public static MSGFLTINFO NONE;
    public static MSGFLTINFO ALREADYALLOWED_FORWND;
    public static MSGFLTINFO ALREADYDISALLOWED_FORWND;
    public static MSGFLTINFO ALLOWED_HIGHER;
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
public static class ControlzEx.Standard.NativeMethods : object {
    private static bool _AdjustWindowRectEx(RECT& lpRect, WS dwStyle, bool bMenu, WS_EX dwExStyle);
    [CLSCompliantAttribute("False")]
public static RECT AdjustWindowRectEx(RECT lpRect, WS dwStyle, bool bMenu, WS_EX dwExStyle);
    private static bool _AllowSetForegroundWindow(int dwProcessId);
    public static void AllowSetForegroundWindow();
    public static void AllowSetForegroundWindow(int dwProcessId);
    private static bool _ChangeWindowMessageFilter(WM message, MSGFLT dwFlag);
    private static bool _ChangeWindowMessageFilterEx(IntPtr hwnd, WM message, MSGFLT action, CHANGEFILTERSTRUCT& pChangeFilterStruct);
    public static HRESULT ChangeWindowMessageFilterEx(IntPtr hwnd, WM message, MSGFLT action, MSGFLTINFO& filterInfo);
    public static bool ClientToScreen(IntPtr hWnd, POINT& point);
    public static bool ScreenToClient(IntPtr hWnd, POINT& point);
    public static CombineRgnResult CombineRgn(IntPtr hrgnDest, IntPtr hrgnSrc1, IntPtr hrgnSrc2, RGN fnCombineMode);
    private static IntPtr _CommandLineToArgvW(string cmdLine, Int32& numArgs);
    public static String[] CommandLineToArgvW(string cmdLine);
    private static SafeHBITMAP _CreateDIBSection(SafeDC hdc, BITMAPINFO& bitmapInfo, int iUsage, IntPtr& ppvBits, IntPtr hSection, int dwOffset);
    private static SafeHBITMAP _CreateDIBSectionIntPtr(IntPtr hdc, BITMAPINFO& bitmapInfo, int iUsage, IntPtr& ppvBits, IntPtr hSection, int dwOffset);
    public static SafeHBITMAP CreateDIBSection(SafeDC hdc, BITMAPINFO& bitmapInfo, IntPtr& ppvBits, IntPtr hSection, int dwOffset);
    private static IntPtr _CreateRoundRectRgn(int nLeftRect, int nTopRect, int nRightRect, int nBottomRect, int nWidthEllipse, int nHeightEllipse);
    public static IntPtr CreateRoundRectRgn(int nLeftRect, int nTopRect, int nRightRect, int nBottomRect, int nWidthEllipse, int nHeightEllipse);
    private static IntPtr _CreateRectRgn(int nLeftRect, int nTopRect, int nRightRect, int nBottomRect);
    public static IntPtr CreateRectRgn(int nLeftRect, int nTopRect, int nRightRect, int nBottomRect);
    private static IntPtr _CreateRectRgnIndirect(RECT& lprc);
    public static IntPtr CreateRectRgnIndirect(RECT lprc);
    public static IntPtr CreateSolidBrush(int crColor);
    private static IntPtr _CreateWindowEx(WS_EX dwExStyle, string lpClassName, string lpWindowName, WS dwStyle, int x, int y, int nWidth, int nHeight, IntPtr hWndParent, IntPtr hMenu, IntPtr hInstance, IntPtr lpParam);
    [CLSCompliantAttribute("False")]
public static IntPtr CreateWindowEx(WS_EX dwExStyle, string lpClassName, string lpWindowName, WS dwStyle, int x, int y, int nWidth, int nHeight, IntPtr hWndParent, IntPtr hMenu, IntPtr hInstance, IntPtr lpParam);
    public static IntPtr DefWindowProc(IntPtr hWnd, WM Msg, IntPtr wParam, IntPtr lParam);
    public static bool DeleteObject(IntPtr hObject);
    public static bool DestroyIcon(IntPtr handle);
    public static bool DestroyWindow(IntPtr hwnd);
    public static bool IsWindow(IntPtr hwnd);
    public static void DwmExtendFrameIntoClientArea(IntPtr hwnd, MARGINS& pMarInset);
    private static HRESULT _DwmGetColorizationColor(UInt32& pcrColorization, Boolean& pfOpaqueBlend);
    [CLSCompliantAttribute("False")]
public static bool DwmGetColorizationColor(UInt32& pcrColorization, Boolean& pfOpaqueBlend);
    private static HRESULT _DwmGetCompositionTimingInfo(IntPtr hwnd, DWM_TIMING_INFO& pTimingInfo);
    [CLSCompliantAttribute("False")]
public static Nullable`1<DWM_TIMING_INFO> DwmGetCompositionTimingInfo(IntPtr hwnd);
    private static bool _DwmIsCompositionEnabled();
    public static bool DwmIsCompositionEnabled();
    public static bool DwmDefWindowProc(IntPtr hwnd, WM msg, IntPtr wParam, IntPtr lParam, IntPtr& plResult);
    private static void _DwmSetWindowAttribute(IntPtr hwnd, DWMWA dwAttribute, Int32& pvAttribute, int cbAttribute);
    public static void DwmSetWindowAttributeFlip3DPolicy(IntPtr hwnd, DWMFLIP3D flip3dPolicy);
    public static void DwmSetWindowAttributeDisallowPeek(IntPtr hwnd, bool disallowPeek);
    private static int _EnableMenuItem(IntPtr hMenu, SC uIDEnableItem, MF uEnable);
    [CLSCompliantAttribute("False")]
public static MF EnableMenuItem(IntPtr hMenu, SC uIDEnableItem, MF uEnable);
    private static bool _RemoveMenu(IntPtr hMenu, UInt32 uPosition, UInt32 uFlags);
    [CLSCompliantAttribute("False")]
public static void RemoveMenu(IntPtr hMenu, SC uPosition, MF uFlags);
    private static bool _DrawMenuBar(IntPtr hWnd);
    public static void DrawMenuBar(IntPtr hWnd);
    [ReliabilityContractAttribute("3", "2")]
public static bool FindClose(IntPtr handle);
    public static SafeFindHandle FindFirstFileW(string lpFileName, WIN32_FIND_DATAW lpFindFileData);
    public static bool FindNextFileW(SafeFindHandle hndFindFile, WIN32_FIND_DATAW lpFindFileData);
    private static bool _GetClientRect(IntPtr hwnd, RECT& lpRect);
    public static RECT GetClientRect(IntPtr hwnd);
    [SecurityCriticalAttribute]
private static bool _GetCursorPos(POINT& lpPoint);
    [SecurityCriticalAttribute]
public static POINT GetCursorPos();
    [SecurityCriticalAttribute]
public static bool TryGetCursorPos(POINT& pt);
    [SecurityCriticalAttribute]
private static bool _GetPhysicalCursorPos(POINT& lpPoint);
    [SecurityCriticalAttribute]
public static POINT GetPhysicalCursorPos();
    public static bool TryGetRelativeMousePosition(IntPtr hWnd, Point& point);
    [SecurityCriticalAttribute]
public static bool TryGetPhysicalCursorPos(POINT& pt);
    private static HRESULT _GetCurrentThemeName(StringBuilder pszThemeFileName, int dwMaxNameChars, StringBuilder pszColorBuff, int cchMaxColorChars, StringBuilder pszSizeBuff, int cchMaxSizeChars);
    public static void GetCurrentThemeName(String& themeFileName, String& color, String& size);
    public static bool IsThemeActive();
    [ObsoleteAttribute("Use SafeDC.GetDC instead.", "True")]
public static void GetDC();
    public static int GetDeviceCaps(SafeDC hdc, DeviceCap nIndex);
    private static int _GetModuleFileName(IntPtr hModule, StringBuilder lpFilename, int nSize);
    public static string GetModuleFileName(IntPtr hModule);
    private static IntPtr _GetModuleHandle(string lpModuleName);
    public static IntPtr GetModuleHandle(string lpModuleName);
    private static bool _GetMonitorInfo(IntPtr hMonitor, MONITORINFO& lpmi);
    public static MONITORINFO GetMonitorInfo(IntPtr hMonitor);
    private static bool _GetMonitorInfoW(IntPtr hMonitor, MONITORINFO& lpmi);
    public static MONITORINFO GetMonitorInfoW(IntPtr hMonitor);
    public static IntPtr GetTaskBarHandleForMonitor(IntPtr monitor);
    private static IntPtr _GetStockObject(StockObject fnObject);
    public static IntPtr GetStockObject(StockObject fnObject);
    public static IntPtr GetSystemMenu(IntPtr hWnd, bool bRevert);
    public static int GetSystemMetrics(SM nIndex);
    [CLSCompliantAttribute("False")]
public static UInt32 GetCurrentThreadId();
    [CLSCompliantAttribute("False")]
public static bool EnumThreadWindows(UInt32 dwThreadId, EnumWindowsProc lpfn, IntPtr lParam);
    public static IntPtr SetParent(IntPtr hWndChild, IntPtr hWndNewParent);
    public static IntPtr GetWindow(IntPtr hwnd, GW nCmd);
    private static bool _GetWindowInfo(IntPtr hWnd, WINDOWINFO& pwi);
    public static WINDOWINFO GetWindowInfo(IntPtr hWnd);
    [CLSCompliantAttribute("False")]
public static WS GetWindowStyle(IntPtr hWnd);
    [CLSCompliantAttribute("False")]
public static WS_EX GetWindowStyleEx(IntPtr hWnd);
    [CLSCompliantAttribute("False")]
public static WS SetWindowStyle(IntPtr hWnd, WS dwNewLong);
    [CLSCompliantAttribute("False")]
public static WS_EX SetWindowStyleEx(IntPtr hWnd, WS_EX dwNewLong);
    public static IntPtr GetWindowLongPtr(IntPtr hwnd, GWL nIndex);
    public static IntPtr GetClassLong(IntPtr hWnd, GCLP nIndex);
    private static UInt32 GetClassLong32(IntPtr hWnd, GCLP nIndex);
    private static IntPtr GetClassLong64(IntPtr hWnd, GCLP nIndex);
    public static IntPtr SetClassLong(IntPtr hWnd, GCLP nIndex, IntPtr value);
    private static UInt32 SetClassLong32(IntPtr hWnd, GCLP nIndex, IntPtr value);
    private static IntPtr SetClassLong64(IntPtr hWnd, GCLP nIndex, IntPtr value);
    private static bool _SetProp(IntPtr hWnd, string lpString, IntPtr hData);
    public static void SetProp(IntPtr hwnd, string lpString, IntPtr hData);
    public static int SetWindowTheme(IntPtr hWnd, string pszSubAppName, string pszSubIdList);
    [CLSCompliantAttribute("False")]
public static void SetWindowThemeAttribute(IntPtr hwnd, WINDOWTHEMEATTRIBUTETYPE eAttribute, WTA_OPTIONS& pvAttribute, UInt32 cbAttribute);
    private static IntPtr GetWindowLongPtr32(IntPtr hWnd, GWL nIndex);
    private static IntPtr GetWindowLongPtr64(IntPtr hWnd, GWL nIndex);
    private static bool GetWindowPlacement(IntPtr hwnd, WINDOWPLACEMENT lpwndpl);
    public static WINDOWPLACEMENT GetWindowPlacement(IntPtr hwnd);
    public static bool SetWindowPlacement(IntPtr hWnd, WINDOWPLACEMENT lpwndpl);
    private static bool _GetWindowRect(IntPtr hWnd, RECT& lpRect);
    public static RECT GetWindowRect(IntPtr hwnd);
    public static int GetWindowTextLength(IntPtr hWnd);
    public static int GetWindowText(IntPtr hWnd, StringBuilder strText, int maxCount);
    public static Status GdipCreateBitmapFromStream(IStream stream, IntPtr& bitmap);
    public static Status GdipCreateHBITMAPFromBitmap(IntPtr bitmap, IntPtr& hbmReturn, int background);
    public static Status GdipCreateHICONFromBitmap(IntPtr bitmap, IntPtr& hbmReturn);
    public static Status GdipDisposeImage(IntPtr image);
    public static Status GdipImageForceValidation(IntPtr image);
    public static Status GdiplusStartup(IntPtr& token, StartupInput input, StartupOutput& output);
    public static Status GdiplusShutdown(IntPtr token);
    public static bool IsIconic(IntPtr hwnd);
    public static bool IsZoomed(IntPtr hwnd);
    public static bool IsWindowVisible(IntPtr hwnd);
    private static IntPtr _LocalFree(IntPtr hMem);
    [CLSCompliantAttribute("False")]
public static IntPtr MonitorFromWindow(IntPtr hwnd, MonitorOptions dwFlags);
    [CLSCompliantAttribute("False")]
public static IntPtr MonitorFromPoint(POINT pt, MonitorOptions dwFlags);
    [CLSCompliantAttribute("False")]
public static IntPtr MonitorFromRect(RECT& lprc, MonitorOptions dwFlags);
    [CLSCompliantAttribute("False")]
public static IntPtr LoadImage(IntPtr hinst, IntPtr lpszName, UInt32 uType, int cxDesired, int cyDesired, UInt32 fuLoad);
    public static IntPtr GetFocus();
    public static IntPtr SetFocus(IntPtr hWnd);
    [CLSCompliantAttribute("False")]
public static int ToUnicode(UInt32 virtualKey, UInt32 scanCode, Byte[] keyStates, Char[] chars, int charMaxCount, UInt32 flags);
    public static bool GetKeyboardState(Byte[] lpKeyState);
    [CLSCompliantAttribute("False")]
public static UInt32 MapVirtualKey(UInt32 uCode, MapType uMapType);
    private static bool _PostMessage(IntPtr hWnd, WM Msg, IntPtr wParam, IntPtr lParam);
    public static void PostMessage(IntPtr hWnd, WM Msg, IntPtr wParam, IntPtr lParam);
    private static short _RegisterClassEx(WNDCLASSEX& lpwcx);
    public static short RegisterClassEx(WNDCLASSEX& lpwcx);
    private static UInt32 _RegisterWindowMessage(string lpString);
    public static WM RegisterWindowMessage(string lpString);
    private static IntPtr _SetActiveWindow(IntPtr hWnd);
    public static IntPtr SetActiveWindow(IntPtr hwnd);
    public static IntPtr SetClassLongPtr(IntPtr hwnd, GCLP nIndex, IntPtr dwNewLong);
    [CLSCompliantAttribute("False")]
public static bool FlashWindowEx(FLASHWINFO& flashInfo);
    private static int SetClassLongPtr32(IntPtr hWnd, GCLP nIndex, int dwNewLong);
    private static IntPtr SetClassLongPtr64(IntPtr hWnd, GCLP nIndex, IntPtr dwNewLong);
    public static ErrorModes SetErrorMode(ErrorModes newMode);
    private static bool _SetProcessWorkingSetSize(IntPtr hProcess, IntPtr dwMinimiumWorkingSetSize, IntPtr dwMaximumWorkingSetSize);
    public static void SetProcessWorkingSetSize(IntPtr hProcess, int dwMinimumWorkingSetSize, int dwMaximumWorkingSetSize);
    public static IntPtr SetWindowLongPtr(IntPtr hwnd, GWL nIndex, IntPtr dwNewLong);
    private static int SetWindowLongPtr32(IntPtr hWnd, GWL nIndex, int dwNewLong);
    private static IntPtr SetWindowLongPtr64(IntPtr hWnd, GWL nIndex, IntPtr dwNewLong);
    private static int _SetWindowRgn(IntPtr hWnd, IntPtr hRgn, bool bRedraw);
    public static void SetWindowRgn(IntPtr hWnd, IntPtr hRgn, bool bRedraw);
    private static bool _SetWindowPos(IntPtr hWnd, IntPtr hWndInsertAfter, int X, int Y, int cx, int cy, SWP uFlags);
    [CLSCompliantAttribute("False")]
public static void SetWindowPos(IntPtr hWnd, IntPtr hWndInsertAfter, int X, int Y, int cx, int cy, SWP uFlags);
    public static Win32Error SHFileOperation(SHFILEOPSTRUCT& lpFileOp);
    private static bool _SystemParametersInfo_String(SPI uiAction, int uiParam, string pvParam, SPIF fWinIni);
    private static bool _SystemParametersInfo_NONCLIENTMETRICS(SPI uiAction, int uiParam, NONCLIENTMETRICS& pvParam, SPIF fWinIni);
    private static bool _SystemParametersInfo_HIGHCONTRAST(SPI uiAction, int uiParam, HIGHCONTRAST& pvParam, SPIF fWinIni);
    public static void SystemParametersInfo(SPI uiAction, int uiParam, string pvParam, SPIF fWinIni);
    public static NONCLIENTMETRICS SystemParameterInfo_GetNONCLIENTMETRICS();
    public static HIGHCONTRAST SystemParameterInfo_GetHIGHCONTRAST();
    [CLSCompliantAttribute("False")]
public static UInt32 TrackPopupMenuEx(IntPtr hmenu, UInt32 fuFlags, int x, int y, IntPtr hwnd, IntPtr lptpm);
    private static IntPtr _SelectObject(SafeDC hdc, IntPtr hgdiobj);
    public static IntPtr SelectObject(SafeDC hdc, IntPtr hgdiobj);
    private static IntPtr _SelectObjectSafeHBITMAP(SafeDC hdc, SafeHBITMAP hgdiobj);
    public static IntPtr SelectObject(SafeDC hdc, SafeHBITMAP hgdiobj);
    public static int SendInput(int nInputs, INPUT& pInputs, int cbSize);
    public static IntPtr SendMessage(IntPtr hWnd, WM Msg, IntPtr wParam, IntPtr lParam);
    public static bool ShowWindow(IntPtr hwnd, SW nCmdShow);
    private static bool _UnregisterClassAtom(IntPtr lpClassName, IntPtr hInstance);
    private static bool _UnregisterClassName(string lpClassName, IntPtr hInstance);
    public static void UnregisterClass(short atom, IntPtr hinstance);
    public static void UnregisterClass(string lpClassName, IntPtr hInstance);
    private static bool _UpdateLayeredWindow(IntPtr hwnd, SafeDC hdcDst, POINT& pptDst, SIZE& psize, SafeDC hdcSrc, POINT& pptSrc, int crKey, BLENDFUNCTION& pblend, ULW dwFlags);
    private static bool _UpdateLayeredWindowIntPtr(IntPtr hwnd, IntPtr hdcDst, IntPtr pptDst, IntPtr psize, IntPtr hdcSrc, IntPtr pptSrc, int crKey, BLENDFUNCTION& pblend, ULW dwFlags);
    public static void UpdateLayeredWindow(IntPtr hwnd, SafeDC hdcDst, POINT& pptDst, SIZE& psize, SafeDC hdcSrc, POINT& pptSrc, int crKey, BLENDFUNCTION& pblend, ULW dwFlags);
    public static void UpdateLayeredWindow(IntPtr hwnd, int crKey, BLENDFUNCTION& pblend, ULW dwFlags);
    public static IntPtr FindWindow(string lpClassName, string lpWindowName);
    [CLSCompliantAttribute("False")]
public static UInt32 SHAppBarMessage(int dwMessage, APPBARDATA& pData);
    public static void DwmInvalidateIconicBitmaps(IntPtr hwnd);
    public static void DwmSetIconicThumbnail(IntPtr hwnd, IntPtr hbmp, DWM_SIT dwSITFlags);
    public static void DwmSetIconicLivePreviewBitmap(IntPtr hwnd, IntPtr hbmp, RefPOINT pptClient, DWM_SIT dwSITFlags);
    [CLSCompliantAttribute("False")]
public static bool Shell_NotifyIcon(NIM dwMessage, NOTIFYICONDATA lpdata);
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
[FlagsAttribute]
[CLSCompliantAttribute("False")]
public enum ControlzEx.Standard.NIF : Enum {
    public UInt32 value__;
    public static NIF MESSAGE;
    public static NIF ICON;
    public static NIF TIP;
    public static NIF STATE;
    public static NIF INFO;
    public static NIF GUID;
    public static NIF REALTIME;
    public static NIF SHOWTIP;
    public static NIF XP_MASK;
    public static NIF VISTA_MASK;
}
internal enum ControlzEx.Standard.NIIF : Enum {
    public int value__;
    public static NIIF NONE;
    public static NIIF INFO;
    public static NIIF WARNING;
    public static NIIF ERROR;
    public static NIIF USER;
    public static NIIF NOSOUND;
    public static NIIF LARGE_ICON;
    public static NIIF NIIF_RESPECT_QUIET_TIME;
    public static NIIF XP_ICON_MASK;
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
[CLSCompliantAttribute("False")]
public enum ControlzEx.Standard.NIM : Enum {
    public UInt32 value__;
    public static NIM ADD;
    public static NIM MODIFY;
    public static NIM DELETE;
    public static NIM SETFOCUS;
    public static NIM SETVERSION;
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
public class ControlzEx.Standard.NONCLIENTMETRICS : ValueType {
    public int cbSize;
    public int iBorderWidth;
    public int iScrollWidth;
    public int iScrollHeight;
    public int iCaptionWidth;
    public int iCaptionHeight;
    public LOGFONT lfCaptionFont;
    public int iSmCaptionWidth;
    public int iSmCaptionHeight;
    public LOGFONT lfSmCaptionFont;
    public int iMenuWidth;
    public int iMenuHeight;
    public LOGFONT lfMenuFont;
    public LOGFONT lfStatusFont;
    public LOGFONT lfMessageFont;
    public int iPaddedBorderWidth;
    public static NONCLIENTMETRICS VistaMetricsStruct { get; }
    public static NONCLIENTMETRICS XPMetricsStruct { get; }
    public static NONCLIENTMETRICS get_VistaMetricsStruct();
    public static NONCLIENTMETRICS get_XPMetricsStruct();
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
public class ControlzEx.Standard.NOTIFYICONDATA : object {
    public int cbSize;
    public IntPtr hWnd;
    public int uID;
    [CLSCompliantAttribute("False")]
public NIF uFlags;
    public int uCallbackMessage;
    public IntPtr hIcon;
    public Char[] szTip;
    [CLSCompliantAttribute("False")]
public UInt32 dwState;
    [CLSCompliantAttribute("False")]
public UInt32 dwStateMask;
    public Char[] szInfo;
    [CLSCompliantAttribute("False")]
public UInt32 uVersion;
    public Char[] szInfoTitle;
    [CLSCompliantAttribute("False")]
public UInt32 dwInfoFlags;
    public Guid guidItem;
    private IntPtr hBalloonIcon;
}
internal enum ControlzEx.Standard.OLECMDEXECOPT : Enum {
    public int value__;
    public static OLECMDEXECOPT DODEFAULT;
    public static OLECMDEXECOPT PROMPTUSER;
    public static OLECMDEXECOPT DONTPROMPTUSER;
    public static OLECMDEXECOPT SHOWHELP;
}
internal enum ControlzEx.Standard.OLECMDF : Enum {
    public int value__;
    public static OLECMDF SUPPORTED;
    public static OLECMDF ENABLED;
    public static OLECMDF LATCHED;
    public static OLECMDF NINCHED;
    public static OLECMDF INVISIBLE;
    public static OLECMDF DEFHIDEONCTXTMENU;
}
internal enum ControlzEx.Standard.OLECMDID : Enum {
    public int value__;
    public static OLECMDID OPEN;
    public static OLECMDID NEW;
    public static OLECMDID SAVE;
    public static OLECMDID SAVEAS;
    public static OLECMDID SAVECOPYAS;
    public static OLECMDID PRINT;
    public static OLECMDID PRINTPREVIEW;
    public static OLECMDID PAGESETUP;
    public static OLECMDID SPELL;
    public static OLECMDID PROPERTIES;
    public static OLECMDID CUT;
    public static OLECMDID COPY;
    public static OLECMDID PASTE;
    public static OLECMDID PASTESPECIAL;
    public static OLECMDID UNDO;
    public static OLECMDID REDO;
    public static OLECMDID SELECTALL;
    public static OLECMDID CLEARSELECTION;
    public static OLECMDID ZOOM;
    public static OLECMDID GETZOOMRANGE;
    public static OLECMDID UPDATECOMMANDS;
    public static OLECMDID REFRESH;
    public static OLECMDID STOP;
    public static OLECMDID HIDETOOLBARS;
    public static OLECMDID SETPROGRESSMAX;
    public static OLECMDID SETPROGRESSPOS;
    public static OLECMDID SETPROGRESSTEXT;
    public static OLECMDID SETTITLE;
    public static OLECMDID SETDOWNLOADSTATE;
    public static OLECMDID STOPDOWNLOAD;
    public static OLECMDID ONTOOLBARACTIVATED;
    public static OLECMDID FIND;
    public static OLECMDID DELETE;
    public static OLECMDID HTTPEQUIV;
    public static OLECMDID HTTPEQUIV_DONE;
    public static OLECMDID ENABLE_INTERACTION;
    public static OLECMDID ONUNLOAD;
    public static OLECMDID PROPERTYBAG2;
    public static OLECMDID PREREFRESH;
    public static OLECMDID SHOWSCRIPTERROR;
    public static OLECMDID SHOWMESSAGE;
    public static OLECMDID SHOWFIND;
    public static OLECMDID SHOWPAGESETUP;
    public static OLECMDID SHOWPRINT;
    public static OLECMDID CLOSE;
    public static OLECMDID ALLOWUILESSSAVEAS;
    public static OLECMDID DONTDOWNLOADCSS;
    public static OLECMDID UPDATEPAGESTATUS;
    public static OLECMDID PRINT2;
    public static OLECMDID PRINTPREVIEW2;
    public static OLECMDID SETPRINTTEMPLATE;
    public static OLECMDID GETPRINTTEMPLATE;
    public static OLECMDID PAGEACTIONBLOCKED;
    public static OLECMDID PAGEACTIONUIQUERY;
    public static OLECMDID FOCUSVIEWCONTROLS;
    public static OLECMDID FOCUSVIEWCONTROLSQUERY;
    public static OLECMDID SHOWPAGEACTIONMENU;
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
public class ControlzEx.Standard.POINT : ValueType {
    private int _x;
    private int _y;
    public int X { get; public set; }
    public int Y { get; public set; }
    public POINT(int x, int y);
    public int get_X();
    public void set_X(int value);
    public int get_Y();
    public void set_Y(int value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(POINT a, POINT b);
    public static bool op_Inequality(POINT a, POINT b);
}
internal class ControlzEx.Standard.PROPVARIANT : object {
    private ushort vt;
    private IntPtr pointerVal;
    private byte byteVal;
    private long longVal;
    private short boolVal;
    public VarEnum VarType { get; }
    public VarEnum get_VarType();
    public string GetValue();
    public void SetValue(bool f);
    public void SetValue(string val);
    public void Clear();
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
    private void Dispose(bool disposing);
}
internal enum ControlzEx.Standard.READYSTATE : Enum {
    public int value__;
    public static READYSTATE UNINITIALIZED;
    public static READYSTATE LOADING;
    public static READYSTATE LOADED;
    public static READYSTATE INTERACTIVE;
    public static READYSTATE COMPLETE;
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
public class ControlzEx.Standard.RECT : ValueType {
    public static RECT Empty;
    [CompilerGeneratedAttribute]
private int <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Top>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Right>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Bottom>k__BackingField;
    public int Left { get; public set; }
    public int Top { get; public set; }
    public int Right { get; public set; }
    public int Bottom { get; public set; }
    public int Width { get; }
    public int Height { get; }
    public bool IsEmpty { get; }
    public RECT(int left, int top, int right, int bottom);
    public RECT(RECT rcSrc);
    private static RECT();
    public void Offset(int dx, int dy);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Left();
    [CompilerGeneratedAttribute]
public void set_Left(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Top();
    [CompilerGeneratedAttribute]
public void set_Top(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Right();
    [CompilerGeneratedAttribute]
public void set_Right(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Bottom();
    [CompilerGeneratedAttribute]
public void set_Bottom(int value);
    public int get_Width();
    public int get_Height();
    public static RECT Union(RECT rect1, RECT rect2);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RECT other);
    public bool get_IsEmpty();
    public virtual string ToString();
    public virtual int GetHashCode();
    public static bool op_Equality(RECT rect1, RECT rect2);
    public static bool op_Inequality(RECT rect1, RECT rect2);
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
public class ControlzEx.Standard.RefPOINT : object {
    public int x;
    public int y;
}
internal class ControlzEx.Standard.RefRECT : object {
    private int _left;
    private int _top;
    private int _right;
    private int _bottom;
    public int Width { get; }
    public int Height { get; }
    public int Left { get; public set; }
    public int Right { get; public set; }
    public int Top { get; public set; }
    public int Bottom { get; public set; }
    public RefRECT(int left, int top, int right, int bottom);
    public int get_Width();
    public int get_Height();
    public int get_Left();
    public void set_Left(int value);
    public int get_Right();
    public void set_Right(int value);
    public int get_Top();
    public void set_Top(int value);
    public int get_Bottom();
    public void set_Bottom(int value);
    public void Offset(int dx, int dy);
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
public class ControlzEx.Standard.RGBQUAD : ValueType {
    public byte rgbBlue;
    public byte rgbGreen;
    public byte rgbRed;
    public byte rgbReserved;
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
public enum ControlzEx.Standard.RGN : Enum {
    public int value__;
    public static RGN AND;
    public static RGN OR;
    public static RGN XOR;
    public static RGN DIFF;
    public static RGN COPY;
}
internal class ControlzEx.Standard.SafeConnectionPointCookie : SafeHandleZeroOrMinusOneIsInvalid {
    private IConnectionPoint _cp;
    public SafeConnectionPointCookie(IConnectionPointContainer target, object sink, Guid eventId);
    public void Disconnect();
    [ReliabilityContractAttribute("3", "1")]
protected virtual bool ReleaseHandle();
}
internal enum ControlzEx.Standard.SafeCopyFileOptions : Enum {
    public int value__;
    public static SafeCopyFileOptions PreserveOriginal;
    public static SafeCopyFileOptions Overwrite;
    public static SafeCopyFileOptions FindBetterName;
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
public class ControlzEx.Standard.SafeDC : SafeHandleZeroOrMinusOneIsInvalid {
    private Nullable`1<IntPtr> _hwnd;
    private bool _created;
    unknown IntPtr Hwnd {public set; }
    public void set_Hwnd(IntPtr value);
    [ReliabilityContractAttribute("3", "1")]
protected virtual bool ReleaseHandle();
    public static SafeDC CreateDC(string deviceName);
    public static SafeDC CreateCompatibleDC(SafeDC hdc);
    public static SafeDC GetDC(IntPtr hwnd);
    public static SafeDC GetDesktop();
    public static SafeDC WrapDC(IntPtr hdc);
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
public class ControlzEx.Standard.SafeFindHandle : SafeHandleZeroOrMinusOneIsInvalid {
    protected virtual bool ReleaseHandle();
}
internal class ControlzEx.Standard.SafeGdiplusStartupToken : SafeHandleZeroOrMinusOneIsInvalid {
    private SafeGdiplusStartupToken(IntPtr ptr);
    [ReliabilityContractAttribute("3", "1")]
protected virtual bool ReleaseHandle();
    public static SafeGdiplusStartupToken Startup();
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
public class ControlzEx.Standard.SafeHBITMAP : SafeHandleZeroOrMinusOneIsInvalid {
    [ReliabilityContractAttribute("3", "1")]
protected virtual bool ReleaseHandle();
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
public enum ControlzEx.Standard.SC : Enum {
    public int value__;
    public static SC SIZE;
    public static SC MOVE;
    public static SC MOUSEMOVE;
    public static SC MINIMIZE;
    public static SC MAXIMIZE;
    public static SC NEXTWINDOW;
    public static SC PREVWINDOW;
    public static SC CLOSE;
    public static SC VSCROLL;
    public static SC HSCROLL;
    public static SC MOUSEMENU;
    public static SC KEYMENU;
    public static SC ARRANGE;
    public static SC RESTORE;
    public static SC TASKLIST;
    public static SC SCREENSAVE;
    public static SC HOTKEY;
    public static SC DEFAULT;
    public static SC MONITORPOWER;
    public static SC CONTEXTHELP;
    public static SC SEPARATOR;
    public static SC F_ISSECURE;
    public static SC ICON;
    public static SC ZOOM;
}
internal enum ControlzEx.Standard.SHARD : Enum {
    public int value__;
    public static SHARD PIDL;
    public static SHARD PATHA;
    public static SHARD PATHW;
    public static SHARD APPIDINFO;
    public static SHARD APPIDINFOIDLIST;
    public static SHARD LINK;
    public static SHARD APPIDINFOLINK;
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
public class ControlzEx.Standard.SHARDAPPIDINFO : object {
    private object psi;
    private string pszAppID;
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
public class ControlzEx.Standard.SHARDAPPIDINFOIDLIST : object {
    private IntPtr pidl;
    private string pszAppID;
}
internal class ControlzEx.Standard.SHARDAPPIDINFOLINK : object {
    private IntPtr psl;
    private string pszAppID;
}
internal class ControlzEx.Standard.SHDRAGIMAGE : ValueType {
    public SIZE sizeDragImage;
    public POINT ptOffset;
    public IntPtr hbmpDragImage;
    public int crColorKey;
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
public class ControlzEx.Standard.SHFILEOPSTRUCT : ValueType {
    public IntPtr hwnd;
    public FO wFunc;
    public string pFrom;
    public string pTo;
    [CLSCompliantAttribute("False")]
public FOF fFlags;
    public int fAnyOperationsAborted;
    public IntPtr hNameMappings;
    public string lpszProgressTitle;
}
internal static class ControlzEx.Standard.SID : object {
    public static string SWebBrowserApp;
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
public class ControlzEx.Standard.SIZE : ValueType {
    public int cx;
    public int cy;
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
[FlagsAttribute]
public enum ControlzEx.Standard.SLGP : Enum {
    public int value__;
    public static SLGP SHORTPATH;
    public static SLGP UNCPRIORITY;
    public static SLGP RAWPATH;
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
public enum ControlzEx.Standard.SM : Enum {
    public int value__;
    public static SM CXSCREEN;
    public static SM CYSCREEN;
    public static SM CXVSCROLL;
    public static SM CYHSCROLL;
    public static SM CYCAPTION;
    public static SM CXBORDER;
    public static SM CYBORDER;
    public static SM CXFIXEDFRAME;
    public static SM CYFIXEDFRAME;
    public static SM CYVTHUMB;
    public static SM CXHTHUMB;
    public static SM CXICON;
    public static SM CYICON;
    public static SM CXCURSOR;
    public static SM CYCURSOR;
    public static SM CYMENU;
    public static SM CXFULLSCREEN;
    public static SM CYFULLSCREEN;
    public static SM CYKANJIWINDOW;
    public static SM MOUSEPRESENT;
    public static SM CYVSCROLL;
    public static SM CXHSCROLL;
    public static SM DEBUG;
    public static SM SWAPBUTTON;
    public static SM CXMIN;
    public static SM CYMIN;
    public static SM CXSIZE;
    public static SM CYSIZE;
    public static SM CXFRAME;
    public static SM CXSIZEFRAME;
    public static SM CYFRAME;
    public static SM CYSIZEFRAME;
    public static SM CXMINTRACK;
    public static SM CYMINTRACK;
    public static SM CXDOUBLECLK;
    public static SM CYDOUBLECLK;
    public static SM CXICONSPACING;
    public static SM CYICONSPACING;
    public static SM MENUDROPALIGNMENT;
    public static SM PENWINDOWS;
    public static SM DBCSENABLED;
    public static SM CMOUSEBUTTONS;
    public static SM SECURE;
    public static SM CXEDGE;
    public static SM CYEDGE;
    public static SM CXMINSPACING;
    public static SM CYMINSPACING;
    public static SM CXSMICON;
    public static SM CYSMICON;
    public static SM CYSMCAPTION;
    public static SM CXSMSIZE;
    public static SM CYSMSIZE;
    public static SM CXMENUSIZE;
    public static SM CYMENUSIZE;
    public static SM ARRANGE;
    public static SM CXMINIMIZED;
    public static SM CYMINIMIZED;
    public static SM CXMAXTRACK;
    public static SM CYMAXTRACK;
    public static SM CXMAXIMIZED;
    public static SM CYMAXIMIZED;
    public static SM NETWORK;
    public static SM CLEANBOOT;
    public static SM CXDRAG;
    public static SM CYDRAG;
    public static SM SHOWSOUNDS;
    public static SM CXMENUCHECK;
    public static SM CYMENUCHECK;
    public static SM SLOWMACHINE;
    public static SM MIDEASTENABLED;
    public static SM MOUSEWHEELPRESENT;
    public static SM XVIRTUALSCREEN;
    public static SM YVIRTUALSCREEN;
    public static SM CXVIRTUALSCREEN;
    public static SM CYVIRTUALSCREEN;
    public static SM CMONITORS;
    public static SM SAMEDISPLAYFORMAT;
    public static SM IMMENABLED;
    public static SM CXFOCUSBORDER;
    public static SM CYFOCUSBORDER;
    public static SM TABLETPC;
    public static SM MEDIACENTER;
    public static SM REMOTESESSION;
    public static SM REMOTECONTROL;
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
public enum ControlzEx.Standard.SPI : Enum {
    public int value__;
    public static SPI GETBEEP;
    public static SPI SETBEEP;
    public static SPI GETMOUSE;
    public static SPI SETMOUSE;
    public static SPI GETBORDER;
    public static SPI SETBORDER;
    public static SPI GETKEYBOARDSPEED;
    public static SPI SETKEYBOARDSPEED;
    public static SPI LANGDRIVER;
    public static SPI ICONHORIZONTALSPACING;
    public static SPI GETSCREENSAVETIMEOUT;
    public static SPI SETSCREENSAVETIMEOUT;
    public static SPI GETSCREENSAVEACTIVE;
    public static SPI SETSCREENSAVEACTIVE;
    public static SPI GETGRIDGRANULARITY;
    public static SPI SETGRIDGRANULARITY;
    public static SPI SETDESKWALLPAPER;
    public static SPI SETDESKPATTERN;
    public static SPI GETKEYBOARDDELAY;
    public static SPI SETKEYBOARDDELAY;
    public static SPI ICONVERTICALSPACING;
    public static SPI GETICONTITLEWRAP;
    public static SPI SETICONTITLEWRAP;
    public static SPI GETMENUDROPALIGNMENT;
    public static SPI SETMENUDROPALIGNMENT;
    public static SPI SETDOUBLECLKWIDTH;
    public static SPI SETDOUBLECLKHEIGHT;
    public static SPI GETICONTITLELOGFONT;
    public static SPI SETDOUBLECLICKTIME;
    public static SPI SETMOUSEBUTTONSWAP;
    public static SPI SETICONTITLELOGFONT;
    public static SPI GETFASTTASKSWITCH;
    public static SPI SETFASTTASKSWITCH;
    public static SPI SETDRAGFULLWINDOWS;
    public static SPI GETDRAGFULLWINDOWS;
    public static SPI GETNONCLIENTMETRICS;
    public static SPI SETNONCLIENTMETRICS;
    public static SPI GETMINIMIZEDMETRICS;
    public static SPI SETMINIMIZEDMETRICS;
    public static SPI GETICONMETRICS;
    public static SPI SETICONMETRICS;
    public static SPI SETWORKAREA;
    public static SPI GETWORKAREA;
    public static SPI SETPENWINDOWS;
    public static SPI GETHIGHCONTRAST;
    public static SPI SETHIGHCONTRAST;
    public static SPI GETKEYBOARDPREF;
    public static SPI SETKEYBOARDPREF;
    public static SPI GETSCREENREADER;
    public static SPI SETSCREENREADER;
    public static SPI GETANIMATION;
    public static SPI SETANIMATION;
    public static SPI GETFONTSMOOTHING;
    public static SPI SETFONTSMOOTHING;
    public static SPI SETDRAGWIDTH;
    public static SPI SETDRAGHEIGHT;
    public static SPI SETHANDHELD;
    public static SPI GETLOWPOWERTIMEOUT;
    public static SPI GETPOWEROFFTIMEOUT;
    public static SPI SETLOWPOWERTIMEOUT;
    public static SPI SETPOWEROFFTIMEOUT;
    public static SPI GETLOWPOWERACTIVE;
    public static SPI GETPOWEROFFACTIVE;
    public static SPI SETLOWPOWERACTIVE;
    public static SPI SETPOWEROFFACTIVE;
    public static SPI SETCURSORS;
    public static SPI SETICONS;
    public static SPI GETDEFAULTINPUTLANG;
    public static SPI SETDEFAULTINPUTLANG;
    public static SPI SETLANGTOGGLE;
    public static SPI GETWINDOWSEXTENSION;
    public static SPI SETMOUSETRAILS;
    public static SPI GETMOUSETRAILS;
    public static SPI SETSCREENSAVERRUNNING;
    public static SPI SCREENSAVERRUNNING;
    public static SPI GETFILTERKEYS;
    public static SPI SETFILTERKEYS;
    public static SPI GETTOGGLEKEYS;
    public static SPI SETTOGGLEKEYS;
    public static SPI GETMOUSEKEYS;
    public static SPI SETMOUSEKEYS;
    public static SPI GETSHOWSOUNDS;
    public static SPI SETSHOWSOUNDS;
    public static SPI GETSTICKYKEYS;
    public static SPI SETSTICKYKEYS;
    public static SPI GETACCESSTIMEOUT;
    public static SPI SETACCESSTIMEOUT;
    public static SPI GETSERIALKEYS;
    public static SPI SETSERIALKEYS;
    public static SPI GETSOUNDSENTRY;
    public static SPI SETSOUNDSENTRY;
    public static SPI GETSNAPTODEFBUTTON;
    public static SPI SETSNAPTODEFBUTTON;
    public static SPI GETMOUSEHOVERWIDTH;
    public static SPI SETMOUSEHOVERWIDTH;
    public static SPI GETMOUSEHOVERHEIGHT;
    public static SPI SETMOUSEHOVERHEIGHT;
    public static SPI GETMOUSEHOVERTIME;
    public static SPI SETMOUSEHOVERTIME;
    public static SPI GETWHEELSCROLLLINES;
    public static SPI SETWHEELSCROLLLINES;
    public static SPI GETMENUSHOWDELAY;
    public static SPI SETMENUSHOWDELAY;
    public static SPI GETWHEELSCROLLCHARS;
    public static SPI SETWHEELSCROLLCHARS;
    public static SPI GETSHOWIMEUI;
    public static SPI SETSHOWIMEUI;
    public static SPI GETMOUSESPEED;
    public static SPI SETMOUSESPEED;
    public static SPI GETSCREENSAVERRUNNING;
    public static SPI GETDESKWALLPAPER;
    public static SPI GETAUDIODESCRIPTION;
    public static SPI SETAUDIODESCRIPTION;
    public static SPI GETSCREENSAVESECURE;
    public static SPI SETSCREENSAVESECURE;
    public static SPI GETHUNGAPPTIMEOUT;
    public static SPI SETHUNGAPPTIMEOUT;
    public static SPI GETWAITTOKILLTIMEOUT;
    public static SPI SETWAITTOKILLTIMEOUT;
    public static SPI GETWAITTOKILLSERVICETIMEOUT;
    public static SPI SETWAITTOKILLSERVICETIMEOUT;
    public static SPI GETMOUSEDOCKTHRESHOLD;
    public static SPI SETMOUSEDOCKTHRESHOLD;
    public static SPI GETPENDOCKTHRESHOLD;
    public static SPI SETPENDOCKTHRESHOLD;
    public static SPI GETWINARRANGING;
    public static SPI SETWINARRANGING;
    public static SPI GETMOUSEDRAGOUTTHRESHOLD;
    public static SPI SETMOUSEDRAGOUTTHRESHOLD;
    public static SPI GETPENDRAGOUTTHRESHOLD;
    public static SPI SETPENDRAGOUTTHRESHOLD;
    public static SPI GETMOUSESIDEMOVETHRESHOLD;
    public static SPI SETMOUSESIDEMOVETHRESHOLD;
    public static SPI GETPENSIDEMOVETHRESHOLD;
    public static SPI SETPENSIDEMOVETHRESHOLD;
    public static SPI GETDRAGFROMMAXIMIZE;
    public static SPI SETDRAGFROMMAXIMIZE;
    public static SPI GETSNAPSIZING;
    public static SPI SETSNAPSIZING;
    public static SPI GETDOCKMOVING;
    public static SPI SETDOCKMOVING;
    public static SPI GETACTIVEWINDOWTRACKING;
    public static SPI SETACTIVEWINDOWTRACKING;
    public static SPI GETMENUANIMATION;
    public static SPI SETMENUANIMATION;
    public static SPI GETCOMBOBOXANIMATION;
    public static SPI SETCOMBOBOXANIMATION;
    public static SPI GETLISTBOXSMOOTHSCROLLING;
    public static SPI SETLISTBOXSMOOTHSCROLLING;
    public static SPI GETGRADIENTCAPTIONS;
    public static SPI SETGRADIENTCAPTIONS;
    public static SPI GETKEYBOARDCUES;
    public static SPI SETKEYBOARDCUES;
    public static SPI GETMENUUNDERLINES;
    public static SPI SETMENUUNDERLINES;
    public static SPI GETACTIVEWNDTRKZORDER;
    public static SPI SETACTIVEWNDTRKZORDER;
    public static SPI GETHOTTRACKING;
    public static SPI SETHOTTRACKING;
    public static SPI GETMENUFADE;
    public static SPI SETMENUFADE;
    public static SPI GETSELECTIONFADE;
    public static SPI SETSELECTIONFADE;
    public static SPI GETTOOLTIPANIMATION;
    public static SPI SETTOOLTIPANIMATION;
    public static SPI GETTOOLTIPFADE;
    public static SPI SETTOOLTIPFADE;
    public static SPI GETCURSORSHADOW;
    public static SPI SETCURSORSHADOW;
    public static SPI GETMOUSESONAR;
    public static SPI SETMOUSESONAR;
    public static SPI GETMOUSECLICKLOCK;
    public static SPI SETMOUSECLICKLOCK;
    public static SPI GETMOUSEVANISH;
    public static SPI SETMOUSEVANISH;
    public static SPI GETFLATMENU;
    public static SPI SETFLATMENU;
    public static SPI GETDROPSHADOW;
    public static SPI SETDROPSHADOW;
    public static SPI GETBLOCKSENDINPUTRESETS;
    public static SPI SETBLOCKSENDINPUTRESETS;
    public static SPI GETUIEFFECTS;
    public static SPI SETUIEFFECTS;
    public static SPI GETDISABLEOVERLAPPEDCONTENT;
    public static SPI SETDISABLEOVERLAPPEDCONTENT;
    public static SPI GETCLIENTAREAANIMATION;
    public static SPI SETCLIENTAREAANIMATION;
    public static SPI GETCLEARTYPE;
    public static SPI SETCLEARTYPE;
    public static SPI GETSPEECHRECOGNITION;
    public static SPI SETSPEECHRECOGNITION;
    public static SPI GETFOREGROUNDLOCKTIMEOUT;
    public static SPI SETFOREGROUNDLOCKTIMEOUT;
    public static SPI GETACTIVEWNDTRKTIMEOUT;
    public static SPI SETACTIVEWNDTRKTIMEOUT;
    public static SPI GETFOREGROUNDFLASHCOUNT;
    public static SPI SETFOREGROUNDFLASHCOUNT;
    public static SPI GETCARETWIDTH;
    public static SPI SETCARETWIDTH;
    public static SPI GETMOUSECLICKLOCKTIME;
    public static SPI SETMOUSECLICKLOCKTIME;
    public static SPI GETFONTSMOOTHINGTYPE;
    public static SPI SETFONTSMOOTHINGTYPE;
    public static SPI GETFONTSMOOTHINGCONTRAST;
    public static SPI SETFONTSMOOTHINGCONTRAST;
    public static SPI GETFOCUSBORDERWIDTH;
    public static SPI SETFOCUSBORDERWIDTH;
    public static SPI GETFOCUSBORDERHEIGHT;
    public static SPI SETFOCUSBORDERHEIGHT;
    public static SPI GETFONTSMOOTHINGORIENTATION;
    public static SPI SETFONTSMOOTHINGORIENTATION;
    public static SPI GETMINIMUMHITRADIUS;
    public static SPI SETMINIMUMHITRADIUS;
    public static SPI GETMESSAGEDURATION;
    public static SPI SETMESSAGEDURATION;
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
[FlagsAttribute]
public enum ControlzEx.Standard.SPIF : Enum {
    public int value__;
    public static SPIF None;
    public static SPIF UPDATEINIFILE;
    public static SPIF SENDWININICHANGE;
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
public class ControlzEx.Standard.StartupInput : object {
    public int GdiplusVersion;
    public IntPtr DebugEventCallback;
    public bool SuppressBackgroundThread;
    public bool SuppressExternalCodecs;
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
public class ControlzEx.Standard.StartupOutput : ValueType {
    public IntPtr hook;
    public IntPtr unhook;
}
[FlagsAttribute]
internal enum ControlzEx.Standard.STATE_SYSTEM : Enum {
    public int value__;
    public static STATE_SYSTEM UNAVAILABLE;
    public static STATE_SYSTEM SELECTED;
    public static STATE_SYSTEM FOCUSED;
    public static STATE_SYSTEM PRESSED;
    public static STATE_SYSTEM CHECKED;
    public static STATE_SYSTEM MIXED;
    public static STATE_SYSTEM INDETERMINATE;
    public static STATE_SYSTEM READONLY;
    public static STATE_SYSTEM HOTTRACKED;
    public static STATE_SYSTEM DEFAULT;
    public static STATE_SYSTEM EXPANDED;
    public static STATE_SYSTEM COLLAPSED;
    public static STATE_SYSTEM BUSY;
    public static STATE_SYSTEM FLOATING;
    public static STATE_SYSTEM MARQUEED;
    public static STATE_SYSTEM ANIMATED;
    public static STATE_SYSTEM INVISIBLE;
    public static STATE_SYSTEM OFFSCREEN;
    public static STATE_SYSTEM SIZEABLE;
    public static STATE_SYSTEM MOVEABLE;
    public static STATE_SYSTEM SELFVOICING;
    public static STATE_SYSTEM FOCUSABLE;
    public static STATE_SYSTEM SELECTABLE;
    public static STATE_SYSTEM LINKED;
    public static STATE_SYSTEM TRAVERSED;
    public static STATE_SYSTEM MULTISELECTABLE;
    public static STATE_SYSTEM EXTSELECTABLE;
    public static STATE_SYSTEM ALERT_LOW;
    public static STATE_SYSTEM ALERT_MEDIUM;
    public static STATE_SYSTEM ALERT_HIGH;
    public static STATE_SYSTEM PROTECTED;
    public static STATE_SYSTEM VALID;
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
public enum ControlzEx.Standard.Status : Enum {
    public int value__;
    public static Status Ok;
    public static Status GenericError;
    public static Status InvalidParameter;
    public static Status OutOfMemory;
    public static Status ObjectBusy;
    public static Status InsufficientBuffer;
    public static Status NotImplemented;
    public static Status Win32Error;
    public static Status WrongState;
    public static Status Aborted;
    public static Status FileNotFound;
    public static Status ValueOverflow;
    public static Status AccessDenied;
    public static Status UnknownImageFormat;
    public static Status FontFamilyNotFound;
    public static Status FontStyleNotFound;
    public static Status NotTrueTypeFont;
    public static Status UnsupportedGdiplusVersion;
    public static Status GdiplusNotInitialized;
    public static Status PropertyNotFound;
    public static Status PropertyNotSupported;
    public static Status ProfileNotFound;
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
public enum ControlzEx.Standard.StockObject : Enum {
    public int value__;
    public static StockObject WHITE_BRUSH;
    public static StockObject LTGRAY_BRUSH;
    public static StockObject GRAY_BRUSH;
    public static StockObject DKGRAY_BRUSH;
    public static StockObject BLACK_BRUSH;
    public static StockObject NULL_BRUSH;
    public static StockObject HOLLOW_BRUSH;
    public static StockObject WHITE_PEN;
    public static StockObject BLACK_PEN;
    public static StockObject NULL_PEN;
    public static StockObject SYSTEM_FONT;
    public static StockObject DEFAULT_PALETTE;
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
public enum ControlzEx.Standard.SW : Enum {
    public int value__;
    public static SW HIDE;
    public static SW SHOWNORMAL;
    public static SW NORMAL;
    public static SW SHOWMINIMIZED;
    public static SW SHOWMAXIMIZED;
    public static SW MAXIMIZE;
    public static SW SHOWNOACTIVATE;
    public static SW SHOW;
    public static SW MINIMIZE;
    public static SW SHOWMINNOACTIVE;
    public static SW SHOWNA;
    public static SW RESTORE;
    public static SW SHOWDEFAULT;
    public static SW FORCEMINIMIZE;
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
[FlagsAttribute]
[CLSCompliantAttribute("False")]
public enum ControlzEx.Standard.SWP : Enum {
    public UInt32 value__;
    public static SWP ASYNCWINDOWPOS;
    public static SWP DEFERERASE;
    public static SWP DRAWFRAME;
    public static SWP FRAMECHANGED;
    public static SWP HIDEWINDOW;
    public static SWP NOACTIVATE;
    public static SWP NOCOPYBITS;
    public static SWP NOMOVE;
    public static SWP NOOWNERZORDER;
    public static SWP NOREDRAW;
    public static SWP NOREPOSITION;
    public static SWP NOSENDCHANGING;
    public static SWP NOSIZE;
    public static SWP NOZORDER;
    public static SWP SHOWWINDOW;
    public static SWP TOPMOST;
}
internal class ControlzEx.Standard.TITLEBARINFO : ValueType {
    public int cbSize;
    public RECT rcTitleBar;
    public STATE_SYSTEM rgstate_TitleBar;
    public STATE_SYSTEM rgstate_Reserved;
    public STATE_SYSTEM rgstate_MinimizeButton;
    public STATE_SYSTEM rgstate_MaximizeButton;
    public STATE_SYSTEM rgstate_HelpButton;
    public STATE_SYSTEM rgstate_CloseButton;
}
internal class ControlzEx.Standard.TITLEBARINFOEX : ValueType {
    public int cbSize;
    public RECT rcTitleBar;
    public STATE_SYSTEM rgstate_TitleBar;
    public STATE_SYSTEM rgstate_Reserved;
    public STATE_SYSTEM rgstate_MinimizeButton;
    public STATE_SYSTEM rgstate_MaximizeButton;
    public STATE_SYSTEM rgstate_HelpButton;
    public STATE_SYSTEM rgstate_CloseButton;
    public RECT rgrect_TitleBar;
    public RECT rgrect_Reserved;
    public RECT rgrect_MinimizeButton;
    public RECT rgrect_MaximizeButton;
    public RECT rgrect_HelpButton;
    public RECT rgrect_CloseButton;
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
public enum ControlzEx.Standard.ULW : Enum {
    public int value__;
    public static ULW ALPHA;
    public static ULW COLORKEY;
    public static ULW OPAQUE;
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
[CLSCompliantAttribute("False")]
public class ControlzEx.Standard.UNSIGNED_RATIO : ValueType {
    public UInt32 uiNumerator;
    public UInt32 uiDenominator;
}
[ExtensionAttribute]
internal static class ControlzEx.Standard.Utility : object {
    private static Random _randomNumberGenerator;
    private static Version _osVersion;
    private static int s_bitDepth;
    public static bool IsOSVistaOrNewer { get; }
    public static bool IsOSWindows7OrNewer { get; }
    private static Utility();
    private static bool _MemCmp(IntPtr left, IntPtr right, long cb);
    public static Exception FailableFunction(Func`1<T> function, T& result);
    public static T FailableFunction(Func`1<T> function);
    public static T FailableFunction(int maxRetries, Func`1<T> function);
    public static Exception FailableFunction(int maxRetries, Func`1<T> function, T& result);
    public static string GetHashString(string value);
    public static Point GetPoint(IntPtr ptr);
    public static int GET_X_LPARAM(IntPtr lParam);
    public static int GET_Y_LPARAM(IntPtr lParam);
    public static int HIWORD(int i);
    public static int LOWORD(int i);
    public static IntPtr MakeLParam(int LoWord, int HiWord);
    public static bool AreStreamsEqual(Stream left, Stream right);
    public static bool GuidTryParse(string guidString, Guid& guid);
    public static bool IsFlagSet(int value, int mask);
    public static bool IsFlagSet(UInt32 value, UInt32 mask);
    public static bool IsFlagSet(long value, long mask);
    public static bool IsFlagSet(ulong value, ulong mask);
    public static bool IsInterfaceImplemented(Type objectType, Type interfaceType);
    public static string SafeCopyFile(string sourceFileName, string destFileName, SafeCopyFileOptions options);
    public static void SafeDeleteFile(string path);
    public static void SafeDispose(T& disposable);
    public static void GeneratePropertyString(StringBuilder source, string propertyName, string value);
    [ObsoleteAttribute]
public static string GenerateToString(T object);
    public static void CopyStream(Stream destination, Stream source);
    public static string HashStreamMD5(Stream stm);
    public static void EnsureDirectory(string path);
    public static bool MemCmp(Byte[] left, Byte[] right, int cb);
    public static string UrlDecode(string url);
    public static string UrlEncode(string url);
    private static bool _UrlEncodeIsSafe(byte b);
    private static bool _IsAsciiAlphaNumeric(byte b);
    private static byte _IntToHex(int n);
    private static int _HexToInt(char h);
    public static string MakeValidFileName(string invalidPath);
    [IteratorStateMachineAttribute("ControlzEx.Standard.Utility/<GenerateFileNames>d__37")]
public static IEnumerable`1<string> GenerateFileNames(string directory, string primaryFileName, string extension);
    public static bool TryFileMove(string sourceFileName, string destFileName);
    public static void SafeDestroyIcon(IntPtr& hicon);
    public static void SafeDeleteObject(IntPtr& gdiObject);
    public static void SafeDestroyWindow(IntPtr& hwnd);
    public static void SafeDisposeImage(IntPtr& gdipImage);
    public static void SafeCoTaskMemFree(IntPtr& ptr);
    public static void SafeFreeHGlobal(IntPtr& hglobal);
    public static void SafeRelease(T& comObject);
    public static bool get_IsOSVistaOrNewer();
    public static bool get_IsOSWindows7OrNewer();
    public static Byte[] GetBytesFromBitmapSource(BitmapSource bmp);
    public static BitmapSource GenerateBitmapSource(ImageSource img);
    public static BitmapSource GenerateBitmapSource(ImageSource img, double renderWidth, double renderHeight);
    public static BitmapSource GenerateBitmapSource(UIElement element, double renderWidth, double renderHeight, bool performLayout);
    public static void SaveToPng(BitmapSource source, string fileName);
    private static int _GetBitDepth();
    public static BitmapFrame GetBestMatch(IList`1<BitmapFrame> frames, int width, int height);
    private static int _MatchImage(BitmapFrame frame, int bitDepth, int width, int height, int bpp);
    private static int _WeightedAbs(int valueHave, int valueWant, bool fPunish);
    private static BitmapFrame _GetBestMatch(IList`1<BitmapFrame> frames, int bitDepth, int width, int height);
    public static int RGB(Color c);
    public static int AlphaRGB(Color c);
    public static Color ColorFromArgbDword(UInt32 color);
    public static bool AreImageSourcesEqual(ImageSource left, ImageSource right);
    public static IntPtr GenerateHICON(ImageSource image, Size dimensions);
    public static void AddDependencyPropertyChangeListener(object component, DependencyProperty property, EventHandler listener);
    public static void RemoveDependencyPropertyChangeListener(object component, DependencyProperty property, EventHandler listener);
    [ExtensionAttribute]
public static bool IsNonNegative(Thickness thickness);
    [ExtensionAttribute]
public static bool IsValid(CornerRadius cornerRadius);
}
internal static class ControlzEx.Standard.Verify : object {
    [DebuggerStepThroughAttribute]
public static void IsApartmentState(ApartmentState requiredState, string message);
    [DebuggerStepThroughAttribute]
public static void IsNeitherNullNorEmpty(string value, string name);
    [DebuggerStepThroughAttribute]
public static void IsNeitherNullNorWhitespace(string value, string name);
    [DebuggerStepThroughAttribute]
public static void IsNotDefault(T obj, string name);
    [DebuggerStepThroughAttribute]
public static void IsNotNull(T obj, string name);
    [DebuggerStepThroughAttribute]
public static void IsNull(T obj, string name);
    [DebuggerStepThroughAttribute]
public static void PropertyIsNotNull(T obj, string name);
    [DebuggerStepThroughAttribute]
public static void PropertyIsNull(T obj, string name);
    [DebuggerStepThroughAttribute]
public static void IsTrue(bool statement, string name, string message);
    [DebuggerStepThroughAttribute]
public static void IsFalse(bool statement, string name, string message);
    [DebuggerStepThroughAttribute]
public static void AreEqual(T expected, T actual, string parameterName, string message);
    [DebuggerStepThroughAttribute]
public static void AreNotEqual(T notExpected, T actual, string parameterName, string message);
    [DebuggerStepThroughAttribute]
public static void UriIsAbsolute(Uri uri, string parameterName);
    [DebuggerStepThroughAttribute]
public static void BoundedInteger(int lowerBoundInclusive, int value, int upperBoundExclusive, string parameterName);
    [DebuggerStepThroughAttribute]
public static void BoundedDoubleInc(double lowerBoundInclusive, double value, double upperBoundInclusive, string message, string parameter);
    [DebuggerStepThroughAttribute]
public static void TypeSupportsInterface(Type type, Type interfaceType, string parameterName);
    [DebuggerStepThroughAttribute]
public static void FileExists(string filePath, string parameterName);
    [DebuggerStepThroughAttribute]
internal static void ImplementsInterface(object parameter, Type interfaceType, string parameterName);
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
[BestFitMappingAttribute("False")]
public class ControlzEx.Standard.WIN32_FIND_DATAW : object {
    public FileAttributes dwFileAttributes;
    public FILETIME ftCreationTime;
    public FILETIME ftLastAccessTime;
    public FILETIME ftLastWriteTime;
    public int nFileSizeHigh;
    public int nFileSizeLow;
    public int dwReserved0;
    public int dwReserved1;
    public string cFileName;
    public string cAlternateFileName;
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
public class ControlzEx.Standard.Win32Error : ValueType {
    private int _value;
    public static Win32Error ERROR_SUCCESS;
    public static Win32Error ERROR_INVALID_FUNCTION;
    public static Win32Error ERROR_FILE_NOT_FOUND;
    public static Win32Error ERROR_PATH_NOT_FOUND;
    public static Win32Error ERROR_TOO_MANY_OPEN_FILES;
    public static Win32Error ERROR_ACCESS_DENIED;
    public static Win32Error ERROR_INVALID_HANDLE;
    public static Win32Error ERROR_OUTOFMEMORY;
    public static Win32Error ERROR_NO_MORE_FILES;
    public static Win32Error ERROR_SHARING_VIOLATION;
    public static Win32Error ERROR_INVALID_PARAMETER;
    public static Win32Error ERROR_INSUFFICIENT_BUFFER;
    public static Win32Error ERROR_NESTING_NOT_ALLOWED;
    public static Win32Error ERROR_KEY_DELETED;
    public static Win32Error ERROR_NOT_FOUND;
    public static Win32Error ERROR_NO_MATCH;
    public static Win32Error ERROR_BAD_DEVICE;
    public static Win32Error ERROR_CANCELLED;
    public static Win32Error ERROR_CANNOT_FIND_WND_CLASS;
    public static Win32Error ERROR_CLASS_ALREADY_EXISTS;
    public static Win32Error ERROR_INVALID_DATATYPE;
    public int Error { get; }
    public Win32Error(int i);
    private static Win32Error();
    public int get_Error();
    public static HRESULT op_Explicit(Win32Error error);
    public HRESULT ToHRESULT();
    public static Win32Error GetLastError();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(Win32Error errLeft, Win32Error errRight);
    public static bool op_Inequality(Win32Error errLeft, Win32Error errRight);
}
internal static class ControlzEx.Standard.Win32Value : object {
    public static UInt32 MAX_PATH;
    public static UInt32 INFOTIPSIZE;
    public static int TRUE;
    public static int FALSE;
    public static UInt32 sizeof_WCHAR;
    public static UInt32 sizeof_CHAR;
    public static UInt32 sizeof_BOOL;
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
public class ControlzEx.Standard.WINDOWINFO : ValueType {
    public int cbSize;
    public RECT rcWindow;
    public RECT rcClient;
    public int dwStyle;
    public int dwExStyle;
    [CLSCompliantAttribute("False")]
public UInt32 dwWindowStatus;
    [CLSCompliantAttribute("False")]
public UInt32 cxWindowBorders;
    [CLSCompliantAttribute("False")]
public UInt32 cyWindowBorders;
    [CLSCompliantAttribute("False")]
public ushort atomWindowType;
    [CLSCompliantAttribute("False")]
public ushort wCreatorVersion;
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
public class ControlzEx.Standard.WINDOWPLACEMENT : object {
    public int length;
    public int flags;
    public SW showCmd;
    public POINT minPosition;
    public POINT maxPosition;
    public RECT normalPosition;
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
public class ControlzEx.Standard.WINDOWPOS : ValueType {
    public IntPtr hwnd;
    public IntPtr hwndInsertAfter;
    public int x;
    public int y;
    public int cx;
    public int cy;
    [CLSCompliantAttribute("False")]
public SWP flags;
    public virtual string ToString();
    public bool SizeAndPositionEquals(WINDOWPOS other);
    public bool IsEmpty();
    public sealed virtual bool Equals(WINDOWPOS other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(WINDOWPOS left, WINDOWPOS right);
    public static bool op_Inequality(WINDOWPOS left, WINDOWPOS right);
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
[CLSCompliantAttribute("False")]
public enum ControlzEx.Standard.WINDOWTHEMEATTRIBUTETYPE : Enum {
    public UInt32 value__;
    public static WINDOWTHEMEATTRIBUTETYPE WTA_NONCLIENT;
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
public enum ControlzEx.Standard.WM : Enum {
    public int value__;
    public static WM NULL;
    public static WM CREATE;
    public static WM DESTROY;
    public static WM MOVE;
    public static WM SIZE;
    public static WM ACTIVATE;
    public static WM SETFOCUS;
    public static WM KILLFOCUS;
    public static WM ENABLE;
    public static WM SETREDRAW;
    public static WM SETTEXT;
    public static WM GETTEXT;
    public static WM GETTEXTLENGTH;
    public static WM PAINT;
    public static WM CLOSE;
    public static WM QUERYENDSESSION;
    public static WM QUIT;
    public static WM QUERYOPEN;
    public static WM ERASEBKGND;
    public static WM SYSCOLORCHANGE;
    public static WM SHOWWINDOW;
    public static WM CTLCOLOR;
    public static WM WININICHANGE;
    public static WM SETTINGCHANGE;
    public static WM ACTIVATEAPP;
    public static WM SETCURSOR;
    public static WM MOUSEACTIVATE;
    public static WM CHILDACTIVATE;
    public static WM QUEUESYNC;
    public static WM GETMINMAXINFO;
    public static WM WINDOWPOSCHANGING;
    public static WM WINDOWPOSCHANGED;
    public static WM CONTEXTMENU;
    public static WM STYLECHANGING;
    public static WM STYLECHANGED;
    public static WM DISPLAYCHANGE;
    public static WM GETICON;
    public static WM SETICON;
    public static WM NCCREATE;
    public static WM NCDESTROY;
    public static WM NCCALCSIZE;
    public static WM NCHITTEST;
    public static WM NCPAINT;
    public static WM NCACTIVATE;
    public static WM GETDLGCODE;
    public static WM SYNCPAINT;
    public static WM NCMOUSEMOVE;
    public static WM NCLBUTTONDOWN;
    public static WM NCLBUTTONUP;
    public static WM NCLBUTTONDBLCLK;
    public static WM NCRBUTTONDOWN;
    public static WM NCRBUTTONUP;
    public static WM NCRBUTTONDBLCLK;
    public static WM NCMBUTTONDOWN;
    public static WM NCMBUTTONUP;
    public static WM NCMBUTTONDBLCLK;
    public static WM NCXBUTTONDOWN;
    public static WM NCXBUTTONDBLCLK;
    public static WM SYSKEYDOWN;
    public static WM SYSKEYUP;
    public static WM SYSCHAR;
    public static WM SYSDEADCHAR;
    public static WM COMMAND;
    public static WM SYSCOMMAND;
    public static WM NCUAHDRAWCAPTION;
    public static WM NCUAHDRAWFRAME;
    public static WM MOUSEMOVE;
    public static WM LBUTTONDOWN;
    public static WM LBUTTONUP;
    public static WM LBUTTONDBLCLK;
    public static WM RBUTTONDOWN;
    public static WM RBUTTONUP;
    public static WM RBUTTONDBLCLK;
    public static WM MBUTTONDOWN;
    public static WM MBUTTONUP;
    public static WM MBUTTONDBLCLK;
    public static WM MOUSEWHEEL;
    public static WM XBUTTONDOWN;
    public static WM XBUTTONUP;
    public static WM XBUTTONDBLCLK;
    public static WM MOUSEHWHEEL;
    public static WM PARENTNOTIFY;
    public static WM SIZING;
    public static WM CAPTURECHANGED;
    public static WM POWERBROADCAST;
    public static WM DEVICECHANGE;
    public static WM ENTERSIZEMOVE;
    public static WM EXITSIZEMOVE;
    public static WM IME_SETCONTEXT;
    public static WM IME_NOTIFY;
    public static WM IME_CONTROL;
    public static WM IME_COMPOSITIONFULL;
    public static WM IME_SELECT;
    public static WM IME_CHAR;
    public static WM IME_REQUEST;
    public static WM IME_KEYDOWN;
    public static WM IME_KEYUP;
    public static WM NCMOUSELEAVE;
    public static WM MOUSELEAVE;
    public static WM TABLET_DEFBASE;
    public static WM TABLET_ADDED;
    public static WM TABLET_DELETED;
    public static WM TABLET_FLICK;
    public static WM TABLET_QUERYSYSTEMGESTURESTATUS;
    public static WM DPICHANGED;
    public static WM CUT;
    public static WM COPY;
    public static WM PASTE;
    public static WM CLEAR;
    public static WM UNDO;
    public static WM RENDERFORMAT;
    public static WM RENDERALLFORMATS;
    public static WM DESTROYCLIPBOARD;
    public static WM DRAWCLIPBOARD;
    public static WM PAINTCLIPBOARD;
    public static WM VSCROLLCLIPBOARD;
    public static WM SIZECLIPBOARD;
    public static WM ASKCBFORMATNAME;
    public static WM CHANGECBCHAIN;
    public static WM HSCROLLCLIPBOARD;
    public static WM QUERYNEWPALETTE;
    public static WM PALETTEISCHANGING;
    public static WM PALETTECHANGED;
    public static WM HOTKEY;
    public static WM PRINT;
    public static WM PRINTCLIENT;
    public static WM APPCOMMAND;
    public static WM THEMECHANGED;
    public static WM DWMCOMPOSITIONCHANGED;
    public static WM DWMNCRENDERINGCHANGED;
    public static WM DWMCOLORIZATIONCOLORCHANGED;
    public static WM DWMWINDOWMAXIMIZEDCHANGE;
    public static WM GETTITLEBARINFOEX;
    public static WM DWMSENDICONICTHUMBNAIL;
    public static WM DWMSENDICONICLIVEPREVIEWBITMAP;
    public static WM USER;
    public static WM TRAYMOUSEMESSAGE;
    public static WM APP;
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
public class ControlzEx.Standard.WNDCLASSEX : ValueType {
    public int cbSize;
    [CLSCompliantAttribute("False")]
public CS style;
    public WndProc lpfnWndProc;
    public int cbClsExtra;
    public int cbWndExtra;
    public IntPtr hInstance;
    public IntPtr hIcon;
    public IntPtr hCursor;
    public IntPtr hbrBackground;
    public string lpszMenuName;
    public string lpszClassName;
    public IntPtr hIconSm;
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
public class ControlzEx.Standard.WndProc : MulticastDelegate {
    public WndProc(object object, IntPtr method);
    public virtual IntPtr Invoke(IntPtr hwnd, WM uMsg, IntPtr wParam, IntPtr lParam);
    public virtual IAsyncResult BeginInvoke(IntPtr hwnd, WM uMsg, IntPtr wParam, IntPtr lParam, AsyncCallback callback, object object);
    public virtual IntPtr EndInvoke(IAsyncResult result);
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
[FlagsAttribute]
[CLSCompliantAttribute("False")]
public enum ControlzEx.Standard.WS : Enum {
    public UInt32 value__;
    public static WS OVERLAPPED;
    public static WS POPUP;
    public static WS CHILD;
    public static WS MINIMIZE;
    public static WS VISIBLE;
    public static WS DISABLED;
    public static WS CLIPSIBLINGS;
    public static WS CLIPCHILDREN;
    public static WS MAXIMIZE;
    public static WS BORDER;
    public static WS DLGFRAME;
    public static WS VSCROLL;
    public static WS HSCROLL;
    public static WS SYSMENU;
    public static WS THICKFRAME;
    public static WS GROUP;
    public static WS TABSTOP;
    public static WS MINIMIZEBOX;
    public static WS MAXIMIZEBOX;
    public static WS CAPTION;
    public static WS TILED;
    public static WS ICONIC;
    public static WS SIZEBOX;
    public static WS TILEDWINDOW;
    public static WS OVERLAPPEDWINDOW;
    public static WS POPUPWINDOW;
    public static WS CHILDWINDOW;
}
[FlagsAttribute]
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
[CLSCompliantAttribute("False")]
public enum ControlzEx.Standard.WS_EX : Enum {
    public UInt32 value__;
    public static WS_EX None;
    public static WS_EX DLGMODALFRAME;
    public static WS_EX NOPARENTNOTIFY;
    public static WS_EX TOPMOST;
    public static WS_EX ACCEPTFILES;
    public static WS_EX TRANSPARENT;
    public static WS_EX MDICHILD;
    public static WS_EX TOOLWINDOW;
    public static WS_EX WINDOWEDGE;
    public static WS_EX CLIENTEDGE;
    public static WS_EX CONTEXTHELP;
    public static WS_EX RIGHT;
    public static WS_EX LEFT;
    public static WS_EX RTLREADING;
    public static WS_EX LTRREADING;
    public static WS_EX LEFTSCROLLBAR;
    public static WS_EX RIGHTSCROLLBAR;
    public static WS_EX CONTROLPARENT;
    public static WS_EX STATICEDGE;
    public static WS_EX APPWINDOW;
    public static WS_EX LAYERED;
    public static WS_EX NOINHERITLAYOUT;
    public static WS_EX LAYOUTRTL;
    public static WS_EX COMPOSITED;
    public static WS_EX NOACTIVATE;
    public static WS_EX OVERLAPPEDWINDOW;
    public static WS_EX PALETTEWINDOW;
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
public class ControlzEx.Standard.WTA_OPTIONS : ValueType {
    [CLSCompliantAttribute("False")]
public static UInt32 Size;
    [CLSCompliantAttribute("False")]
public WTNCA dwFlags;
    [CLSCompliantAttribute("False")]
public WTNCA dwMask;
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
[FlagsAttribute]
[CLSCompliantAttribute("False")]
public enum ControlzEx.Standard.WTNCA : Enum {
    public UInt32 value__;
    public static WTNCA NODRAWCAPTION;
    public static WTNCA NODRAWICON;
    public static WTNCA NOSYSMENU;
    public static WTNCA NOMIRRORHELP;
    public static WTNCA VALIDBITS;
}
internal enum ControlzEx.Standard.WVR : Enum {
    public int value__;
    public static WVR ALIGNTOP;
    public static WVR ALIGNLEFT;
    public static WVR ALIGNBOTTOM;
    public static WVR ALIGNRIGHT;
    public static WVR HREDRAW;
    public static WVR VREDRAW;
    public static WVR VALIDRECTS;
    public static WVR REDRAW;
}
public class ControlzEx.Theming.HSLColor : ValueType {
    [CompilerGeneratedAttribute]
private double <A>k__BackingField;
    [CompilerGeneratedAttribute]
private double <H>k__BackingField;
    [CompilerGeneratedAttribute]
private double <S>k__BackingField;
    [CompilerGeneratedAttribute]
private double <L>k__BackingField;
    public double A { get; public set; }
    public double H { get; public set; }
    public double S { get; public set; }
    public double L { get; public set; }
    public HSLColor(Color color);
    public HSLColor(double a, double h, double s, double l);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_A();
    [CompilerGeneratedAttribute]
public void set_A(double value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_H();
    [CompilerGeneratedAttribute]
public void set_H(double value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_S();
    [CompilerGeneratedAttribute]
public void set_S(double value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_L();
    [CompilerGeneratedAttribute]
public void set_L(double value);
    public Color ToColor();
    public Color GetTintedColor(double tint);
    public static Color GetTintedColor(Color color, double tint);
    private byte GetColorComponent(int n);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ControlzEx.Theming.LibraryTheme : object {
    public static string LibraryThemeInstanceKey;
    public static string LibraryThemeAlternativeColorSchemeKey;
    public static string RuntimeThemeColorValuesKey;
    [CompilerGeneratedAttribute]
private bool <IsRuntimeGenerated>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsHighContrast>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Origin>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseColorScheme>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColorScheme>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <PrimaryAccentColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Brush <ShowcaseBrush>k__BackingField;
    [CompilerGeneratedAttribute]
private ResourceDictionary <Resources>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AlternativeColorScheme>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Theme <ParentTheme>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private LibraryThemeProvider <LibraryThemeProvider>k__BackingField;
    public bool IsRuntimeGenerated { get; }
    public bool IsHighContrast { get; }
    public string Name { get; }
    [NullableAttribute("2")]
public string Origin { get; }
    public string DisplayName { get; }
    public string BaseColorScheme { get; }
    public string ColorScheme { get; }
    public Color PrimaryAccentColor { get; public set; }
    public Brush ShowcaseBrush { get; }
    public ResourceDictionary Resources { get; }
    public string AlternativeColorScheme { get; public set; }
    [NullableAttribute("2")]
public Theme ParentTheme { get; internal set; }
    [NullableAttribute("2")]
public LibraryThemeProvider LibraryThemeProvider { get; }
    public LibraryTheme(Uri resourceAddress, LibraryThemeProvider libraryThemeProvider);
    public LibraryTheme(ResourceDictionary resourceDictionary, LibraryThemeProvider libraryThemeProvider);
    [CompilerGeneratedAttribute]
public bool get_IsRuntimeGenerated();
    [CompilerGeneratedAttribute]
public bool get_IsHighContrast();
    [CompilerGeneratedAttribute]
public string get_Name();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Origin();
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public string get_BaseColorScheme();
    [CompilerGeneratedAttribute]
public string get_ColorScheme();
    [CompilerGeneratedAttribute]
public Color get_PrimaryAccentColor();
    [CompilerGeneratedAttribute]
public void set_PrimaryAccentColor(Color value);
    [CompilerGeneratedAttribute]
public Brush get_ShowcaseBrush();
    [CompilerGeneratedAttribute]
public ResourceDictionary get_Resources();
    [CompilerGeneratedAttribute]
public string get_AlternativeColorScheme();
    [CompilerGeneratedAttribute]
public void set_AlternativeColorScheme(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Theme get_ParentTheme();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_ParentTheme(Theme value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public LibraryThemeProvider get_LibraryThemeProvider();
    public virtual bool Matches(LibraryTheme libraryTheme);
    public virtual bool MatchesSecondTry(LibraryTheme libraryTheme);
    public virtual bool MatchesThirdTry(LibraryTheme libraryTheme);
    public LibraryTheme AddResource(ResourceDictionary resourceDictionary);
    public virtual string ToString();
    public static string GetThemeName(ResourceDictionary resourceDictionary);
    public static bool IsThemeDictionary(ResourceDictionary resourceDictionary);
    public static bool IsRuntimeGeneratedThemeDictionary(ResourceDictionary resourceDictionary);
    private static ResourceDictionary CreateResourceDictionary(Uri resourceAddress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class ControlzEx.Theming.LibraryThemeProvider : DependencyObject {
    private Assembly assembly;
    private string assemblyName;
    private String[] resourceNames;
    [CompilerGeneratedAttribute]
private string <GeneratorParametersResourceName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ThemeTemplateResourceName>k__BackingField;
    public string GeneratorParametersResourceName { get; protected set; }
    public string ThemeTemplateResourceName { get; protected set; }
    protected LibraryThemeProvider(bool registerAtThemeManager);
    [CompilerGeneratedAttribute]
public string get_GeneratorParametersResourceName();
    [CompilerGeneratedAttribute]
protected void set_GeneratorParametersResourceName(string value);
    [CompilerGeneratedAttribute]
public string get_ThemeTemplateResourceName();
    [CompilerGeneratedAttribute]
protected void set_ThemeTemplateResourceName(string value);
    public abstract virtual void FillColorSchemeValues(Dictionary`2<string, string> values, RuntimeThemeColorValues colorValues);
    [NullableContextAttribute("2")]
public virtual string GetThemeGeneratorParametersContent();
    [NullableContextAttribute("2")]
public virtual string GetThemeTemplateContent();
    [NullableContextAttribute("2")]
public virtual LibraryTheme GetLibraryTheme(DictionaryEntry dictionaryEntry);
    [IteratorStateMachineAttribute("ControlzEx.Theming.LibraryThemeProvider/<GetLibraryThemes>d__16")]
public virtual IEnumerable`1<LibraryTheme> GetLibraryThemes();
    public virtual LibraryTheme ProvideMissingLibraryTheme(Theme themeToProvideNewLibraryThemeFor);
    protected virtual bool IsPotentialThemeResourceDictionary(DictionaryEntry dictionaryEntry);
    protected virtual bool ResourceNamesMatch(string resourceName, string value);
    public virtual string PrepareXamlContent(RuntimeThemeGenerator runtimeThemeGenerator, string xamlContent, RuntimeThemeColorValues runtimeThemeColorValues);
    public virtual void PrepareRuntimeThemeResourceDictionary(RuntimeThemeGenerator runtimeThemeGenerator, ResourceDictionary resourceDictionary, RuntimeThemeColorValues runtimeThemeColorValues);
    public LibraryTheme CreateRuntimeLibraryTheme(ResourceDictionary resourceDictionary, RuntimeThemeColorValues runtimeThemeColorValues);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ControlzEx.Theming.RuntimeThemeColorValues : object {
    [CompilerGeneratedAttribute]
private RuntimeThemeOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <AccentColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <AccentBaseColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <PrimaryAccentColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <AccentColor80>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <AccentColor60>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <AccentColor40>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <AccentColor20>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <HighlightColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <IdealForegroundColor>k__BackingField;
    public RuntimeThemeOptions Options { get; }
    public Color AccentColor { get; public set; }
    public Color AccentBaseColor { get; public set; }
    public Color PrimaryAccentColor { get; public set; }
    public Color AccentColor80 { get; public set; }
    public Color AccentColor60 { get; public set; }
    public Color AccentColor40 { get; public set; }
    public Color AccentColor20 { get; public set; }
    public Color HighlightColor { get; public set; }
    public Color IdealForegroundColor { get; public set; }
    public RuntimeThemeColorValues(RuntimeThemeOptions options);
    [CompilerGeneratedAttribute]
public RuntimeThemeOptions get_Options();
    [CompilerGeneratedAttribute]
public Color get_AccentColor();
    [CompilerGeneratedAttribute]
public void set_AccentColor(Color value);
    [CompilerGeneratedAttribute]
public Color get_AccentBaseColor();
    [CompilerGeneratedAttribute]
public void set_AccentBaseColor(Color value);
    [CompilerGeneratedAttribute]
public Color get_PrimaryAccentColor();
    [CompilerGeneratedAttribute]
public void set_PrimaryAccentColor(Color value);
    [CompilerGeneratedAttribute]
public Color get_AccentColor80();
    [CompilerGeneratedAttribute]
public void set_AccentColor80(Color value);
    [CompilerGeneratedAttribute]
public Color get_AccentColor60();
    [CompilerGeneratedAttribute]
public void set_AccentColor60(Color value);
    [CompilerGeneratedAttribute]
public Color get_AccentColor40();
    [CompilerGeneratedAttribute]
public void set_AccentColor40(Color value);
    [CompilerGeneratedAttribute]
public Color get_AccentColor20();
    [CompilerGeneratedAttribute]
public void set_AccentColor20(Color value);
    [CompilerGeneratedAttribute]
public Color get_HighlightColor();
    [CompilerGeneratedAttribute]
public void set_HighlightColor(Color value);
    [CompilerGeneratedAttribute]
public Color get_IdealForegroundColor();
    [CompilerGeneratedAttribute]
public void set_IdealForegroundColor(Color value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ControlzEx.Theming.RuntimeThemeGenerator : object {
    [CompilerGeneratedAttribute]
private static RuntimeThemeGenerator <Current>k__BackingField;
    [CompilerGeneratedAttribute]
private RuntimeThemeGeneratorOptions <Options>k__BackingField;
    public static RuntimeThemeGenerator Current { get; public set; }
    public RuntimeThemeGeneratorOptions Options { get; }
    private static RuntimeThemeGenerator();
    [CompilerGeneratedAttribute]
public static RuntimeThemeGenerator get_Current();
    [CompilerGeneratedAttribute]
public static void set_Current(RuntimeThemeGenerator value);
    [CompilerGeneratedAttribute]
public RuntimeThemeGeneratorOptions get_Options();
    public Theme GenerateRuntimeThemeFromWindowsSettings(string baseColor, bool isHighContrast, LibraryThemeProvider[] libraryThemeProviders);
    public virtual Theme GenerateRuntimeThemeFromWindowsSettings(string baseColor, bool isHighContrast, IEnumerable`1<LibraryThemeProvider> libraryThemeProviders);
    public Theme GenerateRuntimeTheme(string baseColor, Color accentColor);
    public virtual Theme GenerateRuntimeTheme(string baseColor, Color accentColor, bool isHighContrast);
    public Theme GenerateRuntimeTheme(string baseColor, Color accentColor, bool isHighContrast, LibraryThemeProvider[] libraryThemeProviders);
    public virtual Theme GenerateRuntimeTheme(string baseColor, Color accentColor, bool isHighContrast, IEnumerable`1<LibraryThemeProvider> libraryThemeProviders);
    public virtual LibraryTheme GenerateRuntimeLibraryTheme(string baseColor, Color accentColor, bool isHighContrast, LibraryThemeProvider libraryThemeProvider);
    public virtual LibraryTheme GenerateRuntimeLibraryTheme(LibraryThemeProvider libraryThemeProvider, Dictionary`2<string, string> values, RuntimeThemeColorValues runtimeThemeColorValues, string themeTemplateContent, string themeName, string themeDisplayName, ThemeGeneratorBaseColorScheme baseColorScheme, ThemeGeneratorColorScheme colorScheme, ThemeGeneratorParameters generatorParameters);
    public virtual RuntimeThemeColorValues GetColors(Color accentColor, RuntimeThemeOptions options);
    public static Color GetIdealTextColor(Color color);
    public static Color GetHighlightColor(Color color, int highlightFactor);
}
public class ControlzEx.Theming.RuntimeThemeGeneratorOptions : object {
    [CompilerGeneratedAttribute]
private bool <UseHSL>k__BackingField;
    public bool UseHSL { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_UseHSL();
    [CompilerGeneratedAttribute]
public void set_UseHSL(bool value);
    [NullableContextAttribute("2")]
public virtual RuntimeThemeOptions CreateRuntimeThemeOptions(bool isHighContrast, ThemeGeneratorParameters generatorParameters, ThemeGeneratorBaseColorScheme baseColorScheme);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class ControlzEx.Theming.RuntimeThemeOptions : object {
    [CompilerGeneratedAttribute]
private bool <UseHSL>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsHighContrast>k__BackingField;
    [CompilerGeneratedAttribute]
private ThemeGeneratorParameters <GeneratorParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private ThemeGeneratorBaseColorScheme <BaseColorScheme>k__BackingField;
    public bool UseHSL { get; }
    public bool IsHighContrast { get; }
    public ThemeGeneratorParameters GeneratorParameters { get; }
    public ThemeGeneratorBaseColorScheme BaseColorScheme { get; }
    public RuntimeThemeOptions(bool useHSL, bool isHighContrast, ThemeGeneratorParameters generatorParameters, ThemeGeneratorBaseColorScheme baseColorScheme);
    [CompilerGeneratedAttribute]
public bool get_UseHSL();
    [CompilerGeneratedAttribute]
public bool get_IsHighContrast();
    [CompilerGeneratedAttribute]
public ThemeGeneratorParameters get_GeneratorParameters();
    [CompilerGeneratedAttribute]
public ThemeGeneratorBaseColorScheme get_BaseColorScheme();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ControlzEx.Theming.Theme : object {
    public static string ThemeNameKey;
    public static string ThemeOriginKey;
    public static string ThemeDisplayNameKey;
    public static string ThemeBaseColorSchemeKey;
    public static string ThemeColorSchemeKey;
    public static string ThemePrimaryAccentColorKey;
    public static string ThemeShowcaseBrushKey;
    public static string ThemeIsRuntimeGeneratedKey;
    public static string ThemeIsHighContrastKey;
    public static string ThemeInstanceKey;
    public static Dictionary`2<Uri, bool> ThemeDictionaryCache;
    [CompilerGeneratedAttribute]
private bool <IsRuntimeGenerated>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsHighContrast>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseColorScheme>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <PrimaryAccentColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColorScheme>k__BackingField;
    [CompilerGeneratedAttribute]
private Brush <ShowcaseBrush>k__BackingField;
    [CompilerGeneratedAttribute]
private ResourceDictionary <Resources>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyObservableCollection`1<LibraryTheme> <LibraryThemes>k__BackingField;
    [CompilerGeneratedAttribute]
private ObservableCollection`1<LibraryTheme> <LibraryThemesInternal>k__BackingField;
    public bool IsRuntimeGenerated { get; }
    public bool IsHighContrast { get; }
    public string Name { get; }
    public string DisplayName { get; }
    public string BaseColorScheme { get; }
    public Color PrimaryAccentColor { get; public set; }
    public string ColorScheme { get; }
    public Brush ShowcaseBrush { get; }
    public ResourceDictionary Resources { get; }
    public ReadOnlyObservableCollection`1<LibraryTheme> LibraryThemes { get; }
    private ObservableCollection`1<LibraryTheme> LibraryThemesInternal { get; }
    public Theme(LibraryTheme libraryTheme);
    public Theme(string name, string displayName, string baseColorScheme, string colorScheme, Color primaryAccentColor, Brush showcaseBrush, bool isRuntimeGenerated, bool isHighContrast);
    private static Theme();
    [CompilerGeneratedAttribute]
public bool get_IsRuntimeGenerated();
    [CompilerGeneratedAttribute]
public bool get_IsHighContrast();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public string get_BaseColorScheme();
    [CompilerGeneratedAttribute]
public Color get_PrimaryAccentColor();
    [CompilerGeneratedAttribute]
public void set_PrimaryAccentColor(Color value);
    [CompilerGeneratedAttribute]
public string get_ColorScheme();
    [CompilerGeneratedAttribute]
public Brush get_ShowcaseBrush();
    [CompilerGeneratedAttribute]
public ResourceDictionary get_Resources();
    [CompilerGeneratedAttribute]
public ReadOnlyObservableCollection`1<LibraryTheme> get_LibraryThemes();
    [CompilerGeneratedAttribute]
private ObservableCollection`1<LibraryTheme> get_LibraryThemesInternal();
    public Theme EnsureAllLibraryThemeProvidersProvided();
    [IteratorStateMachineAttribute("ControlzEx.Theming.Theme/<GetAllResources>d__48")]
public IEnumerable`1<ResourceDictionary> GetAllResources();
    public Theme AddLibraryTheme(LibraryTheme libraryTheme);
    public virtual string ToString();
    public static string GetThemeName(ResourceDictionary resourceDictionary);
    public static Theme GetThemeInstance(ResourceDictionary resourceDictionary);
    public static bool IsThemeDictionary(ResourceDictionary resourceDictionary);
    public static bool IsRuntimeGeneratedThemeDictionary(ResourceDictionary resourceDictionary);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ControlzEx.Theming.ThemeChangedEventArgs : EventArgs {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private ResourceDictionary <TargetResourceDictionary>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Theme <OldTheme>k__BackingField;
    [CompilerGeneratedAttribute]
private Theme <NewTheme>k__BackingField;
    [NullableAttribute("2")]
public object Target { get; }
    public ResourceDictionary TargetResourceDictionary { get; }
    [NullableAttribute("2")]
public Theme OldTheme { get; public set; }
    public Theme NewTheme { get; public set; }
    public ThemeChangedEventArgs(object target, ResourceDictionary targetResourceDictionary, Theme oldTheme, Theme newTheme);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_Target();
    [CompilerGeneratedAttribute]
public ResourceDictionary get_TargetResourceDictionary();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Theme get_OldTheme();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_OldTheme(Theme value);
    [CompilerGeneratedAttribute]
public Theme get_NewTheme();
    [CompilerGeneratedAttribute]
public void set_NewTheme(Theme value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ControlzEx.Theming.ThemeGenerator : object {
    [CompilerGeneratedAttribute]
private static ThemeGenerator <Current>k__BackingField;
    public static ThemeGenerator Current { get; public set; }
    private static ThemeGenerator();
    [CompilerGeneratedAttribute]
public static ThemeGenerator get_Current();
    [CompilerGeneratedAttribute]
public static void set_Current(ThemeGenerator value);
    public virtual ThemeGeneratorParameters GetParametersFromString(string input);
    public virtual string GenerateColorSchemeFileContent(string templateContent, string themeName, string themeDisplayName, string baseColorScheme, string colorScheme, string alternativeColorScheme, bool isHighContrast, Dictionary`2[] valueSources);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ControlzEx.Theming.ThemeManager : object {
    public static string BaseColorLight;
    public static string BaseColorLightConst;
    public static string BaseColorDark;
    public static string BaseColorDarkConst;
    private bool isEnsuringThemesOrRegisteringProvider;
    private ObservableCollection`1<LibraryThemeProvider> libraryThemeProvidersInternal;
    private ObservableCollection`1<Theme> themesInternal;
    private ReadOnlyObservableCollection`1<Theme> themes;
    private ObservableCollection`1<string> baseColorsInternal;
    private ReadOnlyObservableCollection`1<string> baseColors;
    private ObservableCollection`1<string> colorSchemesInternal;
    private ReadOnlyObservableCollection`1<string> colorSchemes;
    [CompilerGeneratedAttribute]
private static ThemeManager <Current>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyObservableCollection`1<LibraryThemeProvider> <LibraryThemeProviders>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<ThemeChangedEventArgs> ThemeChanged;
    private ThemeSyncMode themeSyncMode;
    private bool isSyncScheduled;
    public static ThemeManager Current { get; public set; }
    public ReadOnlyObservableCollection`1<LibraryThemeProvider> LibraryThemeProviders { get; }
    public ReadOnlyObservableCollection`1<Theme> Themes { get; }
    public ReadOnlyObservableCollection`1<string> BaseColors { get; }
    public ReadOnlyObservableCollection`1<string> ColorSchemes { get; }
    public ThemeSyncMode ThemeSyncMode { get; public set; }
    private static ThemeManager();
    [CompilerGeneratedAttribute]
public static ThemeManager get_Current();
    [CompilerGeneratedAttribute]
public static void set_Current(ThemeManager value);
    [CompilerGeneratedAttribute]
public ReadOnlyObservableCollection`1<LibraryThemeProvider> get_LibraryThemeProviders();
    public ReadOnlyObservableCollection`1<Theme> get_Themes();
    public ReadOnlyObservableCollection`1<string> get_BaseColors();
    public ReadOnlyObservableCollection`1<string> get_ColorSchemes();
    private void EnsureThemes();
    public void RegisterLibraryThemeProvider(LibraryThemeProvider libraryThemeProvider);
    private void ThemesInternalCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    public void ClearThemes();
    public Theme AddLibraryTheme(LibraryTheme libraryTheme);
    public Theme AddTheme(Theme theme);
    public Theme GetTheme(string name, bool highContrast);
    public Theme GetTheme(string baseColorScheme, string colorScheme, bool highContrast);
    public Theme GetTheme(ResourceDictionary resourceDictionary);
    public Theme GetInverseTheme(Theme theme);
    public bool IsThemeDictionary(ResourceDictionary resourceDictionary);
    public bool IsRuntimeGeneratedThemeDictionary(ResourceDictionary resourceDictionary);
    [SecurityCriticalAttribute]
public Theme ChangeTheme(Application app, string themeName, bool highContrast);
    [SecurityCriticalAttribute]
public Theme ChangeTheme(FrameworkElement frameworkElement, string themeName, bool highContrast);
    [SecurityCriticalAttribute]
public Theme ChangeTheme(Application app, Theme newTheme);
    [SecurityCriticalAttribute]
public Theme ChangeTheme(FrameworkElement frameworkElement, Theme newTheme);
    [SecurityCriticalAttribute]
public Theme ChangeTheme(object target, ResourceDictionary resourceDictionary, Theme newTheme);
    [SecurityCriticalAttribute]
private Theme ChangeTheme(object target, ResourceDictionary resourceDictionary, Theme oldTheme, Theme newTheme);
    [SecurityCriticalAttribute]
public Theme ChangeTheme(Application app, string baseColorScheme, string colorScheme);
    [SecurityCriticalAttribute]
public Theme ChangeTheme(FrameworkElement frameworkElement, string baseColorScheme, string colorScheme);
    [SecurityCriticalAttribute]
public Theme ChangeTheme(object target, ResourceDictionary resourceDictionary, Theme oldTheme, string baseColorScheme, string colorScheme);
    [SecurityCriticalAttribute]
public Theme ChangeThemeBaseColor(Application app, string baseColorScheme);
    [SecurityCriticalAttribute]
public Theme ChangeThemeBaseColor(FrameworkElement frameworkElement, string baseColorScheme);
    [NullableContextAttribute("2")]
[SecurityCriticalAttribute]
public Theme ChangeThemeBaseColor(object target, ResourceDictionary resourceDictionary, Theme oldTheme, string baseColorScheme);
    [SecurityCriticalAttribute]
public Theme ChangeThemeColorScheme(Application app, string colorScheme);
    [SecurityCriticalAttribute]
public Theme ChangeThemeColorScheme(FrameworkElement frameworkElement, string colorScheme);
    [NullableContextAttribute("2")]
[SecurityCriticalAttribute]
public Theme ChangeThemeColorScheme(object target, ResourceDictionary resourceDictionary, Theme oldTheme, string colorScheme);
    [SecurityCriticalAttribute]
public void ApplyThemeResourcesFromTheme(ResourceDictionary resourceDictionary, Theme newTheme);
    [SecurityCriticalAttribute]
private void ApplyResourceDictionary(ResourceDictionary oldRd, ResourceDictionary newRd);
    private void ApplyResourceDictionaryEntries(ResourceDictionary oldRd, ResourceDictionary newRd);
    [NullableContextAttribute("2")]
public Theme DetectTheme();
    public Theme DetectTheme(Application app);
    public Theme DetectTheme(FrameworkElement frameworkElement);
    public Theme DetectTheme(ResourceDictionary resourceDictionary);
    private bool DetectThemeFromResources(ResourceDictionary dict, Theme& detectedTheme);
    [CompilerGeneratedAttribute]
public void add_ThemeChanged(EventHandler`1<ThemeChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ThemeChanged(EventHandler`1<ThemeChangedEventArgs> value);
    [SecurityCriticalAttribute]
private void OnThemeChanged(object target, ResourceDictionary targetResourceDictionary, Theme oldTheme, Theme newTheme);
    public void SyncTheme();
    public void SyncTheme(Nullable`1<ThemeSyncMode> syncMode);
    public ThemeSyncMode get_ThemeSyncMode();
    public void set_ThemeSyncMode(ThemeSyncMode value);
    private void HandleUserPreferenceChanged(object sender, UserPreferenceChangedEventArgs e);
    private void HandleStaticPropertyChanged(object sender, PropertyChangedEventArgs e);
    private static bool TryConvertColorFromString(string colorScheme, Color& color);
    [CompilerGeneratedAttribute]
private void <HandleUserPreferenceChanged>b__72_0();
    [CompilerGeneratedAttribute]
private void <HandleStaticPropertyChanged>b__73_0();
}
[FlagsAttribute]
public enum ControlzEx.Theming.ThemeSyncMode : Enum {
    public int value__;
    public static ThemeSyncMode DoNotSync;
    public static ThemeSyncMode SyncWithAppMode;
    public static ThemeSyncMode SyncWithAccent;
    public static ThemeSyncMode SyncWithHighContrast;
    public static ThemeSyncMode SyncAll;
}
public static class ControlzEx.Theming.WindowsThemeHelper : object {
    public static bool IsHighContrastEnabled();
    public static bool AppsUseLightTheme();
    public static bool ShowAccentColorOnTitleBarsAndWindowBorders();
    [NullableContextAttribute("1")]
public static string GetWindowsBaseColor();
    public static Nullable`1<Color> GetWindowsAccentColor();
}
public static class ControlzEx.Theming.XamlThemeHelper : object {
    [NullableContextAttribute("1")]
public static string FixXamlReaderXmlNsIssue(string xamlContent);
}
public static class ControlzEx.ToolTipAssist : object {
    public static DependencyProperty AutoMoveProperty;
    public static DependencyProperty AutoMoveHorizontalOffsetProperty;
    public static DependencyProperty AutoMoveVerticalOffsetProperty;
    private static ToolTipAssist();
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ToolTip")]
public static bool GetAutoMove(ToolTip element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ToolTip")]
public static void SetAutoMove(ToolTip element, bool value);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ToolTip")]
public static double GetAutoMoveHorizontalOffset(ToolTip element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ToolTip")]
public static void SetAutoMoveHorizontalOffset(ToolTip element, double value);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ToolTip")]
public static double GetAutoMoveVerticalOffset(ToolTip element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ToolTip")]
public static void SetAutoMoveVerticalOffset(ToolTip element, double value);
    private static void OnAutoMoveChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs eventArgs);
    private static void ToolTip_Opened(object sender, RoutedEventArgs e);
    private static void ToolTip_Closed(object sender, RoutedEventArgs e);
    private static void ToolTipTargetPreviewMouseMove(object sender, MouseEventArgs e);
    private static void MoveToolTip(IInputElement target, ToolTip toolTip);
}
public enum ControlzEx.Windows.Shell.ResizeGripDirection : Enum {
    public int value__;
    public static ResizeGripDirection None;
    public static ResizeGripDirection TopLeft;
    public static ResizeGripDirection Top;
    public static ResizeGripDirection TopRight;
    public static ResizeGripDirection Right;
    public static ResizeGripDirection BottomRight;
    public static ResizeGripDirection Bottom;
    public static ResizeGripDirection BottomLeft;
    public static ResizeGripDirection Left;
    public static ResizeGripDirection Caption;
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
public static class ControlzEx.Windows.Shell.SystemCommands : object {
    [CompilerGeneratedAttribute]
private static RoutedCommand <CloseWindowCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private static RoutedCommand <MaximizeWindowCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private static RoutedCommand <MinimizeWindowCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private static RoutedCommand <RestoreWindowCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private static RoutedCommand <ShowSystemMenuCommand>k__BackingField;
    public static RoutedCommand CloseWindowCommand { get; private set; }
    public static RoutedCommand MaximizeWindowCommand { get; private set; }
    public static RoutedCommand MinimizeWindowCommand { get; private set; }
    public static RoutedCommand RestoreWindowCommand { get; private set; }
    public static RoutedCommand ShowSystemMenuCommand { get; private set; }
    private static SystemCommands();
    [CompilerGeneratedAttribute]
public static RoutedCommand get_CloseWindowCommand();
    [CompilerGeneratedAttribute]
private static void set_CloseWindowCommand(RoutedCommand value);
    [CompilerGeneratedAttribute]
public static RoutedCommand get_MaximizeWindowCommand();
    [CompilerGeneratedAttribute]
private static void set_MaximizeWindowCommand(RoutedCommand value);
    [CompilerGeneratedAttribute]
public static RoutedCommand get_MinimizeWindowCommand();
    [CompilerGeneratedAttribute]
private static void set_MinimizeWindowCommand(RoutedCommand value);
    [CompilerGeneratedAttribute]
public static RoutedCommand get_RestoreWindowCommand();
    [CompilerGeneratedAttribute]
private static void set_RestoreWindowCommand(RoutedCommand value);
    [CompilerGeneratedAttribute]
public static RoutedCommand get_ShowSystemMenuCommand();
    [CompilerGeneratedAttribute]
private static void set_ShowSystemMenuCommand(RoutedCommand value);
    [SecurityCriticalAttribute]
private static void _PostSystemCommand(Window window, SC command);
    [SecuritySafeCriticalAttribute]
public static void CloseWindow(Window window);
    [SecuritySafeCriticalAttribute]
public static void MaximizeWindow(Window window);
    [SecuritySafeCriticalAttribute]
public static void MinimizeWindow(Window window);
    [SecuritySafeCriticalAttribute]
public static void RestoreWindow(Window window);
    [SecuritySafeCriticalAttribute]
public static void ShowSystemMenu(Window window, MouseButtonEventArgs e);
    [SecuritySafeCriticalAttribute]
public static void ShowSystemMenu(Visual visual, Point elementPoint);
    [SecuritySafeCriticalAttribute]
public static void ShowSystemMenuPhysicalCoordinates(Visual visual, Point physicalScreenLocation);
    [SecuritySafeCriticalAttribute]
public static void ShowSystemMenuPhysicalCoordinates(HwndSource source, Point physicalScreenLocation);
}
internal class ControlzEx.Windows.Shell.SystemParameters2 : object {
    [ThreadStaticAttribute]
private static SystemParameters2 _threadLocalSingleton;
    private MessageWindow _messageHwnd;
    private bool _isGlassEnabled;
    private Color _glassColor;
    private SolidColorBrush _glassColorBrush;
    private Thickness _windowResizeBorderThickness;
    private Thickness _windowNonClientFrameThickness;
    private double _captionHeight;
    private Size _smallIconSize;
    private string _uxThemeName;
    private string _uxThemeColor;
    private bool _isHighContrast;
    private CornerRadius _windowCornerRadius;
    private Rect _captionButtonLocation;
    private Dictionary`2<WM, List`1<_SystemMetricUpdate>> _UpdateTable;
    private static int _dpi;
    private static bool _dpiInitialized;
    private static object _dpiLock;
    private static bool _setDpiX;
    private static BitArray _cacheValid;
    private static int _dpiX;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public static SystemParameters2 Current { get; }
    public bool IsGlassEnabled { get; private set; }
    public Color WindowGlassColor { get; private set; }
    public SolidColorBrush WindowGlassBrush { get; private set; }
    public Thickness WindowResizeBorderThickness { get; private set; }
    public Thickness WindowNonClientFrameThickness { get; private set; }
    public double WindowCaptionHeight { get; private set; }
    public Size SmallIconSize { get; private set; }
    public string UxThemeName { get; private set; }
    public string UxThemeColor { get; private set; }
    public bool HighContrast { get; private set; }
    public CornerRadius WindowCornerRadius { get; private set; }
    public Rect WindowCaptionButtonsLocation { get; private set; }
    internal static int Dpi { get; }
    internal static int DpiX { get; }
    private static SystemParameters2();
    private void _InitializeIsGlassEnabled();
    private void _UpdateIsGlassEnabled(IntPtr wParam, IntPtr lParam);
    private void _InitializeGlassColor();
    private void _UpdateGlassColor(IntPtr wParam, IntPtr lParam);
    private void _InitializeCaptionHeight();
    private void _UpdateCaptionHeight(IntPtr wParam, IntPtr lParam);
    private void _InitializeWindowResizeBorderThickness();
    private void _UpdateWindowResizeBorderThickness(IntPtr wParam, IntPtr lParam);
    private void _InitializeWindowNonClientFrameThickness();
    private void _UpdateWindowNonClientFrameThickness(IntPtr wParam, IntPtr lParam);
    private void _InitializeSmallIconSize();
    private void _UpdateSmallIconSize(IntPtr wParam, IntPtr lParam);
    private void _LegacyInitializeCaptionButtonLocation();
    private void _InitializeCaptionButtonLocation();
    private void _UpdateCaptionButtonLocation(IntPtr wParam, IntPtr lParam);
    private void _InitializeHighContrast();
    private void _UpdateHighContrast(IntPtr wParam, IntPtr lParam);
    private void _InitializeThemeInfo();
    private void _UpdateThemeInfo(IntPtr wParam, IntPtr lParam);
    private void _InitializeWindowCornerRadius();
    private void _UpdateWindowCornerRadius(IntPtr wParam, IntPtr lParam);
    public static SystemParameters2 get_Current();
    private IntPtr _WndProc(IntPtr hwnd, WM msg, IntPtr wParam, IntPtr lParam);
    public bool get_IsGlassEnabled();
    private void set_IsGlassEnabled(bool value);
    public Color get_WindowGlassColor();
    private void set_WindowGlassColor(Color value);
    public SolidColorBrush get_WindowGlassBrush();
    private void set_WindowGlassBrush(SolidColorBrush value);
    public Thickness get_WindowResizeBorderThickness();
    private void set_WindowResizeBorderThickness(Thickness value);
    public Thickness get_WindowNonClientFrameThickness();
    private void set_WindowNonClientFrameThickness(Thickness value);
    public double get_WindowCaptionHeight();
    private void set_WindowCaptionHeight(double value);
    public Size get_SmallIconSize();
    private void set_SmallIconSize(Size value);
    public string get_UxThemeName();
    private void set_UxThemeName(string value);
    public string get_UxThemeColor();
    private void set_UxThemeColor(string value);
    public bool get_HighContrast();
    private void set_HighContrast(bool value);
    public CornerRadius get_WindowCornerRadius();
    private void set_WindowCornerRadius(CornerRadius value);
    public Rect get_WindowCaptionButtonsLocation();
    private void set_WindowCaptionButtonsLocation(Rect value);
    [SecurityCriticalAttribute]
[SecurityTreatAsSafeAttribute]
internal static int get_Dpi();
    [SecurityCriticalAttribute]
[SecurityTreatAsSafeAttribute]
internal static int get_DpiX();
    private void _NotifyPropertyChanged(string propertyName);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
private void <.ctor>b__37_0(object sender, EventArgs e);
}
public static class ControlzEx.Windows.Shell.WindowChrome : object {
    public static DependencyProperty IsHitTestVisibleInChromeProperty;
    public static DependencyProperty ResizeGripDirectionProperty;
    private static WindowChrome();
    [CategoryAttribute("ControlzEx")]
public static bool GetIsHitTestVisibleInChrome(IInputElement inputElement);
    public static void SetIsHitTestVisibleInChrome(IInputElement inputElement, bool hitTestVisible);
    [CategoryAttribute("ControlzEx")]
public static ResizeGripDirection GetResizeGripDirection(IInputElement inputElement);
    public static void SetResizeGripDirection(IInputElement inputElement, ResizeGripDirection direction);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
