internal static class FxResources.Microsoft.Extensions.Hosting.SR : object {
}
[ExtensionAttribute]
[UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2091:UnrecognizedReflectionPattern")]
public static class Microsoft.Extensions.DependencyInjection.OptionsBuilderExtensions : object {
    [ExtensionAttribute]
public static OptionsBuilder`1<TOptions> ValidateOnStart(OptionsBuilder`1<TOptions> optionsBuilder);
}
internal class Microsoft.Extensions.DependencyInjection.ValidationHostedService : object {
    private IDictionary`2<ValueTuple`2<Type, string>, Action> _validators;
    public ValidationHostedService(IOptions`1<ValidatorOptions> validatorOptions);
    public sealed virtual Task StartAsync(CancellationToken cancellationToken);
    public sealed virtual Task StopAsync(CancellationToken cancellationToken);
}
internal class Microsoft.Extensions.DependencyInjection.ValidatorOptions : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IDictionary`2<ValueTuple`2<Type, string>, Action> <Validators>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<ValueTuple`2<Type, string>, Action> Validators { get; }
    [CompilerGeneratedAttribute]
public IDictionary`2<ValueTuple`2<Type, string>, Action> get_Validators();
}
public enum Microsoft.Extensions.Hosting.BackgroundServiceExceptionBehavior : Enum {
    public int value__;
    public static BackgroundServiceExceptionBehavior StopHost;
    public static BackgroundServiceExceptionBehavior Ignore;
}
public class Microsoft.Extensions.Hosting.ConsoleLifetimeOptions : object {
    [CompilerGeneratedAttribute]
private bool <SuppressStatusMessages>k__BackingField;
    public bool SuppressStatusMessages { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_SuppressStatusMessages();
    [CompilerGeneratedAttribute]
public void set_SuppressStatusMessages(bool value);
}
public static class Microsoft.Extensions.Hosting.Host : object {
    public static IHostBuilder CreateDefaultBuilder();
    public static IHostBuilder CreateDefaultBuilder(String[] args);
}
public class Microsoft.Extensions.Hosting.HostBuilder : object {
    private List`1<Action`1<IConfigurationBuilder>> _configureHostConfigActions;
    private List`1<Action`2<HostBuilderContext, IConfigurationBuilder>> _configureAppConfigActions;
    private List`1<Action`2<HostBuilderContext, IServiceCollection>> _configureServicesActions;
    private List`1<IConfigureContainerAdapter> _configureContainerActions;
    private IServiceFactoryAdapter _serviceProviderFactory;
    private bool _hostBuilt;
    private IConfiguration _hostConfiguration;
    private IConfiguration _appConfiguration;
    private HostBuilderContext _hostBuilderContext;
    private HostingEnvironment _hostingEnvironment;
    private IServiceProvider _appServices;
    private PhysicalFileProvider _defaultProvider;
    [CompilerGeneratedAttribute]
private IDictionary`2<object, object> <Properties>k__BackingField;
    public IDictionary`2<object, object> Properties { get; }
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<object, object> get_Properties();
    public sealed virtual IHostBuilder ConfigureHostConfiguration(Action`1<IConfigurationBuilder> configureDelegate);
    public sealed virtual IHostBuilder ConfigureAppConfiguration(Action`2<HostBuilderContext, IConfigurationBuilder> configureDelegate);
    public sealed virtual IHostBuilder ConfigureServices(Action`2<HostBuilderContext, IServiceCollection> configureDelegate);
    public sealed virtual IHostBuilder UseServiceProviderFactory(IServiceProviderFactory`1<TContainerBuilder> factory);
    public sealed virtual IHostBuilder UseServiceProviderFactory(Func`2<HostBuilderContext, IServiceProviderFactory`1<TContainerBuilder>> factory);
    public sealed virtual IHostBuilder ConfigureContainer(Action`2<HostBuilderContext, TContainerBuilder> configureDelegate);
    public sealed virtual IHost Build();
    [UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2026:UnrecognizedReflectionPattern")]
private static void Write(DiagnosticSource diagnosticSource, string name, T value);
    private void BuildHostConfiguration();
    private void CreateHostingEnvironment();
    private string ResolveContentRootPath(string contentRootPath, string basePath);
    private void CreateHostBuilderContext();
    private void BuildAppConfiguration();
    private void CreateServiceProvider();
    private static void AddLifetime(ServiceCollection services);
    [CompilerGeneratedAttribute]
private HostBuilderContext <UseServiceProviderFactory>b__19_0();
    [CompilerGeneratedAttribute]
private IConfiguration <CreateServiceProvider>b__28_0(IServiceProvider _);
    [CompilerGeneratedAttribute]
private IHost <CreateServiceProvider>b__28_2(IServiceProvider _);
    [CompilerGeneratedAttribute]
private void <CreateServiceProvider>b__28_3(HostOptions options);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.Hosting.HostingHostBuilderExtensions : object {
    [ExtensionAttribute]
public static IHostBuilder UseEnvironment(IHostBuilder hostBuilder, string environment);
    [ExtensionAttribute]
public static IHostBuilder UseContentRoot(IHostBuilder hostBuilder, string contentRoot);
    [ExtensionAttribute]
public static IHostBuilder UseDefaultServiceProvider(IHostBuilder hostBuilder, Action`1<ServiceProviderOptions> configure);
    [ExtensionAttribute]
public static IHostBuilder UseDefaultServiceProvider(IHostBuilder hostBuilder, Action`2<HostBuilderContext, ServiceProviderOptions> configure);
    [ExtensionAttribute]
public static IHostBuilder ConfigureLogging(IHostBuilder hostBuilder, Action`2<HostBuilderContext, ILoggingBuilder> configureLogging);
    [ExtensionAttribute]
public static IHostBuilder ConfigureLogging(IHostBuilder hostBuilder, Action`1<ILoggingBuilder> configureLogging);
    [ExtensionAttribute]
public static IHostBuilder ConfigureHostOptions(IHostBuilder hostBuilder, Action`2<HostBuilderContext, HostOptions> configureOptions);
    [ExtensionAttribute]
public static IHostBuilder ConfigureHostOptions(IHostBuilder hostBuilder, Action`1<HostOptions> configureOptions);
    [ExtensionAttribute]
public static IHostBuilder ConfigureAppConfiguration(IHostBuilder hostBuilder, Action`1<IConfigurationBuilder> configureDelegate);
    [ExtensionAttribute]
public static IHostBuilder ConfigureServices(IHostBuilder hostBuilder, Action`1<IServiceCollection> configureDelegate);
    [ExtensionAttribute]
public static IHostBuilder ConfigureContainer(IHostBuilder hostBuilder, Action`1<TContainerBuilder> configureDelegate);
    [ExtensionAttribute]
public static IHostBuilder ConfigureDefaults(IHostBuilder builder, String[] args);
    [ExtensionAttribute]
[UnsupportedOSPlatformAttribute("android")]
[UnsupportedOSPlatformAttribute("browser")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
public static IHostBuilder UseConsoleLifetime(IHostBuilder hostBuilder);
    [ExtensionAttribute]
[UnsupportedOSPlatformAttribute("android")]
[UnsupportedOSPlatformAttribute("browser")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
public static IHostBuilder UseConsoleLifetime(IHostBuilder hostBuilder, Action`1<ConsoleLifetimeOptions> configureOptions);
    [ExtensionAttribute]
[UnsupportedOSPlatformAttribute("android")]
[UnsupportedOSPlatformAttribute("browser")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
public static Task RunConsoleAsync(IHostBuilder hostBuilder, CancellationToken cancellationToken);
    [ExtensionAttribute]
[UnsupportedOSPlatformAttribute("android")]
[UnsupportedOSPlatformAttribute("browser")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
public static Task RunConsoleAsync(IHostBuilder hostBuilder, Action`1<ConsoleLifetimeOptions> configureOptions, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2026:RequiresUnreferencedCode")]
internal static bool <ConfigureDefaults>g__GetReloadConfigOnChangeValue|11_4(HostBuilderContext hostingContext);
}
public class Microsoft.Extensions.Hosting.HostOptions : object {
    [CompilerGeneratedAttribute]
private TimeSpan <ShutdownTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private BackgroundServiceExceptionBehavior <BackgroundServiceExceptionBehavior>k__BackingField;
    public TimeSpan ShutdownTimeout { get; public set; }
    public BackgroundServiceExceptionBehavior BackgroundServiceExceptionBehavior { get; public set; }
    [CompilerGeneratedAttribute]
public TimeSpan get_ShutdownTimeout();
    [CompilerGeneratedAttribute]
public void set_ShutdownTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public BackgroundServiceExceptionBehavior get_BackgroundServiceExceptionBehavior();
    [CompilerGeneratedAttribute]
public void set_BackgroundServiceExceptionBehavior(BackgroundServiceExceptionBehavior value);
    internal void Initialize(IConfiguration configuration);
}
public class Microsoft.Extensions.Hosting.Internal.ApplicationLifetime : object {
    private CancellationTokenSource _startedSource;
    private CancellationTokenSource _stoppingSource;
    private CancellationTokenSource _stoppedSource;
    private ILogger`1<ApplicationLifetime> _logger;
    public CancellationToken ApplicationStarted { get; }
    public CancellationToken ApplicationStopping { get; }
    public CancellationToken ApplicationStopped { get; }
    public ApplicationLifetime(ILogger`1<ApplicationLifetime> logger);
    public sealed virtual CancellationToken get_ApplicationStarted();
    public sealed virtual CancellationToken get_ApplicationStopping();
    public sealed virtual CancellationToken get_ApplicationStopped();
    public sealed virtual void StopApplication();
    public void NotifyStarted();
    public void NotifyStopped();
    private void ExecuteHandlers(CancellationTokenSource cancel);
}
internal class Microsoft.Extensions.Hosting.Internal.ConfigureContainerAdapter`1 : object {
    private Action`2<HostBuilderContext, TContainerBuilder> _action;
    public ConfigureContainerAdapter`1(Action`2<HostBuilderContext, TContainerBuilder> action);
    public sealed virtual void ConfigureContainer(HostBuilderContext hostContext, object containerBuilder);
}
[UnsupportedOSPlatformAttribute("android")]
[UnsupportedOSPlatformAttribute("browser")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
public class Microsoft.Extensions.Hosting.Internal.ConsoleLifetime : object {
    private CancellationTokenRegistration _applicationStartedRegistration;
    private CancellationTokenRegistration _applicationStoppingRegistration;
    [CompilerGeneratedAttribute]
private ConsoleLifetimeOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private IHostEnvironment <Environment>k__BackingField;
    [CompilerGeneratedAttribute]
private IHostApplicationLifetime <ApplicationLifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private HostOptions <HostOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    private ManualResetEvent _shutdownBlock;
    private ConsoleLifetimeOptions Options { get; }
    private IHostEnvironment Environment { get; }
    private IHostApplicationLifetime ApplicationLifetime { get; }
    private HostOptions HostOptions { get; }
    private ILogger Logger { get; }
    public ConsoleLifetime(IOptions`1<ConsoleLifetimeOptions> options, IHostEnvironment environment, IHostApplicationLifetime applicationLifetime, IOptions`1<HostOptions> hostOptions);
    public ConsoleLifetime(IOptions`1<ConsoleLifetimeOptions> options, IHostEnvironment environment, IHostApplicationLifetime applicationLifetime, IOptions`1<HostOptions> hostOptions, ILoggerFactory loggerFactory);
    [CompilerGeneratedAttribute]
private ConsoleLifetimeOptions get_Options();
    [CompilerGeneratedAttribute]
private IHostEnvironment get_Environment();
    [CompilerGeneratedAttribute]
private IHostApplicationLifetime get_ApplicationLifetime();
    [CompilerGeneratedAttribute]
private HostOptions get_HostOptions();
    [CompilerGeneratedAttribute]
private ILogger get_Logger();
    public sealed virtual Task WaitForStartAsync(CancellationToken cancellationToken);
    private void RegisterShutdownHandlers();
    private void OnApplicationStarted();
    private void OnApplicationStopping();
    public sealed virtual Task StopAsync(CancellationToken cancellationToken);
    public sealed virtual void Dispose();
    private void UnregisterShutdownHandlers();
    private void OnCancelKeyPress(object sender, ConsoleCancelEventArgs e);
    private void OnProcessExit(object sender, EventArgs e);
}
internal class Microsoft.Extensions.Hosting.Internal.Host : object {
    private ILogger`1<Host> _logger;
    private IHostLifetime _hostLifetime;
    private ApplicationLifetime _applicationLifetime;
    private HostOptions _options;
    private IHostEnvironment _hostEnvironment;
    private PhysicalFileProvider _defaultProvider;
    private IEnumerable`1<IHostedService> _hostedServices;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _stopCalled;
    [CompilerGeneratedAttribute]
private IServiceProvider <Services>k__BackingField;
    public IServiceProvider Services { get; }
    public Host(IServiceProvider services, IHostEnvironment hostEnvironment, PhysicalFileProvider defaultProvider, IHostApplicationLifetime applicationLifetime, ILogger`1<Host> logger, IHostLifetime hostLifetime, IOptions`1<HostOptions> options);
    [CompilerGeneratedAttribute]
public sealed virtual IServiceProvider get_Services();
    [AsyncStateMachineAttribute("Microsoft.Extensions.Hosting.Internal.Host/<StartAsync>d__12")]
public sealed virtual Task StartAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Extensions.Hosting.Internal.Host/<TryExecuteBackgroundServiceAsync>d__13")]
private Task TryExecuteBackgroundServiceAsync(BackgroundService backgroundService);
    [AsyncStateMachineAttribute("Microsoft.Extensions.Hosting.Internal.Host/<StopAsync>d__14")]
public sealed virtual Task StopAsync(CancellationToken cancellationToken);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Microsoft.Extensions.Hosting.Internal.Host/<DisposeAsync>d__16")]
public sealed virtual ValueTask DisposeAsync();
    [AsyncStateMachineAttribute("Microsoft.Extensions.Hosting.Internal.Host/<<DisposeAsync>g__DisposeAsync|16_0>d")]
[CompilerGeneratedAttribute]
internal static ValueTask <DisposeAsync>g__DisposeAsync|16_0(object o);
}
public class Microsoft.Extensions.Hosting.Internal.HostingEnvironment : object {
    [CompilerGeneratedAttribute]
private string <EnvironmentName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentRootPath>k__BackingField;
    [CompilerGeneratedAttribute]
private IFileProvider <ContentRootFileProvider>k__BackingField;
    public string EnvironmentName { get; public set; }
    public string ApplicationName { get; public set; }
    public string ContentRootPath { get; public set; }
    public IFileProvider ContentRootFileProvider { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_EnvironmentName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EnvironmentName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ApplicationName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ApplicationName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ContentRootPath();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ContentRootPath(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IFileProvider get_ContentRootFileProvider();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ContentRootFileProvider(IFileProvider value);
}
[ExtensionAttribute]
internal static class Microsoft.Extensions.Hosting.Internal.HostingLoggerExtensions : object {
    [ExtensionAttribute]
public static void ApplicationError(ILogger logger, EventId eventId, string message, Exception exception);
    [ExtensionAttribute]
public static void Starting(ILogger logger);
    [ExtensionAttribute]
public static void Started(ILogger logger);
    [ExtensionAttribute]
public static void Stopping(ILogger logger);
    [ExtensionAttribute]
public static void Stopped(ILogger logger);
    [ExtensionAttribute]
public static void StoppedWithException(ILogger logger, Exception ex);
    [ExtensionAttribute]
public static void BackgroundServiceFaulted(ILogger logger, Exception ex);
    [ExtensionAttribute]
public static void BackgroundServiceStoppingHost(ILogger logger, Exception ex);
}
internal interface Microsoft.Extensions.Hosting.Internal.IConfigureContainerAdapter {
    public abstract virtual void ConfigureContainer(HostBuilderContext hostContext, object containerBuilder);
}
internal interface Microsoft.Extensions.Hosting.Internal.IServiceFactoryAdapter {
    public abstract virtual object CreateBuilder(IServiceCollection services);
    public abstract virtual IServiceProvider CreateServiceProvider(object containerBuilder);
}
internal static class Microsoft.Extensions.Hosting.Internal.LoggerEventIds : object {
    public static EventId Starting;
    public static EventId Started;
    public static EventId Stopping;
    public static EventId Stopped;
    public static EventId StoppedWithException;
    public static EventId ApplicationStartupException;
    public static EventId ApplicationStoppingException;
    public static EventId ApplicationStoppedException;
    public static EventId BackgroundServiceFaulted;
    public static EventId BackgroundServiceStoppingHost;
    private static LoggerEventIds();
}
internal class Microsoft.Extensions.Hosting.Internal.NullLifetime : object {
    public sealed virtual Task WaitForStartAsync(CancellationToken cancellationToken);
    public sealed virtual Task StopAsync(CancellationToken cancellationToken);
}
internal class Microsoft.Extensions.Hosting.Internal.ServiceFactoryAdapter`1 : object {
    private IServiceProviderFactory`1<TContainerBuilder> _serviceProviderFactory;
    private Func`1<HostBuilderContext> _contextResolver;
    private Func`2<HostBuilderContext, IServiceProviderFactory`1<TContainerBuilder>> _factoryResolver;
    public ServiceFactoryAdapter`1(IServiceProviderFactory`1<TContainerBuilder> serviceProviderFactory);
    public ServiceFactoryAdapter`1(Func`1<HostBuilderContext> contextResolver, Func`2<HostBuilderContext, IServiceProviderFactory`1<TContainerBuilder>> factoryResolver);
    public sealed virtual object CreateBuilder(IServiceCollection services);
    public sealed virtual IServiceProvider CreateServiceProvider(object containerBuilder);
}
[AttributeUsageAttribute("28108")]
internal class System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute : Attribute {
    [CompilerGeneratedAttribute]
private DynamicallyAccessedMemberTypes <MemberTypes>k__BackingField;
    public DynamicallyAccessedMemberTypes MemberTypes { get; }
    public DynamicallyAccessedMembersAttribute(DynamicallyAccessedMemberTypes memberTypes);
    [CompilerGeneratedAttribute]
public DynamicallyAccessedMemberTypes get_MemberTypes();
}
[FlagsAttribute]
internal enum System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes : Enum {
    public int value__;
    public static DynamicallyAccessedMemberTypes None;
    public static DynamicallyAccessedMemberTypes PublicParameterlessConstructor;
    public static DynamicallyAccessedMemberTypes PublicConstructors;
    public static DynamicallyAccessedMemberTypes NonPublicConstructors;
    public static DynamicallyAccessedMemberTypes PublicMethods;
    public static DynamicallyAccessedMemberTypes NonPublicMethods;
    public static DynamicallyAccessedMemberTypes PublicFields;
    public static DynamicallyAccessedMemberTypes NonPublicFields;
    public static DynamicallyAccessedMemberTypes PublicNestedTypes;
    public static DynamicallyAccessedMemberTypes NonPublicNestedTypes;
    public static DynamicallyAccessedMemberTypes PublicProperties;
    public static DynamicallyAccessedMemberTypes NonPublicProperties;
    public static DynamicallyAccessedMemberTypes PublicEvents;
    public static DynamicallyAccessedMemberTypes NonPublicEvents;
    public static DynamicallyAccessedMemberTypes Interfaces;
    public static DynamicallyAccessedMemberTypes All;
}
[AttributeUsageAttribute("32767")]
internal class System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Category>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CheckId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MessageId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Justification>k__BackingField;
    public string Category { get; }
    public string CheckId { get; }
    public string Scope { get; public set; }
    public string Target { get; public set; }
    public string MessageId { get; public set; }
    public string Justification { get; public set; }
    public UnconditionalSuppressMessageAttribute(string category, string checkId);
    [CompilerGeneratedAttribute]
public string get_Category();
    [CompilerGeneratedAttribute]
public string get_CheckId();
    [CompilerGeneratedAttribute]
public string get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(string value);
    [CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(string value);
    [CompilerGeneratedAttribute]
public string get_MessageId();
    [CompilerGeneratedAttribute]
public void set_MessageId(string value);
    [CompilerGeneratedAttribute]
public string get_Justification();
    [CompilerGeneratedAttribute]
public void set_Justification(string value);
}
internal abstract class System.Runtime.Versioning.OSPlatformAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <PlatformName>k__BackingField;
    public string PlatformName { get; }
    private protected OSPlatformAttribute(string platformName);
    [CompilerGeneratedAttribute]
public string get_PlatformName();
}
[AttributeUsageAttribute("2047")]
internal class System.Runtime.Versioning.SupportedOSPlatformAttribute : OSPlatformAttribute {
    public SupportedOSPlatformAttribute(string platformName);
}
[AttributeUsageAttribute("448")]
internal class System.Runtime.Versioning.SupportedOSPlatformGuardAttribute : OSPlatformAttribute {
    public SupportedOSPlatformGuardAttribute(string platformName);
}
[AttributeUsageAttribute("1")]
internal class System.Runtime.Versioning.TargetPlatformAttribute : OSPlatformAttribute {
    public TargetPlatformAttribute(string platformName);
}
[AttributeUsageAttribute("2047")]
internal class System.Runtime.Versioning.UnsupportedOSPlatformAttribute : OSPlatformAttribute {
    public UnsupportedOSPlatformAttribute(string platformName);
}
[AttributeUsageAttribute("448")]
internal class System.Runtime.Versioning.UnsupportedOSPlatformGuardAttribute : OSPlatformAttribute {
    public UnsupportedOSPlatformGuardAttribute(string platformName);
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string BackgroundServiceExceptionStoppedHost { get; }
    internal static string BuildCalled { get; }
    internal static string CreateBuilderCallBeforeCreateServiceProvider { get; }
    internal static string NullIServiceProvider { get; }
    internal static string ResolverReturnedNull { get; }
    private static SR();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey);
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_BackgroundServiceExceptionStoppedHost();
    internal static string get_BuildCalled();
    internal static string get_CreateBuilderCallBeforeCreateServiceProvider();
    internal static string get_NullIServiceProvider();
    internal static string get_ResolverReturnedNull();
}
