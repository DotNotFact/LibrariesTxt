[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NativeApiAttribute]
public class Silk.NET.OpenAL.AL : NativeAPI {
    private bool _soft;
    [NullableAttribute("2")]
private SearchPathContainer _searchPaths;
    public SearchPathContainer SearchPaths { get; }
    public AL(INativeContext ctx);
    public virtual bool IsExtensionPresent(string name);
    public SearchPathContainer get_SearchPaths();
    public IntPtr GetProcAddress(string name);
    public int GetEnumValue(string name);
    public void GenBuffers(int count, UInt32* buffers);
    public void DeleteBuffers(int count, UInt32* buffers);
    public bool IsBuffer(UInt32 buffer);
    public void BufferData(UInt32 buffer, BufferFormat format, Void* data, int size, int frequency);
    [NativeApiAttribute]
public void SetBufferProperty(UInt32 buffer, BufferFloat param, float value);
    [NativeApiAttribute]
public void SetBufferProperty(UInt32 buffer, BufferVector3 param, float value1, float value2, float value3);
    [NativeApiAttribute]
public void SetBufferProperty(UInt32 buffer, BufferVector3 param, Vector3& value);
    [NativeApiAttribute]
public void SetBufferProperty(UInt32 buffer, BufferVector3 param, Single* value);
    [NativeApiAttribute]
public void SetBufferProperty(UInt32 buffer, BufferInteger param, int value);
    [NativeApiAttribute]
public void SetBufferProperty(UInt32 buffer, BufferInteger param, int value1, int value2, int value3);
    [NativeApiAttribute]
public void SetBufferProperty(UInt32 buffer, BufferInteger param, Int32* value);
    [NativeApiAttribute]
public void GetBufferProperty(UInt32 buffer, BufferFloat param, Single& value);
    [NativeApiAttribute]
public void GetBufferProperty(UInt32 buffer, BufferVector3 param, Single& value1, Single& value2, Single& value3);
    [NativeApiAttribute]
public void GetBufferProperty(UInt32 buffer, BufferVector3 param, Vector3& value);
    [NativeApiAttribute]
public void GetBufferProperty(UInt32 buffer, BufferFloat param, Single* value);
    [NativeApiAttribute]
public void GetBufferProperty(UInt32 buffer, GetBufferInteger param, Int32& value);
    [NativeApiAttribute]
public void GetBufferProperty(UInt32 buffer, GetBufferInteger param, Int32& value1, Int32& value2, Int32& value3);
    [NativeApiAttribute]
public void GetBufferProperty(UInt32 buffer, GetBufferInteger param, Int32* value);
    public AudioError GetError();
    [NativeApiAttribute]
public void SetListenerProperty(ListenerFloat param, float value);
    [NativeApiAttribute]
public void SetListenerProperty(ListenerVector3 param, float value1, float value2, float value3);
    [NativeApiAttribute]
public void SetListenerProperty(ListenerVector3 param, Vector3& value);
    [NativeApiAttribute]
public void SetListenerProperty(ListenerFloatArray param, Single* value);
    [NativeApiAttribute]
public void SetListenerProperty(ListenerInteger param, int value);
    [NativeApiAttribute]
public void SetListenerProperty(ListenerInteger param, int value1, int value2, int value3);
    [NativeApiAttribute]
public void SetListenerProperty(ListenerInteger param, Int32* value);
    [NativeApiAttribute]
public void GetListenerProperty(ListenerFloat param, Single& value);
    [NativeApiAttribute]
public void GetListenerProperty(ListenerVector3 param, Single& value1, Single& value2, Single& value3);
    [NativeApiAttribute]
public void GetListenerProperty(ListenerVector3 param, Vector3& value);
    [NativeApiAttribute]
public void GetListenerProperty(ListenerFloatArray param, Single* value);
    [NativeApiAttribute]
public void GetListenerProperty(ListenerInteger param, Int32& value);
    [NativeApiAttribute]
public void GetListenerProperty(ListenerInteger param, Int32& value1, Int32& value2, Int32& value3);
    [NativeApiAttribute]
public void GetListenerProperty(ListenerInteger param, Int32* value);
    public void GenSources(int count, UInt32* sources);
    public void DeleteSources(int count, UInt32* sources);
    public bool IsSource(UInt32 source);
    [NativeApiAttribute]
public void SetSourceProperty(UInt32 source, SourceFloat param, float value);
    [NativeApiAttribute]
public void SetSourceProperty(UInt32 source, SourceVector3 param, float value1, float value2, float value3);
    [NativeApiAttribute]
public void SetSourceProperty(UInt32 source, SourceVector3 param, Vector3& value);
    [NativeApiAttribute]
public void SetSourceProperty(UInt32 source, SourceVector3 param, Single* value);
    [NativeApiAttribute]
public void SetSourceProperty(UInt32 source, SourceBoolean param, bool value);
    [NativeApiAttribute]
public void SetSourceProperty(UInt32 source, SourceInteger param, int value);
    [NativeApiAttribute]
public void SetSourceProperty(UInt32 source, SourceInteger param, int value1, int value2, int value3);
    [NativeApiAttribute]
public void SetSourceProperty(UInt32 source, SourceInteger param, Int32* value);
    [NativeApiAttribute]
public void SetSourceProperty(UInt32 source, SourceInteger param, UInt32 value);
    [NativeApiAttribute]
public void SetSourceProperty(UInt32 source, SourceInteger param, UInt32 value1, UInt32 value2, UInt32 value3);
    [NativeApiAttribute]
public void SetSourceProperty(UInt32 source, SourceInteger param, UInt32* value);
    [NativeApiAttribute]
public void GetSourceProperty(UInt32 source, SourceFloat param, Single& value);
    [NativeApiAttribute]
public void GetSourceProperty(UInt32 source, SourceBoolean param, Boolean& value);
    [NativeApiAttribute]
public void GetSourceProperty(UInt32 source, SourceVector3 param, Single& value1, Single& value2, Single& value3);
    [NativeApiAttribute]
public void GetSourceProperty(UInt32 source, SourceVector3 param, Vector3& value);
    [NativeApiAttribute]
public void GetSourceProperty(UInt32 source, SourceFloat param, Single* value);
    [NativeApiAttribute]
public void GetSourceProperty(UInt32 source, GetSourceInteger param, Int32& value);
    [NativeApiAttribute]
public void GetSourceProperty(UInt32 source, GetSourceInteger param, Int32& value1, Int32& value2, Int32& value3);
    [NativeApiAttribute]
public void GetSourceProperty(UInt32 source, GetSourceInteger param, Int32* value);
    public void SourcePlay(UInt32 source);
    [NativeApiAttribute]
public void SourcePlay(int count, UInt32* sources);
    public void SourcePause(UInt32 source);
    [NativeApiAttribute]
public void SourcePause(int count, UInt32* sources);
    public void SourceStop(UInt32 source);
    [NativeApiAttribute]
public void SourceStop(int count, UInt32* sources);
    public void SourceRewind(UInt32 source);
    [NativeApiAttribute]
public void SourceRewind(int count, UInt32* sources);
    public void SourceQueueBuffers(UInt32 source, int count, UInt32* buffers);
    public void SourceUnqueueBuffers(UInt32 source, int count, UInt32* buffers);
    public void Enable(Capability capability);
    public void Disable(Capability capability);
    public bool IsEnabled(Capability capability);
    [NativeApiAttribute]
public bool GetStateProperty(StateBoolean param);
    [NativeApiAttribute]
public double GetStateProperty(StateDouble param);
    [NativeApiAttribute]
public float GetStateProperty(StateFloat param);
    [NativeApiAttribute]
public int GetStateProperty(StateInteger param);
    [NativeApiAttribute]
public string GetStateProperty(StateString param);
    public void DistanceModel(DistanceModel distanceModel);
    public void DopplerFactor(float value);
    public void SpeedOfSound(float value);
    public static AL GetApi(bool soft);
    public bool TryGetExtension(T& ext);
    [ObsoleteAttribute("This method has been deprecated and will be removed in Silk.NET 3.0. Please use TryGetExtension instead.")]
public TExtension GetExtension();
    public UInt32[] GenBuffers(int count);
    public UInt32 GenBuffer();
    public void DeleteBuffers(UInt32[] slots);
    public void DeleteBuffer(UInt32 slot);
    public void BufferData(UInt32 buffer, BufferFormat format, TElement[] data, int frequency);
    public UInt32[] GenSources(int count);
    public UInt32 GenSource();
    public void DeleteSources(UInt32[] slots);
    public void DeleteSource(UInt32 slot);
    public void SourcePlay(UInt32[] sources);
    public void SourcePause(UInt32[] sources);
    public void SourceStop(UInt32[] sources);
    public void SourceRewind(UInt32[] sources);
    public void SourceQueueBuffers(UInt32 source, UInt32[] buffers);
    public void SourceUnqueueBuffers(UInt32 source, UInt32[] buffers);
    protected virtual int CoreGcSlotCount();
    protected sealed virtual IVTable CreateVTable();
    [ObsoleteAttribute("This function is obsolete! Please use the string[] overload!")]
public static INativeContext CreateDefaultContext(string n);
    public static INativeContext CreateDefaultContext(String[] n);
}
[NativeApiAttribute]
public class Silk.NET.OpenAL.ALContext : NativeAPI {
    private bool _soft;
    [NullableAttribute("2")]
private SearchPathContainer _searchPaths;
    public SearchPathContainer SearchPaths { get; }
    public ALContext(INativeContext ctx);
    public SearchPathContainer get_SearchPaths();
    public virtual bool IsExtensionPresent(string name);
    public Context* CreateContext(Device* device, Int32* attributeList);
    public bool MakeContextCurrent(Context* context);
    public void ProcessContext(Context* context);
    public void SuspendContext(Context* context);
    public void DestroyContext(Context* context);
    public Context* GetCurrentContext();
    public Device* GetContextsDevice(Context* context);
    public Device* OpenDevice(string deviceName);
    public bool CloseDevice(Device* device);
    public ContextError GetError(Device* device);
    public bool IsExtensionPresent(Device* device, string name);
    public Void* GetProcAddress(Device* device, string name);
    public int GetEnumValue(Device* device, string name);
    [NativeApiAttribute]
public string GetContextProperty(Device* device, GetContextString param);
    [NativeApiAttribute]
public void GetContextProperty(Device* device, GetContextInteger param, int count, IntPtr data);
    [NativeApiAttribute]
public void GetContextProperty(Device* device, GetContextInteger param, int count, Int32* data);
    public static ALContext GetApi(bool soft);
    public bool TryGetExtension(Device* device, T& ext);
    [ObsoleteAttribute("This method has been deprecated and will be removed in Silk.NET 3.0. Please use TryGetExtension instead.")]
public TContextExtension GetExtension(Device* device);
    public IntPtr CreateContextHandle(Device* device, Int32* attributeList);
    public bool MakeContextCurrent(IntPtr context);
    public IntPtr GetCurrentContextHandle();
    protected virtual int CoreGcSlotCount();
    protected sealed virtual IVTable CreateVTable();
    [ObsoleteAttribute("This function is obsolete! Please use the string[] overload!")]
public static INativeContext CreateDefaultContext(string n);
    public static INativeContext CreateDefaultContext(String[] n);
}
internal enum Silk.NET.OpenAL.AlcVersion : Enum {
    public int value__;
    public static AlcVersion Alc10;
    public static AlcVersion Alc11;
}
public static class Silk.NET.OpenAL.Attributes.FormatHelpers : object {
    public static int GetFormatSize(TFormat format);
}
[AttributeUsageAttribute("256")]
public class Silk.NET.OpenAL.Attributes.FormatSizeAttribute : Attribute {
    private int _size;
    public int Size { get; public set; }
    public int get_Size();
    public void set_Size(int value);
}
public class Silk.NET.OpenAL.AudioContext : object {
    private static ALContext ContextAPI;
    private static object AudioContextLock;
    [NativeIntegerAttribute]
private static Dictionary`2<IntPtr, AudioContext> AvailableContexts;
    private bool _contextExists;
    [NativeIntegerAttribute]
private IntPtr _contextHandle;
    private string _deviceName;
    private bool _disposed;
    private bool _isProcessing;
    private bool _isSynchronized;
    [CompilerGeneratedAttribute]
private Device* <Device>k__BackingField;
    public static AudioContext CurrentContext { get; }
    internal bool IsCurrent { get; internal set; }
    private Device* Device { get; private set; }
    public ContextError CurrentError { get; }
    public bool IsProcessing { get; private set; }
    public bool IsSynchronized { get; private set; }
    public string CurrentDevice { get; }
    public AudioContext(string device, int freq);
    public AudioContext(string device, int freq, int refresh);
    public AudioContext(string device, int freq, int refresh, bool sync);
    public AudioContext(string device, IEnumerable`1<int> attributes);
    private static AudioContext();
    public static AudioContext get_CurrentContext();
    internal bool get_IsCurrent();
    internal void set_IsCurrent(bool value);
    [CompilerGeneratedAttribute]
private Device* get_Device();
    [CompilerGeneratedAttribute]
private void set_Device(Device* value);
    public ContextError get_CurrentError();
    public bool get_IsProcessing();
    private void set_IsProcessing(bool value);
    public bool get_IsSynchronized();
    private void set_IsSynchronized(bool value);
    public string get_CurrentDevice();
    public sealed virtual void Dispose();
    private static void MakeCurrent(AudioContext context);
    private void CreateContext(string device, int frequency, int refreshRate, bool isSynchronous);
    private void CreateContext(string device, IEnumerable`1<int> attributes);
    public void MakeCurrent();
    public void Process();
    public void Suspend();
    public bool SupportsExtension(string extension);
    protected virtual override void Finalize();
    public virtual string ToString();
}
public class Silk.NET.OpenAL.AudioContextException : AudioException {
    public AudioContextException(string message);
}
public class Silk.NET.OpenAL.AudioDeviceException : AudioException {
    public AudioDeviceException(string message);
}
public enum Silk.NET.OpenAL.AudioError : Enum {
    public int value__;
    public static AudioError NoError;
    public static AudioError InvalidName;
    public static AudioError IllegalEnum;
    public static AudioError InvalidEnum;
    public static AudioError InvalidValue;
    public static AudioError IllegalCommand;
    public static AudioError InvalidOperation;
    public static AudioError OutOfMemory;
}
public class Silk.NET.OpenAL.AudioException : Exception {
    public AudioException(string message);
}
public class Silk.NET.OpenAL.AudioValueException : AudioException {
    public AudioValueException(string message);
}
public enum Silk.NET.OpenAL.BufferFloat : Enum {
    public int value__;
}
public enum Silk.NET.OpenAL.BufferFormat : Enum {
    public int value__;
    public static BufferFormat Mono8;
    public static BufferFormat Mono16;
    public static BufferFormat Stereo8;
    public static BufferFormat Stereo16;
}
public enum Silk.NET.OpenAL.BufferInteger : Enum {
    public int value__;
}
public enum Silk.NET.OpenAL.BufferState : Enum {
    public int value__;
    public static BufferState Unused;
    public static BufferState Pending;
    public static BufferState Processed;
}
public enum Silk.NET.OpenAL.BufferVector3 : Enum {
    public int value__;
}
public enum Silk.NET.OpenAL.Capability : Enum {
    public int value__;
    public static Capability Invalid;
}
public class Silk.NET.OpenAL.Context : ValueType {
}
public enum Silk.NET.OpenAL.ContextAttributes : Enum {
    public int value__;
    public static ContextAttributes Frequency;
    public static ContextAttributes Refresh;
    public static ContextAttributes Sync;
    public static ContextAttributes MonoSources;
    public static ContextAttributes StereoSources;
}
public enum Silk.NET.OpenAL.ContextError : Enum {
    public int value__;
    public static ContextError NoError;
    public static ContextError InvalidDevice;
    public static ContextError InvalidContext;
    public static ContextError InvalidEnum;
    public static ContextError InvalidValue;
    public static ContextError OutOfMemory;
}
public class Silk.NET.OpenAL.Device : ValueType {
}
public enum Silk.NET.OpenAL.DistanceModel : Enum {
    public int value__;
    public static DistanceModel None;
    public static DistanceModel InverseDistance;
    public static DistanceModel InverseDistanceClamped;
    public static DistanceModel LinearDistance;
    public static DistanceModel LinearDistanceClamped;
    public static DistanceModel ExponentDistance;
    public static DistanceModel ExponentDistanceClamped;
}
[ObsoleteAttribute("This class is deprecated and will be removed in Silk.NET 3.0. Please use the TryGetExtension method on ALContext.")]
public static class Silk.NET.OpenAL.Extensions.ALExtensionLoader : object {
    internal static TContextExtension LoadContextExtension(ALContext baseApi);
}
public abstract class Silk.NET.OpenAL.Extensions.ContextExtensionBase : NativeExtension`1<ALContext> {
    public ContextExtensionBase(INativeContext ctx);
}
[NativeApiAttribute]
public abstract class Silk.NET.OpenAL.Extensions.FormatExtensionBase`1 : NativeExtension`1<AL> {
    public FormatExtensionBase`1(INativeContext ctx);
    public void BufferData(UInt32 buffer, TExtendedBufferFormat format, Void* data, int size, int frequency);
    public void BufferData(UInt32 buffer, TExtendedBufferFormat format, TElement[] data, int frequency);
    protected virtual int CoreGcSlotCount();
    protected sealed virtual IVTable CreateVTable();
    [ObsoleteAttribute("This function is obsolete! Please use the string[] overload!")]
public static INativeContext CreateDefaultContext(string n);
    public static INativeContext CreateDefaultContext(String[] n);
}
public enum Silk.NET.OpenAL.GetBufferInteger : Enum {
    public int value__;
    public static GetBufferInteger Frequency;
    public static GetBufferInteger Bits;
    public static GetBufferInteger Channels;
    public static GetBufferInteger Size;
}
public enum Silk.NET.OpenAL.GetContextInteger : Enum {
    public int value__;
    public static GetContextInteger MajorVersion;
    public static GetContextInteger MinorVersion;
    public static GetContextInteger AttributesSize;
    public static GetContextInteger AllAttributes;
}
public enum Silk.NET.OpenAL.GetContextString : Enum {
    public int value__;
    public static GetContextString Extensions;
    public static GetContextString DeviceSpecifier;
}
public enum Silk.NET.OpenAL.GetSourceInteger : Enum {
    public int value__;
    public static GetSourceInteger ByteOffset;
    public static GetSourceInteger SampleOffset;
    public static GetSourceInteger Buffer;
    public static GetSourceInteger SourceState;
    public static GetSourceInteger BuffersQueued;
    public static GetSourceInteger BuffersProcessed;
    public static GetSourceInteger SourceType;
}
public enum Silk.NET.OpenAL.ListenerFloat : Enum {
    public int value__;
    public static ListenerFloat Gain;
}
public enum Silk.NET.OpenAL.ListenerFloatArray : Enum {
    public int value__;
    public static ListenerFloatArray Orientation;
}
public enum Silk.NET.OpenAL.ListenerInteger : Enum {
    public int value__;
}
public enum Silk.NET.OpenAL.ListenerVector3 : Enum {
    public int value__;
    public static ListenerVector3 Position;
    public static ListenerVector3 Velocity;
}
internal class Silk.NET.OpenAL.OpenALLibraryNameContainer : SearchPathContainer {
    private bool _preferSoft;
    private SearchPathContainer _soft;
    private SearchPathContainer _native;
    public String[] Linux { get; }
    public String[] MacOS { get; }
    public String[] Android { get; }
    public String[] IOS { get; }
    public String[] Windows86 { get; }
    public String[] Windows64 { get; }
    public OpenALLibraryNameContainer(bool preferSoft);
    public virtual String[] get_Linux();
    public virtual String[] get_MacOS();
    public virtual String[] get_Android();
    public virtual String[] get_IOS();
    public virtual String[] get_Windows86();
    public virtual String[] get_Windows64();
}
internal class Silk.NET.OpenAL.OpenALNativeLibraryNameContainer : SearchPathContainer {
    public String[] Linux { get; }
    public String[] MacOS { get; }
    public String[] Android { get; }
    public String[] IOS { get; }
    public String[] Windows86 { get; }
    public String[] Windows64 { get; }
    public virtual String[] get_Linux();
    public virtual String[] get_MacOS();
    public virtual String[] get_Android();
    public virtual String[] get_IOS();
    public virtual String[] get_Windows86();
    public virtual String[] get_Windows64();
}
internal class Silk.NET.OpenAL.OpenALSoftLibraryNameContainer : SearchPathContainer {
    public String[] Linux { get; }
    public String[] MacOS { get; }
    public String[] Android { get; }
    public String[] IOS { get; }
    public String[] Windows86 { get; }
    public String[] Windows64 { get; }
    public virtual String[] get_Linux();
    public virtual String[] get_MacOS();
    public virtual String[] get_Android();
    public virtual String[] get_IOS();
    public virtual String[] get_Windows86();
    public virtual String[] get_Windows64();
}
public enum Silk.NET.OpenAL.SourceBoolean : Enum {
    public int value__;
    public static SourceBoolean SourceRelative;
    public static SourceBoolean Looping;
}
public enum Silk.NET.OpenAL.SourceFloat : Enum {
    public int value__;
    public static SourceFloat ReferenceDistance;
    public static SourceFloat MaxDistance;
    public static SourceFloat RolloffFactor;
    public static SourceFloat Pitch;
    public static SourceFloat Gain;
    public static SourceFloat MinGain;
    public static SourceFloat MaxGain;
    public static SourceFloat ConeInnerAngle;
    public static SourceFloat ConeOuterAngle;
    public static SourceFloat ConeOuterGain;
    public static SourceFloat SecOffset;
}
public enum Silk.NET.OpenAL.SourceInteger : Enum {
    public int value__;
    public static SourceInteger ByteOffset;
    public static SourceInteger SampleOffset;
    public static SourceInteger Buffer;
    public static SourceInteger SourceType;
}
public enum Silk.NET.OpenAL.SourceState : Enum {
    public int value__;
    public static SourceState Initial;
    public static SourceState Playing;
    public static SourceState Paused;
    public static SourceState Stopped;
}
public enum Silk.NET.OpenAL.SourceType : Enum {
    public int value__;
    public static SourceType Static;
    public static SourceType Streaming;
    public static SourceType Undetermined;
}
public enum Silk.NET.OpenAL.SourceVector3 : Enum {
    public int value__;
    public static SourceVector3 Position;
    public static SourceVector3 Velocity;
    public static SourceVector3 Direction;
}
public enum Silk.NET.OpenAL.StateBoolean : Enum {
    public int value__;
    public static StateBoolean HasDopplerFactor;
    public static StateBoolean HasDopplerVelocity;
    public static StateBoolean IsDistanceModelInverseDistanceClamped;
    public static StateBoolean HasSpeedOfSound;
}
public enum Silk.NET.OpenAL.StateDouble : Enum {
    public int value__;
    public static StateDouble DopplerFactor;
    public static StateDouble SpeedOfSound;
}
public enum Silk.NET.OpenAL.StateFloat : Enum {
    public int value__;
    public static StateFloat DopplerFactor;
    public static StateFloat SpeedOfSound;
}
public enum Silk.NET.OpenAL.StateInteger : Enum {
    public int value__;
    public static StateInteger DistanceModel;
}
public enum Silk.NET.OpenAL.StateString : Enum {
    public int value__;
    public static StateString Vendor;
    public static StateString Version;
    public static StateString Renderer;
    public static StateString Extensions;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsUnmanagedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NativeIntegerAttribute : Attribute {
    public Boolean[] TransformFlags;
    public NativeIntegerAttribute(Boolean[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
