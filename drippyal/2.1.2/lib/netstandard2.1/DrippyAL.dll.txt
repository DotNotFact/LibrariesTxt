[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class DrippyAL.AudioChannel : object {
    private AudioDevice device;
    private UInt32 alSource;
    private float volume;
    private float pitch;
    private Vector3 position;
    private AudioClip audioClip;
    public AudioClip AudioClip { get; public set; }
    public float Volume { get; public set; }
    public float Pitch { get; public set; }
    public Vector3 Position { get; public set; }
    public PlaybackState State { get; }
    public TimeSpan PlayingOffset { get; }
    [NullableContextAttribute("1")]
public AudioChannel(AudioDevice device, bool relative);
    [NullableContextAttribute("1")]
public AudioChannel(AudioDevice device);
    public sealed virtual void Dispose();
    public void Play();
    [NullableContextAttribute("1")]
public void Play(AudioClip audioClip);
    public void Stop();
    public void Pause();
    public void Rewind();
    public AudioClip get_AudioClip();
    public void set_AudioClip(AudioClip value);
    public float get_Volume();
    public void set_Volume(float value);
    public float get_Pitch();
    public void set_Pitch(float value);
    public Vector3 get_Position();
    public void set_Position(Vector3 value);
    public PlaybackState get_State();
    public TimeSpan get_PlayingOffset();
}
public class DrippyAL.AudioClip : object {
    [NullableAttribute("2")]
private AudioDevice device;
    private int sampleRate;
    private int channelCount;
    private UInt32 alBuffer;
    private TimeSpan duration;
    internal UInt32 AlBuffer { get; }
    public int SampleRate { get; }
    public int ChannelCount { get; }
    public TimeSpan Duration { get; }
    public AudioClip(AudioDevice device, int sampleRate, int channelCount, Span`1<short> data);
    public AudioClip(AudioDevice device, int sampleRate, int channelCount, Span`1<byte> data);
    public sealed virtual void Dispose();
    internal UInt32 get_AlBuffer();
    public int get_SampleRate();
    public int get_ChannelCount();
    public TimeSpan get_Duration();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DrippyAL.AudioDevice : object {
    [NullableAttribute("2")]
private ALContext alc;
    [NullableAttribute("2")]
private AL al;
    [NullableAttribute("0")]
private Device* device;
    [NullableAttribute("0")]
private Context* context;
    private Vector3 listenerPosition;
    private Single[] listenerOrientation;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<AudioChannel> channels;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<AudioClip> audioClips;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<AudioStream> audioStreams;
    internal AL AL { get; }
    internal IReadOnlyList`1<AudioChannel> Channels { get; }
    internal IReadOnlyList`1<AudioClip> AudioClips { get; }
    internal IReadOnlyList`1<AudioStream> AudioStreams { get; }
    public Vector3 ListernerPosition { get; public set; }
    public Vector3 ListernerDirection { get; public set; }
    public Vector3 ListernerUpVector { get; public set; }
    public AudioDevice(bool useSoft);
    public sealed virtual void Dispose();
    internal void AddResource(AudioChannel channel);
    internal void RemoveResource(AudioChannel channel);
    internal void AddResource(AudioClip audioClip);
    internal void RemoveResource(AudioClip audioClip);
    internal void AddResource(AudioStream audioStream);
    internal void RemoveResource(AudioStream audioStream);
    internal AL get_AL();
    internal IReadOnlyList`1<AudioChannel> get_Channels();
    internal IReadOnlyList`1<AudioClip> get_AudioClips();
    internal IReadOnlyList`1<AudioStream> get_AudioStreams();
    public Vector3 get_ListernerPosition();
    public void set_ListernerPosition(Vector3 value);
    public Vector3 get_ListernerDirection();
    public void set_ListernerDirection(Vector3 value);
    public Vector3 get_ListernerUpVector();
    public void set_ListernerUpVector(Vector3 value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DrippyAL.AudioStream : object {
    private static int defaultLatency;
    private static int defaultBlockLength;
    [NullableAttribute("2")]
private AudioDevice device;
    private int sampleRate;
    private int channelCount;
    private int latency;
    private int blockLength;
    private UInt32[] alBuffers;
    private BufferFormat format;
    private UInt32 alSource;
    private float volume;
    private float pitch;
    private Vector3 position;
    private Int16[] blockData;
    private UInt32[] alBufferQueue;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<Int16[]> fillBlock;
    [NullableAttribute("2")]
private CancellationTokenSource pollingCts;
    [NullableAttribute("2")]
private Task pollingTask;
    public int SampleRate { get; }
    public int ChannelCount { get; }
    public int Latency { get; }
    public int BlockLength { get; }
    public float Volume { get; public set; }
    public float Pitch { get; public set; }
    public Vector3 Position { get; public set; }
    public PlaybackState State { get; }
    public AudioStream(AudioDevice device, int sampleRate, int channelCount, bool relative, int latency, int blockLength);
    public AudioStream(AudioDevice device, int sampleRate, int channelCount);
    public AudioStream(AudioDevice device, int sampleRate, int channelCount, bool relative);
    public AudioStream(AudioDevice device, int sampleRate, int channelCount, bool relative, int latency);
    private static AudioStream();
    public sealed virtual void Dispose();
    public void Play(Action`1<Int16[]> fillBlock);
    public void Stop();
    private void PollingLoop(CancellationToken ct);
    public int get_SampleRate();
    public int get_ChannelCount();
    public int get_Latency();
    public int get_BlockLength();
    public float get_Volume();
    public void set_Volume(float value);
    public float get_Pitch();
    public void set_Pitch(float value);
    public Vector3 get_Position();
    public void set_Position(Vector3 value);
    public PlaybackState get_State();
    [CompilerGeneratedAttribute]
private void <Play>b__23_0();
}
public enum DrippyAL.PlaybackState : Enum {
    public int value__;
    public static PlaybackState Stopped;
    public static PlaybackState Playing;
    public static PlaybackState Paused;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
