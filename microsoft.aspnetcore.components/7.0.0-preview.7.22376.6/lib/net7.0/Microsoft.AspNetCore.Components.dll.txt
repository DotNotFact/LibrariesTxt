[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class Microsoft.AspNetCore.Components.BindConverter : object {
    private static object BoxedTrue;
    private static object BoxedFalse;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static BindParser`1<string> ConvertToString;
    [NullableAttribute("1")]
internal static BindParser`1<bool> ConvertToBool;
    [NullableAttribute("1")]
internal static BindParser`1<Nullable`1<bool>> ConvertToNullableBool;
    [NullableAttribute("1")]
internal static BindParser`1<int> ConvertToInt;
    [NullableAttribute("1")]
internal static BindParser`1<Nullable`1<int>> ConvertToNullableInt;
    [NullableAttribute("1")]
internal static BindParser`1<long> ConvertToLong;
    [NullableAttribute("1")]
internal static BindParser`1<Nullable`1<long>> ConvertToNullableLong;
    [NullableAttribute("1")]
internal static BindParser`1<short> ConvertToShort;
    [NullableAttribute("1")]
internal static BindParser`1<Nullable`1<short>> ConvertToNullableShort;
    [NullableAttribute("1")]
internal static BindParser`1<float> ConvertToFloat;
    [NullableAttribute("1")]
internal static BindParser`1<Nullable`1<float>> ConvertToNullableFloat;
    [NullableAttribute("1")]
internal static BindParser`1<double> ConvertToDoubleDelegate;
    [NullableAttribute("1")]
internal static BindParser`1<Nullable`1<double>> ConvertToNullableDoubleDelegate;
    [NullableAttribute("1")]
internal static BindParser`1<decimal> ConvertToDecimal;
    [NullableAttribute("1")]
internal static BindParser`1<Nullable`1<decimal>> ConvertToNullableDecimal;
    [NullableAttribute("1")]
internal static BindParser`1<DateTime> ConvertToDateTime;
    [NullableAttribute("1")]
internal static BindParserWithFormat`1<DateTime> ConvertToDateTimeWithFormat;
    [NullableAttribute("1")]
internal static BindParser`1<Nullable`1<DateTime>> ConvertToNullableDateTime;
    [NullableAttribute("1")]
internal static BindParserWithFormat`1<Nullable`1<DateTime>> ConvertToNullableDateTimeWithFormat;
    [NullableAttribute("1")]
internal static BindParser`1<DateTimeOffset> ConvertToDateTimeOffset;
    [NullableAttribute("1")]
internal static BindParserWithFormat`1<DateTimeOffset> ConvertToDateTimeOffsetWithFormat;
    [NullableAttribute("1")]
internal static BindParser`1<Nullable`1<DateTimeOffset>> ConvertToNullableDateTimeOffset;
    [NullableAttribute("1")]
internal static BindParserWithFormat`1<Nullable`1<DateTimeOffset>> ConvertToNullableDateTimeOffsetWithFormat;
    [NullableAttribute("1")]
internal static BindParser`1<DateOnly> ConvertToDateOnly;
    [NullableAttribute("1")]
internal static BindParserWithFormat`1<DateOnly> ConvertToDateOnlyWithFormat;
    [NullableAttribute("1")]
internal static BindParser`1<Nullable`1<DateOnly>> ConvertToNullableDateOnly;
    [NullableAttribute("1")]
internal static BindParserWithFormat`1<Nullable`1<DateOnly>> ConvertToNullableDateOnlyWithFormat;
    [NullableAttribute("1")]
internal static BindParser`1<TimeOnly> ConvertToTimeOnly;
    [NullableAttribute("1")]
internal static BindParserWithFormat`1<TimeOnly> ConvertToTimeOnlyWithFormat;
    [NullableAttribute("1")]
internal static BindParser`1<Nullable`1<TimeOnly>> ConvertToNullableTimeOnly;
    [NullableAttribute("1")]
internal static BindParserWithFormat`1<Nullable`1<TimeOnly>> ConvertToNullableTimeOnlyWithFormat;
    [NullableAttribute("1")]
internal static BindParser`1<Guid> ConvertToGuid;
    [NullableAttribute("1")]
internal static BindParser`1<Nullable`1<Guid>> ConvertToNullableGuid;
    private static BindConverter();
    public static string FormatValue(string value, CultureInfo culture);
    private static string FormatStringValueCore(string value, CultureInfo _);
    public static bool FormatValue(bool value, CultureInfo culture);
    private static object FormatBoolValueCore(bool value, CultureInfo _);
    public static Nullable`1<bool> FormatValue(Nullable`1<bool> value, CultureInfo culture);
    private static object FormatNullableBoolValueCore(Nullable`1<bool> value, CultureInfo _);
    public static string FormatValue(int value, CultureInfo culture);
    private static string FormatIntValueCore(int value, CultureInfo culture);
    public static string FormatValue(Nullable`1<int> value, CultureInfo culture);
    private static string FormatNullableIntValueCore(Nullable`1<int> value, CultureInfo culture);
    [NullableContextAttribute("1")]
public static string FormatValue(long value, CultureInfo culture);
    private static string FormatLongValueCore(long value, CultureInfo culture);
    public static string FormatValue(Nullable`1<long> value, CultureInfo culture);
    private static string FormatNullableLongValueCore(Nullable`1<long> value, CultureInfo culture);
    [NullableContextAttribute("1")]
public static string FormatValue(short value, CultureInfo culture);
    private static string FormatShortValueCore(short value, CultureInfo culture);
    public static string FormatValue(Nullable`1<short> value, CultureInfo culture);
    private static string FormatNullableShortValueCore(Nullable`1<short> value, CultureInfo culture);
    [NullableContextAttribute("1")]
public static string FormatValue(float value, CultureInfo culture);
    private static string FormatFloatValueCore(float value, CultureInfo culture);
    public static string FormatValue(Nullable`1<float> value, CultureInfo culture);
    private static string FormatNullableFloatValueCore(Nullable`1<float> value, CultureInfo culture);
    public static string FormatValue(double value, CultureInfo culture);
    private static string FormatDoubleValueCore(double value, CultureInfo culture);
    public static string FormatValue(Nullable`1<double> value, CultureInfo culture);
    private static string FormatNullableDoubleValueCore(Nullable`1<double> value, CultureInfo culture);
    [NullableContextAttribute("1")]
public static string FormatValue(decimal value, CultureInfo culture);
    private static string FormatDecimalValueCore(decimal value, CultureInfo culture);
    public static string FormatValue(Nullable`1<decimal> value, CultureInfo culture);
    private static string FormatNullableDecimalValueCore(Nullable`1<decimal> value, CultureInfo culture);
    [NullableContextAttribute("1")]
public static string FormatValue(DateTime value, CultureInfo culture);
    [NullableContextAttribute("1")]
public static string FormatValue(DateTime value, string format, CultureInfo culture);
    private static string FormatDateTimeValueCore(DateTime value, string format, CultureInfo culture);
    private static string FormatDateTimeValueCore(DateTime value, CultureInfo culture);
    public static string FormatValue(Nullable`1<DateTime> value, CultureInfo culture);
    public static string FormatValue(Nullable`1<DateTime> value, string format, CultureInfo culture);
    private static string FormatNullableDateTimeValueCore(Nullable`1<DateTime> value, string format, CultureInfo culture);
    private static string FormatNullableDateTimeValueCore(Nullable`1<DateTime> value, CultureInfo culture);
    [NullableContextAttribute("1")]
public static string FormatValue(DateTimeOffset value, CultureInfo culture);
    [NullableContextAttribute("1")]
public static string FormatValue(DateTimeOffset value, string format, CultureInfo culture);
    private static string FormatDateTimeOffsetValueCore(DateTimeOffset value, string format, CultureInfo culture);
    private static string FormatDateTimeOffsetValueCore(DateTimeOffset value, CultureInfo culture);
    public static string FormatValue(Nullable`1<DateTimeOffset> value, CultureInfo culture);
    public static string FormatValue(Nullable`1<DateTimeOffset> value, string format, CultureInfo culture);
    private static string FormatNullableDateTimeOffsetValueCore(Nullable`1<DateTimeOffset> value, string format, CultureInfo culture);
    private static string FormatNullableDateTimeOffsetValueCore(Nullable`1<DateTimeOffset> value, CultureInfo culture);
    [NullableContextAttribute("1")]
public static string FormatValue(DateOnly value, CultureInfo culture);
    [NullableContextAttribute("1")]
public static string FormatValue(DateOnly value, string format, CultureInfo culture);
    private static string FormatDateOnlyValueCore(DateOnly value, string format, CultureInfo culture);
    private static string FormatDateOnlyValueCore(DateOnly value, CultureInfo culture);
    public static string FormatValue(Nullable`1<DateOnly> value, CultureInfo culture);
    public static string FormatValue(Nullable`1<DateOnly> value, string format, CultureInfo culture);
    private static string FormatNullableDateOnlyValueCore(Nullable`1<DateOnly> value, string format, CultureInfo culture);
    private static string FormatNullableDateOnlyValueCore(Nullable`1<DateOnly> value, CultureInfo culture);
    [NullableContextAttribute("1")]
public static string FormatValue(TimeOnly value, CultureInfo culture);
    [NullableContextAttribute("1")]
public static string FormatValue(TimeOnly value, string format, CultureInfo culture);
    private static string FormatTimeOnlyValueCore(TimeOnly value, string format, CultureInfo culture);
    private static string FormatTimeOnlyValueCore(TimeOnly value, CultureInfo culture);
    public static string FormatValue(Nullable`1<TimeOnly> value, CultureInfo culture);
    public static string FormatValue(Nullable`1<TimeOnly> value, string format, CultureInfo culture);
    private static string FormatNullableTimeOnlyValueCore(Nullable`1<TimeOnly> value, string format, CultureInfo culture);
    private static string FormatNullableTimeOnlyValueCore(Nullable`1<TimeOnly> value, CultureInfo culture);
    private static string FormatEnumValueCore(T value, CultureInfo _);
    public static object FormatValue(T value, CultureInfo culture);
    public static bool TryConvertToString(object obj, CultureInfo culture, String& value);
    private static bool ConvertToStringCore(object obj, CultureInfo culture, String& value);
    public static bool TryConvertToBool(object obj, CultureInfo culture, Boolean& value);
    public static bool TryConvertToNullableBool(object obj, CultureInfo culture, Nullable`1& value);
    private static bool ConvertToBoolCore(object obj, CultureInfo culture, Boolean& value);
    private static bool ConvertToNullableBoolCore(object obj, CultureInfo culture, Nullable`1& value);
    public static bool TryConvertToInt(object obj, CultureInfo culture, Int32& value);
    public static bool TryConvertToNullableInt(object obj, CultureInfo culture, Nullable`1& value);
    private static bool ConvertToIntCore(object obj, CultureInfo culture, Int32& value);
    private static bool ConvertToNullableIntCore(object obj, CultureInfo culture, Nullable`1& value);
    public static bool TryConvertToLong(object obj, CultureInfo culture, Int64& value);
    public static bool TryConvertToNullableLong(object obj, CultureInfo culture, Nullable`1& value);
    private static bool ConvertToLongCore(object obj, CultureInfo culture, Int64& value);
    private static bool ConvertToNullableLongCore(object obj, CultureInfo culture, Nullable`1& value);
    public static bool TryConvertToShort(object obj, CultureInfo culture, Int16& value);
    public static bool TryConvertToNullableShort(object obj, CultureInfo culture, Nullable`1& value);
    private static bool ConvertToShortCore(object obj, CultureInfo culture, Int16& value);
    private static bool ConvertToNullableShortCore(object obj, CultureInfo culture, Nullable`1& value);
    public static bool TryConvertToFloat(object obj, CultureInfo culture, Single& value);
    public static bool TryConvertToNullableFloat(object obj, CultureInfo culture, Nullable`1& value);
    private static bool ConvertToFloatCore(object obj, CultureInfo culture, Single& value);
    private static bool ConvertToNullableFloatCore(object obj, CultureInfo culture, Nullable`1& value);
    public static bool TryConvertToDouble(object obj, CultureInfo culture, Double& value);
    public static bool TryConvertToNullableDouble(object obj, CultureInfo culture, Nullable`1& value);
    private static bool ConvertToDoubleCore(object obj, CultureInfo culture, Double& value);
    private static bool ConvertToNullableDoubleCore(object obj, CultureInfo culture, Nullable`1& value);
    public static bool TryConvertToDecimal(object obj, CultureInfo culture, Decimal& value);
    public static bool TryConvertToNullableDecimal(object obj, CultureInfo culture, Nullable`1& value);
    private static bool ConvertToDecimalCore(object obj, CultureInfo culture, Decimal& value);
    private static bool ConvertToNullableDecimalCore(object obj, CultureInfo culture, Nullable`1& value);
    public static bool TryConvertToDateTime(object obj, CultureInfo culture, DateTime& value);
    public static bool TryConvertToDateTime(object obj, CultureInfo culture, string format, DateTime& value);
    public static bool TryConvertToNullableDateTime(object obj, CultureInfo culture, Nullable`1& value);
    public static bool TryConvertToNullableDateTime(object obj, CultureInfo culture, string format, Nullable`1& value);
    private static bool ConvertToDateTimeCore(object obj, CultureInfo culture, DateTime& value);
    private static bool ConvertToDateTimeCore(object obj, CultureInfo culture, string format, DateTime& value);
    private static bool ConvertToNullableDateTimeCore(object obj, CultureInfo culture, Nullable`1& value);
    private static bool ConvertToNullableDateTimeCore(object obj, CultureInfo culture, string format, Nullable`1& value);
    public static bool TryConvertToDateTimeOffset(object obj, CultureInfo culture, DateTimeOffset& value);
    public static bool TryConvertToDateTimeOffset(object obj, CultureInfo culture, string format, DateTimeOffset& value);
    public static bool TryConvertToNullableDateTimeOffset(object obj, CultureInfo culture, Nullable`1& value);
    public static bool TryConvertToNullableDateTimeOffset(object obj, CultureInfo culture, string format, Nullable`1& value);
    private static bool ConvertToDateTimeOffsetCore(object obj, CultureInfo culture, DateTimeOffset& value);
    private static bool ConvertToDateTimeOffsetCore(object obj, CultureInfo culture, string format, DateTimeOffset& value);
    private static bool ConvertToNullableDateTimeOffsetCore(object obj, CultureInfo culture, Nullable`1& value);
    private static bool ConvertToNullableDateTimeOffsetCore(object obj, CultureInfo culture, string format, Nullable`1& value);
    public static bool TryConvertToDateOnly(object obj, CultureInfo culture, DateOnly& value);
    public static bool TryConvertToDateOnly(object obj, CultureInfo culture, string format, DateOnly& value);
    public static bool TryConvertToNullableDateOnly(object obj, CultureInfo culture, Nullable`1& value);
    public static bool TryConvertToNullableDateOnly(object obj, CultureInfo culture, string format, Nullable`1& value);
    private static bool ConvertToDateOnlyCore(object obj, CultureInfo culture, DateOnly& value);
    private static bool ConvertToDateOnlyCore(object obj, CultureInfo culture, string format, DateOnly& value);
    private static bool ConvertToNullableDateOnlyCore(object obj, CultureInfo culture, Nullable`1& value);
    private static bool ConvertToNullableDateOnlyCore(object obj, CultureInfo culture, string format, Nullable`1& value);
    public static bool TryConvertToTimeOnly(object obj, CultureInfo culture, TimeOnly& value);
    public static bool TryConvertToTimeOnly(object obj, CultureInfo culture, string format, TimeOnly& value);
    public static bool TryConvertToNullableTimeOnly(object obj, CultureInfo culture, Nullable`1& value);
    public static bool TryConvertToNullableTimeOnly(object obj, CultureInfo culture, string format, Nullable`1& value);
    private static bool ConvertToTimeOnlyCore(object obj, CultureInfo culture, TimeOnly& value);
    private static bool ConvertToTimeOnlyCore(object obj, CultureInfo culture, string format, TimeOnly& value);
    private static bool ConvertToNullableTimeOnlyCore(object obj, CultureInfo culture, Nullable`1& value);
    private static bool ConvertToNullableTimeOnlyCore(object obj, CultureInfo culture, string format, Nullable`1& value);
    private static bool ConvertToGuidCore(object obj, CultureInfo culture, Guid& value);
    private static bool ConvertToNullableGuidCore(object obj, CultureInfo culture, Nullable`1& value);
    private static bool ConvertToEnum(object obj, CultureInfo _, T& value);
    private static bool ConvertToNullableEnum(object obj, CultureInfo _, Nullable`1& value);
    public static bool TryConvertTo(object obj, CultureInfo culture, T& value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class Microsoft.AspNetCore.Components.BindElementAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Suffix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ValueAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ChangeAttribute>k__BackingField;
    public string Element { get; }
    [NullableAttribute("2")]
public string Suffix { get; }
    public string ValueAttribute { get; }
    public string ChangeAttribute { get; }
    public BindElementAttribute(string element, string suffix, string valueAttribute, string changeAttribute);
    [CompilerGeneratedAttribute]
public string get_Element();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Suffix();
    [CompilerGeneratedAttribute]
public string get_ValueAttribute();
    [CompilerGeneratedAttribute]
public string get_ChangeAttribute();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("128")]
public class Microsoft.AspNetCore.Components.CascadingParameterAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class Microsoft.AspNetCore.Components.CascadingParameterState : ValueType {
    private static ConcurrentDictionary`2<Type, ReflectedCascadingParameterInfo[]> _cachedInfos;
    [CompilerGeneratedAttribute]
private string <LocalValueName>k__BackingField;
    [CompilerGeneratedAttribute]
private ICascadingValueComponent <ValueSupplier>k__BackingField;
    public string LocalValueName { get; }
    public ICascadingValueComponent ValueSupplier { get; }
    public CascadingParameterState(string localValueName, ICascadingValueComponent valueSupplier);
    private static CascadingParameterState();
    [CompilerGeneratedAttribute]
public string get_LocalValueName();
    [CompilerGeneratedAttribute]
public ICascadingValueComponent get_ValueSupplier();
    public static IReadOnlyList`1<CascadingParameterState> FindCascadingParameters(ComponentState componentState);
    private static ICascadingValueComponent GetMatchingCascadingValueSupplier(ReflectedCascadingParameterInfo& info, ComponentState componentState);
    private static ReflectedCascadingParameterInfo[] GetReflectedCascadingParameterInfos(Type componentType);
    private static ReflectedCascadingParameterInfo[] CreateReflectedCascadingParameterInfos(Type componentType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class Microsoft.AspNetCore.Components.CascadingTypeParameterAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public CascadingTypeParameterAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Components.CascadingValue`1 : object {
    private RenderHandle _renderHandle;
    private HashSet`1<ComponentState> _subscribers;
    private bool _hasSetParametersPreviously;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private TValue <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFixed>k__BackingField;
    [ParameterAttribute]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
public TValue Value { get; public set; }
    [ParameterAttribute]
public string Name { get; public set; }
    [ParameterAttribute]
public bool IsFixed { get; public set; }
    private object Microsoft.AspNetCore.Components.ICascadingValueComponent.CurrentValue { get; }
    private bool Microsoft.AspNetCore.Components.ICascadingValueComponent.CurrentValueIsFixed { get; }
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public TValue get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(TValue value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_IsFixed();
    [CompilerGeneratedAttribute]
public void set_IsFixed(bool value);
    private sealed virtual override object Microsoft.AspNetCore.Components.ICascadingValueComponent.get_CurrentValue();
    private sealed virtual override bool Microsoft.AspNetCore.Components.ICascadingValueComponent.get_CurrentValueIsFixed();
    public sealed virtual void Attach(RenderHandle renderHandle);
    [NullableContextAttribute("1")]
public sealed virtual Task SetParametersAsync(ParameterView parameters);
    private sealed virtual override bool Microsoft.AspNetCore.Components.ICascadingValueComponent.CanSupplyValue(Type requestedType, string requestedName);
    private sealed virtual override void Microsoft.AspNetCore.Components.ICascadingValueComponent.Subscribe(ComponentState subscriber);
    private sealed virtual override void Microsoft.AspNetCore.Components.ICascadingValueComponent.Unsubscribe(ComponentState subscriber);
    private void NotifySubscribers(ParameterViewLifetime& lifetime);
    private void Render(RenderTreeBuilder builder);
}
internal class Microsoft.AspNetCore.Components.ChangeDetection : object {
    [NullableContextAttribute("1")]
public static bool MayHaveChanged(T1 oldValue, T2 newValue);
    private static bool IsKnownImmutableType(Type type);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Components.ChangeEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public object Value { get; public set; }
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers : object {
    public static T TypeCheck(T value);
    public static EventCallback`1<T> CreateInferredEventCallback(object receiver, Action`1<T> callback, T value);
    public static EventCallback`1<T> CreateInferredEventCallback(object receiver, Func`2<T, Task> callback, T value);
    public static EventCallback`1<T> CreateInferredEventCallback(object receiver, EventCallback`1<T> callback, T value);
    public static void InvokeSynchronousDelegate(Action callback);
    public static Task InvokeAsynchronousDelegate(Action callback);
    public static Task InvokeAsynchronousDelegate(Func`1<Task> callback);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.AspNetCore.Components.ComponentBase : object {
    private RenderFragment _renderFragment;
    private RenderHandle _renderHandle;
    private bool _initialized;
    private bool _hasNeverRendered;
    private bool _hasPendingQueuedRender;
    private bool _hasCalledOnAfterRender;
    protected virtual void BuildRenderTree(RenderTreeBuilder builder);
    protected virtual void OnInitialized();
    protected virtual Task OnInitializedAsync();
    protected virtual void OnParametersSet();
    protected virtual Task OnParametersSetAsync();
    protected void StateHasChanged();
    protected virtual bool ShouldRender();
    protected virtual void OnAfterRender(bool firstRender);
    protected virtual Task OnAfterRenderAsync(bool firstRender);
    protected Task InvokeAsync(Action workItem);
    protected Task InvokeAsync(Func`1<Task> workItem);
    private sealed virtual override void Microsoft.AspNetCore.Components.IComponent.Attach(RenderHandle renderHandle);
    public virtual Task SetParametersAsync(ParameterView parameters);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Components.ComponentBase/<RunInitAndSetParametersAsync>d__20")]
private Task RunInitAndSetParametersAsync();
    private Task CallOnParametersSetAsync();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Components.ComponentBase/<CallStateHasChangedOnAsyncCompletion>d__22")]
private Task CallStateHasChangedOnAsyncCompletion(Task task);
    private sealed virtual override Task Microsoft.AspNetCore.Components.IHandleEvent.HandleEventAsync(EventCallbackWorkItem callback, object arg);
    private sealed virtual override Task Microsoft.AspNetCore.Components.IHandleAfterRender.OnAfterRenderAsync();
    [CompilerGeneratedAttribute]
private void <.ctor>b__6_0(RenderTreeBuilder builder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Components.ComponentFactory : object {
    private static BindingFlags _injectablePropertyBindingFlags;
    private static ConcurrentDictionary`2<Type, Action`2<IServiceProvider, IComponent>> _cachedInitializers;
    private IComponentActivator _componentActivator;
    public ComponentFactory(IComponentActivator componentActivator);
    private static ComponentFactory();
    public static void ClearCache();
    public IComponent InstantiateComponent(IServiceProvider serviceProvider, Type componentType);
    private static void PerformPropertyInjection(IServiceProvider serviceProvider, IComponent instance);
    private static Action`2<IServiceProvider, IComponent> CreateInitializer(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Components.DefaultComponentActivator : object {
    [CompilerGeneratedAttribute]
private static IComponentActivator <Instance>k__BackingField;
    public static IComponentActivator Instance { get; }
    private static DefaultComponentActivator();
    [CompilerGeneratedAttribute]
public static IComponentActivator get_Instance();
    public sealed virtual IComponent CreateInstance(Type componentType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.AspNetCore.Components.Dispatcher : object {
    private SectionRegistry _sectionRegistry;
    [CompilerGeneratedAttribute]
private UnhandledExceptionEventHandler UnhandledException;
    internal SectionRegistry SectionRegistry { get; }
    public static Dispatcher CreateDefault();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void add_UnhandledException(UnhandledExceptionEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void remove_UnhandledException(UnhandledExceptionEventHandler value);
    internal SectionRegistry get_SectionRegistry();
    public void AssertAccess();
    public abstract virtual bool CheckAccess();
    public abstract virtual Task InvokeAsync(Action workItem);
    public abstract virtual Task InvokeAsync(Func`1<Task> workItem);
    public abstract virtual Task`1<TResult> InvokeAsync(Func`1<TResult> workItem);
    public abstract virtual Task`1<TResult> InvokeAsync(Func`1<Task`1<TResult>> workItem);
    protected void OnUnhandledException(UnhandledExceptionEventArgs e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Components.DynamicComponent : object {
    private RenderHandle _renderHandle;
    private RenderFragment _cachedRenderFragment;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Instance>k__BackingField;
    [ParameterAttribute]
[DynamicallyAccessedMembersAttribute("-1")]
[EditorRequiredAttribute]
public Type Type { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public IDictionary`2<string, object> Parameters { get; public set; }
    [NullableAttribute("2")]
public object Instance { get; private set; }
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Type value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(IDictionary`2<string, object> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_Instance();
    [CompilerGeneratedAttribute]
private void set_Instance(object value);
    public sealed virtual void Attach(RenderHandle renderHandle);
    [UnconditionalSuppressMessageAttribute("Trimming", "IL2072")]
public sealed virtual Task SetParametersAsync(ParameterView parameters);
    private void Render(RenderTreeBuilder builder);
    [CompilerGeneratedAttribute]
private void <Render>b__17_0(object component);
}
[AttributeUsageAttribute("128")]
public class Microsoft.AspNetCore.Components.EditorRequiredAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Microsoft.AspNetCore.Components.ElementReference : ValueType {
    private static long _nextIdForWebAssemblyOnly;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private ElementReferenceContext <Context>k__BackingField;
    public string Id { get; }
    [NullableAttribute("2")]
public ElementReferenceContext Context { get; }
    public ElementReference(string id, ElementReferenceContext context);
    public ElementReference(string id);
    private static ElementReference();
    [CompilerGeneratedAttribute]
public string get_Id();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ElementReferenceContext get_Context();
    [NullableContextAttribute("2")]
internal static ElementReference CreateWithUniqueId(ElementReferenceContext context);
    private static string CreateUniqueId();
}
public abstract class Microsoft.AspNetCore.Components.ElementReferenceContext : object {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class Microsoft.AspNetCore.Components.ErrorBoundaryBase : ComponentBase {
    private int _errorCount;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment`1<Exception> <ErrorContent>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaximumErrorCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <CurrentException>k__BackingField;
    [ParameterAttribute]
public RenderFragment ChildContent { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public RenderFragment`1<Exception> ErrorContent { get; public set; }
    [ParameterAttribute]
public int MaximumErrorCount { get; public set; }
    protected Exception CurrentException { get; private set; }
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<Exception> get_ErrorContent();
    [CompilerGeneratedAttribute]
public void set_ErrorContent(RenderFragment`1<Exception> value);
    [CompilerGeneratedAttribute]
public int get_MaximumErrorCount();
    [CompilerGeneratedAttribute]
public void set_MaximumErrorCount(int value);
    [CompilerGeneratedAttribute]
protected Exception get_CurrentException();
    [CompilerGeneratedAttribute]
private void set_CurrentException(Exception value);
    public void Recover();
    [NullableContextAttribute("1")]
protected abstract virtual Task OnErrorAsync(Exception exception);
    private sealed virtual override void Microsoft.AspNetCore.Components.IErrorBoundary.HandleException(Exception exception);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Components.ErrorBoundaryBase/<HandleOnErrorExceptions>d__20")]
private Task HandleOnErrorExceptions(Task onExceptionTask);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Microsoft.AspNetCore.Components.EventCallback : ValueType {
    public static EventCallbackFactory Factory;
    public static EventCallback Empty;
    [NullableAttribute("2")]
internal MulticastDelegate Delegate;
    [NullableAttribute("2")]
internal IHandleEvent Receiver;
    public bool HasDelegate { get; }
    internal bool RequiresExplicitReceiver { get; }
    [NullableContextAttribute("2")]
public EventCallback(IHandleEvent receiver, MulticastDelegate delegate);
    private static EventCallback();
    public sealed virtual bool get_HasDelegate();
    internal bool get_RequiresExplicitReceiver();
    public Task InvokeAsync(object arg);
    public Task InvokeAsync();
    private sealed virtual override object Microsoft.AspNetCore.Components.IEventCallback.UnpackForRenderTree();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Microsoft.AspNetCore.Components.EventCallback`1 : ValueType {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static EventCallback`1<TValue> Empty;
    internal MulticastDelegate Delegate;
    internal IHandleEvent Receiver;
    public bool HasDelegate { get; }
    internal bool RequiresExplicitReceiver { get; }
    public EventCallback`1(IHandleEvent receiver, MulticastDelegate delegate);
    private static EventCallback`1();
    public sealed virtual bool get_HasDelegate();
    internal bool get_RequiresExplicitReceiver();
    [NullableContextAttribute("1")]
public Task InvokeAsync(TValue arg);
    [NullableContextAttribute("1")]
public Task InvokeAsync();
    internal EventCallback AsUntyped();
    private sealed virtual override object Microsoft.AspNetCore.Components.IEventCallback.UnpackForRenderTree();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Components.EventCallbackFactory : object {
    [EditorBrowsableAttribute("1")]
public EventCallback Create(object receiver, EventCallback callback);
    public EventCallback Create(object receiver, Action callback);
    public EventCallback Create(object receiver, Action`1<object> callback);
    public EventCallback Create(object receiver, Func`1<Task> callback);
    public EventCallback Create(object receiver, Func`2<object, Task> callback);
    [EditorBrowsableAttribute("1")]
public EventCallback`1<TValue> Create(object receiver, EventCallback callback);
    [EditorBrowsableAttribute("1")]
public EventCallback`1<TValue> Create(object receiver, EventCallback`1<TValue> callback);
    public EventCallback`1<TValue> Create(object receiver, Action callback);
    public EventCallback`1<TValue> Create(object receiver, Action`1<TValue> callback);
    public EventCallback`1<TValue> Create(object receiver, Func`1<Task> callback);
    public EventCallback`1<TValue> Create(object receiver, Func`2<TValue, Task> callback);
    [EditorBrowsableAttribute("1")]
public EventCallback`1<TValue> CreateInferred(object receiver, Action`1<TValue> callback, TValue value);
    [EditorBrowsableAttribute("1")]
public EventCallback`1<TValue> CreateInferred(object receiver, Func`2<TValue, Task> callback, TValue value);
    private static EventCallback CreateCore(object receiver, MulticastDelegate callback);
    private static EventCallback`1<TValue> CreateCore(object receiver, MulticastDelegate callback);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Components.EventCallbackFactoryBinderExtensions : object {
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Action`1<string> setter, string existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, EventCallback`1<string> setter, string existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Action`1<bool> setter, bool existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, EventCallback`1<bool> setter, bool existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Action`1<Nullable`1<bool>> setter, Nullable`1<bool> existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, EventCallback`1<Nullable`1<bool>> setter, Nullable`1<bool> existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Action`1<int> setter, int existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, EventCallback`1<int> setter, int existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Action`1<Nullable`1<int>> setter, Nullable`1<int> existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, EventCallback`1<Nullable`1<int>> setter, Nullable`1<int> existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Action`1<long> setter, long existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, EventCallback`1<long> setter, long existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Action`1<short> setter, short existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, EventCallback`1<short> setter, short existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Action`1<Nullable`1<long>> setter, Nullable`1<long> existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, EventCallback`1<Nullable`1<long>> setter, Nullable`1<long> existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Action`1<Nullable`1<short>> setter, Nullable`1<short> existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, EventCallback`1<Nullable`1<short>> setter, Nullable`1<short> existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Action`1<float> setter, float existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, EventCallback`1<float> setter, float existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Action`1<Nullable`1<float>> setter, Nullable`1<float> existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, EventCallback`1<Nullable`1<float>> setter, Nullable`1<float> existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Action`1<double> setter, double existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, EventCallback`1<double> setter, double existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Action`1<Nullable`1<double>> setter, Nullable`1<double> existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, EventCallback`1<Nullable`1<double>> setter, Nullable`1<double> existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Action`1<decimal> setter, decimal existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, EventCallback`1<decimal> setter, decimal existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Action`1<Nullable`1<decimal>> setter, Nullable`1<decimal> existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, EventCallback`1<Nullable`1<decimal>> setter, Nullable`1<decimal> existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Action`1<DateTime> setter, DateTime existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, EventCallback`1<DateTime> setter, DateTime existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Action`1<DateTime> setter, DateTime existingValue, string format, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, EventCallback`1<DateTime> setter, DateTime existingValue, string format, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Action`1<Nullable`1<DateTime>> setter, Nullable`1<DateTime> existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, EventCallback`1<Nullable`1<DateTime>> setter, Nullable`1<DateTime> existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Action`1<Nullable`1<DateTime>> setter, Nullable`1<DateTime> existingValue, string format, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, EventCallback`1<Nullable`1<DateTime>> setter, Nullable`1<DateTime> existingValue, string format, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Action`1<DateTimeOffset> setter, DateTimeOffset existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, EventCallback`1<DateTimeOffset> setter, DateTimeOffset existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Action`1<DateTimeOffset> setter, DateTimeOffset existingValue, string format, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, EventCallback`1<DateTimeOffset> setter, DateTimeOffset existingValue, string format, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Action`1<Nullable`1<DateTimeOffset>> setter, Nullable`1<DateTimeOffset> existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, EventCallback`1<Nullable`1<DateTimeOffset>> setter, Nullable`1<DateTimeOffset> existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Action`1<Nullable`1<DateTimeOffset>> setter, Nullable`1<DateTimeOffset> existingValue, string format, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, EventCallback`1<Nullable`1<DateTimeOffset>> setter, Nullable`1<DateTimeOffset> existingValue, string format, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Action`1<DateOnly> setter, DateOnly existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, EventCallback`1<DateOnly> setter, DateOnly existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Action`1<DateOnly> setter, DateOnly existingValue, string format, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, EventCallback`1<DateOnly> setter, DateOnly existingValue, string format, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Action`1<Nullable`1<DateOnly>> setter, Nullable`1<DateOnly> existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, EventCallback`1<Nullable`1<DateOnly>> setter, Nullable`1<DateOnly> existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Action`1<Nullable`1<DateOnly>> setter, Nullable`1<DateOnly> existingValue, string format, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, EventCallback`1<Nullable`1<DateOnly>> setter, Nullable`1<DateOnly> existingValue, string format, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Action`1<TimeOnly> setter, TimeOnly existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, EventCallback`1<TimeOnly> setter, TimeOnly existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Action`1<TimeOnly> setter, TimeOnly existingValue, string format, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, EventCallback`1<TimeOnly> setter, TimeOnly existingValue, string format, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Action`1<Nullable`1<TimeOnly>> setter, Nullable`1<TimeOnly> existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, EventCallback`1<Nullable`1<TimeOnly>> setter, Nullable`1<TimeOnly> existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Action`1<Nullable`1<TimeOnly>> setter, Nullable`1<TimeOnly> existingValue, string format, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, EventCallback`1<Nullable`1<TimeOnly>> setter, Nullable`1<TimeOnly> existingValue, string format, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, Action`1<T> setter, T existingValue, CultureInfo culture);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> CreateBinder(EventCallbackFactory factory, object receiver, EventCallback`1<T> setter, T existingValue, CultureInfo culture);
    [ExtensionAttribute]
private static EventCallback`1<ChangeEventArgs> CreateBinderCore(EventCallbackFactory factory, object receiver, Action`1<T> setter, CultureInfo culture, BindParser`1<T> converter);
    [ExtensionAttribute]
private static EventCallback`1<ChangeEventArgs> CreateBinderCore(EventCallbackFactory factory, object receiver, EventCallback`1<T> setter, CultureInfo culture, BindParser`1<T> converter);
    [ExtensionAttribute]
private static EventCallback`1<ChangeEventArgs> CreateBinderCore(EventCallbackFactory factory, object receiver, Action`1<T> setter, CultureInfo culture, string format, BindParserWithFormat`1<T> converter);
    [ExtensionAttribute]
private static EventCallback`1<ChangeEventArgs> CreateBinderCore(EventCallbackFactory factory, object receiver, EventCallback`1<T> setter, CultureInfo culture, string format, BindParserWithFormat`1<T> converter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Components.EventCallbackFactoryEventArgsExtensions : object {
    [ExtensionAttribute]
public static EventCallback`1<EventArgs> Create(EventCallbackFactory factory, object receiver, Action`1<EventArgs> callback);
    [ExtensionAttribute]
public static EventCallback`1<EventArgs> Create(EventCallbackFactory factory, object receiver, Func`2<EventArgs, Task> callback);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> Create(EventCallbackFactory factory, object receiver, Action`1<ChangeEventArgs> callback);
    [ExtensionAttribute]
public static EventCallback`1<ChangeEventArgs> Create(EventCallbackFactory factory, object receiver, Func`2<ChangeEventArgs, Task> callback);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Microsoft.AspNetCore.Components.EventCallbackWorkItem : ValueType {
    public static EventCallbackWorkItem Empty;
    private MulticastDelegate _delegate;
    [NullableContextAttribute("2")]
public EventCallbackWorkItem(MulticastDelegate delegate);
    private static EventCallbackWorkItem();
    public Task InvokeAsync(object arg);
    internal static Task InvokeAsync(MulticastDelegate delegate, T arg);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class Microsoft.AspNetCore.Components.EventHandlerAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <AttributeName>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <EventArgsType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableStopPropagation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnablePreventDefault>k__BackingField;
    public string AttributeName { get; }
    public Type EventArgsType { get; }
    public bool EnableStopPropagation { get; }
    public bool EnablePreventDefault { get; }
    public EventHandlerAttribute(string attributeName, Type eventArgsType);
    public EventHandlerAttribute(string attributeName, Type eventArgsType, bool enableStopPropagation, bool enablePreventDefault);
    [CompilerGeneratedAttribute]
public string get_AttributeName();
    [CompilerGeneratedAttribute]
public Type get_EventArgsType();
    [CompilerGeneratedAttribute]
public bool get_EnableStopPropagation();
    [CompilerGeneratedAttribute]
public bool get_EnablePreventDefault();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Components.HotReload.HotReloadManager : object {
    [NullableAttribute("1")]
public static HotReloadManager Default;
    [CompilerGeneratedAttribute]
private bool <MetadataUpdateSupported>k__BackingField;
    [CompilerGeneratedAttribute]
private Action OnDeltaApplied;
    public bool MetadataUpdateSupported { get; public set; }
    public bool IsSubscribedTo { get; }
    private static HotReloadManager();
    [CompilerGeneratedAttribute]
public bool get_MetadataUpdateSupported();
    [CompilerGeneratedAttribute]
public void set_MetadataUpdateSupported(bool value);
    public bool get_IsSubscribedTo();
    [CompilerGeneratedAttribute]
public void add_OnDeltaApplied(Action value);
    [CompilerGeneratedAttribute]
public void remove_OnDeltaApplied(Action value);
    public static void UpdateApplication(Type[] _);
}
[NullableContextAttribute("1")]
internal interface Microsoft.AspNetCore.Components.ICascadingValueComponent {
    [NullableAttribute("2")]
public object CurrentValue { get; }
    public bool CurrentValueIsFixed { get; }
    public abstract virtual bool CanSupplyValue(Type valueType, string valueName);
    [NullableContextAttribute("2")]
public abstract virtual object get_CurrentValue();
    public abstract virtual bool get_CurrentValueIsFixed();
    public abstract virtual void Subscribe(ComponentState subscriber);
    public abstract virtual void Unsubscribe(ComponentState subscriber);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Components.IComponent {
    public abstract virtual void Attach(RenderHandle renderHandle);
    public abstract virtual Task SetParametersAsync(ParameterView parameters);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Components.IComponentActivator {
    public abstract virtual IComponent CreateInstance(Type componentType);
}
[NullableContextAttribute("1")]
internal interface Microsoft.AspNetCore.Components.IErrorBoundary {
    public abstract virtual void HandleException(Exception error);
}
[NullableContextAttribute("2")]
internal interface Microsoft.AspNetCore.Components.IEventCallback {
    public bool HasDelegate { get; }
    public abstract virtual bool get_HasDelegate();
    public abstract virtual object UnpackForRenderTree();
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Components.IHandleAfterRender {
    public abstract virtual Task OnAfterRenderAsync();
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Components.IHandleEvent {
    public abstract virtual Task HandleEventAsync(EventCallbackWorkItem item, object arg);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Components.Infrastructure.ComponentStatePersistenceManager : object {
    private bool _stateIsPersisted;
    private List`1<Func`1<Task>> _pauseCallbacks;
    private Dictionary`2<string, Byte[]> _currentState;
    private ILogger`1<ComponentStatePersistenceManager> _logger;
    [CompilerGeneratedAttribute]
private PersistentComponentState <State>k__BackingField;
    public PersistentComponentState State { get; }
    public ComponentStatePersistenceManager(ILogger`1<ComponentStatePersistenceManager> logger);
    [CompilerGeneratedAttribute]
public PersistentComponentState get_State();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Components.Infrastructure.ComponentStatePersistenceManager/<RestoreStateAsync>d__8")]
public Task RestoreStateAsync(IPersistentComponentStateStore store);
    public Task PersistStateAsync(IPersistentComponentStateStore store, Renderer renderer);
    internal Task PauseAsync();
    [CompilerGeneratedAttribute]
internal static Task <PauseAsync>g__ExecuteCallback|10_0(Func`1<Task> callback, ILogger`1<ComponentStatePersistenceManager> logger);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Components.Infrastructure.ComponentStatePersistenceManager/<<PauseAsync>g__Awaited|10_1>d")]
[CompilerGeneratedAttribute]
internal static Task <PauseAsync>g__Awaited|10_1(Task task, ILogger`1<ComponentStatePersistenceManager> logger);
}
[AttributeUsageAttribute("128")]
public class Microsoft.AspNetCore.Components.InjectAttribute : Attribute {
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Components.IPersistentComponentStateStore {
    public abstract virtual Task`1<IDictionary`2<string, Byte[]>> GetPersistedStateAsync();
    public abstract virtual Task PersistStateAsync(IReadOnlyDictionary`2<string, Byte[]> state);
}
internal static class Microsoft.AspNetCore.Components.JsonSerializerOptionsProvider : object {
    [NullableAttribute("1")]
public static JsonSerializerOptions Options;
    private static JsonSerializerOptionsProvider();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class Microsoft.AspNetCore.Components.LayoutAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <LayoutType>k__BackingField;
    public Type LayoutType { get; private set; }
    public LayoutAttribute(Type layoutType);
    [CompilerGeneratedAttribute]
public Type get_LayoutType();
    [CompilerGeneratedAttribute]
private void set_LayoutType(Type value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class Microsoft.AspNetCore.Components.LayoutComponentBase : ComponentBase {
    [NullableAttribute("1")]
internal static string BodyPropertyName;
    [CompilerGeneratedAttribute]
private RenderFragment <Body>k__BackingField;
    [ParameterAttribute]
public RenderFragment Body { get; public set; }
    [CompilerGeneratedAttribute]
public RenderFragment get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(RenderFragment value);
    [NullableContextAttribute("1")]
[DynamicDependencyAttribute("-1", "Microsoft.AspNetCore.Components.LayoutComponentBase")]
public virtual Task SetParametersAsync(ParameterView parameters);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Components.LayoutView : object {
    private static RenderFragment EmptyRenderFragment;
    private RenderHandle _renderHandle;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Layout>k__BackingField;
    [ParameterAttribute]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
[DynamicallyAccessedMembersAttribute("-1")]
public Type Layout { get; public set; }
    private static LayoutView();
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public Type get_Layout();
    [CompilerGeneratedAttribute]
public void set_Layout(Type value);
    public sealed virtual void Attach(RenderHandle renderHandle);
    public sealed virtual Task SetParametersAsync(ParameterView parameters);
    [UnconditionalSuppressMessageAttribute("Trimming", "IL2072")]
private void Render();
    private static RenderFragment WrapInLayout(Type layoutType, RenderFragment bodyParam);
    private static Type GetParentLayoutType(Type type);
}
public class Microsoft.AspNetCore.Components.LocationChangeException : Exception {
    [NullableContextAttribute("1")]
public LocationChangeException(string message, Exception innerException);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Microsoft.AspNetCore.Components.MarkupString : ValueType {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Value { get; }
    public MarkupString(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    public static MarkupString op_Explicit(string value);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Components.NavigationException : Exception {
    [CompilerGeneratedAttribute]
private string <Location>k__BackingField;
    public string Location { get; }
    public NavigationException(string uri);
    [CompilerGeneratedAttribute]
public string get_Location();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.AspNetCore.Components.NavigationManager : object {
    private static Char[] UriPathEndChar;
    private EventHandler`1<LocationChangedEventArgs> _locationChanged;
    private Uri _baseUri;
    private string _uri;
    private bool _isInitialized;
    [CompilerGeneratedAttribute]
private string <HistoryEntryState>k__BackingField;
    public string BaseUri { get; protected set; }
    public string Uri { get; protected set; }
    [NullableAttribute("2")]
public string HistoryEntryState { get; protected set; }
    private static NavigationManager();
    public void add_LocationChanged(EventHandler`1<LocationChangedEventArgs> value);
    public void remove_LocationChanged(EventHandler`1<LocationChangedEventArgs> value);
    public string get_BaseUri();
    protected void set_BaseUri(string value);
    public string get_Uri();
    protected void set_Uri(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_HistoryEntryState();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected void set_HistoryEntryState(string value);
    public void NavigateTo(string uri, bool forceLoad);
    public void NavigateTo(string uri, bool forceLoad, bool replace);
    public void NavigateTo(string uri, NavigationOptions options);
    protected virtual void NavigateToCore(string uri, bool forceLoad);
    protected virtual void NavigateToCore(string uri, NavigationOptions options);
    protected void Initialize(string baseUri, string uri);
    protected virtual void EnsureInitialized();
    public Uri ToAbsoluteUri(string relativeUri);
    public string ToBaseRelativePath(string uri);
    internal static string NormalizeBaseUri(string baseUri);
    protected void NotifyLocationChanged(bool isInterceptedLink);
    private void AssertInitialized();
    private static bool TryGetLengthOfBaseUriPrefix(Uri baseUri, string uri, Int32& length);
    private static void Validate(Uri baseUri, string uri);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Components.NavigationManagerExtensions : object {
    private static string EmptyQueryParameterNameExceptionMessage;
    private static Dictionary`2<Type, QueryParameterFormatter`1<object>> _queryParameterFormatters;
    private static NavigationManagerExtensions();
    private static string Format(string value);
    private static string Format(bool value);
    private static string Format(Nullable`1<bool> value);
    private static string Format(DateTime value);
    private static string Format(Nullable`1<DateTime> value);
    private static string Format(DateOnly value);
    private static string Format(Nullable`1<DateOnly> value);
    private static string Format(TimeOnly value);
    private static string Format(Nullable`1<TimeOnly> value);
    private static string Format(decimal value);
    private static string Format(Nullable`1<decimal> value);
    private static string Format(double value);
    private static string Format(Nullable`1<double> value);
    private static string Format(float value);
    private static string Format(Nullable`1<float> value);
    private static string Format(Guid value);
    private static string Format(Nullable`1<Guid> value);
    private static string Format(int value);
    private static string Format(Nullable`1<int> value);
    private static string Format(long value);
    private static string Format(Nullable`1<long> value);
    [ExtensionAttribute]
public static string GetUriWithQueryParameter(NavigationManager navigationManager, string name, bool value);
    [ExtensionAttribute]
public static string GetUriWithQueryParameter(NavigationManager navigationManager, string name, Nullable`1<bool> value);
    [ExtensionAttribute]
public static string GetUriWithQueryParameter(NavigationManager navigationManager, string name, DateTime value);
    [ExtensionAttribute]
public static string GetUriWithQueryParameter(NavigationManager navigationManager, string name, Nullable`1<DateTime> value);
    [ExtensionAttribute]
public static string GetUriWithQueryParameter(NavigationManager navigationManager, string name, DateOnly value);
    [ExtensionAttribute]
public static string GetUriWithQueryParameter(NavigationManager navigationManager, string name, Nullable`1<DateOnly> value);
    [ExtensionAttribute]
public static string GetUriWithQueryParameter(NavigationManager navigationManager, string name, TimeOnly value);
    [ExtensionAttribute]
public static string GetUriWithQueryParameter(NavigationManager navigationManager, string name, Nullable`1<TimeOnly> value);
    [ExtensionAttribute]
public static string GetUriWithQueryParameter(NavigationManager navigationManager, string name, decimal value);
    [ExtensionAttribute]
public static string GetUriWithQueryParameter(NavigationManager navigationManager, string name, Nullable`1<decimal> value);
    [ExtensionAttribute]
public static string GetUriWithQueryParameter(NavigationManager navigationManager, string name, double value);
    [ExtensionAttribute]
public static string GetUriWithQueryParameter(NavigationManager navigationManager, string name, Nullable`1<double> value);
    [ExtensionAttribute]
public static string GetUriWithQueryParameter(NavigationManager navigationManager, string name, float value);
    [ExtensionAttribute]
public static string GetUriWithQueryParameter(NavigationManager navigationManager, string name, Nullable`1<float> value);
    [ExtensionAttribute]
public static string GetUriWithQueryParameter(NavigationManager navigationManager, string name, Guid value);
    [ExtensionAttribute]
public static string GetUriWithQueryParameter(NavigationManager navigationManager, string name, Nullable`1<Guid> value);
    [ExtensionAttribute]
public static string GetUriWithQueryParameter(NavigationManager navigationManager, string name, int value);
    [ExtensionAttribute]
public static string GetUriWithQueryParameter(NavigationManager navigationManager, string name, Nullable`1<int> value);
    [ExtensionAttribute]
public static string GetUriWithQueryParameter(NavigationManager navigationManager, string name, long value);
    [ExtensionAttribute]
public static string GetUriWithQueryParameter(NavigationManager navigationManager, string name, Nullable`1<long> value);
    [ExtensionAttribute]
public static string GetUriWithQueryParameter(NavigationManager navigationManager, string name, string value);
    [ExtensionAttribute]
public static string GetUriWithQueryParameters(NavigationManager navigationManager, IReadOnlyDictionary`2<string, object> parameters);
    [ExtensionAttribute]
public static string GetUriWithQueryParameters(NavigationManager navigationManager, string uri, IReadOnlyDictionary`2<string, object> parameters);
    private static string GetUriWithUpdatedQueryParameter(string uri, string name, string value);
    private static string GetUriWithRemovedQueryParameter(string uri, string name);
    private static string GetUriWithAppendedQueryParameters(string uriWithoutQueryString, IReadOnlyDictionary`2<string, object> parameters);
    private static Dictionary`2<ReadOnlyMemory`1<char>, QueryParameterSource> CreateParameterSourceDictionary(IReadOnlyDictionary`2<string, object> parameters);
    private static QueryParameterFormatter`1<object> GetFormatterFromParameterValueType(Type parameterValueType);
    private static bool TryRebuildExistingQueryFromUri(string uri, QueryStringEnumerable& existingQueryStringEnumerable, QueryStringBuilder& newQueryStringBuilder);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Microsoft.AspNetCore.Components.NavigationOptions : ValueType {
    [CompilerGeneratedAttribute]
private bool <ForceLoad>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReplaceHistoryEntry>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HistoryEntryState>k__BackingField;
    public bool ForceLoad { get; public set; }
    public bool ReplaceHistoryEntry { get; public set; }
    public string HistoryEntryState { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ForceLoad();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ForceLoad(bool value);
    [CompilerGeneratedAttribute]
public bool get_ReplaceHistoryEntry();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ReplaceHistoryEntry(bool value);
    [CompilerGeneratedAttribute]
public string get_HistoryEntryState();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_HistoryEntryState(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.AspNetCore.Components.OwningComponentBase : ComponentBase {
    private Nullable`1<AsyncServiceScope> _scope;
    [CompilerGeneratedAttribute]
private IServiceScopeFactory <ScopeFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDisposed>k__BackingField;
    [InjectAttribute]
private IServiceScopeFactory ScopeFactory { get; private set; }
    protected bool IsDisposed { get; private set; }
    protected IServiceProvider ScopedServices { get; }
    [CompilerGeneratedAttribute]
private IServiceScopeFactory get_ScopeFactory();
    [CompilerGeneratedAttribute]
private void set_ScopeFactory(IServiceScopeFactory value);
    [CompilerGeneratedAttribute]
protected bool get_IsDisposed();
    [CompilerGeneratedAttribute]
private void set_IsDisposed(bool value);
    protected IServiceProvider get_ScopedServices();
    private sealed virtual override void System.IDisposable.Dispose();
    protected virtual void Dispose(bool disposing);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.AspNetCore.Components.OwningComponentBase`1 : OwningComponentBase {
    private TService _item;
    protected TService Service { get; }
    protected TService get_Service();
}
[AttributeUsageAttribute("128")]
public class Microsoft.AspNetCore.Components.ParameterAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <CaptureUnmatchedValues>k__BackingField;
    public bool CaptureUnmatchedValues { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_CaptureUnmatchedValues();
    [CompilerGeneratedAttribute]
public void set_CaptureUnmatchedValues(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Microsoft.AspNetCore.Components.ParameterValue : ValueType {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Cascading>k__BackingField;
    public string Name { get; }
    public object Value { get; }
    public bool Cascading { get; }
    internal ParameterValue(string name, object value, bool cascading);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public bool get_Cascading();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Microsoft.AspNetCore.Components.ParameterView : ValueType {
    private static RenderTreeFrame[] _emptyFrames;
    private static ParameterView _empty;
    private ParameterViewLifetime _lifetime;
    private RenderTreeFrame[] _frames;
    private int _ownerIndex;
    private IReadOnlyList`1<CascadingParameterState> _cascadingParameters;
    public static ParameterView Empty { get; }
    internal ParameterViewLifetime Lifetime { get; }
    internal ParameterView(ParameterViewLifetime& lifetime, RenderTreeFrame[] frames, int ownerIndex);
    private ParameterView(ParameterViewLifetime& lifetime, RenderTreeFrame[] frames, int ownerIndex, IReadOnlyList`1<CascadingParameterState> cascadingParameters);
    private static ParameterView();
    public static ParameterView get_Empty();
    internal ParameterViewLifetime get_Lifetime();
    public Enumerator GetEnumerator();
    public bool TryGetValue(string parameterName, TValue& result);
    [NullableContextAttribute("2")]
public TValue GetValueOrDefault(string parameterName);
    public TValue GetValueOrDefault(string parameterName, TValue defaultValue);
    public IReadOnlyDictionary`2<string, object> ToDictionary();
    internal ParameterView Clone();
    internal ParameterView WithCascadingParameters(IReadOnlyList`1<CascadingParameterState> cascadingParameters);
    internal bool DefinitelyEquals(ParameterView oldParameters);
    internal void CaptureSnapshot(ArrayBuilder`1<RenderTreeFrame> builder);
    private int GetEntryCount();
    public static ParameterView FromDictionary(IDictionary`2<string, object> parameters);
    public void SetParameterProperties(object target);
}
[IsReadOnlyAttribute]
internal class Microsoft.AspNetCore.Components.ParameterViewBuilder : ValueType {
    private static string GeneratedParameterViewElementName;
    private RenderTreeFrame[] _frames;
    public ParameterViewBuilder(int maxCapacity);
    [NullableContextAttribute("1")]
public void Add(string name, object value);
    public ParameterView ToParameterView();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Components.PersistentComponentState : object {
    private IDictionary`2<string, Byte[]> _existingState;
    private IDictionary`2<string, Byte[]> _currentState;
    private List`1<Func`1<Task>> _registeredCallbacks;
    [CompilerGeneratedAttribute]
private bool <PersistingState>k__BackingField;
    internal bool PersistingState { get; internal set; }
    internal PersistentComponentState(IDictionary`2<string, Byte[]> currentState, List`1<Func`1<Task>> pauseCallbacks);
    [CompilerGeneratedAttribute]
internal bool get_PersistingState();
    [CompilerGeneratedAttribute]
internal void set_PersistingState(bool value);
    internal void InitializeExistingState(IDictionary`2<string, Byte[]> existingState);
    public PersistingComponentStateSubscription RegisterOnPersisting(Func`1<Task> callback);
    [RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed.")]
public void PersistAsJson(string key, TValue instance);
    [NullableContextAttribute("2")]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed.")]
public bool TryTakeFromJson(string key, TValue& instance);
    private bool TryTake(string key, Byte[]& value);
}
[IsReadOnlyAttribute]
public class Microsoft.AspNetCore.Components.PersistingComponentStateSubscription : ValueType {
    private List`1<Func`1<Task>> _callbacks;
    private Func`1<Task> _callback;
    [NullableContextAttribute("1")]
internal PersistingComponentStateSubscription(List`1<Func`1<Task>> callbacks, Func`1<Task> callback);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.AspNetCore.Components.Reflection.ComponentProperties : object {
    internal static BindingFlags BindablePropertyFlags;
    private static ConcurrentDictionary`2<Type, WritersForType> _cachedWritersByType;
    private static ComponentProperties();
    public static void ClearCache();
    public static void SetProperties(ParameterView& parameters, object target);
    internal static IEnumerable`1<PropertyInfo> GetCandidateBindableProperties(Type targetType);
    [DoesNotReturnAttribute]
private static void ThrowForUnknownIncomingParameterName(Type targetType, string parameterName);
    [DoesNotReturnAttribute]
private static void ThrowForSettingCascadingParameterWithNonCascadingValue(Type targetType, string parameterName);
    [DoesNotReturnAttribute]
private static void ThrowForSettingParameterWithCascadingValue(Type targetType, string parameterName);
    [DoesNotReturnAttribute]
private static void ThrowForCaptureUnmatchedValuesConflict(Type targetType, string parameterName, Dictionary`2<string, object> unmatched);
    [DoesNotReturnAttribute]
private static void ThrowForMultipleCaptureUnmatchedValuesParameters(Type targetType);
    [DoesNotReturnAttribute]
private static void ThrowForInvalidCaptureUnmatchedValuesParameterType(Type targetType, PropertyInfo propertyInfo);
    [CompilerGeneratedAttribute]
internal static void <SetProperties>g__SetProperty|3_0(object target, PropertySetter writer, string parameterName, object value);
}
internal class Microsoft.AspNetCore.Components.Reflection.MemberAssignment : object {
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("Microsoft.AspNetCore.Components.Reflection.MemberAssignment/<GetPropertiesIncludingInherited>d__0")]
public static IEnumerable`1<PropertyInfo> GetPropertiesIncludingInherited(Type type, BindingFlags bindingFlags);
    private static bool IsInheritedProperty(PropertyInfo property, object others);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Components.Reflection.PropertySetter : object {
    private static MethodInfo CallPropertySetterOpenGenericMethod;
    private Action`2<object, object> _setterDelegate;
    [CompilerGeneratedAttribute]
private bool <Cascading>k__BackingField;
    public bool Cascading { get; public set; }
    [UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2060:MakeGenericMethod")]
public PropertySetter(Type targetType, PropertyInfo property);
    private static PropertySetter();
    [CompilerGeneratedAttribute]
public bool get_Cascading();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Cascading(bool value);
    public void SetValue(object target, object value);
    private static void CallPropertySetter(Action`2<TTarget, TValue> setter, object target, object value);
}
public class Microsoft.AspNetCore.Components.RenderFragment : MulticastDelegate {
    public RenderFragment(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(RenderTreeBuilder builder);
    public virtual IAsyncResult BeginInvoke(RenderTreeBuilder builder, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.AspNetCore.Components.RenderFragment`1 : MulticastDelegate {
    public RenderFragment`1(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual RenderFragment Invoke(TValue value);
    public virtual IAsyncResult BeginInvoke(TValue value, AsyncCallback callback, object object);
    public virtual RenderFragment EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Microsoft.AspNetCore.Components.RenderHandle : ValueType {
    private Renderer _renderer;
    private int _componentId;
    public Dispatcher Dispatcher { get; }
    public bool IsInitialized { get; }
    public bool IsRenderingOnMetadataUpdate { get; }
    internal bool IsRendererDisposed { get; }
    internal RenderHandle(Renderer renderer, int componentId);
    public Dispatcher get_Dispatcher();
    public bool get_IsInitialized();
    public bool get_IsRenderingOnMetadataUpdate();
    internal bool get_IsRendererDisposed();
    public void Render(RenderFragment renderFragment);
    [DoesNotReturnAttribute]
private static void ThrowNotInitialized();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Components.Rendering.ComponentState : object {
    private Renderer _renderer;
    private IReadOnlyList`1<CascadingParameterState> _cascadingParameters;
    private bool _hasCascadingParameters;
    private bool _hasAnyCascadingParameterSubscriptions;
    private RenderTreeBuilder _nextRenderTree;
    private ArrayBuilder`1<RenderTreeFrame> _latestDirectParametersSnapshot;
    private bool _componentWasDisposed;
    [CompilerGeneratedAttribute]
private int <ComponentId>k__BackingField;
    [CompilerGeneratedAttribute]
private IComponent <Component>k__BackingField;
    [CompilerGeneratedAttribute]
private ComponentState <ParentComponentState>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderTreeBuilder <CurrentRenderTree>k__BackingField;
    public int ComponentId { get; }
    public IComponent Component { get; }
    public ComponentState ParentComponentState { get; }
    public RenderTreeBuilder CurrentRenderTree { get; private set; }
    public ComponentState(Renderer renderer, int componentId, IComponent component, ComponentState parentComponentState);
    [CompilerGeneratedAttribute]
public int get_ComponentId();
    [CompilerGeneratedAttribute]
public IComponent get_Component();
    [CompilerGeneratedAttribute]
public ComponentState get_ParentComponentState();
    [CompilerGeneratedAttribute]
public RenderTreeBuilder get_CurrentRenderTree();
    [CompilerGeneratedAttribute]
private void set_CurrentRenderTree(RenderTreeBuilder value);
    public void RenderIntoBatch(RenderBatchBuilder batchBuilder, RenderFragment renderFragment, Exception& renderFragmentException);
    public bool TryDisposeInBatch(RenderBatchBuilder batchBuilder, Exception& exception);
    private void CleanupComponentStateResources(RenderBatchBuilder batchBuilder);
    public Task NotifyRenderCompletedAsync();
    public void SetDirectParameters(ParameterView parameters);
    public void NotifyCascadingValueChanged(ParameterViewLifetime& lifetime);
    private void SupplyCombinedParameters(ParameterView directAndCascadingParameters);
    private bool AddCascadingParameterSubscriptions();
    private void RemoveCascadingParameterSubscriptions();
    public sealed virtual void Dispose();
    private void DisposeBuffers();
    public Task DisposeInBatchAsync(RenderBatchBuilder batchBuilder);
}
[IsReadOnlyAttribute]
internal class Microsoft.AspNetCore.Components.Rendering.KeyedItemInfo : ValueType {
    public int OldIndex;
    public int NewIndex;
    public int OldSiblingIndex;
    public int NewSiblingIndex;
    public KeyedItemInfo(int oldIndex, int newIndex);
    private KeyedItemInfo(KeyedItemInfo& copyFrom, int oldSiblingIndex, int newSiblingIndex);
    public KeyedItemInfo WithOldSiblingIndex(int oldSiblingIndex);
    public KeyedItemInfo WithNewSiblingIndex(int newSiblingIndex);
}
[IsReadOnlyAttribute]
internal class Microsoft.AspNetCore.Components.Rendering.ParameterViewLifetime : ValueType {
    private RenderBatchBuilder _owner;
    private int _stamp;
    public static ParameterViewLifetime Unbound;
    [NullableContextAttribute("1")]
public ParameterViewLifetime(RenderBatchBuilder owner);
    public void AssertNotExpired();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Components.Rendering.RenderBatchBuilder : object {
    private int _parameterViewValidityStamp;
    [CompilerGeneratedAttribute]
private ArrayBuilder`1<RenderTreeDiff> <UpdatedComponentDiffs>k__BackingField;
    [CompilerGeneratedAttribute]
private ArrayBuilder`1<int> <DisposedComponentIds>k__BackingField;
    [CompilerGeneratedAttribute]
private ArrayBuilder`1<ulong> <DisposedEventHandlerIds>k__BackingField;
    [CompilerGeneratedAttribute]
private ArrayBuilder`1<RenderTreeEdit> <EditsBuffer>k__BackingField;
    [CompilerGeneratedAttribute]
private ArrayBuilder`1<RenderTreeFrame> <ReferenceFramesBuffer>k__BackingField;
    [CompilerGeneratedAttribute]
private Queue`1<RenderQueueEntry> <ComponentRenderQueue>k__BackingField;
    [CompilerGeneratedAttribute]
private Queue`1<int> <ComponentDisposalQueue>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, int> <AttributeDiffSet>k__BackingField;
    [CompilerGeneratedAttribute]
private StackObjectPool`1<Dictionary`2<object, KeyedItemInfo>> <KeyedItemInfoDictionaryPool>k__BackingField;
    public ArrayBuilder`1<RenderTreeDiff> UpdatedComponentDiffs { get; }
    public ArrayBuilder`1<int> DisposedComponentIds { get; }
    public ArrayBuilder`1<ulong> DisposedEventHandlerIds { get; }
    public ArrayBuilder`1<RenderTreeEdit> EditsBuffer { get; }
    public ArrayBuilder`1<RenderTreeFrame> ReferenceFramesBuffer { get; }
    public Queue`1<RenderQueueEntry> ComponentRenderQueue { get; }
    public Queue`1<int> ComponentDisposalQueue { get; }
    public Dictionary`2<string, int> AttributeDiffSet { get; }
    public int ParameterViewValidityStamp { get; }
    internal StackObjectPool`1<Dictionary`2<object, KeyedItemInfo>> KeyedItemInfoDictionaryPool { get; }
    [CompilerGeneratedAttribute]
public ArrayBuilder`1<RenderTreeDiff> get_UpdatedComponentDiffs();
    [CompilerGeneratedAttribute]
public ArrayBuilder`1<int> get_DisposedComponentIds();
    [CompilerGeneratedAttribute]
public ArrayBuilder`1<ulong> get_DisposedEventHandlerIds();
    [CompilerGeneratedAttribute]
public ArrayBuilder`1<RenderTreeEdit> get_EditsBuffer();
    [CompilerGeneratedAttribute]
public ArrayBuilder`1<RenderTreeFrame> get_ReferenceFramesBuffer();
    [CompilerGeneratedAttribute]
public Queue`1<RenderQueueEntry> get_ComponentRenderQueue();
    [CompilerGeneratedAttribute]
public Queue`1<int> get_ComponentDisposalQueue();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, int> get_AttributeDiffSet();
    public int get_ParameterViewValidityStamp();
    [CompilerGeneratedAttribute]
internal StackObjectPool`1<Dictionary`2<object, KeyedItemInfo>> get_KeyedItemInfoDictionaryPool();
    public void ClearStateForCurrentBatch();
    public RenderBatch ToBatch();
    public void InvalidateParameterViews();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{_state,nq}")]
internal class Microsoft.AspNetCore.Components.Rendering.RendererSynchronizationContext : SynchronizationContext {
    private static ContextCallback ExecutionContextThunk;
    private static Action`2<Task, object> BackgroundWorkThunk;
    private State _state;
    [CompilerGeneratedAttribute]
private UnhandledExceptionEventHandler UnhandledException;
    private RendererSynchronizationContext(State state);
    private static RendererSynchronizationContext();
    [CompilerGeneratedAttribute]
public void add_UnhandledException(UnhandledExceptionEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_UnhandledException(UnhandledExceptionEventHandler value);
    public Task InvokeAsync(Action action);
    public Task InvokeAsync(Func`1<Task> asyncAction);
    public Task`1<TResult> InvokeAsync(Func`1<TResult> function);
    public Task`1<TResult> InvokeAsync(Func`1<Task`1<TResult>> asyncFunction);
    public virtual void Post(SendOrPostCallback d, object state);
    public virtual void Send(SendOrPostCallback d, object state);
    public virtual SynchronizationContext CreateCopy();
    private void ExecuteSynchronouslyIfPossible(SendOrPostCallback d, object state);
    private Task Enqueue(Task antecedent, SendOrPostCallback d, object state, bool forceAsync);
    private void ExecuteSynchronously(TaskCompletionSource completion, SendOrPostCallback d, object state);
    private void ExecuteBackground(WorkItem item);
    private void DispatchException(Exception ex);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Components.Rendering.RendererSynchronizationContextDispatcher : Dispatcher {
    private RendererSynchronizationContext _context;
    public virtual bool CheckAccess();
    public virtual Task InvokeAsync(Action workItem);
    public virtual Task InvokeAsync(Func`1<Task> workItem);
    public virtual Task`1<TResult> InvokeAsync(Func`1<TResult> workItem);
    public virtual Task`1<TResult> InvokeAsync(Func`1<Task`1<TResult>> workItem);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_0(object sender, UnhandledExceptionEventArgs e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class Microsoft.AspNetCore.Components.Rendering.RenderQueueEntry : ValueType {
    public ComponentState ComponentState;
    public RenderFragment RenderFragment;
    public RenderQueueEntry(ComponentState componentState, RenderFragment renderFragment);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder : object {
    private static object BoxedTrue;
    private static object BoxedFalse;
    private static string ComponentReferenceCaptureInvalidParentMessage;
    private RenderTreeFrameArrayBuilder _entries;
    private Stack`1<int> _openElementIndices;
    private Nullable`1<RenderTreeFrameType> _lastNonAttributeFrameType;
    private bool _hasSeenAddMultipleAttributes;
    private Dictionary`2<string, int> _seenAttributeNames;
    private static string ChildContent;
    private static RenderTreeBuilder();
    public void OpenElement(int sequence, string elementName);
    public void CloseElement();
    [NullableContextAttribute("2")]
public void AddMarkupContent(int sequence, string markupContent);
    [NullableContextAttribute("2")]
public void AddContent(int sequence, string textContent);
    [NullableContextAttribute("2")]
public void AddContent(int sequence, RenderFragment fragment);
    public void AddContent(int sequence, RenderFragment`1<TValue> fragment, TValue value);
    public void AddContent(int sequence, Nullable`1<MarkupString> markupContent);
    public void AddContent(int sequence, MarkupString markupContent);
    [NullableContextAttribute("2")]
public void AddContent(int sequence, object textContent);
    public void AddAttribute(int sequence, string name);
    public void AddAttribute(int sequence, string name, bool value);
    public void AddAttribute(int sequence, string name, string value);
    public void AddAttribute(int sequence, string name, MulticastDelegate value);
    public void AddAttribute(int sequence, string name, EventCallback value);
    public void AddAttribute(int sequence, string name, EventCallback`1<TArgument> value);
    public void AddAttribute(int sequence, string name, object value);
    public void AddAttribute(int sequence, RenderTreeFrame frame);
    public void AddMultipleAttributes(int sequence, IEnumerable`1<KeyValuePair`2<string, object>> attributes);
    public void SetUpdatesAttributeName(string updatesAttributeName);
    public void OpenComponent(int sequence);
    public void OpenComponent(int sequence, Type componentType);
    [NullableContextAttribute("2")]
public void SetKey(object value);
    private void OpenComponentUnchecked(int sequence, Type componentType);
    public void CloseComponent();
    public void AddElementReferenceCapture(int sequence, Action`1<ElementReference> elementReferenceCaptureAction);
    public void AddComponentReferenceCapture(int sequence, Action`1<object> componentReferenceCaptureAction);
    public void OpenRegion(int sequence);
    public void CloseRegion();
    private void AssertCanAddAttribute();
    private Nullable`1<int> GetCurrentParentFrameIndex();
    private Nullable`1<RenderTreeFrameType> GetCurrentParentFrameType();
    public void Clear();
    internal bool InsertAttributeExpensive(int insertAtIndex, int sequence, string attributeName, object attributeValue);
    [NullableContextAttribute("0")]
public ArrayRange`1<RenderTreeFrame> GetFrames();
    internal void AssertTreeIsValid(IComponent component);
    internal void ProcessDuplicateAttributes(int first);
    internal void TrackAttributeName(string name);
    public sealed virtual void Dispose();
}
internal class Microsoft.AspNetCore.Components.Rendering.RenderTreeUpdater : object {
    [NullableContextAttribute("1")]
public static void UpdateToMatchClientState(RenderTreeBuilder renderTreeBuilder, ulong eventHandlerId, object newFieldValue);
    private static void UpdateFrameToMatchClientState(RenderTreeBuilder renderTreeBuilder, RenderTreeFrame[] framesArray, int elementFrameIndex, string attributeName, object attributeValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Components.Rendering.SimplifiedStringHashComparer : object {
    public static SimplifiedStringHashComparer Instance;
    private static SimplifiedStringHashComparer();
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(string x, string y);
    public sealed virtual int GetHashCode(string key);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Components.RenderTree.ArrayBuilder`1 : object {
    protected T[] _items;
    protected int _itemsInUse;
    private static T[] Empty;
    private ArrayPool`1<T> _arrayPool;
    private int _minCapacity;
    private bool _disposed;
    public int Count { get; }
    public T[] Buffer { get; }
    public ArrayBuilder`1(int minCapacity, ArrayPool`1<T> arrayPool);
    private static ArrayBuilder`1();
    public int get_Count();
    public T[] get_Buffer();
    public int Append(T& item);
    internal int Append(T[] source, int startIndex, int length);
    internal int Append(ReadOnlySpan`1<T> source);
    public void Overwrite(int index, T& value);
    public void RemoveLast();
    public void InsertExpensive(int index, T value);
    public void Clear();
    protected void GrowBuffer(int desiredCapacity);
    private void ReturnBuffer();
    public sealed virtual void Dispose();
    private static void ThrowIndexOutOfBoundsException();
    private static void ThrowObjectDisposedException();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.Components.RenderTree.ArrayBuilderExtensions : object {
    [ExtensionAttribute]
public static ArrayRange`1<T> ToRange(ArrayBuilder`1<T> builder);
    [ExtensionAttribute]
public static ArrayBuilderSegment`1<T> ToSegment(ArrayBuilder`1<T> builder, int fromIndexInclusive, int toIndexExclusive);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
[DefaultMemberAttribute("Item")]
public class Microsoft.AspNetCore.Components.RenderTree.ArrayBuilderSegment`1 : ValueType {
    private ArrayBuilder`1<T> _builder;
    private int _offset;
    private int _count;
    public T[] Array { get; }
    public int Offset { get; }
    public int Count { get; }
    public T Item { get; }
    internal ArrayBuilderSegment`1(ArrayBuilder`1<T> builder, int offset, int count);
    public T[] get_Array();
    public int get_Offset();
    public int get_Count();
    public T get_Item(int index);
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Microsoft.AspNetCore.Components.RenderTree.ArrayRange`1 : ValueType {
    public T[] Array;
    public int Count;
    public ArrayRange`1(T[] array, int count);
    public ArrayRange`1<T> Clone();
}
internal static class Microsoft.AspNetCore.Components.RenderTree.EventArgsTypeCache : object {
    private static ConcurrentDictionary`2<MethodInfo, Type> Cache;
    private static EventArgsTypeCache();
    [NullableContextAttribute("1")]
public static Type GetEventArgsType(MethodInfo methodInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Components.RenderTree.EventFieldInfo : object {
    [CompilerGeneratedAttribute]
private int <ComponentId>k__BackingField;
    [CompilerGeneratedAttribute]
private object <FieldValue>k__BackingField;
    public int ComponentId { get; public set; }
    public object FieldValue { get; public set; }
    [CompilerGeneratedAttribute]
public int get_ComponentId();
    [CompilerGeneratedAttribute]
public void set_ComponentId(int value);
    [CompilerGeneratedAttribute]
public object get_FieldValue();
    [CompilerGeneratedAttribute]
public void set_FieldValue(object value);
}
[IsReadOnlyAttribute]
public class Microsoft.AspNetCore.Components.RenderTree.RenderBatch : ValueType {
    [CompilerGeneratedAttribute]
private ArrayRange`1<RenderTreeDiff> <UpdatedComponents>k__BackingField;
    [CompilerGeneratedAttribute]
private ArrayRange`1<RenderTreeFrame> <ReferenceFrames>k__BackingField;
    [CompilerGeneratedAttribute]
private ArrayRange`1<int> <DisposedComponentIDs>k__BackingField;
    [CompilerGeneratedAttribute]
private ArrayRange`1<ulong> <DisposedEventHandlerIDs>k__BackingField;
    public ArrayRange`1<RenderTreeDiff> UpdatedComponents { get; }
    public ArrayRange`1<RenderTreeFrame> ReferenceFrames { get; }
    public ArrayRange`1<int> DisposedComponentIDs { get; }
    public ArrayRange`1<ulong> DisposedEventHandlerIDs { get; }
    internal RenderBatch(ArrayRange`1<RenderTreeDiff> updatedComponents, ArrayRange`1<RenderTreeFrame> referenceFrames, ArrayRange`1<int> disposedComponentIDs, ArrayRange`1<ulong> disposedEventHandlerIDs);
    [CompilerGeneratedAttribute]
public ArrayRange`1<RenderTreeDiff> get_UpdatedComponents();
    [CompilerGeneratedAttribute]
public ArrayRange`1<RenderTreeFrame> get_ReferenceFrames();
    [CompilerGeneratedAttribute]
public ArrayRange`1<int> get_DisposedComponentIDs();
    [CompilerGeneratedAttribute]
public ArrayRange`1<ulong> get_DisposedEventHandlerIDs();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.AspNetCore.Components.RenderTree.Renderer : object {
    private IServiceProvider _serviceProvider;
    private Dictionary`2<int, ComponentState> _componentStateById;
    private Dictionary`2<IComponent, ComponentState> _componentStateByComponent;
    private RenderBatchBuilder _batchBuilder;
    private Dictionary`2<ulong, EventCallback> _eventBindings;
    private Dictionary`2<ulong, ulong> _eventHandlerIdReplacements;
    private ILogger`1<Renderer> _logger;
    private ComponentFactory _componentFactory;
    private Dictionary`2<int, ParameterView> _rootComponentsLatestParameters;
    private Task _ongoingQuiescenceTask;
    private int _nextComponentId;
    private bool _isBatchInProgress;
    private ulong _lastEventHandlerId;
    private List`1<Task> _pendingTasks;
    private Task _disposeTask;
    private bool _rendererIsDisposed;
    private bool _hotReloadInitialized;
    [CompilerGeneratedAttribute]
private HotReloadManager <HotReloadManager>k__BackingField;
    [CompilerGeneratedAttribute]
private ElementReferenceContext <ElementReferenceContext>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRenderingOnMetadataUpdate>k__BackingField;
    internal HotReloadManager HotReloadManager { get; internal set; }
    public Dispatcher Dispatcher { get; }
    [NullableAttribute("2")]
protected internal ElementReferenceContext ElementReferenceContext { get; protected set; }
    internal bool IsRenderingOnMetadataUpdate { get; private set; }
    internal bool Disposed { get; }
    public Renderer(IServiceProvider serviceProvider, ILoggerFactory loggerFactory);
    public Renderer(IServiceProvider serviceProvider, ILoggerFactory loggerFactory, IComponentActivator componentActivator);
    public void add_UnhandledSynchronizationException(UnhandledExceptionEventHandler value);
    public void remove_UnhandledSynchronizationException(UnhandledExceptionEventHandler value);
    [CompilerGeneratedAttribute]
internal HotReloadManager get_HotReloadManager();
    [CompilerGeneratedAttribute]
internal void set_HotReloadManager(HotReloadManager value);
    private static IComponentActivator GetComponentActivatorOrDefault(IServiceProvider serviceProvider);
    public abstract virtual Dispatcher get_Dispatcher();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected internal ElementReferenceContext get_ElementReferenceContext();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected void set_ElementReferenceContext(ElementReferenceContext value);
    [CompilerGeneratedAttribute]
internal bool get_IsRenderingOnMetadataUpdate();
    [CompilerGeneratedAttribute]
private void set_IsRenderingOnMetadataUpdate(bool value);
    internal bool get_Disposed();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Components.RenderTree.Renderer/<RenderRootComponentsOnHotReload>d__39")]
private void RenderRootComponentsOnHotReload();
    protected IComponent InstantiateComponent(Type componentType);
    protected internal int AssignRootComponentId(IComponent component);
    [NullableContextAttribute("0")]
protected ArrayRange`1<RenderTreeFrame> GetCurrentRenderTreeFrames(int componentId);
    protected Task RenderRootComponentAsync(int componentId);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Components.RenderTree.Renderer/<RenderRootComponentAsync>d__44")]
protected internal Task RenderRootComponentAsync(int componentId, ParameterView initialParameters);
    protected internal void RemoveRootComponent(int componentId);
    internal Type GetRootComponentType(int componentId);
    protected abstract virtual void HandleException(Exception exception);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Components.RenderTree.Renderer/<WaitForQuiescence>d__48")]
private Task WaitForQuiescence();
    private ComponentState AttachAndInitComponent(IComponent component, int parentComponentId);
    protected abstract virtual Task UpdateDisplayAsync(RenderBatch& modreq(System.Runtime.InteropServices.InAttribute) renderBatch);
    public virtual Task DispatchEventAsync(ulong eventHandlerId, EventFieldInfo fieldInfo, EventArgs eventArgs);
    public Type GetEventArgsType(ulong eventHandlerId);
    internal void InstantiateChildComponentOnFrame(RenderTreeFrame& frame, int parentComponentId);
    internal void AddToPendingTasks(Task task, ComponentState owningComponentState);
    internal void AssignEventHandlerId(RenderTreeFrame& frame);
    internal void AddToRenderQueue(int componentId, RenderFragment renderFragment);
    internal void TrackReplacedEventHandlerId(ulong oldEventHandlerId, ulong newEventHandlerId);
    private EventCallback GetRequiredEventCallback(ulong eventHandlerId);
    private ulong FindLatestEventHandlerIdInChain(ulong eventHandlerId);
    private ComponentState GetRequiredComponentState(int componentId);
    private ComponentState GetOptionalComponentState(int componentId);
    private ComponentState GetRequiredRootComponentState(int componentId);
    protected virtual void ProcessPendingRender();
    private void ProcessRenderQueue();
    private Task InvokeRenderCompletedCalls(ArrayRange`1<RenderTreeDiff> updatedComponents, Task updateDisplayTask);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Components.RenderTree.Renderer/<InvokeRenderCompletedCallsAfterUpdateDisplayTask>d__66")]
private Task InvokeRenderCompletedCallsAfterUpdateDisplayTask(Task updateDisplayTask, Int32[] updatedComponents);
    private void NotifyRenderCompleted(ComponentState state, List`1& batch);
    private void RenderInExistingBatch(RenderQueueEntry renderQueueEntry);
    private void ProcessDisposalQueueInExistingBatch();
    private void RemoveEventHandlerIds(ArrayRange`1<ulong> eventHandlerIds, Task afterTaskIgnoreErrors);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Components.RenderTree.Renderer/<GetErrorHandledTask>d__71")]
private Task GetErrorHandledTask(Task taskToHandle, ComponentState owningComponentState);
    private void UpdateRenderTreeToMatchClientState(ulong eventHandlerId, EventFieldInfo fieldInfo);
    private void HandleExceptionViaErrorBoundary(Exception error, ComponentState errorSourceOrNull);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Components.RenderTree.Renderer/<DisposeAsync>d__76")]
public sealed virtual ValueTask DisposeAsync();
    [CompilerGeneratedAttribute]
private void <RenderRootComponentsOnHotReload>b__39_0();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Components.RenderTree.Renderer/<<WaitForQuiescence>g__ProcessAsynchronousWork|48_0>d")]
[CompilerGeneratedAttribute]
private Task <WaitForQuiescence>g__ProcessAsynchronousWork|48_0();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Components.RenderTree.Renderer/<<ProcessDisposalQueueInExistingBatch>g__GetHandledAsynchronousDisposalErrorsTask|69_0>d")]
[CompilerGeneratedAttribute]
private Task <ProcessDisposalQueueInExistingBatch>g__GetHandledAsynchronousDisposalErrorsTask|69_0(Task result);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Components.RenderTree.Renderer/<<RemoveEventHandlerIds>g__ContinueAfterTask|70_0>d")]
[CompilerGeneratedAttribute]
private Task <RemoveEventHandlerIds>g__ContinueAfterTask|70_0(ArrayRange`1<ulong> eventHandlerIds, Task afterTaskIgnoreErrors);
}
[IsReadOnlyAttribute]
public class Microsoft.AspNetCore.Components.RenderTree.RenderTreeDiff : ValueType {
    public int ComponentId;
    public ArrayBuilderSegment`1<RenderTreeEdit> Edits;
    internal RenderTreeDiff(int componentId, ArrayBuilderSegment`1<RenderTreeEdit> entries);
}
internal static class Microsoft.AspNetCore.Components.RenderTree.RenderTreeDiffBuilder : object {
    public static int SystemAddedAttributeSequenceNumber;
    public static RenderTreeDiff ComputeDiff(Renderer renderer, RenderBatchBuilder batchBuilder, int componentId, ArrayRange`1<RenderTreeFrame> oldTree, ArrayRange`1<RenderTreeFrame> newTree);
    public static void DisposeFrames(RenderBatchBuilder batchBuilder, ArrayRange`1<RenderTreeFrame> frames);
    private static void AppendDiffEntriesForRange(DiffContext& diffContext, int oldStartIndex, int oldEndIndexExcl, int newStartIndex, int newEndIndexExcl);
    private static Dictionary`2<object, KeyedItemInfo> BuildKeyToInfoLookup(DiffContext diffContext, int oldStartIndex, int oldEndIndexExcl, int newStartIndex, int newEndIndexExcl);
    private static void ThrowExceptionForDuplicateKey(object key, RenderTreeFrame& frame);
    private static object KeyValue(RenderTreeFrame& frame);
    private static void AppendAttributeDiffEntriesForRange(DiffContext& diffContext, int oldStartIndex, int oldEndIndexExcl, int newStartIndex, int newEndIndexExcl);
    private static void AppendAttributeDiffEntriesForRangeSlow(DiffContext& diffContext, int oldStartIndex, int oldEndIndexExcl, int newStartIndex, int newEndIndexExcl);
    private static void UpdateRetainedChildComponent(DiffContext& diffContext, int oldComponentIndex, int newComponentIndex);
    private static int NextSiblingIndex(RenderTreeFrame& frame, int frameIndex);
    private static void AppendDiffEntriesForFramesWithSameSequence(DiffContext& diffContext, int oldFrameIndex, int newFrameIndex);
    private static void AppendDiffEntriesForAttributeFrame(DiffContext& diffContext, int oldFrameIndex, int newFrameIndex);
    private static void InsertNewFrame(DiffContext& diffContext, int newFrameIndex);
    private static void RemoveOldFrame(DiffContext& diffContext, int oldFrameIndex);
    private static int GetAttributesEndIndexExclusive(RenderTreeFrame[] tree, int rootIndex);
    private static void AppendStepOut(DiffContext& diffContext);
    private static void InitializeNewSubtree(DiffContext& diffContext, int frameIndex);
    private static void InitializeNewComponentFrame(DiffContext& diffContext, int frameIndex);
    private static void InitializeNewAttributeFrame(DiffContext& diffContext, RenderTreeFrame& newFrame);
    private static void InitializeNewElementReferenceCaptureFrame(DiffContext& diffContext, RenderTreeFrame& newFrame);
    private static void InitializeNewComponentReferenceCaptureFrame(DiffContext& diffContext, RenderTreeFrame& newFrame);
    private static void DisposeFramesInRange(RenderBatchBuilder batchBuilder, RenderTreeFrame[] frames, int startIndex, int endIndexExcl);
}
[IsReadOnlyAttribute]
public class Microsoft.AspNetCore.Components.RenderTree.RenderTreeEdit : ValueType {
    public RenderTreeEditType Type;
    public int SiblingIndex;
    public int ReferenceFrameIndex;
    public int MoveToSiblingIndex;
    [NullableAttribute("2")]
public string RemovedAttributeName;
    private RenderTreeEdit(RenderTreeEditType type);
    private RenderTreeEdit(RenderTreeEditType type, int siblingIndex);
    private RenderTreeEdit(RenderTreeEditType type, int siblingIndex, int referenceFrameOrMoveToSiblingIndex);
    private RenderTreeEdit(RenderTreeEditType type, int siblingIndex, string removedAttributeName);
    internal static RenderTreeEdit RemoveFrame(int siblingIndex);
    internal static RenderTreeEdit PrependFrame(int siblingIndex, int referenceFrameIndex);
    internal static RenderTreeEdit UpdateText(int siblingIndex, int referenceFrameIndex);
    internal static RenderTreeEdit UpdateMarkup(int siblingIndex, int referenceFrameIndex);
    internal static RenderTreeEdit SetAttribute(int siblingIndex, int referenceFrameIndex);
    [NullableContextAttribute("1")]
internal static RenderTreeEdit RemoveAttribute(int siblingIndex, string name);
    internal static RenderTreeEdit StepIn(int siblingIndex);
    internal static RenderTreeEdit StepOut();
    internal static RenderTreeEdit PermutationListEntry(int fromSiblingIndex, int toSiblingIndex);
    internal static RenderTreeEdit PermutationListEnd();
}
public enum Microsoft.AspNetCore.Components.RenderTree.RenderTreeEditType : Enum {
    public int value__;
    public static RenderTreeEditType PrependFrame;
    public static RenderTreeEditType RemoveFrame;
    public static RenderTreeEditType SetAttribute;
    public static RenderTreeEditType RemoveAttribute;
    public static RenderTreeEditType UpdateText;
    public static RenderTreeEditType StepIn;
    public static RenderTreeEditType StepOut;
    public static RenderTreeEditType UpdateMarkup;
    public static RenderTreeEditType PermutationListEntry;
    public static RenderTreeEditType PermutationListEnd;
}
public class Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame : ValueType {
    internal int SequenceField;
    internal RenderTreeFrameType FrameTypeField;
    internal int ElementSubtreeLengthField;
    internal string ElementNameField;
    internal object ElementKeyField;
    internal string TextContentField;
    internal ulong AttributeEventHandlerIdField;
    internal string AttributeNameField;
    internal object AttributeValueField;
    internal string AttributeEventUpdatesAttributeNameField;
    internal int ComponentSubtreeLengthField;
    internal int ComponentIdField;
    [DynamicallyAccessedMembersAttribute("-1")]
internal Type ComponentTypeField;
    internal ComponentState ComponentStateField;
    internal object ComponentKeyField;
    internal int RegionSubtreeLengthField;
    internal string ElementReferenceCaptureIdField;
    internal Action`1<ElementReference> ElementReferenceCaptureActionField;
    internal int ComponentReferenceCaptureParentFrameIndexField;
    internal Action`1<object> ComponentReferenceCaptureActionField;
    internal string MarkupContentField;
    public int Sequence { get; }
    public RenderTreeFrameType FrameType { get; }
    public int ElementSubtreeLength { get; }
    public string ElementName { get; }
    public object ElementKey { get; }
    public string TextContent { get; }
    public ulong AttributeEventHandlerId { get; }
    public string AttributeName { get; }
    public object AttributeValue { get; }
    public string AttributeEventUpdatesAttributeName { get; }
    public int ComponentSubtreeLength { get; }
    public int ComponentId { get; }
    public Type ComponentType { get; }
    internal ComponentState ComponentState { get; }
    public object ComponentKey { get; }
    public IComponent Component { get; }
    public int RegionSubtreeLength { get; }
    public string ElementReferenceCaptureId { get; }
    public Action`1<ElementReference> ElementReferenceCaptureAction { get; }
    public int ComponentReferenceCaptureParentFrameIndex { get; }
    public Action`1<object> ComponentReferenceCaptureAction { get; }
    public string MarkupContent { get; }
    private RenderTreeFrame(int sequence, int elementSubtreeLength, string elementName, object elementKey);
    private RenderTreeFrame(int sequence, int componentSubtreeLength, Type componentType, ComponentState componentState, object componentKey);
    private RenderTreeFrame(int sequence, int regionSubtreeLength);
    private RenderTreeFrame(int sequence, bool isMarkup, string textOrMarkup);
    private RenderTreeFrame(int sequence, string attributeName, object attributeValue, ulong attributeEventHandlerId, string attributeEventUpdatesAttributeName);
    private RenderTreeFrame(int sequence, Action`1<ElementReference> elementReferenceCaptureAction, string elementReferenceCaptureId);
    private RenderTreeFrame(int sequence, Action`1<object> componentReferenceCaptureAction, int parentFrameIndex);
    public int get_Sequence();
    public RenderTreeFrameType get_FrameType();
    public int get_ElementSubtreeLength();
    public string get_ElementName();
    public object get_ElementKey();
    public string get_TextContent();
    public ulong get_AttributeEventHandlerId();
    public string get_AttributeName();
    public object get_AttributeValue();
    public string get_AttributeEventUpdatesAttributeName();
    public int get_ComponentSubtreeLength();
    public int get_ComponentId();
    public Type get_ComponentType();
    internal ComponentState get_ComponentState();
    public object get_ComponentKey();
    public IComponent get_Component();
    public int get_RegionSubtreeLength();
    public string get_ElementReferenceCaptureId();
    public Action`1<ElementReference> get_ElementReferenceCaptureAction();
    public int get_ComponentReferenceCaptureParentFrameIndex();
    public Action`1<object> get_ComponentReferenceCaptureAction();
    public string get_MarkupContent();
    internal static RenderTreeFrame Element(int sequence, string elementName);
    internal static RenderTreeFrame Text(int sequence, string textContent);
    internal static RenderTreeFrame Markup(int sequence, string markupContent);
    internal static RenderTreeFrame Attribute(int sequence, string name, object value);
    internal static RenderTreeFrame ChildComponent(int sequence, Type componentType);
    internal static RenderTreeFrame PlaceholderChildComponentWithSubtreeLength(int subtreeLength);
    internal static RenderTreeFrame Region(int sequence);
    internal static RenderTreeFrame ElementReferenceCapture(int sequence, Action`1<ElementReference> elementReferenceCaptureAction);
    internal static RenderTreeFrame ComponentReferenceCapture(int sequence, Action`1<object> componentReferenceCaptureAction, int parentFrameIndex);
    internal RenderTreeFrame WithElementSubtreeLength(int elementSubtreeLength);
    internal RenderTreeFrame WithComponentSubtreeLength(int componentSubtreeLength);
    internal RenderTreeFrame WithAttributeSequence(int sequence);
    internal RenderTreeFrame WithComponent(ComponentState componentState);
    internal RenderTreeFrame WithAttributeEventHandlerId(ulong eventHandlerId);
    internal RenderTreeFrame WithAttributeValue(object attributeValue);
    internal RenderTreeFrame WithAttributeEventUpdatesAttributeName(string attributeUpdatesAttributeName);
    internal RenderTreeFrame WithRegionSubtreeLength(int regionSubtreeLength);
    internal RenderTreeFrame WithElementReferenceCaptureId(string elementReferenceCaptureId);
    internal RenderTreeFrame WithElementKey(object elementKey);
    internal RenderTreeFrame WithComponentKey(object componentKey);
    public virtual string ToString();
    private static string EscapeNewlines(string text);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameArrayBuilder : ArrayBuilder`1<RenderTreeFrame> {
    public void AppendElement(int sequence, string elementName);
    public void AppendText(int sequence, string textContent);
    public void AppendMarkup(int sequence, string markupContent);
    public void AppendAttribute(int sequence, string attributeName, object attributeValue);
    public void AppendComponent(int sequence, Type componentType);
    public void AppendElementReferenceCapture(int sequence, Action`1<ElementReference> elementReferenceCaptureAction);
    public void AppendComponentReferenceCapture(int sequence, Action`1<object> componentReferenceCaptureAction, int parentFrameIndexValue);
    public void AppendRegion(int sequence);
}
public enum Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrameType : Enum {
    public short value__;
    public static RenderTreeFrameType None;
    public static RenderTreeFrameType Element;
    public static RenderTreeFrameType Text;
    public static RenderTreeFrameType Attribute;
    public static RenderTreeFrameType Component;
    public static RenderTreeFrameType Region;
    public static RenderTreeFrameType ElementReferenceCapture;
    public static RenderTreeFrameType ComponentReferenceCapture;
    public static RenderTreeFrameType Markup;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Components.RenderTree.StackObjectPool`1 : object {
    private int _maxPreservedItems;
    private Func`1<T> _instanceFactory;
    private T[] _contents;
    private int _numSuppliedItems;
    private int _numTrackedItems;
    public StackObjectPool`1(int maxPreservedItems, Func`1<T> instanceFactory);
    public T Get();
    public void Return(T instance);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class Microsoft.AspNetCore.Components.RouteAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Template>k__BackingField;
    public string Template { get; }
    public RouteAttribute(string template);
    [CompilerGeneratedAttribute]
public string get_Template();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Components.RouteData : object {
    [CompilerGeneratedAttribute]
private Type <PageType>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <RouteValues>k__BackingField;
    [DynamicallyAccessedMembersAttribute("-1")]
public Type PageType { get; }
    public IReadOnlyDictionary`2<string, object> RouteValues { get; }
    public RouteData(Type pageType, IReadOnlyDictionary`2<string, object> routeValues);
    [CompilerGeneratedAttribute]
public Type get_PageType();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, object> get_RouteValues();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.AspNetCore.Components.RouteTableFactory : object {
    private static ConcurrentDictionary`2<RouteKey, RouteTable> Cache;
    public static IComparer`1<RouteEntry> RoutePrecedence;
    private static RouteTableFactory();
    public static RouteTable Create(RouteKey routeKey);
    public static void ClearCaches();
    [UnconditionalSuppressMessageAttribute("Trimming", "IL2026")]
private static List`1<Type> GetRouteableComponents(RouteKey routeKey);
    internal static RouteTable Create(List`1<Type> componentTypes);
    [UnconditionalSuppressMessageAttribute("Trimming", "IL2067")]
internal static RouteTable Create(Dictionary`2<Type, String[]> templatesByHandler);
    private static HashSet`1<string> GetParameterNames(RouteTemplate routeTemplate);
    private static List`1<string> GetUnusedParameterNames(HashSet`1<string> allRouteParameterNames, HashSet`1<string> routeParameterNames);
    internal static int RouteComparison(RouteEntry x, RouteEntry y);
    private static int GetRank(TemplateSegment xSegment);
    [CompilerGeneratedAttribute]
internal static void <GetRouteableComponents>g__GetRouteableComponents|4_0(List`1<Type> routeableComponents, Assembly assembly);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Components.RouteView : object {
    private RenderFragment _renderDelegate;
    private RenderFragment _renderPageWithParametersDelegate;
    private RenderHandle _renderHandle;
    [CompilerGeneratedAttribute]
private NavigationManager <NavigationManager>k__BackingField;
    [CompilerGeneratedAttribute]
private RouteData <RouteData>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DefaultLayout>k__BackingField;
    [InjectAttribute]
private NavigationManager NavigationManager { get; private set; }
    [ParameterAttribute]
[EditorRequiredAttribute]
public RouteData RouteData { get; public set; }
    [ParameterAttribute]
public Type DefaultLayout { get; public set; }
    [CompilerGeneratedAttribute]
private NavigationManager get_NavigationManager();
    [CompilerGeneratedAttribute]
private void set_NavigationManager(NavigationManager value);
    [CompilerGeneratedAttribute]
public RouteData get_RouteData();
    [CompilerGeneratedAttribute]
public void set_RouteData(RouteData value);
    [CompilerGeneratedAttribute]
public Type get_DefaultLayout();
    [CompilerGeneratedAttribute]
public void set_DefaultLayout(Type value);
    public sealed virtual void Attach(RenderHandle renderHandle);
    public sealed virtual Task SetParametersAsync(ParameterView parameters);
    [UnconditionalSuppressMessageAttribute("Trimming", "IL2111")]
[UnconditionalSuppressMessageAttribute("Trimming", "IL2118")]
protected virtual void Render(RenderTreeBuilder builder);
    private void RenderPageWithParameters(RenderTreeBuilder builder);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Components.Routing.IHostEnvironmentNavigationManager {
    public abstract virtual void Initialize(string baseUri, string uri);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Components.Routing.INavigationInterception {
    public abstract virtual Task EnableNavigationInterceptionAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNavigationIntercepted>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HistoryEntryState>k__BackingField;
    public string Location { get; }
    public bool IsNavigationIntercepted { get; }
    [NullableAttribute("2")]
public string HistoryEntryState { get; internal set; }
    public LocationChangedEventArgs(string location, bool isNavigationIntercepted);
    [CompilerGeneratedAttribute]
public string get_Location();
    [CompilerGeneratedAttribute]
public bool get_IsNavigationIntercepted();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_HistoryEntryState();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_HistoryEntryState(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Components.Routing.NavigationContext : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    public string Path { get; }
    public CancellationToken CancellationToken { get; }
    internal NavigationContext(string path, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public CancellationToken get_CancellationToken();
}
internal class Microsoft.AspNetCore.Components.Routing.QueryParameterNameComparer : object {
    [NullableAttribute("1")]
public static QueryParameterNameComparer Instance;
    private static QueryParameterNameComparer();
    public sealed virtual int Compare(ReadOnlyMemory`1<char> x, ReadOnlyMemory`1<char> y);
    public sealed virtual bool Equals(ReadOnlyMemory`1<char> x, ReadOnlyMemory`1<char> y);
    public sealed virtual int GetHashCode(ReadOnlyMemory`1<char> obj);
}
internal class Microsoft.AspNetCore.Components.Routing.QueryParameterValueSupplier : object {
    private static ConcurrentDictionary`2<Type, QueryParameterValueSupplier> _cacheByType;
    private ReadOnlyMemory`1[] _queryParameterNames;
    private QueryParameterDestination[] _destinations;
    private QueryParameterValueSupplier(QueryParameterMapping[] sortedMappings);
    private static QueryParameterValueSupplier();
    public static void ClearCache();
    [NullableContextAttribute("1")]
public static QueryParameterValueSupplier ForType(Type componentType);
    public void RenderParametersFromQueryString(RenderTreeBuilder builder, ReadOnlyMemory`1<char> queryString);
    private static QueryParameterMapping[] GetSortedMappings(Type componentType);
}
internal static class Microsoft.AspNetCore.Components.Routing.RouteConstraint : object {
    [NullableContextAttribute("1")]
public static UrlValueConstraint Parse(string template, string segment, string constraint);
    private static Type GetTargetType(string constraint);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Components.Routing.RouteContext : object {
    [CompilerGeneratedAttribute]
private String[] <Segments>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Handler>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <Parameters>k__BackingField;
    public String[] Segments { get; }
    [NullableAttribute("2")]
[DynamicallyAccessedMembersAttribute("-1")]
public Type Handler { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<string, object> Parameters { get; public set; }
    public RouteContext(string path);
    [CompilerGeneratedAttribute]
public String[] get_Segments();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Type get_Handler();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Handler(Type value);
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, object> get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(IReadOnlyDictionary`2<string, object> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("Handler = {Handler}, Template = {Template}")]
internal class Microsoft.AspNetCore.Components.Routing.RouteEntry : object {
    [CompilerGeneratedAttribute]
private RouteTemplate <Template>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <UnusedRouteParameterNames>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Handler>k__BackingField;
    public RouteTemplate Template { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<string> UnusedRouteParameterNames { get; }
    [DynamicallyAccessedMembersAttribute("-1")]
public Type Handler { get; }
    public RouteEntry(RouteTemplate template, Type handler, List`1<string> unusedRouteParameterNames);
    [CompilerGeneratedAttribute]
public RouteTemplate get_Template();
    [CompilerGeneratedAttribute]
public List`1<string> get_UnusedRouteParameterNames();
    [CompilerGeneratedAttribute]
public Type get_Handler();
    internal void Match(RouteContext context);
    private static void AddDefaultValues(Dictionary`2<string, object> parameters, int templateIndex, TemplateSegment[] segments);
    private static bool RemainingSegmentsAreOptional(int index, TemplateSegment[] segments);
}
[IsReadOnlyAttribute]
internal class Microsoft.AspNetCore.Components.Routing.RouteKey : ValueType {
    [NullableAttribute("2")]
public Assembly AppAssembly;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public HashSet`1<Assembly> AdditionalAssemblies;
    [NullableContextAttribute("1")]
public RouteKey(Assembly appAssembly, IEnumerable`1<Assembly> additionalAssemblies);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RouteKey other);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Components.Routing.Router : object {
    private static IReadOnlyDictionary`2<string, object> _emptyParametersDictionary;
    private RenderHandle _renderHandle;
    private string _baseUri;
    private string _locationAbsolute;
    private bool _navigationInterceptionEnabled;
    private ILogger`1<Router> _logger;
    private CancellationTokenSource _onNavigateCts;
    private Task _previousOnNavigateTask;
    private RouteKey _routeTableLastBuiltForRouteKey;
    private bool _onNavigateCalled;
    [CompilerGeneratedAttribute]
private NavigationManager <NavigationManager>k__BackingField;
    [CompilerGeneratedAttribute]
private INavigationInterception <NavigationInterception>k__BackingField;
    [CompilerGeneratedAttribute]
private ILoggerFactory <LoggerFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private Assembly <AppAssembly>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Assembly> <AdditionalAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <NotFound>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment`1<RouteData> <Found>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <Navigating>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<NavigationContext> <OnNavigateAsync>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreferExactMatches>k__BackingField;
    [CompilerGeneratedAttribute]
private RouteTable <Routes>k__BackingField;
    [InjectAttribute]
private NavigationManager NavigationManager { get; private set; }
    [InjectAttribute]
private INavigationInterception NavigationInterception { get; private set; }
    [InjectAttribute]
private ILoggerFactory LoggerFactory { get; private set; }
    [ParameterAttribute]
[EditorRequiredAttribute]
public Assembly AppAssembly { get; public set; }
    [ParameterAttribute]
public IEnumerable`1<Assembly> AdditionalAssemblies { get; public set; }
    [ParameterAttribute]
[EditorRequiredAttribute]
public RenderFragment NotFound { get; public set; }
    [ParameterAttribute]
[EditorRequiredAttribute]
public RenderFragment`1<RouteData> Found { get; public set; }
    [NullableAttribute("2")]
[ParameterAttribute]
public RenderFragment Navigating { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public EventCallback`1<NavigationContext> OnNavigateAsync { get; public set; }
    [ParameterAttribute]
public bool PreferExactMatches { get; public set; }
    private RouteTable Routes { get; private set; }
    private static Router();
    [CompilerGeneratedAttribute]
private NavigationManager get_NavigationManager();
    [CompilerGeneratedAttribute]
private void set_NavigationManager(NavigationManager value);
    [CompilerGeneratedAttribute]
private INavigationInterception get_NavigationInterception();
    [CompilerGeneratedAttribute]
private void set_NavigationInterception(INavigationInterception value);
    [CompilerGeneratedAttribute]
private ILoggerFactory get_LoggerFactory();
    [CompilerGeneratedAttribute]
private void set_LoggerFactory(ILoggerFactory value);
    [CompilerGeneratedAttribute]
public Assembly get_AppAssembly();
    [CompilerGeneratedAttribute]
public void set_AppAssembly(Assembly value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Assembly> get_AdditionalAssemblies();
    [CompilerGeneratedAttribute]
public void set_AdditionalAssemblies(IEnumerable`1<Assembly> value);
    [CompilerGeneratedAttribute]
public RenderFragment get_NotFound();
    [CompilerGeneratedAttribute]
public void set_NotFound(RenderFragment value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<RouteData> get_Found();
    [CompilerGeneratedAttribute]
public void set_Found(RenderFragment`1<RouteData> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public RenderFragment get_Navigating();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Navigating(RenderFragment value);
    [CompilerGeneratedAttribute]
public EventCallback`1<NavigationContext> get_OnNavigateAsync();
    [CompilerGeneratedAttribute]
public void set_OnNavigateAsync(EventCallback`1<NavigationContext> value);
    [CompilerGeneratedAttribute]
public bool get_PreferExactMatches();
    [CompilerGeneratedAttribute]
public void set_PreferExactMatches(bool value);
    [CompilerGeneratedAttribute]
private RouteTable get_Routes();
    [CompilerGeneratedAttribute]
private void set_Routes(RouteTable value);
    public sealed virtual void Attach(RenderHandle renderHandle);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Components.Routing.Router/<SetParametersAsync>d__55")]
public sealed virtual Task SetParametersAsync(ParameterView parameters);
    public sealed virtual void Dispose();
    private static string TrimQueryOrHash(string str);
    private void RefreshRouteTable();
    private void ClearRouteCaches();
    internal virtual void Refresh(bool isNavigationIntercepted);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Components.Routing.Router/<RunOnNavigateAsync>d__61")]
internal ValueTask RunOnNavigateAsync(string path, bool isNavigationIntercepted);
    private void OnLocationChanged(object sender, LocationChangedEventArgs args);
    private sealed virtual override Task Microsoft.AspNetCore.Components.IHandleAfterRender.OnAfterRenderAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Components.Routing.RouteTable : object {
    [CompilerGeneratedAttribute]
private RouteEntry[] <Routes>k__BackingField;
    public RouteEntry[] Routes { get; }
    public RouteTable(RouteEntry[] routes);
    [CompilerGeneratedAttribute]
public RouteEntry[] get_Routes();
    public void Route(RouteContext routeContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{TemplateText}")]
internal class Microsoft.AspNetCore.Components.Routing.RouteTemplate : object {
    [CompilerGeneratedAttribute]
private string <TemplateText>k__BackingField;
    [CompilerGeneratedAttribute]
private TemplateSegment[] <Segments>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OptionalSegmentsCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ContainsCatchAllSegment>k__BackingField;
    public string TemplateText { get; }
    public TemplateSegment[] Segments { get; }
    public int OptionalSegmentsCount { get; }
    public bool ContainsCatchAllSegment { get; }
    public RouteTemplate(string templateText, TemplateSegment[] segments);
    [CompilerGeneratedAttribute]
public string get_TemplateText();
    [CompilerGeneratedAttribute]
public TemplateSegment[] get_Segments();
    [CompilerGeneratedAttribute]
public int get_OptionalSegmentsCount();
    [CompilerGeneratedAttribute]
public bool get_ContainsCatchAllSegment();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.AspNetCore.Components.Routing.StringSegmentAccumulator : ValueType {
    private int count;
    private ReadOnlyMemory`1<char> _single;
    private List`1<ReadOnlyMemory`1<char>> _multiple;
    public ReadOnlyMemory`1<char> Item { get; }
    public int Count { get; }
    public ReadOnlyMemory`1<char> get_Item(int index);
    public int get_Count();
    public void SetSingle(ReadOnlyMemory`1<char> value);
    public void Add(ReadOnlyMemory`1<char> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Components.Routing.TemplateParser : object {
    public static Char[] InvalidParameterNameCharacters;
    private static TemplateParser();
    internal static RouteTemplate ParseTemplate(string template);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Components.Routing.TemplateSegment : object {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsParameter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOptional>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCatchAll>k__BackingField;
    [CompilerGeneratedAttribute]
private UrlValueConstraint[] <Constraints>k__BackingField;
    public string Value { get; }
    public bool IsParameter { get; }
    public bool IsOptional { get; }
    public bool IsCatchAll { get; }
    public UrlValueConstraint[] Constraints { get; }
    public TemplateSegment(string template, string segment, bool isParameter);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public bool get_IsParameter();
    [CompilerGeneratedAttribute]
public bool get_IsOptional();
    [CompilerGeneratedAttribute]
public bool get_IsCatchAll();
    [CompilerGeneratedAttribute]
public UrlValueConstraint[] get_Constraints();
    public bool Match(string pathSegment, Object& matchedParameterValue);
    public virtual string ToString();
}
internal abstract class Microsoft.AspNetCore.Components.Routing.UrlValueConstraint : object {
    private static ConcurrentDictionary`2<Type, UrlValueConstraint> _cachedInstances;
    private static UrlValueConstraint();
    [NullableContextAttribute("1")]
public static bool TryGetByTargetType(Type targetType, UrlValueConstraint& result);
    private static bool TryParse(ReadOnlySpan`1<char> str, String& result);
    private static bool TryParse(ReadOnlySpan`1<char> str, DateTime& result);
    private static bool TryParse(ReadOnlySpan`1<char> str, DateOnly& result);
    private static bool TryParse(ReadOnlySpan`1<char> str, TimeOnly& result);
    private static bool TryParse(ReadOnlySpan`1<char> str, Decimal& result);
    private static bool TryParse(ReadOnlySpan`1<char> str, Double& result);
    private static bool TryParse(ReadOnlySpan`1<char> str, Single& result);
    private static bool TryParse(ReadOnlySpan`1<char> str, Int32& result);
    private static bool TryParse(ReadOnlySpan`1<char> str, Int64& result);
    private static UrlValueConstraint Create(Type targetType);
    public abstract virtual bool TryParse(ReadOnlySpan`1<char> value, Object& result);
    public abstract virtual object Parse(ReadOnlySpan`1<char> value, string destinationNameForMessage);
    [NullableContextAttribute("1")]
public abstract virtual Array ParseMultiple(StringSegmentAccumulator values, string destinationNameForMessage);
}
[NullableContextAttribute("2")]
internal interface Microsoft.AspNetCore.Components.Sections.ISectionContentProvider {
    public RenderFragment Content { get; }
    public abstract virtual RenderFragment get_Content();
}
[NullableContextAttribute("2")]
internal interface Microsoft.AspNetCore.Components.Sections.ISectionContentSubscriber {
    public abstract virtual void ContentChanged(RenderFragment content);
}
internal class Microsoft.AspNetCore.Components.Sections.SectionContent : object {
    private string _registeredName;
    private SectionRegistry _registry;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDefaultContent>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [NullableAttribute("1")]
[ParameterAttribute]
public string Name { get; public set; }
    [ParameterAttribute]
public bool IsDefaultContent { get; public set; }
    [NullableAttribute("2")]
[ParameterAttribute]
public RenderFragment ChildContent { get; public set; }
    [NullableAttribute("2")]
private RenderFragment Microsoft.AspNetCore.Components.Sections.ISectionContentProvider.Content { get; }
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Name();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_IsDefaultContent();
    [CompilerGeneratedAttribute]
public void set_IsDefaultContent(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    private sealed virtual override RenderFragment Microsoft.AspNetCore.Components.Sections.ISectionContentProvider.get_Content();
    private sealed virtual override void Microsoft.AspNetCore.Components.IComponent.Attach(RenderHandle renderHandle);
    private sealed virtual override Task Microsoft.AspNetCore.Components.IComponent.SetParametersAsync(ParameterView parameters);
    public sealed virtual void Dispose();
}
internal class Microsoft.AspNetCore.Components.Sections.SectionOutlet : object {
    private static RenderFragment _emptyRenderFragment;
    private string _subscribedName;
    private RenderHandle _renderHandle;
    private SectionRegistry _registry;
    private RenderFragment _content;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [NullableAttribute("1")]
[ParameterAttribute]
public string Name { get; public set; }
    private static SectionOutlet();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Name();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Name(string value);
    private sealed virtual override void Microsoft.AspNetCore.Components.IComponent.Attach(RenderHandle renderHandle);
    private sealed virtual override Task Microsoft.AspNetCore.Components.IComponent.SetParametersAsync(ParameterView parameters);
    private sealed virtual override void Microsoft.AspNetCore.Components.Sections.ISectionContentSubscriber.ContentChanged(RenderFragment content);
    private void RenderContent();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.Components.Sections.SectionRegistry : object {
    private Dictionary`2<string, ISectionContentSubscriber> _subscribersByName;
    private Dictionary`2<string, List`1<ISectionContentProvider>> _providersByName;
    public void AddProvider(string name, ISectionContentProvider provider, bool isDefaultProvider);
    public void RemoveProvider(string name, ISectionContentProvider provider);
    public void Subscribe(string name, ISectionContentSubscriber subscriber);
    public void Unsubscribe(string name);
    public void NotifyContentChanged(string name, ISectionContentProvider provider);
    private static RenderFragment GetCurrentProviderContentOrDefault(List`1<ISectionContentProvider> providers);
    private RenderFragment GetCurrentProviderContentOrDefault(string name);
    private void NotifyContentChangedForSubscriber(string name, RenderFragment content);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("128")]
public class Microsoft.AspNetCore.Components.SupplyParameterFromQueryAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
internal static class Microsoft.AspNetCore.Internal.LinkerFlags : object {
    public static DynamicallyAccessedMemberTypes JsonSerialized;
    public static DynamicallyAccessedMemberTypes Component;
    public static DynamicallyAccessedMemberTypes JSInvokable;
}
[IsReadOnlyAttribute]
internal class Microsoft.AspNetCore.Internal.QueryStringEnumerable : ValueType {
    private ReadOnlyMemory`1<char> _queryString;
    [NullableContextAttribute("2")]
public QueryStringEnumerable(string queryString);
    public QueryStringEnumerable(ReadOnlyMemory`1<char> queryString);
    public Enumerator GetEnumerator();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
