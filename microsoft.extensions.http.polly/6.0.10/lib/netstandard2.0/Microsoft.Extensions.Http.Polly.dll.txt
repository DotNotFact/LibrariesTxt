[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.PollyHttpClientBuilderExtensions : object {
    [ExtensionAttribute]
public static IHttpClientBuilder AddPolicyHandler(IHttpClientBuilder builder, IAsyncPolicy`1<HttpResponseMessage> policy);
    [ExtensionAttribute]
public static IHttpClientBuilder AddPolicyHandler(IHttpClientBuilder builder, Func`2<HttpRequestMessage, IAsyncPolicy`1<HttpResponseMessage>> policySelector);
    [ExtensionAttribute]
public static IHttpClientBuilder AddPolicyHandler(IHttpClientBuilder builder, Func`3<IServiceProvider, HttpRequestMessage, IAsyncPolicy`1<HttpResponseMessage>> policySelector);
    [ExtensionAttribute]
public static IHttpClientBuilder AddPolicyHandlerFromRegistry(IHttpClientBuilder builder, string policyKey);
    [ExtensionAttribute]
public static IHttpClientBuilder AddPolicyHandlerFromRegistry(IHttpClientBuilder builder, Func`3<IReadOnlyPolicyRegistry`1<string>, HttpRequestMessage, IAsyncPolicy`1<HttpResponseMessage>> policySelector);
    [ExtensionAttribute]
public static IHttpClientBuilder AddTransientHttpErrorPolicy(IHttpClientBuilder builder, Func`2<PolicyBuilder`1<HttpResponseMessage>, IAsyncPolicy`1<HttpResponseMessage>> configurePolicy);
    [ExtensionAttribute]
public static IHttpClientBuilder AddPolicyHandler(IHttpClientBuilder builder, Func`4<IServiceProvider, HttpRequestMessage, string, IAsyncPolicy`1<HttpResponseMessage>> policyFactory, Func`2<HttpRequestMessage, string> keySelector);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.PollyServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IPolicyRegistry`1<string> AddPolicyRegistry(IServiceCollection services);
    [ExtensionAttribute]
public static IPolicyRegistry`1<string> AddPolicyRegistry(IServiceCollection services, IPolicyRegistry`1<string> registry);
    [ExtensionAttribute]
public static IServiceCollection AddPolicyRegistry(IServiceCollection services, Action`2<IServiceProvider, IPolicyRegistry`1<string>> configureRegistry);
}
public class Microsoft.Extensions.Http.PolicyHttpMessageHandler : DelegatingHandler {
    private static string PriorResponseKey;
    private IAsyncPolicy`1<HttpResponseMessage> _policy;
    private Func`2<HttpRequestMessage, IAsyncPolicy`1<HttpResponseMessage>> _policySelector;
    public PolicyHttpMessageHandler(IAsyncPolicy`1<HttpResponseMessage> policy);
    public PolicyHttpMessageHandler(Func`2<HttpRequestMessage, IAsyncPolicy`1<HttpResponseMessage>> policySelector);
    [AsyncStateMachineAttribute("Microsoft.Extensions.Http.PolicyHttpMessageHandler/<SendAsync>d__5")]
protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Extensions.Http.PolicyHttpMessageHandler/<SendCoreAsync>d__6")]
protected virtual Task`1<HttpResponseMessage> SendCoreAsync(HttpRequestMessage request, Context context, CancellationToken cancellationToken);
    private IAsyncPolicy`1<HttpResponseMessage> SelectPolicy(HttpRequestMessage request);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<HttpResponseMessage> <>n__0(HttpRequestMessage request, CancellationToken cancellationToken);
}
internal static class Microsoft.Extensions.Http.Resources : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static CultureInfo <Culture>k__BackingField;
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static string PolicyHttpMessageHandler_PolicySelector_ReturnedNull { get; }
    internal static ResourceManager get_ResourceManager();
    [CompilerGeneratedAttribute]
internal static CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
internal static void set_Culture(CultureInfo value);
    internal static string GetResourceString(string resourceKey, string defaultValue);
    private static string GetResourceString(string resourceKey, String[] formatterNames);
    internal static string get_PolicyHttpMessageHandler_PolicySelector_ReturnedNull();
    internal static string FormatPolicyHttpMessageHandler_PolicySelector_ReturnedNull(object p0, object p1);
}
internal class Microsoft.Extensions.Internal.ValueStopwatch : ValueType {
    private static double TimestampToTicks;
    private long _startTimestamp;
    public bool IsActive { get; }
    private ValueStopwatch(long startTimestamp);
    private static ValueStopwatch();
    public bool get_IsActive();
    public static ValueStopwatch StartNew();
    public TimeSpan GetElapsedTime();
}
[ExtensionAttribute]
public static class Polly.HttpRequestMessageExtensions : object {
    internal static string PolicyExecutionContextKey;
    private static HttpRequestMessageExtensions();
    [ExtensionAttribute]
public static Context GetPolicyExecutionContext(HttpRequestMessage request);
    [ExtensionAttribute]
public static void SetPolicyExecutionContext(HttpRequestMessage request, Context context);
}
