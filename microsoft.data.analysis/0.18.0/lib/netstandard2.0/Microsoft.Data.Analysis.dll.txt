[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Data.Analysis.ArrowStringDataFrameColumn : DataFrameColumn {
    private IList`1<ReadOnlyDataFrameBuffer`1<byte>> _dataBuffers;
    private IList`1<ReadOnlyDataFrameBuffer`1<int>> _offsetsBuffers;
    private IList`1<ReadOnlyDataFrameBuffer`1<byte>> _nullBitMapBuffers;
    private long _nullCount;
    public long NullCount { get; }
    public string Item { get; public set; }
    public List`1<string> Item { get; }
    public ArrowStringDataFrameColumn(string name);
    public ArrowStringDataFrameColumn(string name, ReadOnlyMemory`1<byte> values, ReadOnlyMemory`1<byte> offsets, ReadOnlyMemory`1<byte> nullBits, int length, int nullCount);
    public virtual long get_NullCount();
    public bool IsValid(long index);
    private bool GetValidityBit(long index);
    private void SetValidityBit(long index, bool value);
    [IteratorStateMachineAttribute("Microsoft.Data.Analysis.ArrowStringDataFrameColumn/<GetReadOnlyDataBuffers>d__11")]
public IEnumerable`1<ReadOnlyMemory`1<byte>> GetReadOnlyDataBuffers();
    [IteratorStateMachineAttribute("Microsoft.Data.Analysis.ArrowStringDataFrameColumn/<GetReadOnlyNullBitMapBuffers>d__12")]
public IEnumerable`1<ReadOnlyMemory`1<byte>> GetReadOnlyNullBitMapBuffers();
    [IteratorStateMachineAttribute("Microsoft.Data.Analysis.ArrowStringDataFrameColumn/<GetReadOnlyOffsetsBuffers>d__13")]
public IEnumerable`1<ReadOnlyMemory`1<int>> GetReadOnlyOffsetsBuffers();
    private void Append(ReadOnlySpan`1<byte> value);
    private int GetBufferIndexContainingRowIndex(long rowIndex, Int32& indexInBuffer);
    private ReadOnlySpan`1<byte> GetBytes(long index);
    protected virtual object GetValue(long rowIndex);
    private string GetValueImplementation(long rowIndex);
    protected virtual IReadOnlyList`1<object> GetValues(long startIndex, int length);
    protected virtual void SetValue(long rowIndex, object value);
    public string get_Item(long rowIndex);
    public void set_Item(long rowIndex, string value);
    public List`1<string> get_Item(long startIndex, int length);
    [IteratorStateMachineAttribute("Microsoft.Data.Analysis.ArrowStringDataFrameColumn/<GetEnumerator>d__26")]
public sealed virtual IEnumerator`1<string> GetEnumerator();
    protected virtual IEnumerator GetEnumeratorCore();
    protected internal virtual Field GetArrowField();
    protected internal virtual int GetMaxRecordBatchLength(long startIndex);
    private int GetNullCount(long startIndex, int numberOfRows);
    protected internal virtual Array ToArrowArray(long startIndex, int numberOfRows);
    public virtual DataFrameColumn Sort(bool ascending);
    public virtual DataFrameColumn Clone(DataFrameColumn mapIndices, bool invertMapIndices, long numberOfNullsToAppend);
    private ArrowStringDataFrameColumn Clone(PrimitiveDataFrameColumn`1<bool> boolColumn);
    private ArrowStringDataFrameColumn CloneImplementation(PrimitiveDataFrameColumn`1<U> mapIndices, bool invertMapIndices);
    private ArrowStringDataFrameColumn Clone(PrimitiveDataFrameColumn`1<long> mapIndices, bool invertMapIndex);
    private ArrowStringDataFrameColumn Clone(PrimitiveDataFrameColumn`1<int> mapIndices, bool invertMapIndex);
    public virtual DataFrame ValueCounts();
    public virtual GroupBy GroupBy(int columnIndex, DataFrame parent);
    public virtual Dictionary`2<TKey, ICollection`1<long>> GroupColumnValues(HashSet`1& nullIndices);
    public ArrowStringDataFrameColumn FillNulls(string value, bool inPlace);
    protected virtual DataFrameColumn FillNullsImplementation(object value, bool inPlace);
    public virtual DataFrameColumn Clamp(U min, U max, bool inPlace);
    public virtual DataFrameColumn Filter(U min, U max);
    protected internal virtual void AddDataViewColumn(Builder builder);
    protected internal virtual Delegate GetDataViewGetter(DataViewRowCursor cursor);
    private ValueGetter`1<ReadOnlyMemory`1<char>> CreateValueGetterDelegate(DataViewRowCursor cursor);
    public PrimitiveDataFrameColumn`1<bool> ElementwiseEquals(string value);
    public virtual PrimitiveDataFrameColumn`1<bool> ElementwiseEquals(T value);
    public virtual PrimitiveDataFrameColumn`1<bool> ElementwiseEquals(DataFrameColumn column);
    public PrimitiveDataFrameColumn`1<bool> ElementwiseNotEquals(string value);
    public virtual PrimitiveDataFrameColumn`1<bool> ElementwiseNotEquals(T value);
    public virtual PrimitiveDataFrameColumn`1<bool> ElementwiseNotEquals(DataFrameColumn column);
    public ArrowStringDataFrameColumn Apply(Func`2<string, string> func);
}
internal class Microsoft.Data.Analysis.BoolArithmetic : object {
    public sealed virtual void Add(PrimitiveColumnContainer`1<bool> left, PrimitiveColumnContainer`1<bool> right);
    public sealed virtual void Add(PrimitiveColumnContainer`1<bool> column, bool scalar);
    public sealed virtual void Add(bool scalar, PrimitiveColumnContainer`1<bool> column);
    public sealed virtual void Subtract(PrimitiveColumnContainer`1<bool> left, PrimitiveColumnContainer`1<bool> right);
    public sealed virtual void Subtract(PrimitiveColumnContainer`1<bool> column, bool scalar);
    public sealed virtual void Subtract(bool scalar, PrimitiveColumnContainer`1<bool> column);
    public sealed virtual void Multiply(PrimitiveColumnContainer`1<bool> left, PrimitiveColumnContainer`1<bool> right);
    public sealed virtual void Multiply(PrimitiveColumnContainer`1<bool> column, bool scalar);
    public sealed virtual void Multiply(bool scalar, PrimitiveColumnContainer`1<bool> column);
    public sealed virtual void Divide(PrimitiveColumnContainer`1<bool> left, PrimitiveColumnContainer`1<bool> right);
    public sealed virtual void Divide(PrimitiveColumnContainer`1<bool> column, bool scalar);
    public sealed virtual void Divide(bool scalar, PrimitiveColumnContainer`1<bool> column);
    public sealed virtual void Modulo(PrimitiveColumnContainer`1<bool> left, PrimitiveColumnContainer`1<bool> right);
    public sealed virtual void Modulo(PrimitiveColumnContainer`1<bool> column, bool scalar);
    public sealed virtual void Modulo(bool scalar, PrimitiveColumnContainer`1<bool> column);
    public sealed virtual void And(PrimitiveColumnContainer`1<bool> left, PrimitiveColumnContainer`1<bool> right);
    public sealed virtual void And(PrimitiveColumnContainer`1<bool> column, bool scalar);
    public sealed virtual void And(bool scalar, PrimitiveColumnContainer`1<bool> column);
    public sealed virtual void Or(PrimitiveColumnContainer`1<bool> left, PrimitiveColumnContainer`1<bool> right);
    public sealed virtual void Or(PrimitiveColumnContainer`1<bool> column, bool scalar);
    public sealed virtual void Or(bool scalar, PrimitiveColumnContainer`1<bool> column);
    public sealed virtual void Xor(PrimitiveColumnContainer`1<bool> left, PrimitiveColumnContainer`1<bool> right);
    public sealed virtual void Xor(PrimitiveColumnContainer`1<bool> column, bool scalar);
    public sealed virtual void Xor(bool scalar, PrimitiveColumnContainer`1<bool> column);
    public sealed virtual void LeftShift(PrimitiveColumnContainer`1<bool> column, int value);
    public sealed virtual void RightShift(PrimitiveColumnContainer`1<bool> column, int value);
    public sealed virtual void ElementwiseEquals(PrimitiveColumnContainer`1<bool> left, PrimitiveColumnContainer`1<bool> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseEquals(PrimitiveColumnContainer`1<bool> column, bool scalar, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseNotEquals(PrimitiveColumnContainer`1<bool> left, PrimitiveColumnContainer`1<bool> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseNotEquals(PrimitiveColumnContainer`1<bool> column, bool scalar, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseGreaterThanOrEqual(PrimitiveColumnContainer`1<bool> left, PrimitiveColumnContainer`1<bool> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseGreaterThanOrEqual(PrimitiveColumnContainer`1<bool> column, bool scalar, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseLessThanOrEqual(PrimitiveColumnContainer`1<bool> left, PrimitiveColumnContainer`1<bool> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseLessThanOrEqual(PrimitiveColumnContainer`1<bool> column, bool scalar, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseGreaterThan(PrimitiveColumnContainer`1<bool> left, PrimitiveColumnContainer`1<bool> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseGreaterThan(PrimitiveColumnContainer`1<bool> column, bool scalar, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseLessThan(PrimitiveColumnContainer`1<bool> left, PrimitiveColumnContainer`1<bool> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseLessThan(PrimitiveColumnContainer`1<bool> column, bool scalar, PrimitiveColumnContainer`1<bool> ret);
}
internal class Microsoft.Data.Analysis.BoolComputation : object {
    public sealed virtual void Abs(PrimitiveColumnContainer`1<bool> column);
    public sealed virtual void All(PrimitiveColumnContainer`1<bool> column, Boolean& ret);
    public sealed virtual void Any(PrimitiveColumnContainer`1<bool> column, Boolean& ret);
    public sealed virtual void CumulativeMax(PrimitiveColumnContainer`1<bool> column);
    public sealed virtual void CumulativeMax(PrimitiveColumnContainer`1<bool> column, IEnumerable`1<long> rows);
    public sealed virtual void CumulativeMin(PrimitiveColumnContainer`1<bool> column);
    public sealed virtual void CumulativeMin(PrimitiveColumnContainer`1<bool> column, IEnumerable`1<long> rows);
    public sealed virtual void CumulativeProduct(PrimitiveColumnContainer`1<bool> column);
    public sealed virtual void CumulativeProduct(PrimitiveColumnContainer`1<bool> column, IEnumerable`1<long> rows);
    public sealed virtual void CumulativeSum(PrimitiveColumnContainer`1<bool> column);
    public sealed virtual void CumulativeSum(PrimitiveColumnContainer`1<bool> column, IEnumerable`1<long> rows);
    public sealed virtual void Max(PrimitiveColumnContainer`1<bool> column, Boolean& ret);
    public sealed virtual void Max(PrimitiveColumnContainer`1<bool> column, IEnumerable`1<long> rows, Boolean& ret);
    public sealed virtual void Min(PrimitiveColumnContainer`1<bool> column, Boolean& ret);
    public sealed virtual void Min(PrimitiveColumnContainer`1<bool> column, IEnumerable`1<long> rows, Boolean& ret);
    public sealed virtual void Product(PrimitiveColumnContainer`1<bool> column, Boolean& ret);
    public sealed virtual void Product(PrimitiveColumnContainer`1<bool> column, IEnumerable`1<long> rows, Boolean& ret);
    public sealed virtual void Sum(PrimitiveColumnContainer`1<bool> column, Boolean& ret);
    public sealed virtual void Sum(PrimitiveColumnContainer`1<bool> column, IEnumerable`1<long> rows, Boolean& ret);
    public sealed virtual void Round(PrimitiveColumnContainer`1<bool> column);
}
public class Microsoft.Data.Analysis.BooleanDataFrameColumn : PrimitiveDataFrameColumn`1<bool> {
    public BooleanDataFrameColumn(string name, IEnumerable`1<Nullable`1<bool>> values);
    public BooleanDataFrameColumn(string name, IEnumerable`1<bool> values);
    public BooleanDataFrameColumn(string name, long length);
    public BooleanDataFrameColumn(string name, ReadOnlyMemory`1<byte> buffer, ReadOnlyMemory`1<byte> nullBitMap, int length, int nullCount);
    internal BooleanDataFrameColumn(string name, PrimitiveColumnContainer`1<bool> values);
    public BooleanDataFrameColumn And(BooleanDataFrameColumn column, bool inPlace);
    public BooleanDataFrameColumn And(bool value, bool inPlace);
    public BooleanDataFrameColumn Or(BooleanDataFrameColumn column, bool inPlace);
    public BooleanDataFrameColumn Or(bool value, bool inPlace);
    public BooleanDataFrameColumn Xor(BooleanDataFrameColumn column, bool inPlace);
    public BooleanDataFrameColumn Xor(bool value, bool inPlace);
    public BooleanDataFrameColumn ElementwiseEquals(BooleanDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(BooleanDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(BooleanDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(BooleanDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(BooleanDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(BooleanDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(bool value);
    public BooleanDataFrameColumn ElementwiseNotEquals(bool value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(bool value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(bool value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(bool value);
    public BooleanDataFrameColumn ElementwiseLessThan(bool value);
    internal BooleanDataFrameColumn ElementwiseEqualsImplementation(BooleanDataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseEqualsImplementation(bool value);
    internal BooleanDataFrameColumn ElementwiseNotEqualsImplementation(BooleanDataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseNotEqualsImplementation(bool value);
    internal BooleanDataFrameColumn ElementwiseGreaterThanOrEqualImplementation(BooleanDataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseGreaterThanOrEqualImplementation(bool value);
    internal BooleanDataFrameColumn ElementwiseLessThanOrEqualImplementation(BooleanDataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseLessThanOrEqualImplementation(bool value);
    internal BooleanDataFrameColumn ElementwiseGreaterThanImplementation(BooleanDataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseGreaterThanImplementation(bool value);
    internal BooleanDataFrameColumn ElementwiseLessThanImplementation(BooleanDataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseLessThanImplementation(bool value);
    public static BooleanDataFrameColumn op_BitwiseAnd(BooleanDataFrameColumn left, BooleanDataFrameColumn right);
    public static BooleanDataFrameColumn op_BitwiseAnd(BooleanDataFrameColumn left, bool right);
    public static BooleanDataFrameColumn op_BitwiseOr(BooleanDataFrameColumn left, BooleanDataFrameColumn right);
    public static BooleanDataFrameColumn op_BitwiseOr(BooleanDataFrameColumn left, bool right);
    public static BooleanDataFrameColumn op_ExclusiveOr(BooleanDataFrameColumn left, BooleanDataFrameColumn right);
    public static BooleanDataFrameColumn op_ExclusiveOr(BooleanDataFrameColumn left, bool right);
}
internal class Microsoft.Data.Analysis.ByteArithmetic : object {
    public sealed virtual void Add(PrimitiveColumnContainer`1<byte> left, PrimitiveColumnContainer`1<byte> right);
    public sealed virtual void Add(PrimitiveColumnContainer`1<byte> column, byte scalar);
    public sealed virtual void Add(byte scalar, PrimitiveColumnContainer`1<byte> column);
    public sealed virtual void Subtract(PrimitiveColumnContainer`1<byte> left, PrimitiveColumnContainer`1<byte> right);
    public sealed virtual void Subtract(PrimitiveColumnContainer`1<byte> column, byte scalar);
    public sealed virtual void Subtract(byte scalar, PrimitiveColumnContainer`1<byte> column);
    public sealed virtual void Multiply(PrimitiveColumnContainer`1<byte> left, PrimitiveColumnContainer`1<byte> right);
    public sealed virtual void Multiply(PrimitiveColumnContainer`1<byte> column, byte scalar);
    public sealed virtual void Multiply(byte scalar, PrimitiveColumnContainer`1<byte> column);
    public sealed virtual void Divide(PrimitiveColumnContainer`1<byte> left, PrimitiveColumnContainer`1<byte> right);
    public sealed virtual void Divide(PrimitiveColumnContainer`1<byte> column, byte scalar);
    public sealed virtual void Divide(byte scalar, PrimitiveColumnContainer`1<byte> column);
    public sealed virtual void Modulo(PrimitiveColumnContainer`1<byte> left, PrimitiveColumnContainer`1<byte> right);
    public sealed virtual void Modulo(PrimitiveColumnContainer`1<byte> column, byte scalar);
    public sealed virtual void Modulo(byte scalar, PrimitiveColumnContainer`1<byte> column);
    public sealed virtual void And(PrimitiveColumnContainer`1<byte> left, PrimitiveColumnContainer`1<byte> right);
    public sealed virtual void And(PrimitiveColumnContainer`1<byte> column, byte scalar);
    public sealed virtual void And(byte scalar, PrimitiveColumnContainer`1<byte> column);
    public sealed virtual void Or(PrimitiveColumnContainer`1<byte> left, PrimitiveColumnContainer`1<byte> right);
    public sealed virtual void Or(PrimitiveColumnContainer`1<byte> column, byte scalar);
    public sealed virtual void Or(byte scalar, PrimitiveColumnContainer`1<byte> column);
    public sealed virtual void Xor(PrimitiveColumnContainer`1<byte> left, PrimitiveColumnContainer`1<byte> right);
    public sealed virtual void Xor(PrimitiveColumnContainer`1<byte> column, byte scalar);
    public sealed virtual void Xor(byte scalar, PrimitiveColumnContainer`1<byte> column);
    public sealed virtual void LeftShift(PrimitiveColumnContainer`1<byte> column, int value);
    public sealed virtual void RightShift(PrimitiveColumnContainer`1<byte> column, int value);
    public sealed virtual void ElementwiseEquals(PrimitiveColumnContainer`1<byte> left, PrimitiveColumnContainer`1<byte> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseEquals(PrimitiveColumnContainer`1<byte> column, byte scalar, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseNotEquals(PrimitiveColumnContainer`1<byte> left, PrimitiveColumnContainer`1<byte> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseNotEquals(PrimitiveColumnContainer`1<byte> column, byte scalar, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseGreaterThanOrEqual(PrimitiveColumnContainer`1<byte> left, PrimitiveColumnContainer`1<byte> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseGreaterThanOrEqual(PrimitiveColumnContainer`1<byte> column, byte scalar, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseLessThanOrEqual(PrimitiveColumnContainer`1<byte> left, PrimitiveColumnContainer`1<byte> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseLessThanOrEqual(PrimitiveColumnContainer`1<byte> column, byte scalar, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseGreaterThan(PrimitiveColumnContainer`1<byte> left, PrimitiveColumnContainer`1<byte> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseGreaterThan(PrimitiveColumnContainer`1<byte> column, byte scalar, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseLessThan(PrimitiveColumnContainer`1<byte> left, PrimitiveColumnContainer`1<byte> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseLessThan(PrimitiveColumnContainer`1<byte> column, byte scalar, PrimitiveColumnContainer`1<bool> ret);
}
internal class Microsoft.Data.Analysis.ByteByteConverter : object {
    public sealed virtual byte GetByte(byte value);
}
internal class Microsoft.Data.Analysis.ByteComputation : object {
    public sealed virtual void Abs(PrimitiveColumnContainer`1<byte> column);
    public sealed virtual void All(PrimitiveColumnContainer`1<byte> column, Boolean& ret);
    public sealed virtual void Any(PrimitiveColumnContainer`1<byte> column, Boolean& ret);
    public sealed virtual void CumulativeMax(PrimitiveColumnContainer`1<byte> column);
    public sealed virtual void CumulativeMax(PrimitiveColumnContainer`1<byte> column, IEnumerable`1<long> rows);
    public sealed virtual void CumulativeMin(PrimitiveColumnContainer`1<byte> column);
    public sealed virtual void CumulativeMin(PrimitiveColumnContainer`1<byte> column, IEnumerable`1<long> rows);
    public sealed virtual void CumulativeProduct(PrimitiveColumnContainer`1<byte> column);
    public sealed virtual void CumulativeProduct(PrimitiveColumnContainer`1<byte> column, IEnumerable`1<long> rows);
    public sealed virtual void CumulativeSum(PrimitiveColumnContainer`1<byte> column);
    public sealed virtual void CumulativeSum(PrimitiveColumnContainer`1<byte> column, IEnumerable`1<long> rows);
    public sealed virtual void Max(PrimitiveColumnContainer`1<byte> column, Byte& ret);
    public sealed virtual void Max(PrimitiveColumnContainer`1<byte> column, IEnumerable`1<long> rows, Byte& ret);
    public sealed virtual void Min(PrimitiveColumnContainer`1<byte> column, Byte& ret);
    public sealed virtual void Min(PrimitiveColumnContainer`1<byte> column, IEnumerable`1<long> rows, Byte& ret);
    public sealed virtual void Product(PrimitiveColumnContainer`1<byte> column, Byte& ret);
    public sealed virtual void Product(PrimitiveColumnContainer`1<byte> column, IEnumerable`1<long> rows, Byte& ret);
    public sealed virtual void Sum(PrimitiveColumnContainer`1<byte> column, Byte& ret);
    public sealed virtual void Sum(PrimitiveColumnContainer`1<byte> column, IEnumerable`1<long> rows, Byte& ret);
    public sealed virtual void Round(PrimitiveColumnContainer`1<byte> column);
}
internal static class Microsoft.Data.Analysis.ByteConverter : object {
    public static IByteConverter`1<T> GetByteConverter();
}
internal static class Microsoft.Data.Analysis.ByteConverter`1 : object {
    [CompilerGeneratedAttribute]
private static IByteConverter`1<T> <Instance>k__BackingField;
    public static IByteConverter`1<T> Instance { get; }
    private static ByteConverter`1();
    [CompilerGeneratedAttribute]
public static IByteConverter`1<T> get_Instance();
}
public class Microsoft.Data.Analysis.ByteDataFrameColumn : PrimitiveDataFrameColumn`1<byte> {
    public ByteDataFrameColumn(string name, IEnumerable`1<Nullable`1<byte>> values);
    public ByteDataFrameColumn(string name, IEnumerable`1<byte> values);
    public ByteDataFrameColumn(string name, long length);
    public ByteDataFrameColumn(string name, ReadOnlyMemory`1<byte> buffer, ReadOnlyMemory`1<byte> nullBitMap, int length, int nullCount);
    internal ByteDataFrameColumn(string name, PrimitiveColumnContainer`1<byte> values);
    public Int32DataFrameColumn Add(ByteDataFrameColumn column);
    public Int32DataFrameColumn Subtract(ByteDataFrameColumn column);
    public Int32DataFrameColumn Multiply(ByteDataFrameColumn column);
    public Int32DataFrameColumn Divide(ByteDataFrameColumn column);
    public Int32DataFrameColumn Modulo(ByteDataFrameColumn column);
    public DecimalDataFrameColumn Add(DecimalDataFrameColumn column);
    public DecimalDataFrameColumn Subtract(DecimalDataFrameColumn column);
    public DecimalDataFrameColumn Multiply(DecimalDataFrameColumn column);
    public DecimalDataFrameColumn Divide(DecimalDataFrameColumn column);
    public DecimalDataFrameColumn Modulo(DecimalDataFrameColumn column);
    public DoubleDataFrameColumn Add(DoubleDataFrameColumn column);
    public DoubleDataFrameColumn Subtract(DoubleDataFrameColumn column);
    public DoubleDataFrameColumn Multiply(DoubleDataFrameColumn column);
    public DoubleDataFrameColumn Divide(DoubleDataFrameColumn column);
    public DoubleDataFrameColumn Modulo(DoubleDataFrameColumn column);
    public SingleDataFrameColumn Add(SingleDataFrameColumn column);
    public SingleDataFrameColumn Subtract(SingleDataFrameColumn column);
    public SingleDataFrameColumn Multiply(SingleDataFrameColumn column);
    public SingleDataFrameColumn Divide(SingleDataFrameColumn column);
    public SingleDataFrameColumn Modulo(SingleDataFrameColumn column);
    public Int32DataFrameColumn Add(Int32DataFrameColumn column);
    public Int32DataFrameColumn Subtract(Int32DataFrameColumn column);
    public Int32DataFrameColumn Multiply(Int32DataFrameColumn column);
    public Int32DataFrameColumn Divide(Int32DataFrameColumn column);
    public Int32DataFrameColumn Modulo(Int32DataFrameColumn column);
    public Int64DataFrameColumn Add(Int64DataFrameColumn column);
    public Int64DataFrameColumn Subtract(Int64DataFrameColumn column);
    public Int64DataFrameColumn Multiply(Int64DataFrameColumn column);
    public Int64DataFrameColumn Divide(Int64DataFrameColumn column);
    public Int64DataFrameColumn Modulo(Int64DataFrameColumn column);
    public Int32DataFrameColumn Add(SByteDataFrameColumn column);
    public Int32DataFrameColumn Subtract(SByteDataFrameColumn column);
    public Int32DataFrameColumn Multiply(SByteDataFrameColumn column);
    public Int32DataFrameColumn Divide(SByteDataFrameColumn column);
    public Int32DataFrameColumn Modulo(SByteDataFrameColumn column);
    public Int32DataFrameColumn Add(Int16DataFrameColumn column);
    public Int32DataFrameColumn Subtract(Int16DataFrameColumn column);
    public Int32DataFrameColumn Multiply(Int16DataFrameColumn column);
    public Int32DataFrameColumn Divide(Int16DataFrameColumn column);
    public Int32DataFrameColumn Modulo(Int16DataFrameColumn column);
    public UInt32DataFrameColumn Add(UInt32DataFrameColumn column);
    public UInt32DataFrameColumn Subtract(UInt32DataFrameColumn column);
    public UInt32DataFrameColumn Multiply(UInt32DataFrameColumn column);
    public UInt32DataFrameColumn Divide(UInt32DataFrameColumn column);
    public UInt32DataFrameColumn Modulo(UInt32DataFrameColumn column);
    public UInt64DataFrameColumn Add(UInt64DataFrameColumn column);
    public UInt64DataFrameColumn Subtract(UInt64DataFrameColumn column);
    public UInt64DataFrameColumn Multiply(UInt64DataFrameColumn column);
    public UInt64DataFrameColumn Divide(UInt64DataFrameColumn column);
    public UInt64DataFrameColumn Modulo(UInt64DataFrameColumn column);
    public Int32DataFrameColumn Add(UInt16DataFrameColumn column);
    public Int32DataFrameColumn Subtract(UInt16DataFrameColumn column);
    public Int32DataFrameColumn Multiply(UInt16DataFrameColumn column);
    public Int32DataFrameColumn Divide(UInt16DataFrameColumn column);
    public Int32DataFrameColumn Modulo(UInt16DataFrameColumn column);
    public Int32DataFrameColumn Add(byte value);
    public Int32DataFrameColumn ReverseAdd(byte value);
    public Int32DataFrameColumn Subtract(byte value);
    public Int32DataFrameColumn ReverseSubtract(byte value);
    public Int32DataFrameColumn Multiply(byte value);
    public Int32DataFrameColumn ReverseMultiply(byte value);
    public Int32DataFrameColumn Divide(byte value);
    public Int32DataFrameColumn ReverseDivide(byte value);
    public Int32DataFrameColumn Modulo(byte value);
    public Int32DataFrameColumn ReverseModulo(byte value);
    public DecimalDataFrameColumn Add(decimal value);
    public DecimalDataFrameColumn ReverseAdd(decimal value);
    public DecimalDataFrameColumn Subtract(decimal value);
    public DecimalDataFrameColumn ReverseSubtract(decimal value);
    public DecimalDataFrameColumn Multiply(decimal value);
    public DecimalDataFrameColumn ReverseMultiply(decimal value);
    public DecimalDataFrameColumn Divide(decimal value);
    public DecimalDataFrameColumn ReverseDivide(decimal value);
    public DecimalDataFrameColumn Modulo(decimal value);
    public DecimalDataFrameColumn ReverseModulo(decimal value);
    public DoubleDataFrameColumn Add(double value);
    public DoubleDataFrameColumn ReverseAdd(double value);
    public DoubleDataFrameColumn Subtract(double value);
    public DoubleDataFrameColumn ReverseSubtract(double value);
    public DoubleDataFrameColumn Multiply(double value);
    public DoubleDataFrameColumn ReverseMultiply(double value);
    public DoubleDataFrameColumn Divide(double value);
    public DoubleDataFrameColumn ReverseDivide(double value);
    public DoubleDataFrameColumn Modulo(double value);
    public DoubleDataFrameColumn ReverseModulo(double value);
    public SingleDataFrameColumn Add(float value);
    public SingleDataFrameColumn ReverseAdd(float value);
    public SingleDataFrameColumn Subtract(float value);
    public SingleDataFrameColumn ReverseSubtract(float value);
    public SingleDataFrameColumn Multiply(float value);
    public SingleDataFrameColumn ReverseMultiply(float value);
    public SingleDataFrameColumn Divide(float value);
    public SingleDataFrameColumn ReverseDivide(float value);
    public SingleDataFrameColumn Modulo(float value);
    public SingleDataFrameColumn ReverseModulo(float value);
    public Int32DataFrameColumn Add(int value);
    public Int32DataFrameColumn ReverseAdd(int value);
    public Int32DataFrameColumn Subtract(int value);
    public Int32DataFrameColumn ReverseSubtract(int value);
    public Int32DataFrameColumn Multiply(int value);
    public Int32DataFrameColumn ReverseMultiply(int value);
    public Int32DataFrameColumn Divide(int value);
    public Int32DataFrameColumn ReverseDivide(int value);
    public Int32DataFrameColumn Modulo(int value);
    public Int32DataFrameColumn ReverseModulo(int value);
    public Int64DataFrameColumn Add(long value);
    public Int64DataFrameColumn ReverseAdd(long value);
    public Int64DataFrameColumn Subtract(long value);
    public Int64DataFrameColumn ReverseSubtract(long value);
    public Int64DataFrameColumn Multiply(long value);
    public Int64DataFrameColumn ReverseMultiply(long value);
    public Int64DataFrameColumn Divide(long value);
    public Int64DataFrameColumn ReverseDivide(long value);
    public Int64DataFrameColumn Modulo(long value);
    public Int64DataFrameColumn ReverseModulo(long value);
    public Int32DataFrameColumn Add(sbyte value);
    public Int32DataFrameColumn ReverseAdd(sbyte value);
    public Int32DataFrameColumn Subtract(sbyte value);
    public Int32DataFrameColumn ReverseSubtract(sbyte value);
    public Int32DataFrameColumn Multiply(sbyte value);
    public Int32DataFrameColumn ReverseMultiply(sbyte value);
    public Int32DataFrameColumn Divide(sbyte value);
    public Int32DataFrameColumn ReverseDivide(sbyte value);
    public Int32DataFrameColumn Modulo(sbyte value);
    public Int32DataFrameColumn ReverseModulo(sbyte value);
    public Int32DataFrameColumn Add(short value);
    public Int32DataFrameColumn ReverseAdd(short value);
    public Int32DataFrameColumn Subtract(short value);
    public Int32DataFrameColumn ReverseSubtract(short value);
    public Int32DataFrameColumn Multiply(short value);
    public Int32DataFrameColumn ReverseMultiply(short value);
    public Int32DataFrameColumn Divide(short value);
    public Int32DataFrameColumn ReverseDivide(short value);
    public Int32DataFrameColumn Modulo(short value);
    public Int32DataFrameColumn ReverseModulo(short value);
    public UInt32DataFrameColumn Add(UInt32 value);
    public UInt32DataFrameColumn ReverseAdd(UInt32 value);
    public UInt32DataFrameColumn Subtract(UInt32 value);
    public UInt32DataFrameColumn ReverseSubtract(UInt32 value);
    public UInt32DataFrameColumn Multiply(UInt32 value);
    public UInt32DataFrameColumn ReverseMultiply(UInt32 value);
    public UInt32DataFrameColumn Divide(UInt32 value);
    public UInt32DataFrameColumn ReverseDivide(UInt32 value);
    public UInt32DataFrameColumn Modulo(UInt32 value);
    public UInt32DataFrameColumn ReverseModulo(UInt32 value);
    public UInt64DataFrameColumn Add(ulong value);
    public UInt64DataFrameColumn ReverseAdd(ulong value);
    public UInt64DataFrameColumn Subtract(ulong value);
    public UInt64DataFrameColumn ReverseSubtract(ulong value);
    public UInt64DataFrameColumn Multiply(ulong value);
    public UInt64DataFrameColumn ReverseMultiply(ulong value);
    public UInt64DataFrameColumn Divide(ulong value);
    public UInt64DataFrameColumn ReverseDivide(ulong value);
    public UInt64DataFrameColumn Modulo(ulong value);
    public UInt64DataFrameColumn ReverseModulo(ulong value);
    public Int32DataFrameColumn Add(ushort value);
    public Int32DataFrameColumn ReverseAdd(ushort value);
    public Int32DataFrameColumn Subtract(ushort value);
    public Int32DataFrameColumn ReverseSubtract(ushort value);
    public Int32DataFrameColumn Multiply(ushort value);
    public Int32DataFrameColumn ReverseMultiply(ushort value);
    public Int32DataFrameColumn Divide(ushort value);
    public Int32DataFrameColumn ReverseDivide(ushort value);
    public Int32DataFrameColumn Modulo(ushort value);
    public Int32DataFrameColumn ReverseModulo(ushort value);
    public BooleanDataFrameColumn ElementwiseEquals(ByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(ByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(ByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(ByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(ByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(ByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(DecimalDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(DecimalDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(DecimalDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(DecimalDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(DecimalDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(DecimalDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(DoubleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(DoubleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(DoubleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(DoubleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(DoubleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(DoubleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(SingleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(SingleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(SingleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(SingleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(SingleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(SingleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(Int32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(Int32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(Int32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(Int32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(Int32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(Int32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(Int64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(Int64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(Int64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(Int64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(Int64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(Int64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(SByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(SByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(SByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(SByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(SByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(SByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(Int16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(Int16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(Int16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(Int16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(Int16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(Int16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(UInt32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(UInt32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(UInt32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(UInt32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(UInt32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(UInt32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(UInt64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(UInt64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(UInt64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(UInt64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(UInt64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(UInt64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(UInt16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(UInt16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(UInt16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(UInt16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(UInt16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(UInt16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(byte value);
    public BooleanDataFrameColumn ElementwiseNotEquals(byte value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(byte value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(byte value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(byte value);
    public BooleanDataFrameColumn ElementwiseLessThan(byte value);
    public BooleanDataFrameColumn ElementwiseEquals(decimal value);
    public BooleanDataFrameColumn ElementwiseNotEquals(decimal value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(decimal value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(decimal value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(decimal value);
    public BooleanDataFrameColumn ElementwiseLessThan(decimal value);
    public BooleanDataFrameColumn ElementwiseEquals(double value);
    public BooleanDataFrameColumn ElementwiseNotEquals(double value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(double value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(double value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(double value);
    public BooleanDataFrameColumn ElementwiseLessThan(double value);
    public BooleanDataFrameColumn ElementwiseEquals(float value);
    public BooleanDataFrameColumn ElementwiseNotEquals(float value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(float value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(float value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(float value);
    public BooleanDataFrameColumn ElementwiseLessThan(float value);
    public BooleanDataFrameColumn ElementwiseEquals(int value);
    public BooleanDataFrameColumn ElementwiseNotEquals(int value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(int value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(int value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(int value);
    public BooleanDataFrameColumn ElementwiseLessThan(int value);
    public BooleanDataFrameColumn ElementwiseEquals(long value);
    public BooleanDataFrameColumn ElementwiseNotEquals(long value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(long value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(long value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(long value);
    public BooleanDataFrameColumn ElementwiseLessThan(long value);
    public BooleanDataFrameColumn ElementwiseEquals(sbyte value);
    public BooleanDataFrameColumn ElementwiseNotEquals(sbyte value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(sbyte value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(sbyte value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(sbyte value);
    public BooleanDataFrameColumn ElementwiseLessThan(sbyte value);
    public BooleanDataFrameColumn ElementwiseEquals(short value);
    public BooleanDataFrameColumn ElementwiseNotEquals(short value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(short value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(short value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(short value);
    public BooleanDataFrameColumn ElementwiseLessThan(short value);
    public BooleanDataFrameColumn ElementwiseEquals(UInt32 value);
    public BooleanDataFrameColumn ElementwiseNotEquals(UInt32 value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(UInt32 value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(UInt32 value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(UInt32 value);
    public BooleanDataFrameColumn ElementwiseLessThan(UInt32 value);
    public BooleanDataFrameColumn ElementwiseEquals(ulong value);
    public BooleanDataFrameColumn ElementwiseNotEquals(ulong value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(ulong value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(ulong value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(ulong value);
    public BooleanDataFrameColumn ElementwiseLessThan(ulong value);
    public BooleanDataFrameColumn ElementwiseEquals(ushort value);
    public BooleanDataFrameColumn ElementwiseNotEquals(ushort value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(ushort value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(ushort value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(ushort value);
    public BooleanDataFrameColumn ElementwiseLessThan(ushort value);
    public Int32DataFrameColumn LeftShift(int value, bool inPlace);
    public Int32DataFrameColumn RightShift(int value, bool inPlace);
    internal BooleanDataFrameColumn ElementwiseEqualsImplementation(ByteDataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseEqualsImplementation(byte value);
    internal BooleanDataFrameColumn ElementwiseNotEqualsImplementation(ByteDataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseNotEqualsImplementation(byte value);
    internal BooleanDataFrameColumn ElementwiseGreaterThanOrEqualImplementation(ByteDataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseGreaterThanOrEqualImplementation(byte value);
    internal BooleanDataFrameColumn ElementwiseLessThanOrEqualImplementation(ByteDataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseLessThanOrEqualImplementation(byte value);
    internal BooleanDataFrameColumn ElementwiseGreaterThanImplementation(ByteDataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseGreaterThanImplementation(byte value);
    internal BooleanDataFrameColumn ElementwiseLessThanImplementation(ByteDataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseLessThanImplementation(byte value);
    public static Int32DataFrameColumn op_Addition(ByteDataFrameColumn left, ByteDataFrameColumn right);
    public static DecimalDataFrameColumn op_Addition(ByteDataFrameColumn left, DecimalDataFrameColumn right);
    public static DoubleDataFrameColumn op_Addition(ByteDataFrameColumn left, DoubleDataFrameColumn right);
    public static SingleDataFrameColumn op_Addition(ByteDataFrameColumn left, SingleDataFrameColumn right);
    public static Int32DataFrameColumn op_Addition(ByteDataFrameColumn left, Int32DataFrameColumn right);
    public static Int64DataFrameColumn op_Addition(ByteDataFrameColumn left, Int64DataFrameColumn right);
    public static Int32DataFrameColumn op_Addition(ByteDataFrameColumn left, SByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Addition(ByteDataFrameColumn left, Int16DataFrameColumn right);
    public static UInt32DataFrameColumn op_Addition(ByteDataFrameColumn left, UInt32DataFrameColumn right);
    public static UInt64DataFrameColumn op_Addition(ByteDataFrameColumn left, UInt64DataFrameColumn right);
    public static Int32DataFrameColumn op_Addition(ByteDataFrameColumn left, UInt16DataFrameColumn right);
    public static Int32DataFrameColumn op_Addition(ByteDataFrameColumn left, byte right);
    public static Int32DataFrameColumn op_Addition(byte left, ByteDataFrameColumn right);
    public static DecimalDataFrameColumn op_Addition(ByteDataFrameColumn left, decimal right);
    public static DecimalDataFrameColumn op_Addition(decimal left, ByteDataFrameColumn right);
    public static DoubleDataFrameColumn op_Addition(ByteDataFrameColumn left, double right);
    public static DoubleDataFrameColumn op_Addition(double left, ByteDataFrameColumn right);
    public static SingleDataFrameColumn op_Addition(ByteDataFrameColumn left, float right);
    public static SingleDataFrameColumn op_Addition(float left, ByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Addition(ByteDataFrameColumn left, int right);
    public static Int32DataFrameColumn op_Addition(int left, ByteDataFrameColumn right);
    public static Int64DataFrameColumn op_Addition(ByteDataFrameColumn left, long right);
    public static Int64DataFrameColumn op_Addition(long left, ByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Addition(ByteDataFrameColumn left, sbyte right);
    public static Int32DataFrameColumn op_Addition(sbyte left, ByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Addition(ByteDataFrameColumn left, short right);
    public static Int32DataFrameColumn op_Addition(short left, ByteDataFrameColumn right);
    public static UInt32DataFrameColumn op_Addition(ByteDataFrameColumn left, UInt32 right);
    public static UInt32DataFrameColumn op_Addition(UInt32 left, ByteDataFrameColumn right);
    public static UInt64DataFrameColumn op_Addition(ByteDataFrameColumn left, ulong right);
    public static UInt64DataFrameColumn op_Addition(ulong left, ByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Addition(ByteDataFrameColumn left, ushort right);
    public static Int32DataFrameColumn op_Addition(ushort left, ByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Subtraction(ByteDataFrameColumn left, ByteDataFrameColumn right);
    public static DecimalDataFrameColumn op_Subtraction(ByteDataFrameColumn left, DecimalDataFrameColumn right);
    public static DoubleDataFrameColumn op_Subtraction(ByteDataFrameColumn left, DoubleDataFrameColumn right);
    public static SingleDataFrameColumn op_Subtraction(ByteDataFrameColumn left, SingleDataFrameColumn right);
    public static Int32DataFrameColumn op_Subtraction(ByteDataFrameColumn left, Int32DataFrameColumn right);
    public static Int64DataFrameColumn op_Subtraction(ByteDataFrameColumn left, Int64DataFrameColumn right);
    public static Int32DataFrameColumn op_Subtraction(ByteDataFrameColumn left, SByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Subtraction(ByteDataFrameColumn left, Int16DataFrameColumn right);
    public static UInt32DataFrameColumn op_Subtraction(ByteDataFrameColumn left, UInt32DataFrameColumn right);
    public static UInt64DataFrameColumn op_Subtraction(ByteDataFrameColumn left, UInt64DataFrameColumn right);
    public static Int32DataFrameColumn op_Subtraction(ByteDataFrameColumn left, UInt16DataFrameColumn right);
    public static Int32DataFrameColumn op_Subtraction(ByteDataFrameColumn left, byte right);
    public static Int32DataFrameColumn op_Subtraction(byte left, ByteDataFrameColumn right);
    public static DecimalDataFrameColumn op_Subtraction(ByteDataFrameColumn left, decimal right);
    public static DecimalDataFrameColumn op_Subtraction(decimal left, ByteDataFrameColumn right);
    public static DoubleDataFrameColumn op_Subtraction(ByteDataFrameColumn left, double right);
    public static DoubleDataFrameColumn op_Subtraction(double left, ByteDataFrameColumn right);
    public static SingleDataFrameColumn op_Subtraction(ByteDataFrameColumn left, float right);
    public static SingleDataFrameColumn op_Subtraction(float left, ByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Subtraction(ByteDataFrameColumn left, int right);
    public static Int32DataFrameColumn op_Subtraction(int left, ByteDataFrameColumn right);
    public static Int64DataFrameColumn op_Subtraction(ByteDataFrameColumn left, long right);
    public static Int64DataFrameColumn op_Subtraction(long left, ByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Subtraction(ByteDataFrameColumn left, sbyte right);
    public static Int32DataFrameColumn op_Subtraction(sbyte left, ByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Subtraction(ByteDataFrameColumn left, short right);
    public static Int32DataFrameColumn op_Subtraction(short left, ByteDataFrameColumn right);
    public static UInt32DataFrameColumn op_Subtraction(ByteDataFrameColumn left, UInt32 right);
    public static UInt32DataFrameColumn op_Subtraction(UInt32 left, ByteDataFrameColumn right);
    public static UInt64DataFrameColumn op_Subtraction(ByteDataFrameColumn left, ulong right);
    public static UInt64DataFrameColumn op_Subtraction(ulong left, ByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Subtraction(ByteDataFrameColumn left, ushort right);
    public static Int32DataFrameColumn op_Subtraction(ushort left, ByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Multiply(ByteDataFrameColumn left, ByteDataFrameColumn right);
    public static DecimalDataFrameColumn op_Multiply(ByteDataFrameColumn left, DecimalDataFrameColumn right);
    public static DoubleDataFrameColumn op_Multiply(ByteDataFrameColumn left, DoubleDataFrameColumn right);
    public static SingleDataFrameColumn op_Multiply(ByteDataFrameColumn left, SingleDataFrameColumn right);
    public static Int32DataFrameColumn op_Multiply(ByteDataFrameColumn left, Int32DataFrameColumn right);
    public static Int64DataFrameColumn op_Multiply(ByteDataFrameColumn left, Int64DataFrameColumn right);
    public static Int32DataFrameColumn op_Multiply(ByteDataFrameColumn left, SByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Multiply(ByteDataFrameColumn left, Int16DataFrameColumn right);
    public static UInt32DataFrameColumn op_Multiply(ByteDataFrameColumn left, UInt32DataFrameColumn right);
    public static UInt64DataFrameColumn op_Multiply(ByteDataFrameColumn left, UInt64DataFrameColumn right);
    public static Int32DataFrameColumn op_Multiply(ByteDataFrameColumn left, UInt16DataFrameColumn right);
    public static Int32DataFrameColumn op_Multiply(ByteDataFrameColumn left, byte right);
    public static Int32DataFrameColumn op_Multiply(byte left, ByteDataFrameColumn right);
    public static DecimalDataFrameColumn op_Multiply(ByteDataFrameColumn left, decimal right);
    public static DecimalDataFrameColumn op_Multiply(decimal left, ByteDataFrameColumn right);
    public static DoubleDataFrameColumn op_Multiply(ByteDataFrameColumn left, double right);
    public static DoubleDataFrameColumn op_Multiply(double left, ByteDataFrameColumn right);
    public static SingleDataFrameColumn op_Multiply(ByteDataFrameColumn left, float right);
    public static SingleDataFrameColumn op_Multiply(float left, ByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Multiply(ByteDataFrameColumn left, int right);
    public static Int32DataFrameColumn op_Multiply(int left, ByteDataFrameColumn right);
    public static Int64DataFrameColumn op_Multiply(ByteDataFrameColumn left, long right);
    public static Int64DataFrameColumn op_Multiply(long left, ByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Multiply(ByteDataFrameColumn left, sbyte right);
    public static Int32DataFrameColumn op_Multiply(sbyte left, ByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Multiply(ByteDataFrameColumn left, short right);
    public static Int32DataFrameColumn op_Multiply(short left, ByteDataFrameColumn right);
    public static UInt32DataFrameColumn op_Multiply(ByteDataFrameColumn left, UInt32 right);
    public static UInt32DataFrameColumn op_Multiply(UInt32 left, ByteDataFrameColumn right);
    public static UInt64DataFrameColumn op_Multiply(ByteDataFrameColumn left, ulong right);
    public static UInt64DataFrameColumn op_Multiply(ulong left, ByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Multiply(ByteDataFrameColumn left, ushort right);
    public static Int32DataFrameColumn op_Multiply(ushort left, ByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Division(ByteDataFrameColumn left, ByteDataFrameColumn right);
    public static DecimalDataFrameColumn op_Division(ByteDataFrameColumn left, DecimalDataFrameColumn right);
    public static DoubleDataFrameColumn op_Division(ByteDataFrameColumn left, DoubleDataFrameColumn right);
    public static SingleDataFrameColumn op_Division(ByteDataFrameColumn left, SingleDataFrameColumn right);
    public static Int32DataFrameColumn op_Division(ByteDataFrameColumn left, Int32DataFrameColumn right);
    public static Int64DataFrameColumn op_Division(ByteDataFrameColumn left, Int64DataFrameColumn right);
    public static Int32DataFrameColumn op_Division(ByteDataFrameColumn left, SByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Division(ByteDataFrameColumn left, Int16DataFrameColumn right);
    public static UInt32DataFrameColumn op_Division(ByteDataFrameColumn left, UInt32DataFrameColumn right);
    public static UInt64DataFrameColumn op_Division(ByteDataFrameColumn left, UInt64DataFrameColumn right);
    public static Int32DataFrameColumn op_Division(ByteDataFrameColumn left, UInt16DataFrameColumn right);
    public static Int32DataFrameColumn op_Division(ByteDataFrameColumn left, byte right);
    public static Int32DataFrameColumn op_Division(byte left, ByteDataFrameColumn right);
    public static DecimalDataFrameColumn op_Division(ByteDataFrameColumn left, decimal right);
    public static DecimalDataFrameColumn op_Division(decimal left, ByteDataFrameColumn right);
    public static DoubleDataFrameColumn op_Division(ByteDataFrameColumn left, double right);
    public static DoubleDataFrameColumn op_Division(double left, ByteDataFrameColumn right);
    public static SingleDataFrameColumn op_Division(ByteDataFrameColumn left, float right);
    public static SingleDataFrameColumn op_Division(float left, ByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Division(ByteDataFrameColumn left, int right);
    public static Int32DataFrameColumn op_Division(int left, ByteDataFrameColumn right);
    public static Int64DataFrameColumn op_Division(ByteDataFrameColumn left, long right);
    public static Int64DataFrameColumn op_Division(long left, ByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Division(ByteDataFrameColumn left, sbyte right);
    public static Int32DataFrameColumn op_Division(sbyte left, ByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Division(ByteDataFrameColumn left, short right);
    public static Int32DataFrameColumn op_Division(short left, ByteDataFrameColumn right);
    public static UInt32DataFrameColumn op_Division(ByteDataFrameColumn left, UInt32 right);
    public static UInt32DataFrameColumn op_Division(UInt32 left, ByteDataFrameColumn right);
    public static UInt64DataFrameColumn op_Division(ByteDataFrameColumn left, ulong right);
    public static UInt64DataFrameColumn op_Division(ulong left, ByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Division(ByteDataFrameColumn left, ushort right);
    public static Int32DataFrameColumn op_Division(ushort left, ByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Modulus(ByteDataFrameColumn left, ByteDataFrameColumn right);
    public static DecimalDataFrameColumn op_Modulus(ByteDataFrameColumn left, DecimalDataFrameColumn right);
    public static DoubleDataFrameColumn op_Modulus(ByteDataFrameColumn left, DoubleDataFrameColumn right);
    public static SingleDataFrameColumn op_Modulus(ByteDataFrameColumn left, SingleDataFrameColumn right);
    public static Int32DataFrameColumn op_Modulus(ByteDataFrameColumn left, Int32DataFrameColumn right);
    public static Int64DataFrameColumn op_Modulus(ByteDataFrameColumn left, Int64DataFrameColumn right);
    public static Int32DataFrameColumn op_Modulus(ByteDataFrameColumn left, SByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Modulus(ByteDataFrameColumn left, Int16DataFrameColumn right);
    public static UInt32DataFrameColumn op_Modulus(ByteDataFrameColumn left, UInt32DataFrameColumn right);
    public static UInt64DataFrameColumn op_Modulus(ByteDataFrameColumn left, UInt64DataFrameColumn right);
    public static Int32DataFrameColumn op_Modulus(ByteDataFrameColumn left, UInt16DataFrameColumn right);
    public static Int32DataFrameColumn op_Modulus(ByteDataFrameColumn left, byte right);
    public static Int32DataFrameColumn op_Modulus(byte left, ByteDataFrameColumn right);
    public static DecimalDataFrameColumn op_Modulus(ByteDataFrameColumn left, decimal right);
    public static DecimalDataFrameColumn op_Modulus(decimal left, ByteDataFrameColumn right);
    public static DoubleDataFrameColumn op_Modulus(ByteDataFrameColumn left, double right);
    public static DoubleDataFrameColumn op_Modulus(double left, ByteDataFrameColumn right);
    public static SingleDataFrameColumn op_Modulus(ByteDataFrameColumn left, float right);
    public static SingleDataFrameColumn op_Modulus(float left, ByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Modulus(ByteDataFrameColumn left, int right);
    public static Int32DataFrameColumn op_Modulus(int left, ByteDataFrameColumn right);
    public static Int64DataFrameColumn op_Modulus(ByteDataFrameColumn left, long right);
    public static Int64DataFrameColumn op_Modulus(long left, ByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Modulus(ByteDataFrameColumn left, sbyte right);
    public static Int32DataFrameColumn op_Modulus(sbyte left, ByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Modulus(ByteDataFrameColumn left, short right);
    public static Int32DataFrameColumn op_Modulus(short left, ByteDataFrameColumn right);
    public static UInt32DataFrameColumn op_Modulus(ByteDataFrameColumn left, UInt32 right);
    public static UInt32DataFrameColumn op_Modulus(UInt32 left, ByteDataFrameColumn right);
    public static UInt64DataFrameColumn op_Modulus(ByteDataFrameColumn left, ulong right);
    public static UInt64DataFrameColumn op_Modulus(ulong left, ByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Modulus(ByteDataFrameColumn left, ushort right);
    public static Int32DataFrameColumn op_Modulus(ushort left, ByteDataFrameColumn right);
    public static Int32DataFrameColumn op_LeftShift(ByteDataFrameColumn left, int value);
    public static Int32DataFrameColumn op_RightShift(ByteDataFrameColumn left, int value);
}
internal class Microsoft.Data.Analysis.ByteDecimalConverter : object {
    public sealed virtual decimal GetDecimal(byte value);
}
internal class Microsoft.Data.Analysis.ByteDoubleConverter : object {
    public sealed virtual double GetDouble(byte value);
}
internal class Microsoft.Data.Analysis.ByteInt16Converter : object {
    public sealed virtual short GetInt16(byte value);
}
internal class Microsoft.Data.Analysis.ByteInt32Converter : object {
    public sealed virtual int GetInt32(byte value);
}
internal class Microsoft.Data.Analysis.ByteInt64Converter : object {
    public sealed virtual long GetInt64(byte value);
}
internal class Microsoft.Data.Analysis.ByteSByteConverter : object {
    public sealed virtual sbyte GetSByte(byte value);
}
internal class Microsoft.Data.Analysis.ByteSingleConverter : object {
    public sealed virtual float GetSingle(byte value);
}
internal class Microsoft.Data.Analysis.ByteUInt16Converter : object {
    public sealed virtual ushort GetUInt16(byte value);
}
internal class Microsoft.Data.Analysis.ByteUInt32Converter : object {
    public sealed virtual UInt32 GetUInt32(byte value);
}
internal class Microsoft.Data.Analysis.ByteUInt64Converter : object {
    public sealed virtual ulong GetUInt64(byte value);
}
internal class Microsoft.Data.Analysis.CharArithmetic : object {
    public sealed virtual void Add(PrimitiveColumnContainer`1<char> left, PrimitiveColumnContainer`1<char> right);
    public sealed virtual void Add(PrimitiveColumnContainer`1<char> column, char scalar);
    public sealed virtual void Add(char scalar, PrimitiveColumnContainer`1<char> column);
    public sealed virtual void Subtract(PrimitiveColumnContainer`1<char> left, PrimitiveColumnContainer`1<char> right);
    public sealed virtual void Subtract(PrimitiveColumnContainer`1<char> column, char scalar);
    public sealed virtual void Subtract(char scalar, PrimitiveColumnContainer`1<char> column);
    public sealed virtual void Multiply(PrimitiveColumnContainer`1<char> left, PrimitiveColumnContainer`1<char> right);
    public sealed virtual void Multiply(PrimitiveColumnContainer`1<char> column, char scalar);
    public sealed virtual void Multiply(char scalar, PrimitiveColumnContainer`1<char> column);
    public sealed virtual void Divide(PrimitiveColumnContainer`1<char> left, PrimitiveColumnContainer`1<char> right);
    public sealed virtual void Divide(PrimitiveColumnContainer`1<char> column, char scalar);
    public sealed virtual void Divide(char scalar, PrimitiveColumnContainer`1<char> column);
    public sealed virtual void Modulo(PrimitiveColumnContainer`1<char> left, PrimitiveColumnContainer`1<char> right);
    public sealed virtual void Modulo(PrimitiveColumnContainer`1<char> column, char scalar);
    public sealed virtual void Modulo(char scalar, PrimitiveColumnContainer`1<char> column);
    public sealed virtual void And(PrimitiveColumnContainer`1<char> left, PrimitiveColumnContainer`1<char> right);
    public sealed virtual void And(PrimitiveColumnContainer`1<char> column, char scalar);
    public sealed virtual void And(char scalar, PrimitiveColumnContainer`1<char> column);
    public sealed virtual void Or(PrimitiveColumnContainer`1<char> left, PrimitiveColumnContainer`1<char> right);
    public sealed virtual void Or(PrimitiveColumnContainer`1<char> column, char scalar);
    public sealed virtual void Or(char scalar, PrimitiveColumnContainer`1<char> column);
    public sealed virtual void Xor(PrimitiveColumnContainer`1<char> left, PrimitiveColumnContainer`1<char> right);
    public sealed virtual void Xor(PrimitiveColumnContainer`1<char> column, char scalar);
    public sealed virtual void Xor(char scalar, PrimitiveColumnContainer`1<char> column);
    public sealed virtual void LeftShift(PrimitiveColumnContainer`1<char> column, int value);
    public sealed virtual void RightShift(PrimitiveColumnContainer`1<char> column, int value);
    public sealed virtual void ElementwiseEquals(PrimitiveColumnContainer`1<char> left, PrimitiveColumnContainer`1<char> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseEquals(PrimitiveColumnContainer`1<char> column, char scalar, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseNotEquals(PrimitiveColumnContainer`1<char> left, PrimitiveColumnContainer`1<char> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseNotEquals(PrimitiveColumnContainer`1<char> column, char scalar, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseGreaterThanOrEqual(PrimitiveColumnContainer`1<char> left, PrimitiveColumnContainer`1<char> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseGreaterThanOrEqual(PrimitiveColumnContainer`1<char> column, char scalar, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseLessThanOrEqual(PrimitiveColumnContainer`1<char> left, PrimitiveColumnContainer`1<char> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseLessThanOrEqual(PrimitiveColumnContainer`1<char> column, char scalar, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseGreaterThan(PrimitiveColumnContainer`1<char> left, PrimitiveColumnContainer`1<char> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseGreaterThan(PrimitiveColumnContainer`1<char> column, char scalar, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseLessThan(PrimitiveColumnContainer`1<char> left, PrimitiveColumnContainer`1<char> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseLessThan(PrimitiveColumnContainer`1<char> column, char scalar, PrimitiveColumnContainer`1<bool> ret);
}
internal class Microsoft.Data.Analysis.CharComputation : object {
    public sealed virtual void Abs(PrimitiveColumnContainer`1<char> column);
    public sealed virtual void All(PrimitiveColumnContainer`1<char> column, Boolean& ret);
    public sealed virtual void Any(PrimitiveColumnContainer`1<char> column, Boolean& ret);
    public sealed virtual void CumulativeMax(PrimitiveColumnContainer`1<char> column);
    public sealed virtual void CumulativeMax(PrimitiveColumnContainer`1<char> column, IEnumerable`1<long> rows);
    public sealed virtual void CumulativeMin(PrimitiveColumnContainer`1<char> column);
    public sealed virtual void CumulativeMin(PrimitiveColumnContainer`1<char> column, IEnumerable`1<long> rows);
    public sealed virtual void CumulativeProduct(PrimitiveColumnContainer`1<char> column);
    public sealed virtual void CumulativeProduct(PrimitiveColumnContainer`1<char> column, IEnumerable`1<long> rows);
    public sealed virtual void CumulativeSum(PrimitiveColumnContainer`1<char> column);
    public sealed virtual void CumulativeSum(PrimitiveColumnContainer`1<char> column, IEnumerable`1<long> rows);
    public sealed virtual void Max(PrimitiveColumnContainer`1<char> column, Char& ret);
    public sealed virtual void Max(PrimitiveColumnContainer`1<char> column, IEnumerable`1<long> rows, Char& ret);
    public sealed virtual void Min(PrimitiveColumnContainer`1<char> column, Char& ret);
    public sealed virtual void Min(PrimitiveColumnContainer`1<char> column, IEnumerable`1<long> rows, Char& ret);
    public sealed virtual void Product(PrimitiveColumnContainer`1<char> column, Char& ret);
    public sealed virtual void Product(PrimitiveColumnContainer`1<char> column, IEnumerable`1<long> rows, Char& ret);
    public sealed virtual void Sum(PrimitiveColumnContainer`1<char> column, Char& ret);
    public sealed virtual void Sum(PrimitiveColumnContainer`1<char> column, IEnumerable`1<long> rows, Char& ret);
    public sealed virtual void Round(PrimitiveColumnContainer`1<char> column);
}
public class Microsoft.Data.Analysis.CharDataFrameColumn : PrimitiveDataFrameColumn`1<char> {
    public CharDataFrameColumn(string name, IEnumerable`1<Nullable`1<char>> values);
    public CharDataFrameColumn(string name, IEnumerable`1<char> values);
    public CharDataFrameColumn(string name, long length);
    public CharDataFrameColumn(string name, ReadOnlyMemory`1<byte> buffer, ReadOnlyMemory`1<byte> nullBitMap, int length, int nullCount);
    internal CharDataFrameColumn(string name, PrimitiveColumnContainer`1<char> values);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Data.Analysis.DataFrame : object {
    private DataFrameColumnCollection _columnCollection;
    private DataFrameRowCollection _rowCollection;
    private DataViewSchema _schema;
    private static int DefaultStreamReaderBufferSize;
    public DataFrameColumnCollection Columns { get; }
    public DataFrameRowCollection Rows { get; }
    public object Item { get; public set; }
    public DataFrame Item { get; }
    public DataFrame Item { get; }
    public DataFrame Item { get; }
    public DataFrame Item { get; }
    public DataFrame Item { get; }
    public DataFrame Item { get; }
    public DataFrameColumn Item { get; public set; }
    private bool Microsoft.ML.IDataView.CanShuffle { get; }
    private DataViewSchema DataViewSchema { get; }
    private DataViewSchema Microsoft.ML.IDataView.Schema { get; }
    public DataFrame(IEnumerable`1<DataFrameColumn> columns);
    public DataFrame(DataFrameColumn[] columns);
    private static void AppendDataFrameColumnFromArrowArray(Field field, IArrowArray arrowArray, DataFrame ret, string fieldNamePrefix);
    public static DataFrame FromArrowRecordBatch(RecordBatch recordBatch);
    [IteratorStateMachineAttribute("Microsoft.Data.Analysis.DataFrame/<ToArrowRecordBatches>d__2")]
public IEnumerable`1<RecordBatch> ToArrowRecordBatches();
    public DataFrame Add(IReadOnlyList`1<T> values, bool inPlace);
    public DataFrame Add(T value, bool inPlace);
    public DataFrame Subtract(IReadOnlyList`1<T> values, bool inPlace);
    public DataFrame Subtract(T value, bool inPlace);
    public DataFrame Multiply(IReadOnlyList`1<T> values, bool inPlace);
    public DataFrame Multiply(T value, bool inPlace);
    public DataFrame Divide(IReadOnlyList`1<T> values, bool inPlace);
    public DataFrame Divide(T value, bool inPlace);
    public DataFrame Modulo(IReadOnlyList`1<T> values, bool inPlace);
    public DataFrame Modulo(T value, bool inPlace);
    public DataFrame And(IReadOnlyList`1<bool> values, bool inPlace);
    public DataFrame And(bool value, bool inPlace);
    public DataFrame Or(IReadOnlyList`1<bool> values, bool inPlace);
    public DataFrame Or(bool value, bool inPlace);
    public DataFrame Xor(IReadOnlyList`1<bool> values, bool inPlace);
    public DataFrame Xor(bool value, bool inPlace);
    public DataFrame LeftShift(int value, bool inPlace);
    public DataFrame RightShift(int value, bool inPlace);
    public DataFrame ElementwiseEquals(IReadOnlyList`1<T> values);
    public DataFrame ElementwiseEquals(T value);
    public DataFrame ElementwiseNotEquals(IReadOnlyList`1<T> values);
    public DataFrame ElementwiseNotEquals(T value);
    public DataFrame ElementwiseGreaterThanOrEqual(IReadOnlyList`1<T> values);
    public DataFrame ElementwiseGreaterThanOrEqual(T value);
    public DataFrame ElementwiseLessThanOrEqual(IReadOnlyList`1<T> values);
    public DataFrame ElementwiseLessThanOrEqual(T value);
    public DataFrame ElementwiseGreaterThan(IReadOnlyList`1<T> values);
    public DataFrame ElementwiseGreaterThan(T value);
    public DataFrame ElementwiseLessThan(IReadOnlyList`1<T> values);
    public DataFrame ElementwiseLessThan(T value);
    public DataFrame ReverseAdd(T value, bool inPlace);
    public DataFrame ReverseSubtract(T value, bool inPlace);
    public DataFrame ReverseMultiply(T value, bool inPlace);
    public DataFrame ReverseDivide(T value, bool inPlace);
    public DataFrame ReverseModulo(T value, bool inPlace);
    public DataFrame ReverseAnd(bool value, bool inPlace);
    public DataFrame ReverseOr(bool value, bool inPlace);
    public DataFrame ReverseXor(bool value, bool inPlace);
    public static DataFrame op_Addition(DataFrame df, byte value);
    public static DataFrame op_Addition(byte value, DataFrame df);
    public static DataFrame op_Addition(DataFrame df, decimal value);
    public static DataFrame op_Addition(decimal value, DataFrame df);
    public static DataFrame op_Addition(DataFrame df, double value);
    public static DataFrame op_Addition(double value, DataFrame df);
    public static DataFrame op_Addition(DataFrame df, float value);
    public static DataFrame op_Addition(float value, DataFrame df);
    public static DataFrame op_Addition(DataFrame df, int value);
    public static DataFrame op_Addition(int value, DataFrame df);
    public static DataFrame op_Addition(DataFrame df, long value);
    public static DataFrame op_Addition(long value, DataFrame df);
    public static DataFrame op_Addition(DataFrame df, sbyte value);
    public static DataFrame op_Addition(sbyte value, DataFrame df);
    public static DataFrame op_Addition(DataFrame df, short value);
    public static DataFrame op_Addition(short value, DataFrame df);
    public static DataFrame op_Addition(DataFrame df, UInt32 value);
    public static DataFrame op_Addition(UInt32 value, DataFrame df);
    public static DataFrame op_Addition(DataFrame df, ulong value);
    public static DataFrame op_Addition(ulong value, DataFrame df);
    public static DataFrame op_Addition(DataFrame df, ushort value);
    public static DataFrame op_Addition(ushort value, DataFrame df);
    public static DataFrame op_Subtraction(DataFrame df, byte value);
    public static DataFrame op_Subtraction(byte value, DataFrame df);
    public static DataFrame op_Subtraction(DataFrame df, decimal value);
    public static DataFrame op_Subtraction(decimal value, DataFrame df);
    public static DataFrame op_Subtraction(DataFrame df, double value);
    public static DataFrame op_Subtraction(double value, DataFrame df);
    public static DataFrame op_Subtraction(DataFrame df, float value);
    public static DataFrame op_Subtraction(float value, DataFrame df);
    public static DataFrame op_Subtraction(DataFrame df, int value);
    public static DataFrame op_Subtraction(int value, DataFrame df);
    public static DataFrame op_Subtraction(DataFrame df, long value);
    public static DataFrame op_Subtraction(long value, DataFrame df);
    public static DataFrame op_Subtraction(DataFrame df, sbyte value);
    public static DataFrame op_Subtraction(sbyte value, DataFrame df);
    public static DataFrame op_Subtraction(DataFrame df, short value);
    public static DataFrame op_Subtraction(short value, DataFrame df);
    public static DataFrame op_Subtraction(DataFrame df, UInt32 value);
    public static DataFrame op_Subtraction(UInt32 value, DataFrame df);
    public static DataFrame op_Subtraction(DataFrame df, ulong value);
    public static DataFrame op_Subtraction(ulong value, DataFrame df);
    public static DataFrame op_Subtraction(DataFrame df, ushort value);
    public static DataFrame op_Subtraction(ushort value, DataFrame df);
    public static DataFrame op_Multiply(DataFrame df, byte value);
    public static DataFrame op_Multiply(byte value, DataFrame df);
    public static DataFrame op_Multiply(DataFrame df, decimal value);
    public static DataFrame op_Multiply(decimal value, DataFrame df);
    public static DataFrame op_Multiply(DataFrame df, double value);
    public static DataFrame op_Multiply(double value, DataFrame df);
    public static DataFrame op_Multiply(DataFrame df, float value);
    public static DataFrame op_Multiply(float value, DataFrame df);
    public static DataFrame op_Multiply(DataFrame df, int value);
    public static DataFrame op_Multiply(int value, DataFrame df);
    public static DataFrame op_Multiply(DataFrame df, long value);
    public static DataFrame op_Multiply(long value, DataFrame df);
    public static DataFrame op_Multiply(DataFrame df, sbyte value);
    public static DataFrame op_Multiply(sbyte value, DataFrame df);
    public static DataFrame op_Multiply(DataFrame df, short value);
    public static DataFrame op_Multiply(short value, DataFrame df);
    public static DataFrame op_Multiply(DataFrame df, UInt32 value);
    public static DataFrame op_Multiply(UInt32 value, DataFrame df);
    public static DataFrame op_Multiply(DataFrame df, ulong value);
    public static DataFrame op_Multiply(ulong value, DataFrame df);
    public static DataFrame op_Multiply(DataFrame df, ushort value);
    public static DataFrame op_Multiply(ushort value, DataFrame df);
    public static DataFrame op_Division(DataFrame df, byte value);
    public static DataFrame op_Division(byte value, DataFrame df);
    public static DataFrame op_Division(DataFrame df, decimal value);
    public static DataFrame op_Division(decimal value, DataFrame df);
    public static DataFrame op_Division(DataFrame df, double value);
    public static DataFrame op_Division(double value, DataFrame df);
    public static DataFrame op_Division(DataFrame df, float value);
    public static DataFrame op_Division(float value, DataFrame df);
    public static DataFrame op_Division(DataFrame df, int value);
    public static DataFrame op_Division(int value, DataFrame df);
    public static DataFrame op_Division(DataFrame df, long value);
    public static DataFrame op_Division(long value, DataFrame df);
    public static DataFrame op_Division(DataFrame df, sbyte value);
    public static DataFrame op_Division(sbyte value, DataFrame df);
    public static DataFrame op_Division(DataFrame df, short value);
    public static DataFrame op_Division(short value, DataFrame df);
    public static DataFrame op_Division(DataFrame df, UInt32 value);
    public static DataFrame op_Division(UInt32 value, DataFrame df);
    public static DataFrame op_Division(DataFrame df, ulong value);
    public static DataFrame op_Division(ulong value, DataFrame df);
    public static DataFrame op_Division(DataFrame df, ushort value);
    public static DataFrame op_Division(ushort value, DataFrame df);
    public static DataFrame op_Modulus(DataFrame df, byte value);
    public static DataFrame op_Modulus(byte value, DataFrame df);
    public static DataFrame op_Modulus(DataFrame df, decimal value);
    public static DataFrame op_Modulus(decimal value, DataFrame df);
    public static DataFrame op_Modulus(DataFrame df, double value);
    public static DataFrame op_Modulus(double value, DataFrame df);
    public static DataFrame op_Modulus(DataFrame df, float value);
    public static DataFrame op_Modulus(float value, DataFrame df);
    public static DataFrame op_Modulus(DataFrame df, int value);
    public static DataFrame op_Modulus(int value, DataFrame df);
    public static DataFrame op_Modulus(DataFrame df, long value);
    public static DataFrame op_Modulus(long value, DataFrame df);
    public static DataFrame op_Modulus(DataFrame df, sbyte value);
    public static DataFrame op_Modulus(sbyte value, DataFrame df);
    public static DataFrame op_Modulus(DataFrame df, short value);
    public static DataFrame op_Modulus(short value, DataFrame df);
    public static DataFrame op_Modulus(DataFrame df, UInt32 value);
    public static DataFrame op_Modulus(UInt32 value, DataFrame df);
    public static DataFrame op_Modulus(DataFrame df, ulong value);
    public static DataFrame op_Modulus(ulong value, DataFrame df);
    public static DataFrame op_Modulus(DataFrame df, ushort value);
    public static DataFrame op_Modulus(ushort value, DataFrame df);
    public static DataFrame op_LeftShift(DataFrame df, int value);
    public static DataFrame op_RightShift(DataFrame df, int value);
    public DataFrameColumnCollection get_Columns();
    public DataFrameRowCollection get_Rows();
    internal IReadOnlyList`1<string> GetColumnNames();
    public object get_Item(long rowIndex, int columnIndex);
    public void set_Item(long rowIndex, int columnIndex, object value);
    public DataFrame Filter(PrimitiveDataFrameColumn`1<bool> filter);
    public DataFrame Filter(PrimitiveDataFrameColumn`1<int> rowIndices);
    public DataFrame Filter(PrimitiveDataFrameColumn`1<long> rowIndices);
    public DataFrame get_Item(PrimitiveDataFrameColumn`1<bool> rowFilter);
    public DataFrame get_Item(PrimitiveDataFrameColumn`1<int> rowIndices);
    public DataFrame get_Item(PrimitiveDataFrameColumn`1<long> rowIndices);
    public DataFrame get_Item(IEnumerable`1<int> rowIndices);
    public DataFrame get_Item(IEnumerable`1<long> rowIndices);
    public DataFrame get_Item(IEnumerable`1<bool> rowFilter);
    public DataFrameColumn get_Item(string columnName);
    public void set_Item(string columnName, DataFrameColumn value);
    public DataFrame Head(int numberOfRows);
    public DataFrame Tail(int numberOfRows);
    public DataFrame Clone();
    private DataFrame Clone(DataFrameColumn mapIndices, bool invertMapIndices);
    public DataFrame Info();
    public DataFrame Description();
    public DataFrame OrderBy(string columnName);
    public DataFrame OrderByDescending(string columnName);
    public DataFrame Clamp(U min, U max, bool inPlace);
    public DataFrame AddPrefix(string prefix, bool inPlace);
    public DataFrame AddSuffix(string suffix, bool inPlace);
    public DataFrame Sample(int numberOfRows);
    public GroupBy GroupBy(string columnName);
    public GroupBy`1<TKey> GroupBy(string columnName);
    internal void SetTableRowCount(long rowCount);
    public DataFrame DropNulls(DropNullOptions options);
    public DataFrame FillNulls(object value, bool inPlace);
    public DataFrame FillNulls(IList`1<object> values, bool inPlace);
    private void ResizeByOneAndAppend(DataFrameColumn column, object value);
    public DataFrame Append(IEnumerable`1<DataFrameRow> rows, bool inPlace);
    public DataFrame Append(IEnumerable`1<object> row, bool inPlace);
    public DataFrame Append(IEnumerable`1<KeyValuePair`2<string, object>> row, bool inPlace);
    private void OnColumnsChanged();
    private DataFrame Sort(string columnName, bool isAscending);
    public virtual string ToString();
    private sealed virtual override bool Microsoft.ML.IDataView.get_CanShuffle();
    private DataViewSchema get_DataViewSchema();
    private sealed virtual override DataViewSchema Microsoft.ML.IDataView.get_Schema();
    private sealed virtual override Nullable`1<long> Microsoft.ML.IDataView.GetRowCount();
    private DataViewRowCursor GetRowCursorCore(IEnumerable`1<Column> columnsNeeded);
    private sealed virtual override DataViewRowCursor Microsoft.ML.IDataView.GetRowCursor(IEnumerable`1<Column> columnsNeeded, Random rand);
    private sealed virtual override DataViewRowCursor[] Microsoft.ML.IDataView.GetRowCursorSet(IEnumerable`1<Column> columnsNeeded, int n, Random rand);
    private static Type GuessKind(int col, List`1<String[]> read);
    private static Type DetermineType(bool first, Type suggested, Type previous);
    private static Type MaxKind(Type a, Type b);
    public static DataFrame LoadCsv(string filename, char separator, bool header, String[] columnNames, Type[] dataTypes, int numRows, int guessRows, bool addIndexColumn, Encoding encoding);
    private static string GetColumnName(String[] columnNames, int columnIndex);
    private static DataFrameColumn CreateColumn(Type kind, String[] columnNames, int columnIndex);
    private static DataFrame ReadCsvLinesIntoDataFrame(WrappedStreamReaderOrStringReader wrappedReader, char separator, bool header, String[] columnNames, Type[] dataTypes, long numberOfRowsToRead, int guessRows, bool addIndexColumn);
    public static DataFrame LoadCsvFromString(string csvString, char separator, bool header, String[] columnNames, Type[] dataTypes, long numberOfRowsToRead, int guessRows, bool addIndexColumn);
    public static DataFrame LoadCsv(Stream csvStream, char separator, bool header, String[] columnNames, Type[] dataTypes, long numberOfRowsToRead, int guessRows, bool addIndexColumn, Encoding encoding);
    public static void WriteCsv(DataFrame dataFrame, string path, char separator, bool header, Encoding encoding, CultureInfo cultureInfo);
    public static void WriteCsv(DataFrame dataFrame, Stream csvStream, char separator, bool header, Encoding encoding, CultureInfo cultureInfo);
    private void SetSuffixForDuplicatedColumnNames(DataFrame dataFrame, DataFrameColumn column, string leftSuffix, string rightSuffix);
    public DataFrame Join(DataFrame other, string leftSuffix, string rightSuffix, JoinAlgorithm joinAlgorithm);
    public DataFrame Merge(DataFrame other, string leftJoinColumn, string rightJoinColumn, string leftSuffix, string rightSuffix, JoinAlgorithm joinAlgorithm);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Data.Analysis.DataFrameBuffer`1 : ReadOnlyDataFrameBuffer`1<T> {
    private Memory`1<byte> _memory;
    public ReadOnlyMemory`1<byte> ReadOnlyBuffer { get; }
    public Memory`1<byte> Buffer { get; }
    public Span`1<T> Span { get; }
    public Span`1<T> RawSpan { get; }
    unknown T Item {internal set; }
    public DataFrameBuffer`1(int numberOfValues);
    internal DataFrameBuffer`1(ReadOnlyMemory`1<byte> buffer, int length);
    public virtual ReadOnlyMemory`1<byte> get_ReadOnlyBuffer();
    public Memory`1<byte> get_Buffer();
    public Span`1<T> get_Span();
    public Span`1<T> get_RawSpan();
    public void Append(T value);
    public void EnsureCapacity(int numberOfValues);
    internal virtual void set_Item(int index, T value);
    internal static DataFrameBuffer`1<T> GetMutableBuffer(ReadOnlyDataFrameBuffer`1<T> buffer);
}
[DefaultMemberAttribute("Item")]
public abstract class Microsoft.Data.Analysis.DataFrameColumn : object {
    private long _length;
    private string _name;
    [CompilerGeneratedAttribute]
private Type <DataType>k__BackingField;
    public long Length { get; protected set; }
    public long NullCount { get; }
    public string Name { get; }
    public Type DataType { get; }
    public object Item { get; public set; }
    public IReadOnlyList`1<object> Item { get; }
    protected DataFrameColumn(string name, long length, Type type);
    public virtual DataFrameColumn Add(DataFrameColumn column, bool inPlace);
    public virtual DataFrameColumn Add(T value, bool inPlace);
    public virtual DataFrameColumn ReverseAdd(T value, bool inPlace);
    public virtual DataFrameColumn Subtract(DataFrameColumn column, bool inPlace);
    public virtual DataFrameColumn Subtract(T value, bool inPlace);
    public virtual DataFrameColumn ReverseSubtract(T value, bool inPlace);
    public virtual DataFrameColumn Multiply(DataFrameColumn column, bool inPlace);
    public virtual DataFrameColumn Multiply(T value, bool inPlace);
    public virtual DataFrameColumn ReverseMultiply(T value, bool inPlace);
    public virtual DataFrameColumn Divide(DataFrameColumn column, bool inPlace);
    public virtual DataFrameColumn Divide(T value, bool inPlace);
    public virtual DataFrameColumn ReverseDivide(T value, bool inPlace);
    public virtual DataFrameColumn Modulo(DataFrameColumn column, bool inPlace);
    public virtual DataFrameColumn Modulo(T value, bool inPlace);
    public virtual DataFrameColumn ReverseModulo(T value, bool inPlace);
    public virtual DataFrameColumn And(DataFrameColumn column, bool inPlace);
    public virtual PrimitiveDataFrameColumn`1<bool> And(bool value, bool inPlace);
    public virtual PrimitiveDataFrameColumn`1<bool> ReverseAnd(bool value, bool inPlace);
    public virtual DataFrameColumn Or(DataFrameColumn column, bool inPlace);
    public virtual PrimitiveDataFrameColumn`1<bool> Or(bool value, bool inPlace);
    public virtual PrimitiveDataFrameColumn`1<bool> ReverseOr(bool value, bool inPlace);
    public virtual DataFrameColumn Xor(DataFrameColumn column, bool inPlace);
    public virtual PrimitiveDataFrameColumn`1<bool> Xor(bool value, bool inPlace);
    public virtual PrimitiveDataFrameColumn`1<bool> ReverseXor(bool value, bool inPlace);
    public virtual DataFrameColumn LeftShift(int value, bool inPlace);
    public virtual DataFrameColumn RightShift(int value, bool inPlace);
    public virtual PrimitiveDataFrameColumn`1<bool> ElementwiseEquals(DataFrameColumn column);
    public virtual PrimitiveDataFrameColumn`1<bool> ElementwiseEquals(T value);
    public virtual PrimitiveDataFrameColumn`1<bool> ElementwiseNotEquals(DataFrameColumn column);
    public virtual PrimitiveDataFrameColumn`1<bool> ElementwiseNotEquals(T value);
    public virtual PrimitiveDataFrameColumn`1<bool> ElementwiseGreaterThanOrEqual(DataFrameColumn column);
    public virtual PrimitiveDataFrameColumn`1<bool> ElementwiseGreaterThanOrEqual(T value);
    public virtual PrimitiveDataFrameColumn`1<bool> ElementwiseLessThanOrEqual(DataFrameColumn column);
    public virtual PrimitiveDataFrameColumn`1<bool> ElementwiseLessThanOrEqual(T value);
    public virtual PrimitiveDataFrameColumn`1<bool> ElementwiseGreaterThan(DataFrameColumn column);
    public virtual PrimitiveDataFrameColumn`1<bool> ElementwiseGreaterThan(T value);
    public virtual PrimitiveDataFrameColumn`1<bool> ElementwiseLessThan(DataFrameColumn column);
    public virtual PrimitiveDataFrameColumn`1<bool> ElementwiseLessThan(T value);
    public static DataFrameColumn op_Addition(DataFrameColumn left, DataFrameColumn right);
    public static DataFrameColumn op_Addition(DataFrameColumn column, byte value);
    public static DataFrameColumn op_Addition(byte value, DataFrameColumn column);
    public static DataFrameColumn op_Addition(DataFrameColumn column, decimal value);
    public static DataFrameColumn op_Addition(decimal value, DataFrameColumn column);
    public static DataFrameColumn op_Addition(DataFrameColumn column, double value);
    public static DataFrameColumn op_Addition(double value, DataFrameColumn column);
    public static DataFrameColumn op_Addition(DataFrameColumn column, float value);
    public static DataFrameColumn op_Addition(float value, DataFrameColumn column);
    public static DataFrameColumn op_Addition(DataFrameColumn column, int value);
    public static DataFrameColumn op_Addition(int value, DataFrameColumn column);
    public static DataFrameColumn op_Addition(DataFrameColumn column, long value);
    public static DataFrameColumn op_Addition(long value, DataFrameColumn column);
    public static DataFrameColumn op_Addition(DataFrameColumn column, sbyte value);
    public static DataFrameColumn op_Addition(sbyte value, DataFrameColumn column);
    public static DataFrameColumn op_Addition(DataFrameColumn column, short value);
    public static DataFrameColumn op_Addition(short value, DataFrameColumn column);
    public static DataFrameColumn op_Addition(DataFrameColumn column, UInt32 value);
    public static DataFrameColumn op_Addition(UInt32 value, DataFrameColumn column);
    public static DataFrameColumn op_Addition(DataFrameColumn column, ulong value);
    public static DataFrameColumn op_Addition(ulong value, DataFrameColumn column);
    public static DataFrameColumn op_Addition(DataFrameColumn column, ushort value);
    public static DataFrameColumn op_Addition(ushort value, DataFrameColumn column);
    public static DataFrameColumn op_Subtraction(DataFrameColumn left, DataFrameColumn right);
    public static DataFrameColumn op_Subtraction(DataFrameColumn column, byte value);
    public static DataFrameColumn op_Subtraction(byte value, DataFrameColumn column);
    public static DataFrameColumn op_Subtraction(DataFrameColumn column, decimal value);
    public static DataFrameColumn op_Subtraction(decimal value, DataFrameColumn column);
    public static DataFrameColumn op_Subtraction(DataFrameColumn column, double value);
    public static DataFrameColumn op_Subtraction(double value, DataFrameColumn column);
    public static DataFrameColumn op_Subtraction(DataFrameColumn column, float value);
    public static DataFrameColumn op_Subtraction(float value, DataFrameColumn column);
    public static DataFrameColumn op_Subtraction(DataFrameColumn column, int value);
    public static DataFrameColumn op_Subtraction(int value, DataFrameColumn column);
    public static DataFrameColumn op_Subtraction(DataFrameColumn column, long value);
    public static DataFrameColumn op_Subtraction(long value, DataFrameColumn column);
    public static DataFrameColumn op_Subtraction(DataFrameColumn column, sbyte value);
    public static DataFrameColumn op_Subtraction(sbyte value, DataFrameColumn column);
    public static DataFrameColumn op_Subtraction(DataFrameColumn column, short value);
    public static DataFrameColumn op_Subtraction(short value, DataFrameColumn column);
    public static DataFrameColumn op_Subtraction(DataFrameColumn column, UInt32 value);
    public static DataFrameColumn op_Subtraction(UInt32 value, DataFrameColumn column);
    public static DataFrameColumn op_Subtraction(DataFrameColumn column, ulong value);
    public static DataFrameColumn op_Subtraction(ulong value, DataFrameColumn column);
    public static DataFrameColumn op_Subtraction(DataFrameColumn column, ushort value);
    public static DataFrameColumn op_Subtraction(ushort value, DataFrameColumn column);
    public static DataFrameColumn op_Multiply(DataFrameColumn left, DataFrameColumn right);
    public static DataFrameColumn op_Multiply(DataFrameColumn column, byte value);
    public static DataFrameColumn op_Multiply(byte value, DataFrameColumn column);
    public static DataFrameColumn op_Multiply(DataFrameColumn column, decimal value);
    public static DataFrameColumn op_Multiply(decimal value, DataFrameColumn column);
    public static DataFrameColumn op_Multiply(DataFrameColumn column, double value);
    public static DataFrameColumn op_Multiply(double value, DataFrameColumn column);
    public static DataFrameColumn op_Multiply(DataFrameColumn column, float value);
    public static DataFrameColumn op_Multiply(float value, DataFrameColumn column);
    public static DataFrameColumn op_Multiply(DataFrameColumn column, int value);
    public static DataFrameColumn op_Multiply(int value, DataFrameColumn column);
    public static DataFrameColumn op_Multiply(DataFrameColumn column, long value);
    public static DataFrameColumn op_Multiply(long value, DataFrameColumn column);
    public static DataFrameColumn op_Multiply(DataFrameColumn column, sbyte value);
    public static DataFrameColumn op_Multiply(sbyte value, DataFrameColumn column);
    public static DataFrameColumn op_Multiply(DataFrameColumn column, short value);
    public static DataFrameColumn op_Multiply(short value, DataFrameColumn column);
    public static DataFrameColumn op_Multiply(DataFrameColumn column, UInt32 value);
    public static DataFrameColumn op_Multiply(UInt32 value, DataFrameColumn column);
    public static DataFrameColumn op_Multiply(DataFrameColumn column, ulong value);
    public static DataFrameColumn op_Multiply(ulong value, DataFrameColumn column);
    public static DataFrameColumn op_Multiply(DataFrameColumn column, ushort value);
    public static DataFrameColumn op_Multiply(ushort value, DataFrameColumn column);
    public static DataFrameColumn op_Division(DataFrameColumn left, DataFrameColumn right);
    public static DataFrameColumn op_Division(DataFrameColumn column, byte value);
    public static DataFrameColumn op_Division(byte value, DataFrameColumn column);
    public static DataFrameColumn op_Division(DataFrameColumn column, decimal value);
    public static DataFrameColumn op_Division(decimal value, DataFrameColumn column);
    public static DataFrameColumn op_Division(DataFrameColumn column, double value);
    public static DataFrameColumn op_Division(double value, DataFrameColumn column);
    public static DataFrameColumn op_Division(DataFrameColumn column, float value);
    public static DataFrameColumn op_Division(float value, DataFrameColumn column);
    public static DataFrameColumn op_Division(DataFrameColumn column, int value);
    public static DataFrameColumn op_Division(int value, DataFrameColumn column);
    public static DataFrameColumn op_Division(DataFrameColumn column, long value);
    public static DataFrameColumn op_Division(long value, DataFrameColumn column);
    public static DataFrameColumn op_Division(DataFrameColumn column, sbyte value);
    public static DataFrameColumn op_Division(sbyte value, DataFrameColumn column);
    public static DataFrameColumn op_Division(DataFrameColumn column, short value);
    public static DataFrameColumn op_Division(short value, DataFrameColumn column);
    public static DataFrameColumn op_Division(DataFrameColumn column, UInt32 value);
    public static DataFrameColumn op_Division(UInt32 value, DataFrameColumn column);
    public static DataFrameColumn op_Division(DataFrameColumn column, ulong value);
    public static DataFrameColumn op_Division(ulong value, DataFrameColumn column);
    public static DataFrameColumn op_Division(DataFrameColumn column, ushort value);
    public static DataFrameColumn op_Division(ushort value, DataFrameColumn column);
    public static DataFrameColumn op_Modulus(DataFrameColumn left, DataFrameColumn right);
    public static DataFrameColumn op_Modulus(DataFrameColumn column, byte value);
    public static DataFrameColumn op_Modulus(byte value, DataFrameColumn column);
    public static DataFrameColumn op_Modulus(DataFrameColumn column, decimal value);
    public static DataFrameColumn op_Modulus(decimal value, DataFrameColumn column);
    public static DataFrameColumn op_Modulus(DataFrameColumn column, double value);
    public static DataFrameColumn op_Modulus(double value, DataFrameColumn column);
    public static DataFrameColumn op_Modulus(DataFrameColumn column, float value);
    public static DataFrameColumn op_Modulus(float value, DataFrameColumn column);
    public static DataFrameColumn op_Modulus(DataFrameColumn column, int value);
    public static DataFrameColumn op_Modulus(int value, DataFrameColumn column);
    public static DataFrameColumn op_Modulus(DataFrameColumn column, long value);
    public static DataFrameColumn op_Modulus(long value, DataFrameColumn column);
    public static DataFrameColumn op_Modulus(DataFrameColumn column, sbyte value);
    public static DataFrameColumn op_Modulus(sbyte value, DataFrameColumn column);
    public static DataFrameColumn op_Modulus(DataFrameColumn column, short value);
    public static DataFrameColumn op_Modulus(short value, DataFrameColumn column);
    public static DataFrameColumn op_Modulus(DataFrameColumn column, UInt32 value);
    public static DataFrameColumn op_Modulus(UInt32 value, DataFrameColumn column);
    public static DataFrameColumn op_Modulus(DataFrameColumn column, ulong value);
    public static DataFrameColumn op_Modulus(ulong value, DataFrameColumn column);
    public static DataFrameColumn op_Modulus(DataFrameColumn column, ushort value);
    public static DataFrameColumn op_Modulus(ushort value, DataFrameColumn column);
    public static DataFrameColumn op_BitwiseAnd(DataFrameColumn left, DataFrameColumn right);
    public static DataFrameColumn op_BitwiseAnd(DataFrameColumn column, bool value);
    public static DataFrameColumn op_BitwiseAnd(bool value, DataFrameColumn column);
    public static DataFrameColumn op_BitwiseOr(DataFrameColumn left, DataFrameColumn right);
    public static DataFrameColumn op_BitwiseOr(DataFrameColumn column, bool value);
    public static DataFrameColumn op_BitwiseOr(bool value, DataFrameColumn column);
    public static DataFrameColumn op_ExclusiveOr(DataFrameColumn left, DataFrameColumn right);
    public static DataFrameColumn op_ExclusiveOr(DataFrameColumn column, bool value);
    public static DataFrameColumn op_ExclusiveOr(bool value, DataFrameColumn column);
    public static DataFrameColumn op_LeftShift(DataFrameColumn column, int value);
    public static DataFrameColumn op_RightShift(DataFrameColumn column, int value);
    public virtual DataFrameColumn Abs(bool inPlace);
    public virtual bool All();
    public virtual bool Any();
    public virtual DataFrameColumn CumulativeMax(bool inPlace);
    public virtual DataFrameColumn CumulativeMax(IEnumerable`1<long> rowIndices, bool inPlace);
    public virtual DataFrameColumn CumulativeMin(bool inPlace);
    public virtual DataFrameColumn CumulativeMin(IEnumerable`1<long> rowIndices, bool inPlace);
    public virtual DataFrameColumn CumulativeProduct(bool inPlace);
    public virtual DataFrameColumn CumulativeProduct(IEnumerable`1<long> rowIndices, bool inPlace);
    public virtual DataFrameColumn CumulativeSum(bool inPlace);
    public virtual DataFrameColumn CumulativeSum(IEnumerable`1<long> rowIndices, bool inPlace);
    public virtual object Max();
    public virtual object Max(IEnumerable`1<long> rowIndices);
    public virtual object Min();
    public virtual object Min(IEnumerable`1<long> rowIndices);
    public virtual object Product();
    public virtual object Product(IEnumerable`1<long> rowIndices);
    public virtual object Sum();
    public virtual object Sum(IEnumerable`1<long> rowIndices);
    public virtual DataFrameColumn Round(bool inPlace);
    public static PrimitiveDataFrameColumn`1<T> Create(string name, IEnumerable`1<Nullable`1<T>> values);
    public static PrimitiveDataFrameColumn`1<T> Create(string name, IEnumerable`1<T> values);
    public static StringDataFrameColumn Create(string name, IEnumerable`1<string> values);
    public long get_Length();
    protected void set_Length(long value);
    public abstract virtual long get_NullCount();
    public string get_Name();
    public void SetName(string newName, DataFrame dataFrame);
    [CompilerGeneratedAttribute]
public Type get_DataType();
    public object get_Item(long rowIndex);
    public void set_Item(long rowIndex, object value);
    protected abstract virtual object GetValue(long rowIndex);
    protected abstract virtual IReadOnlyList`1<object> GetValues(long startIndex, int length);
    protected abstract virtual void SetValue(long rowIndex, object value);
    public IReadOnlyList`1<object> get_Item(long startIndex, int length);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    protected abstract virtual IEnumerator GetEnumeratorCore();
    protected internal virtual void Resize(long length);
    public virtual DataFrameColumn Clone(DataFrameColumn mapIndices, bool invertMapIndices, long numberOfNullsToAppend);
    protected virtual DataFrameColumn CloneImplementation(DataFrameColumn mapIndices, bool invertMapIndices, long numberOfNullsToAppend);
    public virtual DataFrameColumn Sort(bool ascending);
    public virtual Dictionary`2<TKey, ICollection`1<long>> GroupColumnValues(HashSet`1& nullIndices);
    public virtual DataFrame ValueCounts();
    public virtual GroupBy GroupBy(int columnIndex, DataFrame parent);
    public virtual DataFrameColumn FillNulls(object value, bool inPlace);
    protected virtual DataFrameColumn FillNullsImplementation(object value, bool inPlace);
    protected internal virtual Field GetArrowField();
    protected internal virtual int GetMaxRecordBatchLength(long startIndex);
    protected internal virtual Array ToArrowArray(long startIndex, int numberOfRows);
    protected internal virtual Delegate GetDataViewGetter(DataViewRowCursor cursor);
    protected internal virtual void AddDataViewColumn(Builder builder);
    protected internal virtual void AddValueUsingCursor(DataViewRowCursor cursor, Delegate ValueGetter);
    protected internal virtual Delegate GetValueGetterUsingCursor(DataViewRowCursor cursor, Column schemaColumn);
    public virtual DataFrameColumn Clamp(U min, U max, bool inPlace);
    protected virtual DataFrameColumn ClampImplementation(U min, U max, bool inPlace);
    public virtual DataFrameColumn Filter(U min, U max);
    protected virtual DataFrameColumn FilterImplementation(U min, U max);
    public virtual bool IsNumericColumn();
    public virtual double Mean();
    public virtual double Median();
    public virtual bool HasDescription();
    public virtual StringDataFrameColumn Info();
    public virtual DataFrameColumn Description();
    internal virtual PrimitiveDataFrameColumn`1<long> GetAscendingSortIndices(Int64DataFrameColumn& nullIndices);
    internal void PopulateColumnSortIndicesWithHeap(SortedDictionary`2<T, List`1<ValueTuple`2<int, int>>> heapOfValueAndListOfTupleOfSortAndBufferIndex, PrimitiveDataFrameColumn`1<long> columnSortIndices, GetBufferSortIndex getBufferSortIndex, GetValueAndBufferSortIndexAtBuffer`1<T> getValueAndBufferSortIndexAtBuffer, GetBufferLengthAtIndex getBufferLengthAtIndex);
    internal static int FloorLog2PlusOne(int n);
    internal static void IntrospectiveSort(ReadOnlySpan`1<T> span, int length, Span`1<int> sortIndices, IComparer`1<T> comparer);
    internal static void IntroSortRecursive(ReadOnlySpan`1<T> span, int lo, int hi, int depthLimit, Span`1<int> sortIndices, IComparer`1<T> comparer);
    private static int PickPivotAndPartition(ReadOnlySpan`1<TKey> span, int lo, int hi, Span`1<int> sortIndices, TComparer comparer);
    internal static void Swap(TKey& a, TKey& b);
    private static void HeapSort(ReadOnlySpan`1<TKey> span, int lo, int hi, Span`1<int> sortIndices, TComparer comparer);
    private static void DownHeap(ReadOnlySpan`1<TKey> span, int i, int n, int lo, Span`1<int> sortIndices, TComparer comparer);
    private static void InsertionSort(ReadOnlySpan`1<TKey> span, int lo, int hi, Span`1<int> sortIndices, TComparer comparer);
    private static void Sort3(ReadOnlySpan`1<TKey> span, int i, int j, int k, Span`1<int> sortIndices, TComparer comparer);
    private static void Sort2(ReadOnlySpan`1<TKey> span, int i, int j, Span`1<int> sortIndices, IComparer`1<TKey> comparer);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Data.Analysis.DataFrameColumnCollection : Collection`1<DataFrameColumn> {
    private Action ColumnsChanged;
    private List`1<string> _columnNames;
    private Dictionary`2<string, int> _columnNameToIndexDictionary;
    [CompilerGeneratedAttribute]
private long <RowCount>k__BackingField;
    internal long RowCount { get; internal set; }
    public DataFrameColumn Item { get; public set; }
    internal DataFrameColumnCollection(IEnumerable`1<DataFrameColumn> columns, Action columnsChanged);
    [CompilerGeneratedAttribute]
internal long get_RowCount();
    [CompilerGeneratedAttribute]
internal void set_RowCount(long value);
    internal IReadOnlyList`1<string> GetColumnNames();
    public void SetColumnName(DataFrameColumn column, string newName);
    public void Insert(int columnIndex, IEnumerable`1<T> column, string columnName);
    protected virtual void InsertItem(int columnIndex, DataFrameColumn column);
    protected virtual void SetItem(int columnIndex, DataFrameColumn column);
    protected virtual void RemoveItem(int columnIndex);
    public void Remove(string columnName);
    public int IndexOf(string columnName);
    protected virtual void ClearItems();
    public DataFrameColumn get_Item(string columnName);
    public void set_Item(string columnName, DataFrameColumn value);
    public PrimitiveDataFrameColumn`1<T> GetPrimitiveColumn(string name);
    public ArrowStringDataFrameColumn GetArrowStringColumn(string name);
    public StringDataFrameColumn GetStringColumn(string name);
    public BooleanDataFrameColumn GetBooleanColumn(string name);
    public ByteDataFrameColumn GetByteColumn(string name);
    public CharDataFrameColumn GetCharColumn(string name);
    public DoubleDataFrameColumn GetDoubleColumn(string name);
    public DecimalDataFrameColumn GetDecimalColumn(string name);
    public SingleDataFrameColumn GetSingleColumn(string name);
    public Int32DataFrameColumn GetInt32Column(string name);
    public Int64DataFrameColumn GetInt64Column(string name);
    public SByteDataFrameColumn GetSByteColumn(string name);
    public Int16DataFrameColumn GetInt16Column(string name);
    public UInt32DataFrameColumn GetUInt32Column(string name);
    public UInt64DataFrameColumn GetUInt64Column(string name);
    public UInt16DataFrameColumn GetUInt16Column(string name);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Data.Analysis.DataFrameRow : object {
    private DataFrame _dataFrame;
    private long _rowIndex;
    public object Item { get; public set; }
    internal DataFrameRow(DataFrame df, long rowIndex);
    [IteratorStateMachineAttribute("Microsoft.Data.Analysis.DataFrameRow/<GetEnumerator>d__3")]
public sealed virtual IEnumerator`1<object> GetEnumerator();
    public object get_Item(int index);
    public void set_Item(int index, object value);
    public virtual string ToString();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Data.Analysis.DataFrameRowCollection : object {
    private DataFrame _dataFrame;
    public DataFrameRow Item { get; }
    public long Count { get; }
    internal DataFrameRowCollection(DataFrame dataFrame);
    public DataFrameRow get_Item(long index);
    [IteratorStateMachineAttribute("Microsoft.Data.Analysis.DataFrameRowCollection/<GetEnumerator>d__4")]
public sealed virtual IEnumerator`1<DataFrameRow> GetEnumerator();
    public long get_Count();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class Microsoft.Data.Analysis.DateTimeComputation : object {
    public sealed virtual void Abs(PrimitiveColumnContainer`1<DateTime> column);
    public sealed virtual void All(PrimitiveColumnContainer`1<DateTime> column, Boolean& ret);
    public sealed virtual void Any(PrimitiveColumnContainer`1<DateTime> column, Boolean& ret);
    public sealed virtual void CumulativeMax(PrimitiveColumnContainer`1<DateTime> column);
    public sealed virtual void CumulativeMax(PrimitiveColumnContainer`1<DateTime> column, IEnumerable`1<long> rows);
    public sealed virtual void CumulativeMin(PrimitiveColumnContainer`1<DateTime> column);
    public sealed virtual void CumulativeMin(PrimitiveColumnContainer`1<DateTime> column, IEnumerable`1<long> rows);
    public sealed virtual void CumulativeProduct(PrimitiveColumnContainer`1<DateTime> column);
    public sealed virtual void CumulativeProduct(PrimitiveColumnContainer`1<DateTime> column, IEnumerable`1<long> rows);
    public sealed virtual void CumulativeSum(PrimitiveColumnContainer`1<DateTime> column);
    public sealed virtual void CumulativeSum(PrimitiveColumnContainer`1<DateTime> column, IEnumerable`1<long> rows);
    public sealed virtual void Max(PrimitiveColumnContainer`1<DateTime> column, DateTime& ret);
    public sealed virtual void Max(PrimitiveColumnContainer`1<DateTime> column, IEnumerable`1<long> rows, DateTime& ret);
    public sealed virtual void Min(PrimitiveColumnContainer`1<DateTime> column, DateTime& ret);
    public sealed virtual void Min(PrimitiveColumnContainer`1<DateTime> column, IEnumerable`1<long> rows, DateTime& ret);
    public sealed virtual void Product(PrimitiveColumnContainer`1<DateTime> column, DateTime& ret);
    public sealed virtual void Product(PrimitiveColumnContainer`1<DateTime> column, IEnumerable`1<long> rows, DateTime& ret);
    public sealed virtual void Sum(PrimitiveColumnContainer`1<DateTime> column, DateTime& ret);
    public sealed virtual void Sum(PrimitiveColumnContainer`1<DateTime> column, IEnumerable`1<long> rows, DateTime& ret);
    public sealed virtual void Round(PrimitiveColumnContainer`1<DateTime> column);
}
internal class Microsoft.Data.Analysis.DecimalArithmetic : object {
    public sealed virtual void Add(PrimitiveColumnContainer`1<decimal> left, PrimitiveColumnContainer`1<decimal> right);
    public sealed virtual void Add(PrimitiveColumnContainer`1<decimal> column, decimal scalar);
    public sealed virtual void Add(decimal scalar, PrimitiveColumnContainer`1<decimal> column);
    public sealed virtual void Subtract(PrimitiveColumnContainer`1<decimal> left, PrimitiveColumnContainer`1<decimal> right);
    public sealed virtual void Subtract(PrimitiveColumnContainer`1<decimal> column, decimal scalar);
    public sealed virtual void Subtract(decimal scalar, PrimitiveColumnContainer`1<decimal> column);
    public sealed virtual void Multiply(PrimitiveColumnContainer`1<decimal> left, PrimitiveColumnContainer`1<decimal> right);
    public sealed virtual void Multiply(PrimitiveColumnContainer`1<decimal> column, decimal scalar);
    public sealed virtual void Multiply(decimal scalar, PrimitiveColumnContainer`1<decimal> column);
    public sealed virtual void Divide(PrimitiveColumnContainer`1<decimal> left, PrimitiveColumnContainer`1<decimal> right);
    public sealed virtual void Divide(PrimitiveColumnContainer`1<decimal> column, decimal scalar);
    public sealed virtual void Divide(decimal scalar, PrimitiveColumnContainer`1<decimal> column);
    public sealed virtual void Modulo(PrimitiveColumnContainer`1<decimal> left, PrimitiveColumnContainer`1<decimal> right);
    public sealed virtual void Modulo(PrimitiveColumnContainer`1<decimal> column, decimal scalar);
    public sealed virtual void Modulo(decimal scalar, PrimitiveColumnContainer`1<decimal> column);
    public sealed virtual void And(PrimitiveColumnContainer`1<decimal> left, PrimitiveColumnContainer`1<decimal> right);
    public sealed virtual void And(PrimitiveColumnContainer`1<decimal> column, decimal scalar);
    public sealed virtual void And(decimal scalar, PrimitiveColumnContainer`1<decimal> column);
    public sealed virtual void Or(PrimitiveColumnContainer`1<decimal> left, PrimitiveColumnContainer`1<decimal> right);
    public sealed virtual void Or(PrimitiveColumnContainer`1<decimal> column, decimal scalar);
    public sealed virtual void Or(decimal scalar, PrimitiveColumnContainer`1<decimal> column);
    public sealed virtual void Xor(PrimitiveColumnContainer`1<decimal> left, PrimitiveColumnContainer`1<decimal> right);
    public sealed virtual void Xor(PrimitiveColumnContainer`1<decimal> column, decimal scalar);
    public sealed virtual void Xor(decimal scalar, PrimitiveColumnContainer`1<decimal> column);
    public sealed virtual void LeftShift(PrimitiveColumnContainer`1<decimal> column, int value);
    public sealed virtual void RightShift(PrimitiveColumnContainer`1<decimal> column, int value);
    public sealed virtual void ElementwiseEquals(PrimitiveColumnContainer`1<decimal> left, PrimitiveColumnContainer`1<decimal> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseEquals(PrimitiveColumnContainer`1<decimal> column, decimal scalar, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseNotEquals(PrimitiveColumnContainer`1<decimal> left, PrimitiveColumnContainer`1<decimal> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseNotEquals(PrimitiveColumnContainer`1<decimal> column, decimal scalar, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseGreaterThanOrEqual(PrimitiveColumnContainer`1<decimal> left, PrimitiveColumnContainer`1<decimal> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseGreaterThanOrEqual(PrimitiveColumnContainer`1<decimal> column, decimal scalar, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseLessThanOrEqual(PrimitiveColumnContainer`1<decimal> left, PrimitiveColumnContainer`1<decimal> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseLessThanOrEqual(PrimitiveColumnContainer`1<decimal> column, decimal scalar, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseGreaterThan(PrimitiveColumnContainer`1<decimal> left, PrimitiveColumnContainer`1<decimal> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseGreaterThan(PrimitiveColumnContainer`1<decimal> column, decimal scalar, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseLessThan(PrimitiveColumnContainer`1<decimal> left, PrimitiveColumnContainer`1<decimal> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseLessThan(PrimitiveColumnContainer`1<decimal> column, decimal scalar, PrimitiveColumnContainer`1<bool> ret);
}
internal class Microsoft.Data.Analysis.DecimalComputation : object {
    public sealed virtual void Abs(PrimitiveColumnContainer`1<decimal> column);
    public sealed virtual void All(PrimitiveColumnContainer`1<decimal> column, Boolean& ret);
    public sealed virtual void Any(PrimitiveColumnContainer`1<decimal> column, Boolean& ret);
    public sealed virtual void CumulativeMax(PrimitiveColumnContainer`1<decimal> column);
    public sealed virtual void CumulativeMax(PrimitiveColumnContainer`1<decimal> column, IEnumerable`1<long> rows);
    public sealed virtual void CumulativeMin(PrimitiveColumnContainer`1<decimal> column);
    public sealed virtual void CumulativeMin(PrimitiveColumnContainer`1<decimal> column, IEnumerable`1<long> rows);
    public sealed virtual void CumulativeProduct(PrimitiveColumnContainer`1<decimal> column);
    public sealed virtual void CumulativeProduct(PrimitiveColumnContainer`1<decimal> column, IEnumerable`1<long> rows);
    public sealed virtual void CumulativeSum(PrimitiveColumnContainer`1<decimal> column);
    public sealed virtual void CumulativeSum(PrimitiveColumnContainer`1<decimal> column, IEnumerable`1<long> rows);
    public sealed virtual void Max(PrimitiveColumnContainer`1<decimal> column, Decimal& ret);
    public sealed virtual void Max(PrimitiveColumnContainer`1<decimal> column, IEnumerable`1<long> rows, Decimal& ret);
    public sealed virtual void Min(PrimitiveColumnContainer`1<decimal> column, Decimal& ret);
    public sealed virtual void Min(PrimitiveColumnContainer`1<decimal> column, IEnumerable`1<long> rows, Decimal& ret);
    public sealed virtual void Product(PrimitiveColumnContainer`1<decimal> column, Decimal& ret);
    public sealed virtual void Product(PrimitiveColumnContainer`1<decimal> column, IEnumerable`1<long> rows, Decimal& ret);
    public sealed virtual void Sum(PrimitiveColumnContainer`1<decimal> column, Decimal& ret);
    public sealed virtual void Sum(PrimitiveColumnContainer`1<decimal> column, IEnumerable`1<long> rows, Decimal& ret);
    public sealed virtual void Round(PrimitiveColumnContainer`1<decimal> column);
}
internal static class Microsoft.Data.Analysis.DecimalConverter : object {
    public static IDecimalConverter`1<T> GetDecimalConverter();
}
internal static class Microsoft.Data.Analysis.DecimalConverter`1 : object {
    [CompilerGeneratedAttribute]
private static IDecimalConverter`1<T> <Instance>k__BackingField;
    public static IDecimalConverter`1<T> Instance { get; }
    private static DecimalConverter`1();
    [CompilerGeneratedAttribute]
public static IDecimalConverter`1<T> get_Instance();
}
public class Microsoft.Data.Analysis.DecimalDataFrameColumn : PrimitiveDataFrameColumn`1<decimal> {
    public DecimalDataFrameColumn(string name, IEnumerable`1<Nullable`1<decimal>> values);
    public DecimalDataFrameColumn(string name, IEnumerable`1<decimal> values);
    public DecimalDataFrameColumn(string name, long length);
    public DecimalDataFrameColumn(string name, ReadOnlyMemory`1<byte> buffer, ReadOnlyMemory`1<byte> nullBitMap, int length, int nullCount);
    internal DecimalDataFrameColumn(string name, PrimitiveColumnContainer`1<decimal> values);
    public DecimalDataFrameColumn Add(ByteDataFrameColumn column, bool inPlace);
    public DecimalDataFrameColumn Subtract(ByteDataFrameColumn column, bool inPlace);
    public DecimalDataFrameColumn Multiply(ByteDataFrameColumn column, bool inPlace);
    public DecimalDataFrameColumn Divide(ByteDataFrameColumn column, bool inPlace);
    public DecimalDataFrameColumn Modulo(ByteDataFrameColumn column, bool inPlace);
    public DecimalDataFrameColumn Add(DecimalDataFrameColumn column, bool inPlace);
    public DecimalDataFrameColumn Subtract(DecimalDataFrameColumn column, bool inPlace);
    public DecimalDataFrameColumn Multiply(DecimalDataFrameColumn column, bool inPlace);
    public DecimalDataFrameColumn Divide(DecimalDataFrameColumn column, bool inPlace);
    public DecimalDataFrameColumn Modulo(DecimalDataFrameColumn column, bool inPlace);
    public DecimalDataFrameColumn Add(Int32DataFrameColumn column, bool inPlace);
    public DecimalDataFrameColumn Subtract(Int32DataFrameColumn column, bool inPlace);
    public DecimalDataFrameColumn Multiply(Int32DataFrameColumn column, bool inPlace);
    public DecimalDataFrameColumn Divide(Int32DataFrameColumn column, bool inPlace);
    public DecimalDataFrameColumn Modulo(Int32DataFrameColumn column, bool inPlace);
    public DecimalDataFrameColumn Add(Int64DataFrameColumn column, bool inPlace);
    public DecimalDataFrameColumn Subtract(Int64DataFrameColumn column, bool inPlace);
    public DecimalDataFrameColumn Multiply(Int64DataFrameColumn column, bool inPlace);
    public DecimalDataFrameColumn Divide(Int64DataFrameColumn column, bool inPlace);
    public DecimalDataFrameColumn Modulo(Int64DataFrameColumn column, bool inPlace);
    public DecimalDataFrameColumn Add(SByteDataFrameColumn column, bool inPlace);
    public DecimalDataFrameColumn Subtract(SByteDataFrameColumn column, bool inPlace);
    public DecimalDataFrameColumn Multiply(SByteDataFrameColumn column, bool inPlace);
    public DecimalDataFrameColumn Divide(SByteDataFrameColumn column, bool inPlace);
    public DecimalDataFrameColumn Modulo(SByteDataFrameColumn column, bool inPlace);
    public DecimalDataFrameColumn Add(Int16DataFrameColumn column, bool inPlace);
    public DecimalDataFrameColumn Subtract(Int16DataFrameColumn column, bool inPlace);
    public DecimalDataFrameColumn Multiply(Int16DataFrameColumn column, bool inPlace);
    public DecimalDataFrameColumn Divide(Int16DataFrameColumn column, bool inPlace);
    public DecimalDataFrameColumn Modulo(Int16DataFrameColumn column, bool inPlace);
    public DecimalDataFrameColumn Add(UInt32DataFrameColumn column, bool inPlace);
    public DecimalDataFrameColumn Subtract(UInt32DataFrameColumn column, bool inPlace);
    public DecimalDataFrameColumn Multiply(UInt32DataFrameColumn column, bool inPlace);
    public DecimalDataFrameColumn Divide(UInt32DataFrameColumn column, bool inPlace);
    public DecimalDataFrameColumn Modulo(UInt32DataFrameColumn column, bool inPlace);
    public DecimalDataFrameColumn Add(UInt64DataFrameColumn column, bool inPlace);
    public DecimalDataFrameColumn Subtract(UInt64DataFrameColumn column, bool inPlace);
    public DecimalDataFrameColumn Multiply(UInt64DataFrameColumn column, bool inPlace);
    public DecimalDataFrameColumn Divide(UInt64DataFrameColumn column, bool inPlace);
    public DecimalDataFrameColumn Modulo(UInt64DataFrameColumn column, bool inPlace);
    public DecimalDataFrameColumn Add(UInt16DataFrameColumn column, bool inPlace);
    public DecimalDataFrameColumn Subtract(UInt16DataFrameColumn column, bool inPlace);
    public DecimalDataFrameColumn Multiply(UInt16DataFrameColumn column, bool inPlace);
    public DecimalDataFrameColumn Divide(UInt16DataFrameColumn column, bool inPlace);
    public DecimalDataFrameColumn Modulo(UInt16DataFrameColumn column, bool inPlace);
    public DecimalDataFrameColumn Add(byte value, bool inPlace);
    public DecimalDataFrameColumn ReverseAdd(byte value, bool inPlace);
    public DecimalDataFrameColumn Subtract(byte value, bool inPlace);
    public DecimalDataFrameColumn ReverseSubtract(byte value, bool inPlace);
    public DecimalDataFrameColumn Multiply(byte value, bool inPlace);
    public DecimalDataFrameColumn ReverseMultiply(byte value, bool inPlace);
    public DecimalDataFrameColumn Divide(byte value, bool inPlace);
    public DecimalDataFrameColumn ReverseDivide(byte value, bool inPlace);
    public DecimalDataFrameColumn Modulo(byte value, bool inPlace);
    public DecimalDataFrameColumn ReverseModulo(byte value, bool inPlace);
    public DecimalDataFrameColumn Add(decimal value, bool inPlace);
    public DecimalDataFrameColumn ReverseAdd(decimal value, bool inPlace);
    public DecimalDataFrameColumn Subtract(decimal value, bool inPlace);
    public DecimalDataFrameColumn ReverseSubtract(decimal value, bool inPlace);
    public DecimalDataFrameColumn Multiply(decimal value, bool inPlace);
    public DecimalDataFrameColumn ReverseMultiply(decimal value, bool inPlace);
    public DecimalDataFrameColumn Divide(decimal value, bool inPlace);
    public DecimalDataFrameColumn ReverseDivide(decimal value, bool inPlace);
    public DecimalDataFrameColumn Modulo(decimal value, bool inPlace);
    public DecimalDataFrameColumn ReverseModulo(decimal value, bool inPlace);
    public DecimalDataFrameColumn Add(int value, bool inPlace);
    public DecimalDataFrameColumn ReverseAdd(int value, bool inPlace);
    public DecimalDataFrameColumn Subtract(int value, bool inPlace);
    public DecimalDataFrameColumn ReverseSubtract(int value, bool inPlace);
    public DecimalDataFrameColumn Multiply(int value, bool inPlace);
    public DecimalDataFrameColumn ReverseMultiply(int value, bool inPlace);
    public DecimalDataFrameColumn Divide(int value, bool inPlace);
    public DecimalDataFrameColumn ReverseDivide(int value, bool inPlace);
    public DecimalDataFrameColumn Modulo(int value, bool inPlace);
    public DecimalDataFrameColumn ReverseModulo(int value, bool inPlace);
    public DecimalDataFrameColumn Add(long value, bool inPlace);
    public DecimalDataFrameColumn ReverseAdd(long value, bool inPlace);
    public DecimalDataFrameColumn Subtract(long value, bool inPlace);
    public DecimalDataFrameColumn ReverseSubtract(long value, bool inPlace);
    public DecimalDataFrameColumn Multiply(long value, bool inPlace);
    public DecimalDataFrameColumn ReverseMultiply(long value, bool inPlace);
    public DecimalDataFrameColumn Divide(long value, bool inPlace);
    public DecimalDataFrameColumn ReverseDivide(long value, bool inPlace);
    public DecimalDataFrameColumn Modulo(long value, bool inPlace);
    public DecimalDataFrameColumn ReverseModulo(long value, bool inPlace);
    public DecimalDataFrameColumn Add(sbyte value, bool inPlace);
    public DecimalDataFrameColumn ReverseAdd(sbyte value, bool inPlace);
    public DecimalDataFrameColumn Subtract(sbyte value, bool inPlace);
    public DecimalDataFrameColumn ReverseSubtract(sbyte value, bool inPlace);
    public DecimalDataFrameColumn Multiply(sbyte value, bool inPlace);
    public DecimalDataFrameColumn ReverseMultiply(sbyte value, bool inPlace);
    public DecimalDataFrameColumn Divide(sbyte value, bool inPlace);
    public DecimalDataFrameColumn ReverseDivide(sbyte value, bool inPlace);
    public DecimalDataFrameColumn Modulo(sbyte value, bool inPlace);
    public DecimalDataFrameColumn ReverseModulo(sbyte value, bool inPlace);
    public DecimalDataFrameColumn Add(short value, bool inPlace);
    public DecimalDataFrameColumn ReverseAdd(short value, bool inPlace);
    public DecimalDataFrameColumn Subtract(short value, bool inPlace);
    public DecimalDataFrameColumn ReverseSubtract(short value, bool inPlace);
    public DecimalDataFrameColumn Multiply(short value, bool inPlace);
    public DecimalDataFrameColumn ReverseMultiply(short value, bool inPlace);
    public DecimalDataFrameColumn Divide(short value, bool inPlace);
    public DecimalDataFrameColumn ReverseDivide(short value, bool inPlace);
    public DecimalDataFrameColumn Modulo(short value, bool inPlace);
    public DecimalDataFrameColumn ReverseModulo(short value, bool inPlace);
    public DecimalDataFrameColumn Add(UInt32 value, bool inPlace);
    public DecimalDataFrameColumn ReverseAdd(UInt32 value, bool inPlace);
    public DecimalDataFrameColumn Subtract(UInt32 value, bool inPlace);
    public DecimalDataFrameColumn ReverseSubtract(UInt32 value, bool inPlace);
    public DecimalDataFrameColumn Multiply(UInt32 value, bool inPlace);
    public DecimalDataFrameColumn ReverseMultiply(UInt32 value, bool inPlace);
    public DecimalDataFrameColumn Divide(UInt32 value, bool inPlace);
    public DecimalDataFrameColumn ReverseDivide(UInt32 value, bool inPlace);
    public DecimalDataFrameColumn Modulo(UInt32 value, bool inPlace);
    public DecimalDataFrameColumn ReverseModulo(UInt32 value, bool inPlace);
    public DecimalDataFrameColumn Add(ulong value, bool inPlace);
    public DecimalDataFrameColumn ReverseAdd(ulong value, bool inPlace);
    public DecimalDataFrameColumn Subtract(ulong value, bool inPlace);
    public DecimalDataFrameColumn ReverseSubtract(ulong value, bool inPlace);
    public DecimalDataFrameColumn Multiply(ulong value, bool inPlace);
    public DecimalDataFrameColumn ReverseMultiply(ulong value, bool inPlace);
    public DecimalDataFrameColumn Divide(ulong value, bool inPlace);
    public DecimalDataFrameColumn ReverseDivide(ulong value, bool inPlace);
    public DecimalDataFrameColumn Modulo(ulong value, bool inPlace);
    public DecimalDataFrameColumn ReverseModulo(ulong value, bool inPlace);
    public DecimalDataFrameColumn Add(ushort value, bool inPlace);
    public DecimalDataFrameColumn ReverseAdd(ushort value, bool inPlace);
    public DecimalDataFrameColumn Subtract(ushort value, bool inPlace);
    public DecimalDataFrameColumn ReverseSubtract(ushort value, bool inPlace);
    public DecimalDataFrameColumn Multiply(ushort value, bool inPlace);
    public DecimalDataFrameColumn ReverseMultiply(ushort value, bool inPlace);
    public DecimalDataFrameColumn Divide(ushort value, bool inPlace);
    public DecimalDataFrameColumn ReverseDivide(ushort value, bool inPlace);
    public DecimalDataFrameColumn Modulo(ushort value, bool inPlace);
    public DecimalDataFrameColumn ReverseModulo(ushort value, bool inPlace);
    public BooleanDataFrameColumn ElementwiseEquals(ByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(ByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(ByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(ByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(ByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(ByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(DecimalDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(DecimalDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(DecimalDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(DecimalDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(DecimalDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(DecimalDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(Int32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(Int32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(Int32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(Int32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(Int32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(Int32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(Int64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(Int64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(Int64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(Int64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(Int64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(Int64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(SByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(SByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(SByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(SByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(SByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(SByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(Int16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(Int16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(Int16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(Int16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(Int16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(Int16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(UInt32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(UInt32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(UInt32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(UInt32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(UInt32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(UInt32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(UInt64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(UInt64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(UInt64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(UInt64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(UInt64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(UInt64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(UInt16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(UInt16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(UInt16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(UInt16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(UInt16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(UInt16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(byte value);
    public BooleanDataFrameColumn ElementwiseNotEquals(byte value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(byte value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(byte value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(byte value);
    public BooleanDataFrameColumn ElementwiseLessThan(byte value);
    public BooleanDataFrameColumn ElementwiseEquals(decimal value);
    public BooleanDataFrameColumn ElementwiseNotEquals(decimal value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(decimal value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(decimal value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(decimal value);
    public BooleanDataFrameColumn ElementwiseLessThan(decimal value);
    public BooleanDataFrameColumn ElementwiseEquals(int value);
    public BooleanDataFrameColumn ElementwiseNotEquals(int value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(int value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(int value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(int value);
    public BooleanDataFrameColumn ElementwiseLessThan(int value);
    public BooleanDataFrameColumn ElementwiseEquals(long value);
    public BooleanDataFrameColumn ElementwiseNotEquals(long value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(long value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(long value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(long value);
    public BooleanDataFrameColumn ElementwiseLessThan(long value);
    public BooleanDataFrameColumn ElementwiseEquals(sbyte value);
    public BooleanDataFrameColumn ElementwiseNotEquals(sbyte value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(sbyte value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(sbyte value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(sbyte value);
    public BooleanDataFrameColumn ElementwiseLessThan(sbyte value);
    public BooleanDataFrameColumn ElementwiseEquals(short value);
    public BooleanDataFrameColumn ElementwiseNotEquals(short value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(short value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(short value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(short value);
    public BooleanDataFrameColumn ElementwiseLessThan(short value);
    public BooleanDataFrameColumn ElementwiseEquals(UInt32 value);
    public BooleanDataFrameColumn ElementwiseNotEquals(UInt32 value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(UInt32 value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(UInt32 value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(UInt32 value);
    public BooleanDataFrameColumn ElementwiseLessThan(UInt32 value);
    public BooleanDataFrameColumn ElementwiseEquals(ulong value);
    public BooleanDataFrameColumn ElementwiseNotEquals(ulong value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(ulong value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(ulong value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(ulong value);
    public BooleanDataFrameColumn ElementwiseLessThan(ulong value);
    public BooleanDataFrameColumn ElementwiseEquals(ushort value);
    public BooleanDataFrameColumn ElementwiseNotEquals(ushort value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(ushort value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(ushort value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(ushort value);
    public BooleanDataFrameColumn ElementwiseLessThan(ushort value);
    internal DecimalDataFrameColumn AddImplementation(DecimalDataFrameColumn column, bool inPlace);
    internal DecimalDataFrameColumn AddImplementation(decimal value, bool inPlace);
    internal DecimalDataFrameColumn ReverseAddImplementation(decimal value, bool inPlace);
    internal DecimalDataFrameColumn SubtractImplementation(DecimalDataFrameColumn column, bool inPlace);
    internal DecimalDataFrameColumn SubtractImplementation(decimal value, bool inPlace);
    internal DecimalDataFrameColumn ReverseSubtractImplementation(decimal value, bool inPlace);
    internal DecimalDataFrameColumn MultiplyImplementation(DecimalDataFrameColumn column, bool inPlace);
    internal DecimalDataFrameColumn MultiplyImplementation(decimal value, bool inPlace);
    internal DecimalDataFrameColumn ReverseMultiplyImplementation(decimal value, bool inPlace);
    internal DecimalDataFrameColumn DivideImplementation(DecimalDataFrameColumn column, bool inPlace);
    internal DecimalDataFrameColumn DivideImplementation(decimal value, bool inPlace);
    internal DecimalDataFrameColumn ReverseDivideImplementation(decimal value, bool inPlace);
    internal DecimalDataFrameColumn ModuloImplementation(DecimalDataFrameColumn column, bool inPlace);
    internal DecimalDataFrameColumn ModuloImplementation(decimal value, bool inPlace);
    internal DecimalDataFrameColumn ReverseModuloImplementation(decimal value, bool inPlace);
    internal BooleanDataFrameColumn ElementwiseEqualsImplementation(DecimalDataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseEqualsImplementation(decimal value);
    internal BooleanDataFrameColumn ElementwiseNotEqualsImplementation(DecimalDataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseNotEqualsImplementation(decimal value);
    internal BooleanDataFrameColumn ElementwiseGreaterThanOrEqualImplementation(DecimalDataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseGreaterThanOrEqualImplementation(decimal value);
    internal BooleanDataFrameColumn ElementwiseLessThanOrEqualImplementation(DecimalDataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseLessThanOrEqualImplementation(decimal value);
    internal BooleanDataFrameColumn ElementwiseGreaterThanImplementation(DecimalDataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseGreaterThanImplementation(decimal value);
    internal BooleanDataFrameColumn ElementwiseLessThanImplementation(DecimalDataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseLessThanImplementation(decimal value);
    public static DecimalDataFrameColumn op_Addition(DecimalDataFrameColumn left, ByteDataFrameColumn right);
    public static DecimalDataFrameColumn op_Addition(DecimalDataFrameColumn left, DecimalDataFrameColumn right);
    public static DecimalDataFrameColumn op_Addition(DecimalDataFrameColumn left, Int32DataFrameColumn right);
    public static DecimalDataFrameColumn op_Addition(DecimalDataFrameColumn left, Int64DataFrameColumn right);
    public static DecimalDataFrameColumn op_Addition(DecimalDataFrameColumn left, SByteDataFrameColumn right);
    public static DecimalDataFrameColumn op_Addition(DecimalDataFrameColumn left, Int16DataFrameColumn right);
    public static DecimalDataFrameColumn op_Addition(DecimalDataFrameColumn left, UInt32DataFrameColumn right);
    public static DecimalDataFrameColumn op_Addition(DecimalDataFrameColumn left, UInt64DataFrameColumn right);
    public static DecimalDataFrameColumn op_Addition(DecimalDataFrameColumn left, UInt16DataFrameColumn right);
    public static DecimalDataFrameColumn op_Addition(DecimalDataFrameColumn left, byte right);
    public static DecimalDataFrameColumn op_Addition(byte left, DecimalDataFrameColumn right);
    public static DecimalDataFrameColumn op_Addition(DecimalDataFrameColumn left, decimal right);
    public static DecimalDataFrameColumn op_Addition(decimal left, DecimalDataFrameColumn right);
    public static DecimalDataFrameColumn op_Addition(DecimalDataFrameColumn left, int right);
    public static DecimalDataFrameColumn op_Addition(int left, DecimalDataFrameColumn right);
    public static DecimalDataFrameColumn op_Addition(DecimalDataFrameColumn left, long right);
    public static DecimalDataFrameColumn op_Addition(long left, DecimalDataFrameColumn right);
    public static DecimalDataFrameColumn op_Addition(DecimalDataFrameColumn left, sbyte right);
    public static DecimalDataFrameColumn op_Addition(sbyte left, DecimalDataFrameColumn right);
    public static DecimalDataFrameColumn op_Addition(DecimalDataFrameColumn left, short right);
    public static DecimalDataFrameColumn op_Addition(short left, DecimalDataFrameColumn right);
    public static DecimalDataFrameColumn op_Addition(DecimalDataFrameColumn left, UInt32 right);
    public static DecimalDataFrameColumn op_Addition(UInt32 left, DecimalDataFrameColumn right);
    public static DecimalDataFrameColumn op_Addition(DecimalDataFrameColumn left, ulong right);
    public static DecimalDataFrameColumn op_Addition(ulong left, DecimalDataFrameColumn right);
    public static DecimalDataFrameColumn op_Addition(DecimalDataFrameColumn left, ushort right);
    public static DecimalDataFrameColumn op_Addition(ushort left, DecimalDataFrameColumn right);
    public static DecimalDataFrameColumn op_Subtraction(DecimalDataFrameColumn left, ByteDataFrameColumn right);
    public static DecimalDataFrameColumn op_Subtraction(DecimalDataFrameColumn left, DecimalDataFrameColumn right);
    public static DecimalDataFrameColumn op_Subtraction(DecimalDataFrameColumn left, Int32DataFrameColumn right);
    public static DecimalDataFrameColumn op_Subtraction(DecimalDataFrameColumn left, Int64DataFrameColumn right);
    public static DecimalDataFrameColumn op_Subtraction(DecimalDataFrameColumn left, SByteDataFrameColumn right);
    public static DecimalDataFrameColumn op_Subtraction(DecimalDataFrameColumn left, Int16DataFrameColumn right);
    public static DecimalDataFrameColumn op_Subtraction(DecimalDataFrameColumn left, UInt32DataFrameColumn right);
    public static DecimalDataFrameColumn op_Subtraction(DecimalDataFrameColumn left, UInt64DataFrameColumn right);
    public static DecimalDataFrameColumn op_Subtraction(DecimalDataFrameColumn left, UInt16DataFrameColumn right);
    public static DecimalDataFrameColumn op_Subtraction(DecimalDataFrameColumn left, byte right);
    public static DecimalDataFrameColumn op_Subtraction(byte left, DecimalDataFrameColumn right);
    public static DecimalDataFrameColumn op_Subtraction(DecimalDataFrameColumn left, decimal right);
    public static DecimalDataFrameColumn op_Subtraction(decimal left, DecimalDataFrameColumn right);
    public static DecimalDataFrameColumn op_Subtraction(DecimalDataFrameColumn left, int right);
    public static DecimalDataFrameColumn op_Subtraction(int left, DecimalDataFrameColumn right);
    public static DecimalDataFrameColumn op_Subtraction(DecimalDataFrameColumn left, long right);
    public static DecimalDataFrameColumn op_Subtraction(long left, DecimalDataFrameColumn right);
    public static DecimalDataFrameColumn op_Subtraction(DecimalDataFrameColumn left, sbyte right);
    public static DecimalDataFrameColumn op_Subtraction(sbyte left, DecimalDataFrameColumn right);
    public static DecimalDataFrameColumn op_Subtraction(DecimalDataFrameColumn left, short right);
    public static DecimalDataFrameColumn op_Subtraction(short left, DecimalDataFrameColumn right);
    public static DecimalDataFrameColumn op_Subtraction(DecimalDataFrameColumn left, UInt32 right);
    public static DecimalDataFrameColumn op_Subtraction(UInt32 left, DecimalDataFrameColumn right);
    public static DecimalDataFrameColumn op_Subtraction(DecimalDataFrameColumn left, ulong right);
    public static DecimalDataFrameColumn op_Subtraction(ulong left, DecimalDataFrameColumn right);
    public static DecimalDataFrameColumn op_Subtraction(DecimalDataFrameColumn left, ushort right);
    public static DecimalDataFrameColumn op_Subtraction(ushort left, DecimalDataFrameColumn right);
    public static DecimalDataFrameColumn op_Multiply(DecimalDataFrameColumn left, ByteDataFrameColumn right);
    public static DecimalDataFrameColumn op_Multiply(DecimalDataFrameColumn left, DecimalDataFrameColumn right);
    public static DecimalDataFrameColumn op_Multiply(DecimalDataFrameColumn left, Int32DataFrameColumn right);
    public static DecimalDataFrameColumn op_Multiply(DecimalDataFrameColumn left, Int64DataFrameColumn right);
    public static DecimalDataFrameColumn op_Multiply(DecimalDataFrameColumn left, SByteDataFrameColumn right);
    public static DecimalDataFrameColumn op_Multiply(DecimalDataFrameColumn left, Int16DataFrameColumn right);
    public static DecimalDataFrameColumn op_Multiply(DecimalDataFrameColumn left, UInt32DataFrameColumn right);
    public static DecimalDataFrameColumn op_Multiply(DecimalDataFrameColumn left, UInt64DataFrameColumn right);
    public static DecimalDataFrameColumn op_Multiply(DecimalDataFrameColumn left, UInt16DataFrameColumn right);
    public static DecimalDataFrameColumn op_Multiply(DecimalDataFrameColumn left, byte right);
    public static DecimalDataFrameColumn op_Multiply(byte left, DecimalDataFrameColumn right);
    public static DecimalDataFrameColumn op_Multiply(DecimalDataFrameColumn left, decimal right);
    public static DecimalDataFrameColumn op_Multiply(decimal left, DecimalDataFrameColumn right);
    public static DecimalDataFrameColumn op_Multiply(DecimalDataFrameColumn left, int right);
    public static DecimalDataFrameColumn op_Multiply(int left, DecimalDataFrameColumn right);
    public static DecimalDataFrameColumn op_Multiply(DecimalDataFrameColumn left, long right);
    public static DecimalDataFrameColumn op_Multiply(long left, DecimalDataFrameColumn right);
    public static DecimalDataFrameColumn op_Multiply(DecimalDataFrameColumn left, sbyte right);
    public static DecimalDataFrameColumn op_Multiply(sbyte left, DecimalDataFrameColumn right);
    public static DecimalDataFrameColumn op_Multiply(DecimalDataFrameColumn left, short right);
    public static DecimalDataFrameColumn op_Multiply(short left, DecimalDataFrameColumn right);
    public static DecimalDataFrameColumn op_Multiply(DecimalDataFrameColumn left, UInt32 right);
    public static DecimalDataFrameColumn op_Multiply(UInt32 left, DecimalDataFrameColumn right);
    public static DecimalDataFrameColumn op_Multiply(DecimalDataFrameColumn left, ulong right);
    public static DecimalDataFrameColumn op_Multiply(ulong left, DecimalDataFrameColumn right);
    public static DecimalDataFrameColumn op_Multiply(DecimalDataFrameColumn left, ushort right);
    public static DecimalDataFrameColumn op_Multiply(ushort left, DecimalDataFrameColumn right);
    public static DecimalDataFrameColumn op_Division(DecimalDataFrameColumn left, ByteDataFrameColumn right);
    public static DecimalDataFrameColumn op_Division(DecimalDataFrameColumn left, DecimalDataFrameColumn right);
    public static DecimalDataFrameColumn op_Division(DecimalDataFrameColumn left, Int32DataFrameColumn right);
    public static DecimalDataFrameColumn op_Division(DecimalDataFrameColumn left, Int64DataFrameColumn right);
    public static DecimalDataFrameColumn op_Division(DecimalDataFrameColumn left, SByteDataFrameColumn right);
    public static DecimalDataFrameColumn op_Division(DecimalDataFrameColumn left, Int16DataFrameColumn right);
    public static DecimalDataFrameColumn op_Division(DecimalDataFrameColumn left, UInt32DataFrameColumn right);
    public static DecimalDataFrameColumn op_Division(DecimalDataFrameColumn left, UInt64DataFrameColumn right);
    public static DecimalDataFrameColumn op_Division(DecimalDataFrameColumn left, UInt16DataFrameColumn right);
    public static DecimalDataFrameColumn op_Division(DecimalDataFrameColumn left, byte right);
    public static DecimalDataFrameColumn op_Division(byte left, DecimalDataFrameColumn right);
    public static DecimalDataFrameColumn op_Division(DecimalDataFrameColumn left, decimal right);
    public static DecimalDataFrameColumn op_Division(decimal left, DecimalDataFrameColumn right);
    public static DecimalDataFrameColumn op_Division(DecimalDataFrameColumn left, int right);
    public static DecimalDataFrameColumn op_Division(int left, DecimalDataFrameColumn right);
    public static DecimalDataFrameColumn op_Division(DecimalDataFrameColumn left, long right);
    public static DecimalDataFrameColumn op_Division(long left, DecimalDataFrameColumn right);
    public static DecimalDataFrameColumn op_Division(DecimalDataFrameColumn left, sbyte right);
    public static DecimalDataFrameColumn op_Division(sbyte left, DecimalDataFrameColumn right);
    public static DecimalDataFrameColumn op_Division(DecimalDataFrameColumn left, short right);
    public static DecimalDataFrameColumn op_Division(short left, DecimalDataFrameColumn right);
    public static DecimalDataFrameColumn op_Division(DecimalDataFrameColumn left, UInt32 right);
    public static DecimalDataFrameColumn op_Division(UInt32 left, DecimalDataFrameColumn right);
    public static DecimalDataFrameColumn op_Division(DecimalDataFrameColumn left, ulong right);
    public static DecimalDataFrameColumn op_Division(ulong left, DecimalDataFrameColumn right);
    public static DecimalDataFrameColumn op_Division(DecimalDataFrameColumn left, ushort right);
    public static DecimalDataFrameColumn op_Division(ushort left, DecimalDataFrameColumn right);
    public static DecimalDataFrameColumn op_Modulus(DecimalDataFrameColumn left, ByteDataFrameColumn right);
    public static DecimalDataFrameColumn op_Modulus(DecimalDataFrameColumn left, DecimalDataFrameColumn right);
    public static DecimalDataFrameColumn op_Modulus(DecimalDataFrameColumn left, Int32DataFrameColumn right);
    public static DecimalDataFrameColumn op_Modulus(DecimalDataFrameColumn left, Int64DataFrameColumn right);
    public static DecimalDataFrameColumn op_Modulus(DecimalDataFrameColumn left, SByteDataFrameColumn right);
    public static DecimalDataFrameColumn op_Modulus(DecimalDataFrameColumn left, Int16DataFrameColumn right);
    public static DecimalDataFrameColumn op_Modulus(DecimalDataFrameColumn left, UInt32DataFrameColumn right);
    public static DecimalDataFrameColumn op_Modulus(DecimalDataFrameColumn left, UInt64DataFrameColumn right);
    public static DecimalDataFrameColumn op_Modulus(DecimalDataFrameColumn left, UInt16DataFrameColumn right);
    public static DecimalDataFrameColumn op_Modulus(DecimalDataFrameColumn left, byte right);
    public static DecimalDataFrameColumn op_Modulus(byte left, DecimalDataFrameColumn right);
    public static DecimalDataFrameColumn op_Modulus(DecimalDataFrameColumn left, decimal right);
    public static DecimalDataFrameColumn op_Modulus(decimal left, DecimalDataFrameColumn right);
    public static DecimalDataFrameColumn op_Modulus(DecimalDataFrameColumn left, int right);
    public static DecimalDataFrameColumn op_Modulus(int left, DecimalDataFrameColumn right);
    public static DecimalDataFrameColumn op_Modulus(DecimalDataFrameColumn left, long right);
    public static DecimalDataFrameColumn op_Modulus(long left, DecimalDataFrameColumn right);
    public static DecimalDataFrameColumn op_Modulus(DecimalDataFrameColumn left, sbyte right);
    public static DecimalDataFrameColumn op_Modulus(sbyte left, DecimalDataFrameColumn right);
    public static DecimalDataFrameColumn op_Modulus(DecimalDataFrameColumn left, short right);
    public static DecimalDataFrameColumn op_Modulus(short left, DecimalDataFrameColumn right);
    public static DecimalDataFrameColumn op_Modulus(DecimalDataFrameColumn left, UInt32 right);
    public static DecimalDataFrameColumn op_Modulus(UInt32 left, DecimalDataFrameColumn right);
    public static DecimalDataFrameColumn op_Modulus(DecimalDataFrameColumn left, ulong right);
    public static DecimalDataFrameColumn op_Modulus(ulong left, DecimalDataFrameColumn right);
    public static DecimalDataFrameColumn op_Modulus(DecimalDataFrameColumn left, ushort right);
    public static DecimalDataFrameColumn op_Modulus(ushort left, DecimalDataFrameColumn right);
}
internal class Microsoft.Data.Analysis.DecimalDecimalConverter : object {
    public sealed virtual decimal GetDecimal(decimal value);
}
internal class Microsoft.Data.Analysis.DoubleArithmetic : object {
    public sealed virtual void Add(PrimitiveColumnContainer`1<double> left, PrimitiveColumnContainer`1<double> right);
    public sealed virtual void Add(PrimitiveColumnContainer`1<double> column, double scalar);
    public sealed virtual void Add(double scalar, PrimitiveColumnContainer`1<double> column);
    public sealed virtual void Subtract(PrimitiveColumnContainer`1<double> left, PrimitiveColumnContainer`1<double> right);
    public sealed virtual void Subtract(PrimitiveColumnContainer`1<double> column, double scalar);
    public sealed virtual void Subtract(double scalar, PrimitiveColumnContainer`1<double> column);
    public sealed virtual void Multiply(PrimitiveColumnContainer`1<double> left, PrimitiveColumnContainer`1<double> right);
    public sealed virtual void Multiply(PrimitiveColumnContainer`1<double> column, double scalar);
    public sealed virtual void Multiply(double scalar, PrimitiveColumnContainer`1<double> column);
    public sealed virtual void Divide(PrimitiveColumnContainer`1<double> left, PrimitiveColumnContainer`1<double> right);
    public sealed virtual void Divide(PrimitiveColumnContainer`1<double> column, double scalar);
    public sealed virtual void Divide(double scalar, PrimitiveColumnContainer`1<double> column);
    public sealed virtual void Modulo(PrimitiveColumnContainer`1<double> left, PrimitiveColumnContainer`1<double> right);
    public sealed virtual void Modulo(PrimitiveColumnContainer`1<double> column, double scalar);
    public sealed virtual void Modulo(double scalar, PrimitiveColumnContainer`1<double> column);
    public sealed virtual void And(PrimitiveColumnContainer`1<double> left, PrimitiveColumnContainer`1<double> right);
    public sealed virtual void And(PrimitiveColumnContainer`1<double> column, double scalar);
    public sealed virtual void And(double scalar, PrimitiveColumnContainer`1<double> column);
    public sealed virtual void Or(PrimitiveColumnContainer`1<double> left, PrimitiveColumnContainer`1<double> right);
    public sealed virtual void Or(PrimitiveColumnContainer`1<double> column, double scalar);
    public sealed virtual void Or(double scalar, PrimitiveColumnContainer`1<double> column);
    public sealed virtual void Xor(PrimitiveColumnContainer`1<double> left, PrimitiveColumnContainer`1<double> right);
    public sealed virtual void Xor(PrimitiveColumnContainer`1<double> column, double scalar);
    public sealed virtual void Xor(double scalar, PrimitiveColumnContainer`1<double> column);
    public sealed virtual void LeftShift(PrimitiveColumnContainer`1<double> column, int value);
    public sealed virtual void RightShift(PrimitiveColumnContainer`1<double> column, int value);
    public sealed virtual void ElementwiseEquals(PrimitiveColumnContainer`1<double> left, PrimitiveColumnContainer`1<double> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseEquals(PrimitiveColumnContainer`1<double> column, double scalar, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseNotEquals(PrimitiveColumnContainer`1<double> left, PrimitiveColumnContainer`1<double> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseNotEquals(PrimitiveColumnContainer`1<double> column, double scalar, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseGreaterThanOrEqual(PrimitiveColumnContainer`1<double> left, PrimitiveColumnContainer`1<double> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseGreaterThanOrEqual(PrimitiveColumnContainer`1<double> column, double scalar, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseLessThanOrEqual(PrimitiveColumnContainer`1<double> left, PrimitiveColumnContainer`1<double> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseLessThanOrEqual(PrimitiveColumnContainer`1<double> column, double scalar, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseGreaterThan(PrimitiveColumnContainer`1<double> left, PrimitiveColumnContainer`1<double> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseGreaterThan(PrimitiveColumnContainer`1<double> column, double scalar, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseLessThan(PrimitiveColumnContainer`1<double> left, PrimitiveColumnContainer`1<double> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseLessThan(PrimitiveColumnContainer`1<double> column, double scalar, PrimitiveColumnContainer`1<bool> ret);
}
internal class Microsoft.Data.Analysis.DoubleComputation : object {
    public sealed virtual void Abs(PrimitiveColumnContainer`1<double> column);
    public sealed virtual void All(PrimitiveColumnContainer`1<double> column, Boolean& ret);
    public sealed virtual void Any(PrimitiveColumnContainer`1<double> column, Boolean& ret);
    public sealed virtual void CumulativeMax(PrimitiveColumnContainer`1<double> column);
    public sealed virtual void CumulativeMax(PrimitiveColumnContainer`1<double> column, IEnumerable`1<long> rows);
    public sealed virtual void CumulativeMin(PrimitiveColumnContainer`1<double> column);
    public sealed virtual void CumulativeMin(PrimitiveColumnContainer`1<double> column, IEnumerable`1<long> rows);
    public sealed virtual void CumulativeProduct(PrimitiveColumnContainer`1<double> column);
    public sealed virtual void CumulativeProduct(PrimitiveColumnContainer`1<double> column, IEnumerable`1<long> rows);
    public sealed virtual void CumulativeSum(PrimitiveColumnContainer`1<double> column);
    public sealed virtual void CumulativeSum(PrimitiveColumnContainer`1<double> column, IEnumerable`1<long> rows);
    public sealed virtual void Max(PrimitiveColumnContainer`1<double> column, Double& ret);
    public sealed virtual void Max(PrimitiveColumnContainer`1<double> column, IEnumerable`1<long> rows, Double& ret);
    public sealed virtual void Min(PrimitiveColumnContainer`1<double> column, Double& ret);
    public sealed virtual void Min(PrimitiveColumnContainer`1<double> column, IEnumerable`1<long> rows, Double& ret);
    public sealed virtual void Product(PrimitiveColumnContainer`1<double> column, Double& ret);
    public sealed virtual void Product(PrimitiveColumnContainer`1<double> column, IEnumerable`1<long> rows, Double& ret);
    public sealed virtual void Sum(PrimitiveColumnContainer`1<double> column, Double& ret);
    public sealed virtual void Sum(PrimitiveColumnContainer`1<double> column, IEnumerable`1<long> rows, Double& ret);
    public sealed virtual void Round(PrimitiveColumnContainer`1<double> column);
}
internal static class Microsoft.Data.Analysis.DoubleConverter : object {
    public static IDoubleConverter`1<T> GetDoubleConverter();
}
internal static class Microsoft.Data.Analysis.DoubleConverter`1 : object {
    [CompilerGeneratedAttribute]
private static IDoubleConverter`1<T> <Instance>k__BackingField;
    public static IDoubleConverter`1<T> Instance { get; }
    private static DoubleConverter`1();
    [CompilerGeneratedAttribute]
public static IDoubleConverter`1<T> get_Instance();
}
public class Microsoft.Data.Analysis.DoubleDataFrameColumn : PrimitiveDataFrameColumn`1<double> {
    public DoubleDataFrameColumn(string name, IEnumerable`1<Nullable`1<double>> values);
    public DoubleDataFrameColumn(string name, IEnumerable`1<double> values);
    public DoubleDataFrameColumn(string name, long length);
    public DoubleDataFrameColumn(string name, ReadOnlyMemory`1<byte> buffer, ReadOnlyMemory`1<byte> nullBitMap, int length, int nullCount);
    internal DoubleDataFrameColumn(string name, PrimitiveColumnContainer`1<double> values);
    public DoubleDataFrameColumn Add(ByteDataFrameColumn column, bool inPlace);
    public DoubleDataFrameColumn Subtract(ByteDataFrameColumn column, bool inPlace);
    public DoubleDataFrameColumn Multiply(ByteDataFrameColumn column, bool inPlace);
    public DoubleDataFrameColumn Divide(ByteDataFrameColumn column, bool inPlace);
    public DoubleDataFrameColumn Modulo(ByteDataFrameColumn column, bool inPlace);
    public DoubleDataFrameColumn Add(DoubleDataFrameColumn column, bool inPlace);
    public DoubleDataFrameColumn Subtract(DoubleDataFrameColumn column, bool inPlace);
    public DoubleDataFrameColumn Multiply(DoubleDataFrameColumn column, bool inPlace);
    public DoubleDataFrameColumn Divide(DoubleDataFrameColumn column, bool inPlace);
    public DoubleDataFrameColumn Modulo(DoubleDataFrameColumn column, bool inPlace);
    public DoubleDataFrameColumn Add(SingleDataFrameColumn column, bool inPlace);
    public DoubleDataFrameColumn Subtract(SingleDataFrameColumn column, bool inPlace);
    public DoubleDataFrameColumn Multiply(SingleDataFrameColumn column, bool inPlace);
    public DoubleDataFrameColumn Divide(SingleDataFrameColumn column, bool inPlace);
    public DoubleDataFrameColumn Modulo(SingleDataFrameColumn column, bool inPlace);
    public DoubleDataFrameColumn Add(Int32DataFrameColumn column, bool inPlace);
    public DoubleDataFrameColumn Subtract(Int32DataFrameColumn column, bool inPlace);
    public DoubleDataFrameColumn Multiply(Int32DataFrameColumn column, bool inPlace);
    public DoubleDataFrameColumn Divide(Int32DataFrameColumn column, bool inPlace);
    public DoubleDataFrameColumn Modulo(Int32DataFrameColumn column, bool inPlace);
    public DoubleDataFrameColumn Add(Int64DataFrameColumn column, bool inPlace);
    public DoubleDataFrameColumn Subtract(Int64DataFrameColumn column, bool inPlace);
    public DoubleDataFrameColumn Multiply(Int64DataFrameColumn column, bool inPlace);
    public DoubleDataFrameColumn Divide(Int64DataFrameColumn column, bool inPlace);
    public DoubleDataFrameColumn Modulo(Int64DataFrameColumn column, bool inPlace);
    public DoubleDataFrameColumn Add(SByteDataFrameColumn column, bool inPlace);
    public DoubleDataFrameColumn Subtract(SByteDataFrameColumn column, bool inPlace);
    public DoubleDataFrameColumn Multiply(SByteDataFrameColumn column, bool inPlace);
    public DoubleDataFrameColumn Divide(SByteDataFrameColumn column, bool inPlace);
    public DoubleDataFrameColumn Modulo(SByteDataFrameColumn column, bool inPlace);
    public DoubleDataFrameColumn Add(Int16DataFrameColumn column, bool inPlace);
    public DoubleDataFrameColumn Subtract(Int16DataFrameColumn column, bool inPlace);
    public DoubleDataFrameColumn Multiply(Int16DataFrameColumn column, bool inPlace);
    public DoubleDataFrameColumn Divide(Int16DataFrameColumn column, bool inPlace);
    public DoubleDataFrameColumn Modulo(Int16DataFrameColumn column, bool inPlace);
    public DoubleDataFrameColumn Add(UInt32DataFrameColumn column, bool inPlace);
    public DoubleDataFrameColumn Subtract(UInt32DataFrameColumn column, bool inPlace);
    public DoubleDataFrameColumn Multiply(UInt32DataFrameColumn column, bool inPlace);
    public DoubleDataFrameColumn Divide(UInt32DataFrameColumn column, bool inPlace);
    public DoubleDataFrameColumn Modulo(UInt32DataFrameColumn column, bool inPlace);
    public DoubleDataFrameColumn Add(UInt64DataFrameColumn column, bool inPlace);
    public DoubleDataFrameColumn Subtract(UInt64DataFrameColumn column, bool inPlace);
    public DoubleDataFrameColumn Multiply(UInt64DataFrameColumn column, bool inPlace);
    public DoubleDataFrameColumn Divide(UInt64DataFrameColumn column, bool inPlace);
    public DoubleDataFrameColumn Modulo(UInt64DataFrameColumn column, bool inPlace);
    public DoubleDataFrameColumn Add(UInt16DataFrameColumn column, bool inPlace);
    public DoubleDataFrameColumn Subtract(UInt16DataFrameColumn column, bool inPlace);
    public DoubleDataFrameColumn Multiply(UInt16DataFrameColumn column, bool inPlace);
    public DoubleDataFrameColumn Divide(UInt16DataFrameColumn column, bool inPlace);
    public DoubleDataFrameColumn Modulo(UInt16DataFrameColumn column, bool inPlace);
    public DoubleDataFrameColumn Add(byte value, bool inPlace);
    public DoubleDataFrameColumn ReverseAdd(byte value, bool inPlace);
    public DoubleDataFrameColumn Subtract(byte value, bool inPlace);
    public DoubleDataFrameColumn ReverseSubtract(byte value, bool inPlace);
    public DoubleDataFrameColumn Multiply(byte value, bool inPlace);
    public DoubleDataFrameColumn ReverseMultiply(byte value, bool inPlace);
    public DoubleDataFrameColumn Divide(byte value, bool inPlace);
    public DoubleDataFrameColumn ReverseDivide(byte value, bool inPlace);
    public DoubleDataFrameColumn Modulo(byte value, bool inPlace);
    public DoubleDataFrameColumn ReverseModulo(byte value, bool inPlace);
    public DoubleDataFrameColumn Add(double value, bool inPlace);
    public DoubleDataFrameColumn ReverseAdd(double value, bool inPlace);
    public DoubleDataFrameColumn Subtract(double value, bool inPlace);
    public DoubleDataFrameColumn ReverseSubtract(double value, bool inPlace);
    public DoubleDataFrameColumn Multiply(double value, bool inPlace);
    public DoubleDataFrameColumn ReverseMultiply(double value, bool inPlace);
    public DoubleDataFrameColumn Divide(double value, bool inPlace);
    public DoubleDataFrameColumn ReverseDivide(double value, bool inPlace);
    public DoubleDataFrameColumn Modulo(double value, bool inPlace);
    public DoubleDataFrameColumn ReverseModulo(double value, bool inPlace);
    public DoubleDataFrameColumn Add(float value, bool inPlace);
    public DoubleDataFrameColumn ReverseAdd(float value, bool inPlace);
    public DoubleDataFrameColumn Subtract(float value, bool inPlace);
    public DoubleDataFrameColumn ReverseSubtract(float value, bool inPlace);
    public DoubleDataFrameColumn Multiply(float value, bool inPlace);
    public DoubleDataFrameColumn ReverseMultiply(float value, bool inPlace);
    public DoubleDataFrameColumn Divide(float value, bool inPlace);
    public DoubleDataFrameColumn ReverseDivide(float value, bool inPlace);
    public DoubleDataFrameColumn Modulo(float value, bool inPlace);
    public DoubleDataFrameColumn ReverseModulo(float value, bool inPlace);
    public DoubleDataFrameColumn Add(int value, bool inPlace);
    public DoubleDataFrameColumn ReverseAdd(int value, bool inPlace);
    public DoubleDataFrameColumn Subtract(int value, bool inPlace);
    public DoubleDataFrameColumn ReverseSubtract(int value, bool inPlace);
    public DoubleDataFrameColumn Multiply(int value, bool inPlace);
    public DoubleDataFrameColumn ReverseMultiply(int value, bool inPlace);
    public DoubleDataFrameColumn Divide(int value, bool inPlace);
    public DoubleDataFrameColumn ReverseDivide(int value, bool inPlace);
    public DoubleDataFrameColumn Modulo(int value, bool inPlace);
    public DoubleDataFrameColumn ReverseModulo(int value, bool inPlace);
    public DoubleDataFrameColumn Add(long value, bool inPlace);
    public DoubleDataFrameColumn ReverseAdd(long value, bool inPlace);
    public DoubleDataFrameColumn Subtract(long value, bool inPlace);
    public DoubleDataFrameColumn ReverseSubtract(long value, bool inPlace);
    public DoubleDataFrameColumn Multiply(long value, bool inPlace);
    public DoubleDataFrameColumn ReverseMultiply(long value, bool inPlace);
    public DoubleDataFrameColumn Divide(long value, bool inPlace);
    public DoubleDataFrameColumn ReverseDivide(long value, bool inPlace);
    public DoubleDataFrameColumn Modulo(long value, bool inPlace);
    public DoubleDataFrameColumn ReverseModulo(long value, bool inPlace);
    public DoubleDataFrameColumn Add(sbyte value, bool inPlace);
    public DoubleDataFrameColumn ReverseAdd(sbyte value, bool inPlace);
    public DoubleDataFrameColumn Subtract(sbyte value, bool inPlace);
    public DoubleDataFrameColumn ReverseSubtract(sbyte value, bool inPlace);
    public DoubleDataFrameColumn Multiply(sbyte value, bool inPlace);
    public DoubleDataFrameColumn ReverseMultiply(sbyte value, bool inPlace);
    public DoubleDataFrameColumn Divide(sbyte value, bool inPlace);
    public DoubleDataFrameColumn ReverseDivide(sbyte value, bool inPlace);
    public DoubleDataFrameColumn Modulo(sbyte value, bool inPlace);
    public DoubleDataFrameColumn ReverseModulo(sbyte value, bool inPlace);
    public DoubleDataFrameColumn Add(short value, bool inPlace);
    public DoubleDataFrameColumn ReverseAdd(short value, bool inPlace);
    public DoubleDataFrameColumn Subtract(short value, bool inPlace);
    public DoubleDataFrameColumn ReverseSubtract(short value, bool inPlace);
    public DoubleDataFrameColumn Multiply(short value, bool inPlace);
    public DoubleDataFrameColumn ReverseMultiply(short value, bool inPlace);
    public DoubleDataFrameColumn Divide(short value, bool inPlace);
    public DoubleDataFrameColumn ReverseDivide(short value, bool inPlace);
    public DoubleDataFrameColumn Modulo(short value, bool inPlace);
    public DoubleDataFrameColumn ReverseModulo(short value, bool inPlace);
    public DoubleDataFrameColumn Add(UInt32 value, bool inPlace);
    public DoubleDataFrameColumn ReverseAdd(UInt32 value, bool inPlace);
    public DoubleDataFrameColumn Subtract(UInt32 value, bool inPlace);
    public DoubleDataFrameColumn ReverseSubtract(UInt32 value, bool inPlace);
    public DoubleDataFrameColumn Multiply(UInt32 value, bool inPlace);
    public DoubleDataFrameColumn ReverseMultiply(UInt32 value, bool inPlace);
    public DoubleDataFrameColumn Divide(UInt32 value, bool inPlace);
    public DoubleDataFrameColumn ReverseDivide(UInt32 value, bool inPlace);
    public DoubleDataFrameColumn Modulo(UInt32 value, bool inPlace);
    public DoubleDataFrameColumn ReverseModulo(UInt32 value, bool inPlace);
    public DoubleDataFrameColumn Add(ulong value, bool inPlace);
    public DoubleDataFrameColumn ReverseAdd(ulong value, bool inPlace);
    public DoubleDataFrameColumn Subtract(ulong value, bool inPlace);
    public DoubleDataFrameColumn ReverseSubtract(ulong value, bool inPlace);
    public DoubleDataFrameColumn Multiply(ulong value, bool inPlace);
    public DoubleDataFrameColumn ReverseMultiply(ulong value, bool inPlace);
    public DoubleDataFrameColumn Divide(ulong value, bool inPlace);
    public DoubleDataFrameColumn ReverseDivide(ulong value, bool inPlace);
    public DoubleDataFrameColumn Modulo(ulong value, bool inPlace);
    public DoubleDataFrameColumn ReverseModulo(ulong value, bool inPlace);
    public DoubleDataFrameColumn Add(ushort value, bool inPlace);
    public DoubleDataFrameColumn ReverseAdd(ushort value, bool inPlace);
    public DoubleDataFrameColumn Subtract(ushort value, bool inPlace);
    public DoubleDataFrameColumn ReverseSubtract(ushort value, bool inPlace);
    public DoubleDataFrameColumn Multiply(ushort value, bool inPlace);
    public DoubleDataFrameColumn ReverseMultiply(ushort value, bool inPlace);
    public DoubleDataFrameColumn Divide(ushort value, bool inPlace);
    public DoubleDataFrameColumn ReverseDivide(ushort value, bool inPlace);
    public DoubleDataFrameColumn Modulo(ushort value, bool inPlace);
    public DoubleDataFrameColumn ReverseModulo(ushort value, bool inPlace);
    public BooleanDataFrameColumn ElementwiseEquals(ByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(ByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(ByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(ByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(ByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(ByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(DoubleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(DoubleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(DoubleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(DoubleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(DoubleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(DoubleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(SingleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(SingleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(SingleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(SingleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(SingleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(SingleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(Int32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(Int32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(Int32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(Int32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(Int32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(Int32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(Int64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(Int64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(Int64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(Int64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(Int64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(Int64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(SByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(SByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(SByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(SByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(SByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(SByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(Int16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(Int16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(Int16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(Int16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(Int16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(Int16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(UInt32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(UInt32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(UInt32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(UInt32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(UInt32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(UInt32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(UInt64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(UInt64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(UInt64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(UInt64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(UInt64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(UInt64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(UInt16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(UInt16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(UInt16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(UInt16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(UInt16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(UInt16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(byte value);
    public BooleanDataFrameColumn ElementwiseNotEquals(byte value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(byte value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(byte value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(byte value);
    public BooleanDataFrameColumn ElementwiseLessThan(byte value);
    public BooleanDataFrameColumn ElementwiseEquals(double value);
    public BooleanDataFrameColumn ElementwiseNotEquals(double value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(double value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(double value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(double value);
    public BooleanDataFrameColumn ElementwiseLessThan(double value);
    public BooleanDataFrameColumn ElementwiseEquals(float value);
    public BooleanDataFrameColumn ElementwiseNotEquals(float value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(float value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(float value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(float value);
    public BooleanDataFrameColumn ElementwiseLessThan(float value);
    public BooleanDataFrameColumn ElementwiseEquals(int value);
    public BooleanDataFrameColumn ElementwiseNotEquals(int value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(int value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(int value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(int value);
    public BooleanDataFrameColumn ElementwiseLessThan(int value);
    public BooleanDataFrameColumn ElementwiseEquals(long value);
    public BooleanDataFrameColumn ElementwiseNotEquals(long value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(long value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(long value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(long value);
    public BooleanDataFrameColumn ElementwiseLessThan(long value);
    public BooleanDataFrameColumn ElementwiseEquals(sbyte value);
    public BooleanDataFrameColumn ElementwiseNotEquals(sbyte value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(sbyte value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(sbyte value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(sbyte value);
    public BooleanDataFrameColumn ElementwiseLessThan(sbyte value);
    public BooleanDataFrameColumn ElementwiseEquals(short value);
    public BooleanDataFrameColumn ElementwiseNotEquals(short value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(short value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(short value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(short value);
    public BooleanDataFrameColumn ElementwiseLessThan(short value);
    public BooleanDataFrameColumn ElementwiseEquals(UInt32 value);
    public BooleanDataFrameColumn ElementwiseNotEquals(UInt32 value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(UInt32 value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(UInt32 value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(UInt32 value);
    public BooleanDataFrameColumn ElementwiseLessThan(UInt32 value);
    public BooleanDataFrameColumn ElementwiseEquals(ulong value);
    public BooleanDataFrameColumn ElementwiseNotEquals(ulong value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(ulong value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(ulong value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(ulong value);
    public BooleanDataFrameColumn ElementwiseLessThan(ulong value);
    public BooleanDataFrameColumn ElementwiseEquals(ushort value);
    public BooleanDataFrameColumn ElementwiseNotEquals(ushort value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(ushort value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(ushort value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(ushort value);
    public BooleanDataFrameColumn ElementwiseLessThan(ushort value);
    internal DoubleDataFrameColumn AddImplementation(DoubleDataFrameColumn column, bool inPlace);
    internal DoubleDataFrameColumn AddImplementation(double value, bool inPlace);
    internal DoubleDataFrameColumn ReverseAddImplementation(double value, bool inPlace);
    internal DoubleDataFrameColumn SubtractImplementation(DoubleDataFrameColumn column, bool inPlace);
    internal DoubleDataFrameColumn SubtractImplementation(double value, bool inPlace);
    internal DoubleDataFrameColumn ReverseSubtractImplementation(double value, bool inPlace);
    internal DoubleDataFrameColumn MultiplyImplementation(DoubleDataFrameColumn column, bool inPlace);
    internal DoubleDataFrameColumn MultiplyImplementation(double value, bool inPlace);
    internal DoubleDataFrameColumn ReverseMultiplyImplementation(double value, bool inPlace);
    internal DoubleDataFrameColumn DivideImplementation(DoubleDataFrameColumn column, bool inPlace);
    internal DoubleDataFrameColumn DivideImplementation(double value, bool inPlace);
    internal DoubleDataFrameColumn ReverseDivideImplementation(double value, bool inPlace);
    internal DoubleDataFrameColumn ModuloImplementation(DoubleDataFrameColumn column, bool inPlace);
    internal DoubleDataFrameColumn ModuloImplementation(double value, bool inPlace);
    internal DoubleDataFrameColumn ReverseModuloImplementation(double value, bool inPlace);
    internal BooleanDataFrameColumn ElementwiseEqualsImplementation(DoubleDataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseEqualsImplementation(double value);
    internal BooleanDataFrameColumn ElementwiseNotEqualsImplementation(DoubleDataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseNotEqualsImplementation(double value);
    internal BooleanDataFrameColumn ElementwiseGreaterThanOrEqualImplementation(DoubleDataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseGreaterThanOrEqualImplementation(double value);
    internal BooleanDataFrameColumn ElementwiseLessThanOrEqualImplementation(DoubleDataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseLessThanOrEqualImplementation(double value);
    internal BooleanDataFrameColumn ElementwiseGreaterThanImplementation(DoubleDataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseGreaterThanImplementation(double value);
    internal BooleanDataFrameColumn ElementwiseLessThanImplementation(DoubleDataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseLessThanImplementation(double value);
    public static DoubleDataFrameColumn op_Addition(DoubleDataFrameColumn left, ByteDataFrameColumn right);
    public static DoubleDataFrameColumn op_Addition(DoubleDataFrameColumn left, DoubleDataFrameColumn right);
    public static DoubleDataFrameColumn op_Addition(DoubleDataFrameColumn left, SingleDataFrameColumn right);
    public static DoubleDataFrameColumn op_Addition(DoubleDataFrameColumn left, Int32DataFrameColumn right);
    public static DoubleDataFrameColumn op_Addition(DoubleDataFrameColumn left, Int64DataFrameColumn right);
    public static DoubleDataFrameColumn op_Addition(DoubleDataFrameColumn left, SByteDataFrameColumn right);
    public static DoubleDataFrameColumn op_Addition(DoubleDataFrameColumn left, Int16DataFrameColumn right);
    public static DoubleDataFrameColumn op_Addition(DoubleDataFrameColumn left, UInt32DataFrameColumn right);
    public static DoubleDataFrameColumn op_Addition(DoubleDataFrameColumn left, UInt64DataFrameColumn right);
    public static DoubleDataFrameColumn op_Addition(DoubleDataFrameColumn left, UInt16DataFrameColumn right);
    public static DoubleDataFrameColumn op_Addition(DoubleDataFrameColumn left, byte right);
    public static DoubleDataFrameColumn op_Addition(byte left, DoubleDataFrameColumn right);
    public static DoubleDataFrameColumn op_Addition(DoubleDataFrameColumn left, double right);
    public static DoubleDataFrameColumn op_Addition(double left, DoubleDataFrameColumn right);
    public static DoubleDataFrameColumn op_Addition(DoubleDataFrameColumn left, float right);
    public static DoubleDataFrameColumn op_Addition(float left, DoubleDataFrameColumn right);
    public static DoubleDataFrameColumn op_Addition(DoubleDataFrameColumn left, int right);
    public static DoubleDataFrameColumn op_Addition(int left, DoubleDataFrameColumn right);
    public static DoubleDataFrameColumn op_Addition(DoubleDataFrameColumn left, long right);
    public static DoubleDataFrameColumn op_Addition(long left, DoubleDataFrameColumn right);
    public static DoubleDataFrameColumn op_Addition(DoubleDataFrameColumn left, sbyte right);
    public static DoubleDataFrameColumn op_Addition(sbyte left, DoubleDataFrameColumn right);
    public static DoubleDataFrameColumn op_Addition(DoubleDataFrameColumn left, short right);
    public static DoubleDataFrameColumn op_Addition(short left, DoubleDataFrameColumn right);
    public static DoubleDataFrameColumn op_Addition(DoubleDataFrameColumn left, UInt32 right);
    public static DoubleDataFrameColumn op_Addition(UInt32 left, DoubleDataFrameColumn right);
    public static DoubleDataFrameColumn op_Addition(DoubleDataFrameColumn left, ulong right);
    public static DoubleDataFrameColumn op_Addition(ulong left, DoubleDataFrameColumn right);
    public static DoubleDataFrameColumn op_Addition(DoubleDataFrameColumn left, ushort right);
    public static DoubleDataFrameColumn op_Addition(ushort left, DoubleDataFrameColumn right);
    public static DoubleDataFrameColumn op_Subtraction(DoubleDataFrameColumn left, ByteDataFrameColumn right);
    public static DoubleDataFrameColumn op_Subtraction(DoubleDataFrameColumn left, DoubleDataFrameColumn right);
    public static DoubleDataFrameColumn op_Subtraction(DoubleDataFrameColumn left, SingleDataFrameColumn right);
    public static DoubleDataFrameColumn op_Subtraction(DoubleDataFrameColumn left, Int32DataFrameColumn right);
    public static DoubleDataFrameColumn op_Subtraction(DoubleDataFrameColumn left, Int64DataFrameColumn right);
    public static DoubleDataFrameColumn op_Subtraction(DoubleDataFrameColumn left, SByteDataFrameColumn right);
    public static DoubleDataFrameColumn op_Subtraction(DoubleDataFrameColumn left, Int16DataFrameColumn right);
    public static DoubleDataFrameColumn op_Subtraction(DoubleDataFrameColumn left, UInt32DataFrameColumn right);
    public static DoubleDataFrameColumn op_Subtraction(DoubleDataFrameColumn left, UInt64DataFrameColumn right);
    public static DoubleDataFrameColumn op_Subtraction(DoubleDataFrameColumn left, UInt16DataFrameColumn right);
    public static DoubleDataFrameColumn op_Subtraction(DoubleDataFrameColumn left, byte right);
    public static DoubleDataFrameColumn op_Subtraction(byte left, DoubleDataFrameColumn right);
    public static DoubleDataFrameColumn op_Subtraction(DoubleDataFrameColumn left, double right);
    public static DoubleDataFrameColumn op_Subtraction(double left, DoubleDataFrameColumn right);
    public static DoubleDataFrameColumn op_Subtraction(DoubleDataFrameColumn left, float right);
    public static DoubleDataFrameColumn op_Subtraction(float left, DoubleDataFrameColumn right);
    public static DoubleDataFrameColumn op_Subtraction(DoubleDataFrameColumn left, int right);
    public static DoubleDataFrameColumn op_Subtraction(int left, DoubleDataFrameColumn right);
    public static DoubleDataFrameColumn op_Subtraction(DoubleDataFrameColumn left, long right);
    public static DoubleDataFrameColumn op_Subtraction(long left, DoubleDataFrameColumn right);
    public static DoubleDataFrameColumn op_Subtraction(DoubleDataFrameColumn left, sbyte right);
    public static DoubleDataFrameColumn op_Subtraction(sbyte left, DoubleDataFrameColumn right);
    public static DoubleDataFrameColumn op_Subtraction(DoubleDataFrameColumn left, short right);
    public static DoubleDataFrameColumn op_Subtraction(short left, DoubleDataFrameColumn right);
    public static DoubleDataFrameColumn op_Subtraction(DoubleDataFrameColumn left, UInt32 right);
    public static DoubleDataFrameColumn op_Subtraction(UInt32 left, DoubleDataFrameColumn right);
    public static DoubleDataFrameColumn op_Subtraction(DoubleDataFrameColumn left, ulong right);
    public static DoubleDataFrameColumn op_Subtraction(ulong left, DoubleDataFrameColumn right);
    public static DoubleDataFrameColumn op_Subtraction(DoubleDataFrameColumn left, ushort right);
    public static DoubleDataFrameColumn op_Subtraction(ushort left, DoubleDataFrameColumn right);
    public static DoubleDataFrameColumn op_Multiply(DoubleDataFrameColumn left, ByteDataFrameColumn right);
    public static DoubleDataFrameColumn op_Multiply(DoubleDataFrameColumn left, DoubleDataFrameColumn right);
    public static DoubleDataFrameColumn op_Multiply(DoubleDataFrameColumn left, SingleDataFrameColumn right);
    public static DoubleDataFrameColumn op_Multiply(DoubleDataFrameColumn left, Int32DataFrameColumn right);
    public static DoubleDataFrameColumn op_Multiply(DoubleDataFrameColumn left, Int64DataFrameColumn right);
    public static DoubleDataFrameColumn op_Multiply(DoubleDataFrameColumn left, SByteDataFrameColumn right);
    public static DoubleDataFrameColumn op_Multiply(DoubleDataFrameColumn left, Int16DataFrameColumn right);
    public static DoubleDataFrameColumn op_Multiply(DoubleDataFrameColumn left, UInt32DataFrameColumn right);
    public static DoubleDataFrameColumn op_Multiply(DoubleDataFrameColumn left, UInt64DataFrameColumn right);
    public static DoubleDataFrameColumn op_Multiply(DoubleDataFrameColumn left, UInt16DataFrameColumn right);
    public static DoubleDataFrameColumn op_Multiply(DoubleDataFrameColumn left, byte right);
    public static DoubleDataFrameColumn op_Multiply(byte left, DoubleDataFrameColumn right);
    public static DoubleDataFrameColumn op_Multiply(DoubleDataFrameColumn left, double right);
    public static DoubleDataFrameColumn op_Multiply(double left, DoubleDataFrameColumn right);
    public static DoubleDataFrameColumn op_Multiply(DoubleDataFrameColumn left, float right);
    public static DoubleDataFrameColumn op_Multiply(float left, DoubleDataFrameColumn right);
    public static DoubleDataFrameColumn op_Multiply(DoubleDataFrameColumn left, int right);
    public static DoubleDataFrameColumn op_Multiply(int left, DoubleDataFrameColumn right);
    public static DoubleDataFrameColumn op_Multiply(DoubleDataFrameColumn left, long right);
    public static DoubleDataFrameColumn op_Multiply(long left, DoubleDataFrameColumn right);
    public static DoubleDataFrameColumn op_Multiply(DoubleDataFrameColumn left, sbyte right);
    public static DoubleDataFrameColumn op_Multiply(sbyte left, DoubleDataFrameColumn right);
    public static DoubleDataFrameColumn op_Multiply(DoubleDataFrameColumn left, short right);
    public static DoubleDataFrameColumn op_Multiply(short left, DoubleDataFrameColumn right);
    public static DoubleDataFrameColumn op_Multiply(DoubleDataFrameColumn left, UInt32 right);
    public static DoubleDataFrameColumn op_Multiply(UInt32 left, DoubleDataFrameColumn right);
    public static DoubleDataFrameColumn op_Multiply(DoubleDataFrameColumn left, ulong right);
    public static DoubleDataFrameColumn op_Multiply(ulong left, DoubleDataFrameColumn right);
    public static DoubleDataFrameColumn op_Multiply(DoubleDataFrameColumn left, ushort right);
    public static DoubleDataFrameColumn op_Multiply(ushort left, DoubleDataFrameColumn right);
    public static DoubleDataFrameColumn op_Division(DoubleDataFrameColumn left, ByteDataFrameColumn right);
    public static DoubleDataFrameColumn op_Division(DoubleDataFrameColumn left, DoubleDataFrameColumn right);
    public static DoubleDataFrameColumn op_Division(DoubleDataFrameColumn left, SingleDataFrameColumn right);
    public static DoubleDataFrameColumn op_Division(DoubleDataFrameColumn left, Int32DataFrameColumn right);
    public static DoubleDataFrameColumn op_Division(DoubleDataFrameColumn left, Int64DataFrameColumn right);
    public static DoubleDataFrameColumn op_Division(DoubleDataFrameColumn left, SByteDataFrameColumn right);
    public static DoubleDataFrameColumn op_Division(DoubleDataFrameColumn left, Int16DataFrameColumn right);
    public static DoubleDataFrameColumn op_Division(DoubleDataFrameColumn left, UInt32DataFrameColumn right);
    public static DoubleDataFrameColumn op_Division(DoubleDataFrameColumn left, UInt64DataFrameColumn right);
    public static DoubleDataFrameColumn op_Division(DoubleDataFrameColumn left, UInt16DataFrameColumn right);
    public static DoubleDataFrameColumn op_Division(DoubleDataFrameColumn left, byte right);
    public static DoubleDataFrameColumn op_Division(byte left, DoubleDataFrameColumn right);
    public static DoubleDataFrameColumn op_Division(DoubleDataFrameColumn left, double right);
    public static DoubleDataFrameColumn op_Division(double left, DoubleDataFrameColumn right);
    public static DoubleDataFrameColumn op_Division(DoubleDataFrameColumn left, float right);
    public static DoubleDataFrameColumn op_Division(float left, DoubleDataFrameColumn right);
    public static DoubleDataFrameColumn op_Division(DoubleDataFrameColumn left, int right);
    public static DoubleDataFrameColumn op_Division(int left, DoubleDataFrameColumn right);
    public static DoubleDataFrameColumn op_Division(DoubleDataFrameColumn left, long right);
    public static DoubleDataFrameColumn op_Division(long left, DoubleDataFrameColumn right);
    public static DoubleDataFrameColumn op_Division(DoubleDataFrameColumn left, sbyte right);
    public static DoubleDataFrameColumn op_Division(sbyte left, DoubleDataFrameColumn right);
    public static DoubleDataFrameColumn op_Division(DoubleDataFrameColumn left, short right);
    public static DoubleDataFrameColumn op_Division(short left, DoubleDataFrameColumn right);
    public static DoubleDataFrameColumn op_Division(DoubleDataFrameColumn left, UInt32 right);
    public static DoubleDataFrameColumn op_Division(UInt32 left, DoubleDataFrameColumn right);
    public static DoubleDataFrameColumn op_Division(DoubleDataFrameColumn left, ulong right);
    public static DoubleDataFrameColumn op_Division(ulong left, DoubleDataFrameColumn right);
    public static DoubleDataFrameColumn op_Division(DoubleDataFrameColumn left, ushort right);
    public static DoubleDataFrameColumn op_Division(ushort left, DoubleDataFrameColumn right);
    public static DoubleDataFrameColumn op_Modulus(DoubleDataFrameColumn left, ByteDataFrameColumn right);
    public static DoubleDataFrameColumn op_Modulus(DoubleDataFrameColumn left, DoubleDataFrameColumn right);
    public static DoubleDataFrameColumn op_Modulus(DoubleDataFrameColumn left, SingleDataFrameColumn right);
    public static DoubleDataFrameColumn op_Modulus(DoubleDataFrameColumn left, Int32DataFrameColumn right);
    public static DoubleDataFrameColumn op_Modulus(DoubleDataFrameColumn left, Int64DataFrameColumn right);
    public static DoubleDataFrameColumn op_Modulus(DoubleDataFrameColumn left, SByteDataFrameColumn right);
    public static DoubleDataFrameColumn op_Modulus(DoubleDataFrameColumn left, Int16DataFrameColumn right);
    public static DoubleDataFrameColumn op_Modulus(DoubleDataFrameColumn left, UInt32DataFrameColumn right);
    public static DoubleDataFrameColumn op_Modulus(DoubleDataFrameColumn left, UInt64DataFrameColumn right);
    public static DoubleDataFrameColumn op_Modulus(DoubleDataFrameColumn left, UInt16DataFrameColumn right);
    public static DoubleDataFrameColumn op_Modulus(DoubleDataFrameColumn left, byte right);
    public static DoubleDataFrameColumn op_Modulus(byte left, DoubleDataFrameColumn right);
    public static DoubleDataFrameColumn op_Modulus(DoubleDataFrameColumn left, double right);
    public static DoubleDataFrameColumn op_Modulus(double left, DoubleDataFrameColumn right);
    public static DoubleDataFrameColumn op_Modulus(DoubleDataFrameColumn left, float right);
    public static DoubleDataFrameColumn op_Modulus(float left, DoubleDataFrameColumn right);
    public static DoubleDataFrameColumn op_Modulus(DoubleDataFrameColumn left, int right);
    public static DoubleDataFrameColumn op_Modulus(int left, DoubleDataFrameColumn right);
    public static DoubleDataFrameColumn op_Modulus(DoubleDataFrameColumn left, long right);
    public static DoubleDataFrameColumn op_Modulus(long left, DoubleDataFrameColumn right);
    public static DoubleDataFrameColumn op_Modulus(DoubleDataFrameColumn left, sbyte right);
    public static DoubleDataFrameColumn op_Modulus(sbyte left, DoubleDataFrameColumn right);
    public static DoubleDataFrameColumn op_Modulus(DoubleDataFrameColumn left, short right);
    public static DoubleDataFrameColumn op_Modulus(short left, DoubleDataFrameColumn right);
    public static DoubleDataFrameColumn op_Modulus(DoubleDataFrameColumn left, UInt32 right);
    public static DoubleDataFrameColumn op_Modulus(UInt32 left, DoubleDataFrameColumn right);
    public static DoubleDataFrameColumn op_Modulus(DoubleDataFrameColumn left, ulong right);
    public static DoubleDataFrameColumn op_Modulus(ulong left, DoubleDataFrameColumn right);
    public static DoubleDataFrameColumn op_Modulus(DoubleDataFrameColumn left, ushort right);
    public static DoubleDataFrameColumn op_Modulus(ushort left, DoubleDataFrameColumn right);
}
internal class Microsoft.Data.Analysis.DoubleDecimalConverter : object {
    public sealed virtual decimal GetDecimal(double value);
}
internal class Microsoft.Data.Analysis.DoubleDoubleConverter : object {
    public sealed virtual double GetDouble(double value);
}
public enum Microsoft.Data.Analysis.DropNullOptions : Enum {
    public int value__;
    public static DropNullOptions Any;
    public static DropNullOptions All;
}
internal enum Microsoft.Data.Analysis.FieldType : Enum {
    public int value__;
    public static FieldType Delimited;
    public static FieldType FixedWidth;
}
internal class Microsoft.Data.Analysis.FloatArithmetic : object {
    public sealed virtual void Add(PrimitiveColumnContainer`1<float> left, PrimitiveColumnContainer`1<float> right);
    public sealed virtual void Add(PrimitiveColumnContainer`1<float> column, float scalar);
    public sealed virtual void Add(float scalar, PrimitiveColumnContainer`1<float> column);
    public sealed virtual void Subtract(PrimitiveColumnContainer`1<float> left, PrimitiveColumnContainer`1<float> right);
    public sealed virtual void Subtract(PrimitiveColumnContainer`1<float> column, float scalar);
    public sealed virtual void Subtract(float scalar, PrimitiveColumnContainer`1<float> column);
    public sealed virtual void Multiply(PrimitiveColumnContainer`1<float> left, PrimitiveColumnContainer`1<float> right);
    public sealed virtual void Multiply(PrimitiveColumnContainer`1<float> column, float scalar);
    public sealed virtual void Multiply(float scalar, PrimitiveColumnContainer`1<float> column);
    public sealed virtual void Divide(PrimitiveColumnContainer`1<float> left, PrimitiveColumnContainer`1<float> right);
    public sealed virtual void Divide(PrimitiveColumnContainer`1<float> column, float scalar);
    public sealed virtual void Divide(float scalar, PrimitiveColumnContainer`1<float> column);
    public sealed virtual void Modulo(PrimitiveColumnContainer`1<float> left, PrimitiveColumnContainer`1<float> right);
    public sealed virtual void Modulo(PrimitiveColumnContainer`1<float> column, float scalar);
    public sealed virtual void Modulo(float scalar, PrimitiveColumnContainer`1<float> column);
    public sealed virtual void And(PrimitiveColumnContainer`1<float> left, PrimitiveColumnContainer`1<float> right);
    public sealed virtual void And(PrimitiveColumnContainer`1<float> column, float scalar);
    public sealed virtual void And(float scalar, PrimitiveColumnContainer`1<float> column);
    public sealed virtual void Or(PrimitiveColumnContainer`1<float> left, PrimitiveColumnContainer`1<float> right);
    public sealed virtual void Or(PrimitiveColumnContainer`1<float> column, float scalar);
    public sealed virtual void Or(float scalar, PrimitiveColumnContainer`1<float> column);
    public sealed virtual void Xor(PrimitiveColumnContainer`1<float> left, PrimitiveColumnContainer`1<float> right);
    public sealed virtual void Xor(PrimitiveColumnContainer`1<float> column, float scalar);
    public sealed virtual void Xor(float scalar, PrimitiveColumnContainer`1<float> column);
    public sealed virtual void LeftShift(PrimitiveColumnContainer`1<float> column, int value);
    public sealed virtual void RightShift(PrimitiveColumnContainer`1<float> column, int value);
    public sealed virtual void ElementwiseEquals(PrimitiveColumnContainer`1<float> left, PrimitiveColumnContainer`1<float> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseEquals(PrimitiveColumnContainer`1<float> column, float scalar, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseNotEquals(PrimitiveColumnContainer`1<float> left, PrimitiveColumnContainer`1<float> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseNotEquals(PrimitiveColumnContainer`1<float> column, float scalar, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseGreaterThanOrEqual(PrimitiveColumnContainer`1<float> left, PrimitiveColumnContainer`1<float> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseGreaterThanOrEqual(PrimitiveColumnContainer`1<float> column, float scalar, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseLessThanOrEqual(PrimitiveColumnContainer`1<float> left, PrimitiveColumnContainer`1<float> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseLessThanOrEqual(PrimitiveColumnContainer`1<float> column, float scalar, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseGreaterThan(PrimitiveColumnContainer`1<float> left, PrimitiveColumnContainer`1<float> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseGreaterThan(PrimitiveColumnContainer`1<float> column, float scalar, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseLessThan(PrimitiveColumnContainer`1<float> left, PrimitiveColumnContainer`1<float> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseLessThan(PrimitiveColumnContainer`1<float> column, float scalar, PrimitiveColumnContainer`1<bool> ret);
}
internal class Microsoft.Data.Analysis.FloatComputation : object {
    public sealed virtual void Abs(PrimitiveColumnContainer`1<float> column);
    public sealed virtual void All(PrimitiveColumnContainer`1<float> column, Boolean& ret);
    public sealed virtual void Any(PrimitiveColumnContainer`1<float> column, Boolean& ret);
    public sealed virtual void CumulativeMax(PrimitiveColumnContainer`1<float> column);
    public sealed virtual void CumulativeMax(PrimitiveColumnContainer`1<float> column, IEnumerable`1<long> rows);
    public sealed virtual void CumulativeMin(PrimitiveColumnContainer`1<float> column);
    public sealed virtual void CumulativeMin(PrimitiveColumnContainer`1<float> column, IEnumerable`1<long> rows);
    public sealed virtual void CumulativeProduct(PrimitiveColumnContainer`1<float> column);
    public sealed virtual void CumulativeProduct(PrimitiveColumnContainer`1<float> column, IEnumerable`1<long> rows);
    public sealed virtual void CumulativeSum(PrimitiveColumnContainer`1<float> column);
    public sealed virtual void CumulativeSum(PrimitiveColumnContainer`1<float> column, IEnumerable`1<long> rows);
    public sealed virtual void Max(PrimitiveColumnContainer`1<float> column, Single& ret);
    public sealed virtual void Max(PrimitiveColumnContainer`1<float> column, IEnumerable`1<long> rows, Single& ret);
    public sealed virtual void Min(PrimitiveColumnContainer`1<float> column, Single& ret);
    public sealed virtual void Min(PrimitiveColumnContainer`1<float> column, IEnumerable`1<long> rows, Single& ret);
    public sealed virtual void Product(PrimitiveColumnContainer`1<float> column, Single& ret);
    public sealed virtual void Product(PrimitiveColumnContainer`1<float> column, IEnumerable`1<long> rows, Single& ret);
    public sealed virtual void Sum(PrimitiveColumnContainer`1<float> column, Single& ret);
    public sealed virtual void Sum(PrimitiveColumnContainer`1<float> column, IEnumerable`1<long> rows, Single& ret);
    public sealed virtual void Round(PrimitiveColumnContainer`1<float> column);
}
public abstract class Microsoft.Data.Analysis.GroupBy : object {
    public abstract virtual DataFrame Count(String[] columnNames);
    public abstract virtual DataFrame First(String[] columnNames);
    public abstract virtual DataFrame Head(int numberOfRows);
    public abstract virtual DataFrame Tail(int numberOfRows);
    public abstract virtual DataFrame Max(String[] columnNames);
    public abstract virtual DataFrame Min(String[] columnNames);
    public abstract virtual DataFrame Product(String[] columnNames);
    public abstract virtual DataFrame Sum(String[] columnNames);
    public abstract virtual DataFrame Mean(String[] columnNames);
}
public class Microsoft.Data.Analysis.GroupBy`1 : GroupBy {
    private int _groupByColumnIndex;
    private IDictionary`2<TKey, ICollection`1<long>> _keyToRowIndicesMap;
    private DataFrame _dataFrame;
    public IEnumerable`1<IGrouping`2<TKey, DataFrameRow>> Groupings { get; }
    public GroupBy`1(DataFrame dataFrame, int groupByColumnIndex, IDictionary`2<TKey, ICollection`1<long>> keyToRowIndices);
    private void EnumerateColumnsWithRows(GroupByColumnDelegate<TKey> groupByColumnDelegate, ColumnDelegate<TKey> columnDelegate, String[] columnNames);
    public virtual DataFrame Count(String[] columnNames);
    public virtual DataFrame First(String[] columnNames);
    public virtual DataFrame Head(int numberOfRows);
    public virtual DataFrame Tail(int numberOfRows);
    private DataFrameColumn ResizeAndInsertColumn(int columnIndex, long rowIndex, bool firstGroup, DataFrame ret, PrimitiveDataFrameColumn`1<long> empty, Func`2<string, DataFrameColumn> getColumn);
    public virtual DataFrame Max(String[] columnNames);
    public virtual DataFrame Min(String[] columnNames);
    public virtual DataFrame Product(String[] columnNames);
    public virtual DataFrame Sum(String[] columnNames);
    public virtual DataFrame Mean(String[] columnNames);
    public IEnumerable`1<IGrouping`2<TKey, DataFrameRow>> get_Groupings();
    [CompilerGeneratedAttribute]
private Grouping<TKey> <get_Groupings>b__19_0(KeyValuePair`2<TKey, ICollection`1<long>> kvp);
    [CompilerGeneratedAttribute]
private DataFrameRow <get_Groupings>b__19_1(long index);
}
internal interface Microsoft.Data.Analysis.IByteConverter`1 {
    public abstract virtual byte GetByte(T value);
}
internal interface Microsoft.Data.Analysis.IDecimalConverter`1 {
    public abstract virtual decimal GetDecimal(T value);
}
internal interface Microsoft.Data.Analysis.IDoubleConverter`1 {
    public abstract virtual double GetDouble(T value);
}
internal interface Microsoft.Data.Analysis.IInt16Converter`1 {
    public abstract virtual short GetInt16(T value);
}
internal interface Microsoft.Data.Analysis.IInt32Converter`1 {
    public abstract virtual int GetInt32(T value);
}
internal interface Microsoft.Data.Analysis.IInt64Converter`1 {
    public abstract virtual long GetInt64(T value);
}
internal static class Microsoft.Data.Analysis.Int16Converter : object {
    public static IInt16Converter`1<T> GetInt16Converter();
}
internal static class Microsoft.Data.Analysis.Int16Converter`1 : object {
    [CompilerGeneratedAttribute]
private static IInt16Converter`1<T> <Instance>k__BackingField;
    public static IInt16Converter`1<T> Instance { get; }
    private static Int16Converter`1();
    [CompilerGeneratedAttribute]
public static IInt16Converter`1<T> get_Instance();
}
public class Microsoft.Data.Analysis.Int16DataFrameColumn : PrimitiveDataFrameColumn`1<short> {
    public Int16DataFrameColumn(string name, IEnumerable`1<Nullable`1<short>> values);
    public Int16DataFrameColumn(string name, IEnumerable`1<short> values);
    public Int16DataFrameColumn(string name, long length);
    public Int16DataFrameColumn(string name, ReadOnlyMemory`1<byte> buffer, ReadOnlyMemory`1<byte> nullBitMap, int length, int nullCount);
    internal Int16DataFrameColumn(string name, PrimitiveColumnContainer`1<short> values);
    public Int32DataFrameColumn Add(ByteDataFrameColumn column);
    public Int32DataFrameColumn Subtract(ByteDataFrameColumn column);
    public Int32DataFrameColumn Multiply(ByteDataFrameColumn column);
    public Int32DataFrameColumn Divide(ByteDataFrameColumn column);
    public Int32DataFrameColumn Modulo(ByteDataFrameColumn column);
    public DecimalDataFrameColumn Add(DecimalDataFrameColumn column);
    public DecimalDataFrameColumn Subtract(DecimalDataFrameColumn column);
    public DecimalDataFrameColumn Multiply(DecimalDataFrameColumn column);
    public DecimalDataFrameColumn Divide(DecimalDataFrameColumn column);
    public DecimalDataFrameColumn Modulo(DecimalDataFrameColumn column);
    public DoubleDataFrameColumn Add(DoubleDataFrameColumn column);
    public DoubleDataFrameColumn Subtract(DoubleDataFrameColumn column);
    public DoubleDataFrameColumn Multiply(DoubleDataFrameColumn column);
    public DoubleDataFrameColumn Divide(DoubleDataFrameColumn column);
    public DoubleDataFrameColumn Modulo(DoubleDataFrameColumn column);
    public SingleDataFrameColumn Add(SingleDataFrameColumn column);
    public SingleDataFrameColumn Subtract(SingleDataFrameColumn column);
    public SingleDataFrameColumn Multiply(SingleDataFrameColumn column);
    public SingleDataFrameColumn Divide(SingleDataFrameColumn column);
    public SingleDataFrameColumn Modulo(SingleDataFrameColumn column);
    public Int32DataFrameColumn Add(Int32DataFrameColumn column);
    public Int32DataFrameColumn Subtract(Int32DataFrameColumn column);
    public Int32DataFrameColumn Multiply(Int32DataFrameColumn column);
    public Int32DataFrameColumn Divide(Int32DataFrameColumn column);
    public Int32DataFrameColumn Modulo(Int32DataFrameColumn column);
    public Int64DataFrameColumn Add(Int64DataFrameColumn column);
    public Int64DataFrameColumn Subtract(Int64DataFrameColumn column);
    public Int64DataFrameColumn Multiply(Int64DataFrameColumn column);
    public Int64DataFrameColumn Divide(Int64DataFrameColumn column);
    public Int64DataFrameColumn Modulo(Int64DataFrameColumn column);
    public Int32DataFrameColumn Add(SByteDataFrameColumn column);
    public Int32DataFrameColumn Subtract(SByteDataFrameColumn column);
    public Int32DataFrameColumn Multiply(SByteDataFrameColumn column);
    public Int32DataFrameColumn Divide(SByteDataFrameColumn column);
    public Int32DataFrameColumn Modulo(SByteDataFrameColumn column);
    public Int32DataFrameColumn Add(Int16DataFrameColumn column);
    public Int32DataFrameColumn Subtract(Int16DataFrameColumn column);
    public Int32DataFrameColumn Multiply(Int16DataFrameColumn column);
    public Int32DataFrameColumn Divide(Int16DataFrameColumn column);
    public Int32DataFrameColumn Modulo(Int16DataFrameColumn column);
    public Int64DataFrameColumn Add(UInt32DataFrameColumn column);
    public Int64DataFrameColumn Subtract(UInt32DataFrameColumn column);
    public Int64DataFrameColumn Multiply(UInt32DataFrameColumn column);
    public Int64DataFrameColumn Divide(UInt32DataFrameColumn column);
    public Int64DataFrameColumn Modulo(UInt32DataFrameColumn column);
    public SingleDataFrameColumn Add(UInt64DataFrameColumn column);
    public SingleDataFrameColumn Subtract(UInt64DataFrameColumn column);
    public SingleDataFrameColumn Multiply(UInt64DataFrameColumn column);
    public SingleDataFrameColumn Divide(UInt64DataFrameColumn column);
    public SingleDataFrameColumn Modulo(UInt64DataFrameColumn column);
    public Int32DataFrameColumn Add(UInt16DataFrameColumn column);
    public Int32DataFrameColumn Subtract(UInt16DataFrameColumn column);
    public Int32DataFrameColumn Multiply(UInt16DataFrameColumn column);
    public Int32DataFrameColumn Divide(UInt16DataFrameColumn column);
    public Int32DataFrameColumn Modulo(UInt16DataFrameColumn column);
    public Int32DataFrameColumn Add(byte value);
    public Int32DataFrameColumn ReverseAdd(byte value);
    public Int32DataFrameColumn Subtract(byte value);
    public Int32DataFrameColumn ReverseSubtract(byte value);
    public Int32DataFrameColumn Multiply(byte value);
    public Int32DataFrameColumn ReverseMultiply(byte value);
    public Int32DataFrameColumn Divide(byte value);
    public Int32DataFrameColumn ReverseDivide(byte value);
    public Int32DataFrameColumn Modulo(byte value);
    public Int32DataFrameColumn ReverseModulo(byte value);
    public DecimalDataFrameColumn Add(decimal value);
    public DecimalDataFrameColumn ReverseAdd(decimal value);
    public DecimalDataFrameColumn Subtract(decimal value);
    public DecimalDataFrameColumn ReverseSubtract(decimal value);
    public DecimalDataFrameColumn Multiply(decimal value);
    public DecimalDataFrameColumn ReverseMultiply(decimal value);
    public DecimalDataFrameColumn Divide(decimal value);
    public DecimalDataFrameColumn ReverseDivide(decimal value);
    public DecimalDataFrameColumn Modulo(decimal value);
    public DecimalDataFrameColumn ReverseModulo(decimal value);
    public DoubleDataFrameColumn Add(double value);
    public DoubleDataFrameColumn ReverseAdd(double value);
    public DoubleDataFrameColumn Subtract(double value);
    public DoubleDataFrameColumn ReverseSubtract(double value);
    public DoubleDataFrameColumn Multiply(double value);
    public DoubleDataFrameColumn ReverseMultiply(double value);
    public DoubleDataFrameColumn Divide(double value);
    public DoubleDataFrameColumn ReverseDivide(double value);
    public DoubleDataFrameColumn Modulo(double value);
    public DoubleDataFrameColumn ReverseModulo(double value);
    public SingleDataFrameColumn Add(float value);
    public SingleDataFrameColumn ReverseAdd(float value);
    public SingleDataFrameColumn Subtract(float value);
    public SingleDataFrameColumn ReverseSubtract(float value);
    public SingleDataFrameColumn Multiply(float value);
    public SingleDataFrameColumn ReverseMultiply(float value);
    public SingleDataFrameColumn Divide(float value);
    public SingleDataFrameColumn ReverseDivide(float value);
    public SingleDataFrameColumn Modulo(float value);
    public SingleDataFrameColumn ReverseModulo(float value);
    public Int32DataFrameColumn Add(int value);
    public Int32DataFrameColumn ReverseAdd(int value);
    public Int32DataFrameColumn Subtract(int value);
    public Int32DataFrameColumn ReverseSubtract(int value);
    public Int32DataFrameColumn Multiply(int value);
    public Int32DataFrameColumn ReverseMultiply(int value);
    public Int32DataFrameColumn Divide(int value);
    public Int32DataFrameColumn ReverseDivide(int value);
    public Int32DataFrameColumn Modulo(int value);
    public Int32DataFrameColumn ReverseModulo(int value);
    public Int64DataFrameColumn Add(long value);
    public Int64DataFrameColumn ReverseAdd(long value);
    public Int64DataFrameColumn Subtract(long value);
    public Int64DataFrameColumn ReverseSubtract(long value);
    public Int64DataFrameColumn Multiply(long value);
    public Int64DataFrameColumn ReverseMultiply(long value);
    public Int64DataFrameColumn Divide(long value);
    public Int64DataFrameColumn ReverseDivide(long value);
    public Int64DataFrameColumn Modulo(long value);
    public Int64DataFrameColumn ReverseModulo(long value);
    public Int32DataFrameColumn Add(sbyte value);
    public Int32DataFrameColumn ReverseAdd(sbyte value);
    public Int32DataFrameColumn Subtract(sbyte value);
    public Int32DataFrameColumn ReverseSubtract(sbyte value);
    public Int32DataFrameColumn Multiply(sbyte value);
    public Int32DataFrameColumn ReverseMultiply(sbyte value);
    public Int32DataFrameColumn Divide(sbyte value);
    public Int32DataFrameColumn ReverseDivide(sbyte value);
    public Int32DataFrameColumn Modulo(sbyte value);
    public Int32DataFrameColumn ReverseModulo(sbyte value);
    public Int32DataFrameColumn Add(short value);
    public Int32DataFrameColumn ReverseAdd(short value);
    public Int32DataFrameColumn Subtract(short value);
    public Int32DataFrameColumn ReverseSubtract(short value);
    public Int32DataFrameColumn Multiply(short value);
    public Int32DataFrameColumn ReverseMultiply(short value);
    public Int32DataFrameColumn Divide(short value);
    public Int32DataFrameColumn ReverseDivide(short value);
    public Int32DataFrameColumn Modulo(short value);
    public Int32DataFrameColumn ReverseModulo(short value);
    public Int64DataFrameColumn Add(UInt32 value);
    public Int64DataFrameColumn ReverseAdd(UInt32 value);
    public Int64DataFrameColumn Subtract(UInt32 value);
    public Int64DataFrameColumn ReverseSubtract(UInt32 value);
    public Int64DataFrameColumn Multiply(UInt32 value);
    public Int64DataFrameColumn ReverseMultiply(UInt32 value);
    public Int64DataFrameColumn Divide(UInt32 value);
    public Int64DataFrameColumn ReverseDivide(UInt32 value);
    public Int64DataFrameColumn Modulo(UInt32 value);
    public Int64DataFrameColumn ReverseModulo(UInt32 value);
    public SingleDataFrameColumn Add(ulong value);
    public SingleDataFrameColumn ReverseAdd(ulong value);
    public SingleDataFrameColumn Subtract(ulong value);
    public SingleDataFrameColumn ReverseSubtract(ulong value);
    public SingleDataFrameColumn Multiply(ulong value);
    public SingleDataFrameColumn ReverseMultiply(ulong value);
    public SingleDataFrameColumn Divide(ulong value);
    public SingleDataFrameColumn ReverseDivide(ulong value);
    public SingleDataFrameColumn Modulo(ulong value);
    public SingleDataFrameColumn ReverseModulo(ulong value);
    public Int32DataFrameColumn Add(ushort value);
    public Int32DataFrameColumn ReverseAdd(ushort value);
    public Int32DataFrameColumn Subtract(ushort value);
    public Int32DataFrameColumn ReverseSubtract(ushort value);
    public Int32DataFrameColumn Multiply(ushort value);
    public Int32DataFrameColumn ReverseMultiply(ushort value);
    public Int32DataFrameColumn Divide(ushort value);
    public Int32DataFrameColumn ReverseDivide(ushort value);
    public Int32DataFrameColumn Modulo(ushort value);
    public Int32DataFrameColumn ReverseModulo(ushort value);
    public BooleanDataFrameColumn ElementwiseEquals(ByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(ByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(ByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(ByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(ByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(ByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(DecimalDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(DecimalDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(DecimalDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(DecimalDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(DecimalDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(DecimalDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(DoubleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(DoubleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(DoubleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(DoubleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(DoubleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(DoubleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(SingleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(SingleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(SingleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(SingleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(SingleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(SingleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(Int32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(Int32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(Int32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(Int32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(Int32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(Int32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(Int64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(Int64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(Int64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(Int64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(Int64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(Int64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(SByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(SByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(SByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(SByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(SByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(SByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(Int16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(Int16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(Int16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(Int16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(Int16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(Int16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(UInt32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(UInt32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(UInt32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(UInt32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(UInt32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(UInt32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(UInt64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(UInt64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(UInt64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(UInt64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(UInt64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(UInt64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(UInt16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(UInt16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(UInt16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(UInt16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(UInt16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(UInt16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(byte value);
    public BooleanDataFrameColumn ElementwiseNotEquals(byte value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(byte value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(byte value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(byte value);
    public BooleanDataFrameColumn ElementwiseLessThan(byte value);
    public BooleanDataFrameColumn ElementwiseEquals(decimal value);
    public BooleanDataFrameColumn ElementwiseNotEquals(decimal value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(decimal value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(decimal value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(decimal value);
    public BooleanDataFrameColumn ElementwiseLessThan(decimal value);
    public BooleanDataFrameColumn ElementwiseEquals(double value);
    public BooleanDataFrameColumn ElementwiseNotEquals(double value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(double value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(double value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(double value);
    public BooleanDataFrameColumn ElementwiseLessThan(double value);
    public BooleanDataFrameColumn ElementwiseEquals(float value);
    public BooleanDataFrameColumn ElementwiseNotEquals(float value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(float value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(float value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(float value);
    public BooleanDataFrameColumn ElementwiseLessThan(float value);
    public BooleanDataFrameColumn ElementwiseEquals(int value);
    public BooleanDataFrameColumn ElementwiseNotEquals(int value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(int value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(int value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(int value);
    public BooleanDataFrameColumn ElementwiseLessThan(int value);
    public BooleanDataFrameColumn ElementwiseEquals(long value);
    public BooleanDataFrameColumn ElementwiseNotEquals(long value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(long value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(long value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(long value);
    public BooleanDataFrameColumn ElementwiseLessThan(long value);
    public BooleanDataFrameColumn ElementwiseEquals(sbyte value);
    public BooleanDataFrameColumn ElementwiseNotEquals(sbyte value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(sbyte value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(sbyte value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(sbyte value);
    public BooleanDataFrameColumn ElementwiseLessThan(sbyte value);
    public BooleanDataFrameColumn ElementwiseEquals(short value);
    public BooleanDataFrameColumn ElementwiseNotEquals(short value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(short value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(short value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(short value);
    public BooleanDataFrameColumn ElementwiseLessThan(short value);
    public BooleanDataFrameColumn ElementwiseEquals(UInt32 value);
    public BooleanDataFrameColumn ElementwiseNotEquals(UInt32 value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(UInt32 value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(UInt32 value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(UInt32 value);
    public BooleanDataFrameColumn ElementwiseLessThan(UInt32 value);
    public BooleanDataFrameColumn ElementwiseEquals(ulong value);
    public BooleanDataFrameColumn ElementwiseNotEquals(ulong value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(ulong value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(ulong value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(ulong value);
    public BooleanDataFrameColumn ElementwiseLessThan(ulong value);
    public BooleanDataFrameColumn ElementwiseEquals(ushort value);
    public BooleanDataFrameColumn ElementwiseNotEquals(ushort value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(ushort value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(ushort value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(ushort value);
    public BooleanDataFrameColumn ElementwiseLessThan(ushort value);
    public Int32DataFrameColumn LeftShift(int value, bool inPlace);
    public Int32DataFrameColumn RightShift(int value, bool inPlace);
    internal BooleanDataFrameColumn ElementwiseEqualsImplementation(Int16DataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseEqualsImplementation(short value);
    internal BooleanDataFrameColumn ElementwiseNotEqualsImplementation(Int16DataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseNotEqualsImplementation(short value);
    internal BooleanDataFrameColumn ElementwiseGreaterThanOrEqualImplementation(Int16DataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseGreaterThanOrEqualImplementation(short value);
    internal BooleanDataFrameColumn ElementwiseLessThanOrEqualImplementation(Int16DataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseLessThanOrEqualImplementation(short value);
    internal BooleanDataFrameColumn ElementwiseGreaterThanImplementation(Int16DataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseGreaterThanImplementation(short value);
    internal BooleanDataFrameColumn ElementwiseLessThanImplementation(Int16DataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseLessThanImplementation(short value);
    public static Int32DataFrameColumn op_Addition(Int16DataFrameColumn left, ByteDataFrameColumn right);
    public static DecimalDataFrameColumn op_Addition(Int16DataFrameColumn left, DecimalDataFrameColumn right);
    public static DoubleDataFrameColumn op_Addition(Int16DataFrameColumn left, DoubleDataFrameColumn right);
    public static SingleDataFrameColumn op_Addition(Int16DataFrameColumn left, SingleDataFrameColumn right);
    public static Int32DataFrameColumn op_Addition(Int16DataFrameColumn left, Int32DataFrameColumn right);
    public static Int64DataFrameColumn op_Addition(Int16DataFrameColumn left, Int64DataFrameColumn right);
    public static Int32DataFrameColumn op_Addition(Int16DataFrameColumn left, SByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Addition(Int16DataFrameColumn left, Int16DataFrameColumn right);
    public static Int64DataFrameColumn op_Addition(Int16DataFrameColumn left, UInt32DataFrameColumn right);
    public static SingleDataFrameColumn op_Addition(Int16DataFrameColumn left, UInt64DataFrameColumn right);
    public static Int32DataFrameColumn op_Addition(Int16DataFrameColumn left, UInt16DataFrameColumn right);
    public static Int32DataFrameColumn op_Addition(Int16DataFrameColumn left, byte right);
    public static Int32DataFrameColumn op_Addition(byte left, Int16DataFrameColumn right);
    public static DecimalDataFrameColumn op_Addition(Int16DataFrameColumn left, decimal right);
    public static DecimalDataFrameColumn op_Addition(decimal left, Int16DataFrameColumn right);
    public static DoubleDataFrameColumn op_Addition(Int16DataFrameColumn left, double right);
    public static DoubleDataFrameColumn op_Addition(double left, Int16DataFrameColumn right);
    public static SingleDataFrameColumn op_Addition(Int16DataFrameColumn left, float right);
    public static SingleDataFrameColumn op_Addition(float left, Int16DataFrameColumn right);
    public static Int32DataFrameColumn op_Addition(Int16DataFrameColumn left, int right);
    public static Int32DataFrameColumn op_Addition(int left, Int16DataFrameColumn right);
    public static Int64DataFrameColumn op_Addition(Int16DataFrameColumn left, long right);
    public static Int64DataFrameColumn op_Addition(long left, Int16DataFrameColumn right);
    public static Int32DataFrameColumn op_Addition(Int16DataFrameColumn left, sbyte right);
    public static Int32DataFrameColumn op_Addition(sbyte left, Int16DataFrameColumn right);
    public static Int32DataFrameColumn op_Addition(Int16DataFrameColumn left, short right);
    public static Int32DataFrameColumn op_Addition(short left, Int16DataFrameColumn right);
    public static Int64DataFrameColumn op_Addition(Int16DataFrameColumn left, UInt32 right);
    public static Int64DataFrameColumn op_Addition(UInt32 left, Int16DataFrameColumn right);
    public static SingleDataFrameColumn op_Addition(Int16DataFrameColumn left, ulong right);
    public static SingleDataFrameColumn op_Addition(ulong left, Int16DataFrameColumn right);
    public static Int32DataFrameColumn op_Addition(Int16DataFrameColumn left, ushort right);
    public static Int32DataFrameColumn op_Addition(ushort left, Int16DataFrameColumn right);
    public static Int32DataFrameColumn op_Subtraction(Int16DataFrameColumn left, ByteDataFrameColumn right);
    public static DecimalDataFrameColumn op_Subtraction(Int16DataFrameColumn left, DecimalDataFrameColumn right);
    public static DoubleDataFrameColumn op_Subtraction(Int16DataFrameColumn left, DoubleDataFrameColumn right);
    public static SingleDataFrameColumn op_Subtraction(Int16DataFrameColumn left, SingleDataFrameColumn right);
    public static Int32DataFrameColumn op_Subtraction(Int16DataFrameColumn left, Int32DataFrameColumn right);
    public static Int64DataFrameColumn op_Subtraction(Int16DataFrameColumn left, Int64DataFrameColumn right);
    public static Int32DataFrameColumn op_Subtraction(Int16DataFrameColumn left, SByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Subtraction(Int16DataFrameColumn left, Int16DataFrameColumn right);
    public static Int64DataFrameColumn op_Subtraction(Int16DataFrameColumn left, UInt32DataFrameColumn right);
    public static SingleDataFrameColumn op_Subtraction(Int16DataFrameColumn left, UInt64DataFrameColumn right);
    public static Int32DataFrameColumn op_Subtraction(Int16DataFrameColumn left, UInt16DataFrameColumn right);
    public static Int32DataFrameColumn op_Subtraction(Int16DataFrameColumn left, byte right);
    public static Int32DataFrameColumn op_Subtraction(byte left, Int16DataFrameColumn right);
    public static DecimalDataFrameColumn op_Subtraction(Int16DataFrameColumn left, decimal right);
    public static DecimalDataFrameColumn op_Subtraction(decimal left, Int16DataFrameColumn right);
    public static DoubleDataFrameColumn op_Subtraction(Int16DataFrameColumn left, double right);
    public static DoubleDataFrameColumn op_Subtraction(double left, Int16DataFrameColumn right);
    public static SingleDataFrameColumn op_Subtraction(Int16DataFrameColumn left, float right);
    public static SingleDataFrameColumn op_Subtraction(float left, Int16DataFrameColumn right);
    public static Int32DataFrameColumn op_Subtraction(Int16DataFrameColumn left, int right);
    public static Int32DataFrameColumn op_Subtraction(int left, Int16DataFrameColumn right);
    public static Int64DataFrameColumn op_Subtraction(Int16DataFrameColumn left, long right);
    public static Int64DataFrameColumn op_Subtraction(long left, Int16DataFrameColumn right);
    public static Int32DataFrameColumn op_Subtraction(Int16DataFrameColumn left, sbyte right);
    public static Int32DataFrameColumn op_Subtraction(sbyte left, Int16DataFrameColumn right);
    public static Int32DataFrameColumn op_Subtraction(Int16DataFrameColumn left, short right);
    public static Int32DataFrameColumn op_Subtraction(short left, Int16DataFrameColumn right);
    public static Int64DataFrameColumn op_Subtraction(Int16DataFrameColumn left, UInt32 right);
    public static Int64DataFrameColumn op_Subtraction(UInt32 left, Int16DataFrameColumn right);
    public static SingleDataFrameColumn op_Subtraction(Int16DataFrameColumn left, ulong right);
    public static SingleDataFrameColumn op_Subtraction(ulong left, Int16DataFrameColumn right);
    public static Int32DataFrameColumn op_Subtraction(Int16DataFrameColumn left, ushort right);
    public static Int32DataFrameColumn op_Subtraction(ushort left, Int16DataFrameColumn right);
    public static Int32DataFrameColumn op_Multiply(Int16DataFrameColumn left, ByteDataFrameColumn right);
    public static DecimalDataFrameColumn op_Multiply(Int16DataFrameColumn left, DecimalDataFrameColumn right);
    public static DoubleDataFrameColumn op_Multiply(Int16DataFrameColumn left, DoubleDataFrameColumn right);
    public static SingleDataFrameColumn op_Multiply(Int16DataFrameColumn left, SingleDataFrameColumn right);
    public static Int32DataFrameColumn op_Multiply(Int16DataFrameColumn left, Int32DataFrameColumn right);
    public static Int64DataFrameColumn op_Multiply(Int16DataFrameColumn left, Int64DataFrameColumn right);
    public static Int32DataFrameColumn op_Multiply(Int16DataFrameColumn left, SByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Multiply(Int16DataFrameColumn left, Int16DataFrameColumn right);
    public static Int64DataFrameColumn op_Multiply(Int16DataFrameColumn left, UInt32DataFrameColumn right);
    public static SingleDataFrameColumn op_Multiply(Int16DataFrameColumn left, UInt64DataFrameColumn right);
    public static Int32DataFrameColumn op_Multiply(Int16DataFrameColumn left, UInt16DataFrameColumn right);
    public static Int32DataFrameColumn op_Multiply(Int16DataFrameColumn left, byte right);
    public static Int32DataFrameColumn op_Multiply(byte left, Int16DataFrameColumn right);
    public static DecimalDataFrameColumn op_Multiply(Int16DataFrameColumn left, decimal right);
    public static DecimalDataFrameColumn op_Multiply(decimal left, Int16DataFrameColumn right);
    public static DoubleDataFrameColumn op_Multiply(Int16DataFrameColumn left, double right);
    public static DoubleDataFrameColumn op_Multiply(double left, Int16DataFrameColumn right);
    public static SingleDataFrameColumn op_Multiply(Int16DataFrameColumn left, float right);
    public static SingleDataFrameColumn op_Multiply(float left, Int16DataFrameColumn right);
    public static Int32DataFrameColumn op_Multiply(Int16DataFrameColumn left, int right);
    public static Int32DataFrameColumn op_Multiply(int left, Int16DataFrameColumn right);
    public static Int64DataFrameColumn op_Multiply(Int16DataFrameColumn left, long right);
    public static Int64DataFrameColumn op_Multiply(long left, Int16DataFrameColumn right);
    public static Int32DataFrameColumn op_Multiply(Int16DataFrameColumn left, sbyte right);
    public static Int32DataFrameColumn op_Multiply(sbyte left, Int16DataFrameColumn right);
    public static Int32DataFrameColumn op_Multiply(Int16DataFrameColumn left, short right);
    public static Int32DataFrameColumn op_Multiply(short left, Int16DataFrameColumn right);
    public static Int64DataFrameColumn op_Multiply(Int16DataFrameColumn left, UInt32 right);
    public static Int64DataFrameColumn op_Multiply(UInt32 left, Int16DataFrameColumn right);
    public static SingleDataFrameColumn op_Multiply(Int16DataFrameColumn left, ulong right);
    public static SingleDataFrameColumn op_Multiply(ulong left, Int16DataFrameColumn right);
    public static Int32DataFrameColumn op_Multiply(Int16DataFrameColumn left, ushort right);
    public static Int32DataFrameColumn op_Multiply(ushort left, Int16DataFrameColumn right);
    public static Int32DataFrameColumn op_Division(Int16DataFrameColumn left, ByteDataFrameColumn right);
    public static DecimalDataFrameColumn op_Division(Int16DataFrameColumn left, DecimalDataFrameColumn right);
    public static DoubleDataFrameColumn op_Division(Int16DataFrameColumn left, DoubleDataFrameColumn right);
    public static SingleDataFrameColumn op_Division(Int16DataFrameColumn left, SingleDataFrameColumn right);
    public static Int32DataFrameColumn op_Division(Int16DataFrameColumn left, Int32DataFrameColumn right);
    public static Int64DataFrameColumn op_Division(Int16DataFrameColumn left, Int64DataFrameColumn right);
    public static Int32DataFrameColumn op_Division(Int16DataFrameColumn left, SByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Division(Int16DataFrameColumn left, Int16DataFrameColumn right);
    public static Int64DataFrameColumn op_Division(Int16DataFrameColumn left, UInt32DataFrameColumn right);
    public static SingleDataFrameColumn op_Division(Int16DataFrameColumn left, UInt64DataFrameColumn right);
    public static Int32DataFrameColumn op_Division(Int16DataFrameColumn left, UInt16DataFrameColumn right);
    public static Int32DataFrameColumn op_Division(Int16DataFrameColumn left, byte right);
    public static Int32DataFrameColumn op_Division(byte left, Int16DataFrameColumn right);
    public static DecimalDataFrameColumn op_Division(Int16DataFrameColumn left, decimal right);
    public static DecimalDataFrameColumn op_Division(decimal left, Int16DataFrameColumn right);
    public static DoubleDataFrameColumn op_Division(Int16DataFrameColumn left, double right);
    public static DoubleDataFrameColumn op_Division(double left, Int16DataFrameColumn right);
    public static SingleDataFrameColumn op_Division(Int16DataFrameColumn left, float right);
    public static SingleDataFrameColumn op_Division(float left, Int16DataFrameColumn right);
    public static Int32DataFrameColumn op_Division(Int16DataFrameColumn left, int right);
    public static Int32DataFrameColumn op_Division(int left, Int16DataFrameColumn right);
    public static Int64DataFrameColumn op_Division(Int16DataFrameColumn left, long right);
    public static Int64DataFrameColumn op_Division(long left, Int16DataFrameColumn right);
    public static Int32DataFrameColumn op_Division(Int16DataFrameColumn left, sbyte right);
    public static Int32DataFrameColumn op_Division(sbyte left, Int16DataFrameColumn right);
    public static Int32DataFrameColumn op_Division(Int16DataFrameColumn left, short right);
    public static Int32DataFrameColumn op_Division(short left, Int16DataFrameColumn right);
    public static Int64DataFrameColumn op_Division(Int16DataFrameColumn left, UInt32 right);
    public static Int64DataFrameColumn op_Division(UInt32 left, Int16DataFrameColumn right);
    public static SingleDataFrameColumn op_Division(Int16DataFrameColumn left, ulong right);
    public static SingleDataFrameColumn op_Division(ulong left, Int16DataFrameColumn right);
    public static Int32DataFrameColumn op_Division(Int16DataFrameColumn left, ushort right);
    public static Int32DataFrameColumn op_Division(ushort left, Int16DataFrameColumn right);
    public static Int32DataFrameColumn op_Modulus(Int16DataFrameColumn left, ByteDataFrameColumn right);
    public static DecimalDataFrameColumn op_Modulus(Int16DataFrameColumn left, DecimalDataFrameColumn right);
    public static DoubleDataFrameColumn op_Modulus(Int16DataFrameColumn left, DoubleDataFrameColumn right);
    public static SingleDataFrameColumn op_Modulus(Int16DataFrameColumn left, SingleDataFrameColumn right);
    public static Int32DataFrameColumn op_Modulus(Int16DataFrameColumn left, Int32DataFrameColumn right);
    public static Int64DataFrameColumn op_Modulus(Int16DataFrameColumn left, Int64DataFrameColumn right);
    public static Int32DataFrameColumn op_Modulus(Int16DataFrameColumn left, SByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Modulus(Int16DataFrameColumn left, Int16DataFrameColumn right);
    public static Int64DataFrameColumn op_Modulus(Int16DataFrameColumn left, UInt32DataFrameColumn right);
    public static SingleDataFrameColumn op_Modulus(Int16DataFrameColumn left, UInt64DataFrameColumn right);
    public static Int32DataFrameColumn op_Modulus(Int16DataFrameColumn left, UInt16DataFrameColumn right);
    public static Int32DataFrameColumn op_Modulus(Int16DataFrameColumn left, byte right);
    public static Int32DataFrameColumn op_Modulus(byte left, Int16DataFrameColumn right);
    public static DecimalDataFrameColumn op_Modulus(Int16DataFrameColumn left, decimal right);
    public static DecimalDataFrameColumn op_Modulus(decimal left, Int16DataFrameColumn right);
    public static DoubleDataFrameColumn op_Modulus(Int16DataFrameColumn left, double right);
    public static DoubleDataFrameColumn op_Modulus(double left, Int16DataFrameColumn right);
    public static SingleDataFrameColumn op_Modulus(Int16DataFrameColumn left, float right);
    public static SingleDataFrameColumn op_Modulus(float left, Int16DataFrameColumn right);
    public static Int32DataFrameColumn op_Modulus(Int16DataFrameColumn left, int right);
    public static Int32DataFrameColumn op_Modulus(int left, Int16DataFrameColumn right);
    public static Int64DataFrameColumn op_Modulus(Int16DataFrameColumn left, long right);
    public static Int64DataFrameColumn op_Modulus(long left, Int16DataFrameColumn right);
    public static Int32DataFrameColumn op_Modulus(Int16DataFrameColumn left, sbyte right);
    public static Int32DataFrameColumn op_Modulus(sbyte left, Int16DataFrameColumn right);
    public static Int32DataFrameColumn op_Modulus(Int16DataFrameColumn left, short right);
    public static Int32DataFrameColumn op_Modulus(short left, Int16DataFrameColumn right);
    public static Int64DataFrameColumn op_Modulus(Int16DataFrameColumn left, UInt32 right);
    public static Int64DataFrameColumn op_Modulus(UInt32 left, Int16DataFrameColumn right);
    public static SingleDataFrameColumn op_Modulus(Int16DataFrameColumn left, ulong right);
    public static SingleDataFrameColumn op_Modulus(ulong left, Int16DataFrameColumn right);
    public static Int32DataFrameColumn op_Modulus(Int16DataFrameColumn left, ushort right);
    public static Int32DataFrameColumn op_Modulus(ushort left, Int16DataFrameColumn right);
    public static Int32DataFrameColumn op_LeftShift(Int16DataFrameColumn left, int value);
    public static Int32DataFrameColumn op_RightShift(Int16DataFrameColumn left, int value);
}
internal class Microsoft.Data.Analysis.Int16DecimalConverter : object {
    public sealed virtual decimal GetDecimal(short value);
}
internal class Microsoft.Data.Analysis.Int16DoubleConverter : object {
    public sealed virtual double GetDouble(short value);
}
internal class Microsoft.Data.Analysis.Int16Int16Converter : object {
    public sealed virtual short GetInt16(short value);
}
internal class Microsoft.Data.Analysis.Int16Int32Converter : object {
    public sealed virtual int GetInt32(short value);
}
internal class Microsoft.Data.Analysis.Int16Int64Converter : object {
    public sealed virtual long GetInt64(short value);
}
internal class Microsoft.Data.Analysis.Int16SingleConverter : object {
    public sealed virtual float GetSingle(short value);
}
internal class Microsoft.Data.Analysis.Int16UInt16Converter : object {
    public sealed virtual ushort GetUInt16(short value);
}
internal class Microsoft.Data.Analysis.Int16UInt32Converter : object {
    public sealed virtual UInt32 GetUInt32(short value);
}
internal class Microsoft.Data.Analysis.Int16UInt64Converter : object {
    public sealed virtual ulong GetUInt64(short value);
}
internal static class Microsoft.Data.Analysis.Int32Converter : object {
    public static IInt32Converter`1<T> GetInt32Converter();
}
internal static class Microsoft.Data.Analysis.Int32Converter`1 : object {
    [CompilerGeneratedAttribute]
private static IInt32Converter`1<T> <Instance>k__BackingField;
    public static IInt32Converter`1<T> Instance { get; }
    private static Int32Converter`1();
    [CompilerGeneratedAttribute]
public static IInt32Converter`1<T> get_Instance();
}
public class Microsoft.Data.Analysis.Int32DataFrameColumn : PrimitiveDataFrameColumn`1<int> {
    public Int32DataFrameColumn(string name, IEnumerable`1<Nullable`1<int>> values);
    public Int32DataFrameColumn(string name, IEnumerable`1<int> values);
    public Int32DataFrameColumn(string name, long length);
    public Int32DataFrameColumn(string name, ReadOnlyMemory`1<byte> buffer, ReadOnlyMemory`1<byte> nullBitMap, int length, int nullCount);
    internal Int32DataFrameColumn(string name, PrimitiveColumnContainer`1<int> values);
    public Int32DataFrameColumn Add(ByteDataFrameColumn column, bool inPlace);
    public Int32DataFrameColumn Subtract(ByteDataFrameColumn column, bool inPlace);
    public Int32DataFrameColumn Multiply(ByteDataFrameColumn column, bool inPlace);
    public Int32DataFrameColumn Divide(ByteDataFrameColumn column, bool inPlace);
    public Int32DataFrameColumn Modulo(ByteDataFrameColumn column, bool inPlace);
    public DecimalDataFrameColumn Add(DecimalDataFrameColumn column);
    public DecimalDataFrameColumn Subtract(DecimalDataFrameColumn column);
    public DecimalDataFrameColumn Multiply(DecimalDataFrameColumn column);
    public DecimalDataFrameColumn Divide(DecimalDataFrameColumn column);
    public DecimalDataFrameColumn Modulo(DecimalDataFrameColumn column);
    public DoubleDataFrameColumn Add(DoubleDataFrameColumn column);
    public DoubleDataFrameColumn Subtract(DoubleDataFrameColumn column);
    public DoubleDataFrameColumn Multiply(DoubleDataFrameColumn column);
    public DoubleDataFrameColumn Divide(DoubleDataFrameColumn column);
    public DoubleDataFrameColumn Modulo(DoubleDataFrameColumn column);
    public SingleDataFrameColumn Add(SingleDataFrameColumn column);
    public SingleDataFrameColumn Subtract(SingleDataFrameColumn column);
    public SingleDataFrameColumn Multiply(SingleDataFrameColumn column);
    public SingleDataFrameColumn Divide(SingleDataFrameColumn column);
    public SingleDataFrameColumn Modulo(SingleDataFrameColumn column);
    public Int32DataFrameColumn Add(Int32DataFrameColumn column, bool inPlace);
    public Int32DataFrameColumn Subtract(Int32DataFrameColumn column, bool inPlace);
    public Int32DataFrameColumn Multiply(Int32DataFrameColumn column, bool inPlace);
    public Int32DataFrameColumn Divide(Int32DataFrameColumn column, bool inPlace);
    public Int32DataFrameColumn Modulo(Int32DataFrameColumn column, bool inPlace);
    public Int64DataFrameColumn Add(Int64DataFrameColumn column);
    public Int64DataFrameColumn Subtract(Int64DataFrameColumn column);
    public Int64DataFrameColumn Multiply(Int64DataFrameColumn column);
    public Int64DataFrameColumn Divide(Int64DataFrameColumn column);
    public Int64DataFrameColumn Modulo(Int64DataFrameColumn column);
    public Int32DataFrameColumn Add(SByteDataFrameColumn column, bool inPlace);
    public Int32DataFrameColumn Subtract(SByteDataFrameColumn column, bool inPlace);
    public Int32DataFrameColumn Multiply(SByteDataFrameColumn column, bool inPlace);
    public Int32DataFrameColumn Divide(SByteDataFrameColumn column, bool inPlace);
    public Int32DataFrameColumn Modulo(SByteDataFrameColumn column, bool inPlace);
    public Int32DataFrameColumn Add(Int16DataFrameColumn column, bool inPlace);
    public Int32DataFrameColumn Subtract(Int16DataFrameColumn column, bool inPlace);
    public Int32DataFrameColumn Multiply(Int16DataFrameColumn column, bool inPlace);
    public Int32DataFrameColumn Divide(Int16DataFrameColumn column, bool inPlace);
    public Int32DataFrameColumn Modulo(Int16DataFrameColumn column, bool inPlace);
    public Int64DataFrameColumn Add(UInt32DataFrameColumn column);
    public Int64DataFrameColumn Subtract(UInt32DataFrameColumn column);
    public Int64DataFrameColumn Multiply(UInt32DataFrameColumn column);
    public Int64DataFrameColumn Divide(UInt32DataFrameColumn column);
    public Int64DataFrameColumn Modulo(UInt32DataFrameColumn column);
    public SingleDataFrameColumn Add(UInt64DataFrameColumn column);
    public SingleDataFrameColumn Subtract(UInt64DataFrameColumn column);
    public SingleDataFrameColumn Multiply(UInt64DataFrameColumn column);
    public SingleDataFrameColumn Divide(UInt64DataFrameColumn column);
    public SingleDataFrameColumn Modulo(UInt64DataFrameColumn column);
    public Int32DataFrameColumn Add(UInt16DataFrameColumn column, bool inPlace);
    public Int32DataFrameColumn Subtract(UInt16DataFrameColumn column, bool inPlace);
    public Int32DataFrameColumn Multiply(UInt16DataFrameColumn column, bool inPlace);
    public Int32DataFrameColumn Divide(UInt16DataFrameColumn column, bool inPlace);
    public Int32DataFrameColumn Modulo(UInt16DataFrameColumn column, bool inPlace);
    public Int32DataFrameColumn Add(byte value, bool inPlace);
    public Int32DataFrameColumn ReverseAdd(byte value, bool inPlace);
    public Int32DataFrameColumn Subtract(byte value, bool inPlace);
    public Int32DataFrameColumn ReverseSubtract(byte value, bool inPlace);
    public Int32DataFrameColumn Multiply(byte value, bool inPlace);
    public Int32DataFrameColumn ReverseMultiply(byte value, bool inPlace);
    public Int32DataFrameColumn Divide(byte value, bool inPlace);
    public Int32DataFrameColumn ReverseDivide(byte value, bool inPlace);
    public Int32DataFrameColumn Modulo(byte value, bool inPlace);
    public Int32DataFrameColumn ReverseModulo(byte value, bool inPlace);
    public DecimalDataFrameColumn Add(decimal value);
    public DecimalDataFrameColumn ReverseAdd(decimal value);
    public DecimalDataFrameColumn Subtract(decimal value);
    public DecimalDataFrameColumn ReverseSubtract(decimal value);
    public DecimalDataFrameColumn Multiply(decimal value);
    public DecimalDataFrameColumn ReverseMultiply(decimal value);
    public DecimalDataFrameColumn Divide(decimal value);
    public DecimalDataFrameColumn ReverseDivide(decimal value);
    public DecimalDataFrameColumn Modulo(decimal value);
    public DecimalDataFrameColumn ReverseModulo(decimal value);
    public DoubleDataFrameColumn Add(double value);
    public DoubleDataFrameColumn ReverseAdd(double value);
    public DoubleDataFrameColumn Subtract(double value);
    public DoubleDataFrameColumn ReverseSubtract(double value);
    public DoubleDataFrameColumn Multiply(double value);
    public DoubleDataFrameColumn ReverseMultiply(double value);
    public DoubleDataFrameColumn Divide(double value);
    public DoubleDataFrameColumn ReverseDivide(double value);
    public DoubleDataFrameColumn Modulo(double value);
    public DoubleDataFrameColumn ReverseModulo(double value);
    public SingleDataFrameColumn Add(float value);
    public SingleDataFrameColumn ReverseAdd(float value);
    public SingleDataFrameColumn Subtract(float value);
    public SingleDataFrameColumn ReverseSubtract(float value);
    public SingleDataFrameColumn Multiply(float value);
    public SingleDataFrameColumn ReverseMultiply(float value);
    public SingleDataFrameColumn Divide(float value);
    public SingleDataFrameColumn ReverseDivide(float value);
    public SingleDataFrameColumn Modulo(float value);
    public SingleDataFrameColumn ReverseModulo(float value);
    public Int32DataFrameColumn Add(int value, bool inPlace);
    public Int32DataFrameColumn ReverseAdd(int value, bool inPlace);
    public Int32DataFrameColumn Subtract(int value, bool inPlace);
    public Int32DataFrameColumn ReverseSubtract(int value, bool inPlace);
    public Int32DataFrameColumn Multiply(int value, bool inPlace);
    public Int32DataFrameColumn ReverseMultiply(int value, bool inPlace);
    public Int32DataFrameColumn Divide(int value, bool inPlace);
    public Int32DataFrameColumn ReverseDivide(int value, bool inPlace);
    public Int32DataFrameColumn Modulo(int value, bool inPlace);
    public Int32DataFrameColumn ReverseModulo(int value, bool inPlace);
    public Int64DataFrameColumn Add(long value);
    public Int64DataFrameColumn ReverseAdd(long value);
    public Int64DataFrameColumn Subtract(long value);
    public Int64DataFrameColumn ReverseSubtract(long value);
    public Int64DataFrameColumn Multiply(long value);
    public Int64DataFrameColumn ReverseMultiply(long value);
    public Int64DataFrameColumn Divide(long value);
    public Int64DataFrameColumn ReverseDivide(long value);
    public Int64DataFrameColumn Modulo(long value);
    public Int64DataFrameColumn ReverseModulo(long value);
    public Int32DataFrameColumn Add(sbyte value, bool inPlace);
    public Int32DataFrameColumn ReverseAdd(sbyte value, bool inPlace);
    public Int32DataFrameColumn Subtract(sbyte value, bool inPlace);
    public Int32DataFrameColumn ReverseSubtract(sbyte value, bool inPlace);
    public Int32DataFrameColumn Multiply(sbyte value, bool inPlace);
    public Int32DataFrameColumn ReverseMultiply(sbyte value, bool inPlace);
    public Int32DataFrameColumn Divide(sbyte value, bool inPlace);
    public Int32DataFrameColumn ReverseDivide(sbyte value, bool inPlace);
    public Int32DataFrameColumn Modulo(sbyte value, bool inPlace);
    public Int32DataFrameColumn ReverseModulo(sbyte value, bool inPlace);
    public Int32DataFrameColumn Add(short value, bool inPlace);
    public Int32DataFrameColumn ReverseAdd(short value, bool inPlace);
    public Int32DataFrameColumn Subtract(short value, bool inPlace);
    public Int32DataFrameColumn ReverseSubtract(short value, bool inPlace);
    public Int32DataFrameColumn Multiply(short value, bool inPlace);
    public Int32DataFrameColumn ReverseMultiply(short value, bool inPlace);
    public Int32DataFrameColumn Divide(short value, bool inPlace);
    public Int32DataFrameColumn ReverseDivide(short value, bool inPlace);
    public Int32DataFrameColumn Modulo(short value, bool inPlace);
    public Int32DataFrameColumn ReverseModulo(short value, bool inPlace);
    public Int64DataFrameColumn Add(UInt32 value);
    public Int64DataFrameColumn ReverseAdd(UInt32 value);
    public Int64DataFrameColumn Subtract(UInt32 value);
    public Int64DataFrameColumn ReverseSubtract(UInt32 value);
    public Int64DataFrameColumn Multiply(UInt32 value);
    public Int64DataFrameColumn ReverseMultiply(UInt32 value);
    public Int64DataFrameColumn Divide(UInt32 value);
    public Int64DataFrameColumn ReverseDivide(UInt32 value);
    public Int64DataFrameColumn Modulo(UInt32 value);
    public Int64DataFrameColumn ReverseModulo(UInt32 value);
    public SingleDataFrameColumn Add(ulong value);
    public SingleDataFrameColumn ReverseAdd(ulong value);
    public SingleDataFrameColumn Subtract(ulong value);
    public SingleDataFrameColumn ReverseSubtract(ulong value);
    public SingleDataFrameColumn Multiply(ulong value);
    public SingleDataFrameColumn ReverseMultiply(ulong value);
    public SingleDataFrameColumn Divide(ulong value);
    public SingleDataFrameColumn ReverseDivide(ulong value);
    public SingleDataFrameColumn Modulo(ulong value);
    public SingleDataFrameColumn ReverseModulo(ulong value);
    public Int32DataFrameColumn Add(ushort value, bool inPlace);
    public Int32DataFrameColumn ReverseAdd(ushort value, bool inPlace);
    public Int32DataFrameColumn Subtract(ushort value, bool inPlace);
    public Int32DataFrameColumn ReverseSubtract(ushort value, bool inPlace);
    public Int32DataFrameColumn Multiply(ushort value, bool inPlace);
    public Int32DataFrameColumn ReverseMultiply(ushort value, bool inPlace);
    public Int32DataFrameColumn Divide(ushort value, bool inPlace);
    public Int32DataFrameColumn ReverseDivide(ushort value, bool inPlace);
    public Int32DataFrameColumn Modulo(ushort value, bool inPlace);
    public Int32DataFrameColumn ReverseModulo(ushort value, bool inPlace);
    public BooleanDataFrameColumn ElementwiseEquals(ByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(ByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(ByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(ByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(ByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(ByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(DecimalDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(DecimalDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(DecimalDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(DecimalDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(DecimalDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(DecimalDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(DoubleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(DoubleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(DoubleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(DoubleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(DoubleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(DoubleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(SingleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(SingleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(SingleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(SingleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(SingleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(SingleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(Int32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(Int32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(Int32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(Int32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(Int32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(Int32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(Int64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(Int64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(Int64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(Int64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(Int64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(Int64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(SByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(SByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(SByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(SByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(SByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(SByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(Int16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(Int16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(Int16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(Int16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(Int16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(Int16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(UInt32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(UInt32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(UInt32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(UInt32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(UInt32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(UInt32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(UInt64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(UInt64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(UInt64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(UInt64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(UInt64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(UInt64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(UInt16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(UInt16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(UInt16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(UInt16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(UInt16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(UInt16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(byte value);
    public BooleanDataFrameColumn ElementwiseNotEquals(byte value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(byte value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(byte value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(byte value);
    public BooleanDataFrameColumn ElementwiseLessThan(byte value);
    public BooleanDataFrameColumn ElementwiseEquals(decimal value);
    public BooleanDataFrameColumn ElementwiseNotEquals(decimal value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(decimal value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(decimal value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(decimal value);
    public BooleanDataFrameColumn ElementwiseLessThan(decimal value);
    public BooleanDataFrameColumn ElementwiseEquals(double value);
    public BooleanDataFrameColumn ElementwiseNotEquals(double value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(double value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(double value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(double value);
    public BooleanDataFrameColumn ElementwiseLessThan(double value);
    public BooleanDataFrameColumn ElementwiseEquals(float value);
    public BooleanDataFrameColumn ElementwiseNotEquals(float value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(float value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(float value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(float value);
    public BooleanDataFrameColumn ElementwiseLessThan(float value);
    public BooleanDataFrameColumn ElementwiseEquals(int value);
    public BooleanDataFrameColumn ElementwiseNotEquals(int value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(int value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(int value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(int value);
    public BooleanDataFrameColumn ElementwiseLessThan(int value);
    public BooleanDataFrameColumn ElementwiseEquals(long value);
    public BooleanDataFrameColumn ElementwiseNotEquals(long value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(long value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(long value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(long value);
    public BooleanDataFrameColumn ElementwiseLessThan(long value);
    public BooleanDataFrameColumn ElementwiseEquals(sbyte value);
    public BooleanDataFrameColumn ElementwiseNotEquals(sbyte value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(sbyte value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(sbyte value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(sbyte value);
    public BooleanDataFrameColumn ElementwiseLessThan(sbyte value);
    public BooleanDataFrameColumn ElementwiseEquals(short value);
    public BooleanDataFrameColumn ElementwiseNotEquals(short value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(short value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(short value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(short value);
    public BooleanDataFrameColumn ElementwiseLessThan(short value);
    public BooleanDataFrameColumn ElementwiseEquals(UInt32 value);
    public BooleanDataFrameColumn ElementwiseNotEquals(UInt32 value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(UInt32 value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(UInt32 value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(UInt32 value);
    public BooleanDataFrameColumn ElementwiseLessThan(UInt32 value);
    public BooleanDataFrameColumn ElementwiseEquals(ulong value);
    public BooleanDataFrameColumn ElementwiseNotEquals(ulong value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(ulong value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(ulong value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(ulong value);
    public BooleanDataFrameColumn ElementwiseLessThan(ulong value);
    public BooleanDataFrameColumn ElementwiseEquals(ushort value);
    public BooleanDataFrameColumn ElementwiseNotEquals(ushort value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(ushort value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(ushort value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(ushort value);
    public BooleanDataFrameColumn ElementwiseLessThan(ushort value);
    public Int32DataFrameColumn LeftShift(int value, bool inPlace);
    public Int32DataFrameColumn RightShift(int value, bool inPlace);
    internal Int32DataFrameColumn AddImplementation(Int32DataFrameColumn column, bool inPlace);
    internal Int32DataFrameColumn AddImplementation(int value, bool inPlace);
    internal Int32DataFrameColumn ReverseAddImplementation(int value, bool inPlace);
    internal Int32DataFrameColumn SubtractImplementation(Int32DataFrameColumn column, bool inPlace);
    internal Int32DataFrameColumn SubtractImplementation(int value, bool inPlace);
    internal Int32DataFrameColumn ReverseSubtractImplementation(int value, bool inPlace);
    internal Int32DataFrameColumn MultiplyImplementation(Int32DataFrameColumn column, bool inPlace);
    internal Int32DataFrameColumn MultiplyImplementation(int value, bool inPlace);
    internal Int32DataFrameColumn ReverseMultiplyImplementation(int value, bool inPlace);
    internal Int32DataFrameColumn DivideImplementation(Int32DataFrameColumn column, bool inPlace);
    internal Int32DataFrameColumn DivideImplementation(int value, bool inPlace);
    internal Int32DataFrameColumn ReverseDivideImplementation(int value, bool inPlace);
    internal Int32DataFrameColumn ModuloImplementation(Int32DataFrameColumn column, bool inPlace);
    internal Int32DataFrameColumn ModuloImplementation(int value, bool inPlace);
    internal Int32DataFrameColumn ReverseModuloImplementation(int value, bool inPlace);
    internal BooleanDataFrameColumn ElementwiseEqualsImplementation(Int32DataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseEqualsImplementation(int value);
    internal BooleanDataFrameColumn ElementwiseNotEqualsImplementation(Int32DataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseNotEqualsImplementation(int value);
    internal BooleanDataFrameColumn ElementwiseGreaterThanOrEqualImplementation(Int32DataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseGreaterThanOrEqualImplementation(int value);
    internal BooleanDataFrameColumn ElementwiseLessThanOrEqualImplementation(Int32DataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseLessThanOrEqualImplementation(int value);
    internal BooleanDataFrameColumn ElementwiseGreaterThanImplementation(Int32DataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseGreaterThanImplementation(int value);
    internal BooleanDataFrameColumn ElementwiseLessThanImplementation(Int32DataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseLessThanImplementation(int value);
    public static Int32DataFrameColumn op_Addition(Int32DataFrameColumn left, ByteDataFrameColumn right);
    public static DecimalDataFrameColumn op_Addition(Int32DataFrameColumn left, DecimalDataFrameColumn right);
    public static DoubleDataFrameColumn op_Addition(Int32DataFrameColumn left, DoubleDataFrameColumn right);
    public static SingleDataFrameColumn op_Addition(Int32DataFrameColumn left, SingleDataFrameColumn right);
    public static Int32DataFrameColumn op_Addition(Int32DataFrameColumn left, Int32DataFrameColumn right);
    public static Int64DataFrameColumn op_Addition(Int32DataFrameColumn left, Int64DataFrameColumn right);
    public static Int32DataFrameColumn op_Addition(Int32DataFrameColumn left, SByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Addition(Int32DataFrameColumn left, Int16DataFrameColumn right);
    public static Int64DataFrameColumn op_Addition(Int32DataFrameColumn left, UInt32DataFrameColumn right);
    public static SingleDataFrameColumn op_Addition(Int32DataFrameColumn left, UInt64DataFrameColumn right);
    public static Int32DataFrameColumn op_Addition(Int32DataFrameColumn left, UInt16DataFrameColumn right);
    public static Int32DataFrameColumn op_Addition(Int32DataFrameColumn left, byte right);
    public static Int32DataFrameColumn op_Addition(byte left, Int32DataFrameColumn right);
    public static DecimalDataFrameColumn op_Addition(Int32DataFrameColumn left, decimal right);
    public static DecimalDataFrameColumn op_Addition(decimal left, Int32DataFrameColumn right);
    public static DoubleDataFrameColumn op_Addition(Int32DataFrameColumn left, double right);
    public static DoubleDataFrameColumn op_Addition(double left, Int32DataFrameColumn right);
    public static SingleDataFrameColumn op_Addition(Int32DataFrameColumn left, float right);
    public static SingleDataFrameColumn op_Addition(float left, Int32DataFrameColumn right);
    public static Int32DataFrameColumn op_Addition(Int32DataFrameColumn left, int right);
    public static Int32DataFrameColumn op_Addition(int left, Int32DataFrameColumn right);
    public static Int64DataFrameColumn op_Addition(Int32DataFrameColumn left, long right);
    public static Int64DataFrameColumn op_Addition(long left, Int32DataFrameColumn right);
    public static Int32DataFrameColumn op_Addition(Int32DataFrameColumn left, sbyte right);
    public static Int32DataFrameColumn op_Addition(sbyte left, Int32DataFrameColumn right);
    public static Int32DataFrameColumn op_Addition(Int32DataFrameColumn left, short right);
    public static Int32DataFrameColumn op_Addition(short left, Int32DataFrameColumn right);
    public static Int64DataFrameColumn op_Addition(Int32DataFrameColumn left, UInt32 right);
    public static Int64DataFrameColumn op_Addition(UInt32 left, Int32DataFrameColumn right);
    public static SingleDataFrameColumn op_Addition(Int32DataFrameColumn left, ulong right);
    public static SingleDataFrameColumn op_Addition(ulong left, Int32DataFrameColumn right);
    public static Int32DataFrameColumn op_Addition(Int32DataFrameColumn left, ushort right);
    public static Int32DataFrameColumn op_Addition(ushort left, Int32DataFrameColumn right);
    public static Int32DataFrameColumn op_Subtraction(Int32DataFrameColumn left, ByteDataFrameColumn right);
    public static DecimalDataFrameColumn op_Subtraction(Int32DataFrameColumn left, DecimalDataFrameColumn right);
    public static DoubleDataFrameColumn op_Subtraction(Int32DataFrameColumn left, DoubleDataFrameColumn right);
    public static SingleDataFrameColumn op_Subtraction(Int32DataFrameColumn left, SingleDataFrameColumn right);
    public static Int32DataFrameColumn op_Subtraction(Int32DataFrameColumn left, Int32DataFrameColumn right);
    public static Int64DataFrameColumn op_Subtraction(Int32DataFrameColumn left, Int64DataFrameColumn right);
    public static Int32DataFrameColumn op_Subtraction(Int32DataFrameColumn left, SByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Subtraction(Int32DataFrameColumn left, Int16DataFrameColumn right);
    public static Int64DataFrameColumn op_Subtraction(Int32DataFrameColumn left, UInt32DataFrameColumn right);
    public static SingleDataFrameColumn op_Subtraction(Int32DataFrameColumn left, UInt64DataFrameColumn right);
    public static Int32DataFrameColumn op_Subtraction(Int32DataFrameColumn left, UInt16DataFrameColumn right);
    public static Int32DataFrameColumn op_Subtraction(Int32DataFrameColumn left, byte right);
    public static Int32DataFrameColumn op_Subtraction(byte left, Int32DataFrameColumn right);
    public static DecimalDataFrameColumn op_Subtraction(Int32DataFrameColumn left, decimal right);
    public static DecimalDataFrameColumn op_Subtraction(decimal left, Int32DataFrameColumn right);
    public static DoubleDataFrameColumn op_Subtraction(Int32DataFrameColumn left, double right);
    public static DoubleDataFrameColumn op_Subtraction(double left, Int32DataFrameColumn right);
    public static SingleDataFrameColumn op_Subtraction(Int32DataFrameColumn left, float right);
    public static SingleDataFrameColumn op_Subtraction(float left, Int32DataFrameColumn right);
    public static Int32DataFrameColumn op_Subtraction(Int32DataFrameColumn left, int right);
    public static Int32DataFrameColumn op_Subtraction(int left, Int32DataFrameColumn right);
    public static Int64DataFrameColumn op_Subtraction(Int32DataFrameColumn left, long right);
    public static Int64DataFrameColumn op_Subtraction(long left, Int32DataFrameColumn right);
    public static Int32DataFrameColumn op_Subtraction(Int32DataFrameColumn left, sbyte right);
    public static Int32DataFrameColumn op_Subtraction(sbyte left, Int32DataFrameColumn right);
    public static Int32DataFrameColumn op_Subtraction(Int32DataFrameColumn left, short right);
    public static Int32DataFrameColumn op_Subtraction(short left, Int32DataFrameColumn right);
    public static Int64DataFrameColumn op_Subtraction(Int32DataFrameColumn left, UInt32 right);
    public static Int64DataFrameColumn op_Subtraction(UInt32 left, Int32DataFrameColumn right);
    public static SingleDataFrameColumn op_Subtraction(Int32DataFrameColumn left, ulong right);
    public static SingleDataFrameColumn op_Subtraction(ulong left, Int32DataFrameColumn right);
    public static Int32DataFrameColumn op_Subtraction(Int32DataFrameColumn left, ushort right);
    public static Int32DataFrameColumn op_Subtraction(ushort left, Int32DataFrameColumn right);
    public static Int32DataFrameColumn op_Multiply(Int32DataFrameColumn left, ByteDataFrameColumn right);
    public static DecimalDataFrameColumn op_Multiply(Int32DataFrameColumn left, DecimalDataFrameColumn right);
    public static DoubleDataFrameColumn op_Multiply(Int32DataFrameColumn left, DoubleDataFrameColumn right);
    public static SingleDataFrameColumn op_Multiply(Int32DataFrameColumn left, SingleDataFrameColumn right);
    public static Int32DataFrameColumn op_Multiply(Int32DataFrameColumn left, Int32DataFrameColumn right);
    public static Int64DataFrameColumn op_Multiply(Int32DataFrameColumn left, Int64DataFrameColumn right);
    public static Int32DataFrameColumn op_Multiply(Int32DataFrameColumn left, SByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Multiply(Int32DataFrameColumn left, Int16DataFrameColumn right);
    public static Int64DataFrameColumn op_Multiply(Int32DataFrameColumn left, UInt32DataFrameColumn right);
    public static SingleDataFrameColumn op_Multiply(Int32DataFrameColumn left, UInt64DataFrameColumn right);
    public static Int32DataFrameColumn op_Multiply(Int32DataFrameColumn left, UInt16DataFrameColumn right);
    public static Int32DataFrameColumn op_Multiply(Int32DataFrameColumn left, byte right);
    public static Int32DataFrameColumn op_Multiply(byte left, Int32DataFrameColumn right);
    public static DecimalDataFrameColumn op_Multiply(Int32DataFrameColumn left, decimal right);
    public static DecimalDataFrameColumn op_Multiply(decimal left, Int32DataFrameColumn right);
    public static DoubleDataFrameColumn op_Multiply(Int32DataFrameColumn left, double right);
    public static DoubleDataFrameColumn op_Multiply(double left, Int32DataFrameColumn right);
    public static SingleDataFrameColumn op_Multiply(Int32DataFrameColumn left, float right);
    public static SingleDataFrameColumn op_Multiply(float left, Int32DataFrameColumn right);
    public static Int32DataFrameColumn op_Multiply(Int32DataFrameColumn left, int right);
    public static Int32DataFrameColumn op_Multiply(int left, Int32DataFrameColumn right);
    public static Int64DataFrameColumn op_Multiply(Int32DataFrameColumn left, long right);
    public static Int64DataFrameColumn op_Multiply(long left, Int32DataFrameColumn right);
    public static Int32DataFrameColumn op_Multiply(Int32DataFrameColumn left, sbyte right);
    public static Int32DataFrameColumn op_Multiply(sbyte left, Int32DataFrameColumn right);
    public static Int32DataFrameColumn op_Multiply(Int32DataFrameColumn left, short right);
    public static Int32DataFrameColumn op_Multiply(short left, Int32DataFrameColumn right);
    public static Int64DataFrameColumn op_Multiply(Int32DataFrameColumn left, UInt32 right);
    public static Int64DataFrameColumn op_Multiply(UInt32 left, Int32DataFrameColumn right);
    public static SingleDataFrameColumn op_Multiply(Int32DataFrameColumn left, ulong right);
    public static SingleDataFrameColumn op_Multiply(ulong left, Int32DataFrameColumn right);
    public static Int32DataFrameColumn op_Multiply(Int32DataFrameColumn left, ushort right);
    public static Int32DataFrameColumn op_Multiply(ushort left, Int32DataFrameColumn right);
    public static Int32DataFrameColumn op_Division(Int32DataFrameColumn left, ByteDataFrameColumn right);
    public static DecimalDataFrameColumn op_Division(Int32DataFrameColumn left, DecimalDataFrameColumn right);
    public static DoubleDataFrameColumn op_Division(Int32DataFrameColumn left, DoubleDataFrameColumn right);
    public static SingleDataFrameColumn op_Division(Int32DataFrameColumn left, SingleDataFrameColumn right);
    public static Int32DataFrameColumn op_Division(Int32DataFrameColumn left, Int32DataFrameColumn right);
    public static Int64DataFrameColumn op_Division(Int32DataFrameColumn left, Int64DataFrameColumn right);
    public static Int32DataFrameColumn op_Division(Int32DataFrameColumn left, SByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Division(Int32DataFrameColumn left, Int16DataFrameColumn right);
    public static Int64DataFrameColumn op_Division(Int32DataFrameColumn left, UInt32DataFrameColumn right);
    public static SingleDataFrameColumn op_Division(Int32DataFrameColumn left, UInt64DataFrameColumn right);
    public static Int32DataFrameColumn op_Division(Int32DataFrameColumn left, UInt16DataFrameColumn right);
    public static Int32DataFrameColumn op_Division(Int32DataFrameColumn left, byte right);
    public static Int32DataFrameColumn op_Division(byte left, Int32DataFrameColumn right);
    public static DecimalDataFrameColumn op_Division(Int32DataFrameColumn left, decimal right);
    public static DecimalDataFrameColumn op_Division(decimal left, Int32DataFrameColumn right);
    public static DoubleDataFrameColumn op_Division(Int32DataFrameColumn left, double right);
    public static DoubleDataFrameColumn op_Division(double left, Int32DataFrameColumn right);
    public static SingleDataFrameColumn op_Division(Int32DataFrameColumn left, float right);
    public static SingleDataFrameColumn op_Division(float left, Int32DataFrameColumn right);
    public static Int32DataFrameColumn op_Division(Int32DataFrameColumn left, int right);
    public static Int32DataFrameColumn op_Division(int left, Int32DataFrameColumn right);
    public static Int64DataFrameColumn op_Division(Int32DataFrameColumn left, long right);
    public static Int64DataFrameColumn op_Division(long left, Int32DataFrameColumn right);
    public static Int32DataFrameColumn op_Division(Int32DataFrameColumn left, sbyte right);
    public static Int32DataFrameColumn op_Division(sbyte left, Int32DataFrameColumn right);
    public static Int32DataFrameColumn op_Division(Int32DataFrameColumn left, short right);
    public static Int32DataFrameColumn op_Division(short left, Int32DataFrameColumn right);
    public static Int64DataFrameColumn op_Division(Int32DataFrameColumn left, UInt32 right);
    public static Int64DataFrameColumn op_Division(UInt32 left, Int32DataFrameColumn right);
    public static SingleDataFrameColumn op_Division(Int32DataFrameColumn left, ulong right);
    public static SingleDataFrameColumn op_Division(ulong left, Int32DataFrameColumn right);
    public static Int32DataFrameColumn op_Division(Int32DataFrameColumn left, ushort right);
    public static Int32DataFrameColumn op_Division(ushort left, Int32DataFrameColumn right);
    public static Int32DataFrameColumn op_Modulus(Int32DataFrameColumn left, ByteDataFrameColumn right);
    public static DecimalDataFrameColumn op_Modulus(Int32DataFrameColumn left, DecimalDataFrameColumn right);
    public static DoubleDataFrameColumn op_Modulus(Int32DataFrameColumn left, DoubleDataFrameColumn right);
    public static SingleDataFrameColumn op_Modulus(Int32DataFrameColumn left, SingleDataFrameColumn right);
    public static Int32DataFrameColumn op_Modulus(Int32DataFrameColumn left, Int32DataFrameColumn right);
    public static Int64DataFrameColumn op_Modulus(Int32DataFrameColumn left, Int64DataFrameColumn right);
    public static Int32DataFrameColumn op_Modulus(Int32DataFrameColumn left, SByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Modulus(Int32DataFrameColumn left, Int16DataFrameColumn right);
    public static Int64DataFrameColumn op_Modulus(Int32DataFrameColumn left, UInt32DataFrameColumn right);
    public static SingleDataFrameColumn op_Modulus(Int32DataFrameColumn left, UInt64DataFrameColumn right);
    public static Int32DataFrameColumn op_Modulus(Int32DataFrameColumn left, UInt16DataFrameColumn right);
    public static Int32DataFrameColumn op_Modulus(Int32DataFrameColumn left, byte right);
    public static Int32DataFrameColumn op_Modulus(byte left, Int32DataFrameColumn right);
    public static DecimalDataFrameColumn op_Modulus(Int32DataFrameColumn left, decimal right);
    public static DecimalDataFrameColumn op_Modulus(decimal left, Int32DataFrameColumn right);
    public static DoubleDataFrameColumn op_Modulus(Int32DataFrameColumn left, double right);
    public static DoubleDataFrameColumn op_Modulus(double left, Int32DataFrameColumn right);
    public static SingleDataFrameColumn op_Modulus(Int32DataFrameColumn left, float right);
    public static SingleDataFrameColumn op_Modulus(float left, Int32DataFrameColumn right);
    public static Int32DataFrameColumn op_Modulus(Int32DataFrameColumn left, int right);
    public static Int32DataFrameColumn op_Modulus(int left, Int32DataFrameColumn right);
    public static Int64DataFrameColumn op_Modulus(Int32DataFrameColumn left, long right);
    public static Int64DataFrameColumn op_Modulus(long left, Int32DataFrameColumn right);
    public static Int32DataFrameColumn op_Modulus(Int32DataFrameColumn left, sbyte right);
    public static Int32DataFrameColumn op_Modulus(sbyte left, Int32DataFrameColumn right);
    public static Int32DataFrameColumn op_Modulus(Int32DataFrameColumn left, short right);
    public static Int32DataFrameColumn op_Modulus(short left, Int32DataFrameColumn right);
    public static Int64DataFrameColumn op_Modulus(Int32DataFrameColumn left, UInt32 right);
    public static Int64DataFrameColumn op_Modulus(UInt32 left, Int32DataFrameColumn right);
    public static SingleDataFrameColumn op_Modulus(Int32DataFrameColumn left, ulong right);
    public static SingleDataFrameColumn op_Modulus(ulong left, Int32DataFrameColumn right);
    public static Int32DataFrameColumn op_Modulus(Int32DataFrameColumn left, ushort right);
    public static Int32DataFrameColumn op_Modulus(ushort left, Int32DataFrameColumn right);
    public static Int32DataFrameColumn op_LeftShift(Int32DataFrameColumn left, int value);
    public static Int32DataFrameColumn op_RightShift(Int32DataFrameColumn left, int value);
}
internal class Microsoft.Data.Analysis.Int32DecimalConverter : object {
    public sealed virtual decimal GetDecimal(int value);
}
internal class Microsoft.Data.Analysis.Int32DoubleConverter : object {
    public sealed virtual double GetDouble(int value);
}
internal class Microsoft.Data.Analysis.Int32Int32Converter : object {
    public sealed virtual int GetInt32(int value);
}
internal class Microsoft.Data.Analysis.Int32Int64Converter : object {
    public sealed virtual long GetInt64(int value);
}
internal class Microsoft.Data.Analysis.Int32SingleConverter : object {
    public sealed virtual float GetSingle(int value);
}
internal class Microsoft.Data.Analysis.Int32UInt32Converter : object {
    public sealed virtual UInt32 GetUInt32(int value);
}
internal class Microsoft.Data.Analysis.Int32UInt64Converter : object {
    public sealed virtual ulong GetUInt64(int value);
}
internal static class Microsoft.Data.Analysis.Int64Converter : object {
    public static IInt64Converter`1<T> GetInt64Converter();
}
internal static class Microsoft.Data.Analysis.Int64Converter`1 : object {
    [CompilerGeneratedAttribute]
private static IInt64Converter`1<T> <Instance>k__BackingField;
    public static IInt64Converter`1<T> Instance { get; }
    private static Int64Converter`1();
    [CompilerGeneratedAttribute]
public static IInt64Converter`1<T> get_Instance();
}
public class Microsoft.Data.Analysis.Int64DataFrameColumn : PrimitiveDataFrameColumn`1<long> {
    public Int64DataFrameColumn(string name, IEnumerable`1<Nullable`1<long>> values);
    public Int64DataFrameColumn(string name, IEnumerable`1<long> values);
    public Int64DataFrameColumn(string name, long length);
    public Int64DataFrameColumn(string name, ReadOnlyMemory`1<byte> buffer, ReadOnlyMemory`1<byte> nullBitMap, int length, int nullCount);
    internal Int64DataFrameColumn(string name, PrimitiveColumnContainer`1<long> values);
    public Int64DataFrameColumn Add(ByteDataFrameColumn column, bool inPlace);
    public Int64DataFrameColumn Subtract(ByteDataFrameColumn column, bool inPlace);
    public Int64DataFrameColumn Multiply(ByteDataFrameColumn column, bool inPlace);
    public Int64DataFrameColumn Divide(ByteDataFrameColumn column, bool inPlace);
    public Int64DataFrameColumn Modulo(ByteDataFrameColumn column, bool inPlace);
    public DecimalDataFrameColumn Add(DecimalDataFrameColumn column);
    public DecimalDataFrameColumn Subtract(DecimalDataFrameColumn column);
    public DecimalDataFrameColumn Multiply(DecimalDataFrameColumn column);
    public DecimalDataFrameColumn Divide(DecimalDataFrameColumn column);
    public DecimalDataFrameColumn Modulo(DecimalDataFrameColumn column);
    public DoubleDataFrameColumn Add(DoubleDataFrameColumn column);
    public DoubleDataFrameColumn Subtract(DoubleDataFrameColumn column);
    public DoubleDataFrameColumn Multiply(DoubleDataFrameColumn column);
    public DoubleDataFrameColumn Divide(DoubleDataFrameColumn column);
    public DoubleDataFrameColumn Modulo(DoubleDataFrameColumn column);
    public SingleDataFrameColumn Add(SingleDataFrameColumn column);
    public SingleDataFrameColumn Subtract(SingleDataFrameColumn column);
    public SingleDataFrameColumn Multiply(SingleDataFrameColumn column);
    public SingleDataFrameColumn Divide(SingleDataFrameColumn column);
    public SingleDataFrameColumn Modulo(SingleDataFrameColumn column);
    public Int64DataFrameColumn Add(Int32DataFrameColumn column, bool inPlace);
    public Int64DataFrameColumn Subtract(Int32DataFrameColumn column, bool inPlace);
    public Int64DataFrameColumn Multiply(Int32DataFrameColumn column, bool inPlace);
    public Int64DataFrameColumn Divide(Int32DataFrameColumn column, bool inPlace);
    public Int64DataFrameColumn Modulo(Int32DataFrameColumn column, bool inPlace);
    public Int64DataFrameColumn Add(Int64DataFrameColumn column, bool inPlace);
    public Int64DataFrameColumn Subtract(Int64DataFrameColumn column, bool inPlace);
    public Int64DataFrameColumn Multiply(Int64DataFrameColumn column, bool inPlace);
    public Int64DataFrameColumn Divide(Int64DataFrameColumn column, bool inPlace);
    public Int64DataFrameColumn Modulo(Int64DataFrameColumn column, bool inPlace);
    public Int64DataFrameColumn Add(SByteDataFrameColumn column, bool inPlace);
    public Int64DataFrameColumn Subtract(SByteDataFrameColumn column, bool inPlace);
    public Int64DataFrameColumn Multiply(SByteDataFrameColumn column, bool inPlace);
    public Int64DataFrameColumn Divide(SByteDataFrameColumn column, bool inPlace);
    public Int64DataFrameColumn Modulo(SByteDataFrameColumn column, bool inPlace);
    public Int64DataFrameColumn Add(Int16DataFrameColumn column, bool inPlace);
    public Int64DataFrameColumn Subtract(Int16DataFrameColumn column, bool inPlace);
    public Int64DataFrameColumn Multiply(Int16DataFrameColumn column, bool inPlace);
    public Int64DataFrameColumn Divide(Int16DataFrameColumn column, bool inPlace);
    public Int64DataFrameColumn Modulo(Int16DataFrameColumn column, bool inPlace);
    public Int64DataFrameColumn Add(UInt32DataFrameColumn column, bool inPlace);
    public Int64DataFrameColumn Subtract(UInt32DataFrameColumn column, bool inPlace);
    public Int64DataFrameColumn Multiply(UInt32DataFrameColumn column, bool inPlace);
    public Int64DataFrameColumn Divide(UInt32DataFrameColumn column, bool inPlace);
    public Int64DataFrameColumn Modulo(UInt32DataFrameColumn column, bool inPlace);
    public Int64DataFrameColumn Add(UInt16DataFrameColumn column, bool inPlace);
    public Int64DataFrameColumn Subtract(UInt16DataFrameColumn column, bool inPlace);
    public Int64DataFrameColumn Multiply(UInt16DataFrameColumn column, bool inPlace);
    public Int64DataFrameColumn Divide(UInt16DataFrameColumn column, bool inPlace);
    public Int64DataFrameColumn Modulo(UInt16DataFrameColumn column, bool inPlace);
    public Int64DataFrameColumn Add(byte value, bool inPlace);
    public Int64DataFrameColumn ReverseAdd(byte value, bool inPlace);
    public Int64DataFrameColumn Subtract(byte value, bool inPlace);
    public Int64DataFrameColumn ReverseSubtract(byte value, bool inPlace);
    public Int64DataFrameColumn Multiply(byte value, bool inPlace);
    public Int64DataFrameColumn ReverseMultiply(byte value, bool inPlace);
    public Int64DataFrameColumn Divide(byte value, bool inPlace);
    public Int64DataFrameColumn ReverseDivide(byte value, bool inPlace);
    public Int64DataFrameColumn Modulo(byte value, bool inPlace);
    public Int64DataFrameColumn ReverseModulo(byte value, bool inPlace);
    public DecimalDataFrameColumn Add(decimal value);
    public DecimalDataFrameColumn ReverseAdd(decimal value);
    public DecimalDataFrameColumn Subtract(decimal value);
    public DecimalDataFrameColumn ReverseSubtract(decimal value);
    public DecimalDataFrameColumn Multiply(decimal value);
    public DecimalDataFrameColumn ReverseMultiply(decimal value);
    public DecimalDataFrameColumn Divide(decimal value);
    public DecimalDataFrameColumn ReverseDivide(decimal value);
    public DecimalDataFrameColumn Modulo(decimal value);
    public DecimalDataFrameColumn ReverseModulo(decimal value);
    public DoubleDataFrameColumn Add(double value);
    public DoubleDataFrameColumn ReverseAdd(double value);
    public DoubleDataFrameColumn Subtract(double value);
    public DoubleDataFrameColumn ReverseSubtract(double value);
    public DoubleDataFrameColumn Multiply(double value);
    public DoubleDataFrameColumn ReverseMultiply(double value);
    public DoubleDataFrameColumn Divide(double value);
    public DoubleDataFrameColumn ReverseDivide(double value);
    public DoubleDataFrameColumn Modulo(double value);
    public DoubleDataFrameColumn ReverseModulo(double value);
    public SingleDataFrameColumn Add(float value);
    public SingleDataFrameColumn ReverseAdd(float value);
    public SingleDataFrameColumn Subtract(float value);
    public SingleDataFrameColumn ReverseSubtract(float value);
    public SingleDataFrameColumn Multiply(float value);
    public SingleDataFrameColumn ReverseMultiply(float value);
    public SingleDataFrameColumn Divide(float value);
    public SingleDataFrameColumn ReverseDivide(float value);
    public SingleDataFrameColumn Modulo(float value);
    public SingleDataFrameColumn ReverseModulo(float value);
    public Int64DataFrameColumn Add(int value, bool inPlace);
    public Int64DataFrameColumn ReverseAdd(int value, bool inPlace);
    public Int64DataFrameColumn Subtract(int value, bool inPlace);
    public Int64DataFrameColumn ReverseSubtract(int value, bool inPlace);
    public Int64DataFrameColumn Multiply(int value, bool inPlace);
    public Int64DataFrameColumn ReverseMultiply(int value, bool inPlace);
    public Int64DataFrameColumn Divide(int value, bool inPlace);
    public Int64DataFrameColumn ReverseDivide(int value, bool inPlace);
    public Int64DataFrameColumn Modulo(int value, bool inPlace);
    public Int64DataFrameColumn ReverseModulo(int value, bool inPlace);
    public Int64DataFrameColumn Add(long value, bool inPlace);
    public Int64DataFrameColumn ReverseAdd(long value, bool inPlace);
    public Int64DataFrameColumn Subtract(long value, bool inPlace);
    public Int64DataFrameColumn ReverseSubtract(long value, bool inPlace);
    public Int64DataFrameColumn Multiply(long value, bool inPlace);
    public Int64DataFrameColumn ReverseMultiply(long value, bool inPlace);
    public Int64DataFrameColumn Divide(long value, bool inPlace);
    public Int64DataFrameColumn ReverseDivide(long value, bool inPlace);
    public Int64DataFrameColumn Modulo(long value, bool inPlace);
    public Int64DataFrameColumn ReverseModulo(long value, bool inPlace);
    public Int64DataFrameColumn Add(sbyte value, bool inPlace);
    public Int64DataFrameColumn ReverseAdd(sbyte value, bool inPlace);
    public Int64DataFrameColumn Subtract(sbyte value, bool inPlace);
    public Int64DataFrameColumn ReverseSubtract(sbyte value, bool inPlace);
    public Int64DataFrameColumn Multiply(sbyte value, bool inPlace);
    public Int64DataFrameColumn ReverseMultiply(sbyte value, bool inPlace);
    public Int64DataFrameColumn Divide(sbyte value, bool inPlace);
    public Int64DataFrameColumn ReverseDivide(sbyte value, bool inPlace);
    public Int64DataFrameColumn Modulo(sbyte value, bool inPlace);
    public Int64DataFrameColumn ReverseModulo(sbyte value, bool inPlace);
    public Int64DataFrameColumn Add(short value, bool inPlace);
    public Int64DataFrameColumn ReverseAdd(short value, bool inPlace);
    public Int64DataFrameColumn Subtract(short value, bool inPlace);
    public Int64DataFrameColumn ReverseSubtract(short value, bool inPlace);
    public Int64DataFrameColumn Multiply(short value, bool inPlace);
    public Int64DataFrameColumn ReverseMultiply(short value, bool inPlace);
    public Int64DataFrameColumn Divide(short value, bool inPlace);
    public Int64DataFrameColumn ReverseDivide(short value, bool inPlace);
    public Int64DataFrameColumn Modulo(short value, bool inPlace);
    public Int64DataFrameColumn ReverseModulo(short value, bool inPlace);
    public Int64DataFrameColumn Add(UInt32 value, bool inPlace);
    public Int64DataFrameColumn ReverseAdd(UInt32 value, bool inPlace);
    public Int64DataFrameColumn Subtract(UInt32 value, bool inPlace);
    public Int64DataFrameColumn ReverseSubtract(UInt32 value, bool inPlace);
    public Int64DataFrameColumn Multiply(UInt32 value, bool inPlace);
    public Int64DataFrameColumn ReverseMultiply(UInt32 value, bool inPlace);
    public Int64DataFrameColumn Divide(UInt32 value, bool inPlace);
    public Int64DataFrameColumn ReverseDivide(UInt32 value, bool inPlace);
    public Int64DataFrameColumn Modulo(UInt32 value, bool inPlace);
    public Int64DataFrameColumn ReverseModulo(UInt32 value, bool inPlace);
    public Int64DataFrameColumn Add(ushort value, bool inPlace);
    public Int64DataFrameColumn ReverseAdd(ushort value, bool inPlace);
    public Int64DataFrameColumn Subtract(ushort value, bool inPlace);
    public Int64DataFrameColumn ReverseSubtract(ushort value, bool inPlace);
    public Int64DataFrameColumn Multiply(ushort value, bool inPlace);
    public Int64DataFrameColumn ReverseMultiply(ushort value, bool inPlace);
    public Int64DataFrameColumn Divide(ushort value, bool inPlace);
    public Int64DataFrameColumn ReverseDivide(ushort value, bool inPlace);
    public Int64DataFrameColumn Modulo(ushort value, bool inPlace);
    public Int64DataFrameColumn ReverseModulo(ushort value, bool inPlace);
    public BooleanDataFrameColumn ElementwiseEquals(ByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(ByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(ByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(ByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(ByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(ByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(DecimalDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(DecimalDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(DecimalDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(DecimalDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(DecimalDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(DecimalDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(DoubleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(DoubleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(DoubleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(DoubleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(DoubleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(DoubleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(SingleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(SingleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(SingleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(SingleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(SingleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(SingleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(Int32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(Int32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(Int32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(Int32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(Int32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(Int32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(Int64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(Int64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(Int64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(Int64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(Int64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(Int64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(SByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(SByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(SByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(SByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(SByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(SByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(Int16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(Int16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(Int16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(Int16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(Int16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(Int16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(UInt32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(UInt32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(UInt32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(UInt32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(UInt32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(UInt32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(UInt16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(UInt16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(UInt16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(UInt16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(UInt16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(UInt16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(byte value);
    public BooleanDataFrameColumn ElementwiseNotEquals(byte value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(byte value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(byte value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(byte value);
    public BooleanDataFrameColumn ElementwiseLessThan(byte value);
    public BooleanDataFrameColumn ElementwiseEquals(decimal value);
    public BooleanDataFrameColumn ElementwiseNotEquals(decimal value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(decimal value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(decimal value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(decimal value);
    public BooleanDataFrameColumn ElementwiseLessThan(decimal value);
    public BooleanDataFrameColumn ElementwiseEquals(double value);
    public BooleanDataFrameColumn ElementwiseNotEquals(double value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(double value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(double value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(double value);
    public BooleanDataFrameColumn ElementwiseLessThan(double value);
    public BooleanDataFrameColumn ElementwiseEquals(float value);
    public BooleanDataFrameColumn ElementwiseNotEquals(float value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(float value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(float value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(float value);
    public BooleanDataFrameColumn ElementwiseLessThan(float value);
    public BooleanDataFrameColumn ElementwiseEquals(int value);
    public BooleanDataFrameColumn ElementwiseNotEquals(int value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(int value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(int value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(int value);
    public BooleanDataFrameColumn ElementwiseLessThan(int value);
    public BooleanDataFrameColumn ElementwiseEquals(long value);
    public BooleanDataFrameColumn ElementwiseNotEquals(long value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(long value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(long value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(long value);
    public BooleanDataFrameColumn ElementwiseLessThan(long value);
    public BooleanDataFrameColumn ElementwiseEquals(sbyte value);
    public BooleanDataFrameColumn ElementwiseNotEquals(sbyte value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(sbyte value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(sbyte value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(sbyte value);
    public BooleanDataFrameColumn ElementwiseLessThan(sbyte value);
    public BooleanDataFrameColumn ElementwiseEquals(short value);
    public BooleanDataFrameColumn ElementwiseNotEquals(short value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(short value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(short value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(short value);
    public BooleanDataFrameColumn ElementwiseLessThan(short value);
    public BooleanDataFrameColumn ElementwiseEquals(UInt32 value);
    public BooleanDataFrameColumn ElementwiseNotEquals(UInt32 value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(UInt32 value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(UInt32 value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(UInt32 value);
    public BooleanDataFrameColumn ElementwiseLessThan(UInt32 value);
    public BooleanDataFrameColumn ElementwiseEquals(ushort value);
    public BooleanDataFrameColumn ElementwiseNotEquals(ushort value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(ushort value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(ushort value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(ushort value);
    public BooleanDataFrameColumn ElementwiseLessThan(ushort value);
    public Int64DataFrameColumn LeftShift(int value, bool inPlace);
    public Int64DataFrameColumn RightShift(int value, bool inPlace);
    internal Int64DataFrameColumn AddImplementation(Int64DataFrameColumn column, bool inPlace);
    internal Int64DataFrameColumn AddImplementation(long value, bool inPlace);
    internal Int64DataFrameColumn ReverseAddImplementation(long value, bool inPlace);
    internal Int64DataFrameColumn SubtractImplementation(Int64DataFrameColumn column, bool inPlace);
    internal Int64DataFrameColumn SubtractImplementation(long value, bool inPlace);
    internal Int64DataFrameColumn ReverseSubtractImplementation(long value, bool inPlace);
    internal Int64DataFrameColumn MultiplyImplementation(Int64DataFrameColumn column, bool inPlace);
    internal Int64DataFrameColumn MultiplyImplementation(long value, bool inPlace);
    internal Int64DataFrameColumn ReverseMultiplyImplementation(long value, bool inPlace);
    internal Int64DataFrameColumn DivideImplementation(Int64DataFrameColumn column, bool inPlace);
    internal Int64DataFrameColumn DivideImplementation(long value, bool inPlace);
    internal Int64DataFrameColumn ReverseDivideImplementation(long value, bool inPlace);
    internal Int64DataFrameColumn ModuloImplementation(Int64DataFrameColumn column, bool inPlace);
    internal Int64DataFrameColumn ModuloImplementation(long value, bool inPlace);
    internal Int64DataFrameColumn ReverseModuloImplementation(long value, bool inPlace);
    internal BooleanDataFrameColumn ElementwiseEqualsImplementation(Int64DataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseEqualsImplementation(long value);
    internal BooleanDataFrameColumn ElementwiseNotEqualsImplementation(Int64DataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseNotEqualsImplementation(long value);
    internal BooleanDataFrameColumn ElementwiseGreaterThanOrEqualImplementation(Int64DataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseGreaterThanOrEqualImplementation(long value);
    internal BooleanDataFrameColumn ElementwiseLessThanOrEqualImplementation(Int64DataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseLessThanOrEqualImplementation(long value);
    internal BooleanDataFrameColumn ElementwiseGreaterThanImplementation(Int64DataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseGreaterThanImplementation(long value);
    internal BooleanDataFrameColumn ElementwiseLessThanImplementation(Int64DataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseLessThanImplementation(long value);
    public static Int64DataFrameColumn op_Addition(Int64DataFrameColumn left, ByteDataFrameColumn right);
    public static DecimalDataFrameColumn op_Addition(Int64DataFrameColumn left, DecimalDataFrameColumn right);
    public static DoubleDataFrameColumn op_Addition(Int64DataFrameColumn left, DoubleDataFrameColumn right);
    public static SingleDataFrameColumn op_Addition(Int64DataFrameColumn left, SingleDataFrameColumn right);
    public static Int64DataFrameColumn op_Addition(Int64DataFrameColumn left, Int32DataFrameColumn right);
    public static Int64DataFrameColumn op_Addition(Int64DataFrameColumn left, Int64DataFrameColumn right);
    public static Int64DataFrameColumn op_Addition(Int64DataFrameColumn left, SByteDataFrameColumn right);
    public static Int64DataFrameColumn op_Addition(Int64DataFrameColumn left, Int16DataFrameColumn right);
    public static Int64DataFrameColumn op_Addition(Int64DataFrameColumn left, UInt32DataFrameColumn right);
    public static Int64DataFrameColumn op_Addition(Int64DataFrameColumn left, UInt16DataFrameColumn right);
    public static Int64DataFrameColumn op_Addition(Int64DataFrameColumn left, byte right);
    public static Int64DataFrameColumn op_Addition(byte left, Int64DataFrameColumn right);
    public static DecimalDataFrameColumn op_Addition(Int64DataFrameColumn left, decimal right);
    public static DecimalDataFrameColumn op_Addition(decimal left, Int64DataFrameColumn right);
    public static DoubleDataFrameColumn op_Addition(Int64DataFrameColumn left, double right);
    public static DoubleDataFrameColumn op_Addition(double left, Int64DataFrameColumn right);
    public static SingleDataFrameColumn op_Addition(Int64DataFrameColumn left, float right);
    public static SingleDataFrameColumn op_Addition(float left, Int64DataFrameColumn right);
    public static Int64DataFrameColumn op_Addition(Int64DataFrameColumn left, int right);
    public static Int64DataFrameColumn op_Addition(int left, Int64DataFrameColumn right);
    public static Int64DataFrameColumn op_Addition(Int64DataFrameColumn left, long right);
    public static Int64DataFrameColumn op_Addition(long left, Int64DataFrameColumn right);
    public static Int64DataFrameColumn op_Addition(Int64DataFrameColumn left, sbyte right);
    public static Int64DataFrameColumn op_Addition(sbyte left, Int64DataFrameColumn right);
    public static Int64DataFrameColumn op_Addition(Int64DataFrameColumn left, short right);
    public static Int64DataFrameColumn op_Addition(short left, Int64DataFrameColumn right);
    public static Int64DataFrameColumn op_Addition(Int64DataFrameColumn left, UInt32 right);
    public static Int64DataFrameColumn op_Addition(UInt32 left, Int64DataFrameColumn right);
    public static Int64DataFrameColumn op_Addition(Int64DataFrameColumn left, ushort right);
    public static Int64DataFrameColumn op_Addition(ushort left, Int64DataFrameColumn right);
    public static Int64DataFrameColumn op_Subtraction(Int64DataFrameColumn left, ByteDataFrameColumn right);
    public static DecimalDataFrameColumn op_Subtraction(Int64DataFrameColumn left, DecimalDataFrameColumn right);
    public static DoubleDataFrameColumn op_Subtraction(Int64DataFrameColumn left, DoubleDataFrameColumn right);
    public static SingleDataFrameColumn op_Subtraction(Int64DataFrameColumn left, SingleDataFrameColumn right);
    public static Int64DataFrameColumn op_Subtraction(Int64DataFrameColumn left, Int32DataFrameColumn right);
    public static Int64DataFrameColumn op_Subtraction(Int64DataFrameColumn left, Int64DataFrameColumn right);
    public static Int64DataFrameColumn op_Subtraction(Int64DataFrameColumn left, SByteDataFrameColumn right);
    public static Int64DataFrameColumn op_Subtraction(Int64DataFrameColumn left, Int16DataFrameColumn right);
    public static Int64DataFrameColumn op_Subtraction(Int64DataFrameColumn left, UInt32DataFrameColumn right);
    public static Int64DataFrameColumn op_Subtraction(Int64DataFrameColumn left, UInt16DataFrameColumn right);
    public static Int64DataFrameColumn op_Subtraction(Int64DataFrameColumn left, byte right);
    public static Int64DataFrameColumn op_Subtraction(byte left, Int64DataFrameColumn right);
    public static DecimalDataFrameColumn op_Subtraction(Int64DataFrameColumn left, decimal right);
    public static DecimalDataFrameColumn op_Subtraction(decimal left, Int64DataFrameColumn right);
    public static DoubleDataFrameColumn op_Subtraction(Int64DataFrameColumn left, double right);
    public static DoubleDataFrameColumn op_Subtraction(double left, Int64DataFrameColumn right);
    public static SingleDataFrameColumn op_Subtraction(Int64DataFrameColumn left, float right);
    public static SingleDataFrameColumn op_Subtraction(float left, Int64DataFrameColumn right);
    public static Int64DataFrameColumn op_Subtraction(Int64DataFrameColumn left, int right);
    public static Int64DataFrameColumn op_Subtraction(int left, Int64DataFrameColumn right);
    public static Int64DataFrameColumn op_Subtraction(Int64DataFrameColumn left, long right);
    public static Int64DataFrameColumn op_Subtraction(long left, Int64DataFrameColumn right);
    public static Int64DataFrameColumn op_Subtraction(Int64DataFrameColumn left, sbyte right);
    public static Int64DataFrameColumn op_Subtraction(sbyte left, Int64DataFrameColumn right);
    public static Int64DataFrameColumn op_Subtraction(Int64DataFrameColumn left, short right);
    public static Int64DataFrameColumn op_Subtraction(short left, Int64DataFrameColumn right);
    public static Int64DataFrameColumn op_Subtraction(Int64DataFrameColumn left, UInt32 right);
    public static Int64DataFrameColumn op_Subtraction(UInt32 left, Int64DataFrameColumn right);
    public static Int64DataFrameColumn op_Subtraction(Int64DataFrameColumn left, ushort right);
    public static Int64DataFrameColumn op_Subtraction(ushort left, Int64DataFrameColumn right);
    public static Int64DataFrameColumn op_Multiply(Int64DataFrameColumn left, ByteDataFrameColumn right);
    public static DecimalDataFrameColumn op_Multiply(Int64DataFrameColumn left, DecimalDataFrameColumn right);
    public static DoubleDataFrameColumn op_Multiply(Int64DataFrameColumn left, DoubleDataFrameColumn right);
    public static SingleDataFrameColumn op_Multiply(Int64DataFrameColumn left, SingleDataFrameColumn right);
    public static Int64DataFrameColumn op_Multiply(Int64DataFrameColumn left, Int32DataFrameColumn right);
    public static Int64DataFrameColumn op_Multiply(Int64DataFrameColumn left, Int64DataFrameColumn right);
    public static Int64DataFrameColumn op_Multiply(Int64DataFrameColumn left, SByteDataFrameColumn right);
    public static Int64DataFrameColumn op_Multiply(Int64DataFrameColumn left, Int16DataFrameColumn right);
    public static Int64DataFrameColumn op_Multiply(Int64DataFrameColumn left, UInt32DataFrameColumn right);
    public static Int64DataFrameColumn op_Multiply(Int64DataFrameColumn left, UInt16DataFrameColumn right);
    public static Int64DataFrameColumn op_Multiply(Int64DataFrameColumn left, byte right);
    public static Int64DataFrameColumn op_Multiply(byte left, Int64DataFrameColumn right);
    public static DecimalDataFrameColumn op_Multiply(Int64DataFrameColumn left, decimal right);
    public static DecimalDataFrameColumn op_Multiply(decimal left, Int64DataFrameColumn right);
    public static DoubleDataFrameColumn op_Multiply(Int64DataFrameColumn left, double right);
    public static DoubleDataFrameColumn op_Multiply(double left, Int64DataFrameColumn right);
    public static SingleDataFrameColumn op_Multiply(Int64DataFrameColumn left, float right);
    public static SingleDataFrameColumn op_Multiply(float left, Int64DataFrameColumn right);
    public static Int64DataFrameColumn op_Multiply(Int64DataFrameColumn left, int right);
    public static Int64DataFrameColumn op_Multiply(int left, Int64DataFrameColumn right);
    public static Int64DataFrameColumn op_Multiply(Int64DataFrameColumn left, long right);
    public static Int64DataFrameColumn op_Multiply(long left, Int64DataFrameColumn right);
    public static Int64DataFrameColumn op_Multiply(Int64DataFrameColumn left, sbyte right);
    public static Int64DataFrameColumn op_Multiply(sbyte left, Int64DataFrameColumn right);
    public static Int64DataFrameColumn op_Multiply(Int64DataFrameColumn left, short right);
    public static Int64DataFrameColumn op_Multiply(short left, Int64DataFrameColumn right);
    public static Int64DataFrameColumn op_Multiply(Int64DataFrameColumn left, UInt32 right);
    public static Int64DataFrameColumn op_Multiply(UInt32 left, Int64DataFrameColumn right);
    public static Int64DataFrameColumn op_Multiply(Int64DataFrameColumn left, ushort right);
    public static Int64DataFrameColumn op_Multiply(ushort left, Int64DataFrameColumn right);
    public static Int64DataFrameColumn op_Division(Int64DataFrameColumn left, ByteDataFrameColumn right);
    public static DecimalDataFrameColumn op_Division(Int64DataFrameColumn left, DecimalDataFrameColumn right);
    public static DoubleDataFrameColumn op_Division(Int64DataFrameColumn left, DoubleDataFrameColumn right);
    public static SingleDataFrameColumn op_Division(Int64DataFrameColumn left, SingleDataFrameColumn right);
    public static Int64DataFrameColumn op_Division(Int64DataFrameColumn left, Int32DataFrameColumn right);
    public static Int64DataFrameColumn op_Division(Int64DataFrameColumn left, Int64DataFrameColumn right);
    public static Int64DataFrameColumn op_Division(Int64DataFrameColumn left, SByteDataFrameColumn right);
    public static Int64DataFrameColumn op_Division(Int64DataFrameColumn left, Int16DataFrameColumn right);
    public static Int64DataFrameColumn op_Division(Int64DataFrameColumn left, UInt32DataFrameColumn right);
    public static Int64DataFrameColumn op_Division(Int64DataFrameColumn left, UInt16DataFrameColumn right);
    public static Int64DataFrameColumn op_Division(Int64DataFrameColumn left, byte right);
    public static Int64DataFrameColumn op_Division(byte left, Int64DataFrameColumn right);
    public static DecimalDataFrameColumn op_Division(Int64DataFrameColumn left, decimal right);
    public static DecimalDataFrameColumn op_Division(decimal left, Int64DataFrameColumn right);
    public static DoubleDataFrameColumn op_Division(Int64DataFrameColumn left, double right);
    public static DoubleDataFrameColumn op_Division(double left, Int64DataFrameColumn right);
    public static SingleDataFrameColumn op_Division(Int64DataFrameColumn left, float right);
    public static SingleDataFrameColumn op_Division(float left, Int64DataFrameColumn right);
    public static Int64DataFrameColumn op_Division(Int64DataFrameColumn left, int right);
    public static Int64DataFrameColumn op_Division(int left, Int64DataFrameColumn right);
    public static Int64DataFrameColumn op_Division(Int64DataFrameColumn left, long right);
    public static Int64DataFrameColumn op_Division(long left, Int64DataFrameColumn right);
    public static Int64DataFrameColumn op_Division(Int64DataFrameColumn left, sbyte right);
    public static Int64DataFrameColumn op_Division(sbyte left, Int64DataFrameColumn right);
    public static Int64DataFrameColumn op_Division(Int64DataFrameColumn left, short right);
    public static Int64DataFrameColumn op_Division(short left, Int64DataFrameColumn right);
    public static Int64DataFrameColumn op_Division(Int64DataFrameColumn left, UInt32 right);
    public static Int64DataFrameColumn op_Division(UInt32 left, Int64DataFrameColumn right);
    public static Int64DataFrameColumn op_Division(Int64DataFrameColumn left, ushort right);
    public static Int64DataFrameColumn op_Division(ushort left, Int64DataFrameColumn right);
    public static Int64DataFrameColumn op_Modulus(Int64DataFrameColumn left, ByteDataFrameColumn right);
    public static DecimalDataFrameColumn op_Modulus(Int64DataFrameColumn left, DecimalDataFrameColumn right);
    public static DoubleDataFrameColumn op_Modulus(Int64DataFrameColumn left, DoubleDataFrameColumn right);
    public static SingleDataFrameColumn op_Modulus(Int64DataFrameColumn left, SingleDataFrameColumn right);
    public static Int64DataFrameColumn op_Modulus(Int64DataFrameColumn left, Int32DataFrameColumn right);
    public static Int64DataFrameColumn op_Modulus(Int64DataFrameColumn left, Int64DataFrameColumn right);
    public static Int64DataFrameColumn op_Modulus(Int64DataFrameColumn left, SByteDataFrameColumn right);
    public static Int64DataFrameColumn op_Modulus(Int64DataFrameColumn left, Int16DataFrameColumn right);
    public static Int64DataFrameColumn op_Modulus(Int64DataFrameColumn left, UInt32DataFrameColumn right);
    public static Int64DataFrameColumn op_Modulus(Int64DataFrameColumn left, UInt16DataFrameColumn right);
    public static Int64DataFrameColumn op_Modulus(Int64DataFrameColumn left, byte right);
    public static Int64DataFrameColumn op_Modulus(byte left, Int64DataFrameColumn right);
    public static DecimalDataFrameColumn op_Modulus(Int64DataFrameColumn left, decimal right);
    public static DecimalDataFrameColumn op_Modulus(decimal left, Int64DataFrameColumn right);
    public static DoubleDataFrameColumn op_Modulus(Int64DataFrameColumn left, double right);
    public static DoubleDataFrameColumn op_Modulus(double left, Int64DataFrameColumn right);
    public static SingleDataFrameColumn op_Modulus(Int64DataFrameColumn left, float right);
    public static SingleDataFrameColumn op_Modulus(float left, Int64DataFrameColumn right);
    public static Int64DataFrameColumn op_Modulus(Int64DataFrameColumn left, int right);
    public static Int64DataFrameColumn op_Modulus(int left, Int64DataFrameColumn right);
    public static Int64DataFrameColumn op_Modulus(Int64DataFrameColumn left, long right);
    public static Int64DataFrameColumn op_Modulus(long left, Int64DataFrameColumn right);
    public static Int64DataFrameColumn op_Modulus(Int64DataFrameColumn left, sbyte right);
    public static Int64DataFrameColumn op_Modulus(sbyte left, Int64DataFrameColumn right);
    public static Int64DataFrameColumn op_Modulus(Int64DataFrameColumn left, short right);
    public static Int64DataFrameColumn op_Modulus(short left, Int64DataFrameColumn right);
    public static Int64DataFrameColumn op_Modulus(Int64DataFrameColumn left, UInt32 right);
    public static Int64DataFrameColumn op_Modulus(UInt32 left, Int64DataFrameColumn right);
    public static Int64DataFrameColumn op_Modulus(Int64DataFrameColumn left, ushort right);
    public static Int64DataFrameColumn op_Modulus(ushort left, Int64DataFrameColumn right);
    public static Int64DataFrameColumn op_LeftShift(Int64DataFrameColumn left, int value);
    public static Int64DataFrameColumn op_RightShift(Int64DataFrameColumn left, int value);
}
internal class Microsoft.Data.Analysis.Int64DecimalConverter : object {
    public sealed virtual decimal GetDecimal(long value);
}
internal class Microsoft.Data.Analysis.Int64DoubleConverter : object {
    public sealed virtual double GetDouble(long value);
}
internal class Microsoft.Data.Analysis.Int64Int64Converter : object {
    public sealed virtual long GetInt64(long value);
}
internal class Microsoft.Data.Analysis.Int64SingleConverter : object {
    public sealed virtual float GetSingle(long value);
}
internal class Microsoft.Data.Analysis.Int64UInt64Converter : object {
    public sealed virtual ulong GetUInt64(long value);
}
internal class Microsoft.Data.Analysis.IntArithmetic : object {
    public sealed virtual void Add(PrimitiveColumnContainer`1<int> left, PrimitiveColumnContainer`1<int> right);
    public sealed virtual void Add(PrimitiveColumnContainer`1<int> column, int scalar);
    public sealed virtual void Add(int scalar, PrimitiveColumnContainer`1<int> column);
    public sealed virtual void Subtract(PrimitiveColumnContainer`1<int> left, PrimitiveColumnContainer`1<int> right);
    public sealed virtual void Subtract(PrimitiveColumnContainer`1<int> column, int scalar);
    public sealed virtual void Subtract(int scalar, PrimitiveColumnContainer`1<int> column);
    public sealed virtual void Multiply(PrimitiveColumnContainer`1<int> left, PrimitiveColumnContainer`1<int> right);
    public sealed virtual void Multiply(PrimitiveColumnContainer`1<int> column, int scalar);
    public sealed virtual void Multiply(int scalar, PrimitiveColumnContainer`1<int> column);
    public sealed virtual void Divide(PrimitiveColumnContainer`1<int> left, PrimitiveColumnContainer`1<int> right);
    public sealed virtual void Divide(PrimitiveColumnContainer`1<int> column, int scalar);
    public sealed virtual void Divide(int scalar, PrimitiveColumnContainer`1<int> column);
    public sealed virtual void Modulo(PrimitiveColumnContainer`1<int> left, PrimitiveColumnContainer`1<int> right);
    public sealed virtual void Modulo(PrimitiveColumnContainer`1<int> column, int scalar);
    public sealed virtual void Modulo(int scalar, PrimitiveColumnContainer`1<int> column);
    public sealed virtual void And(PrimitiveColumnContainer`1<int> left, PrimitiveColumnContainer`1<int> right);
    public sealed virtual void And(PrimitiveColumnContainer`1<int> column, int scalar);
    public sealed virtual void And(int scalar, PrimitiveColumnContainer`1<int> column);
    public sealed virtual void Or(PrimitiveColumnContainer`1<int> left, PrimitiveColumnContainer`1<int> right);
    public sealed virtual void Or(PrimitiveColumnContainer`1<int> column, int scalar);
    public sealed virtual void Or(int scalar, PrimitiveColumnContainer`1<int> column);
    public sealed virtual void Xor(PrimitiveColumnContainer`1<int> left, PrimitiveColumnContainer`1<int> right);
    public sealed virtual void Xor(PrimitiveColumnContainer`1<int> column, int scalar);
    public sealed virtual void Xor(int scalar, PrimitiveColumnContainer`1<int> column);
    public sealed virtual void LeftShift(PrimitiveColumnContainer`1<int> column, int value);
    public sealed virtual void RightShift(PrimitiveColumnContainer`1<int> column, int value);
    public sealed virtual void ElementwiseEquals(PrimitiveColumnContainer`1<int> left, PrimitiveColumnContainer`1<int> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseEquals(PrimitiveColumnContainer`1<int> column, int scalar, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseNotEquals(PrimitiveColumnContainer`1<int> left, PrimitiveColumnContainer`1<int> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseNotEquals(PrimitiveColumnContainer`1<int> column, int scalar, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseGreaterThanOrEqual(PrimitiveColumnContainer`1<int> left, PrimitiveColumnContainer`1<int> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseGreaterThanOrEqual(PrimitiveColumnContainer`1<int> column, int scalar, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseLessThanOrEqual(PrimitiveColumnContainer`1<int> left, PrimitiveColumnContainer`1<int> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseLessThanOrEqual(PrimitiveColumnContainer`1<int> column, int scalar, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseGreaterThan(PrimitiveColumnContainer`1<int> left, PrimitiveColumnContainer`1<int> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseGreaterThan(PrimitiveColumnContainer`1<int> column, int scalar, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseLessThan(PrimitiveColumnContainer`1<int> left, PrimitiveColumnContainer`1<int> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseLessThan(PrimitiveColumnContainer`1<int> column, int scalar, PrimitiveColumnContainer`1<bool> ret);
}
internal class Microsoft.Data.Analysis.IntComputation : object {
    public sealed virtual void Abs(PrimitiveColumnContainer`1<int> column);
    public sealed virtual void All(PrimitiveColumnContainer`1<int> column, Boolean& ret);
    public sealed virtual void Any(PrimitiveColumnContainer`1<int> column, Boolean& ret);
    public sealed virtual void CumulativeMax(PrimitiveColumnContainer`1<int> column);
    public sealed virtual void CumulativeMax(PrimitiveColumnContainer`1<int> column, IEnumerable`1<long> rows);
    public sealed virtual void CumulativeMin(PrimitiveColumnContainer`1<int> column);
    public sealed virtual void CumulativeMin(PrimitiveColumnContainer`1<int> column, IEnumerable`1<long> rows);
    public sealed virtual void CumulativeProduct(PrimitiveColumnContainer`1<int> column);
    public sealed virtual void CumulativeProduct(PrimitiveColumnContainer`1<int> column, IEnumerable`1<long> rows);
    public sealed virtual void CumulativeSum(PrimitiveColumnContainer`1<int> column);
    public sealed virtual void CumulativeSum(PrimitiveColumnContainer`1<int> column, IEnumerable`1<long> rows);
    public sealed virtual void Max(PrimitiveColumnContainer`1<int> column, Int32& ret);
    public sealed virtual void Max(PrimitiveColumnContainer`1<int> column, IEnumerable`1<long> rows, Int32& ret);
    public sealed virtual void Min(PrimitiveColumnContainer`1<int> column, Int32& ret);
    public sealed virtual void Min(PrimitiveColumnContainer`1<int> column, IEnumerable`1<long> rows, Int32& ret);
    public sealed virtual void Product(PrimitiveColumnContainer`1<int> column, Int32& ret);
    public sealed virtual void Product(PrimitiveColumnContainer`1<int> column, IEnumerable`1<long> rows, Int32& ret);
    public sealed virtual void Sum(PrimitiveColumnContainer`1<int> column, Int32& ret);
    public sealed virtual void Sum(PrimitiveColumnContainer`1<int> column, IEnumerable`1<long> rows, Int32& ret);
    public sealed virtual void Round(PrimitiveColumnContainer`1<int> column);
}
internal interface Microsoft.Data.Analysis.IPrimitiveColumnComputation`1 {
    public abstract virtual void Abs(PrimitiveColumnContainer`1<T> column);
    public abstract virtual void All(PrimitiveColumnContainer`1<T> column, Boolean& ret);
    public abstract virtual void Any(PrimitiveColumnContainer`1<T> column, Boolean& ret);
    public abstract virtual void CumulativeMax(PrimitiveColumnContainer`1<T> column);
    public abstract virtual void CumulativeMax(PrimitiveColumnContainer`1<T> column, IEnumerable`1<long> rows);
    public abstract virtual void CumulativeMin(PrimitiveColumnContainer`1<T> column);
    public abstract virtual void CumulativeMin(PrimitiveColumnContainer`1<T> column, IEnumerable`1<long> rows);
    public abstract virtual void CumulativeProduct(PrimitiveColumnContainer`1<T> column);
    public abstract virtual void CumulativeProduct(PrimitiveColumnContainer`1<T> column, IEnumerable`1<long> rows);
    public abstract virtual void CumulativeSum(PrimitiveColumnContainer`1<T> column);
    public abstract virtual void CumulativeSum(PrimitiveColumnContainer`1<T> column, IEnumerable`1<long> rows);
    public abstract virtual void Max(PrimitiveColumnContainer`1<T> column, T& ret);
    public abstract virtual void Max(PrimitiveColumnContainer`1<T> column, IEnumerable`1<long> rows, T& ret);
    public abstract virtual void Min(PrimitiveColumnContainer`1<T> column, T& ret);
    public abstract virtual void Min(PrimitiveColumnContainer`1<T> column, IEnumerable`1<long> rows, T& ret);
    public abstract virtual void Product(PrimitiveColumnContainer`1<T> column, T& ret);
    public abstract virtual void Product(PrimitiveColumnContainer`1<T> column, IEnumerable`1<long> rows, T& ret);
    public abstract virtual void Sum(PrimitiveColumnContainer`1<T> column, T& ret);
    public abstract virtual void Sum(PrimitiveColumnContainer`1<T> column, IEnumerable`1<long> rows, T& ret);
    public abstract virtual void Round(PrimitiveColumnContainer`1<T> column);
}
internal interface Microsoft.Data.Analysis.IPrimitiveDataFrameColumnArithmetic`1 {
    public abstract virtual void Add(PrimitiveColumnContainer`1<T> left, PrimitiveColumnContainer`1<T> right);
    public abstract virtual void Add(PrimitiveColumnContainer`1<T> column, T scalar);
    public abstract virtual void Add(T scalar, PrimitiveColumnContainer`1<T> column);
    public abstract virtual void Subtract(PrimitiveColumnContainer`1<T> left, PrimitiveColumnContainer`1<T> right);
    public abstract virtual void Subtract(PrimitiveColumnContainer`1<T> column, T scalar);
    public abstract virtual void Subtract(T scalar, PrimitiveColumnContainer`1<T> column);
    public abstract virtual void Multiply(PrimitiveColumnContainer`1<T> left, PrimitiveColumnContainer`1<T> right);
    public abstract virtual void Multiply(PrimitiveColumnContainer`1<T> column, T scalar);
    public abstract virtual void Multiply(T scalar, PrimitiveColumnContainer`1<T> column);
    public abstract virtual void Divide(PrimitiveColumnContainer`1<T> left, PrimitiveColumnContainer`1<T> right);
    public abstract virtual void Divide(PrimitiveColumnContainer`1<T> column, T scalar);
    public abstract virtual void Divide(T scalar, PrimitiveColumnContainer`1<T> column);
    public abstract virtual void Modulo(PrimitiveColumnContainer`1<T> left, PrimitiveColumnContainer`1<T> right);
    public abstract virtual void Modulo(PrimitiveColumnContainer`1<T> column, T scalar);
    public abstract virtual void Modulo(T scalar, PrimitiveColumnContainer`1<T> column);
    public abstract virtual void And(PrimitiveColumnContainer`1<T> left, PrimitiveColumnContainer`1<T> right);
    public abstract virtual void And(PrimitiveColumnContainer`1<T> column, T scalar);
    public abstract virtual void And(T scalar, PrimitiveColumnContainer`1<T> column);
    public abstract virtual void Or(PrimitiveColumnContainer`1<T> left, PrimitiveColumnContainer`1<T> right);
    public abstract virtual void Or(PrimitiveColumnContainer`1<T> column, T scalar);
    public abstract virtual void Or(T scalar, PrimitiveColumnContainer`1<T> column);
    public abstract virtual void Xor(PrimitiveColumnContainer`1<T> left, PrimitiveColumnContainer`1<T> right);
    public abstract virtual void Xor(PrimitiveColumnContainer`1<T> column, T scalar);
    public abstract virtual void Xor(T scalar, PrimitiveColumnContainer`1<T> column);
    public abstract virtual void LeftShift(PrimitiveColumnContainer`1<T> column, int value);
    public abstract virtual void RightShift(PrimitiveColumnContainer`1<T> column, int value);
    public abstract virtual void ElementwiseEquals(PrimitiveColumnContainer`1<T> left, PrimitiveColumnContainer`1<T> right, PrimitiveColumnContainer`1<bool> ret);
    public abstract virtual void ElementwiseEquals(PrimitiveColumnContainer`1<T> column, T scalar, PrimitiveColumnContainer`1<bool> ret);
    public abstract virtual void ElementwiseNotEquals(PrimitiveColumnContainer`1<T> left, PrimitiveColumnContainer`1<T> right, PrimitiveColumnContainer`1<bool> ret);
    public abstract virtual void ElementwiseNotEquals(PrimitiveColumnContainer`1<T> column, T scalar, PrimitiveColumnContainer`1<bool> ret);
    public abstract virtual void ElementwiseGreaterThanOrEqual(PrimitiveColumnContainer`1<T> left, PrimitiveColumnContainer`1<T> right, PrimitiveColumnContainer`1<bool> ret);
    public abstract virtual void ElementwiseGreaterThanOrEqual(PrimitiveColumnContainer`1<T> column, T scalar, PrimitiveColumnContainer`1<bool> ret);
    public abstract virtual void ElementwiseLessThanOrEqual(PrimitiveColumnContainer`1<T> left, PrimitiveColumnContainer`1<T> right, PrimitiveColumnContainer`1<bool> ret);
    public abstract virtual void ElementwiseLessThanOrEqual(PrimitiveColumnContainer`1<T> column, T scalar, PrimitiveColumnContainer`1<bool> ret);
    public abstract virtual void ElementwiseGreaterThan(PrimitiveColumnContainer`1<T> left, PrimitiveColumnContainer`1<T> right, PrimitiveColumnContainer`1<bool> ret);
    public abstract virtual void ElementwiseGreaterThan(PrimitiveColumnContainer`1<T> column, T scalar, PrimitiveColumnContainer`1<bool> ret);
    public abstract virtual void ElementwiseLessThan(PrimitiveColumnContainer`1<T> left, PrimitiveColumnContainer`1<T> right, PrimitiveColumnContainer`1<bool> ret);
    public abstract virtual void ElementwiseLessThan(PrimitiveColumnContainer`1<T> column, T scalar, PrimitiveColumnContainer`1<bool> ret);
}
internal interface Microsoft.Data.Analysis.ISByteConverter`1 {
    public abstract virtual sbyte GetSByte(T value);
}
internal interface Microsoft.Data.Analysis.ISingleConverter`1 {
    public abstract virtual float GetSingle(T value);
}
internal interface Microsoft.Data.Analysis.IUInt16Converter`1 {
    public abstract virtual ushort GetUInt16(T value);
}
internal interface Microsoft.Data.Analysis.IUInt32Converter`1 {
    public abstract virtual UInt32 GetUInt32(T value);
}
internal interface Microsoft.Data.Analysis.IUInt64Converter`1 {
    public abstract virtual ulong GetUInt64(T value);
}
public enum Microsoft.Data.Analysis.JoinAlgorithm : Enum {
    public int value__;
    public static JoinAlgorithm Left;
    public static JoinAlgorithm Right;
    public static JoinAlgorithm FullOuter;
    public static JoinAlgorithm Inner;
}
internal class Microsoft.Data.Analysis.LongArithmetic : object {
    public sealed virtual void Add(PrimitiveColumnContainer`1<long> left, PrimitiveColumnContainer`1<long> right);
    public sealed virtual void Add(PrimitiveColumnContainer`1<long> column, long scalar);
    public sealed virtual void Add(long scalar, PrimitiveColumnContainer`1<long> column);
    public sealed virtual void Subtract(PrimitiveColumnContainer`1<long> left, PrimitiveColumnContainer`1<long> right);
    public sealed virtual void Subtract(PrimitiveColumnContainer`1<long> column, long scalar);
    public sealed virtual void Subtract(long scalar, PrimitiveColumnContainer`1<long> column);
    public sealed virtual void Multiply(PrimitiveColumnContainer`1<long> left, PrimitiveColumnContainer`1<long> right);
    public sealed virtual void Multiply(PrimitiveColumnContainer`1<long> column, long scalar);
    public sealed virtual void Multiply(long scalar, PrimitiveColumnContainer`1<long> column);
    public sealed virtual void Divide(PrimitiveColumnContainer`1<long> left, PrimitiveColumnContainer`1<long> right);
    public sealed virtual void Divide(PrimitiveColumnContainer`1<long> column, long scalar);
    public sealed virtual void Divide(long scalar, PrimitiveColumnContainer`1<long> column);
    public sealed virtual void Modulo(PrimitiveColumnContainer`1<long> left, PrimitiveColumnContainer`1<long> right);
    public sealed virtual void Modulo(PrimitiveColumnContainer`1<long> column, long scalar);
    public sealed virtual void Modulo(long scalar, PrimitiveColumnContainer`1<long> column);
    public sealed virtual void And(PrimitiveColumnContainer`1<long> left, PrimitiveColumnContainer`1<long> right);
    public sealed virtual void And(PrimitiveColumnContainer`1<long> column, long scalar);
    public sealed virtual void And(long scalar, PrimitiveColumnContainer`1<long> column);
    public sealed virtual void Or(PrimitiveColumnContainer`1<long> left, PrimitiveColumnContainer`1<long> right);
    public sealed virtual void Or(PrimitiveColumnContainer`1<long> column, long scalar);
    public sealed virtual void Or(long scalar, PrimitiveColumnContainer`1<long> column);
    public sealed virtual void Xor(PrimitiveColumnContainer`1<long> left, PrimitiveColumnContainer`1<long> right);
    public sealed virtual void Xor(PrimitiveColumnContainer`1<long> column, long scalar);
    public sealed virtual void Xor(long scalar, PrimitiveColumnContainer`1<long> column);
    public sealed virtual void LeftShift(PrimitiveColumnContainer`1<long> column, int value);
    public sealed virtual void RightShift(PrimitiveColumnContainer`1<long> column, int value);
    public sealed virtual void ElementwiseEquals(PrimitiveColumnContainer`1<long> left, PrimitiveColumnContainer`1<long> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseEquals(PrimitiveColumnContainer`1<long> column, long scalar, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseNotEquals(PrimitiveColumnContainer`1<long> left, PrimitiveColumnContainer`1<long> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseNotEquals(PrimitiveColumnContainer`1<long> column, long scalar, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseGreaterThanOrEqual(PrimitiveColumnContainer`1<long> left, PrimitiveColumnContainer`1<long> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseGreaterThanOrEqual(PrimitiveColumnContainer`1<long> column, long scalar, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseLessThanOrEqual(PrimitiveColumnContainer`1<long> left, PrimitiveColumnContainer`1<long> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseLessThanOrEqual(PrimitiveColumnContainer`1<long> column, long scalar, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseGreaterThan(PrimitiveColumnContainer`1<long> left, PrimitiveColumnContainer`1<long> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseGreaterThan(PrimitiveColumnContainer`1<long> column, long scalar, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseLessThan(PrimitiveColumnContainer`1<long> left, PrimitiveColumnContainer`1<long> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseLessThan(PrimitiveColumnContainer`1<long> column, long scalar, PrimitiveColumnContainer`1<bool> ret);
}
internal class Microsoft.Data.Analysis.LongComputation : object {
    public sealed virtual void Abs(PrimitiveColumnContainer`1<long> column);
    public sealed virtual void All(PrimitiveColumnContainer`1<long> column, Boolean& ret);
    public sealed virtual void Any(PrimitiveColumnContainer`1<long> column, Boolean& ret);
    public sealed virtual void CumulativeMax(PrimitiveColumnContainer`1<long> column);
    public sealed virtual void CumulativeMax(PrimitiveColumnContainer`1<long> column, IEnumerable`1<long> rows);
    public sealed virtual void CumulativeMin(PrimitiveColumnContainer`1<long> column);
    public sealed virtual void CumulativeMin(PrimitiveColumnContainer`1<long> column, IEnumerable`1<long> rows);
    public sealed virtual void CumulativeProduct(PrimitiveColumnContainer`1<long> column);
    public sealed virtual void CumulativeProduct(PrimitiveColumnContainer`1<long> column, IEnumerable`1<long> rows);
    public sealed virtual void CumulativeSum(PrimitiveColumnContainer`1<long> column);
    public sealed virtual void CumulativeSum(PrimitiveColumnContainer`1<long> column, IEnumerable`1<long> rows);
    public sealed virtual void Max(PrimitiveColumnContainer`1<long> column, Int64& ret);
    public sealed virtual void Max(PrimitiveColumnContainer`1<long> column, IEnumerable`1<long> rows, Int64& ret);
    public sealed virtual void Min(PrimitiveColumnContainer`1<long> column, Int64& ret);
    public sealed virtual void Min(PrimitiveColumnContainer`1<long> column, IEnumerable`1<long> rows, Int64& ret);
    public sealed virtual void Product(PrimitiveColumnContainer`1<long> column, Int64& ret);
    public sealed virtual void Product(PrimitiveColumnContainer`1<long> column, IEnumerable`1<long> rows, Int64& ret);
    public sealed virtual void Sum(PrimitiveColumnContainer`1<long> column, Int64& ret);
    public sealed virtual void Sum(PrimitiveColumnContainer`1<long> column, IEnumerable`1<long> rows, Int64& ret);
    public sealed virtual void Round(PrimitiveColumnContainer`1<long> column);
}
internal static class Microsoft.Data.Analysis.PrimitiveColumnComputation : object {
    public static IPrimitiveColumnComputation`1<T> GetComputation();
}
internal static class Microsoft.Data.Analysis.PrimitiveColumnComputation`1 : object {
    [CompilerGeneratedAttribute]
private static IPrimitiveColumnComputation`1<T> <Instance>k__BackingField;
    public static IPrimitiveColumnComputation`1<T> Instance { get; }
    private static PrimitiveColumnComputation`1();
    [CompilerGeneratedAttribute]
public static IPrimitiveColumnComputation`1<T> get_Instance();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Data.Analysis.PrimitiveColumnContainer`1 : object {
    public IList`1<ReadOnlyDataFrameBuffer`1<T>> Buffers;
    public IList`1<ReadOnlyDataFrameBuffer`1<byte>> NullBitMapBuffers;
    internal bool _modifyNullCountWhileIndexing;
    public long Length;
    public long NullCount;
    public IReadOnlyList`1<Nullable`1<T>> Item { get; }
    public Nullable`1<T> Item { get; public set; }
    public PrimitiveColumnContainer`1(T[] values);
    public PrimitiveColumnContainer`1(IEnumerable`1<T> values);
    public PrimitiveColumnContainer`1(IEnumerable`1<Nullable`1<T>> values);
    public PrimitiveColumnContainer`1(ReadOnlyMemory`1<byte> buffer, ReadOnlyMemory`1<byte> nullBitMap, int length, int nullCount);
    public PrimitiveColumnContainer`1(long length);
    public PrimitiveColumnContainer`1<T> Add(PrimitiveColumnContainer`1<T> right);
    public PrimitiveColumnContainer`1<T> Add(T scalar);
    public PrimitiveColumnContainer`1<T> Subtract(PrimitiveColumnContainer`1<T> right);
    public PrimitiveColumnContainer`1<T> Subtract(T scalar);
    public PrimitiveColumnContainer`1<T> Multiply(PrimitiveColumnContainer`1<T> right);
    public PrimitiveColumnContainer`1<T> Multiply(T scalar);
    public PrimitiveColumnContainer`1<T> Divide(PrimitiveColumnContainer`1<T> right);
    public PrimitiveColumnContainer`1<T> Divide(T scalar);
    public PrimitiveColumnContainer`1<T> Modulo(PrimitiveColumnContainer`1<T> right);
    public PrimitiveColumnContainer`1<T> Modulo(T scalar);
    public PrimitiveColumnContainer`1<T> And(PrimitiveColumnContainer`1<T> right);
    public PrimitiveColumnContainer`1<T> And(T scalar);
    public PrimitiveColumnContainer`1<T> Or(PrimitiveColumnContainer`1<T> right);
    public PrimitiveColumnContainer`1<T> Or(T scalar);
    public PrimitiveColumnContainer`1<T> Xor(PrimitiveColumnContainer`1<T> right);
    public PrimitiveColumnContainer`1<T> Xor(T scalar);
    public PrimitiveColumnContainer`1<T> LeftShift(int value);
    public PrimitiveColumnContainer`1<T> RightShift(int value);
    public PrimitiveColumnContainer`1<T> ElementwiseEquals(PrimitiveColumnContainer`1<T> right, PrimitiveColumnContainer`1<bool> ret);
    public PrimitiveColumnContainer`1<T> ElementwiseEquals(T scalar, PrimitiveColumnContainer`1<bool> ret);
    public PrimitiveColumnContainer`1<T> ElementwiseNotEquals(PrimitiveColumnContainer`1<T> right, PrimitiveColumnContainer`1<bool> ret);
    public PrimitiveColumnContainer`1<T> ElementwiseNotEquals(T scalar, PrimitiveColumnContainer`1<bool> ret);
    public PrimitiveColumnContainer`1<T> ElementwiseGreaterThanOrEqual(PrimitiveColumnContainer`1<T> right, PrimitiveColumnContainer`1<bool> ret);
    public PrimitiveColumnContainer`1<T> ElementwiseGreaterThanOrEqual(T scalar, PrimitiveColumnContainer`1<bool> ret);
    public PrimitiveColumnContainer`1<T> ElementwiseLessThanOrEqual(PrimitiveColumnContainer`1<T> right, PrimitiveColumnContainer`1<bool> ret);
    public PrimitiveColumnContainer`1<T> ElementwiseLessThanOrEqual(T scalar, PrimitiveColumnContainer`1<bool> ret);
    public PrimitiveColumnContainer`1<T> ElementwiseGreaterThan(PrimitiveColumnContainer`1<T> right, PrimitiveColumnContainer`1<bool> ret);
    public PrimitiveColumnContainer`1<T> ElementwiseGreaterThan(T scalar, PrimitiveColumnContainer`1<bool> ret);
    public PrimitiveColumnContainer`1<T> ElementwiseLessThan(PrimitiveColumnContainer`1<T> right, PrimitiveColumnContainer`1<bool> ret);
    public PrimitiveColumnContainer`1<T> ElementwiseLessThan(T scalar, PrimitiveColumnContainer`1<bool> ret);
    public PrimitiveColumnContainer`1<T> ReverseAdd(T scalar);
    public PrimitiveColumnContainer`1<T> ReverseSubtract(T scalar);
    public PrimitiveColumnContainer`1<T> ReverseMultiply(T scalar);
    public PrimitiveColumnContainer`1<T> ReverseDivide(T scalar);
    public PrimitiveColumnContainer`1<T> ReverseModulo(T scalar);
    public PrimitiveColumnContainer`1<T> ReverseAnd(T scalar);
    public PrimitiveColumnContainer`1<T> ReverseOr(T scalar);
    public PrimitiveColumnContainer`1<T> ReverseXor(T scalar);
    public void Resize(long length);
    public void Append(Nullable`1<T> value);
    public void AppendMany(Nullable`1<T> value, long count);
    public void ApplyElementwise(Func`3<Nullable`1<T>, long, Nullable`1<T>> func);
    public void Apply(Func`2<Nullable`1<T>, Nullable`1<TResult>> func, PrimitiveColumnContainer`1<TResult> resultContainer);
    public bool IsValid(ReadOnlySpan`1<byte> bitMapBufferSpan, int index);
    public bool IsValid(long index);
    private byte SetBit(byte curBitMap, int index, bool value);
    private void SetValidityBit(Span`1<byte> bitMapBufferSpan, int index, bool value);
    internal void SetValidityBit(long index, bool value);
    private bool IsBitSet(byte curBitMap, int index);
    private bool GetValidityBit(long index);
    public int GetArrayContainingRowIndex(long rowIndex);
    internal int MaxRecordBatchLength(long startIndex);
    internal ReadOnlyMemory`1<byte> GetValueBuffer(long startIndex);
    internal ReadOnlyMemory`1<byte> GetNullBuffer(long startIndex);
    public IReadOnlyList`1<Nullable`1<T>> get_Item(long startIndex, int length);
    public Nullable`1<T> get_Item(long rowIndex);
    public void set_Item(long rowIndex, Nullable`1<T> value);
    [IteratorStateMachineAttribute("Microsoft.Data.Analysis.PrimitiveColumnContainer`1/<GetEnumerator>d__69")]
public sealed virtual IEnumerator`1<Nullable`1<T>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual string ToString();
    private List`1<ReadOnlyDataFrameBuffer`1<byte>> CloneNullBitMapBuffers();
    public PrimitiveColumnContainer`1<T> Clone(PrimitiveColumnContainer`1<U> mapIndices, Type type, bool invertMapIndices);
    public PrimitiveColumnContainer`1<T> Clone();
    internal PrimitiveColumnContainer`1<bool> CloneAsBoolContainer();
    internal PrimitiveColumnContainer`1<byte> CloneAsByteContainer();
    internal PrimitiveColumnContainer`1<sbyte> CloneAsSByteContainer();
    internal PrimitiveColumnContainer`1<double> CloneAsDoubleContainer();
    internal PrimitiveColumnContainer`1<decimal> CloneAsDecimalContainer();
    internal PrimitiveColumnContainer`1<short> CloneAsShortContainer();
    internal PrimitiveColumnContainer`1<ushort> CloneAsUShortContainer();
    internal PrimitiveColumnContainer`1<int> CloneAsIntContainer();
    internal PrimitiveColumnContainer`1<UInt32> CloneAsUIntContainer();
    internal PrimitiveColumnContainer`1<long> CloneAsLongContainer();
    internal PrimitiveColumnContainer`1<ulong> CloneAsULongContainer();
    internal PrimitiveColumnContainer`1<float> CloneAsFloatContainer();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Data.Analysis.PrimitiveDataFrameColumn`1 : DataFrameColumn {
    private PrimitiveColumnContainer`1<T> _columnContainer;
    internal PrimitiveColumnContainer`1<T> ColumnContainer { get; }
    public IReadOnlyList`1<Nullable`1<T>> Item { get; }
    public Nullable`1<T> Item { get; public set; }
    public long NullCount { get; }
    internal PrimitiveDataFrameColumn`1(string name, PrimitiveColumnContainer`1<T> column);
    public PrimitiveDataFrameColumn`1(string name, IEnumerable`1<Nullable`1<T>> values);
    public PrimitiveDataFrameColumn`1(string name, IEnumerable`1<T> values);
    public PrimitiveDataFrameColumn`1(string name, long length);
    public PrimitiveDataFrameColumn`1(string name, ReadOnlyMemory`1<byte> buffer, ReadOnlyMemory`1<byte> nullBitMap, int length, int nullCount);
    public virtual DataFrameColumn Add(DataFrameColumn column, bool inPlace);
    public virtual DataFrameColumn Add(U value, bool inPlace);
    public virtual DataFrameColumn Subtract(DataFrameColumn column, bool inPlace);
    public virtual DataFrameColumn Subtract(U value, bool inPlace);
    public virtual DataFrameColumn Multiply(DataFrameColumn column, bool inPlace);
    public virtual DataFrameColumn Multiply(U value, bool inPlace);
    public virtual DataFrameColumn Divide(DataFrameColumn column, bool inPlace);
    public virtual DataFrameColumn Divide(U value, bool inPlace);
    public virtual DataFrameColumn Modulo(DataFrameColumn column, bool inPlace);
    public virtual DataFrameColumn Modulo(U value, bool inPlace);
    public virtual DataFrameColumn And(DataFrameColumn column, bool inPlace);
    public virtual PrimitiveDataFrameColumn`1<bool> And(bool value, bool inPlace);
    public virtual DataFrameColumn Or(DataFrameColumn column, bool inPlace);
    public virtual PrimitiveDataFrameColumn`1<bool> Or(bool value, bool inPlace);
    public virtual DataFrameColumn Xor(DataFrameColumn column, bool inPlace);
    public virtual PrimitiveDataFrameColumn`1<bool> Xor(bool value, bool inPlace);
    public virtual DataFrameColumn LeftShift(int value, bool inPlace);
    public virtual DataFrameColumn RightShift(int value, bool inPlace);
    public virtual PrimitiveDataFrameColumn`1<bool> ElementwiseEquals(DataFrameColumn column);
    public virtual PrimitiveDataFrameColumn`1<bool> ElementwiseEquals(U value);
    public virtual PrimitiveDataFrameColumn`1<bool> ElementwiseNotEquals(DataFrameColumn column);
    public virtual PrimitiveDataFrameColumn`1<bool> ElementwiseNotEquals(U value);
    public virtual PrimitiveDataFrameColumn`1<bool> ElementwiseGreaterThanOrEqual(DataFrameColumn column);
    public virtual PrimitiveDataFrameColumn`1<bool> ElementwiseGreaterThanOrEqual(U value);
    public virtual PrimitiveDataFrameColumn`1<bool> ElementwiseLessThanOrEqual(DataFrameColumn column);
    public virtual PrimitiveDataFrameColumn`1<bool> ElementwiseLessThanOrEqual(U value);
    public virtual PrimitiveDataFrameColumn`1<bool> ElementwiseGreaterThan(DataFrameColumn column);
    public virtual PrimitiveDataFrameColumn`1<bool> ElementwiseGreaterThan(U value);
    public virtual PrimitiveDataFrameColumn`1<bool> ElementwiseLessThan(DataFrameColumn column);
    public virtual PrimitiveDataFrameColumn`1<bool> ElementwiseLessThan(U value);
    internal DataFrameColumn AddImplementation(PrimitiveDataFrameColumn`1<U> column, bool inPlace);
    internal DataFrameColumn AddImplementation(U value, bool inPlace);
    internal DataFrameColumn SubtractImplementation(PrimitiveDataFrameColumn`1<U> column, bool inPlace);
    internal DataFrameColumn SubtractImplementation(U value, bool inPlace);
    internal DataFrameColumn MultiplyImplementation(PrimitiveDataFrameColumn`1<U> column, bool inPlace);
    internal DataFrameColumn MultiplyImplementation(U value, bool inPlace);
    internal DataFrameColumn DivideImplementation(PrimitiveDataFrameColumn`1<U> column, bool inPlace);
    internal DataFrameColumn DivideImplementation(U value, bool inPlace);
    internal DataFrameColumn ModuloImplementation(PrimitiveDataFrameColumn`1<U> column, bool inPlace);
    internal DataFrameColumn ModuloImplementation(U value, bool inPlace);
    internal DataFrameColumn AndImplementation(PrimitiveDataFrameColumn`1<U> column, bool inPlace);
    internal PrimitiveDataFrameColumn`1<bool> AndImplementation(U value, bool inPlace);
    internal DataFrameColumn OrImplementation(PrimitiveDataFrameColumn`1<U> column, bool inPlace);
    internal PrimitiveDataFrameColumn`1<bool> OrImplementation(U value, bool inPlace);
    internal DataFrameColumn XorImplementation(PrimitiveDataFrameColumn`1<U> column, bool inPlace);
    internal PrimitiveDataFrameColumn`1<bool> XorImplementation(U value, bool inPlace);
    internal DataFrameColumn LeftShiftImplementation(int value, bool inPlace);
    internal DataFrameColumn RightShiftImplementation(int value, bool inPlace);
    internal PrimitiveDataFrameColumn`1<bool> ElementwiseEqualsImplementation(PrimitiveDataFrameColumn`1<U> column);
    internal PrimitiveDataFrameColumn`1<bool> ElementwiseEqualsImplementation(U value);
    internal PrimitiveDataFrameColumn`1<bool> ElementwiseNotEqualsImplementation(PrimitiveDataFrameColumn`1<U> column);
    internal PrimitiveDataFrameColumn`1<bool> ElementwiseNotEqualsImplementation(U value);
    internal PrimitiveDataFrameColumn`1<bool> ElementwiseGreaterThanOrEqualImplementation(PrimitiveDataFrameColumn`1<U> column);
    internal PrimitiveDataFrameColumn`1<bool> ElementwiseGreaterThanOrEqualImplementation(U value);
    internal PrimitiveDataFrameColumn`1<bool> ElementwiseLessThanOrEqualImplementation(PrimitiveDataFrameColumn`1<U> column);
    internal PrimitiveDataFrameColumn`1<bool> ElementwiseLessThanOrEqualImplementation(U value);
    internal PrimitiveDataFrameColumn`1<bool> ElementwiseGreaterThanImplementation(PrimitiveDataFrameColumn`1<U> column);
    internal PrimitiveDataFrameColumn`1<bool> ElementwiseGreaterThanImplementation(U value);
    internal PrimitiveDataFrameColumn`1<bool> ElementwiseLessThanImplementation(PrimitiveDataFrameColumn`1<U> column);
    internal PrimitiveDataFrameColumn`1<bool> ElementwiseLessThanImplementation(U value);
    public virtual DataFrameColumn Abs(bool inPlace);
    public virtual bool All();
    public virtual bool Any();
    public virtual DataFrameColumn CumulativeMax(bool inPlace);
    public virtual DataFrameColumn CumulativeMax(IEnumerable`1<long> rowIndices, bool inPlace);
    public virtual DataFrameColumn CumulativeMin(bool inPlace);
    public virtual DataFrameColumn CumulativeMin(IEnumerable`1<long> rowIndices, bool inPlace);
    public virtual DataFrameColumn CumulativeProduct(bool inPlace);
    public virtual DataFrameColumn CumulativeProduct(IEnumerable`1<long> rowIndices, bool inPlace);
    public virtual DataFrameColumn CumulativeSum(bool inPlace);
    public virtual DataFrameColumn CumulativeSum(IEnumerable`1<long> rowIndices, bool inPlace);
    public virtual object Max();
    public virtual object Max(IEnumerable`1<long> rowIndices);
    public virtual object Min();
    public virtual object Min(IEnumerable`1<long> rowIndices);
    public virtual object Product();
    public virtual object Product(IEnumerable`1<long> rowIndices);
    public virtual object Sum();
    public virtual object Sum(IEnumerable`1<long> rowIndices);
    public virtual DataFrameColumn Round(bool inPlace);
    internal PrimitiveColumnContainer`1<T> get_ColumnContainer();
    [IteratorStateMachineAttribute("Microsoft.Data.Analysis.PrimitiveDataFrameColumn`1/<GetReadOnlyDataBuffers>d__88")]
public IEnumerable`1<ReadOnlyMemory`1<T>> GetReadOnlyDataBuffers();
    [IteratorStateMachineAttribute("Microsoft.Data.Analysis.PrimitiveDataFrameColumn`1/<GetReadOnlyNullBitMapBuffers>d__89")]
public IEnumerable`1<ReadOnlyMemory`1<byte>> GetReadOnlyNullBitMapBuffers();
    private IArrowType GetArrowType();
    protected internal virtual Field GetArrowField();
    protected internal virtual int GetMaxRecordBatchLength(long startIndex);
    private int GetNullCount(long startIndex, int numberOfRows);
    protected internal virtual Array ToArrowArray(long startIndex, int numberOfRows);
    public IReadOnlyList`1<Nullable`1<T>> get_Item(long startIndex, int length);
    protected virtual IReadOnlyList`1<object> GetValues(long startIndex, int length);
    internal Nullable`1<T> GetTypedValue(long rowIndex);
    protected virtual object GetValue(long rowIndex);
    protected virtual void SetValue(long rowIndex, object value);
    public Nullable`1<T> get_Item(long rowIndex);
    public void set_Item(long rowIndex, Nullable`1<T> value);
    public virtual double Median();
    public virtual double Mean();
    protected internal virtual void Resize(long length);
    public void Append(Nullable`1<T> value);
    public void AppendMany(Nullable`1<T> value, long count);
    public virtual long get_NullCount();
    public bool IsValid(long index);
    public sealed virtual IEnumerator`1<Nullable`1<T>> GetEnumerator();
    protected virtual IEnumerator GetEnumeratorCore();
    public virtual bool IsNumericColumn();
    public PrimitiveDataFrameColumn`1<T> FillNulls(T value, bool inPlace);
    protected virtual DataFrameColumn FillNullsImplementation(object value, bool inPlace);
    public virtual DataFrame ValueCounts();
    public virtual bool HasDescription();
    public virtual string ToString();
    public PrimitiveDataFrameColumn`1<T> Clone(DataFrameColumn mapIndices, bool invertMapIndices, long numberOfNullsToAppend);
    protected virtual DataFrameColumn CloneImplementation(DataFrameColumn mapIndices, bool invertMapIndices, long numberOfNullsToAppend);
    private PrimitiveDataFrameColumn`1<T> Clone(PrimitiveDataFrameColumn`1<bool> boolColumn);
    private PrimitiveDataFrameColumn`1<T> CloneImplementation(PrimitiveDataFrameColumn`1<U> mapIndices, bool invertMapIndices);
    public PrimitiveDataFrameColumn`1<T> Clone(PrimitiveDataFrameColumn`1<long> mapIndices, bool invertMapIndices);
    public PrimitiveDataFrameColumn`1<T> Clone(PrimitiveDataFrameColumn`1<int> mapIndices, bool invertMapIndices);
    public PrimitiveDataFrameColumn`1<T> Clone(IEnumerable`1<long> mapIndices);
    internal BooleanDataFrameColumn CloneAsBooleanColumn();
    internal ByteDataFrameColumn CloneAsByteColumn();
    internal SByteDataFrameColumn CloneAsSByteColumn();
    internal DoubleDataFrameColumn CloneAsDoubleColumn();
    internal DecimalDataFrameColumn CloneAsDecimalColumn();
    internal Int16DataFrameColumn CloneAsInt16Column();
    internal UInt16DataFrameColumn CloneAsUInt16Column();
    internal Int32DataFrameColumn CloneAsInt32Column();
    internal UInt32DataFrameColumn CloneAsUInt32Column();
    internal Int64DataFrameColumn CloneAsInt64Column();
    internal UInt64DataFrameColumn CloneAsUInt64Column();
    internal SingleDataFrameColumn CloneAsSingleColumn();
    public virtual GroupBy GroupBy(int columnIndex, DataFrame parent);
    public virtual Dictionary`2<TKey, ICollection`1<long>> GroupColumnValues(HashSet`1& nullIndices);
    public void ApplyElementwise(Func`3<Nullable`1<T>, long, Nullable`1<T>> func);
    public PrimitiveDataFrameColumn`1<TResult> Apply(Func`2<Nullable`1<T>, Nullable`1<TResult>> func);
    public PrimitiveDataFrameColumn`1<T> Clamp(T min, T max, bool inPlace);
    protected virtual DataFrameColumn ClampImplementation(U min, U max, bool inPlace);
    public PrimitiveDataFrameColumn`1<T> Filter(T min, T max);
    protected virtual DataFrameColumn FilterImplementation(U min, U max);
    public virtual DataFrameColumn Description();
    protected internal virtual void AddDataViewColumn(Builder builder);
    private static DataViewType GetDataViewType();
    protected internal virtual Delegate GetDataViewGetter(DataViewRowCursor cursor);
    private ValueGetter`1<T> CreateValueGetterDelegate(DataViewRowCursor cursor);
    private static ValueGetter`1<float> CreateSingleValueGetterDelegate(DataViewRowCursor cursor, PrimitiveDataFrameColumn`1<float> column);
    private static ValueGetter`1<double> CreateDoubleValueGetterDelegate(DataViewRowCursor cursor, PrimitiveDataFrameColumn`1<double> column);
    private static ValueGetter`1<ushort> CreateCharValueGetterDelegate(DataViewRowCursor cursor, PrimitiveDataFrameColumn`1<char> column);
    private static ValueGetter`1<double> CreateDecimalValueGetterDelegate(DataViewRowCursor cursor, PrimitiveDataFrameColumn`1<decimal> column);
    protected internal virtual void AddValueUsingCursor(DataViewRowCursor cursor, Delegate getter);
    protected internal virtual Delegate GetValueGetterUsingCursor(DataViewRowCursor cursor, Column schemaColumn);
    public virtual DataFrameColumn ReverseAdd(U value, bool inPlace);
    public virtual DataFrameColumn ReverseSubtract(U value, bool inPlace);
    public virtual DataFrameColumn ReverseMultiply(U value, bool inPlace);
    public virtual DataFrameColumn ReverseDivide(U value, bool inPlace);
    public virtual DataFrameColumn ReverseModulo(U value, bool inPlace);
    public virtual PrimitiveDataFrameColumn`1<bool> ReverseAnd(bool value, bool inPlace);
    public virtual PrimitiveDataFrameColumn`1<bool> ReverseOr(bool value, bool inPlace);
    public virtual PrimitiveDataFrameColumn`1<bool> ReverseXor(bool value, bool inPlace);
    public PrimitiveDataFrameColumn`1<T> Sort(bool ascending);
    internal virtual PrimitiveDataFrameColumn`1<long> GetAscendingSortIndices(Int64DataFrameColumn& nullIndices);
    private Int64DataFrameColumn GetSortIndices(IComparer`1<T> comparer, Int64DataFrameColumn& columnNullIndices);
}
internal static class Microsoft.Data.Analysis.PrimitiveDataFrameColumnArithmetic : object {
    public static IPrimitiveDataFrameColumnArithmetic`1<T> GetArithmetic();
}
internal static class Microsoft.Data.Analysis.PrimitiveDataFrameColumnArithmetic`1 : object {
    [CompilerGeneratedAttribute]
private static IPrimitiveDataFrameColumnArithmetic`1<T> <Instance>k__BackingField;
    public static IPrimitiveDataFrameColumnArithmetic`1<T> Instance { get; }
    private static PrimitiveDataFrameColumnArithmetic`1();
    [CompilerGeneratedAttribute]
public static IPrimitiveDataFrameColumnArithmetic`1<T> get_Instance();
}
internal class Microsoft.Data.Analysis.QuoteDelimitedFieldBuilder : object {
    private StringBuilder _field;
    private bool _fieldFinished;
    private int _index;
    private int _delimiterLength;
    private Regex _delimiterRegex;
    private string _spaceChars;
    private bool _malformedLine;
    public bool FieldFinished { get; }
    public string Field { get; }
    public int Index { get; }
    public int DelimiterLength { get; }
    public bool MalformedLine { get; }
    public QuoteDelimitedFieldBuilder(Regex delimiterRegex, string spaceChars);
    public bool get_FieldFinished();
    public string get_Field();
    public int get_Index();
    public int get_DelimiterLength();
    public bool get_MalformedLine();
    public void BuildField(string line, int startAt);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Data.Analysis.ReadOnlyDataFrameBuffer`1 : object {
    private ReadOnlyMemory`1<byte> _readOnlyBuffer;
    protected static int Size;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    public ReadOnlyMemory`1<byte> ReadOnlyBuffer { get; }
    public ReadOnlyMemory`1<T> ReadOnlyMemory { get; }
    public ReadOnlyMemory`1<T> RawReadOnlyMemory { get; }
    protected int Capacity { get; }
    public static int MaxCapacity { get; }
    public ReadOnlySpan`1<T> ReadOnlySpan { get; }
    public int Length { get; internal set; }
    internal T Item { get; internal set; }
    public ReadOnlyDataFrameBuffer`1(int numberOfValues);
    public ReadOnlyDataFrameBuffer`1(ReadOnlyMemory`1<byte> buffer, int length);
    private static ReadOnlyDataFrameBuffer`1();
    public virtual ReadOnlyMemory`1<byte> get_ReadOnlyBuffer();
    public ReadOnlyMemory`1<T> get_ReadOnlyMemory();
    public ReadOnlyMemory`1<T> get_RawReadOnlyMemory();
    protected int get_Capacity();
    public static int get_MaxCapacity();
    public ReadOnlySpan`1<T> get_ReadOnlySpan();
    [CompilerGeneratedAttribute]
public int get_Length();
    [CompilerGeneratedAttribute]
internal void set_Length(int value);
    internal virtual T get_Item(int index);
    internal virtual void set_Item(int index, T value);
    public virtual string ToString();
}
internal class Microsoft.Data.Analysis.SByteArithmetic : object {
    public sealed virtual void Add(PrimitiveColumnContainer`1<sbyte> left, PrimitiveColumnContainer`1<sbyte> right);
    public sealed virtual void Add(PrimitiveColumnContainer`1<sbyte> column, sbyte scalar);
    public sealed virtual void Add(sbyte scalar, PrimitiveColumnContainer`1<sbyte> column);
    public sealed virtual void Subtract(PrimitiveColumnContainer`1<sbyte> left, PrimitiveColumnContainer`1<sbyte> right);
    public sealed virtual void Subtract(PrimitiveColumnContainer`1<sbyte> column, sbyte scalar);
    public sealed virtual void Subtract(sbyte scalar, PrimitiveColumnContainer`1<sbyte> column);
    public sealed virtual void Multiply(PrimitiveColumnContainer`1<sbyte> left, PrimitiveColumnContainer`1<sbyte> right);
    public sealed virtual void Multiply(PrimitiveColumnContainer`1<sbyte> column, sbyte scalar);
    public sealed virtual void Multiply(sbyte scalar, PrimitiveColumnContainer`1<sbyte> column);
    public sealed virtual void Divide(PrimitiveColumnContainer`1<sbyte> left, PrimitiveColumnContainer`1<sbyte> right);
    public sealed virtual void Divide(PrimitiveColumnContainer`1<sbyte> column, sbyte scalar);
    public sealed virtual void Divide(sbyte scalar, PrimitiveColumnContainer`1<sbyte> column);
    public sealed virtual void Modulo(PrimitiveColumnContainer`1<sbyte> left, PrimitiveColumnContainer`1<sbyte> right);
    public sealed virtual void Modulo(PrimitiveColumnContainer`1<sbyte> column, sbyte scalar);
    public sealed virtual void Modulo(sbyte scalar, PrimitiveColumnContainer`1<sbyte> column);
    public sealed virtual void And(PrimitiveColumnContainer`1<sbyte> left, PrimitiveColumnContainer`1<sbyte> right);
    public sealed virtual void And(PrimitiveColumnContainer`1<sbyte> column, sbyte scalar);
    public sealed virtual void And(sbyte scalar, PrimitiveColumnContainer`1<sbyte> column);
    public sealed virtual void Or(PrimitiveColumnContainer`1<sbyte> left, PrimitiveColumnContainer`1<sbyte> right);
    public sealed virtual void Or(PrimitiveColumnContainer`1<sbyte> column, sbyte scalar);
    public sealed virtual void Or(sbyte scalar, PrimitiveColumnContainer`1<sbyte> column);
    public sealed virtual void Xor(PrimitiveColumnContainer`1<sbyte> left, PrimitiveColumnContainer`1<sbyte> right);
    public sealed virtual void Xor(PrimitiveColumnContainer`1<sbyte> column, sbyte scalar);
    public sealed virtual void Xor(sbyte scalar, PrimitiveColumnContainer`1<sbyte> column);
    public sealed virtual void LeftShift(PrimitiveColumnContainer`1<sbyte> column, int value);
    public sealed virtual void RightShift(PrimitiveColumnContainer`1<sbyte> column, int value);
    public sealed virtual void ElementwiseEquals(PrimitiveColumnContainer`1<sbyte> left, PrimitiveColumnContainer`1<sbyte> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseEquals(PrimitiveColumnContainer`1<sbyte> column, sbyte scalar, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseNotEquals(PrimitiveColumnContainer`1<sbyte> left, PrimitiveColumnContainer`1<sbyte> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseNotEquals(PrimitiveColumnContainer`1<sbyte> column, sbyte scalar, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseGreaterThanOrEqual(PrimitiveColumnContainer`1<sbyte> left, PrimitiveColumnContainer`1<sbyte> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseGreaterThanOrEqual(PrimitiveColumnContainer`1<sbyte> column, sbyte scalar, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseLessThanOrEqual(PrimitiveColumnContainer`1<sbyte> left, PrimitiveColumnContainer`1<sbyte> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseLessThanOrEqual(PrimitiveColumnContainer`1<sbyte> column, sbyte scalar, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseGreaterThan(PrimitiveColumnContainer`1<sbyte> left, PrimitiveColumnContainer`1<sbyte> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseGreaterThan(PrimitiveColumnContainer`1<sbyte> column, sbyte scalar, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseLessThan(PrimitiveColumnContainer`1<sbyte> left, PrimitiveColumnContainer`1<sbyte> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseLessThan(PrimitiveColumnContainer`1<sbyte> column, sbyte scalar, PrimitiveColumnContainer`1<bool> ret);
}
internal class Microsoft.Data.Analysis.SByteByteConverter : object {
    public sealed virtual byte GetByte(sbyte value);
}
internal class Microsoft.Data.Analysis.SByteComputation : object {
    public sealed virtual void Abs(PrimitiveColumnContainer`1<sbyte> column);
    public sealed virtual void All(PrimitiveColumnContainer`1<sbyte> column, Boolean& ret);
    public sealed virtual void Any(PrimitiveColumnContainer`1<sbyte> column, Boolean& ret);
    public sealed virtual void CumulativeMax(PrimitiveColumnContainer`1<sbyte> column);
    public sealed virtual void CumulativeMax(PrimitiveColumnContainer`1<sbyte> column, IEnumerable`1<long> rows);
    public sealed virtual void CumulativeMin(PrimitiveColumnContainer`1<sbyte> column);
    public sealed virtual void CumulativeMin(PrimitiveColumnContainer`1<sbyte> column, IEnumerable`1<long> rows);
    public sealed virtual void CumulativeProduct(PrimitiveColumnContainer`1<sbyte> column);
    public sealed virtual void CumulativeProduct(PrimitiveColumnContainer`1<sbyte> column, IEnumerable`1<long> rows);
    public sealed virtual void CumulativeSum(PrimitiveColumnContainer`1<sbyte> column);
    public sealed virtual void CumulativeSum(PrimitiveColumnContainer`1<sbyte> column, IEnumerable`1<long> rows);
    public sealed virtual void Max(PrimitiveColumnContainer`1<sbyte> column, SByte& ret);
    public sealed virtual void Max(PrimitiveColumnContainer`1<sbyte> column, IEnumerable`1<long> rows, SByte& ret);
    public sealed virtual void Min(PrimitiveColumnContainer`1<sbyte> column, SByte& ret);
    public sealed virtual void Min(PrimitiveColumnContainer`1<sbyte> column, IEnumerable`1<long> rows, SByte& ret);
    public sealed virtual void Product(PrimitiveColumnContainer`1<sbyte> column, SByte& ret);
    public sealed virtual void Product(PrimitiveColumnContainer`1<sbyte> column, IEnumerable`1<long> rows, SByte& ret);
    public sealed virtual void Sum(PrimitiveColumnContainer`1<sbyte> column, SByte& ret);
    public sealed virtual void Sum(PrimitiveColumnContainer`1<sbyte> column, IEnumerable`1<long> rows, SByte& ret);
    public sealed virtual void Round(PrimitiveColumnContainer`1<sbyte> column);
}
internal static class Microsoft.Data.Analysis.SByteConverter : object {
    public static ISByteConverter`1<T> GetSByteConverter();
}
internal static class Microsoft.Data.Analysis.SByteConverter`1 : object {
    [CompilerGeneratedAttribute]
private static ISByteConverter`1<T> <Instance>k__BackingField;
    public static ISByteConverter`1<T> Instance { get; }
    private static SByteConverter`1();
    [CompilerGeneratedAttribute]
public static ISByteConverter`1<T> get_Instance();
}
public class Microsoft.Data.Analysis.SByteDataFrameColumn : PrimitiveDataFrameColumn`1<sbyte> {
    public SByteDataFrameColumn(string name, IEnumerable`1<Nullable`1<sbyte>> values);
    public SByteDataFrameColumn(string name, IEnumerable`1<sbyte> values);
    public SByteDataFrameColumn(string name, long length);
    public SByteDataFrameColumn(string name, ReadOnlyMemory`1<byte> buffer, ReadOnlyMemory`1<byte> nullBitMap, int length, int nullCount);
    internal SByteDataFrameColumn(string name, PrimitiveColumnContainer`1<sbyte> values);
    public Int32DataFrameColumn Add(ByteDataFrameColumn column);
    public Int32DataFrameColumn Subtract(ByteDataFrameColumn column);
    public Int32DataFrameColumn Multiply(ByteDataFrameColumn column);
    public Int32DataFrameColumn Divide(ByteDataFrameColumn column);
    public Int32DataFrameColumn Modulo(ByteDataFrameColumn column);
    public DecimalDataFrameColumn Add(DecimalDataFrameColumn column);
    public DecimalDataFrameColumn Subtract(DecimalDataFrameColumn column);
    public DecimalDataFrameColumn Multiply(DecimalDataFrameColumn column);
    public DecimalDataFrameColumn Divide(DecimalDataFrameColumn column);
    public DecimalDataFrameColumn Modulo(DecimalDataFrameColumn column);
    public DoubleDataFrameColumn Add(DoubleDataFrameColumn column);
    public DoubleDataFrameColumn Subtract(DoubleDataFrameColumn column);
    public DoubleDataFrameColumn Multiply(DoubleDataFrameColumn column);
    public DoubleDataFrameColumn Divide(DoubleDataFrameColumn column);
    public DoubleDataFrameColumn Modulo(DoubleDataFrameColumn column);
    public SingleDataFrameColumn Add(SingleDataFrameColumn column);
    public SingleDataFrameColumn Subtract(SingleDataFrameColumn column);
    public SingleDataFrameColumn Multiply(SingleDataFrameColumn column);
    public SingleDataFrameColumn Divide(SingleDataFrameColumn column);
    public SingleDataFrameColumn Modulo(SingleDataFrameColumn column);
    public Int32DataFrameColumn Add(Int32DataFrameColumn column);
    public Int32DataFrameColumn Subtract(Int32DataFrameColumn column);
    public Int32DataFrameColumn Multiply(Int32DataFrameColumn column);
    public Int32DataFrameColumn Divide(Int32DataFrameColumn column);
    public Int32DataFrameColumn Modulo(Int32DataFrameColumn column);
    public Int64DataFrameColumn Add(Int64DataFrameColumn column);
    public Int64DataFrameColumn Subtract(Int64DataFrameColumn column);
    public Int64DataFrameColumn Multiply(Int64DataFrameColumn column);
    public Int64DataFrameColumn Divide(Int64DataFrameColumn column);
    public Int64DataFrameColumn Modulo(Int64DataFrameColumn column);
    public Int32DataFrameColumn Add(SByteDataFrameColumn column);
    public Int32DataFrameColumn Subtract(SByteDataFrameColumn column);
    public Int32DataFrameColumn Multiply(SByteDataFrameColumn column);
    public Int32DataFrameColumn Divide(SByteDataFrameColumn column);
    public Int32DataFrameColumn Modulo(SByteDataFrameColumn column);
    public Int32DataFrameColumn Add(Int16DataFrameColumn column);
    public Int32DataFrameColumn Subtract(Int16DataFrameColumn column);
    public Int32DataFrameColumn Multiply(Int16DataFrameColumn column);
    public Int32DataFrameColumn Divide(Int16DataFrameColumn column);
    public Int32DataFrameColumn Modulo(Int16DataFrameColumn column);
    public Int64DataFrameColumn Add(UInt32DataFrameColumn column);
    public Int64DataFrameColumn Subtract(UInt32DataFrameColumn column);
    public Int64DataFrameColumn Multiply(UInt32DataFrameColumn column);
    public Int64DataFrameColumn Divide(UInt32DataFrameColumn column);
    public Int64DataFrameColumn Modulo(UInt32DataFrameColumn column);
    public SingleDataFrameColumn Add(UInt64DataFrameColumn column);
    public SingleDataFrameColumn Subtract(UInt64DataFrameColumn column);
    public SingleDataFrameColumn Multiply(UInt64DataFrameColumn column);
    public SingleDataFrameColumn Divide(UInt64DataFrameColumn column);
    public SingleDataFrameColumn Modulo(UInt64DataFrameColumn column);
    public Int32DataFrameColumn Add(UInt16DataFrameColumn column);
    public Int32DataFrameColumn Subtract(UInt16DataFrameColumn column);
    public Int32DataFrameColumn Multiply(UInt16DataFrameColumn column);
    public Int32DataFrameColumn Divide(UInt16DataFrameColumn column);
    public Int32DataFrameColumn Modulo(UInt16DataFrameColumn column);
    public Int32DataFrameColumn Add(byte value);
    public Int32DataFrameColumn ReverseAdd(byte value);
    public Int32DataFrameColumn Subtract(byte value);
    public Int32DataFrameColumn ReverseSubtract(byte value);
    public Int32DataFrameColumn Multiply(byte value);
    public Int32DataFrameColumn ReverseMultiply(byte value);
    public Int32DataFrameColumn Divide(byte value);
    public Int32DataFrameColumn ReverseDivide(byte value);
    public Int32DataFrameColumn Modulo(byte value);
    public Int32DataFrameColumn ReverseModulo(byte value);
    public DecimalDataFrameColumn Add(decimal value);
    public DecimalDataFrameColumn ReverseAdd(decimal value);
    public DecimalDataFrameColumn Subtract(decimal value);
    public DecimalDataFrameColumn ReverseSubtract(decimal value);
    public DecimalDataFrameColumn Multiply(decimal value);
    public DecimalDataFrameColumn ReverseMultiply(decimal value);
    public DecimalDataFrameColumn Divide(decimal value);
    public DecimalDataFrameColumn ReverseDivide(decimal value);
    public DecimalDataFrameColumn Modulo(decimal value);
    public DecimalDataFrameColumn ReverseModulo(decimal value);
    public DoubleDataFrameColumn Add(double value);
    public DoubleDataFrameColumn ReverseAdd(double value);
    public DoubleDataFrameColumn Subtract(double value);
    public DoubleDataFrameColumn ReverseSubtract(double value);
    public DoubleDataFrameColumn Multiply(double value);
    public DoubleDataFrameColumn ReverseMultiply(double value);
    public DoubleDataFrameColumn Divide(double value);
    public DoubleDataFrameColumn ReverseDivide(double value);
    public DoubleDataFrameColumn Modulo(double value);
    public DoubleDataFrameColumn ReverseModulo(double value);
    public SingleDataFrameColumn Add(float value);
    public SingleDataFrameColumn ReverseAdd(float value);
    public SingleDataFrameColumn Subtract(float value);
    public SingleDataFrameColumn ReverseSubtract(float value);
    public SingleDataFrameColumn Multiply(float value);
    public SingleDataFrameColumn ReverseMultiply(float value);
    public SingleDataFrameColumn Divide(float value);
    public SingleDataFrameColumn ReverseDivide(float value);
    public SingleDataFrameColumn Modulo(float value);
    public SingleDataFrameColumn ReverseModulo(float value);
    public Int32DataFrameColumn Add(int value);
    public Int32DataFrameColumn ReverseAdd(int value);
    public Int32DataFrameColumn Subtract(int value);
    public Int32DataFrameColumn ReverseSubtract(int value);
    public Int32DataFrameColumn Multiply(int value);
    public Int32DataFrameColumn ReverseMultiply(int value);
    public Int32DataFrameColumn Divide(int value);
    public Int32DataFrameColumn ReverseDivide(int value);
    public Int32DataFrameColumn Modulo(int value);
    public Int32DataFrameColumn ReverseModulo(int value);
    public Int64DataFrameColumn Add(long value);
    public Int64DataFrameColumn ReverseAdd(long value);
    public Int64DataFrameColumn Subtract(long value);
    public Int64DataFrameColumn ReverseSubtract(long value);
    public Int64DataFrameColumn Multiply(long value);
    public Int64DataFrameColumn ReverseMultiply(long value);
    public Int64DataFrameColumn Divide(long value);
    public Int64DataFrameColumn ReverseDivide(long value);
    public Int64DataFrameColumn Modulo(long value);
    public Int64DataFrameColumn ReverseModulo(long value);
    public Int32DataFrameColumn Add(sbyte value);
    public Int32DataFrameColumn ReverseAdd(sbyte value);
    public Int32DataFrameColumn Subtract(sbyte value);
    public Int32DataFrameColumn ReverseSubtract(sbyte value);
    public Int32DataFrameColumn Multiply(sbyte value);
    public Int32DataFrameColumn ReverseMultiply(sbyte value);
    public Int32DataFrameColumn Divide(sbyte value);
    public Int32DataFrameColumn ReverseDivide(sbyte value);
    public Int32DataFrameColumn Modulo(sbyte value);
    public Int32DataFrameColumn ReverseModulo(sbyte value);
    public Int32DataFrameColumn Add(short value);
    public Int32DataFrameColumn ReverseAdd(short value);
    public Int32DataFrameColumn Subtract(short value);
    public Int32DataFrameColumn ReverseSubtract(short value);
    public Int32DataFrameColumn Multiply(short value);
    public Int32DataFrameColumn ReverseMultiply(short value);
    public Int32DataFrameColumn Divide(short value);
    public Int32DataFrameColumn ReverseDivide(short value);
    public Int32DataFrameColumn Modulo(short value);
    public Int32DataFrameColumn ReverseModulo(short value);
    public Int64DataFrameColumn Add(UInt32 value);
    public Int64DataFrameColumn ReverseAdd(UInt32 value);
    public Int64DataFrameColumn Subtract(UInt32 value);
    public Int64DataFrameColumn ReverseSubtract(UInt32 value);
    public Int64DataFrameColumn Multiply(UInt32 value);
    public Int64DataFrameColumn ReverseMultiply(UInt32 value);
    public Int64DataFrameColumn Divide(UInt32 value);
    public Int64DataFrameColumn ReverseDivide(UInt32 value);
    public Int64DataFrameColumn Modulo(UInt32 value);
    public Int64DataFrameColumn ReverseModulo(UInt32 value);
    public SingleDataFrameColumn Add(ulong value);
    public SingleDataFrameColumn ReverseAdd(ulong value);
    public SingleDataFrameColumn Subtract(ulong value);
    public SingleDataFrameColumn ReverseSubtract(ulong value);
    public SingleDataFrameColumn Multiply(ulong value);
    public SingleDataFrameColumn ReverseMultiply(ulong value);
    public SingleDataFrameColumn Divide(ulong value);
    public SingleDataFrameColumn ReverseDivide(ulong value);
    public SingleDataFrameColumn Modulo(ulong value);
    public SingleDataFrameColumn ReverseModulo(ulong value);
    public Int32DataFrameColumn Add(ushort value);
    public Int32DataFrameColumn ReverseAdd(ushort value);
    public Int32DataFrameColumn Subtract(ushort value);
    public Int32DataFrameColumn ReverseSubtract(ushort value);
    public Int32DataFrameColumn Multiply(ushort value);
    public Int32DataFrameColumn ReverseMultiply(ushort value);
    public Int32DataFrameColumn Divide(ushort value);
    public Int32DataFrameColumn ReverseDivide(ushort value);
    public Int32DataFrameColumn Modulo(ushort value);
    public Int32DataFrameColumn ReverseModulo(ushort value);
    public BooleanDataFrameColumn ElementwiseEquals(ByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(ByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(ByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(ByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(ByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(ByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(DecimalDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(DecimalDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(DecimalDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(DecimalDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(DecimalDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(DecimalDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(DoubleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(DoubleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(DoubleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(DoubleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(DoubleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(DoubleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(SingleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(SingleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(SingleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(SingleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(SingleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(SingleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(Int32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(Int32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(Int32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(Int32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(Int32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(Int32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(Int64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(Int64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(Int64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(Int64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(Int64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(Int64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(SByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(SByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(SByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(SByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(SByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(SByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(Int16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(Int16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(Int16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(Int16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(Int16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(Int16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(UInt32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(UInt32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(UInt32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(UInt32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(UInt32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(UInt32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(UInt64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(UInt64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(UInt64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(UInt64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(UInt64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(UInt64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(UInt16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(UInt16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(UInt16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(UInt16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(UInt16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(UInt16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(byte value);
    public BooleanDataFrameColumn ElementwiseNotEquals(byte value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(byte value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(byte value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(byte value);
    public BooleanDataFrameColumn ElementwiseLessThan(byte value);
    public BooleanDataFrameColumn ElementwiseEquals(decimal value);
    public BooleanDataFrameColumn ElementwiseNotEquals(decimal value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(decimal value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(decimal value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(decimal value);
    public BooleanDataFrameColumn ElementwiseLessThan(decimal value);
    public BooleanDataFrameColumn ElementwiseEquals(double value);
    public BooleanDataFrameColumn ElementwiseNotEquals(double value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(double value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(double value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(double value);
    public BooleanDataFrameColumn ElementwiseLessThan(double value);
    public BooleanDataFrameColumn ElementwiseEquals(float value);
    public BooleanDataFrameColumn ElementwiseNotEquals(float value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(float value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(float value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(float value);
    public BooleanDataFrameColumn ElementwiseLessThan(float value);
    public BooleanDataFrameColumn ElementwiseEquals(int value);
    public BooleanDataFrameColumn ElementwiseNotEquals(int value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(int value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(int value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(int value);
    public BooleanDataFrameColumn ElementwiseLessThan(int value);
    public BooleanDataFrameColumn ElementwiseEquals(long value);
    public BooleanDataFrameColumn ElementwiseNotEquals(long value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(long value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(long value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(long value);
    public BooleanDataFrameColumn ElementwiseLessThan(long value);
    public BooleanDataFrameColumn ElementwiseEquals(sbyte value);
    public BooleanDataFrameColumn ElementwiseNotEquals(sbyte value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(sbyte value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(sbyte value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(sbyte value);
    public BooleanDataFrameColumn ElementwiseLessThan(sbyte value);
    public BooleanDataFrameColumn ElementwiseEquals(short value);
    public BooleanDataFrameColumn ElementwiseNotEquals(short value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(short value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(short value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(short value);
    public BooleanDataFrameColumn ElementwiseLessThan(short value);
    public BooleanDataFrameColumn ElementwiseEquals(UInt32 value);
    public BooleanDataFrameColumn ElementwiseNotEquals(UInt32 value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(UInt32 value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(UInt32 value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(UInt32 value);
    public BooleanDataFrameColumn ElementwiseLessThan(UInt32 value);
    public BooleanDataFrameColumn ElementwiseEquals(ulong value);
    public BooleanDataFrameColumn ElementwiseNotEquals(ulong value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(ulong value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(ulong value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(ulong value);
    public BooleanDataFrameColumn ElementwiseLessThan(ulong value);
    public BooleanDataFrameColumn ElementwiseEquals(ushort value);
    public BooleanDataFrameColumn ElementwiseNotEquals(ushort value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(ushort value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(ushort value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(ushort value);
    public BooleanDataFrameColumn ElementwiseLessThan(ushort value);
    public Int32DataFrameColumn LeftShift(int value, bool inPlace);
    public Int32DataFrameColumn RightShift(int value, bool inPlace);
    internal BooleanDataFrameColumn ElementwiseEqualsImplementation(SByteDataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseEqualsImplementation(sbyte value);
    internal BooleanDataFrameColumn ElementwiseNotEqualsImplementation(SByteDataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseNotEqualsImplementation(sbyte value);
    internal BooleanDataFrameColumn ElementwiseGreaterThanOrEqualImplementation(SByteDataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseGreaterThanOrEqualImplementation(sbyte value);
    internal BooleanDataFrameColumn ElementwiseLessThanOrEqualImplementation(SByteDataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseLessThanOrEqualImplementation(sbyte value);
    internal BooleanDataFrameColumn ElementwiseGreaterThanImplementation(SByteDataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseGreaterThanImplementation(sbyte value);
    internal BooleanDataFrameColumn ElementwiseLessThanImplementation(SByteDataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseLessThanImplementation(sbyte value);
    public static Int32DataFrameColumn op_Addition(SByteDataFrameColumn left, ByteDataFrameColumn right);
    public static DecimalDataFrameColumn op_Addition(SByteDataFrameColumn left, DecimalDataFrameColumn right);
    public static DoubleDataFrameColumn op_Addition(SByteDataFrameColumn left, DoubleDataFrameColumn right);
    public static SingleDataFrameColumn op_Addition(SByteDataFrameColumn left, SingleDataFrameColumn right);
    public static Int32DataFrameColumn op_Addition(SByteDataFrameColumn left, Int32DataFrameColumn right);
    public static Int64DataFrameColumn op_Addition(SByteDataFrameColumn left, Int64DataFrameColumn right);
    public static Int32DataFrameColumn op_Addition(SByteDataFrameColumn left, SByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Addition(SByteDataFrameColumn left, Int16DataFrameColumn right);
    public static Int64DataFrameColumn op_Addition(SByteDataFrameColumn left, UInt32DataFrameColumn right);
    public static SingleDataFrameColumn op_Addition(SByteDataFrameColumn left, UInt64DataFrameColumn right);
    public static Int32DataFrameColumn op_Addition(SByteDataFrameColumn left, UInt16DataFrameColumn right);
    public static Int32DataFrameColumn op_Addition(SByteDataFrameColumn left, byte right);
    public static Int32DataFrameColumn op_Addition(byte left, SByteDataFrameColumn right);
    public static DecimalDataFrameColumn op_Addition(SByteDataFrameColumn left, decimal right);
    public static DecimalDataFrameColumn op_Addition(decimal left, SByteDataFrameColumn right);
    public static DoubleDataFrameColumn op_Addition(SByteDataFrameColumn left, double right);
    public static DoubleDataFrameColumn op_Addition(double left, SByteDataFrameColumn right);
    public static SingleDataFrameColumn op_Addition(SByteDataFrameColumn left, float right);
    public static SingleDataFrameColumn op_Addition(float left, SByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Addition(SByteDataFrameColumn left, int right);
    public static Int32DataFrameColumn op_Addition(int left, SByteDataFrameColumn right);
    public static Int64DataFrameColumn op_Addition(SByteDataFrameColumn left, long right);
    public static Int64DataFrameColumn op_Addition(long left, SByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Addition(SByteDataFrameColumn left, sbyte right);
    public static Int32DataFrameColumn op_Addition(sbyte left, SByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Addition(SByteDataFrameColumn left, short right);
    public static Int32DataFrameColumn op_Addition(short left, SByteDataFrameColumn right);
    public static Int64DataFrameColumn op_Addition(SByteDataFrameColumn left, UInt32 right);
    public static Int64DataFrameColumn op_Addition(UInt32 left, SByteDataFrameColumn right);
    public static SingleDataFrameColumn op_Addition(SByteDataFrameColumn left, ulong right);
    public static SingleDataFrameColumn op_Addition(ulong left, SByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Addition(SByteDataFrameColumn left, ushort right);
    public static Int32DataFrameColumn op_Addition(ushort left, SByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Subtraction(SByteDataFrameColumn left, ByteDataFrameColumn right);
    public static DecimalDataFrameColumn op_Subtraction(SByteDataFrameColumn left, DecimalDataFrameColumn right);
    public static DoubleDataFrameColumn op_Subtraction(SByteDataFrameColumn left, DoubleDataFrameColumn right);
    public static SingleDataFrameColumn op_Subtraction(SByteDataFrameColumn left, SingleDataFrameColumn right);
    public static Int32DataFrameColumn op_Subtraction(SByteDataFrameColumn left, Int32DataFrameColumn right);
    public static Int64DataFrameColumn op_Subtraction(SByteDataFrameColumn left, Int64DataFrameColumn right);
    public static Int32DataFrameColumn op_Subtraction(SByteDataFrameColumn left, SByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Subtraction(SByteDataFrameColumn left, Int16DataFrameColumn right);
    public static Int64DataFrameColumn op_Subtraction(SByteDataFrameColumn left, UInt32DataFrameColumn right);
    public static SingleDataFrameColumn op_Subtraction(SByteDataFrameColumn left, UInt64DataFrameColumn right);
    public static Int32DataFrameColumn op_Subtraction(SByteDataFrameColumn left, UInt16DataFrameColumn right);
    public static Int32DataFrameColumn op_Subtraction(SByteDataFrameColumn left, byte right);
    public static Int32DataFrameColumn op_Subtraction(byte left, SByteDataFrameColumn right);
    public static DecimalDataFrameColumn op_Subtraction(SByteDataFrameColumn left, decimal right);
    public static DecimalDataFrameColumn op_Subtraction(decimal left, SByteDataFrameColumn right);
    public static DoubleDataFrameColumn op_Subtraction(SByteDataFrameColumn left, double right);
    public static DoubleDataFrameColumn op_Subtraction(double left, SByteDataFrameColumn right);
    public static SingleDataFrameColumn op_Subtraction(SByteDataFrameColumn left, float right);
    public static SingleDataFrameColumn op_Subtraction(float left, SByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Subtraction(SByteDataFrameColumn left, int right);
    public static Int32DataFrameColumn op_Subtraction(int left, SByteDataFrameColumn right);
    public static Int64DataFrameColumn op_Subtraction(SByteDataFrameColumn left, long right);
    public static Int64DataFrameColumn op_Subtraction(long left, SByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Subtraction(SByteDataFrameColumn left, sbyte right);
    public static Int32DataFrameColumn op_Subtraction(sbyte left, SByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Subtraction(SByteDataFrameColumn left, short right);
    public static Int32DataFrameColumn op_Subtraction(short left, SByteDataFrameColumn right);
    public static Int64DataFrameColumn op_Subtraction(SByteDataFrameColumn left, UInt32 right);
    public static Int64DataFrameColumn op_Subtraction(UInt32 left, SByteDataFrameColumn right);
    public static SingleDataFrameColumn op_Subtraction(SByteDataFrameColumn left, ulong right);
    public static SingleDataFrameColumn op_Subtraction(ulong left, SByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Subtraction(SByteDataFrameColumn left, ushort right);
    public static Int32DataFrameColumn op_Subtraction(ushort left, SByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Multiply(SByteDataFrameColumn left, ByteDataFrameColumn right);
    public static DecimalDataFrameColumn op_Multiply(SByteDataFrameColumn left, DecimalDataFrameColumn right);
    public static DoubleDataFrameColumn op_Multiply(SByteDataFrameColumn left, DoubleDataFrameColumn right);
    public static SingleDataFrameColumn op_Multiply(SByteDataFrameColumn left, SingleDataFrameColumn right);
    public static Int32DataFrameColumn op_Multiply(SByteDataFrameColumn left, Int32DataFrameColumn right);
    public static Int64DataFrameColumn op_Multiply(SByteDataFrameColumn left, Int64DataFrameColumn right);
    public static Int32DataFrameColumn op_Multiply(SByteDataFrameColumn left, SByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Multiply(SByteDataFrameColumn left, Int16DataFrameColumn right);
    public static Int64DataFrameColumn op_Multiply(SByteDataFrameColumn left, UInt32DataFrameColumn right);
    public static SingleDataFrameColumn op_Multiply(SByteDataFrameColumn left, UInt64DataFrameColumn right);
    public static Int32DataFrameColumn op_Multiply(SByteDataFrameColumn left, UInt16DataFrameColumn right);
    public static Int32DataFrameColumn op_Multiply(SByteDataFrameColumn left, byte right);
    public static Int32DataFrameColumn op_Multiply(byte left, SByteDataFrameColumn right);
    public static DecimalDataFrameColumn op_Multiply(SByteDataFrameColumn left, decimal right);
    public static DecimalDataFrameColumn op_Multiply(decimal left, SByteDataFrameColumn right);
    public static DoubleDataFrameColumn op_Multiply(SByteDataFrameColumn left, double right);
    public static DoubleDataFrameColumn op_Multiply(double left, SByteDataFrameColumn right);
    public static SingleDataFrameColumn op_Multiply(SByteDataFrameColumn left, float right);
    public static SingleDataFrameColumn op_Multiply(float left, SByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Multiply(SByteDataFrameColumn left, int right);
    public static Int32DataFrameColumn op_Multiply(int left, SByteDataFrameColumn right);
    public static Int64DataFrameColumn op_Multiply(SByteDataFrameColumn left, long right);
    public static Int64DataFrameColumn op_Multiply(long left, SByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Multiply(SByteDataFrameColumn left, sbyte right);
    public static Int32DataFrameColumn op_Multiply(sbyte left, SByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Multiply(SByteDataFrameColumn left, short right);
    public static Int32DataFrameColumn op_Multiply(short left, SByteDataFrameColumn right);
    public static Int64DataFrameColumn op_Multiply(SByteDataFrameColumn left, UInt32 right);
    public static Int64DataFrameColumn op_Multiply(UInt32 left, SByteDataFrameColumn right);
    public static SingleDataFrameColumn op_Multiply(SByteDataFrameColumn left, ulong right);
    public static SingleDataFrameColumn op_Multiply(ulong left, SByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Multiply(SByteDataFrameColumn left, ushort right);
    public static Int32DataFrameColumn op_Multiply(ushort left, SByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Division(SByteDataFrameColumn left, ByteDataFrameColumn right);
    public static DecimalDataFrameColumn op_Division(SByteDataFrameColumn left, DecimalDataFrameColumn right);
    public static DoubleDataFrameColumn op_Division(SByteDataFrameColumn left, DoubleDataFrameColumn right);
    public static SingleDataFrameColumn op_Division(SByteDataFrameColumn left, SingleDataFrameColumn right);
    public static Int32DataFrameColumn op_Division(SByteDataFrameColumn left, Int32DataFrameColumn right);
    public static Int64DataFrameColumn op_Division(SByteDataFrameColumn left, Int64DataFrameColumn right);
    public static Int32DataFrameColumn op_Division(SByteDataFrameColumn left, SByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Division(SByteDataFrameColumn left, Int16DataFrameColumn right);
    public static Int64DataFrameColumn op_Division(SByteDataFrameColumn left, UInt32DataFrameColumn right);
    public static SingleDataFrameColumn op_Division(SByteDataFrameColumn left, UInt64DataFrameColumn right);
    public static Int32DataFrameColumn op_Division(SByteDataFrameColumn left, UInt16DataFrameColumn right);
    public static Int32DataFrameColumn op_Division(SByteDataFrameColumn left, byte right);
    public static Int32DataFrameColumn op_Division(byte left, SByteDataFrameColumn right);
    public static DecimalDataFrameColumn op_Division(SByteDataFrameColumn left, decimal right);
    public static DecimalDataFrameColumn op_Division(decimal left, SByteDataFrameColumn right);
    public static DoubleDataFrameColumn op_Division(SByteDataFrameColumn left, double right);
    public static DoubleDataFrameColumn op_Division(double left, SByteDataFrameColumn right);
    public static SingleDataFrameColumn op_Division(SByteDataFrameColumn left, float right);
    public static SingleDataFrameColumn op_Division(float left, SByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Division(SByteDataFrameColumn left, int right);
    public static Int32DataFrameColumn op_Division(int left, SByteDataFrameColumn right);
    public static Int64DataFrameColumn op_Division(SByteDataFrameColumn left, long right);
    public static Int64DataFrameColumn op_Division(long left, SByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Division(SByteDataFrameColumn left, sbyte right);
    public static Int32DataFrameColumn op_Division(sbyte left, SByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Division(SByteDataFrameColumn left, short right);
    public static Int32DataFrameColumn op_Division(short left, SByteDataFrameColumn right);
    public static Int64DataFrameColumn op_Division(SByteDataFrameColumn left, UInt32 right);
    public static Int64DataFrameColumn op_Division(UInt32 left, SByteDataFrameColumn right);
    public static SingleDataFrameColumn op_Division(SByteDataFrameColumn left, ulong right);
    public static SingleDataFrameColumn op_Division(ulong left, SByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Division(SByteDataFrameColumn left, ushort right);
    public static Int32DataFrameColumn op_Division(ushort left, SByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Modulus(SByteDataFrameColumn left, ByteDataFrameColumn right);
    public static DecimalDataFrameColumn op_Modulus(SByteDataFrameColumn left, DecimalDataFrameColumn right);
    public static DoubleDataFrameColumn op_Modulus(SByteDataFrameColumn left, DoubleDataFrameColumn right);
    public static SingleDataFrameColumn op_Modulus(SByteDataFrameColumn left, SingleDataFrameColumn right);
    public static Int32DataFrameColumn op_Modulus(SByteDataFrameColumn left, Int32DataFrameColumn right);
    public static Int64DataFrameColumn op_Modulus(SByteDataFrameColumn left, Int64DataFrameColumn right);
    public static Int32DataFrameColumn op_Modulus(SByteDataFrameColumn left, SByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Modulus(SByteDataFrameColumn left, Int16DataFrameColumn right);
    public static Int64DataFrameColumn op_Modulus(SByteDataFrameColumn left, UInt32DataFrameColumn right);
    public static SingleDataFrameColumn op_Modulus(SByteDataFrameColumn left, UInt64DataFrameColumn right);
    public static Int32DataFrameColumn op_Modulus(SByteDataFrameColumn left, UInt16DataFrameColumn right);
    public static Int32DataFrameColumn op_Modulus(SByteDataFrameColumn left, byte right);
    public static Int32DataFrameColumn op_Modulus(byte left, SByteDataFrameColumn right);
    public static DecimalDataFrameColumn op_Modulus(SByteDataFrameColumn left, decimal right);
    public static DecimalDataFrameColumn op_Modulus(decimal left, SByteDataFrameColumn right);
    public static DoubleDataFrameColumn op_Modulus(SByteDataFrameColumn left, double right);
    public static DoubleDataFrameColumn op_Modulus(double left, SByteDataFrameColumn right);
    public static SingleDataFrameColumn op_Modulus(SByteDataFrameColumn left, float right);
    public static SingleDataFrameColumn op_Modulus(float left, SByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Modulus(SByteDataFrameColumn left, int right);
    public static Int32DataFrameColumn op_Modulus(int left, SByteDataFrameColumn right);
    public static Int64DataFrameColumn op_Modulus(SByteDataFrameColumn left, long right);
    public static Int64DataFrameColumn op_Modulus(long left, SByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Modulus(SByteDataFrameColumn left, sbyte right);
    public static Int32DataFrameColumn op_Modulus(sbyte left, SByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Modulus(SByteDataFrameColumn left, short right);
    public static Int32DataFrameColumn op_Modulus(short left, SByteDataFrameColumn right);
    public static Int64DataFrameColumn op_Modulus(SByteDataFrameColumn left, UInt32 right);
    public static Int64DataFrameColumn op_Modulus(UInt32 left, SByteDataFrameColumn right);
    public static SingleDataFrameColumn op_Modulus(SByteDataFrameColumn left, ulong right);
    public static SingleDataFrameColumn op_Modulus(ulong left, SByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Modulus(SByteDataFrameColumn left, ushort right);
    public static Int32DataFrameColumn op_Modulus(ushort left, SByteDataFrameColumn right);
    public static Int32DataFrameColumn op_LeftShift(SByteDataFrameColumn left, int value);
    public static Int32DataFrameColumn op_RightShift(SByteDataFrameColumn left, int value);
}
internal class Microsoft.Data.Analysis.SByteDecimalConverter : object {
    public sealed virtual decimal GetDecimal(sbyte value);
}
internal class Microsoft.Data.Analysis.SByteDoubleConverter : object {
    public sealed virtual double GetDouble(sbyte value);
}
internal class Microsoft.Data.Analysis.SByteInt16Converter : object {
    public sealed virtual short GetInt16(sbyte value);
}
internal class Microsoft.Data.Analysis.SByteInt32Converter : object {
    public sealed virtual int GetInt32(sbyte value);
}
internal class Microsoft.Data.Analysis.SByteInt64Converter : object {
    public sealed virtual long GetInt64(sbyte value);
}
internal class Microsoft.Data.Analysis.SByteSByteConverter : object {
    public sealed virtual sbyte GetSByte(sbyte value);
}
internal class Microsoft.Data.Analysis.SByteSingleConverter : object {
    public sealed virtual float GetSingle(sbyte value);
}
internal class Microsoft.Data.Analysis.SByteUInt16Converter : object {
    public sealed virtual ushort GetUInt16(sbyte value);
}
internal class Microsoft.Data.Analysis.SByteUInt32Converter : object {
    public sealed virtual UInt32 GetUInt32(sbyte value);
}
internal class Microsoft.Data.Analysis.SByteUInt64Converter : object {
    public sealed virtual ulong GetUInt64(sbyte value);
}
internal class Microsoft.Data.Analysis.ShortArithmetic : object {
    public sealed virtual void Add(PrimitiveColumnContainer`1<short> left, PrimitiveColumnContainer`1<short> right);
    public sealed virtual void Add(PrimitiveColumnContainer`1<short> column, short scalar);
    public sealed virtual void Add(short scalar, PrimitiveColumnContainer`1<short> column);
    public sealed virtual void Subtract(PrimitiveColumnContainer`1<short> left, PrimitiveColumnContainer`1<short> right);
    public sealed virtual void Subtract(PrimitiveColumnContainer`1<short> column, short scalar);
    public sealed virtual void Subtract(short scalar, PrimitiveColumnContainer`1<short> column);
    public sealed virtual void Multiply(PrimitiveColumnContainer`1<short> left, PrimitiveColumnContainer`1<short> right);
    public sealed virtual void Multiply(PrimitiveColumnContainer`1<short> column, short scalar);
    public sealed virtual void Multiply(short scalar, PrimitiveColumnContainer`1<short> column);
    public sealed virtual void Divide(PrimitiveColumnContainer`1<short> left, PrimitiveColumnContainer`1<short> right);
    public sealed virtual void Divide(PrimitiveColumnContainer`1<short> column, short scalar);
    public sealed virtual void Divide(short scalar, PrimitiveColumnContainer`1<short> column);
    public sealed virtual void Modulo(PrimitiveColumnContainer`1<short> left, PrimitiveColumnContainer`1<short> right);
    public sealed virtual void Modulo(PrimitiveColumnContainer`1<short> column, short scalar);
    public sealed virtual void Modulo(short scalar, PrimitiveColumnContainer`1<short> column);
    public sealed virtual void And(PrimitiveColumnContainer`1<short> left, PrimitiveColumnContainer`1<short> right);
    public sealed virtual void And(PrimitiveColumnContainer`1<short> column, short scalar);
    public sealed virtual void And(short scalar, PrimitiveColumnContainer`1<short> column);
    public sealed virtual void Or(PrimitiveColumnContainer`1<short> left, PrimitiveColumnContainer`1<short> right);
    public sealed virtual void Or(PrimitiveColumnContainer`1<short> column, short scalar);
    public sealed virtual void Or(short scalar, PrimitiveColumnContainer`1<short> column);
    public sealed virtual void Xor(PrimitiveColumnContainer`1<short> left, PrimitiveColumnContainer`1<short> right);
    public sealed virtual void Xor(PrimitiveColumnContainer`1<short> column, short scalar);
    public sealed virtual void Xor(short scalar, PrimitiveColumnContainer`1<short> column);
    public sealed virtual void LeftShift(PrimitiveColumnContainer`1<short> column, int value);
    public sealed virtual void RightShift(PrimitiveColumnContainer`1<short> column, int value);
    public sealed virtual void ElementwiseEquals(PrimitiveColumnContainer`1<short> left, PrimitiveColumnContainer`1<short> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseEquals(PrimitiveColumnContainer`1<short> column, short scalar, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseNotEquals(PrimitiveColumnContainer`1<short> left, PrimitiveColumnContainer`1<short> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseNotEquals(PrimitiveColumnContainer`1<short> column, short scalar, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseGreaterThanOrEqual(PrimitiveColumnContainer`1<short> left, PrimitiveColumnContainer`1<short> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseGreaterThanOrEqual(PrimitiveColumnContainer`1<short> column, short scalar, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseLessThanOrEqual(PrimitiveColumnContainer`1<short> left, PrimitiveColumnContainer`1<short> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseLessThanOrEqual(PrimitiveColumnContainer`1<short> column, short scalar, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseGreaterThan(PrimitiveColumnContainer`1<short> left, PrimitiveColumnContainer`1<short> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseGreaterThan(PrimitiveColumnContainer`1<short> column, short scalar, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseLessThan(PrimitiveColumnContainer`1<short> left, PrimitiveColumnContainer`1<short> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseLessThan(PrimitiveColumnContainer`1<short> column, short scalar, PrimitiveColumnContainer`1<bool> ret);
}
internal class Microsoft.Data.Analysis.ShortComputation : object {
    public sealed virtual void Abs(PrimitiveColumnContainer`1<short> column);
    public sealed virtual void All(PrimitiveColumnContainer`1<short> column, Boolean& ret);
    public sealed virtual void Any(PrimitiveColumnContainer`1<short> column, Boolean& ret);
    public sealed virtual void CumulativeMax(PrimitiveColumnContainer`1<short> column);
    public sealed virtual void CumulativeMax(PrimitiveColumnContainer`1<short> column, IEnumerable`1<long> rows);
    public sealed virtual void CumulativeMin(PrimitiveColumnContainer`1<short> column);
    public sealed virtual void CumulativeMin(PrimitiveColumnContainer`1<short> column, IEnumerable`1<long> rows);
    public sealed virtual void CumulativeProduct(PrimitiveColumnContainer`1<short> column);
    public sealed virtual void CumulativeProduct(PrimitiveColumnContainer`1<short> column, IEnumerable`1<long> rows);
    public sealed virtual void CumulativeSum(PrimitiveColumnContainer`1<short> column);
    public sealed virtual void CumulativeSum(PrimitiveColumnContainer`1<short> column, IEnumerable`1<long> rows);
    public sealed virtual void Max(PrimitiveColumnContainer`1<short> column, Int16& ret);
    public sealed virtual void Max(PrimitiveColumnContainer`1<short> column, IEnumerable`1<long> rows, Int16& ret);
    public sealed virtual void Min(PrimitiveColumnContainer`1<short> column, Int16& ret);
    public sealed virtual void Min(PrimitiveColumnContainer`1<short> column, IEnumerable`1<long> rows, Int16& ret);
    public sealed virtual void Product(PrimitiveColumnContainer`1<short> column, Int16& ret);
    public sealed virtual void Product(PrimitiveColumnContainer`1<short> column, IEnumerable`1<long> rows, Int16& ret);
    public sealed virtual void Sum(PrimitiveColumnContainer`1<short> column, Int16& ret);
    public sealed virtual void Sum(PrimitiveColumnContainer`1<short> column, IEnumerable`1<long> rows, Int16& ret);
    public sealed virtual void Round(PrimitiveColumnContainer`1<short> column);
}
internal static class Microsoft.Data.Analysis.SingleConverter : object {
    public static ISingleConverter`1<T> GetSingleConverter();
}
internal static class Microsoft.Data.Analysis.SingleConverter`1 : object {
    [CompilerGeneratedAttribute]
private static ISingleConverter`1<T> <Instance>k__BackingField;
    public static ISingleConverter`1<T> Instance { get; }
    private static SingleConverter`1();
    [CompilerGeneratedAttribute]
public static ISingleConverter`1<T> get_Instance();
}
public class Microsoft.Data.Analysis.SingleDataFrameColumn : PrimitiveDataFrameColumn`1<float> {
    public SingleDataFrameColumn(string name, IEnumerable`1<Nullable`1<float>> values);
    public SingleDataFrameColumn(string name, IEnumerable`1<float> values);
    public SingleDataFrameColumn(string name, long length);
    public SingleDataFrameColumn(string name, ReadOnlyMemory`1<byte> buffer, ReadOnlyMemory`1<byte> nullBitMap, int length, int nullCount);
    internal SingleDataFrameColumn(string name, PrimitiveColumnContainer`1<float> values);
    public SingleDataFrameColumn Add(ByteDataFrameColumn column, bool inPlace);
    public SingleDataFrameColumn Subtract(ByteDataFrameColumn column, bool inPlace);
    public SingleDataFrameColumn Multiply(ByteDataFrameColumn column, bool inPlace);
    public SingleDataFrameColumn Divide(ByteDataFrameColumn column, bool inPlace);
    public SingleDataFrameColumn Modulo(ByteDataFrameColumn column, bool inPlace);
    public DoubleDataFrameColumn Add(DoubleDataFrameColumn column);
    public DoubleDataFrameColumn Subtract(DoubleDataFrameColumn column);
    public DoubleDataFrameColumn Multiply(DoubleDataFrameColumn column);
    public DoubleDataFrameColumn Divide(DoubleDataFrameColumn column);
    public DoubleDataFrameColumn Modulo(DoubleDataFrameColumn column);
    public SingleDataFrameColumn Add(SingleDataFrameColumn column, bool inPlace);
    public SingleDataFrameColumn Subtract(SingleDataFrameColumn column, bool inPlace);
    public SingleDataFrameColumn Multiply(SingleDataFrameColumn column, bool inPlace);
    public SingleDataFrameColumn Divide(SingleDataFrameColumn column, bool inPlace);
    public SingleDataFrameColumn Modulo(SingleDataFrameColumn column, bool inPlace);
    public SingleDataFrameColumn Add(Int32DataFrameColumn column, bool inPlace);
    public SingleDataFrameColumn Subtract(Int32DataFrameColumn column, bool inPlace);
    public SingleDataFrameColumn Multiply(Int32DataFrameColumn column, bool inPlace);
    public SingleDataFrameColumn Divide(Int32DataFrameColumn column, bool inPlace);
    public SingleDataFrameColumn Modulo(Int32DataFrameColumn column, bool inPlace);
    public SingleDataFrameColumn Add(Int64DataFrameColumn column, bool inPlace);
    public SingleDataFrameColumn Subtract(Int64DataFrameColumn column, bool inPlace);
    public SingleDataFrameColumn Multiply(Int64DataFrameColumn column, bool inPlace);
    public SingleDataFrameColumn Divide(Int64DataFrameColumn column, bool inPlace);
    public SingleDataFrameColumn Modulo(Int64DataFrameColumn column, bool inPlace);
    public SingleDataFrameColumn Add(SByteDataFrameColumn column, bool inPlace);
    public SingleDataFrameColumn Subtract(SByteDataFrameColumn column, bool inPlace);
    public SingleDataFrameColumn Multiply(SByteDataFrameColumn column, bool inPlace);
    public SingleDataFrameColumn Divide(SByteDataFrameColumn column, bool inPlace);
    public SingleDataFrameColumn Modulo(SByteDataFrameColumn column, bool inPlace);
    public SingleDataFrameColumn Add(Int16DataFrameColumn column, bool inPlace);
    public SingleDataFrameColumn Subtract(Int16DataFrameColumn column, bool inPlace);
    public SingleDataFrameColumn Multiply(Int16DataFrameColumn column, bool inPlace);
    public SingleDataFrameColumn Divide(Int16DataFrameColumn column, bool inPlace);
    public SingleDataFrameColumn Modulo(Int16DataFrameColumn column, bool inPlace);
    public SingleDataFrameColumn Add(UInt32DataFrameColumn column, bool inPlace);
    public SingleDataFrameColumn Subtract(UInt32DataFrameColumn column, bool inPlace);
    public SingleDataFrameColumn Multiply(UInt32DataFrameColumn column, bool inPlace);
    public SingleDataFrameColumn Divide(UInt32DataFrameColumn column, bool inPlace);
    public SingleDataFrameColumn Modulo(UInt32DataFrameColumn column, bool inPlace);
    public SingleDataFrameColumn Add(UInt64DataFrameColumn column, bool inPlace);
    public SingleDataFrameColumn Subtract(UInt64DataFrameColumn column, bool inPlace);
    public SingleDataFrameColumn Multiply(UInt64DataFrameColumn column, bool inPlace);
    public SingleDataFrameColumn Divide(UInt64DataFrameColumn column, bool inPlace);
    public SingleDataFrameColumn Modulo(UInt64DataFrameColumn column, bool inPlace);
    public SingleDataFrameColumn Add(UInt16DataFrameColumn column, bool inPlace);
    public SingleDataFrameColumn Subtract(UInt16DataFrameColumn column, bool inPlace);
    public SingleDataFrameColumn Multiply(UInt16DataFrameColumn column, bool inPlace);
    public SingleDataFrameColumn Divide(UInt16DataFrameColumn column, bool inPlace);
    public SingleDataFrameColumn Modulo(UInt16DataFrameColumn column, bool inPlace);
    public SingleDataFrameColumn Add(byte value, bool inPlace);
    public SingleDataFrameColumn ReverseAdd(byte value, bool inPlace);
    public SingleDataFrameColumn Subtract(byte value, bool inPlace);
    public SingleDataFrameColumn ReverseSubtract(byte value, bool inPlace);
    public SingleDataFrameColumn Multiply(byte value, bool inPlace);
    public SingleDataFrameColumn ReverseMultiply(byte value, bool inPlace);
    public SingleDataFrameColumn Divide(byte value, bool inPlace);
    public SingleDataFrameColumn ReverseDivide(byte value, bool inPlace);
    public SingleDataFrameColumn Modulo(byte value, bool inPlace);
    public SingleDataFrameColumn ReverseModulo(byte value, bool inPlace);
    public DoubleDataFrameColumn Add(double value);
    public DoubleDataFrameColumn ReverseAdd(double value);
    public DoubleDataFrameColumn Subtract(double value);
    public DoubleDataFrameColumn ReverseSubtract(double value);
    public DoubleDataFrameColumn Multiply(double value);
    public DoubleDataFrameColumn ReverseMultiply(double value);
    public DoubleDataFrameColumn Divide(double value);
    public DoubleDataFrameColumn ReverseDivide(double value);
    public DoubleDataFrameColumn Modulo(double value);
    public DoubleDataFrameColumn ReverseModulo(double value);
    public SingleDataFrameColumn Add(float value, bool inPlace);
    public SingleDataFrameColumn ReverseAdd(float value, bool inPlace);
    public SingleDataFrameColumn Subtract(float value, bool inPlace);
    public SingleDataFrameColumn ReverseSubtract(float value, bool inPlace);
    public SingleDataFrameColumn Multiply(float value, bool inPlace);
    public SingleDataFrameColumn ReverseMultiply(float value, bool inPlace);
    public SingleDataFrameColumn Divide(float value, bool inPlace);
    public SingleDataFrameColumn ReverseDivide(float value, bool inPlace);
    public SingleDataFrameColumn Modulo(float value, bool inPlace);
    public SingleDataFrameColumn ReverseModulo(float value, bool inPlace);
    public SingleDataFrameColumn Add(int value, bool inPlace);
    public SingleDataFrameColumn ReverseAdd(int value, bool inPlace);
    public SingleDataFrameColumn Subtract(int value, bool inPlace);
    public SingleDataFrameColumn ReverseSubtract(int value, bool inPlace);
    public SingleDataFrameColumn Multiply(int value, bool inPlace);
    public SingleDataFrameColumn ReverseMultiply(int value, bool inPlace);
    public SingleDataFrameColumn Divide(int value, bool inPlace);
    public SingleDataFrameColumn ReverseDivide(int value, bool inPlace);
    public SingleDataFrameColumn Modulo(int value, bool inPlace);
    public SingleDataFrameColumn ReverseModulo(int value, bool inPlace);
    public SingleDataFrameColumn Add(long value, bool inPlace);
    public SingleDataFrameColumn ReverseAdd(long value, bool inPlace);
    public SingleDataFrameColumn Subtract(long value, bool inPlace);
    public SingleDataFrameColumn ReverseSubtract(long value, bool inPlace);
    public SingleDataFrameColumn Multiply(long value, bool inPlace);
    public SingleDataFrameColumn ReverseMultiply(long value, bool inPlace);
    public SingleDataFrameColumn Divide(long value, bool inPlace);
    public SingleDataFrameColumn ReverseDivide(long value, bool inPlace);
    public SingleDataFrameColumn Modulo(long value, bool inPlace);
    public SingleDataFrameColumn ReverseModulo(long value, bool inPlace);
    public SingleDataFrameColumn Add(sbyte value, bool inPlace);
    public SingleDataFrameColumn ReverseAdd(sbyte value, bool inPlace);
    public SingleDataFrameColumn Subtract(sbyte value, bool inPlace);
    public SingleDataFrameColumn ReverseSubtract(sbyte value, bool inPlace);
    public SingleDataFrameColumn Multiply(sbyte value, bool inPlace);
    public SingleDataFrameColumn ReverseMultiply(sbyte value, bool inPlace);
    public SingleDataFrameColumn Divide(sbyte value, bool inPlace);
    public SingleDataFrameColumn ReverseDivide(sbyte value, bool inPlace);
    public SingleDataFrameColumn Modulo(sbyte value, bool inPlace);
    public SingleDataFrameColumn ReverseModulo(sbyte value, bool inPlace);
    public SingleDataFrameColumn Add(short value, bool inPlace);
    public SingleDataFrameColumn ReverseAdd(short value, bool inPlace);
    public SingleDataFrameColumn Subtract(short value, bool inPlace);
    public SingleDataFrameColumn ReverseSubtract(short value, bool inPlace);
    public SingleDataFrameColumn Multiply(short value, bool inPlace);
    public SingleDataFrameColumn ReverseMultiply(short value, bool inPlace);
    public SingleDataFrameColumn Divide(short value, bool inPlace);
    public SingleDataFrameColumn ReverseDivide(short value, bool inPlace);
    public SingleDataFrameColumn Modulo(short value, bool inPlace);
    public SingleDataFrameColumn ReverseModulo(short value, bool inPlace);
    public SingleDataFrameColumn Add(UInt32 value, bool inPlace);
    public SingleDataFrameColumn ReverseAdd(UInt32 value, bool inPlace);
    public SingleDataFrameColumn Subtract(UInt32 value, bool inPlace);
    public SingleDataFrameColumn ReverseSubtract(UInt32 value, bool inPlace);
    public SingleDataFrameColumn Multiply(UInt32 value, bool inPlace);
    public SingleDataFrameColumn ReverseMultiply(UInt32 value, bool inPlace);
    public SingleDataFrameColumn Divide(UInt32 value, bool inPlace);
    public SingleDataFrameColumn ReverseDivide(UInt32 value, bool inPlace);
    public SingleDataFrameColumn Modulo(UInt32 value, bool inPlace);
    public SingleDataFrameColumn ReverseModulo(UInt32 value, bool inPlace);
    public SingleDataFrameColumn Add(ulong value, bool inPlace);
    public SingleDataFrameColumn ReverseAdd(ulong value, bool inPlace);
    public SingleDataFrameColumn Subtract(ulong value, bool inPlace);
    public SingleDataFrameColumn ReverseSubtract(ulong value, bool inPlace);
    public SingleDataFrameColumn Multiply(ulong value, bool inPlace);
    public SingleDataFrameColumn ReverseMultiply(ulong value, bool inPlace);
    public SingleDataFrameColumn Divide(ulong value, bool inPlace);
    public SingleDataFrameColumn ReverseDivide(ulong value, bool inPlace);
    public SingleDataFrameColumn Modulo(ulong value, bool inPlace);
    public SingleDataFrameColumn ReverseModulo(ulong value, bool inPlace);
    public SingleDataFrameColumn Add(ushort value, bool inPlace);
    public SingleDataFrameColumn ReverseAdd(ushort value, bool inPlace);
    public SingleDataFrameColumn Subtract(ushort value, bool inPlace);
    public SingleDataFrameColumn ReverseSubtract(ushort value, bool inPlace);
    public SingleDataFrameColumn Multiply(ushort value, bool inPlace);
    public SingleDataFrameColumn ReverseMultiply(ushort value, bool inPlace);
    public SingleDataFrameColumn Divide(ushort value, bool inPlace);
    public SingleDataFrameColumn ReverseDivide(ushort value, bool inPlace);
    public SingleDataFrameColumn Modulo(ushort value, bool inPlace);
    public SingleDataFrameColumn ReverseModulo(ushort value, bool inPlace);
    public BooleanDataFrameColumn ElementwiseEquals(ByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(ByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(ByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(ByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(ByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(ByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(DoubleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(DoubleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(DoubleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(DoubleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(DoubleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(DoubleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(SingleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(SingleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(SingleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(SingleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(SingleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(SingleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(Int32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(Int32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(Int32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(Int32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(Int32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(Int32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(Int64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(Int64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(Int64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(Int64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(Int64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(Int64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(SByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(SByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(SByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(SByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(SByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(SByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(Int16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(Int16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(Int16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(Int16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(Int16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(Int16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(UInt32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(UInt32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(UInt32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(UInt32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(UInt32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(UInt32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(UInt64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(UInt64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(UInt64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(UInt64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(UInt64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(UInt64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(UInt16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(UInt16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(UInt16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(UInt16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(UInt16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(UInt16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(byte value);
    public BooleanDataFrameColumn ElementwiseNotEquals(byte value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(byte value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(byte value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(byte value);
    public BooleanDataFrameColumn ElementwiseLessThan(byte value);
    public BooleanDataFrameColumn ElementwiseEquals(double value);
    public BooleanDataFrameColumn ElementwiseNotEquals(double value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(double value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(double value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(double value);
    public BooleanDataFrameColumn ElementwiseLessThan(double value);
    public BooleanDataFrameColumn ElementwiseEquals(float value);
    public BooleanDataFrameColumn ElementwiseNotEquals(float value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(float value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(float value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(float value);
    public BooleanDataFrameColumn ElementwiseLessThan(float value);
    public BooleanDataFrameColumn ElementwiseEquals(int value);
    public BooleanDataFrameColumn ElementwiseNotEquals(int value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(int value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(int value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(int value);
    public BooleanDataFrameColumn ElementwiseLessThan(int value);
    public BooleanDataFrameColumn ElementwiseEquals(long value);
    public BooleanDataFrameColumn ElementwiseNotEquals(long value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(long value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(long value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(long value);
    public BooleanDataFrameColumn ElementwiseLessThan(long value);
    public BooleanDataFrameColumn ElementwiseEquals(sbyte value);
    public BooleanDataFrameColumn ElementwiseNotEquals(sbyte value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(sbyte value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(sbyte value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(sbyte value);
    public BooleanDataFrameColumn ElementwiseLessThan(sbyte value);
    public BooleanDataFrameColumn ElementwiseEquals(short value);
    public BooleanDataFrameColumn ElementwiseNotEquals(short value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(short value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(short value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(short value);
    public BooleanDataFrameColumn ElementwiseLessThan(short value);
    public BooleanDataFrameColumn ElementwiseEquals(UInt32 value);
    public BooleanDataFrameColumn ElementwiseNotEquals(UInt32 value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(UInt32 value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(UInt32 value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(UInt32 value);
    public BooleanDataFrameColumn ElementwiseLessThan(UInt32 value);
    public BooleanDataFrameColumn ElementwiseEquals(ulong value);
    public BooleanDataFrameColumn ElementwiseNotEquals(ulong value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(ulong value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(ulong value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(ulong value);
    public BooleanDataFrameColumn ElementwiseLessThan(ulong value);
    public BooleanDataFrameColumn ElementwiseEquals(ushort value);
    public BooleanDataFrameColumn ElementwiseNotEquals(ushort value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(ushort value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(ushort value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(ushort value);
    public BooleanDataFrameColumn ElementwiseLessThan(ushort value);
    internal SingleDataFrameColumn AddImplementation(SingleDataFrameColumn column, bool inPlace);
    internal SingleDataFrameColumn AddImplementation(float value, bool inPlace);
    internal SingleDataFrameColumn ReverseAddImplementation(float value, bool inPlace);
    internal SingleDataFrameColumn SubtractImplementation(SingleDataFrameColumn column, bool inPlace);
    internal SingleDataFrameColumn SubtractImplementation(float value, bool inPlace);
    internal SingleDataFrameColumn ReverseSubtractImplementation(float value, bool inPlace);
    internal SingleDataFrameColumn MultiplyImplementation(SingleDataFrameColumn column, bool inPlace);
    internal SingleDataFrameColumn MultiplyImplementation(float value, bool inPlace);
    internal SingleDataFrameColumn ReverseMultiplyImplementation(float value, bool inPlace);
    internal SingleDataFrameColumn DivideImplementation(SingleDataFrameColumn column, bool inPlace);
    internal SingleDataFrameColumn DivideImplementation(float value, bool inPlace);
    internal SingleDataFrameColumn ReverseDivideImplementation(float value, bool inPlace);
    internal SingleDataFrameColumn ModuloImplementation(SingleDataFrameColumn column, bool inPlace);
    internal SingleDataFrameColumn ModuloImplementation(float value, bool inPlace);
    internal SingleDataFrameColumn ReverseModuloImplementation(float value, bool inPlace);
    internal BooleanDataFrameColumn ElementwiseEqualsImplementation(SingleDataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseEqualsImplementation(float value);
    internal BooleanDataFrameColumn ElementwiseNotEqualsImplementation(SingleDataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseNotEqualsImplementation(float value);
    internal BooleanDataFrameColumn ElementwiseGreaterThanOrEqualImplementation(SingleDataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseGreaterThanOrEqualImplementation(float value);
    internal BooleanDataFrameColumn ElementwiseLessThanOrEqualImplementation(SingleDataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseLessThanOrEqualImplementation(float value);
    internal BooleanDataFrameColumn ElementwiseGreaterThanImplementation(SingleDataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseGreaterThanImplementation(float value);
    internal BooleanDataFrameColumn ElementwiseLessThanImplementation(SingleDataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseLessThanImplementation(float value);
    public static SingleDataFrameColumn op_Addition(SingleDataFrameColumn left, ByteDataFrameColumn right);
    public static DoubleDataFrameColumn op_Addition(SingleDataFrameColumn left, DoubleDataFrameColumn right);
    public static SingleDataFrameColumn op_Addition(SingleDataFrameColumn left, SingleDataFrameColumn right);
    public static SingleDataFrameColumn op_Addition(SingleDataFrameColumn left, Int32DataFrameColumn right);
    public static SingleDataFrameColumn op_Addition(SingleDataFrameColumn left, Int64DataFrameColumn right);
    public static SingleDataFrameColumn op_Addition(SingleDataFrameColumn left, SByteDataFrameColumn right);
    public static SingleDataFrameColumn op_Addition(SingleDataFrameColumn left, Int16DataFrameColumn right);
    public static SingleDataFrameColumn op_Addition(SingleDataFrameColumn left, UInt32DataFrameColumn right);
    public static SingleDataFrameColumn op_Addition(SingleDataFrameColumn left, UInt64DataFrameColumn right);
    public static SingleDataFrameColumn op_Addition(SingleDataFrameColumn left, UInt16DataFrameColumn right);
    public static SingleDataFrameColumn op_Addition(SingleDataFrameColumn left, byte right);
    public static SingleDataFrameColumn op_Addition(byte left, SingleDataFrameColumn right);
    public static DoubleDataFrameColumn op_Addition(SingleDataFrameColumn left, double right);
    public static DoubleDataFrameColumn op_Addition(double left, SingleDataFrameColumn right);
    public static SingleDataFrameColumn op_Addition(SingleDataFrameColumn left, float right);
    public static SingleDataFrameColumn op_Addition(float left, SingleDataFrameColumn right);
    public static SingleDataFrameColumn op_Addition(SingleDataFrameColumn left, int right);
    public static SingleDataFrameColumn op_Addition(int left, SingleDataFrameColumn right);
    public static SingleDataFrameColumn op_Addition(SingleDataFrameColumn left, long right);
    public static SingleDataFrameColumn op_Addition(long left, SingleDataFrameColumn right);
    public static SingleDataFrameColumn op_Addition(SingleDataFrameColumn left, sbyte right);
    public static SingleDataFrameColumn op_Addition(sbyte left, SingleDataFrameColumn right);
    public static SingleDataFrameColumn op_Addition(SingleDataFrameColumn left, short right);
    public static SingleDataFrameColumn op_Addition(short left, SingleDataFrameColumn right);
    public static SingleDataFrameColumn op_Addition(SingleDataFrameColumn left, UInt32 right);
    public static SingleDataFrameColumn op_Addition(UInt32 left, SingleDataFrameColumn right);
    public static SingleDataFrameColumn op_Addition(SingleDataFrameColumn left, ulong right);
    public static SingleDataFrameColumn op_Addition(ulong left, SingleDataFrameColumn right);
    public static SingleDataFrameColumn op_Addition(SingleDataFrameColumn left, ushort right);
    public static SingleDataFrameColumn op_Addition(ushort left, SingleDataFrameColumn right);
    public static SingleDataFrameColumn op_Subtraction(SingleDataFrameColumn left, ByteDataFrameColumn right);
    public static DoubleDataFrameColumn op_Subtraction(SingleDataFrameColumn left, DoubleDataFrameColumn right);
    public static SingleDataFrameColumn op_Subtraction(SingleDataFrameColumn left, SingleDataFrameColumn right);
    public static SingleDataFrameColumn op_Subtraction(SingleDataFrameColumn left, Int32DataFrameColumn right);
    public static SingleDataFrameColumn op_Subtraction(SingleDataFrameColumn left, Int64DataFrameColumn right);
    public static SingleDataFrameColumn op_Subtraction(SingleDataFrameColumn left, SByteDataFrameColumn right);
    public static SingleDataFrameColumn op_Subtraction(SingleDataFrameColumn left, Int16DataFrameColumn right);
    public static SingleDataFrameColumn op_Subtraction(SingleDataFrameColumn left, UInt32DataFrameColumn right);
    public static SingleDataFrameColumn op_Subtraction(SingleDataFrameColumn left, UInt64DataFrameColumn right);
    public static SingleDataFrameColumn op_Subtraction(SingleDataFrameColumn left, UInt16DataFrameColumn right);
    public static SingleDataFrameColumn op_Subtraction(SingleDataFrameColumn left, byte right);
    public static SingleDataFrameColumn op_Subtraction(byte left, SingleDataFrameColumn right);
    public static DoubleDataFrameColumn op_Subtraction(SingleDataFrameColumn left, double right);
    public static DoubleDataFrameColumn op_Subtraction(double left, SingleDataFrameColumn right);
    public static SingleDataFrameColumn op_Subtraction(SingleDataFrameColumn left, float right);
    public static SingleDataFrameColumn op_Subtraction(float left, SingleDataFrameColumn right);
    public static SingleDataFrameColumn op_Subtraction(SingleDataFrameColumn left, int right);
    public static SingleDataFrameColumn op_Subtraction(int left, SingleDataFrameColumn right);
    public static SingleDataFrameColumn op_Subtraction(SingleDataFrameColumn left, long right);
    public static SingleDataFrameColumn op_Subtraction(long left, SingleDataFrameColumn right);
    public static SingleDataFrameColumn op_Subtraction(SingleDataFrameColumn left, sbyte right);
    public static SingleDataFrameColumn op_Subtraction(sbyte left, SingleDataFrameColumn right);
    public static SingleDataFrameColumn op_Subtraction(SingleDataFrameColumn left, short right);
    public static SingleDataFrameColumn op_Subtraction(short left, SingleDataFrameColumn right);
    public static SingleDataFrameColumn op_Subtraction(SingleDataFrameColumn left, UInt32 right);
    public static SingleDataFrameColumn op_Subtraction(UInt32 left, SingleDataFrameColumn right);
    public static SingleDataFrameColumn op_Subtraction(SingleDataFrameColumn left, ulong right);
    public static SingleDataFrameColumn op_Subtraction(ulong left, SingleDataFrameColumn right);
    public static SingleDataFrameColumn op_Subtraction(SingleDataFrameColumn left, ushort right);
    public static SingleDataFrameColumn op_Subtraction(ushort left, SingleDataFrameColumn right);
    public static SingleDataFrameColumn op_Multiply(SingleDataFrameColumn left, ByteDataFrameColumn right);
    public static DoubleDataFrameColumn op_Multiply(SingleDataFrameColumn left, DoubleDataFrameColumn right);
    public static SingleDataFrameColumn op_Multiply(SingleDataFrameColumn left, SingleDataFrameColumn right);
    public static SingleDataFrameColumn op_Multiply(SingleDataFrameColumn left, Int32DataFrameColumn right);
    public static SingleDataFrameColumn op_Multiply(SingleDataFrameColumn left, Int64DataFrameColumn right);
    public static SingleDataFrameColumn op_Multiply(SingleDataFrameColumn left, SByteDataFrameColumn right);
    public static SingleDataFrameColumn op_Multiply(SingleDataFrameColumn left, Int16DataFrameColumn right);
    public static SingleDataFrameColumn op_Multiply(SingleDataFrameColumn left, UInt32DataFrameColumn right);
    public static SingleDataFrameColumn op_Multiply(SingleDataFrameColumn left, UInt64DataFrameColumn right);
    public static SingleDataFrameColumn op_Multiply(SingleDataFrameColumn left, UInt16DataFrameColumn right);
    public static SingleDataFrameColumn op_Multiply(SingleDataFrameColumn left, byte right);
    public static SingleDataFrameColumn op_Multiply(byte left, SingleDataFrameColumn right);
    public static DoubleDataFrameColumn op_Multiply(SingleDataFrameColumn left, double right);
    public static DoubleDataFrameColumn op_Multiply(double left, SingleDataFrameColumn right);
    public static SingleDataFrameColumn op_Multiply(SingleDataFrameColumn left, float right);
    public static SingleDataFrameColumn op_Multiply(float left, SingleDataFrameColumn right);
    public static SingleDataFrameColumn op_Multiply(SingleDataFrameColumn left, int right);
    public static SingleDataFrameColumn op_Multiply(int left, SingleDataFrameColumn right);
    public static SingleDataFrameColumn op_Multiply(SingleDataFrameColumn left, long right);
    public static SingleDataFrameColumn op_Multiply(long left, SingleDataFrameColumn right);
    public static SingleDataFrameColumn op_Multiply(SingleDataFrameColumn left, sbyte right);
    public static SingleDataFrameColumn op_Multiply(sbyte left, SingleDataFrameColumn right);
    public static SingleDataFrameColumn op_Multiply(SingleDataFrameColumn left, short right);
    public static SingleDataFrameColumn op_Multiply(short left, SingleDataFrameColumn right);
    public static SingleDataFrameColumn op_Multiply(SingleDataFrameColumn left, UInt32 right);
    public static SingleDataFrameColumn op_Multiply(UInt32 left, SingleDataFrameColumn right);
    public static SingleDataFrameColumn op_Multiply(SingleDataFrameColumn left, ulong right);
    public static SingleDataFrameColumn op_Multiply(ulong left, SingleDataFrameColumn right);
    public static SingleDataFrameColumn op_Multiply(SingleDataFrameColumn left, ushort right);
    public static SingleDataFrameColumn op_Multiply(ushort left, SingleDataFrameColumn right);
    public static SingleDataFrameColumn op_Division(SingleDataFrameColumn left, ByteDataFrameColumn right);
    public static DoubleDataFrameColumn op_Division(SingleDataFrameColumn left, DoubleDataFrameColumn right);
    public static SingleDataFrameColumn op_Division(SingleDataFrameColumn left, SingleDataFrameColumn right);
    public static SingleDataFrameColumn op_Division(SingleDataFrameColumn left, Int32DataFrameColumn right);
    public static SingleDataFrameColumn op_Division(SingleDataFrameColumn left, Int64DataFrameColumn right);
    public static SingleDataFrameColumn op_Division(SingleDataFrameColumn left, SByteDataFrameColumn right);
    public static SingleDataFrameColumn op_Division(SingleDataFrameColumn left, Int16DataFrameColumn right);
    public static SingleDataFrameColumn op_Division(SingleDataFrameColumn left, UInt32DataFrameColumn right);
    public static SingleDataFrameColumn op_Division(SingleDataFrameColumn left, UInt64DataFrameColumn right);
    public static SingleDataFrameColumn op_Division(SingleDataFrameColumn left, UInt16DataFrameColumn right);
    public static SingleDataFrameColumn op_Division(SingleDataFrameColumn left, byte right);
    public static SingleDataFrameColumn op_Division(byte left, SingleDataFrameColumn right);
    public static DoubleDataFrameColumn op_Division(SingleDataFrameColumn left, double right);
    public static DoubleDataFrameColumn op_Division(double left, SingleDataFrameColumn right);
    public static SingleDataFrameColumn op_Division(SingleDataFrameColumn left, float right);
    public static SingleDataFrameColumn op_Division(float left, SingleDataFrameColumn right);
    public static SingleDataFrameColumn op_Division(SingleDataFrameColumn left, int right);
    public static SingleDataFrameColumn op_Division(int left, SingleDataFrameColumn right);
    public static SingleDataFrameColumn op_Division(SingleDataFrameColumn left, long right);
    public static SingleDataFrameColumn op_Division(long left, SingleDataFrameColumn right);
    public static SingleDataFrameColumn op_Division(SingleDataFrameColumn left, sbyte right);
    public static SingleDataFrameColumn op_Division(sbyte left, SingleDataFrameColumn right);
    public static SingleDataFrameColumn op_Division(SingleDataFrameColumn left, short right);
    public static SingleDataFrameColumn op_Division(short left, SingleDataFrameColumn right);
    public static SingleDataFrameColumn op_Division(SingleDataFrameColumn left, UInt32 right);
    public static SingleDataFrameColumn op_Division(UInt32 left, SingleDataFrameColumn right);
    public static SingleDataFrameColumn op_Division(SingleDataFrameColumn left, ulong right);
    public static SingleDataFrameColumn op_Division(ulong left, SingleDataFrameColumn right);
    public static SingleDataFrameColumn op_Division(SingleDataFrameColumn left, ushort right);
    public static SingleDataFrameColumn op_Division(ushort left, SingleDataFrameColumn right);
    public static SingleDataFrameColumn op_Modulus(SingleDataFrameColumn left, ByteDataFrameColumn right);
    public static DoubleDataFrameColumn op_Modulus(SingleDataFrameColumn left, DoubleDataFrameColumn right);
    public static SingleDataFrameColumn op_Modulus(SingleDataFrameColumn left, SingleDataFrameColumn right);
    public static SingleDataFrameColumn op_Modulus(SingleDataFrameColumn left, Int32DataFrameColumn right);
    public static SingleDataFrameColumn op_Modulus(SingleDataFrameColumn left, Int64DataFrameColumn right);
    public static SingleDataFrameColumn op_Modulus(SingleDataFrameColumn left, SByteDataFrameColumn right);
    public static SingleDataFrameColumn op_Modulus(SingleDataFrameColumn left, Int16DataFrameColumn right);
    public static SingleDataFrameColumn op_Modulus(SingleDataFrameColumn left, UInt32DataFrameColumn right);
    public static SingleDataFrameColumn op_Modulus(SingleDataFrameColumn left, UInt64DataFrameColumn right);
    public static SingleDataFrameColumn op_Modulus(SingleDataFrameColumn left, UInt16DataFrameColumn right);
    public static SingleDataFrameColumn op_Modulus(SingleDataFrameColumn left, byte right);
    public static SingleDataFrameColumn op_Modulus(byte left, SingleDataFrameColumn right);
    public static DoubleDataFrameColumn op_Modulus(SingleDataFrameColumn left, double right);
    public static DoubleDataFrameColumn op_Modulus(double left, SingleDataFrameColumn right);
    public static SingleDataFrameColumn op_Modulus(SingleDataFrameColumn left, float right);
    public static SingleDataFrameColumn op_Modulus(float left, SingleDataFrameColumn right);
    public static SingleDataFrameColumn op_Modulus(SingleDataFrameColumn left, int right);
    public static SingleDataFrameColumn op_Modulus(int left, SingleDataFrameColumn right);
    public static SingleDataFrameColumn op_Modulus(SingleDataFrameColumn left, long right);
    public static SingleDataFrameColumn op_Modulus(long left, SingleDataFrameColumn right);
    public static SingleDataFrameColumn op_Modulus(SingleDataFrameColumn left, sbyte right);
    public static SingleDataFrameColumn op_Modulus(sbyte left, SingleDataFrameColumn right);
    public static SingleDataFrameColumn op_Modulus(SingleDataFrameColumn left, short right);
    public static SingleDataFrameColumn op_Modulus(short left, SingleDataFrameColumn right);
    public static SingleDataFrameColumn op_Modulus(SingleDataFrameColumn left, UInt32 right);
    public static SingleDataFrameColumn op_Modulus(UInt32 left, SingleDataFrameColumn right);
    public static SingleDataFrameColumn op_Modulus(SingleDataFrameColumn left, ulong right);
    public static SingleDataFrameColumn op_Modulus(ulong left, SingleDataFrameColumn right);
    public static SingleDataFrameColumn op_Modulus(SingleDataFrameColumn left, ushort right);
    public static SingleDataFrameColumn op_Modulus(ushort left, SingleDataFrameColumn right);
}
internal class Microsoft.Data.Analysis.SingleDecimalConverter : object {
    public sealed virtual decimal GetDecimal(float value);
}
internal class Microsoft.Data.Analysis.SingleDoubleConverter : object {
    public sealed virtual double GetDouble(float value);
}
internal class Microsoft.Data.Analysis.SingleSingleConverter : object {
    public sealed virtual float GetSingle(float value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Data.Analysis.StringDataFrameColumn : DataFrameColumn {
    private List`1<List`1<string>> _stringBuffers;
    private long _nullCount;
    public long NullCount { get; }
    public string Item { get; public set; }
    public List`1<string> Item { get; }
    public StringDataFrameColumn(string name, long length);
    public StringDataFrameColumn(string name, IEnumerable`1<string> values);
    public virtual DataFrameColumn Add(DataFrameColumn column, bool inPlace);
    public static StringDataFrameColumn op_Addition(StringDataFrameColumn column, string value);
    public static StringDataFrameColumn op_Addition(string value, StringDataFrameColumn column);
    public static StringDataFrameColumn Add(string value, StringDataFrameColumn right);
    public StringDataFrameColumn Add(string value, bool inPlace);
    public virtual DataFrameColumn Add(T value, bool inPlace);
    internal static PrimitiveDataFrameColumn`1<bool> ElementwiseEqualsImplementation(DataFrameColumn left, DataFrameColumn right);
    public virtual PrimitiveDataFrameColumn`1<bool> ElementwiseEquals(DataFrameColumn column);
    public PrimitiveDataFrameColumn`1<bool> ElementwiseEquals(string value);
    public virtual PrimitiveDataFrameColumn`1<bool> ElementwiseEquals(T value);
    internal static PrimitiveDataFrameColumn`1<bool> ElementwiseNotEqualsImplementation(DataFrameColumn left, DataFrameColumn column);
    public PrimitiveDataFrameColumn`1<bool> ElementwiseNotEquals(string value);
    public virtual PrimitiveDataFrameColumn`1<bool> ElementwiseNotEquals(DataFrameColumn column);
    public virtual PrimitiveDataFrameColumn`1<bool> ElementwiseNotEquals(T value);
    public virtual long get_NullCount();
    protected internal virtual void Resize(long length);
    public void Append(string value);
    private int GetBufferIndexContainingRowIndex(Int64& rowIndex);
    protected virtual object GetValue(long rowIndex);
    protected virtual IReadOnlyList`1<object> GetValues(long startIndex, int length);
    protected virtual void SetValue(long rowIndex, object value);
    public string get_Item(long rowIndex);
    public void set_Item(long rowIndex, string value);
    public List`1<string> get_Item(long startIndex, int length);
    [IteratorStateMachineAttribute("Microsoft.Data.Analysis.StringDataFrameColumn/<GetEnumerator>d__31")]
public sealed virtual IEnumerator`1<string> GetEnumerator();
    protected virtual IEnumerator GetEnumeratorCore();
    public virtual DataFrameColumn Clamp(U min, U max, bool inPlace);
    public virtual DataFrameColumn Filter(U min, U max);
    public StringDataFrameColumn Sort(bool ascending);
    internal virtual PrimitiveDataFrameColumn`1<long> GetAscendingSortIndices(Int64DataFrameColumn& nullIndices);
    private PrimitiveDataFrameColumn`1<long> GetSortIndices(Comparer`1<string> comparer, Int64DataFrameColumn& columnNullIndices);
    public StringDataFrameColumn Clone(DataFrameColumn mapIndices, bool invertMapIndices, long numberOfNullsToAppend);
    protected virtual DataFrameColumn CloneImplementation(DataFrameColumn mapIndices, bool invertMapIndices, long numberOfNullsToAppend);
    private StringDataFrameColumn Clone(PrimitiveDataFrameColumn`1<bool> boolColumn);
    private StringDataFrameColumn CloneImplementation(PrimitiveDataFrameColumn`1<U> mapIndices, bool invertMapIndices);
    private StringDataFrameColumn Clone(PrimitiveDataFrameColumn`1<long> mapIndices, bool invertMapIndex);
    private StringDataFrameColumn Clone(PrimitiveDataFrameColumn`1<int> mapIndices, bool invertMapIndex);
    internal static DataFrame ValueCountsImplementation(Dictionary`2<string, ICollection`1<long>> groupedValues);
    public virtual DataFrame ValueCounts();
    public virtual GroupBy GroupBy(int columnIndex, DataFrame parent);
    public virtual Dictionary`2<TKey, ICollection`1<long>> GroupColumnValues(HashSet`1& nullIndices);
    public StringDataFrameColumn FillNulls(string value, bool inPlace);
    protected virtual DataFrameColumn FillNullsImplementation(object value, bool inPlace);
    protected internal virtual void AddDataViewColumn(Builder builder);
    protected internal virtual Delegate GetDataViewGetter(DataViewRowCursor cursor);
    private ValueGetter`1<ReadOnlyMemory`1<char>> CreateValueGetterDelegate(DataViewRowCursor cursor);
    protected internal virtual void AddValueUsingCursor(DataViewRowCursor cursor, Delegate getter);
    protected internal virtual Delegate GetValueGetterUsingCursor(DataViewRowCursor cursor, Column schemaColumn);
}
internal class Microsoft.Data.Analysis.TextFieldParser : object {
    private bool _disposed;
    private TextReader _reader;
    private String[] _commentTokens;
    private long _lineNumber;
    private bool _endOfData;
    private string _errorLine;
    private long _errorLineNumber;
    private FieldType _textFieldType;
    private Int32[] _fieldWidths;
    private Int32[] _fieldWidthsCopy;
    private String[] _delimiters;
    private String[] _delimitersCopy;
    private Regex _delimiterRegex;
    private Regex _delimiterWithEndCharsRegex;
    private Int32[] _whitespaceCodes;
    private Regex _beginQuotesRegex;
    private bool _trimWhiteSpace;
    private int _position;
    private int _peekPosition;
    private int _charsRead;
    private bool _needPropertyCheck;
    private static int DEFAULT_BUFFER_LENGTH;
    private Char[] _buffer;
    private bool _hasFieldsEnclosedInQuotes;
    private int _lineLength;
    private string _spaceChars;
    private int _maxLineSize;
    private int _maxBufferSize;
    private bool _leaveOpen;
    private Char[] newLineChars;
    public String[] CommentTokens { get; public set; }
    public bool EndOfData { get; }
    public long LineNumber { get; }
    public string ErrorLine { get; }
    public long ErrorLineNumber { get; }
    public FieldType TextFieldType { get; public set; }
    public Int32[] FieldWidths { get; private set; }
    public String[] Delimiters { get; private set; }
    public bool TrimWhiteSpace { get; public set; }
    public bool HasFieldsEnclosedInQuotes { get; public set; }
    private Regex BeginQuotesRegex { get; }
    private string EndQuotePattern { get; }
    private string WhitespaceCharacters { get; }
    private string WhitespacePattern { get; }
    public TextFieldParser(string path);
    public TextFieldParser(string path, Encoding defaultEncoding);
    public TextFieldParser(string path, Encoding defaultEncoding, bool detectEncoding);
    public TextFieldParser(Stream stream);
    public TextFieldParser(Stream stream, Encoding defaultEncoding);
    public TextFieldParser(Stream stream, Encoding defaultEncoding, bool detectEncoding);
    public TextFieldParser(Stream stream, Encoding defaultEncoding, bool detectEncoding, bool leaveOpen);
    public TextFieldParser(TextReader reader);
    public String[] get_CommentTokens();
    public void set_CommentTokens(String[] value);
    public bool get_EndOfData();
    public long get_LineNumber();
    public string get_ErrorLine();
    public long get_ErrorLineNumber();
    public FieldType get_TextFieldType();
    public void set_TextFieldType(FieldType value);
    public Int32[] get_FieldWidths();
    private void set_FieldWidths(Int32[] value);
    public String[] get_Delimiters();
    private void set_Delimiters(String[] value);
    public bool get_TrimWhiteSpace();
    public void set_TrimWhiteSpace(bool value);
    public bool get_HasFieldsEnclosedInQuotes();
    public void set_HasFieldsEnclosedInQuotes(bool value);
    private Regex get_BeginQuotesRegex();
    private string get_EndQuotePattern();
    private string get_WhitespaceCharacters();
    private string get_WhitespacePattern();
    public void SetDelimiters(String[] delimiters);
    public void SetFieldWidths(Int32[] fieldWidths);
    public string ReadLine();
    public String[] ReadFields();
    public string PeekChars(int numberOfChars);
    public string ReadToEnd();
    public void Close();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    private void ValidateFieldTypeEnumValue(FieldType value, string paramName);
    private void CloseReader();
    private void FinishReading();
    private void InitializeFromPath(string path, Encoding defaultEncoding, bool detectEncoding);
    private void InitializeFromStream(Stream stream, Encoding defaultEncoding, bool detectEncoding);
    private string ValidatePath(string path);
    private bool IgnoreLine(string line);
    private int ReadToBuffer();
    private int SlideCursorToStartOfBuffer();
    private int IncreaseBufferSize();
    private string ReadNextDataLine();
    private string PeekNextDataLine();
    private string ReadNextLine(Int32& cursor, ChangeBufferFunction changeBuffer);
    private String[] ParseDelimitedLine();
    private String[] ParseFixedWidthLine();
    private string GetFixedWidthField(StringInfo line, int index, int fieldLength);
    private int GetEndOfLineIndex(string line);
    private void ValidateFixedWidthLine(StringInfo line, long lineNumber);
    private void ValidateFieldWidths();
    private void ValidateFieldWidthsOnInput(Int32[] widths);
    private void ValidateAndEscapeDelimiters();
    private void ValidateReadyToRead();
    private void ValidateDelimiters(String[] delimiterArray);
    private bool ArrayHasChanged();
    private void CheckCommentTokensForWhitespace(String[] tokens);
    private bool CharacterIsInDelimiter(char testCharacter);
}
internal static class Microsoft.Data.Analysis.UInt16Converter : object {
    public static IUInt16Converter`1<T> GetUInt16Converter();
}
internal static class Microsoft.Data.Analysis.UInt16Converter`1 : object {
    [CompilerGeneratedAttribute]
private static IUInt16Converter`1<T> <Instance>k__BackingField;
    public static IUInt16Converter`1<T> Instance { get; }
    private static UInt16Converter`1();
    [CompilerGeneratedAttribute]
public static IUInt16Converter`1<T> get_Instance();
}
public class Microsoft.Data.Analysis.UInt16DataFrameColumn : PrimitiveDataFrameColumn`1<ushort> {
    public UInt16DataFrameColumn(string name, IEnumerable`1<Nullable`1<ushort>> values);
    public UInt16DataFrameColumn(string name, IEnumerable`1<ushort> values);
    public UInt16DataFrameColumn(string name, long length);
    public UInt16DataFrameColumn(string name, ReadOnlyMemory`1<byte> buffer, ReadOnlyMemory`1<byte> nullBitMap, int length, int nullCount);
    internal UInt16DataFrameColumn(string name, PrimitiveColumnContainer`1<ushort> values);
    public Int32DataFrameColumn Add(ByteDataFrameColumn column);
    public Int32DataFrameColumn Subtract(ByteDataFrameColumn column);
    public Int32DataFrameColumn Multiply(ByteDataFrameColumn column);
    public Int32DataFrameColumn Divide(ByteDataFrameColumn column);
    public Int32DataFrameColumn Modulo(ByteDataFrameColumn column);
    public DecimalDataFrameColumn Add(DecimalDataFrameColumn column);
    public DecimalDataFrameColumn Subtract(DecimalDataFrameColumn column);
    public DecimalDataFrameColumn Multiply(DecimalDataFrameColumn column);
    public DecimalDataFrameColumn Divide(DecimalDataFrameColumn column);
    public DecimalDataFrameColumn Modulo(DecimalDataFrameColumn column);
    public DoubleDataFrameColumn Add(DoubleDataFrameColumn column);
    public DoubleDataFrameColumn Subtract(DoubleDataFrameColumn column);
    public DoubleDataFrameColumn Multiply(DoubleDataFrameColumn column);
    public DoubleDataFrameColumn Divide(DoubleDataFrameColumn column);
    public DoubleDataFrameColumn Modulo(DoubleDataFrameColumn column);
    public SingleDataFrameColumn Add(SingleDataFrameColumn column);
    public SingleDataFrameColumn Subtract(SingleDataFrameColumn column);
    public SingleDataFrameColumn Multiply(SingleDataFrameColumn column);
    public SingleDataFrameColumn Divide(SingleDataFrameColumn column);
    public SingleDataFrameColumn Modulo(SingleDataFrameColumn column);
    public Int32DataFrameColumn Add(Int32DataFrameColumn column);
    public Int32DataFrameColumn Subtract(Int32DataFrameColumn column);
    public Int32DataFrameColumn Multiply(Int32DataFrameColumn column);
    public Int32DataFrameColumn Divide(Int32DataFrameColumn column);
    public Int32DataFrameColumn Modulo(Int32DataFrameColumn column);
    public Int64DataFrameColumn Add(Int64DataFrameColumn column);
    public Int64DataFrameColumn Subtract(Int64DataFrameColumn column);
    public Int64DataFrameColumn Multiply(Int64DataFrameColumn column);
    public Int64DataFrameColumn Divide(Int64DataFrameColumn column);
    public Int64DataFrameColumn Modulo(Int64DataFrameColumn column);
    public Int32DataFrameColumn Add(SByteDataFrameColumn column);
    public Int32DataFrameColumn Subtract(SByteDataFrameColumn column);
    public Int32DataFrameColumn Multiply(SByteDataFrameColumn column);
    public Int32DataFrameColumn Divide(SByteDataFrameColumn column);
    public Int32DataFrameColumn Modulo(SByteDataFrameColumn column);
    public Int32DataFrameColumn Add(Int16DataFrameColumn column);
    public Int32DataFrameColumn Subtract(Int16DataFrameColumn column);
    public Int32DataFrameColumn Multiply(Int16DataFrameColumn column);
    public Int32DataFrameColumn Divide(Int16DataFrameColumn column);
    public Int32DataFrameColumn Modulo(Int16DataFrameColumn column);
    public UInt32DataFrameColumn Add(UInt32DataFrameColumn column);
    public UInt32DataFrameColumn Subtract(UInt32DataFrameColumn column);
    public UInt32DataFrameColumn Multiply(UInt32DataFrameColumn column);
    public UInt32DataFrameColumn Divide(UInt32DataFrameColumn column);
    public UInt32DataFrameColumn Modulo(UInt32DataFrameColumn column);
    public UInt64DataFrameColumn Add(UInt64DataFrameColumn column);
    public UInt64DataFrameColumn Subtract(UInt64DataFrameColumn column);
    public UInt64DataFrameColumn Multiply(UInt64DataFrameColumn column);
    public UInt64DataFrameColumn Divide(UInt64DataFrameColumn column);
    public UInt64DataFrameColumn Modulo(UInt64DataFrameColumn column);
    public Int32DataFrameColumn Add(UInt16DataFrameColumn column);
    public Int32DataFrameColumn Subtract(UInt16DataFrameColumn column);
    public Int32DataFrameColumn Multiply(UInt16DataFrameColumn column);
    public Int32DataFrameColumn Divide(UInt16DataFrameColumn column);
    public Int32DataFrameColumn Modulo(UInt16DataFrameColumn column);
    public Int32DataFrameColumn Add(byte value);
    public Int32DataFrameColumn ReverseAdd(byte value);
    public Int32DataFrameColumn Subtract(byte value);
    public Int32DataFrameColumn ReverseSubtract(byte value);
    public Int32DataFrameColumn Multiply(byte value);
    public Int32DataFrameColumn ReverseMultiply(byte value);
    public Int32DataFrameColumn Divide(byte value);
    public Int32DataFrameColumn ReverseDivide(byte value);
    public Int32DataFrameColumn Modulo(byte value);
    public Int32DataFrameColumn ReverseModulo(byte value);
    public DecimalDataFrameColumn Add(decimal value);
    public DecimalDataFrameColumn ReverseAdd(decimal value);
    public DecimalDataFrameColumn Subtract(decimal value);
    public DecimalDataFrameColumn ReverseSubtract(decimal value);
    public DecimalDataFrameColumn Multiply(decimal value);
    public DecimalDataFrameColumn ReverseMultiply(decimal value);
    public DecimalDataFrameColumn Divide(decimal value);
    public DecimalDataFrameColumn ReverseDivide(decimal value);
    public DecimalDataFrameColumn Modulo(decimal value);
    public DecimalDataFrameColumn ReverseModulo(decimal value);
    public DoubleDataFrameColumn Add(double value);
    public DoubleDataFrameColumn ReverseAdd(double value);
    public DoubleDataFrameColumn Subtract(double value);
    public DoubleDataFrameColumn ReverseSubtract(double value);
    public DoubleDataFrameColumn Multiply(double value);
    public DoubleDataFrameColumn ReverseMultiply(double value);
    public DoubleDataFrameColumn Divide(double value);
    public DoubleDataFrameColumn ReverseDivide(double value);
    public DoubleDataFrameColumn Modulo(double value);
    public DoubleDataFrameColumn ReverseModulo(double value);
    public SingleDataFrameColumn Add(float value);
    public SingleDataFrameColumn ReverseAdd(float value);
    public SingleDataFrameColumn Subtract(float value);
    public SingleDataFrameColumn ReverseSubtract(float value);
    public SingleDataFrameColumn Multiply(float value);
    public SingleDataFrameColumn ReverseMultiply(float value);
    public SingleDataFrameColumn Divide(float value);
    public SingleDataFrameColumn ReverseDivide(float value);
    public SingleDataFrameColumn Modulo(float value);
    public SingleDataFrameColumn ReverseModulo(float value);
    public Int32DataFrameColumn Add(int value);
    public Int32DataFrameColumn ReverseAdd(int value);
    public Int32DataFrameColumn Subtract(int value);
    public Int32DataFrameColumn ReverseSubtract(int value);
    public Int32DataFrameColumn Multiply(int value);
    public Int32DataFrameColumn ReverseMultiply(int value);
    public Int32DataFrameColumn Divide(int value);
    public Int32DataFrameColumn ReverseDivide(int value);
    public Int32DataFrameColumn Modulo(int value);
    public Int32DataFrameColumn ReverseModulo(int value);
    public Int64DataFrameColumn Add(long value);
    public Int64DataFrameColumn ReverseAdd(long value);
    public Int64DataFrameColumn Subtract(long value);
    public Int64DataFrameColumn ReverseSubtract(long value);
    public Int64DataFrameColumn Multiply(long value);
    public Int64DataFrameColumn ReverseMultiply(long value);
    public Int64DataFrameColumn Divide(long value);
    public Int64DataFrameColumn ReverseDivide(long value);
    public Int64DataFrameColumn Modulo(long value);
    public Int64DataFrameColumn ReverseModulo(long value);
    public Int32DataFrameColumn Add(sbyte value);
    public Int32DataFrameColumn ReverseAdd(sbyte value);
    public Int32DataFrameColumn Subtract(sbyte value);
    public Int32DataFrameColumn ReverseSubtract(sbyte value);
    public Int32DataFrameColumn Multiply(sbyte value);
    public Int32DataFrameColumn ReverseMultiply(sbyte value);
    public Int32DataFrameColumn Divide(sbyte value);
    public Int32DataFrameColumn ReverseDivide(sbyte value);
    public Int32DataFrameColumn Modulo(sbyte value);
    public Int32DataFrameColumn ReverseModulo(sbyte value);
    public Int32DataFrameColumn Add(short value);
    public Int32DataFrameColumn ReverseAdd(short value);
    public Int32DataFrameColumn Subtract(short value);
    public Int32DataFrameColumn ReverseSubtract(short value);
    public Int32DataFrameColumn Multiply(short value);
    public Int32DataFrameColumn ReverseMultiply(short value);
    public Int32DataFrameColumn Divide(short value);
    public Int32DataFrameColumn ReverseDivide(short value);
    public Int32DataFrameColumn Modulo(short value);
    public Int32DataFrameColumn ReverseModulo(short value);
    public UInt32DataFrameColumn Add(UInt32 value);
    public UInt32DataFrameColumn ReverseAdd(UInt32 value);
    public UInt32DataFrameColumn Subtract(UInt32 value);
    public UInt32DataFrameColumn ReverseSubtract(UInt32 value);
    public UInt32DataFrameColumn Multiply(UInt32 value);
    public UInt32DataFrameColumn ReverseMultiply(UInt32 value);
    public UInt32DataFrameColumn Divide(UInt32 value);
    public UInt32DataFrameColumn ReverseDivide(UInt32 value);
    public UInt32DataFrameColumn Modulo(UInt32 value);
    public UInt32DataFrameColumn ReverseModulo(UInt32 value);
    public UInt64DataFrameColumn Add(ulong value);
    public UInt64DataFrameColumn ReverseAdd(ulong value);
    public UInt64DataFrameColumn Subtract(ulong value);
    public UInt64DataFrameColumn ReverseSubtract(ulong value);
    public UInt64DataFrameColumn Multiply(ulong value);
    public UInt64DataFrameColumn ReverseMultiply(ulong value);
    public UInt64DataFrameColumn Divide(ulong value);
    public UInt64DataFrameColumn ReverseDivide(ulong value);
    public UInt64DataFrameColumn Modulo(ulong value);
    public UInt64DataFrameColumn ReverseModulo(ulong value);
    public Int32DataFrameColumn Add(ushort value);
    public Int32DataFrameColumn ReverseAdd(ushort value);
    public Int32DataFrameColumn Subtract(ushort value);
    public Int32DataFrameColumn ReverseSubtract(ushort value);
    public Int32DataFrameColumn Multiply(ushort value);
    public Int32DataFrameColumn ReverseMultiply(ushort value);
    public Int32DataFrameColumn Divide(ushort value);
    public Int32DataFrameColumn ReverseDivide(ushort value);
    public Int32DataFrameColumn Modulo(ushort value);
    public Int32DataFrameColumn ReverseModulo(ushort value);
    public BooleanDataFrameColumn ElementwiseEquals(ByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(ByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(ByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(ByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(ByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(ByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(DecimalDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(DecimalDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(DecimalDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(DecimalDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(DecimalDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(DecimalDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(DoubleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(DoubleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(DoubleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(DoubleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(DoubleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(DoubleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(SingleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(SingleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(SingleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(SingleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(SingleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(SingleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(Int32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(Int32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(Int32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(Int32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(Int32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(Int32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(Int64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(Int64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(Int64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(Int64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(Int64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(Int64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(SByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(SByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(SByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(SByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(SByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(SByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(Int16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(Int16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(Int16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(Int16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(Int16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(Int16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(UInt32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(UInt32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(UInt32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(UInt32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(UInt32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(UInt32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(UInt64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(UInt64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(UInt64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(UInt64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(UInt64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(UInt64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(UInt16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(UInt16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(UInt16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(UInt16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(UInt16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(UInt16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(byte value);
    public BooleanDataFrameColumn ElementwiseNotEquals(byte value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(byte value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(byte value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(byte value);
    public BooleanDataFrameColumn ElementwiseLessThan(byte value);
    public BooleanDataFrameColumn ElementwiseEquals(decimal value);
    public BooleanDataFrameColumn ElementwiseNotEquals(decimal value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(decimal value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(decimal value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(decimal value);
    public BooleanDataFrameColumn ElementwiseLessThan(decimal value);
    public BooleanDataFrameColumn ElementwiseEquals(double value);
    public BooleanDataFrameColumn ElementwiseNotEquals(double value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(double value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(double value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(double value);
    public BooleanDataFrameColumn ElementwiseLessThan(double value);
    public BooleanDataFrameColumn ElementwiseEquals(float value);
    public BooleanDataFrameColumn ElementwiseNotEquals(float value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(float value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(float value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(float value);
    public BooleanDataFrameColumn ElementwiseLessThan(float value);
    public BooleanDataFrameColumn ElementwiseEquals(int value);
    public BooleanDataFrameColumn ElementwiseNotEquals(int value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(int value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(int value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(int value);
    public BooleanDataFrameColumn ElementwiseLessThan(int value);
    public BooleanDataFrameColumn ElementwiseEquals(long value);
    public BooleanDataFrameColumn ElementwiseNotEquals(long value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(long value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(long value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(long value);
    public BooleanDataFrameColumn ElementwiseLessThan(long value);
    public BooleanDataFrameColumn ElementwiseEquals(sbyte value);
    public BooleanDataFrameColumn ElementwiseNotEquals(sbyte value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(sbyte value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(sbyte value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(sbyte value);
    public BooleanDataFrameColumn ElementwiseLessThan(sbyte value);
    public BooleanDataFrameColumn ElementwiseEquals(short value);
    public BooleanDataFrameColumn ElementwiseNotEquals(short value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(short value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(short value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(short value);
    public BooleanDataFrameColumn ElementwiseLessThan(short value);
    public BooleanDataFrameColumn ElementwiseEquals(UInt32 value);
    public BooleanDataFrameColumn ElementwiseNotEquals(UInt32 value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(UInt32 value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(UInt32 value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(UInt32 value);
    public BooleanDataFrameColumn ElementwiseLessThan(UInt32 value);
    public BooleanDataFrameColumn ElementwiseEquals(ulong value);
    public BooleanDataFrameColumn ElementwiseNotEquals(ulong value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(ulong value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(ulong value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(ulong value);
    public BooleanDataFrameColumn ElementwiseLessThan(ulong value);
    public BooleanDataFrameColumn ElementwiseEquals(ushort value);
    public BooleanDataFrameColumn ElementwiseNotEquals(ushort value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(ushort value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(ushort value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(ushort value);
    public BooleanDataFrameColumn ElementwiseLessThan(ushort value);
    public Int32DataFrameColumn LeftShift(int value, bool inPlace);
    public Int32DataFrameColumn RightShift(int value, bool inPlace);
    internal BooleanDataFrameColumn ElementwiseEqualsImplementation(UInt16DataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseEqualsImplementation(ushort value);
    internal BooleanDataFrameColumn ElementwiseNotEqualsImplementation(UInt16DataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseNotEqualsImplementation(ushort value);
    internal BooleanDataFrameColumn ElementwiseGreaterThanOrEqualImplementation(UInt16DataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseGreaterThanOrEqualImplementation(ushort value);
    internal BooleanDataFrameColumn ElementwiseLessThanOrEqualImplementation(UInt16DataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseLessThanOrEqualImplementation(ushort value);
    internal BooleanDataFrameColumn ElementwiseGreaterThanImplementation(UInt16DataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseGreaterThanImplementation(ushort value);
    internal BooleanDataFrameColumn ElementwiseLessThanImplementation(UInt16DataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseLessThanImplementation(ushort value);
    public static Int32DataFrameColumn op_Addition(UInt16DataFrameColumn left, ByteDataFrameColumn right);
    public static DecimalDataFrameColumn op_Addition(UInt16DataFrameColumn left, DecimalDataFrameColumn right);
    public static DoubleDataFrameColumn op_Addition(UInt16DataFrameColumn left, DoubleDataFrameColumn right);
    public static SingleDataFrameColumn op_Addition(UInt16DataFrameColumn left, SingleDataFrameColumn right);
    public static Int32DataFrameColumn op_Addition(UInt16DataFrameColumn left, Int32DataFrameColumn right);
    public static Int64DataFrameColumn op_Addition(UInt16DataFrameColumn left, Int64DataFrameColumn right);
    public static Int32DataFrameColumn op_Addition(UInt16DataFrameColumn left, SByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Addition(UInt16DataFrameColumn left, Int16DataFrameColumn right);
    public static UInt32DataFrameColumn op_Addition(UInt16DataFrameColumn left, UInt32DataFrameColumn right);
    public static UInt64DataFrameColumn op_Addition(UInt16DataFrameColumn left, UInt64DataFrameColumn right);
    public static Int32DataFrameColumn op_Addition(UInt16DataFrameColumn left, UInt16DataFrameColumn right);
    public static Int32DataFrameColumn op_Addition(UInt16DataFrameColumn left, byte right);
    public static Int32DataFrameColumn op_Addition(byte left, UInt16DataFrameColumn right);
    public static DecimalDataFrameColumn op_Addition(UInt16DataFrameColumn left, decimal right);
    public static DecimalDataFrameColumn op_Addition(decimal left, UInt16DataFrameColumn right);
    public static DoubleDataFrameColumn op_Addition(UInt16DataFrameColumn left, double right);
    public static DoubleDataFrameColumn op_Addition(double left, UInt16DataFrameColumn right);
    public static SingleDataFrameColumn op_Addition(UInt16DataFrameColumn left, float right);
    public static SingleDataFrameColumn op_Addition(float left, UInt16DataFrameColumn right);
    public static Int32DataFrameColumn op_Addition(UInt16DataFrameColumn left, int right);
    public static Int32DataFrameColumn op_Addition(int left, UInt16DataFrameColumn right);
    public static Int64DataFrameColumn op_Addition(UInt16DataFrameColumn left, long right);
    public static Int64DataFrameColumn op_Addition(long left, UInt16DataFrameColumn right);
    public static Int32DataFrameColumn op_Addition(UInt16DataFrameColumn left, sbyte right);
    public static Int32DataFrameColumn op_Addition(sbyte left, UInt16DataFrameColumn right);
    public static Int32DataFrameColumn op_Addition(UInt16DataFrameColumn left, short right);
    public static Int32DataFrameColumn op_Addition(short left, UInt16DataFrameColumn right);
    public static UInt32DataFrameColumn op_Addition(UInt16DataFrameColumn left, UInt32 right);
    public static UInt32DataFrameColumn op_Addition(UInt32 left, UInt16DataFrameColumn right);
    public static UInt64DataFrameColumn op_Addition(UInt16DataFrameColumn left, ulong right);
    public static UInt64DataFrameColumn op_Addition(ulong left, UInt16DataFrameColumn right);
    public static Int32DataFrameColumn op_Addition(UInt16DataFrameColumn left, ushort right);
    public static Int32DataFrameColumn op_Addition(ushort left, UInt16DataFrameColumn right);
    public static Int32DataFrameColumn op_Subtraction(UInt16DataFrameColumn left, ByteDataFrameColumn right);
    public static DecimalDataFrameColumn op_Subtraction(UInt16DataFrameColumn left, DecimalDataFrameColumn right);
    public static DoubleDataFrameColumn op_Subtraction(UInt16DataFrameColumn left, DoubleDataFrameColumn right);
    public static SingleDataFrameColumn op_Subtraction(UInt16DataFrameColumn left, SingleDataFrameColumn right);
    public static Int32DataFrameColumn op_Subtraction(UInt16DataFrameColumn left, Int32DataFrameColumn right);
    public static Int64DataFrameColumn op_Subtraction(UInt16DataFrameColumn left, Int64DataFrameColumn right);
    public static Int32DataFrameColumn op_Subtraction(UInt16DataFrameColumn left, SByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Subtraction(UInt16DataFrameColumn left, Int16DataFrameColumn right);
    public static UInt32DataFrameColumn op_Subtraction(UInt16DataFrameColumn left, UInt32DataFrameColumn right);
    public static UInt64DataFrameColumn op_Subtraction(UInt16DataFrameColumn left, UInt64DataFrameColumn right);
    public static Int32DataFrameColumn op_Subtraction(UInt16DataFrameColumn left, UInt16DataFrameColumn right);
    public static Int32DataFrameColumn op_Subtraction(UInt16DataFrameColumn left, byte right);
    public static Int32DataFrameColumn op_Subtraction(byte left, UInt16DataFrameColumn right);
    public static DecimalDataFrameColumn op_Subtraction(UInt16DataFrameColumn left, decimal right);
    public static DecimalDataFrameColumn op_Subtraction(decimal left, UInt16DataFrameColumn right);
    public static DoubleDataFrameColumn op_Subtraction(UInt16DataFrameColumn left, double right);
    public static DoubleDataFrameColumn op_Subtraction(double left, UInt16DataFrameColumn right);
    public static SingleDataFrameColumn op_Subtraction(UInt16DataFrameColumn left, float right);
    public static SingleDataFrameColumn op_Subtraction(float left, UInt16DataFrameColumn right);
    public static Int32DataFrameColumn op_Subtraction(UInt16DataFrameColumn left, int right);
    public static Int32DataFrameColumn op_Subtraction(int left, UInt16DataFrameColumn right);
    public static Int64DataFrameColumn op_Subtraction(UInt16DataFrameColumn left, long right);
    public static Int64DataFrameColumn op_Subtraction(long left, UInt16DataFrameColumn right);
    public static Int32DataFrameColumn op_Subtraction(UInt16DataFrameColumn left, sbyte right);
    public static Int32DataFrameColumn op_Subtraction(sbyte left, UInt16DataFrameColumn right);
    public static Int32DataFrameColumn op_Subtraction(UInt16DataFrameColumn left, short right);
    public static Int32DataFrameColumn op_Subtraction(short left, UInt16DataFrameColumn right);
    public static UInt32DataFrameColumn op_Subtraction(UInt16DataFrameColumn left, UInt32 right);
    public static UInt32DataFrameColumn op_Subtraction(UInt32 left, UInt16DataFrameColumn right);
    public static UInt64DataFrameColumn op_Subtraction(UInt16DataFrameColumn left, ulong right);
    public static UInt64DataFrameColumn op_Subtraction(ulong left, UInt16DataFrameColumn right);
    public static Int32DataFrameColumn op_Subtraction(UInt16DataFrameColumn left, ushort right);
    public static Int32DataFrameColumn op_Subtraction(ushort left, UInt16DataFrameColumn right);
    public static Int32DataFrameColumn op_Multiply(UInt16DataFrameColumn left, ByteDataFrameColumn right);
    public static DecimalDataFrameColumn op_Multiply(UInt16DataFrameColumn left, DecimalDataFrameColumn right);
    public static DoubleDataFrameColumn op_Multiply(UInt16DataFrameColumn left, DoubleDataFrameColumn right);
    public static SingleDataFrameColumn op_Multiply(UInt16DataFrameColumn left, SingleDataFrameColumn right);
    public static Int32DataFrameColumn op_Multiply(UInt16DataFrameColumn left, Int32DataFrameColumn right);
    public static Int64DataFrameColumn op_Multiply(UInt16DataFrameColumn left, Int64DataFrameColumn right);
    public static Int32DataFrameColumn op_Multiply(UInt16DataFrameColumn left, SByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Multiply(UInt16DataFrameColumn left, Int16DataFrameColumn right);
    public static UInt32DataFrameColumn op_Multiply(UInt16DataFrameColumn left, UInt32DataFrameColumn right);
    public static UInt64DataFrameColumn op_Multiply(UInt16DataFrameColumn left, UInt64DataFrameColumn right);
    public static Int32DataFrameColumn op_Multiply(UInt16DataFrameColumn left, UInt16DataFrameColumn right);
    public static Int32DataFrameColumn op_Multiply(UInt16DataFrameColumn left, byte right);
    public static Int32DataFrameColumn op_Multiply(byte left, UInt16DataFrameColumn right);
    public static DecimalDataFrameColumn op_Multiply(UInt16DataFrameColumn left, decimal right);
    public static DecimalDataFrameColumn op_Multiply(decimal left, UInt16DataFrameColumn right);
    public static DoubleDataFrameColumn op_Multiply(UInt16DataFrameColumn left, double right);
    public static DoubleDataFrameColumn op_Multiply(double left, UInt16DataFrameColumn right);
    public static SingleDataFrameColumn op_Multiply(UInt16DataFrameColumn left, float right);
    public static SingleDataFrameColumn op_Multiply(float left, UInt16DataFrameColumn right);
    public static Int32DataFrameColumn op_Multiply(UInt16DataFrameColumn left, int right);
    public static Int32DataFrameColumn op_Multiply(int left, UInt16DataFrameColumn right);
    public static Int64DataFrameColumn op_Multiply(UInt16DataFrameColumn left, long right);
    public static Int64DataFrameColumn op_Multiply(long left, UInt16DataFrameColumn right);
    public static Int32DataFrameColumn op_Multiply(UInt16DataFrameColumn left, sbyte right);
    public static Int32DataFrameColumn op_Multiply(sbyte left, UInt16DataFrameColumn right);
    public static Int32DataFrameColumn op_Multiply(UInt16DataFrameColumn left, short right);
    public static Int32DataFrameColumn op_Multiply(short left, UInt16DataFrameColumn right);
    public static UInt32DataFrameColumn op_Multiply(UInt16DataFrameColumn left, UInt32 right);
    public static UInt32DataFrameColumn op_Multiply(UInt32 left, UInt16DataFrameColumn right);
    public static UInt64DataFrameColumn op_Multiply(UInt16DataFrameColumn left, ulong right);
    public static UInt64DataFrameColumn op_Multiply(ulong left, UInt16DataFrameColumn right);
    public static Int32DataFrameColumn op_Multiply(UInt16DataFrameColumn left, ushort right);
    public static Int32DataFrameColumn op_Multiply(ushort left, UInt16DataFrameColumn right);
    public static Int32DataFrameColumn op_Division(UInt16DataFrameColumn left, ByteDataFrameColumn right);
    public static DecimalDataFrameColumn op_Division(UInt16DataFrameColumn left, DecimalDataFrameColumn right);
    public static DoubleDataFrameColumn op_Division(UInt16DataFrameColumn left, DoubleDataFrameColumn right);
    public static SingleDataFrameColumn op_Division(UInt16DataFrameColumn left, SingleDataFrameColumn right);
    public static Int32DataFrameColumn op_Division(UInt16DataFrameColumn left, Int32DataFrameColumn right);
    public static Int64DataFrameColumn op_Division(UInt16DataFrameColumn left, Int64DataFrameColumn right);
    public static Int32DataFrameColumn op_Division(UInt16DataFrameColumn left, SByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Division(UInt16DataFrameColumn left, Int16DataFrameColumn right);
    public static UInt32DataFrameColumn op_Division(UInt16DataFrameColumn left, UInt32DataFrameColumn right);
    public static UInt64DataFrameColumn op_Division(UInt16DataFrameColumn left, UInt64DataFrameColumn right);
    public static Int32DataFrameColumn op_Division(UInt16DataFrameColumn left, UInt16DataFrameColumn right);
    public static Int32DataFrameColumn op_Division(UInt16DataFrameColumn left, byte right);
    public static Int32DataFrameColumn op_Division(byte left, UInt16DataFrameColumn right);
    public static DecimalDataFrameColumn op_Division(UInt16DataFrameColumn left, decimal right);
    public static DecimalDataFrameColumn op_Division(decimal left, UInt16DataFrameColumn right);
    public static DoubleDataFrameColumn op_Division(UInt16DataFrameColumn left, double right);
    public static DoubleDataFrameColumn op_Division(double left, UInt16DataFrameColumn right);
    public static SingleDataFrameColumn op_Division(UInt16DataFrameColumn left, float right);
    public static SingleDataFrameColumn op_Division(float left, UInt16DataFrameColumn right);
    public static Int32DataFrameColumn op_Division(UInt16DataFrameColumn left, int right);
    public static Int32DataFrameColumn op_Division(int left, UInt16DataFrameColumn right);
    public static Int64DataFrameColumn op_Division(UInt16DataFrameColumn left, long right);
    public static Int64DataFrameColumn op_Division(long left, UInt16DataFrameColumn right);
    public static Int32DataFrameColumn op_Division(UInt16DataFrameColumn left, sbyte right);
    public static Int32DataFrameColumn op_Division(sbyte left, UInt16DataFrameColumn right);
    public static Int32DataFrameColumn op_Division(UInt16DataFrameColumn left, short right);
    public static Int32DataFrameColumn op_Division(short left, UInt16DataFrameColumn right);
    public static UInt32DataFrameColumn op_Division(UInt16DataFrameColumn left, UInt32 right);
    public static UInt32DataFrameColumn op_Division(UInt32 left, UInt16DataFrameColumn right);
    public static UInt64DataFrameColumn op_Division(UInt16DataFrameColumn left, ulong right);
    public static UInt64DataFrameColumn op_Division(ulong left, UInt16DataFrameColumn right);
    public static Int32DataFrameColumn op_Division(UInt16DataFrameColumn left, ushort right);
    public static Int32DataFrameColumn op_Division(ushort left, UInt16DataFrameColumn right);
    public static Int32DataFrameColumn op_Modulus(UInt16DataFrameColumn left, ByteDataFrameColumn right);
    public static DecimalDataFrameColumn op_Modulus(UInt16DataFrameColumn left, DecimalDataFrameColumn right);
    public static DoubleDataFrameColumn op_Modulus(UInt16DataFrameColumn left, DoubleDataFrameColumn right);
    public static SingleDataFrameColumn op_Modulus(UInt16DataFrameColumn left, SingleDataFrameColumn right);
    public static Int32DataFrameColumn op_Modulus(UInt16DataFrameColumn left, Int32DataFrameColumn right);
    public static Int64DataFrameColumn op_Modulus(UInt16DataFrameColumn left, Int64DataFrameColumn right);
    public static Int32DataFrameColumn op_Modulus(UInt16DataFrameColumn left, SByteDataFrameColumn right);
    public static Int32DataFrameColumn op_Modulus(UInt16DataFrameColumn left, Int16DataFrameColumn right);
    public static UInt32DataFrameColumn op_Modulus(UInt16DataFrameColumn left, UInt32DataFrameColumn right);
    public static UInt64DataFrameColumn op_Modulus(UInt16DataFrameColumn left, UInt64DataFrameColumn right);
    public static Int32DataFrameColumn op_Modulus(UInt16DataFrameColumn left, UInt16DataFrameColumn right);
    public static Int32DataFrameColumn op_Modulus(UInt16DataFrameColumn left, byte right);
    public static Int32DataFrameColumn op_Modulus(byte left, UInt16DataFrameColumn right);
    public static DecimalDataFrameColumn op_Modulus(UInt16DataFrameColumn left, decimal right);
    public static DecimalDataFrameColumn op_Modulus(decimal left, UInt16DataFrameColumn right);
    public static DoubleDataFrameColumn op_Modulus(UInt16DataFrameColumn left, double right);
    public static DoubleDataFrameColumn op_Modulus(double left, UInt16DataFrameColumn right);
    public static SingleDataFrameColumn op_Modulus(UInt16DataFrameColumn left, float right);
    public static SingleDataFrameColumn op_Modulus(float left, UInt16DataFrameColumn right);
    public static Int32DataFrameColumn op_Modulus(UInt16DataFrameColumn left, int right);
    public static Int32DataFrameColumn op_Modulus(int left, UInt16DataFrameColumn right);
    public static Int64DataFrameColumn op_Modulus(UInt16DataFrameColumn left, long right);
    public static Int64DataFrameColumn op_Modulus(long left, UInt16DataFrameColumn right);
    public static Int32DataFrameColumn op_Modulus(UInt16DataFrameColumn left, sbyte right);
    public static Int32DataFrameColumn op_Modulus(sbyte left, UInt16DataFrameColumn right);
    public static Int32DataFrameColumn op_Modulus(UInt16DataFrameColumn left, short right);
    public static Int32DataFrameColumn op_Modulus(short left, UInt16DataFrameColumn right);
    public static UInt32DataFrameColumn op_Modulus(UInt16DataFrameColumn left, UInt32 right);
    public static UInt32DataFrameColumn op_Modulus(UInt32 left, UInt16DataFrameColumn right);
    public static UInt64DataFrameColumn op_Modulus(UInt16DataFrameColumn left, ulong right);
    public static UInt64DataFrameColumn op_Modulus(ulong left, UInt16DataFrameColumn right);
    public static Int32DataFrameColumn op_Modulus(UInt16DataFrameColumn left, ushort right);
    public static Int32DataFrameColumn op_Modulus(ushort left, UInt16DataFrameColumn right);
    public static Int32DataFrameColumn op_LeftShift(UInt16DataFrameColumn left, int value);
    public static Int32DataFrameColumn op_RightShift(UInt16DataFrameColumn left, int value);
}
internal class Microsoft.Data.Analysis.UInt16DecimalConverter : object {
    public sealed virtual decimal GetDecimal(ushort value);
}
internal class Microsoft.Data.Analysis.UInt16DoubleConverter : object {
    public sealed virtual double GetDouble(ushort value);
}
internal class Microsoft.Data.Analysis.UInt16Int16Converter : object {
    public sealed virtual short GetInt16(ushort value);
}
internal class Microsoft.Data.Analysis.UInt16Int32Converter : object {
    public sealed virtual int GetInt32(ushort value);
}
internal class Microsoft.Data.Analysis.UInt16Int64Converter : object {
    public sealed virtual long GetInt64(ushort value);
}
internal class Microsoft.Data.Analysis.UInt16SingleConverter : object {
    public sealed virtual float GetSingle(ushort value);
}
internal class Microsoft.Data.Analysis.UInt16UInt16Converter : object {
    public sealed virtual ushort GetUInt16(ushort value);
}
internal class Microsoft.Data.Analysis.UInt16UInt32Converter : object {
    public sealed virtual UInt32 GetUInt32(ushort value);
}
internal class Microsoft.Data.Analysis.UInt16UInt64Converter : object {
    public sealed virtual ulong GetUInt64(ushort value);
}
internal static class Microsoft.Data.Analysis.UInt32Converter : object {
    public static IUInt32Converter`1<T> GetUInt32Converter();
}
internal static class Microsoft.Data.Analysis.UInt32Converter`1 : object {
    [CompilerGeneratedAttribute]
private static IUInt32Converter`1<T> <Instance>k__BackingField;
    public static IUInt32Converter`1<T> Instance { get; }
    private static UInt32Converter`1();
    [CompilerGeneratedAttribute]
public static IUInt32Converter`1<T> get_Instance();
}
public class Microsoft.Data.Analysis.UInt32DataFrameColumn : PrimitiveDataFrameColumn`1<UInt32> {
    public UInt32DataFrameColumn(string name, IEnumerable`1<Nullable`1<UInt32>> values);
    public UInt32DataFrameColumn(string name, IEnumerable`1<UInt32> values);
    public UInt32DataFrameColumn(string name, long length);
    public UInt32DataFrameColumn(string name, ReadOnlyMemory`1<byte> buffer, ReadOnlyMemory`1<byte> nullBitMap, int length, int nullCount);
    internal UInt32DataFrameColumn(string name, PrimitiveColumnContainer`1<UInt32> values);
    public UInt32DataFrameColumn Add(ByteDataFrameColumn column, bool inPlace);
    public UInt32DataFrameColumn Subtract(ByteDataFrameColumn column, bool inPlace);
    public UInt32DataFrameColumn Multiply(ByteDataFrameColumn column, bool inPlace);
    public UInt32DataFrameColumn Divide(ByteDataFrameColumn column, bool inPlace);
    public UInt32DataFrameColumn Modulo(ByteDataFrameColumn column, bool inPlace);
    public DecimalDataFrameColumn Add(DecimalDataFrameColumn column);
    public DecimalDataFrameColumn Subtract(DecimalDataFrameColumn column);
    public DecimalDataFrameColumn Multiply(DecimalDataFrameColumn column);
    public DecimalDataFrameColumn Divide(DecimalDataFrameColumn column);
    public DecimalDataFrameColumn Modulo(DecimalDataFrameColumn column);
    public DoubleDataFrameColumn Add(DoubleDataFrameColumn column);
    public DoubleDataFrameColumn Subtract(DoubleDataFrameColumn column);
    public DoubleDataFrameColumn Multiply(DoubleDataFrameColumn column);
    public DoubleDataFrameColumn Divide(DoubleDataFrameColumn column);
    public DoubleDataFrameColumn Modulo(DoubleDataFrameColumn column);
    public SingleDataFrameColumn Add(SingleDataFrameColumn column);
    public SingleDataFrameColumn Subtract(SingleDataFrameColumn column);
    public SingleDataFrameColumn Multiply(SingleDataFrameColumn column);
    public SingleDataFrameColumn Divide(SingleDataFrameColumn column);
    public SingleDataFrameColumn Modulo(SingleDataFrameColumn column);
    public Int64DataFrameColumn Add(Int32DataFrameColumn column);
    public Int64DataFrameColumn Subtract(Int32DataFrameColumn column);
    public Int64DataFrameColumn Multiply(Int32DataFrameColumn column);
    public Int64DataFrameColumn Divide(Int32DataFrameColumn column);
    public Int64DataFrameColumn Modulo(Int32DataFrameColumn column);
    public Int64DataFrameColumn Add(Int64DataFrameColumn column);
    public Int64DataFrameColumn Subtract(Int64DataFrameColumn column);
    public Int64DataFrameColumn Multiply(Int64DataFrameColumn column);
    public Int64DataFrameColumn Divide(Int64DataFrameColumn column);
    public Int64DataFrameColumn Modulo(Int64DataFrameColumn column);
    public Int64DataFrameColumn Add(SByteDataFrameColumn column);
    public Int64DataFrameColumn Subtract(SByteDataFrameColumn column);
    public Int64DataFrameColumn Multiply(SByteDataFrameColumn column);
    public Int64DataFrameColumn Divide(SByteDataFrameColumn column);
    public Int64DataFrameColumn Modulo(SByteDataFrameColumn column);
    public Int64DataFrameColumn Add(Int16DataFrameColumn column);
    public Int64DataFrameColumn Subtract(Int16DataFrameColumn column);
    public Int64DataFrameColumn Multiply(Int16DataFrameColumn column);
    public Int64DataFrameColumn Divide(Int16DataFrameColumn column);
    public Int64DataFrameColumn Modulo(Int16DataFrameColumn column);
    public UInt32DataFrameColumn Add(UInt32DataFrameColumn column, bool inPlace);
    public UInt32DataFrameColumn Subtract(UInt32DataFrameColumn column, bool inPlace);
    public UInt32DataFrameColumn Multiply(UInt32DataFrameColumn column, bool inPlace);
    public UInt32DataFrameColumn Divide(UInt32DataFrameColumn column, bool inPlace);
    public UInt32DataFrameColumn Modulo(UInt32DataFrameColumn column, bool inPlace);
    public UInt64DataFrameColumn Add(UInt64DataFrameColumn column);
    public UInt64DataFrameColumn Subtract(UInt64DataFrameColumn column);
    public UInt64DataFrameColumn Multiply(UInt64DataFrameColumn column);
    public UInt64DataFrameColumn Divide(UInt64DataFrameColumn column);
    public UInt64DataFrameColumn Modulo(UInt64DataFrameColumn column);
    public UInt32DataFrameColumn Add(UInt16DataFrameColumn column, bool inPlace);
    public UInt32DataFrameColumn Subtract(UInt16DataFrameColumn column, bool inPlace);
    public UInt32DataFrameColumn Multiply(UInt16DataFrameColumn column, bool inPlace);
    public UInt32DataFrameColumn Divide(UInt16DataFrameColumn column, bool inPlace);
    public UInt32DataFrameColumn Modulo(UInt16DataFrameColumn column, bool inPlace);
    public UInt32DataFrameColumn Add(byte value, bool inPlace);
    public UInt32DataFrameColumn ReverseAdd(byte value, bool inPlace);
    public UInt32DataFrameColumn Subtract(byte value, bool inPlace);
    public UInt32DataFrameColumn ReverseSubtract(byte value, bool inPlace);
    public UInt32DataFrameColumn Multiply(byte value, bool inPlace);
    public UInt32DataFrameColumn ReverseMultiply(byte value, bool inPlace);
    public UInt32DataFrameColumn Divide(byte value, bool inPlace);
    public UInt32DataFrameColumn ReverseDivide(byte value, bool inPlace);
    public UInt32DataFrameColumn Modulo(byte value, bool inPlace);
    public UInt32DataFrameColumn ReverseModulo(byte value, bool inPlace);
    public DecimalDataFrameColumn Add(decimal value);
    public DecimalDataFrameColumn ReverseAdd(decimal value);
    public DecimalDataFrameColumn Subtract(decimal value);
    public DecimalDataFrameColumn ReverseSubtract(decimal value);
    public DecimalDataFrameColumn Multiply(decimal value);
    public DecimalDataFrameColumn ReverseMultiply(decimal value);
    public DecimalDataFrameColumn Divide(decimal value);
    public DecimalDataFrameColumn ReverseDivide(decimal value);
    public DecimalDataFrameColumn Modulo(decimal value);
    public DecimalDataFrameColumn ReverseModulo(decimal value);
    public DoubleDataFrameColumn Add(double value);
    public DoubleDataFrameColumn ReverseAdd(double value);
    public DoubleDataFrameColumn Subtract(double value);
    public DoubleDataFrameColumn ReverseSubtract(double value);
    public DoubleDataFrameColumn Multiply(double value);
    public DoubleDataFrameColumn ReverseMultiply(double value);
    public DoubleDataFrameColumn Divide(double value);
    public DoubleDataFrameColumn ReverseDivide(double value);
    public DoubleDataFrameColumn Modulo(double value);
    public DoubleDataFrameColumn ReverseModulo(double value);
    public SingleDataFrameColumn Add(float value);
    public SingleDataFrameColumn ReverseAdd(float value);
    public SingleDataFrameColumn Subtract(float value);
    public SingleDataFrameColumn ReverseSubtract(float value);
    public SingleDataFrameColumn Multiply(float value);
    public SingleDataFrameColumn ReverseMultiply(float value);
    public SingleDataFrameColumn Divide(float value);
    public SingleDataFrameColumn ReverseDivide(float value);
    public SingleDataFrameColumn Modulo(float value);
    public SingleDataFrameColumn ReverseModulo(float value);
    public Int64DataFrameColumn Add(int value);
    public Int64DataFrameColumn ReverseAdd(int value);
    public Int64DataFrameColumn Subtract(int value);
    public Int64DataFrameColumn ReverseSubtract(int value);
    public Int64DataFrameColumn Multiply(int value);
    public Int64DataFrameColumn ReverseMultiply(int value);
    public Int64DataFrameColumn Divide(int value);
    public Int64DataFrameColumn ReverseDivide(int value);
    public Int64DataFrameColumn Modulo(int value);
    public Int64DataFrameColumn ReverseModulo(int value);
    public Int64DataFrameColumn Add(long value);
    public Int64DataFrameColumn ReverseAdd(long value);
    public Int64DataFrameColumn Subtract(long value);
    public Int64DataFrameColumn ReverseSubtract(long value);
    public Int64DataFrameColumn Multiply(long value);
    public Int64DataFrameColumn ReverseMultiply(long value);
    public Int64DataFrameColumn Divide(long value);
    public Int64DataFrameColumn ReverseDivide(long value);
    public Int64DataFrameColumn Modulo(long value);
    public Int64DataFrameColumn ReverseModulo(long value);
    public Int64DataFrameColumn Add(sbyte value);
    public Int64DataFrameColumn ReverseAdd(sbyte value);
    public Int64DataFrameColumn Subtract(sbyte value);
    public Int64DataFrameColumn ReverseSubtract(sbyte value);
    public Int64DataFrameColumn Multiply(sbyte value);
    public Int64DataFrameColumn ReverseMultiply(sbyte value);
    public Int64DataFrameColumn Divide(sbyte value);
    public Int64DataFrameColumn ReverseDivide(sbyte value);
    public Int64DataFrameColumn Modulo(sbyte value);
    public Int64DataFrameColumn ReverseModulo(sbyte value);
    public Int64DataFrameColumn Add(short value);
    public Int64DataFrameColumn ReverseAdd(short value);
    public Int64DataFrameColumn Subtract(short value);
    public Int64DataFrameColumn ReverseSubtract(short value);
    public Int64DataFrameColumn Multiply(short value);
    public Int64DataFrameColumn ReverseMultiply(short value);
    public Int64DataFrameColumn Divide(short value);
    public Int64DataFrameColumn ReverseDivide(short value);
    public Int64DataFrameColumn Modulo(short value);
    public Int64DataFrameColumn ReverseModulo(short value);
    public UInt32DataFrameColumn Add(UInt32 value, bool inPlace);
    public UInt32DataFrameColumn ReverseAdd(UInt32 value, bool inPlace);
    public UInt32DataFrameColumn Subtract(UInt32 value, bool inPlace);
    public UInt32DataFrameColumn ReverseSubtract(UInt32 value, bool inPlace);
    public UInt32DataFrameColumn Multiply(UInt32 value, bool inPlace);
    public UInt32DataFrameColumn ReverseMultiply(UInt32 value, bool inPlace);
    public UInt32DataFrameColumn Divide(UInt32 value, bool inPlace);
    public UInt32DataFrameColumn ReverseDivide(UInt32 value, bool inPlace);
    public UInt32DataFrameColumn Modulo(UInt32 value, bool inPlace);
    public UInt32DataFrameColumn ReverseModulo(UInt32 value, bool inPlace);
    public UInt64DataFrameColumn Add(ulong value);
    public UInt64DataFrameColumn ReverseAdd(ulong value);
    public UInt64DataFrameColumn Subtract(ulong value);
    public UInt64DataFrameColumn ReverseSubtract(ulong value);
    public UInt64DataFrameColumn Multiply(ulong value);
    public UInt64DataFrameColumn ReverseMultiply(ulong value);
    public UInt64DataFrameColumn Divide(ulong value);
    public UInt64DataFrameColumn ReverseDivide(ulong value);
    public UInt64DataFrameColumn Modulo(ulong value);
    public UInt64DataFrameColumn ReverseModulo(ulong value);
    public UInt32DataFrameColumn Add(ushort value, bool inPlace);
    public UInt32DataFrameColumn ReverseAdd(ushort value, bool inPlace);
    public UInt32DataFrameColumn Subtract(ushort value, bool inPlace);
    public UInt32DataFrameColumn ReverseSubtract(ushort value, bool inPlace);
    public UInt32DataFrameColumn Multiply(ushort value, bool inPlace);
    public UInt32DataFrameColumn ReverseMultiply(ushort value, bool inPlace);
    public UInt32DataFrameColumn Divide(ushort value, bool inPlace);
    public UInt32DataFrameColumn ReverseDivide(ushort value, bool inPlace);
    public UInt32DataFrameColumn Modulo(ushort value, bool inPlace);
    public UInt32DataFrameColumn ReverseModulo(ushort value, bool inPlace);
    public BooleanDataFrameColumn ElementwiseEquals(ByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(ByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(ByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(ByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(ByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(ByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(DecimalDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(DecimalDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(DecimalDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(DecimalDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(DecimalDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(DecimalDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(DoubleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(DoubleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(DoubleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(DoubleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(DoubleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(DoubleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(SingleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(SingleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(SingleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(SingleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(SingleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(SingleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(Int32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(Int32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(Int32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(Int32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(Int32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(Int32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(Int64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(Int64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(Int64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(Int64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(Int64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(Int64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(SByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(SByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(SByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(SByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(SByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(SByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(Int16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(Int16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(Int16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(Int16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(Int16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(Int16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(UInt32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(UInt32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(UInt32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(UInt32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(UInt32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(UInt32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(UInt64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(UInt64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(UInt64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(UInt64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(UInt64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(UInt64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(UInt16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(UInt16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(UInt16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(UInt16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(UInt16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(UInt16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(byte value);
    public BooleanDataFrameColumn ElementwiseNotEquals(byte value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(byte value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(byte value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(byte value);
    public BooleanDataFrameColumn ElementwiseLessThan(byte value);
    public BooleanDataFrameColumn ElementwiseEquals(decimal value);
    public BooleanDataFrameColumn ElementwiseNotEquals(decimal value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(decimal value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(decimal value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(decimal value);
    public BooleanDataFrameColumn ElementwiseLessThan(decimal value);
    public BooleanDataFrameColumn ElementwiseEquals(double value);
    public BooleanDataFrameColumn ElementwiseNotEquals(double value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(double value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(double value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(double value);
    public BooleanDataFrameColumn ElementwiseLessThan(double value);
    public BooleanDataFrameColumn ElementwiseEquals(float value);
    public BooleanDataFrameColumn ElementwiseNotEquals(float value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(float value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(float value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(float value);
    public BooleanDataFrameColumn ElementwiseLessThan(float value);
    public BooleanDataFrameColumn ElementwiseEquals(int value);
    public BooleanDataFrameColumn ElementwiseNotEquals(int value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(int value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(int value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(int value);
    public BooleanDataFrameColumn ElementwiseLessThan(int value);
    public BooleanDataFrameColumn ElementwiseEquals(long value);
    public BooleanDataFrameColumn ElementwiseNotEquals(long value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(long value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(long value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(long value);
    public BooleanDataFrameColumn ElementwiseLessThan(long value);
    public BooleanDataFrameColumn ElementwiseEquals(sbyte value);
    public BooleanDataFrameColumn ElementwiseNotEquals(sbyte value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(sbyte value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(sbyte value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(sbyte value);
    public BooleanDataFrameColumn ElementwiseLessThan(sbyte value);
    public BooleanDataFrameColumn ElementwiseEquals(short value);
    public BooleanDataFrameColumn ElementwiseNotEquals(short value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(short value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(short value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(short value);
    public BooleanDataFrameColumn ElementwiseLessThan(short value);
    public BooleanDataFrameColumn ElementwiseEquals(UInt32 value);
    public BooleanDataFrameColumn ElementwiseNotEquals(UInt32 value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(UInt32 value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(UInt32 value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(UInt32 value);
    public BooleanDataFrameColumn ElementwiseLessThan(UInt32 value);
    public BooleanDataFrameColumn ElementwiseEquals(ulong value);
    public BooleanDataFrameColumn ElementwiseNotEquals(ulong value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(ulong value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(ulong value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(ulong value);
    public BooleanDataFrameColumn ElementwiseLessThan(ulong value);
    public BooleanDataFrameColumn ElementwiseEquals(ushort value);
    public BooleanDataFrameColumn ElementwiseNotEquals(ushort value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(ushort value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(ushort value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(ushort value);
    public BooleanDataFrameColumn ElementwiseLessThan(ushort value);
    public UInt32DataFrameColumn LeftShift(int value, bool inPlace);
    public UInt32DataFrameColumn RightShift(int value, bool inPlace);
    internal UInt32DataFrameColumn AddImplementation(UInt32DataFrameColumn column, bool inPlace);
    internal UInt32DataFrameColumn AddImplementation(UInt32 value, bool inPlace);
    internal UInt32DataFrameColumn ReverseAddImplementation(UInt32 value, bool inPlace);
    internal UInt32DataFrameColumn SubtractImplementation(UInt32DataFrameColumn column, bool inPlace);
    internal UInt32DataFrameColumn SubtractImplementation(UInt32 value, bool inPlace);
    internal UInt32DataFrameColumn ReverseSubtractImplementation(UInt32 value, bool inPlace);
    internal UInt32DataFrameColumn MultiplyImplementation(UInt32DataFrameColumn column, bool inPlace);
    internal UInt32DataFrameColumn MultiplyImplementation(UInt32 value, bool inPlace);
    internal UInt32DataFrameColumn ReverseMultiplyImplementation(UInt32 value, bool inPlace);
    internal UInt32DataFrameColumn DivideImplementation(UInt32DataFrameColumn column, bool inPlace);
    internal UInt32DataFrameColumn DivideImplementation(UInt32 value, bool inPlace);
    internal UInt32DataFrameColumn ReverseDivideImplementation(UInt32 value, bool inPlace);
    internal UInt32DataFrameColumn ModuloImplementation(UInt32DataFrameColumn column, bool inPlace);
    internal UInt32DataFrameColumn ModuloImplementation(UInt32 value, bool inPlace);
    internal UInt32DataFrameColumn ReverseModuloImplementation(UInt32 value, bool inPlace);
    internal BooleanDataFrameColumn ElementwiseEqualsImplementation(UInt32DataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseEqualsImplementation(UInt32 value);
    internal BooleanDataFrameColumn ElementwiseNotEqualsImplementation(UInt32DataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseNotEqualsImplementation(UInt32 value);
    internal BooleanDataFrameColumn ElementwiseGreaterThanOrEqualImplementation(UInt32DataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseGreaterThanOrEqualImplementation(UInt32 value);
    internal BooleanDataFrameColumn ElementwiseLessThanOrEqualImplementation(UInt32DataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseLessThanOrEqualImplementation(UInt32 value);
    internal BooleanDataFrameColumn ElementwiseGreaterThanImplementation(UInt32DataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseGreaterThanImplementation(UInt32 value);
    internal BooleanDataFrameColumn ElementwiseLessThanImplementation(UInt32DataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseLessThanImplementation(UInt32 value);
    public static UInt32DataFrameColumn op_Addition(UInt32DataFrameColumn left, ByteDataFrameColumn right);
    public static DecimalDataFrameColumn op_Addition(UInt32DataFrameColumn left, DecimalDataFrameColumn right);
    public static DoubleDataFrameColumn op_Addition(UInt32DataFrameColumn left, DoubleDataFrameColumn right);
    public static SingleDataFrameColumn op_Addition(UInt32DataFrameColumn left, SingleDataFrameColumn right);
    public static Int64DataFrameColumn op_Addition(UInt32DataFrameColumn left, Int32DataFrameColumn right);
    public static Int64DataFrameColumn op_Addition(UInt32DataFrameColumn left, Int64DataFrameColumn right);
    public static Int64DataFrameColumn op_Addition(UInt32DataFrameColumn left, SByteDataFrameColumn right);
    public static Int64DataFrameColumn op_Addition(UInt32DataFrameColumn left, Int16DataFrameColumn right);
    public static UInt32DataFrameColumn op_Addition(UInt32DataFrameColumn left, UInt32DataFrameColumn right);
    public static UInt64DataFrameColumn op_Addition(UInt32DataFrameColumn left, UInt64DataFrameColumn right);
    public static UInt32DataFrameColumn op_Addition(UInt32DataFrameColumn left, UInt16DataFrameColumn right);
    public static UInt32DataFrameColumn op_Addition(UInt32DataFrameColumn left, byte right);
    public static UInt32DataFrameColumn op_Addition(byte left, UInt32DataFrameColumn right);
    public static DecimalDataFrameColumn op_Addition(UInt32DataFrameColumn left, decimal right);
    public static DecimalDataFrameColumn op_Addition(decimal left, UInt32DataFrameColumn right);
    public static DoubleDataFrameColumn op_Addition(UInt32DataFrameColumn left, double right);
    public static DoubleDataFrameColumn op_Addition(double left, UInt32DataFrameColumn right);
    public static SingleDataFrameColumn op_Addition(UInt32DataFrameColumn left, float right);
    public static SingleDataFrameColumn op_Addition(float left, UInt32DataFrameColumn right);
    public static Int64DataFrameColumn op_Addition(UInt32DataFrameColumn left, int right);
    public static Int64DataFrameColumn op_Addition(int left, UInt32DataFrameColumn right);
    public static Int64DataFrameColumn op_Addition(UInt32DataFrameColumn left, long right);
    public static Int64DataFrameColumn op_Addition(long left, UInt32DataFrameColumn right);
    public static Int64DataFrameColumn op_Addition(UInt32DataFrameColumn left, sbyte right);
    public static Int64DataFrameColumn op_Addition(sbyte left, UInt32DataFrameColumn right);
    public static Int64DataFrameColumn op_Addition(UInt32DataFrameColumn left, short right);
    public static Int64DataFrameColumn op_Addition(short left, UInt32DataFrameColumn right);
    public static UInt32DataFrameColumn op_Addition(UInt32DataFrameColumn left, UInt32 right);
    public static UInt32DataFrameColumn op_Addition(UInt32 left, UInt32DataFrameColumn right);
    public static UInt64DataFrameColumn op_Addition(UInt32DataFrameColumn left, ulong right);
    public static UInt64DataFrameColumn op_Addition(ulong left, UInt32DataFrameColumn right);
    public static UInt32DataFrameColumn op_Addition(UInt32DataFrameColumn left, ushort right);
    public static UInt32DataFrameColumn op_Addition(ushort left, UInt32DataFrameColumn right);
    public static UInt32DataFrameColumn op_Subtraction(UInt32DataFrameColumn left, ByteDataFrameColumn right);
    public static DecimalDataFrameColumn op_Subtraction(UInt32DataFrameColumn left, DecimalDataFrameColumn right);
    public static DoubleDataFrameColumn op_Subtraction(UInt32DataFrameColumn left, DoubleDataFrameColumn right);
    public static SingleDataFrameColumn op_Subtraction(UInt32DataFrameColumn left, SingleDataFrameColumn right);
    public static Int64DataFrameColumn op_Subtraction(UInt32DataFrameColumn left, Int32DataFrameColumn right);
    public static Int64DataFrameColumn op_Subtraction(UInt32DataFrameColumn left, Int64DataFrameColumn right);
    public static Int64DataFrameColumn op_Subtraction(UInt32DataFrameColumn left, SByteDataFrameColumn right);
    public static Int64DataFrameColumn op_Subtraction(UInt32DataFrameColumn left, Int16DataFrameColumn right);
    public static UInt32DataFrameColumn op_Subtraction(UInt32DataFrameColumn left, UInt32DataFrameColumn right);
    public static UInt64DataFrameColumn op_Subtraction(UInt32DataFrameColumn left, UInt64DataFrameColumn right);
    public static UInt32DataFrameColumn op_Subtraction(UInt32DataFrameColumn left, UInt16DataFrameColumn right);
    public static UInt32DataFrameColumn op_Subtraction(UInt32DataFrameColumn left, byte right);
    public static UInt32DataFrameColumn op_Subtraction(byte left, UInt32DataFrameColumn right);
    public static DecimalDataFrameColumn op_Subtraction(UInt32DataFrameColumn left, decimal right);
    public static DecimalDataFrameColumn op_Subtraction(decimal left, UInt32DataFrameColumn right);
    public static DoubleDataFrameColumn op_Subtraction(UInt32DataFrameColumn left, double right);
    public static DoubleDataFrameColumn op_Subtraction(double left, UInt32DataFrameColumn right);
    public static SingleDataFrameColumn op_Subtraction(UInt32DataFrameColumn left, float right);
    public static SingleDataFrameColumn op_Subtraction(float left, UInt32DataFrameColumn right);
    public static Int64DataFrameColumn op_Subtraction(UInt32DataFrameColumn left, int right);
    public static Int64DataFrameColumn op_Subtraction(int left, UInt32DataFrameColumn right);
    public static Int64DataFrameColumn op_Subtraction(UInt32DataFrameColumn left, long right);
    public static Int64DataFrameColumn op_Subtraction(long left, UInt32DataFrameColumn right);
    public static Int64DataFrameColumn op_Subtraction(UInt32DataFrameColumn left, sbyte right);
    public static Int64DataFrameColumn op_Subtraction(sbyte left, UInt32DataFrameColumn right);
    public static Int64DataFrameColumn op_Subtraction(UInt32DataFrameColumn left, short right);
    public static Int64DataFrameColumn op_Subtraction(short left, UInt32DataFrameColumn right);
    public static UInt32DataFrameColumn op_Subtraction(UInt32DataFrameColumn left, UInt32 right);
    public static UInt32DataFrameColumn op_Subtraction(UInt32 left, UInt32DataFrameColumn right);
    public static UInt64DataFrameColumn op_Subtraction(UInt32DataFrameColumn left, ulong right);
    public static UInt64DataFrameColumn op_Subtraction(ulong left, UInt32DataFrameColumn right);
    public static UInt32DataFrameColumn op_Subtraction(UInt32DataFrameColumn left, ushort right);
    public static UInt32DataFrameColumn op_Subtraction(ushort left, UInt32DataFrameColumn right);
    public static UInt32DataFrameColumn op_Multiply(UInt32DataFrameColumn left, ByteDataFrameColumn right);
    public static DecimalDataFrameColumn op_Multiply(UInt32DataFrameColumn left, DecimalDataFrameColumn right);
    public static DoubleDataFrameColumn op_Multiply(UInt32DataFrameColumn left, DoubleDataFrameColumn right);
    public static SingleDataFrameColumn op_Multiply(UInt32DataFrameColumn left, SingleDataFrameColumn right);
    public static Int64DataFrameColumn op_Multiply(UInt32DataFrameColumn left, Int32DataFrameColumn right);
    public static Int64DataFrameColumn op_Multiply(UInt32DataFrameColumn left, Int64DataFrameColumn right);
    public static Int64DataFrameColumn op_Multiply(UInt32DataFrameColumn left, SByteDataFrameColumn right);
    public static Int64DataFrameColumn op_Multiply(UInt32DataFrameColumn left, Int16DataFrameColumn right);
    public static UInt32DataFrameColumn op_Multiply(UInt32DataFrameColumn left, UInt32DataFrameColumn right);
    public static UInt64DataFrameColumn op_Multiply(UInt32DataFrameColumn left, UInt64DataFrameColumn right);
    public static UInt32DataFrameColumn op_Multiply(UInt32DataFrameColumn left, UInt16DataFrameColumn right);
    public static UInt32DataFrameColumn op_Multiply(UInt32DataFrameColumn left, byte right);
    public static UInt32DataFrameColumn op_Multiply(byte left, UInt32DataFrameColumn right);
    public static DecimalDataFrameColumn op_Multiply(UInt32DataFrameColumn left, decimal right);
    public static DecimalDataFrameColumn op_Multiply(decimal left, UInt32DataFrameColumn right);
    public static DoubleDataFrameColumn op_Multiply(UInt32DataFrameColumn left, double right);
    public static DoubleDataFrameColumn op_Multiply(double left, UInt32DataFrameColumn right);
    public static SingleDataFrameColumn op_Multiply(UInt32DataFrameColumn left, float right);
    public static SingleDataFrameColumn op_Multiply(float left, UInt32DataFrameColumn right);
    public static Int64DataFrameColumn op_Multiply(UInt32DataFrameColumn left, int right);
    public static Int64DataFrameColumn op_Multiply(int left, UInt32DataFrameColumn right);
    public static Int64DataFrameColumn op_Multiply(UInt32DataFrameColumn left, long right);
    public static Int64DataFrameColumn op_Multiply(long left, UInt32DataFrameColumn right);
    public static Int64DataFrameColumn op_Multiply(UInt32DataFrameColumn left, sbyte right);
    public static Int64DataFrameColumn op_Multiply(sbyte left, UInt32DataFrameColumn right);
    public static Int64DataFrameColumn op_Multiply(UInt32DataFrameColumn left, short right);
    public static Int64DataFrameColumn op_Multiply(short left, UInt32DataFrameColumn right);
    public static UInt32DataFrameColumn op_Multiply(UInt32DataFrameColumn left, UInt32 right);
    public static UInt32DataFrameColumn op_Multiply(UInt32 left, UInt32DataFrameColumn right);
    public static UInt64DataFrameColumn op_Multiply(UInt32DataFrameColumn left, ulong right);
    public static UInt64DataFrameColumn op_Multiply(ulong left, UInt32DataFrameColumn right);
    public static UInt32DataFrameColumn op_Multiply(UInt32DataFrameColumn left, ushort right);
    public static UInt32DataFrameColumn op_Multiply(ushort left, UInt32DataFrameColumn right);
    public static UInt32DataFrameColumn op_Division(UInt32DataFrameColumn left, ByteDataFrameColumn right);
    public static DecimalDataFrameColumn op_Division(UInt32DataFrameColumn left, DecimalDataFrameColumn right);
    public static DoubleDataFrameColumn op_Division(UInt32DataFrameColumn left, DoubleDataFrameColumn right);
    public static SingleDataFrameColumn op_Division(UInt32DataFrameColumn left, SingleDataFrameColumn right);
    public static Int64DataFrameColumn op_Division(UInt32DataFrameColumn left, Int32DataFrameColumn right);
    public static Int64DataFrameColumn op_Division(UInt32DataFrameColumn left, Int64DataFrameColumn right);
    public static Int64DataFrameColumn op_Division(UInt32DataFrameColumn left, SByteDataFrameColumn right);
    public static Int64DataFrameColumn op_Division(UInt32DataFrameColumn left, Int16DataFrameColumn right);
    public static UInt32DataFrameColumn op_Division(UInt32DataFrameColumn left, UInt32DataFrameColumn right);
    public static UInt64DataFrameColumn op_Division(UInt32DataFrameColumn left, UInt64DataFrameColumn right);
    public static UInt32DataFrameColumn op_Division(UInt32DataFrameColumn left, UInt16DataFrameColumn right);
    public static UInt32DataFrameColumn op_Division(UInt32DataFrameColumn left, byte right);
    public static UInt32DataFrameColumn op_Division(byte left, UInt32DataFrameColumn right);
    public static DecimalDataFrameColumn op_Division(UInt32DataFrameColumn left, decimal right);
    public static DecimalDataFrameColumn op_Division(decimal left, UInt32DataFrameColumn right);
    public static DoubleDataFrameColumn op_Division(UInt32DataFrameColumn left, double right);
    public static DoubleDataFrameColumn op_Division(double left, UInt32DataFrameColumn right);
    public static SingleDataFrameColumn op_Division(UInt32DataFrameColumn left, float right);
    public static SingleDataFrameColumn op_Division(float left, UInt32DataFrameColumn right);
    public static Int64DataFrameColumn op_Division(UInt32DataFrameColumn left, int right);
    public static Int64DataFrameColumn op_Division(int left, UInt32DataFrameColumn right);
    public static Int64DataFrameColumn op_Division(UInt32DataFrameColumn left, long right);
    public static Int64DataFrameColumn op_Division(long left, UInt32DataFrameColumn right);
    public static Int64DataFrameColumn op_Division(UInt32DataFrameColumn left, sbyte right);
    public static Int64DataFrameColumn op_Division(sbyte left, UInt32DataFrameColumn right);
    public static Int64DataFrameColumn op_Division(UInt32DataFrameColumn left, short right);
    public static Int64DataFrameColumn op_Division(short left, UInt32DataFrameColumn right);
    public static UInt32DataFrameColumn op_Division(UInt32DataFrameColumn left, UInt32 right);
    public static UInt32DataFrameColumn op_Division(UInt32 left, UInt32DataFrameColumn right);
    public static UInt64DataFrameColumn op_Division(UInt32DataFrameColumn left, ulong right);
    public static UInt64DataFrameColumn op_Division(ulong left, UInt32DataFrameColumn right);
    public static UInt32DataFrameColumn op_Division(UInt32DataFrameColumn left, ushort right);
    public static UInt32DataFrameColumn op_Division(ushort left, UInt32DataFrameColumn right);
    public static UInt32DataFrameColumn op_Modulus(UInt32DataFrameColumn left, ByteDataFrameColumn right);
    public static DecimalDataFrameColumn op_Modulus(UInt32DataFrameColumn left, DecimalDataFrameColumn right);
    public static DoubleDataFrameColumn op_Modulus(UInt32DataFrameColumn left, DoubleDataFrameColumn right);
    public static SingleDataFrameColumn op_Modulus(UInt32DataFrameColumn left, SingleDataFrameColumn right);
    public static Int64DataFrameColumn op_Modulus(UInt32DataFrameColumn left, Int32DataFrameColumn right);
    public static Int64DataFrameColumn op_Modulus(UInt32DataFrameColumn left, Int64DataFrameColumn right);
    public static Int64DataFrameColumn op_Modulus(UInt32DataFrameColumn left, SByteDataFrameColumn right);
    public static Int64DataFrameColumn op_Modulus(UInt32DataFrameColumn left, Int16DataFrameColumn right);
    public static UInt32DataFrameColumn op_Modulus(UInt32DataFrameColumn left, UInt32DataFrameColumn right);
    public static UInt64DataFrameColumn op_Modulus(UInt32DataFrameColumn left, UInt64DataFrameColumn right);
    public static UInt32DataFrameColumn op_Modulus(UInt32DataFrameColumn left, UInt16DataFrameColumn right);
    public static UInt32DataFrameColumn op_Modulus(UInt32DataFrameColumn left, byte right);
    public static UInt32DataFrameColumn op_Modulus(byte left, UInt32DataFrameColumn right);
    public static DecimalDataFrameColumn op_Modulus(UInt32DataFrameColumn left, decimal right);
    public static DecimalDataFrameColumn op_Modulus(decimal left, UInt32DataFrameColumn right);
    public static DoubleDataFrameColumn op_Modulus(UInt32DataFrameColumn left, double right);
    public static DoubleDataFrameColumn op_Modulus(double left, UInt32DataFrameColumn right);
    public static SingleDataFrameColumn op_Modulus(UInt32DataFrameColumn left, float right);
    public static SingleDataFrameColumn op_Modulus(float left, UInt32DataFrameColumn right);
    public static Int64DataFrameColumn op_Modulus(UInt32DataFrameColumn left, int right);
    public static Int64DataFrameColumn op_Modulus(int left, UInt32DataFrameColumn right);
    public static Int64DataFrameColumn op_Modulus(UInt32DataFrameColumn left, long right);
    public static Int64DataFrameColumn op_Modulus(long left, UInt32DataFrameColumn right);
    public static Int64DataFrameColumn op_Modulus(UInt32DataFrameColumn left, sbyte right);
    public static Int64DataFrameColumn op_Modulus(sbyte left, UInt32DataFrameColumn right);
    public static Int64DataFrameColumn op_Modulus(UInt32DataFrameColumn left, short right);
    public static Int64DataFrameColumn op_Modulus(short left, UInt32DataFrameColumn right);
    public static UInt32DataFrameColumn op_Modulus(UInt32DataFrameColumn left, UInt32 right);
    public static UInt32DataFrameColumn op_Modulus(UInt32 left, UInt32DataFrameColumn right);
    public static UInt64DataFrameColumn op_Modulus(UInt32DataFrameColumn left, ulong right);
    public static UInt64DataFrameColumn op_Modulus(ulong left, UInt32DataFrameColumn right);
    public static UInt32DataFrameColumn op_Modulus(UInt32DataFrameColumn left, ushort right);
    public static UInt32DataFrameColumn op_Modulus(ushort left, UInt32DataFrameColumn right);
    public static UInt32DataFrameColumn op_LeftShift(UInt32DataFrameColumn left, int value);
    public static UInt32DataFrameColumn op_RightShift(UInt32DataFrameColumn left, int value);
}
internal class Microsoft.Data.Analysis.UInt32DecimalConverter : object {
    public sealed virtual decimal GetDecimal(UInt32 value);
}
internal class Microsoft.Data.Analysis.UInt32DoubleConverter : object {
    public sealed virtual double GetDouble(UInt32 value);
}
internal class Microsoft.Data.Analysis.UInt32Int32Converter : object {
    public sealed virtual int GetInt32(UInt32 value);
}
internal class Microsoft.Data.Analysis.UInt32Int64Converter : object {
    public sealed virtual long GetInt64(UInt32 value);
}
internal class Microsoft.Data.Analysis.UInt32SingleConverter : object {
    public sealed virtual float GetSingle(UInt32 value);
}
internal class Microsoft.Data.Analysis.UInt32UInt32Converter : object {
    public sealed virtual UInt32 GetUInt32(UInt32 value);
}
internal class Microsoft.Data.Analysis.UInt32UInt64Converter : object {
    public sealed virtual ulong GetUInt64(UInt32 value);
}
internal static class Microsoft.Data.Analysis.UInt64Converter : object {
    public static IUInt64Converter`1<T> GetUInt64Converter();
}
internal static class Microsoft.Data.Analysis.UInt64Converter`1 : object {
    [CompilerGeneratedAttribute]
private static IUInt64Converter`1<T> <Instance>k__BackingField;
    public static IUInt64Converter`1<T> Instance { get; }
    private static UInt64Converter`1();
    [CompilerGeneratedAttribute]
public static IUInt64Converter`1<T> get_Instance();
}
public class Microsoft.Data.Analysis.UInt64DataFrameColumn : PrimitiveDataFrameColumn`1<ulong> {
    public UInt64DataFrameColumn(string name, IEnumerable`1<Nullable`1<ulong>> values);
    public UInt64DataFrameColumn(string name, IEnumerable`1<ulong> values);
    public UInt64DataFrameColumn(string name, long length);
    public UInt64DataFrameColumn(string name, ReadOnlyMemory`1<byte> buffer, ReadOnlyMemory`1<byte> nullBitMap, int length, int nullCount);
    internal UInt64DataFrameColumn(string name, PrimitiveColumnContainer`1<ulong> values);
    public UInt64DataFrameColumn Add(ByteDataFrameColumn column, bool inPlace);
    public UInt64DataFrameColumn Subtract(ByteDataFrameColumn column, bool inPlace);
    public UInt64DataFrameColumn Multiply(ByteDataFrameColumn column, bool inPlace);
    public UInt64DataFrameColumn Divide(ByteDataFrameColumn column, bool inPlace);
    public UInt64DataFrameColumn Modulo(ByteDataFrameColumn column, bool inPlace);
    public DecimalDataFrameColumn Add(DecimalDataFrameColumn column);
    public DecimalDataFrameColumn Subtract(DecimalDataFrameColumn column);
    public DecimalDataFrameColumn Multiply(DecimalDataFrameColumn column);
    public DecimalDataFrameColumn Divide(DecimalDataFrameColumn column);
    public DecimalDataFrameColumn Modulo(DecimalDataFrameColumn column);
    public DoubleDataFrameColumn Add(DoubleDataFrameColumn column);
    public DoubleDataFrameColumn Subtract(DoubleDataFrameColumn column);
    public DoubleDataFrameColumn Multiply(DoubleDataFrameColumn column);
    public DoubleDataFrameColumn Divide(DoubleDataFrameColumn column);
    public DoubleDataFrameColumn Modulo(DoubleDataFrameColumn column);
    public SingleDataFrameColumn Add(SingleDataFrameColumn column);
    public SingleDataFrameColumn Subtract(SingleDataFrameColumn column);
    public SingleDataFrameColumn Multiply(SingleDataFrameColumn column);
    public SingleDataFrameColumn Divide(SingleDataFrameColumn column);
    public SingleDataFrameColumn Modulo(SingleDataFrameColumn column);
    public SingleDataFrameColumn Add(Int32DataFrameColumn column);
    public SingleDataFrameColumn Subtract(Int32DataFrameColumn column);
    public SingleDataFrameColumn Multiply(Int32DataFrameColumn column);
    public SingleDataFrameColumn Divide(Int32DataFrameColumn column);
    public SingleDataFrameColumn Modulo(Int32DataFrameColumn column);
    public SingleDataFrameColumn Add(SByteDataFrameColumn column);
    public SingleDataFrameColumn Subtract(SByteDataFrameColumn column);
    public SingleDataFrameColumn Multiply(SByteDataFrameColumn column);
    public SingleDataFrameColumn Divide(SByteDataFrameColumn column);
    public SingleDataFrameColumn Modulo(SByteDataFrameColumn column);
    public SingleDataFrameColumn Add(Int16DataFrameColumn column);
    public SingleDataFrameColumn Subtract(Int16DataFrameColumn column);
    public SingleDataFrameColumn Multiply(Int16DataFrameColumn column);
    public SingleDataFrameColumn Divide(Int16DataFrameColumn column);
    public SingleDataFrameColumn Modulo(Int16DataFrameColumn column);
    public UInt64DataFrameColumn Add(UInt32DataFrameColumn column, bool inPlace);
    public UInt64DataFrameColumn Subtract(UInt32DataFrameColumn column, bool inPlace);
    public UInt64DataFrameColumn Multiply(UInt32DataFrameColumn column, bool inPlace);
    public UInt64DataFrameColumn Divide(UInt32DataFrameColumn column, bool inPlace);
    public UInt64DataFrameColumn Modulo(UInt32DataFrameColumn column, bool inPlace);
    public UInt64DataFrameColumn Add(UInt64DataFrameColumn column, bool inPlace);
    public UInt64DataFrameColumn Subtract(UInt64DataFrameColumn column, bool inPlace);
    public UInt64DataFrameColumn Multiply(UInt64DataFrameColumn column, bool inPlace);
    public UInt64DataFrameColumn Divide(UInt64DataFrameColumn column, bool inPlace);
    public UInt64DataFrameColumn Modulo(UInt64DataFrameColumn column, bool inPlace);
    public UInt64DataFrameColumn Add(UInt16DataFrameColumn column, bool inPlace);
    public UInt64DataFrameColumn Subtract(UInt16DataFrameColumn column, bool inPlace);
    public UInt64DataFrameColumn Multiply(UInt16DataFrameColumn column, bool inPlace);
    public UInt64DataFrameColumn Divide(UInt16DataFrameColumn column, bool inPlace);
    public UInt64DataFrameColumn Modulo(UInt16DataFrameColumn column, bool inPlace);
    public UInt64DataFrameColumn Add(byte value, bool inPlace);
    public UInt64DataFrameColumn ReverseAdd(byte value, bool inPlace);
    public UInt64DataFrameColumn Subtract(byte value, bool inPlace);
    public UInt64DataFrameColumn ReverseSubtract(byte value, bool inPlace);
    public UInt64DataFrameColumn Multiply(byte value, bool inPlace);
    public UInt64DataFrameColumn ReverseMultiply(byte value, bool inPlace);
    public UInt64DataFrameColumn Divide(byte value, bool inPlace);
    public UInt64DataFrameColumn ReverseDivide(byte value, bool inPlace);
    public UInt64DataFrameColumn Modulo(byte value, bool inPlace);
    public UInt64DataFrameColumn ReverseModulo(byte value, bool inPlace);
    public DecimalDataFrameColumn Add(decimal value);
    public DecimalDataFrameColumn ReverseAdd(decimal value);
    public DecimalDataFrameColumn Subtract(decimal value);
    public DecimalDataFrameColumn ReverseSubtract(decimal value);
    public DecimalDataFrameColumn Multiply(decimal value);
    public DecimalDataFrameColumn ReverseMultiply(decimal value);
    public DecimalDataFrameColumn Divide(decimal value);
    public DecimalDataFrameColumn ReverseDivide(decimal value);
    public DecimalDataFrameColumn Modulo(decimal value);
    public DecimalDataFrameColumn ReverseModulo(decimal value);
    public DoubleDataFrameColumn Add(double value);
    public DoubleDataFrameColumn ReverseAdd(double value);
    public DoubleDataFrameColumn Subtract(double value);
    public DoubleDataFrameColumn ReverseSubtract(double value);
    public DoubleDataFrameColumn Multiply(double value);
    public DoubleDataFrameColumn ReverseMultiply(double value);
    public DoubleDataFrameColumn Divide(double value);
    public DoubleDataFrameColumn ReverseDivide(double value);
    public DoubleDataFrameColumn Modulo(double value);
    public DoubleDataFrameColumn ReverseModulo(double value);
    public SingleDataFrameColumn Add(float value);
    public SingleDataFrameColumn ReverseAdd(float value);
    public SingleDataFrameColumn Subtract(float value);
    public SingleDataFrameColumn ReverseSubtract(float value);
    public SingleDataFrameColumn Multiply(float value);
    public SingleDataFrameColumn ReverseMultiply(float value);
    public SingleDataFrameColumn Divide(float value);
    public SingleDataFrameColumn ReverseDivide(float value);
    public SingleDataFrameColumn Modulo(float value);
    public SingleDataFrameColumn ReverseModulo(float value);
    public SingleDataFrameColumn Add(int value);
    public SingleDataFrameColumn ReverseAdd(int value);
    public SingleDataFrameColumn Subtract(int value);
    public SingleDataFrameColumn ReverseSubtract(int value);
    public SingleDataFrameColumn Multiply(int value);
    public SingleDataFrameColumn ReverseMultiply(int value);
    public SingleDataFrameColumn Divide(int value);
    public SingleDataFrameColumn ReverseDivide(int value);
    public SingleDataFrameColumn Modulo(int value);
    public SingleDataFrameColumn ReverseModulo(int value);
    public SingleDataFrameColumn Add(sbyte value);
    public SingleDataFrameColumn ReverseAdd(sbyte value);
    public SingleDataFrameColumn Subtract(sbyte value);
    public SingleDataFrameColumn ReverseSubtract(sbyte value);
    public SingleDataFrameColumn Multiply(sbyte value);
    public SingleDataFrameColumn ReverseMultiply(sbyte value);
    public SingleDataFrameColumn Divide(sbyte value);
    public SingleDataFrameColumn ReverseDivide(sbyte value);
    public SingleDataFrameColumn Modulo(sbyte value);
    public SingleDataFrameColumn ReverseModulo(sbyte value);
    public SingleDataFrameColumn Add(short value);
    public SingleDataFrameColumn ReverseAdd(short value);
    public SingleDataFrameColumn Subtract(short value);
    public SingleDataFrameColumn ReverseSubtract(short value);
    public SingleDataFrameColumn Multiply(short value);
    public SingleDataFrameColumn ReverseMultiply(short value);
    public SingleDataFrameColumn Divide(short value);
    public SingleDataFrameColumn ReverseDivide(short value);
    public SingleDataFrameColumn Modulo(short value);
    public SingleDataFrameColumn ReverseModulo(short value);
    public UInt64DataFrameColumn Add(UInt32 value, bool inPlace);
    public UInt64DataFrameColumn ReverseAdd(UInt32 value, bool inPlace);
    public UInt64DataFrameColumn Subtract(UInt32 value, bool inPlace);
    public UInt64DataFrameColumn ReverseSubtract(UInt32 value, bool inPlace);
    public UInt64DataFrameColumn Multiply(UInt32 value, bool inPlace);
    public UInt64DataFrameColumn ReverseMultiply(UInt32 value, bool inPlace);
    public UInt64DataFrameColumn Divide(UInt32 value, bool inPlace);
    public UInt64DataFrameColumn ReverseDivide(UInt32 value, bool inPlace);
    public UInt64DataFrameColumn Modulo(UInt32 value, bool inPlace);
    public UInt64DataFrameColumn ReverseModulo(UInt32 value, bool inPlace);
    public UInt64DataFrameColumn Add(ulong value, bool inPlace);
    public UInt64DataFrameColumn ReverseAdd(ulong value, bool inPlace);
    public UInt64DataFrameColumn Subtract(ulong value, bool inPlace);
    public UInt64DataFrameColumn ReverseSubtract(ulong value, bool inPlace);
    public UInt64DataFrameColumn Multiply(ulong value, bool inPlace);
    public UInt64DataFrameColumn ReverseMultiply(ulong value, bool inPlace);
    public UInt64DataFrameColumn Divide(ulong value, bool inPlace);
    public UInt64DataFrameColumn ReverseDivide(ulong value, bool inPlace);
    public UInt64DataFrameColumn Modulo(ulong value, bool inPlace);
    public UInt64DataFrameColumn ReverseModulo(ulong value, bool inPlace);
    public UInt64DataFrameColumn Add(ushort value, bool inPlace);
    public UInt64DataFrameColumn ReverseAdd(ushort value, bool inPlace);
    public UInt64DataFrameColumn Subtract(ushort value, bool inPlace);
    public UInt64DataFrameColumn ReverseSubtract(ushort value, bool inPlace);
    public UInt64DataFrameColumn Multiply(ushort value, bool inPlace);
    public UInt64DataFrameColumn ReverseMultiply(ushort value, bool inPlace);
    public UInt64DataFrameColumn Divide(ushort value, bool inPlace);
    public UInt64DataFrameColumn ReverseDivide(ushort value, bool inPlace);
    public UInt64DataFrameColumn Modulo(ushort value, bool inPlace);
    public UInt64DataFrameColumn ReverseModulo(ushort value, bool inPlace);
    public BooleanDataFrameColumn ElementwiseEquals(ByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(ByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(ByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(ByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(ByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(ByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(DecimalDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(DecimalDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(DecimalDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(DecimalDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(DecimalDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(DecimalDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(DoubleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(DoubleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(DoubleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(DoubleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(DoubleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(DoubleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(SingleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(SingleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(SingleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(SingleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(SingleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(SingleDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(Int32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(Int32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(Int32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(Int32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(Int32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(Int32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(SByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(SByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(SByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(SByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(SByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(SByteDataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(Int16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(Int16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(Int16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(Int16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(Int16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(Int16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(UInt32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(UInt32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(UInt32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(UInt32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(UInt32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(UInt32DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(UInt64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(UInt64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(UInt64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(UInt64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(UInt64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(UInt64DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(UInt16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseNotEquals(UInt16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(UInt16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(UInt16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseGreaterThan(UInt16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseLessThan(UInt16DataFrameColumn column);
    public BooleanDataFrameColumn ElementwiseEquals(byte value);
    public BooleanDataFrameColumn ElementwiseNotEquals(byte value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(byte value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(byte value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(byte value);
    public BooleanDataFrameColumn ElementwiseLessThan(byte value);
    public BooleanDataFrameColumn ElementwiseEquals(decimal value);
    public BooleanDataFrameColumn ElementwiseNotEquals(decimal value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(decimal value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(decimal value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(decimal value);
    public BooleanDataFrameColumn ElementwiseLessThan(decimal value);
    public BooleanDataFrameColumn ElementwiseEquals(double value);
    public BooleanDataFrameColumn ElementwiseNotEquals(double value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(double value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(double value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(double value);
    public BooleanDataFrameColumn ElementwiseLessThan(double value);
    public BooleanDataFrameColumn ElementwiseEquals(float value);
    public BooleanDataFrameColumn ElementwiseNotEquals(float value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(float value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(float value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(float value);
    public BooleanDataFrameColumn ElementwiseLessThan(float value);
    public BooleanDataFrameColumn ElementwiseEquals(int value);
    public BooleanDataFrameColumn ElementwiseNotEquals(int value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(int value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(int value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(int value);
    public BooleanDataFrameColumn ElementwiseLessThan(int value);
    public BooleanDataFrameColumn ElementwiseEquals(sbyte value);
    public BooleanDataFrameColumn ElementwiseNotEquals(sbyte value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(sbyte value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(sbyte value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(sbyte value);
    public BooleanDataFrameColumn ElementwiseLessThan(sbyte value);
    public BooleanDataFrameColumn ElementwiseEquals(short value);
    public BooleanDataFrameColumn ElementwiseNotEquals(short value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(short value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(short value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(short value);
    public BooleanDataFrameColumn ElementwiseLessThan(short value);
    public BooleanDataFrameColumn ElementwiseEquals(UInt32 value);
    public BooleanDataFrameColumn ElementwiseNotEquals(UInt32 value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(UInt32 value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(UInt32 value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(UInt32 value);
    public BooleanDataFrameColumn ElementwiseLessThan(UInt32 value);
    public BooleanDataFrameColumn ElementwiseEquals(ulong value);
    public BooleanDataFrameColumn ElementwiseNotEquals(ulong value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(ulong value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(ulong value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(ulong value);
    public BooleanDataFrameColumn ElementwiseLessThan(ulong value);
    public BooleanDataFrameColumn ElementwiseEquals(ushort value);
    public BooleanDataFrameColumn ElementwiseNotEquals(ushort value);
    public BooleanDataFrameColumn ElementwiseGreaterThanOrEqual(ushort value);
    public BooleanDataFrameColumn ElementwiseLessThanOrEqual(ushort value);
    public BooleanDataFrameColumn ElementwiseGreaterThan(ushort value);
    public BooleanDataFrameColumn ElementwiseLessThan(ushort value);
    public UInt64DataFrameColumn LeftShift(int value, bool inPlace);
    public UInt64DataFrameColumn RightShift(int value, bool inPlace);
    internal UInt64DataFrameColumn AddImplementation(UInt64DataFrameColumn column, bool inPlace);
    internal UInt64DataFrameColumn AddImplementation(ulong value, bool inPlace);
    internal UInt64DataFrameColumn ReverseAddImplementation(ulong value, bool inPlace);
    internal UInt64DataFrameColumn SubtractImplementation(UInt64DataFrameColumn column, bool inPlace);
    internal UInt64DataFrameColumn SubtractImplementation(ulong value, bool inPlace);
    internal UInt64DataFrameColumn ReverseSubtractImplementation(ulong value, bool inPlace);
    internal UInt64DataFrameColumn MultiplyImplementation(UInt64DataFrameColumn column, bool inPlace);
    internal UInt64DataFrameColumn MultiplyImplementation(ulong value, bool inPlace);
    internal UInt64DataFrameColumn ReverseMultiplyImplementation(ulong value, bool inPlace);
    internal UInt64DataFrameColumn DivideImplementation(UInt64DataFrameColumn column, bool inPlace);
    internal UInt64DataFrameColumn DivideImplementation(ulong value, bool inPlace);
    internal UInt64DataFrameColumn ReverseDivideImplementation(ulong value, bool inPlace);
    internal UInt64DataFrameColumn ModuloImplementation(UInt64DataFrameColumn column, bool inPlace);
    internal UInt64DataFrameColumn ModuloImplementation(ulong value, bool inPlace);
    internal UInt64DataFrameColumn ReverseModuloImplementation(ulong value, bool inPlace);
    internal BooleanDataFrameColumn ElementwiseEqualsImplementation(UInt64DataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseEqualsImplementation(ulong value);
    internal BooleanDataFrameColumn ElementwiseNotEqualsImplementation(UInt64DataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseNotEqualsImplementation(ulong value);
    internal BooleanDataFrameColumn ElementwiseGreaterThanOrEqualImplementation(UInt64DataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseGreaterThanOrEqualImplementation(ulong value);
    internal BooleanDataFrameColumn ElementwiseLessThanOrEqualImplementation(UInt64DataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseLessThanOrEqualImplementation(ulong value);
    internal BooleanDataFrameColumn ElementwiseGreaterThanImplementation(UInt64DataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseGreaterThanImplementation(ulong value);
    internal BooleanDataFrameColumn ElementwiseLessThanImplementation(UInt64DataFrameColumn column);
    internal BooleanDataFrameColumn ElementwiseLessThanImplementation(ulong value);
    public static UInt64DataFrameColumn op_Addition(UInt64DataFrameColumn left, ByteDataFrameColumn right);
    public static DecimalDataFrameColumn op_Addition(UInt64DataFrameColumn left, DecimalDataFrameColumn right);
    public static DoubleDataFrameColumn op_Addition(UInt64DataFrameColumn left, DoubleDataFrameColumn right);
    public static SingleDataFrameColumn op_Addition(UInt64DataFrameColumn left, SingleDataFrameColumn right);
    public static SingleDataFrameColumn op_Addition(UInt64DataFrameColumn left, Int32DataFrameColumn right);
    public static SingleDataFrameColumn op_Addition(UInt64DataFrameColumn left, SByteDataFrameColumn right);
    public static SingleDataFrameColumn op_Addition(UInt64DataFrameColumn left, Int16DataFrameColumn right);
    public static UInt64DataFrameColumn op_Addition(UInt64DataFrameColumn left, UInt32DataFrameColumn right);
    public static UInt64DataFrameColumn op_Addition(UInt64DataFrameColumn left, UInt64DataFrameColumn right);
    public static UInt64DataFrameColumn op_Addition(UInt64DataFrameColumn left, UInt16DataFrameColumn right);
    public static UInt64DataFrameColumn op_Addition(UInt64DataFrameColumn left, byte right);
    public static UInt64DataFrameColumn op_Addition(byte left, UInt64DataFrameColumn right);
    public static DecimalDataFrameColumn op_Addition(UInt64DataFrameColumn left, decimal right);
    public static DecimalDataFrameColumn op_Addition(decimal left, UInt64DataFrameColumn right);
    public static DoubleDataFrameColumn op_Addition(UInt64DataFrameColumn left, double right);
    public static DoubleDataFrameColumn op_Addition(double left, UInt64DataFrameColumn right);
    public static SingleDataFrameColumn op_Addition(UInt64DataFrameColumn left, float right);
    public static SingleDataFrameColumn op_Addition(float left, UInt64DataFrameColumn right);
    public static SingleDataFrameColumn op_Addition(UInt64DataFrameColumn left, int right);
    public static SingleDataFrameColumn op_Addition(int left, UInt64DataFrameColumn right);
    public static SingleDataFrameColumn op_Addition(UInt64DataFrameColumn left, sbyte right);
    public static SingleDataFrameColumn op_Addition(sbyte left, UInt64DataFrameColumn right);
    public static SingleDataFrameColumn op_Addition(UInt64DataFrameColumn left, short right);
    public static SingleDataFrameColumn op_Addition(short left, UInt64DataFrameColumn right);
    public static UInt64DataFrameColumn op_Addition(UInt64DataFrameColumn left, UInt32 right);
    public static UInt64DataFrameColumn op_Addition(UInt32 left, UInt64DataFrameColumn right);
    public static UInt64DataFrameColumn op_Addition(UInt64DataFrameColumn left, ulong right);
    public static UInt64DataFrameColumn op_Addition(ulong left, UInt64DataFrameColumn right);
    public static UInt64DataFrameColumn op_Addition(UInt64DataFrameColumn left, ushort right);
    public static UInt64DataFrameColumn op_Addition(ushort left, UInt64DataFrameColumn right);
    public static UInt64DataFrameColumn op_Subtraction(UInt64DataFrameColumn left, ByteDataFrameColumn right);
    public static DecimalDataFrameColumn op_Subtraction(UInt64DataFrameColumn left, DecimalDataFrameColumn right);
    public static DoubleDataFrameColumn op_Subtraction(UInt64DataFrameColumn left, DoubleDataFrameColumn right);
    public static SingleDataFrameColumn op_Subtraction(UInt64DataFrameColumn left, SingleDataFrameColumn right);
    public static SingleDataFrameColumn op_Subtraction(UInt64DataFrameColumn left, Int32DataFrameColumn right);
    public static SingleDataFrameColumn op_Subtraction(UInt64DataFrameColumn left, SByteDataFrameColumn right);
    public static SingleDataFrameColumn op_Subtraction(UInt64DataFrameColumn left, Int16DataFrameColumn right);
    public static UInt64DataFrameColumn op_Subtraction(UInt64DataFrameColumn left, UInt32DataFrameColumn right);
    public static UInt64DataFrameColumn op_Subtraction(UInt64DataFrameColumn left, UInt64DataFrameColumn right);
    public static UInt64DataFrameColumn op_Subtraction(UInt64DataFrameColumn left, UInt16DataFrameColumn right);
    public static UInt64DataFrameColumn op_Subtraction(UInt64DataFrameColumn left, byte right);
    public static UInt64DataFrameColumn op_Subtraction(byte left, UInt64DataFrameColumn right);
    public static DecimalDataFrameColumn op_Subtraction(UInt64DataFrameColumn left, decimal right);
    public static DecimalDataFrameColumn op_Subtraction(decimal left, UInt64DataFrameColumn right);
    public static DoubleDataFrameColumn op_Subtraction(UInt64DataFrameColumn left, double right);
    public static DoubleDataFrameColumn op_Subtraction(double left, UInt64DataFrameColumn right);
    public static SingleDataFrameColumn op_Subtraction(UInt64DataFrameColumn left, float right);
    public static SingleDataFrameColumn op_Subtraction(float left, UInt64DataFrameColumn right);
    public static SingleDataFrameColumn op_Subtraction(UInt64DataFrameColumn left, int right);
    public static SingleDataFrameColumn op_Subtraction(int left, UInt64DataFrameColumn right);
    public static SingleDataFrameColumn op_Subtraction(UInt64DataFrameColumn left, sbyte right);
    public static SingleDataFrameColumn op_Subtraction(sbyte left, UInt64DataFrameColumn right);
    public static SingleDataFrameColumn op_Subtraction(UInt64DataFrameColumn left, short right);
    public static SingleDataFrameColumn op_Subtraction(short left, UInt64DataFrameColumn right);
    public static UInt64DataFrameColumn op_Subtraction(UInt64DataFrameColumn left, UInt32 right);
    public static UInt64DataFrameColumn op_Subtraction(UInt32 left, UInt64DataFrameColumn right);
    public static UInt64DataFrameColumn op_Subtraction(UInt64DataFrameColumn left, ulong right);
    public static UInt64DataFrameColumn op_Subtraction(ulong left, UInt64DataFrameColumn right);
    public static UInt64DataFrameColumn op_Subtraction(UInt64DataFrameColumn left, ushort right);
    public static UInt64DataFrameColumn op_Subtraction(ushort left, UInt64DataFrameColumn right);
    public static UInt64DataFrameColumn op_Multiply(UInt64DataFrameColumn left, ByteDataFrameColumn right);
    public static DecimalDataFrameColumn op_Multiply(UInt64DataFrameColumn left, DecimalDataFrameColumn right);
    public static DoubleDataFrameColumn op_Multiply(UInt64DataFrameColumn left, DoubleDataFrameColumn right);
    public static SingleDataFrameColumn op_Multiply(UInt64DataFrameColumn left, SingleDataFrameColumn right);
    public static SingleDataFrameColumn op_Multiply(UInt64DataFrameColumn left, Int32DataFrameColumn right);
    public static SingleDataFrameColumn op_Multiply(UInt64DataFrameColumn left, SByteDataFrameColumn right);
    public static SingleDataFrameColumn op_Multiply(UInt64DataFrameColumn left, Int16DataFrameColumn right);
    public static UInt64DataFrameColumn op_Multiply(UInt64DataFrameColumn left, UInt32DataFrameColumn right);
    public static UInt64DataFrameColumn op_Multiply(UInt64DataFrameColumn left, UInt64DataFrameColumn right);
    public static UInt64DataFrameColumn op_Multiply(UInt64DataFrameColumn left, UInt16DataFrameColumn right);
    public static UInt64DataFrameColumn op_Multiply(UInt64DataFrameColumn left, byte right);
    public static UInt64DataFrameColumn op_Multiply(byte left, UInt64DataFrameColumn right);
    public static DecimalDataFrameColumn op_Multiply(UInt64DataFrameColumn left, decimal right);
    public static DecimalDataFrameColumn op_Multiply(decimal left, UInt64DataFrameColumn right);
    public static DoubleDataFrameColumn op_Multiply(UInt64DataFrameColumn left, double right);
    public static DoubleDataFrameColumn op_Multiply(double left, UInt64DataFrameColumn right);
    public static SingleDataFrameColumn op_Multiply(UInt64DataFrameColumn left, float right);
    public static SingleDataFrameColumn op_Multiply(float left, UInt64DataFrameColumn right);
    public static SingleDataFrameColumn op_Multiply(UInt64DataFrameColumn left, int right);
    public static SingleDataFrameColumn op_Multiply(int left, UInt64DataFrameColumn right);
    public static SingleDataFrameColumn op_Multiply(UInt64DataFrameColumn left, sbyte right);
    public static SingleDataFrameColumn op_Multiply(sbyte left, UInt64DataFrameColumn right);
    public static SingleDataFrameColumn op_Multiply(UInt64DataFrameColumn left, short right);
    public static SingleDataFrameColumn op_Multiply(short left, UInt64DataFrameColumn right);
    public static UInt64DataFrameColumn op_Multiply(UInt64DataFrameColumn left, UInt32 right);
    public static UInt64DataFrameColumn op_Multiply(UInt32 left, UInt64DataFrameColumn right);
    public static UInt64DataFrameColumn op_Multiply(UInt64DataFrameColumn left, ulong right);
    public static UInt64DataFrameColumn op_Multiply(ulong left, UInt64DataFrameColumn right);
    public static UInt64DataFrameColumn op_Multiply(UInt64DataFrameColumn left, ushort right);
    public static UInt64DataFrameColumn op_Multiply(ushort left, UInt64DataFrameColumn right);
    public static UInt64DataFrameColumn op_Division(UInt64DataFrameColumn left, ByteDataFrameColumn right);
    public static DecimalDataFrameColumn op_Division(UInt64DataFrameColumn left, DecimalDataFrameColumn right);
    public static DoubleDataFrameColumn op_Division(UInt64DataFrameColumn left, DoubleDataFrameColumn right);
    public static SingleDataFrameColumn op_Division(UInt64DataFrameColumn left, SingleDataFrameColumn right);
    public static SingleDataFrameColumn op_Division(UInt64DataFrameColumn left, Int32DataFrameColumn right);
    public static SingleDataFrameColumn op_Division(UInt64DataFrameColumn left, SByteDataFrameColumn right);
    public static SingleDataFrameColumn op_Division(UInt64DataFrameColumn left, Int16DataFrameColumn right);
    public static UInt64DataFrameColumn op_Division(UInt64DataFrameColumn left, UInt32DataFrameColumn right);
    public static UInt64DataFrameColumn op_Division(UInt64DataFrameColumn left, UInt64DataFrameColumn right);
    public static UInt64DataFrameColumn op_Division(UInt64DataFrameColumn left, UInt16DataFrameColumn right);
    public static UInt64DataFrameColumn op_Division(UInt64DataFrameColumn left, byte right);
    public static UInt64DataFrameColumn op_Division(byte left, UInt64DataFrameColumn right);
    public static DecimalDataFrameColumn op_Division(UInt64DataFrameColumn left, decimal right);
    public static DecimalDataFrameColumn op_Division(decimal left, UInt64DataFrameColumn right);
    public static DoubleDataFrameColumn op_Division(UInt64DataFrameColumn left, double right);
    public static DoubleDataFrameColumn op_Division(double left, UInt64DataFrameColumn right);
    public static SingleDataFrameColumn op_Division(UInt64DataFrameColumn left, float right);
    public static SingleDataFrameColumn op_Division(float left, UInt64DataFrameColumn right);
    public static SingleDataFrameColumn op_Division(UInt64DataFrameColumn left, int right);
    public static SingleDataFrameColumn op_Division(int left, UInt64DataFrameColumn right);
    public static SingleDataFrameColumn op_Division(UInt64DataFrameColumn left, sbyte right);
    public static SingleDataFrameColumn op_Division(sbyte left, UInt64DataFrameColumn right);
    public static SingleDataFrameColumn op_Division(UInt64DataFrameColumn left, short right);
    public static SingleDataFrameColumn op_Division(short left, UInt64DataFrameColumn right);
    public static UInt64DataFrameColumn op_Division(UInt64DataFrameColumn left, UInt32 right);
    public static UInt64DataFrameColumn op_Division(UInt32 left, UInt64DataFrameColumn right);
    public static UInt64DataFrameColumn op_Division(UInt64DataFrameColumn left, ulong right);
    public static UInt64DataFrameColumn op_Division(ulong left, UInt64DataFrameColumn right);
    public static UInt64DataFrameColumn op_Division(UInt64DataFrameColumn left, ushort right);
    public static UInt64DataFrameColumn op_Division(ushort left, UInt64DataFrameColumn right);
    public static UInt64DataFrameColumn op_Modulus(UInt64DataFrameColumn left, ByteDataFrameColumn right);
    public static DecimalDataFrameColumn op_Modulus(UInt64DataFrameColumn left, DecimalDataFrameColumn right);
    public static DoubleDataFrameColumn op_Modulus(UInt64DataFrameColumn left, DoubleDataFrameColumn right);
    public static SingleDataFrameColumn op_Modulus(UInt64DataFrameColumn left, SingleDataFrameColumn right);
    public static SingleDataFrameColumn op_Modulus(UInt64DataFrameColumn left, Int32DataFrameColumn right);
    public static SingleDataFrameColumn op_Modulus(UInt64DataFrameColumn left, SByteDataFrameColumn right);
    public static SingleDataFrameColumn op_Modulus(UInt64DataFrameColumn left, Int16DataFrameColumn right);
    public static UInt64DataFrameColumn op_Modulus(UInt64DataFrameColumn left, UInt32DataFrameColumn right);
    public static UInt64DataFrameColumn op_Modulus(UInt64DataFrameColumn left, UInt64DataFrameColumn right);
    public static UInt64DataFrameColumn op_Modulus(UInt64DataFrameColumn left, UInt16DataFrameColumn right);
    public static UInt64DataFrameColumn op_Modulus(UInt64DataFrameColumn left, byte right);
    public static UInt64DataFrameColumn op_Modulus(byte left, UInt64DataFrameColumn right);
    public static DecimalDataFrameColumn op_Modulus(UInt64DataFrameColumn left, decimal right);
    public static DecimalDataFrameColumn op_Modulus(decimal left, UInt64DataFrameColumn right);
    public static DoubleDataFrameColumn op_Modulus(UInt64DataFrameColumn left, double right);
    public static DoubleDataFrameColumn op_Modulus(double left, UInt64DataFrameColumn right);
    public static SingleDataFrameColumn op_Modulus(UInt64DataFrameColumn left, float right);
    public static SingleDataFrameColumn op_Modulus(float left, UInt64DataFrameColumn right);
    public static SingleDataFrameColumn op_Modulus(UInt64DataFrameColumn left, int right);
    public static SingleDataFrameColumn op_Modulus(int left, UInt64DataFrameColumn right);
    public static SingleDataFrameColumn op_Modulus(UInt64DataFrameColumn left, sbyte right);
    public static SingleDataFrameColumn op_Modulus(sbyte left, UInt64DataFrameColumn right);
    public static SingleDataFrameColumn op_Modulus(UInt64DataFrameColumn left, short right);
    public static SingleDataFrameColumn op_Modulus(short left, UInt64DataFrameColumn right);
    public static UInt64DataFrameColumn op_Modulus(UInt64DataFrameColumn left, UInt32 right);
    public static UInt64DataFrameColumn op_Modulus(UInt32 left, UInt64DataFrameColumn right);
    public static UInt64DataFrameColumn op_Modulus(UInt64DataFrameColumn left, ulong right);
    public static UInt64DataFrameColumn op_Modulus(ulong left, UInt64DataFrameColumn right);
    public static UInt64DataFrameColumn op_Modulus(UInt64DataFrameColumn left, ushort right);
    public static UInt64DataFrameColumn op_Modulus(ushort left, UInt64DataFrameColumn right);
    public static UInt64DataFrameColumn op_LeftShift(UInt64DataFrameColumn left, int value);
    public static UInt64DataFrameColumn op_RightShift(UInt64DataFrameColumn left, int value);
}
internal class Microsoft.Data.Analysis.UInt64DecimalConverter : object {
    public sealed virtual decimal GetDecimal(ulong value);
}
internal class Microsoft.Data.Analysis.UInt64DoubleConverter : object {
    public sealed virtual double GetDouble(ulong value);
}
internal class Microsoft.Data.Analysis.UInt64Int64Converter : object {
    public sealed virtual long GetInt64(ulong value);
}
internal class Microsoft.Data.Analysis.UInt64SingleConverter : object {
    public sealed virtual float GetSingle(ulong value);
}
internal class Microsoft.Data.Analysis.UInt64UInt64Converter : object {
    public sealed virtual ulong GetUInt64(ulong value);
}
internal class Microsoft.Data.Analysis.UIntArithmetic : object {
    public sealed virtual void Add(PrimitiveColumnContainer`1<UInt32> left, PrimitiveColumnContainer`1<UInt32> right);
    public sealed virtual void Add(PrimitiveColumnContainer`1<UInt32> column, UInt32 scalar);
    public sealed virtual void Add(UInt32 scalar, PrimitiveColumnContainer`1<UInt32> column);
    public sealed virtual void Subtract(PrimitiveColumnContainer`1<UInt32> left, PrimitiveColumnContainer`1<UInt32> right);
    public sealed virtual void Subtract(PrimitiveColumnContainer`1<UInt32> column, UInt32 scalar);
    public sealed virtual void Subtract(UInt32 scalar, PrimitiveColumnContainer`1<UInt32> column);
    public sealed virtual void Multiply(PrimitiveColumnContainer`1<UInt32> left, PrimitiveColumnContainer`1<UInt32> right);
    public sealed virtual void Multiply(PrimitiveColumnContainer`1<UInt32> column, UInt32 scalar);
    public sealed virtual void Multiply(UInt32 scalar, PrimitiveColumnContainer`1<UInt32> column);
    public sealed virtual void Divide(PrimitiveColumnContainer`1<UInt32> left, PrimitiveColumnContainer`1<UInt32> right);
    public sealed virtual void Divide(PrimitiveColumnContainer`1<UInt32> column, UInt32 scalar);
    public sealed virtual void Divide(UInt32 scalar, PrimitiveColumnContainer`1<UInt32> column);
    public sealed virtual void Modulo(PrimitiveColumnContainer`1<UInt32> left, PrimitiveColumnContainer`1<UInt32> right);
    public sealed virtual void Modulo(PrimitiveColumnContainer`1<UInt32> column, UInt32 scalar);
    public sealed virtual void Modulo(UInt32 scalar, PrimitiveColumnContainer`1<UInt32> column);
    public sealed virtual void And(PrimitiveColumnContainer`1<UInt32> left, PrimitiveColumnContainer`1<UInt32> right);
    public sealed virtual void And(PrimitiveColumnContainer`1<UInt32> column, UInt32 scalar);
    public sealed virtual void And(UInt32 scalar, PrimitiveColumnContainer`1<UInt32> column);
    public sealed virtual void Or(PrimitiveColumnContainer`1<UInt32> left, PrimitiveColumnContainer`1<UInt32> right);
    public sealed virtual void Or(PrimitiveColumnContainer`1<UInt32> column, UInt32 scalar);
    public sealed virtual void Or(UInt32 scalar, PrimitiveColumnContainer`1<UInt32> column);
    public sealed virtual void Xor(PrimitiveColumnContainer`1<UInt32> left, PrimitiveColumnContainer`1<UInt32> right);
    public sealed virtual void Xor(PrimitiveColumnContainer`1<UInt32> column, UInt32 scalar);
    public sealed virtual void Xor(UInt32 scalar, PrimitiveColumnContainer`1<UInt32> column);
    public sealed virtual void LeftShift(PrimitiveColumnContainer`1<UInt32> column, int value);
    public sealed virtual void RightShift(PrimitiveColumnContainer`1<UInt32> column, int value);
    public sealed virtual void ElementwiseEquals(PrimitiveColumnContainer`1<UInt32> left, PrimitiveColumnContainer`1<UInt32> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseEquals(PrimitiveColumnContainer`1<UInt32> column, UInt32 scalar, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseNotEquals(PrimitiveColumnContainer`1<UInt32> left, PrimitiveColumnContainer`1<UInt32> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseNotEquals(PrimitiveColumnContainer`1<UInt32> column, UInt32 scalar, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseGreaterThanOrEqual(PrimitiveColumnContainer`1<UInt32> left, PrimitiveColumnContainer`1<UInt32> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseGreaterThanOrEqual(PrimitiveColumnContainer`1<UInt32> column, UInt32 scalar, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseLessThanOrEqual(PrimitiveColumnContainer`1<UInt32> left, PrimitiveColumnContainer`1<UInt32> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseLessThanOrEqual(PrimitiveColumnContainer`1<UInt32> column, UInt32 scalar, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseGreaterThan(PrimitiveColumnContainer`1<UInt32> left, PrimitiveColumnContainer`1<UInt32> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseGreaterThan(PrimitiveColumnContainer`1<UInt32> column, UInt32 scalar, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseLessThan(PrimitiveColumnContainer`1<UInt32> left, PrimitiveColumnContainer`1<UInt32> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseLessThan(PrimitiveColumnContainer`1<UInt32> column, UInt32 scalar, PrimitiveColumnContainer`1<bool> ret);
}
internal class Microsoft.Data.Analysis.UIntComputation : object {
    public sealed virtual void Abs(PrimitiveColumnContainer`1<UInt32> column);
    public sealed virtual void All(PrimitiveColumnContainer`1<UInt32> column, Boolean& ret);
    public sealed virtual void Any(PrimitiveColumnContainer`1<UInt32> column, Boolean& ret);
    public sealed virtual void CumulativeMax(PrimitiveColumnContainer`1<UInt32> column);
    public sealed virtual void CumulativeMax(PrimitiveColumnContainer`1<UInt32> column, IEnumerable`1<long> rows);
    public sealed virtual void CumulativeMin(PrimitiveColumnContainer`1<UInt32> column);
    public sealed virtual void CumulativeMin(PrimitiveColumnContainer`1<UInt32> column, IEnumerable`1<long> rows);
    public sealed virtual void CumulativeProduct(PrimitiveColumnContainer`1<UInt32> column);
    public sealed virtual void CumulativeProduct(PrimitiveColumnContainer`1<UInt32> column, IEnumerable`1<long> rows);
    public sealed virtual void CumulativeSum(PrimitiveColumnContainer`1<UInt32> column);
    public sealed virtual void CumulativeSum(PrimitiveColumnContainer`1<UInt32> column, IEnumerable`1<long> rows);
    public sealed virtual void Max(PrimitiveColumnContainer`1<UInt32> column, UInt32& ret);
    public sealed virtual void Max(PrimitiveColumnContainer`1<UInt32> column, IEnumerable`1<long> rows, UInt32& ret);
    public sealed virtual void Min(PrimitiveColumnContainer`1<UInt32> column, UInt32& ret);
    public sealed virtual void Min(PrimitiveColumnContainer`1<UInt32> column, IEnumerable`1<long> rows, UInt32& ret);
    public sealed virtual void Product(PrimitiveColumnContainer`1<UInt32> column, UInt32& ret);
    public sealed virtual void Product(PrimitiveColumnContainer`1<UInt32> column, IEnumerable`1<long> rows, UInt32& ret);
    public sealed virtual void Sum(PrimitiveColumnContainer`1<UInt32> column, UInt32& ret);
    public sealed virtual void Sum(PrimitiveColumnContainer`1<UInt32> column, IEnumerable`1<long> rows, UInt32& ret);
    public sealed virtual void Round(PrimitiveColumnContainer`1<UInt32> column);
}
internal class Microsoft.Data.Analysis.ULongArithmetic : object {
    public sealed virtual void Add(PrimitiveColumnContainer`1<ulong> left, PrimitiveColumnContainer`1<ulong> right);
    public sealed virtual void Add(PrimitiveColumnContainer`1<ulong> column, ulong scalar);
    public sealed virtual void Add(ulong scalar, PrimitiveColumnContainer`1<ulong> column);
    public sealed virtual void Subtract(PrimitiveColumnContainer`1<ulong> left, PrimitiveColumnContainer`1<ulong> right);
    public sealed virtual void Subtract(PrimitiveColumnContainer`1<ulong> column, ulong scalar);
    public sealed virtual void Subtract(ulong scalar, PrimitiveColumnContainer`1<ulong> column);
    public sealed virtual void Multiply(PrimitiveColumnContainer`1<ulong> left, PrimitiveColumnContainer`1<ulong> right);
    public sealed virtual void Multiply(PrimitiveColumnContainer`1<ulong> column, ulong scalar);
    public sealed virtual void Multiply(ulong scalar, PrimitiveColumnContainer`1<ulong> column);
    public sealed virtual void Divide(PrimitiveColumnContainer`1<ulong> left, PrimitiveColumnContainer`1<ulong> right);
    public sealed virtual void Divide(PrimitiveColumnContainer`1<ulong> column, ulong scalar);
    public sealed virtual void Divide(ulong scalar, PrimitiveColumnContainer`1<ulong> column);
    public sealed virtual void Modulo(PrimitiveColumnContainer`1<ulong> left, PrimitiveColumnContainer`1<ulong> right);
    public sealed virtual void Modulo(PrimitiveColumnContainer`1<ulong> column, ulong scalar);
    public sealed virtual void Modulo(ulong scalar, PrimitiveColumnContainer`1<ulong> column);
    public sealed virtual void And(PrimitiveColumnContainer`1<ulong> left, PrimitiveColumnContainer`1<ulong> right);
    public sealed virtual void And(PrimitiveColumnContainer`1<ulong> column, ulong scalar);
    public sealed virtual void And(ulong scalar, PrimitiveColumnContainer`1<ulong> column);
    public sealed virtual void Or(PrimitiveColumnContainer`1<ulong> left, PrimitiveColumnContainer`1<ulong> right);
    public sealed virtual void Or(PrimitiveColumnContainer`1<ulong> column, ulong scalar);
    public sealed virtual void Or(ulong scalar, PrimitiveColumnContainer`1<ulong> column);
    public sealed virtual void Xor(PrimitiveColumnContainer`1<ulong> left, PrimitiveColumnContainer`1<ulong> right);
    public sealed virtual void Xor(PrimitiveColumnContainer`1<ulong> column, ulong scalar);
    public sealed virtual void Xor(ulong scalar, PrimitiveColumnContainer`1<ulong> column);
    public sealed virtual void LeftShift(PrimitiveColumnContainer`1<ulong> column, int value);
    public sealed virtual void RightShift(PrimitiveColumnContainer`1<ulong> column, int value);
    public sealed virtual void ElementwiseEquals(PrimitiveColumnContainer`1<ulong> left, PrimitiveColumnContainer`1<ulong> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseEquals(PrimitiveColumnContainer`1<ulong> column, ulong scalar, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseNotEquals(PrimitiveColumnContainer`1<ulong> left, PrimitiveColumnContainer`1<ulong> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseNotEquals(PrimitiveColumnContainer`1<ulong> column, ulong scalar, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseGreaterThanOrEqual(PrimitiveColumnContainer`1<ulong> left, PrimitiveColumnContainer`1<ulong> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseGreaterThanOrEqual(PrimitiveColumnContainer`1<ulong> column, ulong scalar, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseLessThanOrEqual(PrimitiveColumnContainer`1<ulong> left, PrimitiveColumnContainer`1<ulong> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseLessThanOrEqual(PrimitiveColumnContainer`1<ulong> column, ulong scalar, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseGreaterThan(PrimitiveColumnContainer`1<ulong> left, PrimitiveColumnContainer`1<ulong> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseGreaterThan(PrimitiveColumnContainer`1<ulong> column, ulong scalar, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseLessThan(PrimitiveColumnContainer`1<ulong> left, PrimitiveColumnContainer`1<ulong> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseLessThan(PrimitiveColumnContainer`1<ulong> column, ulong scalar, PrimitiveColumnContainer`1<bool> ret);
}
internal class Microsoft.Data.Analysis.ULongComputation : object {
    public sealed virtual void Abs(PrimitiveColumnContainer`1<ulong> column);
    public sealed virtual void All(PrimitiveColumnContainer`1<ulong> column, Boolean& ret);
    public sealed virtual void Any(PrimitiveColumnContainer`1<ulong> column, Boolean& ret);
    public sealed virtual void CumulativeMax(PrimitiveColumnContainer`1<ulong> column);
    public sealed virtual void CumulativeMax(PrimitiveColumnContainer`1<ulong> column, IEnumerable`1<long> rows);
    public sealed virtual void CumulativeMin(PrimitiveColumnContainer`1<ulong> column);
    public sealed virtual void CumulativeMin(PrimitiveColumnContainer`1<ulong> column, IEnumerable`1<long> rows);
    public sealed virtual void CumulativeProduct(PrimitiveColumnContainer`1<ulong> column);
    public sealed virtual void CumulativeProduct(PrimitiveColumnContainer`1<ulong> column, IEnumerable`1<long> rows);
    public sealed virtual void CumulativeSum(PrimitiveColumnContainer`1<ulong> column);
    public sealed virtual void CumulativeSum(PrimitiveColumnContainer`1<ulong> column, IEnumerable`1<long> rows);
    public sealed virtual void Max(PrimitiveColumnContainer`1<ulong> column, UInt64& ret);
    public sealed virtual void Max(PrimitiveColumnContainer`1<ulong> column, IEnumerable`1<long> rows, UInt64& ret);
    public sealed virtual void Min(PrimitiveColumnContainer`1<ulong> column, UInt64& ret);
    public sealed virtual void Min(PrimitiveColumnContainer`1<ulong> column, IEnumerable`1<long> rows, UInt64& ret);
    public sealed virtual void Product(PrimitiveColumnContainer`1<ulong> column, UInt64& ret);
    public sealed virtual void Product(PrimitiveColumnContainer`1<ulong> column, IEnumerable`1<long> rows, UInt64& ret);
    public sealed virtual void Sum(PrimitiveColumnContainer`1<ulong> column, UInt64& ret);
    public sealed virtual void Sum(PrimitiveColumnContainer`1<ulong> column, IEnumerable`1<long> rows, UInt64& ret);
    public sealed virtual void Round(PrimitiveColumnContainer`1<ulong> column);
}
internal class Microsoft.Data.Analysis.UShortArithmetic : object {
    public sealed virtual void Add(PrimitiveColumnContainer`1<ushort> left, PrimitiveColumnContainer`1<ushort> right);
    public sealed virtual void Add(PrimitiveColumnContainer`1<ushort> column, ushort scalar);
    public sealed virtual void Add(ushort scalar, PrimitiveColumnContainer`1<ushort> column);
    public sealed virtual void Subtract(PrimitiveColumnContainer`1<ushort> left, PrimitiveColumnContainer`1<ushort> right);
    public sealed virtual void Subtract(PrimitiveColumnContainer`1<ushort> column, ushort scalar);
    public sealed virtual void Subtract(ushort scalar, PrimitiveColumnContainer`1<ushort> column);
    public sealed virtual void Multiply(PrimitiveColumnContainer`1<ushort> left, PrimitiveColumnContainer`1<ushort> right);
    public sealed virtual void Multiply(PrimitiveColumnContainer`1<ushort> column, ushort scalar);
    public sealed virtual void Multiply(ushort scalar, PrimitiveColumnContainer`1<ushort> column);
    public sealed virtual void Divide(PrimitiveColumnContainer`1<ushort> left, PrimitiveColumnContainer`1<ushort> right);
    public sealed virtual void Divide(PrimitiveColumnContainer`1<ushort> column, ushort scalar);
    public sealed virtual void Divide(ushort scalar, PrimitiveColumnContainer`1<ushort> column);
    public sealed virtual void Modulo(PrimitiveColumnContainer`1<ushort> left, PrimitiveColumnContainer`1<ushort> right);
    public sealed virtual void Modulo(PrimitiveColumnContainer`1<ushort> column, ushort scalar);
    public sealed virtual void Modulo(ushort scalar, PrimitiveColumnContainer`1<ushort> column);
    public sealed virtual void And(PrimitiveColumnContainer`1<ushort> left, PrimitiveColumnContainer`1<ushort> right);
    public sealed virtual void And(PrimitiveColumnContainer`1<ushort> column, ushort scalar);
    public sealed virtual void And(ushort scalar, PrimitiveColumnContainer`1<ushort> column);
    public sealed virtual void Or(PrimitiveColumnContainer`1<ushort> left, PrimitiveColumnContainer`1<ushort> right);
    public sealed virtual void Or(PrimitiveColumnContainer`1<ushort> column, ushort scalar);
    public sealed virtual void Or(ushort scalar, PrimitiveColumnContainer`1<ushort> column);
    public sealed virtual void Xor(PrimitiveColumnContainer`1<ushort> left, PrimitiveColumnContainer`1<ushort> right);
    public sealed virtual void Xor(PrimitiveColumnContainer`1<ushort> column, ushort scalar);
    public sealed virtual void Xor(ushort scalar, PrimitiveColumnContainer`1<ushort> column);
    public sealed virtual void LeftShift(PrimitiveColumnContainer`1<ushort> column, int value);
    public sealed virtual void RightShift(PrimitiveColumnContainer`1<ushort> column, int value);
    public sealed virtual void ElementwiseEquals(PrimitiveColumnContainer`1<ushort> left, PrimitiveColumnContainer`1<ushort> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseEquals(PrimitiveColumnContainer`1<ushort> column, ushort scalar, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseNotEquals(PrimitiveColumnContainer`1<ushort> left, PrimitiveColumnContainer`1<ushort> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseNotEquals(PrimitiveColumnContainer`1<ushort> column, ushort scalar, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseGreaterThanOrEqual(PrimitiveColumnContainer`1<ushort> left, PrimitiveColumnContainer`1<ushort> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseGreaterThanOrEqual(PrimitiveColumnContainer`1<ushort> column, ushort scalar, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseLessThanOrEqual(PrimitiveColumnContainer`1<ushort> left, PrimitiveColumnContainer`1<ushort> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseLessThanOrEqual(PrimitiveColumnContainer`1<ushort> column, ushort scalar, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseGreaterThan(PrimitiveColumnContainer`1<ushort> left, PrimitiveColumnContainer`1<ushort> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseGreaterThan(PrimitiveColumnContainer`1<ushort> column, ushort scalar, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseLessThan(PrimitiveColumnContainer`1<ushort> left, PrimitiveColumnContainer`1<ushort> right, PrimitiveColumnContainer`1<bool> ret);
    public sealed virtual void ElementwiseLessThan(PrimitiveColumnContainer`1<ushort> column, ushort scalar, PrimitiveColumnContainer`1<bool> ret);
}
internal class Microsoft.Data.Analysis.UShortComputation : object {
    public sealed virtual void Abs(PrimitiveColumnContainer`1<ushort> column);
    public sealed virtual void All(PrimitiveColumnContainer`1<ushort> column, Boolean& ret);
    public sealed virtual void Any(PrimitiveColumnContainer`1<ushort> column, Boolean& ret);
    public sealed virtual void CumulativeMax(PrimitiveColumnContainer`1<ushort> column);
    public sealed virtual void CumulativeMax(PrimitiveColumnContainer`1<ushort> column, IEnumerable`1<long> rows);
    public sealed virtual void CumulativeMin(PrimitiveColumnContainer`1<ushort> column);
    public sealed virtual void CumulativeMin(PrimitiveColumnContainer`1<ushort> column, IEnumerable`1<long> rows);
    public sealed virtual void CumulativeProduct(PrimitiveColumnContainer`1<ushort> column);
    public sealed virtual void CumulativeProduct(PrimitiveColumnContainer`1<ushort> column, IEnumerable`1<long> rows);
    public sealed virtual void CumulativeSum(PrimitiveColumnContainer`1<ushort> column);
    public sealed virtual void CumulativeSum(PrimitiveColumnContainer`1<ushort> column, IEnumerable`1<long> rows);
    public sealed virtual void Max(PrimitiveColumnContainer`1<ushort> column, UInt16& ret);
    public sealed virtual void Max(PrimitiveColumnContainer`1<ushort> column, IEnumerable`1<long> rows, UInt16& ret);
    public sealed virtual void Min(PrimitiveColumnContainer`1<ushort> column, UInt16& ret);
    public sealed virtual void Min(PrimitiveColumnContainer`1<ushort> column, IEnumerable`1<long> rows, UInt16& ret);
    public sealed virtual void Product(PrimitiveColumnContainer`1<ushort> column, UInt16& ret);
    public sealed virtual void Product(PrimitiveColumnContainer`1<ushort> column, IEnumerable`1<long> rows, UInt16& ret);
    public sealed virtual void Sum(PrimitiveColumnContainer`1<ushort> column, UInt16& ret);
    public sealed virtual void Sum(PrimitiveColumnContainer`1<ushort> column, IEnumerable`1<long> rows, UInt16& ret);
    public sealed virtual void Round(PrimitiveColumnContainer`1<ushort> column);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.Data.Strings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string BadColumnCast { get; }
    internal static string BadColumnCastDuringGrouping { get; }
    internal static string CannotParseWithDelimiters { get; }
    internal static string CannotParseWithFieldWidths { get; }
    internal static string CannotResizeDown { get; }
    internal static string ColumnIndexOutOfRange { get; }
    internal static string CommentTokenCannotContainWhitespace { get; }
    internal static string DataType { get; }
    internal static string DelimiterCannotBeNewlineChar { get; }
    internal static string DescriptionMethodLength { get; }
    internal static string DuplicateColumnName { get; }
    internal static string EmptyDelimiters { get; }
    internal static string EmptyFieldWidths { get; }
    internal static string EmptyFile { get; }
    internal static string ExceededMaxBufferSize { get; }
    internal static string ExceedsNumberOfColumns { get; }
    internal static string ExceedsNumberOfRows { get; }
    internal static string ExpectedEitherGuessRowsOrDataTypes { get; }
    internal static string FileNotFound { get; }
    internal static string IllegalQuoteDelimiter { get; }
    internal static string ImmutableColumn { get; }
    internal static string InconsistentNullBitMapAndLength { get; }
    internal static string InconsistentNullBitMapAndNullCount { get; }
    internal static string InvalidColumnName { get; }
    internal static string InvalidFieldWidths { get; }
    internal static string LessColumnsThatExpected { get; }
    internal static string LineExceedsMaxLineSize { get; }
    internal static string MapIndicesExceedsColumnLenth { get; }
    internal static string MismatchedColumnLengths { get; }
    internal static string MismatchedColumnValueType { get; }
    internal static string MismatchedRowCount { get; }
    internal static string MismatchedValueType { get; }
    internal static string MultipleMismatchedValueType { get; }
    internal static string NonSeekableStream { get; }
    internal static string NotSupportedColumnType { get; }
    internal static string NullDelimiters { get; }
    internal static string NullFieldWidths { get; }
    internal static string NumericColumnType { get; }
    internal static string PositiveNumberOfCharacters { get; }
    internal static string SpansMultipleBuffers { get; }
    internal static string StreamDoesntSupportReading { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_BadColumnCast();
    internal static string get_BadColumnCastDuringGrouping();
    internal static string get_CannotParseWithDelimiters();
    internal static string get_CannotParseWithFieldWidths();
    internal static string get_CannotResizeDown();
    internal static string get_ColumnIndexOutOfRange();
    internal static string get_CommentTokenCannotContainWhitespace();
    internal static string get_DataType();
    internal static string get_DelimiterCannotBeNewlineChar();
    internal static string get_DescriptionMethodLength();
    internal static string get_DuplicateColumnName();
    internal static string get_EmptyDelimiters();
    internal static string get_EmptyFieldWidths();
    internal static string get_EmptyFile();
    internal static string get_ExceededMaxBufferSize();
    internal static string get_ExceedsNumberOfColumns();
    internal static string get_ExceedsNumberOfRows();
    internal static string get_ExpectedEitherGuessRowsOrDataTypes();
    internal static string get_FileNotFound();
    internal static string get_IllegalQuoteDelimiter();
    internal static string get_ImmutableColumn();
    internal static string get_InconsistentNullBitMapAndLength();
    internal static string get_InconsistentNullBitMapAndNullCount();
    internal static string get_InvalidColumnName();
    internal static string get_InvalidFieldWidths();
    internal static string get_LessColumnsThatExpected();
    internal static string get_LineExceedsMaxLineSize();
    internal static string get_MapIndicesExceedsColumnLenth();
    internal static string get_MismatchedColumnLengths();
    internal static string get_MismatchedColumnValueType();
    internal static string get_MismatchedRowCount();
    internal static string get_MismatchedValueType();
    internal static string get_MultipleMismatchedValueType();
    internal static string get_NonSeekableStream();
    internal static string get_NotSupportedColumnType();
    internal static string get_NullDelimiters();
    internal static string get_NullFieldWidths();
    internal static string get_NumericColumnType();
    internal static string get_PositiveNumberOfCharacters();
    internal static string get_SpansMultipleBuffers();
    internal static string get_StreamDoesntSupportReading();
}
[ExtensionAttribute]
public static class Microsoft.ML.IDataViewExtensions : object {
    private static int defaultMaxRows;
    [ExtensionAttribute]
public static DataFrame ToDataFrame(IDataView dataView, long maxRows);
    [ExtensionAttribute]
public static DataFrame ToDataFrame(IDataView dataView, String[] selectColumns);
    [ExtensionAttribute]
public static DataFrame ToDataFrame(IDataView dataView, long maxRows, String[] selectColumns);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsUnmanagedAttribute : Attribute {
}
