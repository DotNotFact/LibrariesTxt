[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class Microsoft.CodeCoverage.Core.Configurations.AttributeList : CachingExcludeIncludeList {
    [CompilerGeneratedAttribute]
private ObservableCollection`1<string> <Excluded>k__BackingField;
    [CompilerGeneratedAttribute]
private ObservableCollection`1<string> <Included>k__BackingField;
    [XmlArrayAttribute("Exclude")]
[XmlArrayItemAttribute("Attribute")]
public ObservableCollection`1<string> Excluded { get; public set; }
    [XmlArrayAttribute("Include")]
[XmlArrayItemAttribute("Attribute")]
public ObservableCollection`1<string> Included { get; public set; }
    [XmlIgnoreAttribute]
protected bool IgnoreCase { get; }
    [CompilerGeneratedAttribute]
public virtual ObservableCollection`1<string> get_Excluded();
    [CompilerGeneratedAttribute]
public virtual void set_Excluded(ObservableCollection`1<string> value);
    [CompilerGeneratedAttribute]
public virtual ObservableCollection`1<string> get_Included();
    [CompilerGeneratedAttribute]
public virtual void set_Included(ObservableCollection`1<string> value);
    protected virtual bool get_IgnoreCase();
}
public abstract class Microsoft.CodeCoverage.Core.Configurations.CachingExcludeIncludeList : ExcludeIncludeList {
    private ConcurrentDictionary`2<string, bool> _includedResults;
    private void Included_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void Excluded_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    public virtual bool IsIncluded(string input);
}
[XmlRootAttribute("CodeCoverage")]
public class Microsoft.CodeCoverage.Core.Configurations.CodeCoverageConfig : object {
    internal static UInt32 CommunicationTimeoutDefault;
    internal static UInt32 CacheCleaningTimeoutDefault;
    internal static UInt32 PipeClientsCountDefault;
    internal static UInt32 CacheExpirationTimeDefault;
    internal static UInt32 CacheExternalExpirationTimeDefault;
    internal static bool CollectFromChildProcessesDefault;
    internal static bool UseVerifiableInstrumentationDefault;
    internal static bool UseManagedInstrumentationDefault;
    internal static bool ForceVerifiableInstrumentationDefault;
    internal static bool EnableFlatAssemblyDefault;
    internal static bool AllowLowIntegrityProcessesDefault;
    internal static bool ExcludeAutoGeneratedModulesDefault;
    internal static bool SymbolsRestrictOriginalPathAccessDefault;
    internal static bool SymbolsRestrictReferencePathAccessDefault;
    internal static bool SymbolsRestrictDbgAccessDefault;
    internal static bool SymbolsRestrictSystemRootAccessDefault;
    internal static bool EnableDynamicNativeInstrumentationDefault;
    internal static bool EnableStaticNativeInstrumentationDefault;
    internal static bool EnableStaticNativeInstrumentationRestoreDefault;
    internal static bool EnableDynamicManagedInstrumentationDefault;
    internal static bool EnableStaticManagedInstrumentationRestoreDefault;
    internal static bool SkipNativeInstrumentationDefault;
    internal static bool SkipNativeCacheInstrumentationDefault;
    internal static bool IncludeSkippedFunctionsIntoBufferDefault;
    internal static bool InstrumentFunctionsWithPublicSymbolDefault;
    internal static bool AllowAddressesOutsideOfImageDefault;
    internal static bool DumpStaticNativeDisassemblyDefault;
    internal static bool EnableStaticManagedInstrumentationDefault;
    [CompilerGeneratedAttribute]
private bool <SplitCoverage>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <CommunicationTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <CacheCleaningTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <CacheExpirationTime>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <CacheExternalExpirationTime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CachePath>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <PipeClientsCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CollectFromChildProcesses>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseVerifiableInstrumentation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceVerifiableInstrumentation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableFlatAssembly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowLowIntegrityProcesses>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SymbolsRestrictOriginalPathAccess>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SymbolsRestrictReferencePathAccess>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SymbolsRestrictDbgAccess>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SymbolsRestrictSystemRootAccess>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExcludeCompilerAutoGeneratedModules>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseManagedInstrumentation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableDynamicManagedInstrumentation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableStaticManagedInstrumentation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableStaticManagedInstrumentationRestore>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableDynamicNativeInstrumentation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableStaticNativeInstrumentation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableStaticNativeInstrumentationRestore>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipNativeInstrumentation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipNativeCacheInstrumentation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeSkippedFunctionsIntoBuffer>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InstrumentFunctionsWithPublicSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowAddressesOutsideOfImage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CollectAspDotNet>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <AllowedUsers>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <SymbolSearchPaths>k__BackingField;
    [CompilerGeneratedAttribute]
private EntryPointList <EntryPoints>k__BackingField;
    [CompilerGeneratedAttribute]
private ModuleList <Modules>k__BackingField;
    [CompilerGeneratedAttribute]
private PublicKeyTokenList <PublicKeyTokens>k__BackingField;
    [CompilerGeneratedAttribute]
private CompanyNameList <CompanyNames>k__BackingField;
    [CompilerGeneratedAttribute]
private AttributeList <Attributes>k__BackingField;
    [CompilerGeneratedAttribute]
private SourceList <Sources>k__BackingField;
    [CompilerGeneratedAttribute]
private FunctionList <Functions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileLogPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LogLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DumpStaticNativeDisassembly>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CorrelationId>k__BackingField;
    [XmlIgnoreAttribute]
public bool SplitCoverage { get; public set; }
    [XmlAttributeAttribute("SplitCoverage")]
public string SplitCoverageString { get; public set; }
    [XmlElementAttribute("CommunicationTimeout")]
public UInt32 CommunicationTimeout { get; public set; }
    [XmlElementAttribute("CacheCleaningTimeout")]
public UInt32 CacheCleaningTimeout { get; public set; }
    [XmlElementAttribute("CacheExpirationTime")]
public UInt32 CacheExpirationTime { get; public set; }
    [XmlElementAttribute("CacheExternalExpirationTime")]
public UInt32 CacheExternalExpirationTime { get; public set; }
    [XmlElementAttribute("CachePath")]
public string CachePath { get; public set; }
    [XmlElementAttribute("PipeClientsCount")]
public UInt32 PipeClientsCount { get; public set; }
    [XmlIgnoreAttribute]
public bool CollectFromChildProcesses { get; public set; }
    [XmlElementAttribute("CollectFromChildProcesses")]
public string CollectFromChildProcessesString { get; public set; }
    [XmlIgnoreAttribute]
public bool UseVerifiableInstrumentation { get; public set; }
    [XmlElementAttribute("UseVerifiableInstrumentation")]
public string UseVerifiableInstrumentationString { get; public set; }
    [XmlIgnoreAttribute]
public bool ForceVerifiableInstrumentation { get; public set; }
    [XmlElementAttribute("ForceVerifiableInstrumentation")]
public string ForceVerifiableInstrumentationString { get; public set; }
    [XmlIgnoreAttribute]
public bool EnableFlatAssembly { get; public set; }
    [XmlElementAttribute("EnableFlatAssembly")]
public string EnableFlatAssemblyString { get; public set; }
    [XmlIgnoreAttribute]
public bool AllowLowIntegrityProcesses { get; public set; }
    [XmlElementAttribute("AllowLowIntegrityProcesses")]
public string AllowLowIntegrityProcessesString { get; public set; }
    [XmlIgnoreAttribute]
public bool SymbolsRestrictOriginalPathAccess { get; public set; }
    [XmlElementAttribute("SymbolsRestrictOriginalPathAccess")]
public string SymbolsRestrictOriginalPathAccessString { get; public set; }
    [XmlIgnoreAttribute]
public bool SymbolsRestrictReferencePathAccess { get; public set; }
    [XmlElementAttribute("SymbolsRestrictReferencePathAccess")]
public string SymbolsRestrictReferencePathAccessString { get; public set; }
    [XmlIgnoreAttribute]
public bool SymbolsRestrictDbgAccess { get; public set; }
    [XmlElementAttribute("SymbolsRestrictDBGAccess")]
public string SymbolsRestrictDbgAccessString { get; public set; }
    [XmlIgnoreAttribute]
public bool SymbolsRestrictSystemRootAccess { get; public set; }
    [XmlElementAttribute("SymbolsRestrictSystemRootAccess")]
public string SymbolsRestrictSystemRootAccessString { get; public set; }
    [XmlIgnoreAttribute]
public bool ExcludeCompilerAutoGeneratedModules { get; public set; }
    [XmlElementAttribute("ExcludeCompilerAutoGeneratedModules")]
public string ExcludeCompilerAutoGeneratedModulesString { get; public set; }
    [XmlIgnoreAttribute]
public bool UseManagedInstrumentation { get; public set; }
    [XmlElementAttribute("UseManagedInstrumentation")]
public string UseManagedInstrumentationString { get; public set; }
    [XmlIgnoreAttribute]
public bool EnableDynamicManagedInstrumentation { get; public set; }
    [XmlElementAttribute("EnableDynamicManagedInstrumentation")]
public string EnableDynamicManagedInstrumentationString { get; public set; }
    [XmlIgnoreAttribute]
public bool EnableStaticManagedInstrumentation { get; public set; }
    [XmlElementAttribute("EnableStaticManagedInstrumentation")]
public string EnableStaticManagedInstrumentationString { get; public set; }
    [XmlIgnoreAttribute]
public bool EnableStaticManagedInstrumentationRestore { get; public set; }
    [XmlElementAttribute("EnableStaticManagedInstrumentationRestore")]
public string EnableStaticManagedInstrumentationRestoreString { get; public set; }
    [XmlIgnoreAttribute]
public bool EnableDynamicNativeInstrumentation { get; public set; }
    [XmlElementAttribute("EnableDynamicNativeInstrumentation")]
public string EnableDynamicNativeInstrumentationString { get; public set; }
    [XmlIgnoreAttribute]
public bool EnableStaticNativeInstrumentation { get; public set; }
    [XmlElementAttribute("EnableStaticNativeInstrumentation")]
public string EnableStaticNativeInstrumentationString { get; public set; }
    [XmlIgnoreAttribute]
public bool EnableStaticNativeInstrumentationRestore { get; public set; }
    [XmlElementAttribute("EnableStaticNativeInstrumentationRestore")]
public string EnableStaticNativeInstrumentationRestoreString { get; public set; }
    [XmlIgnoreAttribute]
public bool SkipNativeInstrumentation { get; public set; }
    [XmlElementAttribute("SkipNativeInstrumentation")]
public string SkipNativeInstrumentationString { get; public set; }
    [XmlIgnoreAttribute]
public bool SkipNativeCacheInstrumentation { get; public set; }
    [XmlElementAttribute("SkipNativeCacheInstrumentation")]
public string SkipNativeCacheInstrumentationString { get; public set; }
    [XmlIgnoreAttribute]
public bool IncludeSkippedFunctionsIntoBuffer { get; public set; }
    [XmlElementAttribute("IncludeSkippedFunctionsIntoBuffer")]
public string IncludeSkippedFunctionsIntoBufferString { get; public set; }
    [XmlIgnoreAttribute]
public bool InstrumentFunctionsWithPublicSymbol { get; public set; }
    [XmlElementAttribute("InstrumentFunctionsWithPublicSymbol")]
public string InstrumentFunctionsWithPublicSymbolString { get; public set; }
    [XmlIgnoreAttribute]
public bool AllowAddressesOutsideOfImage { get; public set; }
    [XmlElementAttribute("AllowAddressesOutsideOfImage")]
public string AllowAddressesOutsideOfImageString { get; public set; }
    [XmlIgnoreAttribute]
public bool CollectAspDotNet { get; public set; }
    [XmlElementAttribute("CollectAspDotNet")]
public string CollectAspDotNetString { get; public set; }
    [XmlArrayAttribute("AllowedUsers")]
[XmlArrayItemAttribute("User")]
public List`1<string> AllowedUsers { get; public set; }
    [XmlArrayAttribute("SymbolSearchPaths")]
[XmlArrayItemAttribute("Path")]
public List`1<string> SymbolSearchPaths { get; public set; }
    [XmlElementAttribute("EntryPoints")]
public EntryPointList EntryPoints { get; public set; }
    [XmlElementAttribute("ModulePaths")]
public ModuleList Modules { get; public set; }
    [XmlElementAttribute("PublicKeyTokens")]
public PublicKeyTokenList PublicKeyTokens { get; public set; }
    [XmlElementAttribute("CompanyNames")]
public CompanyNameList CompanyNames { get; public set; }
    [XmlElementAttribute("Attributes")]
public AttributeList Attributes { get; public set; }
    [XmlElementAttribute("Sources")]
public SourceList Sources { get; public set; }
    [XmlElementAttribute("Functions")]
public FunctionList Functions { get; public set; }
    [XmlElementAttribute("FileLogPath")]
public string FileLogPath { get; public set; }
    [XmlElementAttribute("LogLevel")]
public string LogLevel { get; public set; }
    [XmlElementAttribute("DumpStaticNativeDisassembly")]
public bool DumpStaticNativeDisassembly { get; public set; }
    [XmlElementAttribute("CorrelationId")]
public string CorrelationId { get; public set; }
    private static CodeCoverageConfig();
    [CompilerGeneratedAttribute]
public bool get_SplitCoverage();
    [CompilerGeneratedAttribute]
public void set_SplitCoverage(bool value);
    public string get_SplitCoverageString();
    public void set_SplitCoverageString(string value);
    [CompilerGeneratedAttribute]
public UInt32 get_CommunicationTimeout();
    [CompilerGeneratedAttribute]
public void set_CommunicationTimeout(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_CacheCleaningTimeout();
    [CompilerGeneratedAttribute]
public void set_CacheCleaningTimeout(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_CacheExpirationTime();
    [CompilerGeneratedAttribute]
public void set_CacheExpirationTime(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_CacheExternalExpirationTime();
    [CompilerGeneratedAttribute]
public void set_CacheExternalExpirationTime(UInt32 value);
    [CompilerGeneratedAttribute]
public string get_CachePath();
    [CompilerGeneratedAttribute]
public void set_CachePath(string value);
    [CompilerGeneratedAttribute]
public UInt32 get_PipeClientsCount();
    [CompilerGeneratedAttribute]
public void set_PipeClientsCount(UInt32 value);
    [CompilerGeneratedAttribute]
public bool get_CollectFromChildProcesses();
    [CompilerGeneratedAttribute]
public void set_CollectFromChildProcesses(bool value);
    public string get_CollectFromChildProcessesString();
    public void set_CollectFromChildProcessesString(string value);
    [CompilerGeneratedAttribute]
public bool get_UseVerifiableInstrumentation();
    [CompilerGeneratedAttribute]
public void set_UseVerifiableInstrumentation(bool value);
    public string get_UseVerifiableInstrumentationString();
    public void set_UseVerifiableInstrumentationString(string value);
    [CompilerGeneratedAttribute]
public bool get_ForceVerifiableInstrumentation();
    [CompilerGeneratedAttribute]
public void set_ForceVerifiableInstrumentation(bool value);
    public string get_ForceVerifiableInstrumentationString();
    public void set_ForceVerifiableInstrumentationString(string value);
    [CompilerGeneratedAttribute]
public bool get_EnableFlatAssembly();
    [CompilerGeneratedAttribute]
public void set_EnableFlatAssembly(bool value);
    public string get_EnableFlatAssemblyString();
    public void set_EnableFlatAssemblyString(string value);
    [CompilerGeneratedAttribute]
public bool get_AllowLowIntegrityProcesses();
    [CompilerGeneratedAttribute]
public void set_AllowLowIntegrityProcesses(bool value);
    public string get_AllowLowIntegrityProcessesString();
    public void set_AllowLowIntegrityProcessesString(string value);
    [CompilerGeneratedAttribute]
public bool get_SymbolsRestrictOriginalPathAccess();
    [CompilerGeneratedAttribute]
public void set_SymbolsRestrictOriginalPathAccess(bool value);
    public string get_SymbolsRestrictOriginalPathAccessString();
    public void set_SymbolsRestrictOriginalPathAccessString(string value);
    [CompilerGeneratedAttribute]
public bool get_SymbolsRestrictReferencePathAccess();
    [CompilerGeneratedAttribute]
public void set_SymbolsRestrictReferencePathAccess(bool value);
    public string get_SymbolsRestrictReferencePathAccessString();
    public void set_SymbolsRestrictReferencePathAccessString(string value);
    [CompilerGeneratedAttribute]
public bool get_SymbolsRestrictDbgAccess();
    [CompilerGeneratedAttribute]
public void set_SymbolsRestrictDbgAccess(bool value);
    public string get_SymbolsRestrictDbgAccessString();
    public void set_SymbolsRestrictDbgAccessString(string value);
    [CompilerGeneratedAttribute]
public bool get_SymbolsRestrictSystemRootAccess();
    [CompilerGeneratedAttribute]
public void set_SymbolsRestrictSystemRootAccess(bool value);
    public string get_SymbolsRestrictSystemRootAccessString();
    public void set_SymbolsRestrictSystemRootAccessString(string value);
    [CompilerGeneratedAttribute]
public bool get_ExcludeCompilerAutoGeneratedModules();
    [CompilerGeneratedAttribute]
public void set_ExcludeCompilerAutoGeneratedModules(bool value);
    public string get_ExcludeCompilerAutoGeneratedModulesString();
    public void set_ExcludeCompilerAutoGeneratedModulesString(string value);
    [CompilerGeneratedAttribute]
public bool get_UseManagedInstrumentation();
    [CompilerGeneratedAttribute]
public void set_UseManagedInstrumentation(bool value);
    public string get_UseManagedInstrumentationString();
    public void set_UseManagedInstrumentationString(string value);
    [CompilerGeneratedAttribute]
public bool get_EnableDynamicManagedInstrumentation();
    [CompilerGeneratedAttribute]
public void set_EnableDynamicManagedInstrumentation(bool value);
    public string get_EnableDynamicManagedInstrumentationString();
    public void set_EnableDynamicManagedInstrumentationString(string value);
    [CompilerGeneratedAttribute]
public bool get_EnableStaticManagedInstrumentation();
    [CompilerGeneratedAttribute]
public void set_EnableStaticManagedInstrumentation(bool value);
    public string get_EnableStaticManagedInstrumentationString();
    public void set_EnableStaticManagedInstrumentationString(string value);
    [CompilerGeneratedAttribute]
public bool get_EnableStaticManagedInstrumentationRestore();
    [CompilerGeneratedAttribute]
public void set_EnableStaticManagedInstrumentationRestore(bool value);
    public string get_EnableStaticManagedInstrumentationRestoreString();
    public void set_EnableStaticManagedInstrumentationRestoreString(string value);
    [CompilerGeneratedAttribute]
public bool get_EnableDynamicNativeInstrumentation();
    [CompilerGeneratedAttribute]
public void set_EnableDynamicNativeInstrumentation(bool value);
    public string get_EnableDynamicNativeInstrumentationString();
    public void set_EnableDynamicNativeInstrumentationString(string value);
    [CompilerGeneratedAttribute]
public bool get_EnableStaticNativeInstrumentation();
    [CompilerGeneratedAttribute]
public void set_EnableStaticNativeInstrumentation(bool value);
    public string get_EnableStaticNativeInstrumentationString();
    public void set_EnableStaticNativeInstrumentationString(string value);
    [CompilerGeneratedAttribute]
public bool get_EnableStaticNativeInstrumentationRestore();
    [CompilerGeneratedAttribute]
public void set_EnableStaticNativeInstrumentationRestore(bool value);
    public string get_EnableStaticNativeInstrumentationRestoreString();
    public void set_EnableStaticNativeInstrumentationRestoreString(string value);
    [CompilerGeneratedAttribute]
public bool get_SkipNativeInstrumentation();
    [CompilerGeneratedAttribute]
public void set_SkipNativeInstrumentation(bool value);
    public string get_SkipNativeInstrumentationString();
    public void set_SkipNativeInstrumentationString(string value);
    [CompilerGeneratedAttribute]
public bool get_SkipNativeCacheInstrumentation();
    [CompilerGeneratedAttribute]
public void set_SkipNativeCacheInstrumentation(bool value);
    public string get_SkipNativeCacheInstrumentationString();
    public void set_SkipNativeCacheInstrumentationString(string value);
    [CompilerGeneratedAttribute]
public bool get_IncludeSkippedFunctionsIntoBuffer();
    [CompilerGeneratedAttribute]
public void set_IncludeSkippedFunctionsIntoBuffer(bool value);
    public string get_IncludeSkippedFunctionsIntoBufferString();
    public void set_IncludeSkippedFunctionsIntoBufferString(string value);
    [CompilerGeneratedAttribute]
public bool get_InstrumentFunctionsWithPublicSymbol();
    [CompilerGeneratedAttribute]
public void set_InstrumentFunctionsWithPublicSymbol(bool value);
    public string get_InstrumentFunctionsWithPublicSymbolString();
    public void set_InstrumentFunctionsWithPublicSymbolString(string value);
    [CompilerGeneratedAttribute]
public bool get_AllowAddressesOutsideOfImage();
    [CompilerGeneratedAttribute]
public void set_AllowAddressesOutsideOfImage(bool value);
    public string get_AllowAddressesOutsideOfImageString();
    public void set_AllowAddressesOutsideOfImageString(string value);
    [CompilerGeneratedAttribute]
public bool get_CollectAspDotNet();
    [CompilerGeneratedAttribute]
public void set_CollectAspDotNet(bool value);
    public string get_CollectAspDotNetString();
    public void set_CollectAspDotNetString(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_AllowedUsers();
    [CompilerGeneratedAttribute]
public void set_AllowedUsers(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_SymbolSearchPaths();
    [CompilerGeneratedAttribute]
public void set_SymbolSearchPaths(List`1<string> value);
    [CompilerGeneratedAttribute]
public EntryPointList get_EntryPoints();
    [CompilerGeneratedAttribute]
public void set_EntryPoints(EntryPointList value);
    [CompilerGeneratedAttribute]
public ModuleList get_Modules();
    [CompilerGeneratedAttribute]
public void set_Modules(ModuleList value);
    [CompilerGeneratedAttribute]
public PublicKeyTokenList get_PublicKeyTokens();
    [CompilerGeneratedAttribute]
public void set_PublicKeyTokens(PublicKeyTokenList value);
    [CompilerGeneratedAttribute]
public CompanyNameList get_CompanyNames();
    [CompilerGeneratedAttribute]
public void set_CompanyNames(CompanyNameList value);
    [CompilerGeneratedAttribute]
public AttributeList get_Attributes();
    [CompilerGeneratedAttribute]
public void set_Attributes(AttributeList value);
    [CompilerGeneratedAttribute]
public SourceList get_Sources();
    [CompilerGeneratedAttribute]
public void set_Sources(SourceList value);
    [CompilerGeneratedAttribute]
public FunctionList get_Functions();
    [CompilerGeneratedAttribute]
public void set_Functions(FunctionList value);
    [CompilerGeneratedAttribute]
public string get_FileLogPath();
    [CompilerGeneratedAttribute]
public void set_FileLogPath(string value);
    [CompilerGeneratedAttribute]
public string get_LogLevel();
    [CompilerGeneratedAttribute]
public void set_LogLevel(string value);
    [CompilerGeneratedAttribute]
public bool get_DumpStaticNativeDisassembly();
    [CompilerGeneratedAttribute]
public void set_DumpStaticNativeDisassembly(bool value);
    [CompilerGeneratedAttribute]
public string get_CorrelationId();
    [CompilerGeneratedAttribute]
public void set_CorrelationId(string value);
    public bool ShouldSerializeSplitCoverageString();
    public bool ShouldSerializeCommunicationTimeout();
    public bool ShouldSerializePipeClientsCount();
    public bool ShouldSerializeEnableFlatAssemblyString();
    public bool ShouldSerializeAllowLowIntegrityProcessesString();
    public bool ShouldSerializeSymbolsRestrictOriginalPathAccessString();
    public bool ShouldSerializeSymbolsRestrictReferencePathAccessString();
    public bool ShouldSerializeSymbolsRestrictDbgAccessString();
    public bool ShouldSerializeSymbolsRestrictSystemRootAccessString();
    public bool ShouldSerializeExcludeCompilerAutoGeneratedModulesString();
    public bool ShouldSerializeUseManagedInstrumentationString();
    public bool ShouldSerializeSkipNativeInstrumentationString();
    public bool ShouldSerializeEnableStaticNativeInstrumentationString();
    public bool ShouldSerializeEnableStaticNativeInstrumentationRestoreString();
    public bool ShouldSerializeEnableDynamicNativeInstrumentationString();
    public bool ShouldSerializeEnableStaticManagedInstrumentationString();
    public bool ShouldSerializeEnableStaticManagedInstrumentationRestoreString();
    public bool ShouldSerializeEnableDynamicManagedInstrumentationString();
    public bool ShouldSerializeSkipNativeCacheInstrumentationString();
    public bool ShouldSerializeIncludeSkippedFunctionsIntoBufferString();
    public bool ShouldSerializeInstrumentFunctionsWithPublicSymbolString();
    public bool ShouldSerializeAllowAddressesOutsideOfImageString();
    public bool ShouldSerializeFileLogPath();
    public bool ShouldSerializeLogLevel();
    public bool ShouldSerializeCorrelationId();
    public bool ShouldSerializeCacheCleaningTimeout();
    public bool ShouldSerializeDumpStaticNativeDisassembly();
    public bool ShouldSerializeCacheExpirationTime();
    public bool ShouldSerializeCacheExternalExpirationTime();
    public bool ShouldSerializeCachePath();
}
[XmlRootAttribute("RunSettings")]
public class Microsoft.CodeCoverage.Core.Configurations.CodeCoverageRunSettings : object {
    [CompilerGeneratedAttribute]
private DataCollectionRunSettings <RunSettings>k__BackingField;
    [XmlElementAttribute("DataCollectionRunSettings")]
public DataCollectionRunSettings RunSettings { get; public set; }
    [CompilerGeneratedAttribute]
public DataCollectionRunSettings get_RunSettings();
    [CompilerGeneratedAttribute]
public void set_RunSettings(DataCollectionRunSettings value);
}
internal class Microsoft.CodeCoverage.Core.Configurations.CodeCoverageRunSettingsProcessor : object {
    private XmlNode _defaultSettingsRootNode;
    private ILogger _logger;
    internal CodeCoverageRunSettingsProcessor(XmlNode defaultSettingsRootNode, ILogger logger);
    internal XmlNode Process(string currentSettings);
    internal XmlNode Process(XmlDocument currentSettingsDocument);
    internal XmlNode Process(XmlNode currentSettingsRootNode);
    private XmlNode SelectNodeOrAddDefaults(XmlNode currentRootNode, XmlNode defaultRootNode, IList`1<string> pathComponents);
    private bool ShouldProcessCurrentExclusion(XmlNode node);
    private string BuildPath(IList`1<string> pathComponents);
    private XmlNode ExtractNode(XmlNode node, string path);
    private void MergeNodes(XmlNode currentNode, XmlNode defaultNode);
}
public class Microsoft.CodeCoverage.Core.Configurations.CompanyNameList : CachingExcludeIncludeList {
    [CompilerGeneratedAttribute]
private ObservableCollection`1<string> <Excluded>k__BackingField;
    [CompilerGeneratedAttribute]
private ObservableCollection`1<string> <Included>k__BackingField;
    [XmlArrayAttribute("Exclude")]
[XmlArrayItemAttribute("CompanyName")]
public ObservableCollection`1<string> Excluded { get; public set; }
    [XmlArrayAttribute("Include")]
[XmlArrayItemAttribute("CompanyName")]
public ObservableCollection`1<string> Included { get; public set; }
    [XmlIgnoreAttribute]
protected bool IgnoreCase { get; }
    [CompilerGeneratedAttribute]
public virtual ObservableCollection`1<string> get_Excluded();
    [CompilerGeneratedAttribute]
public virtual void set_Excluded(ObservableCollection`1<string> value);
    [CompilerGeneratedAttribute]
public virtual ObservableCollection`1<string> get_Included();
    [CompilerGeneratedAttribute]
public virtual void set_Included(ObservableCollection`1<string> value);
    protected virtual bool get_IgnoreCase();
}
internal static class Microsoft.CodeCoverage.Core.Configurations.ConfigurationFileUtility : object {
    private static string ClrIeInstrumentationForNetFrameworkVariable;
    internal static CodeCoverageRunSettings ReadRunSettings(string path);
    private static DataCollectorConfiguration ReadDataCollectorConfiguration(XDocument document);
    internal static void Write(string path, CodeCoverageRunSettings source);
    internal static string GetXmlString(CodeCoverageConfig source);
    internal static CodeCoverageConfig GetCodeCoverageConfig(string source);
    internal static DataCollectorConfiguration GetConfiguration(FileInfo fileInfo, ILogger logger);
    internal static DataCollectorConfiguration GetConfiguration(FileInfo fileInfo, ILogger logger, IEnvironment environment);
    internal static DataCollectorConfiguration GetConfiguration(XmlElement configurationElement, ILogger logger);
    internal static DataCollectorConfiguration GetConfiguration(XmlElement configurationElement, ILogger logger, IEnvironment environment);
    private static XmlElement GetDefaultConfiguration();
    private static XmlElement AddDefaultExclusions(XmlElement configurationElement, XmlElement defaultConfigurationElement, ILogger logger);
    internal static bool IsClrInstrumentationNetFrameworkEnabled(DataCollectorConfiguration configuration);
    private static bool GetEnvironmentVariableValue(string environmentVariableName);
    private static void InjectEnvironmentVariables(DataCollectorConfiguration dataCollectorConfiguration, IEnvironment environment);
    private static void InjectEnvironmentVariable(ExcludeIncludeList excludeIncludeList, IEnvironment environment);
    private static string ExpandEnvironmentVariables(string name, IEnvironment environment);
}
public class Microsoft.CodeCoverage.Core.Configurations.DataCollectionRunSettings : object {
    [CompilerGeneratedAttribute]
private List`1<DataCollectorSettings> <DataCollectors>k__BackingField;
    [XmlArrayAttribute("DataCollectors")]
[XmlArrayItemAttribute("DataCollector")]
public List`1<DataCollectorSettings> DataCollectors { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<DataCollectorSettings> get_DataCollectors();
    [CompilerGeneratedAttribute]
public void set_DataCollectors(List`1<DataCollectorSettings> value);
    [ExcludeFromCodeCoverageAttribute]
public static bool op_Equality(DataCollectionRunSettings left, DataCollectionRunSettings right);
    [ExcludeFromCodeCoverageAttribute]
public static bool op_Inequality(DataCollectionRunSettings left, DataCollectionRunSettings right);
    [ExcludeFromCodeCoverageAttribute]
public virtual bool Equals(object obj);
    [ExcludeFromCodeCoverageAttribute]
private bool Equals(DataCollectionRunSettings other);
    [ExcludeFromCodeCoverageAttribute]
public virtual int GetHashCode();
    [ExcludeFromCodeCoverageAttribute]
public virtual string ToString();
}
[XmlRootAttribute("Configuration")]
public class Microsoft.CodeCoverage.Core.Configurations.DataCollectorConfiguration : object {
    internal static bool ClrIeInstrumentationNetFrameworkDefault;
    internal static bool SplitCoverageDefault;
    internal static string FormatDefault;
    [CompilerGeneratedAttribute]
private string <Framework>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ClrIeInstrumentationNetFramework>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SplitCoverage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CoverageLogLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstrumentationLogLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CoverageFileLogPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ManagedVanguardLogLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CoverageFileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeCoverageConfig <CodeCoverageConfig>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VanguardInstallDir>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClrIeX86InstallDir>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClrIeX64InstallDir>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClrIeARM64InstallDir>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StaticNativeInstrumenterX86InstallDir>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StaticNativeInstrumenterX64InstallDir>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StaticNativeRuntimeX86InstallDir>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StaticNativeRuntimeX64InstallDir>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StaticNativeRuntimeARM64InstallDir>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TelemetryEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PerTestCodeCoverage>k__BackingField;
    [XmlElementAttribute("Framework")]
public string Framework { get; public set; }
    [XmlIgnoreAttribute]
public bool ClrIeInstrumentationNetFramework { get; public set; }
    [XmlElementAttribute("CLRIEInstrumentationNetFramework")]
public string ClrIeInstrumentationNetFrameworkString { get; public set; }
    [XmlIgnoreAttribute]
public bool SplitCoverage { get; public set; }
    [XmlElementAttribute("SplitCoverage")]
public string SplitCoverageString { get; public set; }
    [XmlElementAttribute("CoverageLogLevel")]
public string CoverageLogLevel { get; public set; }
    [XmlElementAttribute("InstrumentationLogLevel")]
public string InstrumentationLogLevel { get; public set; }
    [XmlElementAttribute("CoverageFileLogPath")]
public string CoverageFileLogPath { get; public set; }
    [XmlElementAttribute("ManagedVanguardLogLevel")]
public string ManagedVanguardLogLevel { get; public set; }
    [XmlElementAttribute("CoverageFileName")]
public string CoverageFileName { get; public set; }
    [XmlElementAttribute("Format")]
public string Format { get; public set; }
    [XmlElementAttribute("CodeCoverage")]
public CodeCoverageConfig CodeCoverageConfig { get; public set; }
    [XmlElementAttribute("VanguardInstallDir")]
public string VanguardInstallDir { get; public set; }
    [XmlElementAttribute("CLRIEX86InstallDir")]
public string ClrIeX86InstallDir { get; public set; }
    [XmlElementAttribute("CLRIEX64InstallDir")]
public string ClrIeX64InstallDir { get; public set; }
    [XmlElementAttribute("CLRIEARM64InstallDir")]
public string ClrIeARM64InstallDir { get; public set; }
    [XmlElementAttribute("StaticNativeInstrumenterX86InstallDir")]
public string StaticNativeInstrumenterX86InstallDir { get; public set; }
    [XmlElementAttribute("StaticNativeInstrumenterX64InstallDir")]
public string StaticNativeInstrumenterX64InstallDir { get; public set; }
    [XmlElementAttribute("StaticNativeRuntimeX86InstallDir")]
public string StaticNativeRuntimeX86InstallDir { get; public set; }
    [XmlElementAttribute("StaticNativeRuntimeX64InstallDir")]
public string StaticNativeRuntimeX64InstallDir { get; public set; }
    [XmlElementAttribute("StaticNativeRuntimeARM64InstallDir")]
public string StaticNativeRuntimeARM64InstallDir { get; public set; }
    [XmlIgnoreAttribute]
public bool TelemetryEnabled { get; public set; }
    [XmlElementAttribute("TelemetryEnabled")]
public string TelemetryEnabledString { get; public set; }
    [XmlIgnoreAttribute]
public bool PerTestCodeCoverage { get; public set; }
    [XmlElementAttribute("PerTestCodeCoverage")]
public string PerTestCodeCoverageString { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Framework();
    [CompilerGeneratedAttribute]
public void set_Framework(string value);
    [CompilerGeneratedAttribute]
public bool get_ClrIeInstrumentationNetFramework();
    [CompilerGeneratedAttribute]
public void set_ClrIeInstrumentationNetFramework(bool value);
    public string get_ClrIeInstrumentationNetFrameworkString();
    public void set_ClrIeInstrumentationNetFrameworkString(string value);
    [CompilerGeneratedAttribute]
public bool get_SplitCoverage();
    [CompilerGeneratedAttribute]
public void set_SplitCoverage(bool value);
    public string get_SplitCoverageString();
    public void set_SplitCoverageString(string value);
    [CompilerGeneratedAttribute]
public string get_CoverageLogLevel();
    [CompilerGeneratedAttribute]
public void set_CoverageLogLevel(string value);
    [CompilerGeneratedAttribute]
public string get_InstrumentationLogLevel();
    [CompilerGeneratedAttribute]
public void set_InstrumentationLogLevel(string value);
    [CompilerGeneratedAttribute]
public string get_CoverageFileLogPath();
    [CompilerGeneratedAttribute]
public void set_CoverageFileLogPath(string value);
    [CompilerGeneratedAttribute]
public string get_ManagedVanguardLogLevel();
    [CompilerGeneratedAttribute]
public void set_ManagedVanguardLogLevel(string value);
    [CompilerGeneratedAttribute]
public string get_CoverageFileName();
    [CompilerGeneratedAttribute]
public void set_CoverageFileName(string value);
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(string value);
    [CompilerGeneratedAttribute]
public CodeCoverageConfig get_CodeCoverageConfig();
    [CompilerGeneratedAttribute]
public void set_CodeCoverageConfig(CodeCoverageConfig value);
    [CompilerGeneratedAttribute]
public string get_VanguardInstallDir();
    [CompilerGeneratedAttribute]
public void set_VanguardInstallDir(string value);
    [CompilerGeneratedAttribute]
public string get_ClrIeX86InstallDir();
    [CompilerGeneratedAttribute]
public void set_ClrIeX86InstallDir(string value);
    [CompilerGeneratedAttribute]
public string get_ClrIeX64InstallDir();
    [CompilerGeneratedAttribute]
public void set_ClrIeX64InstallDir(string value);
    [CompilerGeneratedAttribute]
public string get_ClrIeARM64InstallDir();
    [CompilerGeneratedAttribute]
public void set_ClrIeARM64InstallDir(string value);
    [CompilerGeneratedAttribute]
public string get_StaticNativeInstrumenterX86InstallDir();
    [CompilerGeneratedAttribute]
public void set_StaticNativeInstrumenterX86InstallDir(string value);
    [CompilerGeneratedAttribute]
public string get_StaticNativeInstrumenterX64InstallDir();
    [CompilerGeneratedAttribute]
public void set_StaticNativeInstrumenterX64InstallDir(string value);
    [CompilerGeneratedAttribute]
public string get_StaticNativeRuntimeX86InstallDir();
    [CompilerGeneratedAttribute]
public void set_StaticNativeRuntimeX86InstallDir(string value);
    [CompilerGeneratedAttribute]
public string get_StaticNativeRuntimeX64InstallDir();
    [CompilerGeneratedAttribute]
public void set_StaticNativeRuntimeX64InstallDir(string value);
    [CompilerGeneratedAttribute]
public string get_StaticNativeRuntimeARM64InstallDir();
    [CompilerGeneratedAttribute]
public void set_StaticNativeRuntimeARM64InstallDir(string value);
    [CompilerGeneratedAttribute]
public bool get_TelemetryEnabled();
    [CompilerGeneratedAttribute]
public void set_TelemetryEnabled(bool value);
    public string get_TelemetryEnabledString();
    public void set_TelemetryEnabledString(string value);
    [CompilerGeneratedAttribute]
public bool get_PerTestCodeCoverage();
    [CompilerGeneratedAttribute]
public void set_PerTestCodeCoverage(bool value);
    public string get_PerTestCodeCoverageString();
    public void set_PerTestCodeCoverageString(string value);
}
public class Microsoft.CodeCoverage.Core.Configurations.DataCollectorSettings : object {
    [CompilerGeneratedAttribute]
private string <FriendlyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Uri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyQualifiedName>k__BackingField;
    [CompilerGeneratedAttribute]
private DataCollectorConfiguration <Configuration>k__BackingField;
    [XmlAttributeAttribute("friendlyName")]
public string FriendlyName { get; public set; }
    [XmlAttributeAttribute("uri")]
public string Uri { get; public set; }
    [XmlAttributeAttribute("assemblyQualifiedName")]
public string AssemblyQualifiedName { get; public set; }
    [XmlElementAttribute("Configuration")]
public DataCollectorConfiguration Configuration { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FriendlyName();
    [CompilerGeneratedAttribute]
public void set_FriendlyName(string value);
    [CompilerGeneratedAttribute]
public string get_Uri();
    [CompilerGeneratedAttribute]
public void set_Uri(string value);
    [CompilerGeneratedAttribute]
public string get_AssemblyQualifiedName();
    [CompilerGeneratedAttribute]
public void set_AssemblyQualifiedName(string value);
    [CompilerGeneratedAttribute]
public DataCollectorConfiguration get_Configuration();
    [CompilerGeneratedAttribute]
public void set_Configuration(DataCollectorConfiguration value);
}
public class Microsoft.CodeCoverage.Core.Configurations.EntryPointList : CachingExcludeIncludeList {
    [CompilerGeneratedAttribute]
private ObservableCollection`1<string> <Excluded>k__BackingField;
    [CompilerGeneratedAttribute]
private ObservableCollection`1<string> <Included>k__BackingField;
    [XmlArrayAttribute("Exclude")]
[XmlArrayItemAttribute("EntryPoint")]
public ObservableCollection`1<string> Excluded { get; public set; }
    [XmlArrayAttribute("Include")]
[XmlArrayItemAttribute("EntryPoint")]
public ObservableCollection`1<string> Included { get; public set; }
    [XmlIgnoreAttribute]
protected bool IgnoreCase { get; }
    [CompilerGeneratedAttribute]
public virtual ObservableCollection`1<string> get_Excluded();
    [CompilerGeneratedAttribute]
public virtual void set_Excluded(ObservableCollection`1<string> value);
    [CompilerGeneratedAttribute]
public virtual ObservableCollection`1<string> get_Included();
    [CompilerGeneratedAttribute]
public virtual void set_Included(ObservableCollection`1<string> value);
    protected virtual bool get_IgnoreCase();
}
public abstract class Microsoft.CodeCoverage.Core.Configurations.ExcludeIncludeList : object {
    private static bool MergeDefaultsDefault;
    private IList`1<RegularExpression> _includedExpressions;
    private IList`1<RegularExpression> _excludedExpressions;
    private bool _includeAll;
    private bool _hasInclude;
    private bool _excludeAll;
    [CompilerGeneratedAttribute]
private bool <MergeDefaults>k__BackingField;
    [XmlIgnoreAttribute]
public bool MergeDefaults { get; public set; }
    [XmlAttributeAttribute("mergeDefaults")]
public string MergeDefaultsString { get; public set; }
    [XmlIgnoreAttribute]
public ObservableCollection`1<string> Excluded { get; public set; }
    [XmlIgnoreAttribute]
public ObservableCollection`1<string> Included { get; public set; }
    [XmlIgnoreAttribute]
protected bool IgnoreCase { get; }
    public bool IncludeAll { get; }
    [CompilerGeneratedAttribute]
public bool get_MergeDefaults();
    [CompilerGeneratedAttribute]
public void set_MergeDefaults(bool value);
    public string get_MergeDefaultsString();
    public void set_MergeDefaultsString(string value);
    private void Included_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void Excluded_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void UpdateExpressionsList(NotifyCollectionChangedEventArgs e, IList`1<RegularExpression> expressions, Boolean& all);
    public abstract virtual ObservableCollection`1<string> get_Excluded();
    public abstract virtual void set_Excluded(ObservableCollection`1<string> value);
    public abstract virtual ObservableCollection`1<string> get_Included();
    public abstract virtual void set_Included(ObservableCollection`1<string> value);
    protected abstract virtual bool get_IgnoreCase();
    public bool get_IncludeAll();
    public virtual bool IsIncluded(string input);
    public bool IsIncludedExplicitly(string input);
    private bool InternalIsIncluded(string input);
    private bool InternalIsExcluded(string input);
    private bool MatchesExpression(string input, IList`1<RegularExpression> expressions);
    public bool ShouldSerializeExcluded();
    public bool ShouldSerializeIncluded();
    public bool ShouldSerializeMergeDefaultsString();
}
public class Microsoft.CodeCoverage.Core.Configurations.FunctionList : ExcludeIncludeList {
    [CompilerGeneratedAttribute]
private ObservableCollection`1<string> <Excluded>k__BackingField;
    [CompilerGeneratedAttribute]
private ObservableCollection`1<string> <Included>k__BackingField;
    [XmlArrayAttribute("Exclude")]
[XmlArrayItemAttribute("Function")]
public ObservableCollection`1<string> Excluded { get; public set; }
    [XmlArrayAttribute("Include")]
[XmlArrayItemAttribute("Function")]
public ObservableCollection`1<string> Included { get; public set; }
    [XmlIgnoreAttribute]
protected bool IgnoreCase { get; }
    [CompilerGeneratedAttribute]
public virtual ObservableCollection`1<string> get_Excluded();
    [CompilerGeneratedAttribute]
public virtual void set_Excluded(ObservableCollection`1<string> value);
    [CompilerGeneratedAttribute]
public virtual ObservableCollection`1<string> get_Included();
    [CompilerGeneratedAttribute]
public virtual void set_Included(ObservableCollection`1<string> value);
    protected virtual bool get_IgnoreCase();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.CodeCoverage.Core.Configurations.IncludeDirectory : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Recursive>k__BackingField;
    [XmlTextAttribute]
public string Path { get; public set; }
    [XmlAttributeAttribute]
public bool Recursive { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public bool get_Recursive();
    [CompilerGeneratedAttribute]
public void set_Recursive(bool value);
    public bool ShouldSerializeRecursive();
}
public class Microsoft.CodeCoverage.Core.Configurations.ModuleList : ExcludeIncludeList {
    [CompilerGeneratedAttribute]
private IncludeDirectory[] <Directories>k__BackingField;
    [CompilerGeneratedAttribute]
private ObservableCollection`1<string> <Included>k__BackingField;
    [CompilerGeneratedAttribute]
private ObservableCollection`1<string> <Excluded>k__BackingField;
    [XmlArrayAttribute("IncludeDirectories")]
[XmlArrayItemAttribute("Directory")]
public IncludeDirectory[] Directories { get; public set; }
    [XmlArrayAttribute("Include")]
[XmlArrayItemAttribute("ModulePath")]
public ObservableCollection`1<string> Included { get; public set; }
    [XmlArrayAttribute("Exclude")]
[XmlArrayItemAttribute("ModulePath")]
public ObservableCollection`1<string> Excluded { get; public set; }
    [XmlIgnoreAttribute]
protected bool IgnoreCase { get; }
    [CompilerGeneratedAttribute]
public IncludeDirectory[] get_Directories();
    [CompilerGeneratedAttribute]
public void set_Directories(IncludeDirectory[] value);
    [CompilerGeneratedAttribute]
public virtual ObservableCollection`1<string> get_Included();
    [CompilerGeneratedAttribute]
public virtual void set_Included(ObservableCollection`1<string> value);
    [CompilerGeneratedAttribute]
public virtual ObservableCollection`1<string> get_Excluded();
    [CompilerGeneratedAttribute]
public virtual void set_Excluded(ObservableCollection`1<string> value);
    protected virtual bool get_IgnoreCase();
}
public class Microsoft.CodeCoverage.Core.Configurations.PublicKeyTokenList : CachingExcludeIncludeList {
    [CompilerGeneratedAttribute]
private ObservableCollection`1<string> <Excluded>k__BackingField;
    [CompilerGeneratedAttribute]
private ObservableCollection`1<string> <Included>k__BackingField;
    [XmlArrayAttribute("Exclude")]
[XmlArrayItemAttribute("PublicKeyToken")]
public ObservableCollection`1<string> Excluded { get; public set; }
    [XmlArrayAttribute("Include")]
[XmlArrayItemAttribute("PublicKeyToken")]
public ObservableCollection`1<string> Included { get; public set; }
    [XmlIgnoreAttribute]
protected bool IgnoreCase { get; }
    [CompilerGeneratedAttribute]
public virtual ObservableCollection`1<string> get_Excluded();
    [CompilerGeneratedAttribute]
public virtual void set_Excluded(ObservableCollection`1<string> value);
    [CompilerGeneratedAttribute]
public virtual ObservableCollection`1<string> get_Included();
    [CompilerGeneratedAttribute]
public virtual void set_Included(ObservableCollection`1<string> value);
    protected virtual bool get_IgnoreCase();
}
internal class Microsoft.CodeCoverage.Core.Configurations.RegularExpression : SimpleExpression {
    private Regex _regex;
    private bool _valid;
    internal bool IsValid { get; }
    internal RegularExpression(string pattern, bool ignoreCase);
    internal virtual bool Match(string value);
    internal virtual bool get_IsValid();
}
internal class Microsoft.CodeCoverage.Core.Configurations.SimpleExpression : object {
    private bool _isPrefix;
    private bool _isSuffix;
    private string _pattern;
    private StringComparison _stringComparison;
    [CompilerGeneratedAttribute]
private bool <IsValid>k__BackingField;
    internal bool IsValid { get; private set; }
    internal SimpleExpression(string pattern, bool ignoreCase);
    internal virtual bool Match(string value);
    [CompilerGeneratedAttribute]
internal virtual bool get_IsValid();
    [CompilerGeneratedAttribute]
private void set_IsValid(bool value);
    protected static string TrimPrefix(string pattern);
    protected static string TrimSuffix(string pattern);
    private static bool IsSpecialCharacter(char c);
}
public class Microsoft.CodeCoverage.Core.Configurations.SourceList : CachingExcludeIncludeList {
    [CompilerGeneratedAttribute]
private ObservableCollection`1<string> <Excluded>k__BackingField;
    [CompilerGeneratedAttribute]
private ObservableCollection`1<string> <Included>k__BackingField;
    [XmlArrayAttribute("Exclude")]
[XmlArrayItemAttribute("Source")]
public ObservableCollection`1<string> Excluded { get; public set; }
    [XmlArrayAttribute("Include")]
[XmlArrayItemAttribute("Source")]
public ObservableCollection`1<string> Included { get; public set; }
    [XmlIgnoreAttribute]
protected bool IgnoreCase { get; }
    [CompilerGeneratedAttribute]
public virtual ObservableCollection`1<string> get_Excluded();
    [CompilerGeneratedAttribute]
public virtual void set_Excluded(ObservableCollection`1<string> value);
    [CompilerGeneratedAttribute]
public virtual ObservableCollection`1<string> get_Included();
    [CompilerGeneratedAttribute]
public virtual void set_Included(ObservableCollection`1<string> value);
    protected virtual bool get_IgnoreCase();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.CodeCoverage.Core.Constants : object {
    public static ushort CurrentCodeCoverageSchemaVersion;
    public static UInt32 CodeCoverageFileHeaderMagic;
    public static UInt32 CodeCoverageStreamHeaderMagic;
    public static string GlobalCacheId;
    public static string GlobalMutexPrefixId;
    [CompilerGeneratedAttribute]
private static Guid <ModulesSkippedStreamType>k__BackingField;
    [CompilerGeneratedAttribute]
private static Guid <ModuleDataStreamType>k__BackingField;
    [CompilerGeneratedAttribute]
private static Guid <CoverageDataStreamType>k__BackingField;
    [CompilerGeneratedAttribute]
private static Guid <PerTestCoverageDataStreamType>k__BackingField;
    [CompilerGeneratedAttribute]
private static Guid <TestListInformationDataStreamType>k__BackingField;
    public static string CoverageFileExtension;
    public static string CoverageFileBackupExtension;
    public static string ModuleCoverageFileExtension;
    public static string ModuleCoverageFileBackupExtension;
    public static string ModuleBufferFileExtension;
    public static string CoverageXmlFileExtension;
    public static string CoberturaFileExtension;
    public static string XmlFileExtension;
    public static string ExeFileExtension;
    public static string DefaultGeneratorName;
    public static string CoberturaGeneratorName;
    public static string CoverageGeneratorName;
    public static string VanguardX86ProfilerConfigVariable;
    public static string VanguardX64ProfilerConfigVariable;
    public static string VanguardARM64ProfilerConfigVariable;
    public static string CoreclrProfilerPathVariable32;
    public static string CoreclrProfilerPathVariable64;
    public static string CoreclrProfilerPathVariableARM64;
    public static string CoreclrEnableProfilingVariable;
    public static string CoreclrProfilerVariable;
    public static string CorProfilerPathVariable;
    public static string CorProfilerPathVariable32;
    public static string CorProfilerPathVariable64;
    public static string CorProfilerPathVariableARM64;
    public static string CorEnableProfilingVariable;
    public static string CorProfilerVariable;
    public static string VanguardInstrumentationMethodGuid;
    public static string ClrInstrumentationEngineProfilerGuid;
    public static string CodeCoverageSessionNameVariable;
    public static string CodeCoveragePipePathVariable;
    public static string VanguardSkipEngineInitializationVariable;
    public static string CodeCoveragePipeCountVariable;
    public static string PathEnvironmentVariable;
    public static string ClrIeLogLevelVariable;
    public static string ClrIeDisableCodeSignatureValidationVariable;
    public static string ClrieFileLogPathVariable;
    public static string DefaultOutputWithoutExtensions;
    public static string DefaultOutput;
    public static string LogLevelError;
    public static string LogLevelInfo;
    public static string LogLevelVerbose;
    public static int MaxTaskCount;
    internal static int MaxNumberOfServerInstances;
    public static int DefaultTimeout;
    public static string CodeCoverageFeatureFlag;
    public static string VANGUARD_DOTNETCOVERAGECONSOLE_DEBUG;
    public static string VANGUARD_CODECOVERAGECONSOLE_DEBUG;
    public static string VANGUARD_DATACOLLECTOR_DEBUG;
    public static Guid ModulesSkippedStreamType { get; }
    public static Guid ModuleDataStreamType { get; }
    public static Guid CoverageDataStreamType { get; }
    public static Guid PerTestCoverageDataStreamType { get; }
    public static Guid TestListInformationDataStreamType { get; }
    private static Constants();
    [CompilerGeneratedAttribute]
public static Guid get_ModulesSkippedStreamType();
    [CompilerGeneratedAttribute]
public static Guid get_ModuleDataStreamType();
    [CompilerGeneratedAttribute]
public static Guid get_CoverageDataStreamType();
    [CompilerGeneratedAttribute]
public static Guid get_PerTestCoverageDataStreamType();
    [CompilerGeneratedAttribute]
public static Guid get_TestListInformationDataStreamType();
}
public enum Microsoft.CodeCoverage.Core.CoverageMergeOperation : Enum {
    public int value__;
    public static CoverageMergeOperation MergeSimilarFormats;
    public static CoverageMergeOperation MergeToCoverage;
    public static CoverageMergeOperation MergeToXml;
    public static CoverageMergeOperation MergeToCobertura;
}
public enum Microsoft.CodeCoverage.Core.CoverageReportType : Enum {
    public int value__;
    public static CoverageReportType Coverage;
    public static CoverageReportType Xml;
    public static CoverageReportType Cobertura;
}
public enum Microsoft.CodeCoverage.Core.CoverageStatus : Enum {
    public int value__;
    public static CoverageStatus yes;
    public static CoverageStatus partial;
    public static CoverageStatus no;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeCoverage.Core.DirectoryHelper : object {
    public sealed virtual void Delete(string path, bool recursive);
    public sealed virtual void CreateDirectory(string path);
    public sealed virtual void CreateDirectoryIfNeeded(string filePath);
    public sealed virtual bool Exists(string path);
    public sealed virtual bool Exists(DirectoryInfo directoryInfo);
    public sealed virtual FileInfo[] GetFiles(DirectoryInfo directoryInfo, string searchPattern, SearchOption searchOption);
    public sealed virtual String[] GetFiles(string path, string searchPattern, SearchOption searchOption);
    public sealed virtual String[] GetDirectories(string path);
    public sealed virtual DateTime GetLastAccessTimeUtc(string path);
    public sealed virtual void SetLastAccessTimeUtc(string path, DateTime lastAccessTimeUtc);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeCoverage.Core.EnvironmentVariablesCalculator : object {
    private static string PROCESSOR_ARCHITECTURE;
    private IEnvironment _environment;
    private IFileHelper _fileHelper;
    private IDirectoryHelper _directoryHelper;
    private IProfilersLocationProvider _profilersLocationProvider;
    private IStaticNativeRuntimeProviderFactory _staticNativeRuntimeProviderFactory;
    public EnvironmentVariablesCalculator(IEnvironment environment, IFileHelper fileHelper, IDirectoryHelper directoryHelper, IProfilersLocationProvider profilersLocationProvider, IStaticNativeRuntimeProviderFactory staticNativeRuntimeProviderFactory);
    public sealed virtual IEnumerable`1<KeyValuePair`2<string, string>> GetEnvironmentVariables(bool intellitraceEnabled, string sessionName, string pipePath, DataCollectorConfiguration configuration, ILogger logger);
    private IEnumerable`1<KeyValuePair`2<string, string>> GetNetCoreEnvironmentVariables(DataCollectorConfiguration configuration);
    private IEnumerable`1<KeyValuePair`2<string, string>> GetNetFrameworkEnvironmentVariables(bool intellitraceEnabled, DataCollectorConfiguration configuration);
    private IEnumerable`1<KeyValuePair`2<string, string>> GetClrIeProfilerCommonEnvironmentVariables(DataCollectorConfiguration configuration, ILogger logger);
    private bool IsDynamicCodeCoverageEnabled(DataCollectorConfiguration configuration);
    private bool IsManagedDynamicCodeCoverageEnabled(DataCollectorConfiguration configuration);
    private bool IsNativeDynamicCodeCoverageEnabled(DataCollectorConfiguration configuration);
    private string GetFileLogPathAndGenerateDirectoryIfNeeded(DataCollectorConfiguration configuration, ILogger logger);
    private string GetFileLogPath(DataCollectorConfiguration configuration);
    private bool IsDirectory(string path);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeCoverage.Core.FileHelper : object {
    public sealed virtual bool Exists(string path);
    public sealed virtual bool Exists(FileInfo fileInfo);
    public sealed virtual void WriteAllText(string path, string contents);
    public sealed virtual String[] ReadAllLines(string path);
    public sealed virtual void Delete(string path);
    public sealed virtual void Move(string sourceFileName, string destFileName);
    public sealed virtual void Copy(string sourceFileName, string destFileName, bool overwrite);
    public sealed virtual Stream OpenRead(string path);
}
public enum Microsoft.CodeCoverage.Core.FunctionSkipReason : Enum {
    public int value__;
    public static FunctionSkipReason too_small;
    public static FunctionSkipReason too_large;
    public static FunctionSkipReason source_excluded;
    public static FunctionSkipReason name_excluded;
    public static FunctionSkipReason excluded_inline;
    public static FunctionSkipReason has_external_branch;
    public static FunctionSkipReason is_duplicate;
    public static FunctionSkipReason attribute_excluded;
    public static FunctionSkipReason no_line_information;
    public static FunctionSkipReason instrumentation_failure;
}
internal static class Microsoft.CodeCoverage.Core.Helpers : object {
    public static string GenerateCoverageFileName();
    public static CoverageMergeOperation ToCoverageMergeOperation(CoverageReportType coverageReportType);
    public static string GetGlobalCachePath(string cachePath);
    public static string GetCachePath(string cachePath, string correlationId);
    public static string GetMutexName(string correlationId, string hash);
    public static string GetMutexName(string hash);
    public static IList`1<ValueTuple`3<string, CoverageReportType, object>> GetCoverageReports(IList`1<string> inputFiles, bool skipInvalidFiles, CancellationToken token);
    public static ValueTuple`2<CoverageReportType, object> GetCoverageReport(string path, bool skipInvalidFiles, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.CodeCoverage.Core.Helpers/<MergeCoverageReportsAsync>d__10")]
public static Task`1<IList`1<string>> MergeCoverageReportsAsync(string outputPath, IList`1<string> inputFiles, CoverageMergeOperation mergeOperation, bool skipInvalidFiles, int taskCount, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.CodeCoverage.Core.Helpers/<MergeCoverageReportsAsync>d__11")]
public static Task`1<IList`1<string>> MergeCoverageReportsAsync(string outputPath, IList`1<ValueTuple`3<string, CoverageReportType, object>> reports, CoverageMergeOperation mergeOperation, bool skipInvalidFiles, int taskCount, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.CodeCoverage.Core.Helpers/<MergeCoverageFilesAsync>d__12`1")]
public static Task`1<T> MergeCoverageFilesAsync(Queue`1<ValueTuple`2<string, T>> queue, GetCoverageFile`1<T> getCoverageFile, MergeCoverageFiles`1<T> mergeCoverageFiles, CancellationToken token, bool skipInvalidFiles, int taskCount);
    public static Byte[] ToBytesArray(string value);
    public static string CalculateStringSha256(string input);
    public static string ConvertToString(Byte[] hashBytes);
    [AsyncStateMachineAttribute("Microsoft.CodeCoverage.Core.Helpers/<MergeCoverageFilesAsync>d__16`1")]
private static Task MergeCoverageFilesAsync(Queue`1<ValueTuple`2<string, T>> queue, GetCoverageFile`1<T> getCoverageFile, MergeCoverageFiles`1<T> mergeCoverageFiles, bool skipInvalidFiles, object lockObject, CancellationToken token);
    private static bool PrepareMergeTaskInput(Queue`1<ValueTuple`2<string, T>> queue, object lockObject, ValueTuple`2& input1, ValueTuple`2& input2);
    [AsyncStateMachineAttribute("Microsoft.CodeCoverage.Core.Helpers/<MergeSimilarFormatsAsync>d__18")]
private static Task`1<IList`1<string>> MergeSimilarFormatsAsync(string outputPath, IList`1<ValueTuple`3<string, CoverageReportType, object>> reports, bool skipInvalidFiles, int taskCount, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.CodeCoverage.Core.Helpers/<MergeReportsAsync>d__19")]
private static Task`1<string> MergeReportsAsync(string outputPath, IList`1<ValueTuple`3<string, CoverageReportType, object>> reports, CoverageMergeOperation mergeOperation, bool skipInvalidFiles, int taskCount, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.CodeCoverage.Core.Helpers/<MergeCoberturaAsync>d__20")]
private static Task`1<CoberturaFile> MergeCoberturaAsync(IList`1<ValueTuple`3<string, CoverageReportType, object>> reports, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.CodeCoverage.Core.Helpers/<MergeCoverageAsync>d__21")]
private static Task`1<CoverageData> MergeCoverageAsync(IList`1<ValueTuple`3<string, CoverageReportType, object>> reports, bool skipInvalidFiles, int taskCount, CancellationToken token, bool loadAllModuleData);
    [CompilerGeneratedAttribute]
internal static string <GenerateCoverageFileName>g__GetUserName|2_0();
}
[NullableContextAttribute("1")]
internal interface Microsoft.CodeCoverage.Core.IDirectoryHelper {
    public abstract virtual void Delete(string path, bool recursive);
    public abstract virtual void CreateDirectory(string path);
    public abstract virtual void CreateDirectoryIfNeeded(string filePath);
    public abstract virtual bool Exists(string path);
    public abstract virtual bool Exists(DirectoryInfo directoryInfo);
    public abstract virtual FileInfo[] GetFiles(DirectoryInfo directoryInfo, string searchPattern, SearchOption searchOption);
    public abstract virtual String[] GetFiles(string path, string searchPattern, SearchOption searchOption);
    public abstract virtual String[] GetDirectories(string path);
    public abstract virtual DateTime GetLastAccessTimeUtc(string path);
    public abstract virtual void SetLastAccessTimeUtc(string path, DateTime lastAccessTimeUtc);
}
[NullableContextAttribute("1")]
public interface Microsoft.CodeCoverage.Core.IEnvironment {
    public PlatformOperatingSystem OperatingSystem { get; }
    public bool IsWindows { get; }
    public abstract virtual PlatformOperatingSystem get_OperatingSystem();
    public abstract virtual bool get_IsWindows();
    public abstract virtual string GetEnvironmentVariable(string variable, EnvironmentVariableTarget target);
    public abstract virtual string ExpandEnvironmentVariables(string name);
}
internal interface Microsoft.CodeCoverage.Core.IEnvironmentVariablesCalculator {
    public abstract virtual IEnumerable`1<KeyValuePair`2<string, string>> GetEnvironmentVariables(bool intellitraceEnabled, string sessionName, string pipePath, DataCollectorConfiguration configuration, ILogger logger);
}
internal interface Microsoft.CodeCoverage.Core.IFileHelper {
    public abstract virtual bool Exists(string path);
    public abstract virtual bool Exists(FileInfo fileInfo);
    public abstract virtual void WriteAllText(string path, string contents);
    public abstract virtual String[] ReadAllLines(string path);
    public abstract virtual void Delete(string path);
    public abstract virtual void Move(string sourceFileName, string destFileName);
    public abstract virtual void Copy(string sourceFileName, string destFileName, bool overwrite);
    public abstract virtual Stream OpenRead(string path);
}
[NullableContextAttribute("1")]
public interface Microsoft.CodeCoverage.Core.ILogger {
    public abstract virtual void LogWarning(string message);
    public abstract virtual void LogError(string message);
    public abstract virtual void LogInfo(string message);
    public abstract virtual void LogVerbose(string message);
    public abstract virtual void LogError(Exception exceptionToTrace);
}
internal interface Microsoft.CodeCoverage.Core.INativeHelper {
    public abstract virtual IntPtr LoadLibrary(string dllToLoad);
    public abstract virtual IntPtr GetProcAddress(IntPtr hModule, string procedureName);
    public abstract virtual bool FreeLibrary(IntPtr hModule);
    public abstract virtual Delegate GetDelegateForFunctionPointer(IntPtr ptr, Type t);
}
internal class Microsoft.CodeCoverage.Core.IO.BinaryMessageReader : object {
    private bool _haveTag;
    private UInt32 _currentTag;
    [CompilerGeneratedAttribute]
private BinaryReader <Reader>k__BackingField;
    [CompilerGeneratedAttribute]
private long <End>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Start>k__BackingField;
    public BinaryReader Reader { get; }
    public long CurrentPosition { get; }
    public long End { get; }
    public long Start { get; }
    public BinaryMessageReader(BinaryReader reader, long startOffset, long endOffset);
    public BinaryMessageReader(BinaryReader reader, long startOffset, long endOffset, bool sync);
    [CompilerGeneratedAttribute]
public BinaryReader get_Reader();
    public long get_CurrentPosition();
    [CompilerGeneratedAttribute]
public long get_End();
    [CompilerGeneratedAttribute]
public long get_Start();
    public bool HasMessage(ushort messageTag);
    public void Sync();
    public bool CanRead();
    public SuccessMessage ReadSuccessMessage();
    public RegisterClientMessage ReadRegisterClientMessage();
    public RegisterClientResponseMessage ReadRegisterClientResponseMessage();
    public CreateStreamMessage ReadCreateStreamMessage();
    public CreateStreamResponseMessage ReadCreateStreamResponseMessage();
    public WriteStreamMessage ReadWriteStreamMessage();
    public CloseStreamMessage ReadCloseStreamMessage();
    public ClientErrorMessage ReadClientErrorMessage();
    public ShutdownMessage ReadShutdownMessage();
    public WriteStreamBuffersMessage ReadWriteStreamBuffersMessage();
    public ConfigLoggerMessage ReadConfigLoggerMessage();
    public GetCoverageDataMessage ReadGetCoverageDataMessage();
    public InitializeClientMessage ReadInitializeClientMessage();
    public InitializeClientResponseMessage ReadInitializeClientResponseMessage();
    public LoadModuleDataMessage ReadLoadModuleDataMessage();
    public InstrumentedModuleMessage ReadInstrumentedModuleMessage();
    public InstrumentedFunctionMessage ReadInstrumentedFunctionMessage();
    public PreloadModuleDataMessage ReadPreloadModuleDataMessage();
    public PreloadModuleDataResponseMessage ReadPreloadModuleDataResponseMessage();
    public GetInformationMessage ReadGetInformationMessage();
    public GetInformationResponseMessage ReadGetInformationResponseMessage();
    public ShutdownLoggerMessage ReadShutdownLoggerMessage();
    public InstrumentationStatisticsMessage ReadInstrumentationStatisticsMessage();
    public TestCoverageDataMessage ReadTestCoverageDataMessage();
    public ModuleBufferMessage ReadModuleBufferMessage();
    public ModuleInstrumentedMessage ReadModuleInstrumentedMessage();
    private static ModuleInstrumentedMessage ReadModuleInstrumentedMessage(BinaryReader reader);
    public SourceFileDataMessage ReadSourceFileDataMessage();
    public FunctionInstrumentedMessage ReadFunctionInstrumentedMessage();
    private static BlockLineDataMessage ReadBlockLineDataMessage(BinaryReader reader);
    public FunctionSkippedMessage ReadFunctionSkippedMessage();
    public ModuleSkippedMessage ReadModuleSkippedMessage();
    public CacheMessage ReadCacheMessage();
    public FetchCacheMessage ReadFetchCacheMessage();
    public SnapshotMessage ReadSnapshotMessage();
    public FilePathsMessage ReadFilePathsMessage();
    public TestListIdentifierDataMessage ReadTestListIdentifierDataMessage();
    public CoverageBufferHashMessage ReadCoverageBufferHashMessage();
    public TestInformationListDataMessage ReadTestListInformationDataMessage();
    private static BufferMessage ReadBufferMessage(BinaryReader reader);
    [CompilerGeneratedAttribute]
private TestInformation <ReadTestListInformationDataMessage>b__56_0(BinaryReader r);
}
internal static class Microsoft.CodeCoverage.Core.IO.BinaryMessageWriter : object {
    public static void WriteSuccessMessage(BinaryWriter writer);
    public static void WriteRegisterClientMessage(BinaryWriter writer, RegisterClientMessage message);
    public static void WriteRegisterClientResponseMessage(BinaryWriter writer);
    public static void WriteCreateStreamMessage(BinaryWriter writer, CreateStreamMessage message);
    public static void WriteCreateStreamResponseMessage(BinaryWriter writer, CreateStreamResponseMessage message);
    public static void WriteWriteStreamMessage(BinaryWriter writer, WriteStreamMessage message);
    public static void WriteCloseStreamMessage(BinaryWriter writer, CloseStreamMessage message);
    public static void WriteClientErrorMessage(BinaryWriter writer, ClientErrorMessage message);
    public static void WriteShutdownMessage(BinaryWriter writer);
    public static void WriteWriteStreamBuffersMessage(BinaryWriter writer, WriteStreamBuffersMessage message);
    public static void WriteConfigLoggerMessage(BinaryWriter writer);
    public static void WriteGetCoverageDataMessage(BinaryWriter writer, GetCoverageDataMessage message);
    public static void WriteInitializeClientMessage(BinaryWriter writer, InitializeClientMessage message);
    public static void WriteInitializeClientResponseMessage(BinaryWriter writer, InitializeClientResponseMessage message);
    public static void WriteLoadModuleDataMessage(BinaryWriter writer, LoadModuleDataMessage message);
    public static void WriteInstrumentedModuleMessage(BinaryWriter writer, InstrumentedModuleMessage message);
    public static void WriteInstrumentedFunctionMessage(BinaryWriter writer, InstrumentedFunctionMessage message);
    public static void WritePreloadModuleDataMessage(BinaryWriter writer, PreloadModuleDataMessage message);
    public static void WritePreloadModuleDataResponseMessage(BinaryWriter writer, PreloadModuleDataResponseMessage message);
    public static void WriteGetInformationMessage(BinaryWriter writer, GetInformationMessage message);
    public static void WriteGetInformationResponseMessage(BinaryWriter writer, GetInformationResponseMessage message);
    public static void WriteShutdownLoggerMessage(BinaryWriter writer);
    public static void WriteInstrumentationStatisticsMessage(BinaryWriter writer, InstrumentationStatisticsMessage message);
    public static void WriteTestCoverageDataMessage(BinaryWriter writer, TestCoverageDataMessage message);
    public static void WriteModuleBufferMessage(BinaryWriter writer, ModuleBufferMessage message);
    public static void WriteModuleInstrumentedMessage(BinaryWriter writer, ModuleInstrumentedMessage message);
    public static void WriteFunctionInstrumentedMessage(BinaryWriter writer, FunctionInstrumentedMessage message);
    public static void WriteFunctionSkippedMessage(BinaryWriter writer, FunctionSkippedMessage message);
    public static void WriteBlockLineDataMessage(BinaryWriter writer, BlockLineDataMessage message, bool addMessageTag);
    public static void WriteSourceFileDataMessage(BinaryWriter writer, SourceFileDataMessage message);
    public static void WriteModuleSkippedMessage(BinaryWriter writer, ModuleSkippedMessage message);
    public static void WriteCacheMessage(BinaryWriter writer, CacheMessage message);
    public static void WriteFetchNativeModuleDataMessage(BinaryWriter writer, FetchCacheMessage message);
    public static void WriteSnapshotMessage(BinaryWriter writer, SnapshotMessage message);
    public static void WriteFilePathsMessage(BinaryWriter writer, FilePathsMessage message);
    private static void WriteBufferMessage(BinaryWriter writer, BufferMessage message);
    public static void WriteTestIdentifierDataMessage(BinaryWriter writer, TestListIdentifierDataMessage message);
    public static void WriteCoverageBufferHashMessage(BinaryWriter writer, CoverageBufferHashMessage message);
    public static void WriteTestListInformationDataMessage(BinaryWriter writer, TestInformationListDataMessage message);
}
internal class Microsoft.CodeCoverage.Core.IO.FileHeader : object {
    [CompilerGeneratedAttribute]
private UInt32 <Magic>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <MessageSchemaVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <StreamsCount>k__BackingField;
    public UInt32 Magic { get; public set; }
    public ushort MessageSchemaVersion { get; public set; }
    public UInt32 StreamsCount { get; public set; }
    [CompilerGeneratedAttribute]
public UInt32 get_Magic();
    [CompilerGeneratedAttribute]
public void set_Magic(UInt32 value);
    [CompilerGeneratedAttribute]
public ushort get_MessageSchemaVersion();
    [CompilerGeneratedAttribute]
public void set_MessageSchemaVersion(ushort value);
    [CompilerGeneratedAttribute]
public UInt32 get_StreamsCount();
    [CompilerGeneratedAttribute]
public void set_StreamsCount(UInt32 value);
}
[ExtensionAttribute]
internal static class Microsoft.CodeCoverage.Core.IO.IoHelpers : object {
    [ExtensionAttribute]
internal static Guid ReadGuid(BinaryReader reader);
    internal static Char[] ReadChars(BinaryReader reader, int count);
    internal static Char[] ReadChars(BinaryReader reader);
    internal static Byte[] ReadBytes(BinaryReader reader, int count);
    internal static Byte[] ReadBytes(BinaryReader reader);
    internal static string ReadString(BinaryReader reader);
    internal static T[] ReadArray(BinaryReader reader, Func`2<BinaryReader, T> returnItemFunc);
    internal static string ReadStringBytes(BinaryReader reader);
    [ExtensionAttribute]
internal static void Write(BinaryWriter writer, Guid guid);
    internal static void WriteBytes(BinaryWriter writer, Byte[] buffer);
    internal static void WriteString(BinaryWriter writer, string text, bool addLength);
    internal static void WriteStringBytes(BinaryWriter writer, string text, bool addLength);
    internal static void WriteFileHeader(BinaryWriter writer, UInt32 fileHeaderMagic, ushort schemaVersion, UInt32 streamsCount);
    internal static void WriteStreamHeader(BinaryWriter writer, UInt32 streamHeaderMagic, Guid streamType, Guid identifier, UInt32 streamSize, long streamPosition);
    internal static void WriteStreamHeader(BinaryWriter writer, StreamHeader streamHeader);
    internal static void WriteStreamHeader(BinaryWriter writer, UInt32 streamHeaderMagic, Guid streamType, Guid identifier, UInt32 streamSize);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
internal class Microsoft.CodeCoverage.Core.IO.StreamHeader : object {
    [CompilerGeneratedAttribute]
private UInt32 <Magic>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <StreamType>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <Identifier>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <StreamSize>k__BackingField;
    public UInt32 Magic { get; public set; }
    public Guid StreamType { get; public set; }
    public Guid Identifier { get; public set; }
    public UInt32 StreamSize { get; public set; }
    private string DebuggerDisplay { get; }
    [CompilerGeneratedAttribute]
public UInt32 get_Magic();
    [CompilerGeneratedAttribute]
public void set_Magic(UInt32 value);
    [CompilerGeneratedAttribute]
public Guid get_StreamType();
    [CompilerGeneratedAttribute]
public void set_StreamType(Guid value);
    [CompilerGeneratedAttribute]
public Guid get_Identifier();
    [CompilerGeneratedAttribute]
public void set_Identifier(Guid value);
    [CompilerGeneratedAttribute]
public UInt32 get_StreamSize();
    [CompilerGeneratedAttribute]
public void set_StreamSize(UInt32 value);
    private string get_DebuggerDisplay();
}
public static class Microsoft.CodeCoverage.Core.IO.XmlObjectSerializer : object {
    private static XmlWriterSettings XmlWriterSettings;
    private static XmlWriterSettings XmlWriterSettingsWithoutDeclaration;
    private static XmlObjectSerializer();
    public static void Write(string path, T source);
    public static void Write(string path, T source, bool skipNamespace);
    public static string Serialize(T source, bool skipNamespace);
    public static bool TryRead(string path, T& result);
    public static T Read(string path);
    public static T Deserialize(XNode document);
    private static void Serialize(T source, bool skipNamespace, XmlSerializer serializer, XmlWriter writer);
}
[NullableContextAttribute("1")]
internal interface Microsoft.CodeCoverage.Core.IProfilersLocationProvider {
    public abstract virtual string GetVanguardPath(DataCollectorConfiguration configuration);
    public abstract virtual string GetVanguardProfilerX86Path(DataCollectorConfiguration configuration);
    public abstract virtual string GetVanguardProfilerConfigX64Path(DataCollectorConfiguration configuration);
    public abstract virtual string GetVanguardProfilerConfigARM64Path(DataCollectorConfiguration configuration);
    public abstract virtual string GetVanguardProfilerConfigX86Path(DataCollectorConfiguration configuration);
    public abstract virtual string GetVanguardProfilerX64Path(DataCollectorConfiguration configuration);
    public abstract virtual string GetClrInstrumentationEngineX86Path(DataCollectorConfiguration configuration);
    public abstract virtual string GetClrInstrumentationEngineX64Path(DataCollectorConfiguration configuration);
    public abstract virtual string GetClrInstrumentationEngineARM64Path(DataCollectorConfiguration configuration);
    public abstract virtual string GetCodeCoverageShimPath(DataCollectorConfiguration configuration);
    public abstract virtual string GetStaticNativeInstrumenterX86Path(DataCollectorConfiguration configuration);
    public abstract virtual string GetStaticNativeInstrumenterX64Path(DataCollectorConfiguration configuration);
    public abstract virtual string GetStaticNativeInstrumenterConsoleX86Path(DataCollectorConfiguration configuration);
    public abstract virtual string GetStaticNativeInstrumenterConsoleX64Path(DataCollectorConfiguration configuration);
    public abstract virtual string GetStaticNativeRuntimeX86Directory(DataCollectorConfiguration configuration);
    public abstract virtual string GetStaticNativeRuntimeX64Directory(DataCollectorConfiguration configuration);
    public abstract virtual string GetStaticNativeRuntimeARM64Directory(DataCollectorConfiguration configuration);
}
[NullableContextAttribute("1")]
internal interface Microsoft.CodeCoverage.Core.IRuntimeInformationHelper {
    public string RuntimeIdentifier { get; }
    public Architecture OSArchitecture { get; }
    public abstract virtual string get_RuntimeIdentifier();
    public abstract virtual bool IsOSPlatform(OSPlatform osPlatform);
    public abstract virtual Architecture get_OSArchitecture();
}
internal class Microsoft.CodeCoverage.Core.Messages.Control.BufferMessage : object {
    public static ushort MessageTag;
    [CompilerGeneratedAttribute]
private Byte[] <Buffer>k__BackingField;
    public Byte[] Buffer { get; public set; }
    [CompilerGeneratedAttribute]
public Byte[] get_Buffer();
    [CompilerGeneratedAttribute]
public void set_Buffer(Byte[] value);
}
internal class Microsoft.CodeCoverage.Core.Messages.Control.CacheMessage : object {
    public static ushort MessageTag;
    [CompilerGeneratedAttribute]
private Guid <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
private BufferMessage[] <Cache>k__BackingField;
    public Guid Key { get; public set; }
    public string Prefix { get; public set; }
    public BufferMessage[] Cache { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(Guid value);
    [CompilerGeneratedAttribute]
public string get_Prefix();
    [CompilerGeneratedAttribute]
public void set_Prefix(string value);
    [CompilerGeneratedAttribute]
public BufferMessage[] get_Cache();
    [CompilerGeneratedAttribute]
public void set_Cache(BufferMessage[] value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeCoverage.Core.Messages.Control.ClientErrorMessage : object {
    public static ushort MessageTag;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ErrorCode>k__BackingField;
    [NullableAttribute("2")]
public string Message { get; public set; }
    public String[] Arguments { get; public set; }
    public UInt32 ErrorCode { get; public set; }
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Message();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public String[] get_Arguments();
    [CompilerGeneratedAttribute]
public void set_Arguments(String[] value);
    [CompilerGeneratedAttribute]
public UInt32 get_ErrorCode();
    [CompilerGeneratedAttribute]
public void set_ErrorCode(UInt32 value);
}
internal class Microsoft.CodeCoverage.Core.Messages.Control.CloseStreamMessage : object {
    public static ushort MessageTag;
    [CompilerGeneratedAttribute]
private UInt32 <StreamId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Discard>k__BackingField;
    public UInt32 StreamId { get; public set; }
    public bool Discard { get; public set; }
    [CompilerGeneratedAttribute]
public UInt32 get_StreamId();
    [CompilerGeneratedAttribute]
public void set_StreamId(UInt32 value);
    [CompilerGeneratedAttribute]
public bool get_Discard();
    [CompilerGeneratedAttribute]
public void set_Discard(bool value);
}
internal class Microsoft.CodeCoverage.Core.Messages.Control.ConfigLoggerMessage : object {
    public static ushort MessageTag;
}
internal class Microsoft.CodeCoverage.Core.Messages.Control.CreateStreamMessage : object {
    public static ushort MessageTag;
    [CompilerGeneratedAttribute]
private Guid <StreamType>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <Identifier>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoClose>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BufferName>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <BufferSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BufferHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    public Guid StreamType { get; public set; }
    public Guid Identifier { get; public set; }
    public bool AutoClose { get; public set; }
    public string BufferName { get; public set; }
    public UInt32 BufferSize { get; public set; }
    public string BufferHeader { get; public set; }
    public Guid Key { get; public set; }
    public string Prefix { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_StreamType();
    [CompilerGeneratedAttribute]
public void set_StreamType(Guid value);
    [CompilerGeneratedAttribute]
public Guid get_Identifier();
    [CompilerGeneratedAttribute]
public void set_Identifier(Guid value);
    [CompilerGeneratedAttribute]
public bool get_AutoClose();
    [CompilerGeneratedAttribute]
public void set_AutoClose(bool value);
    [CompilerGeneratedAttribute]
public string get_BufferName();
    [CompilerGeneratedAttribute]
public void set_BufferName(string value);
    [CompilerGeneratedAttribute]
public UInt32 get_BufferSize();
    [CompilerGeneratedAttribute]
public void set_BufferSize(UInt32 value);
    [CompilerGeneratedAttribute]
public string get_BufferHeader();
    [CompilerGeneratedAttribute]
public void set_BufferHeader(string value);
    [CompilerGeneratedAttribute]
public Guid get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(Guid value);
    [CompilerGeneratedAttribute]
public string get_Prefix();
    [CompilerGeneratedAttribute]
public void set_Prefix(string value);
}
internal class Microsoft.CodeCoverage.Core.Messages.Control.CreateStreamResponseMessage : object {
    public static ushort MessageTag;
    [CompilerGeneratedAttribute]
private UInt32 <StreamId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BufferName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StreamExists>k__BackingField;
    public UInt32 StreamId { get; public set; }
    public string BufferName { get; public set; }
    public bool StreamExists { get; public set; }
    [CompilerGeneratedAttribute]
public UInt32 get_StreamId();
    [CompilerGeneratedAttribute]
public void set_StreamId(UInt32 value);
    [CompilerGeneratedAttribute]
public string get_BufferName();
    [CompilerGeneratedAttribute]
public void set_BufferName(string value);
    [CompilerGeneratedAttribute]
public bool get_StreamExists();
    [CompilerGeneratedAttribute]
public void set_StreamExists(bool value);
}
internal class Microsoft.CodeCoverage.Core.Messages.Control.FetchCacheMessage : object {
    public static ushort MessageTag;
    [CompilerGeneratedAttribute]
private Guid <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    public Guid Key { get; public set; }
    public string Prefix { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(Guid value);
    [CompilerGeneratedAttribute]
public string get_Prefix();
    [CompilerGeneratedAttribute]
public void set_Prefix(string value);
}
internal class Microsoft.CodeCoverage.Core.Messages.Control.FilePathsMessage : object {
    public static ushort MessageTag;
    [CompilerGeneratedAttribute]
private String[] <FilePaths>k__BackingField;
    public String[] FilePaths { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_FilePaths();
    [CompilerGeneratedAttribute]
public void set_FilePaths(String[] value);
}
internal class Microsoft.CodeCoverage.Core.Messages.Control.GetCoverageDataMessage : object {
    public static ushort MessageTag;
    [CompilerGeneratedAttribute]
private string <OutputFilePath>k__BackingField;
    public string OutputFilePath { get; public set; }
    [CompilerGeneratedAttribute]
public string get_OutputFilePath();
    [CompilerGeneratedAttribute]
public void set_OutputFilePath(string value);
}
internal class Microsoft.CodeCoverage.Core.Messages.Control.GetInformationMessage : object {
    public static ushort MessageTag;
    [CompilerGeneratedAttribute]
private InformationType <InformationType>k__BackingField;
    public InformationType InformationType { get; public set; }
    [CompilerGeneratedAttribute]
public InformationType get_InformationType();
    [CompilerGeneratedAttribute]
public void set_InformationType(InformationType value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.CodeCoverage.Core.Messages.Control.GetInformationResponseMessage : object {
    public static ushort MessageTag;
    [CompilerGeneratedAttribute]
private string <Information>k__BackingField;
    public string Information { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Information();
    [CompilerGeneratedAttribute]
public void set_Information(string value);
}
internal enum Microsoft.CodeCoverage.Core.Messages.Control.InformationType : Enum {
    public int value__;
    public static InformationType DataCollector;
    public static InformationType CodeCoverage;
    public static InformationType LoggerProcessId;
}
internal class Microsoft.CodeCoverage.Core.Messages.Control.InitializeClientMessage : object {
    public static ushort MessageTag;
    [CompilerGeneratedAttribute]
private UInt32 <SchemaVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ProcessId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    public UInt32 SchemaVersion { get; public set; }
    public UInt32 ProcessId { get; public set; }
    public string Path { get; public set; }
    [CompilerGeneratedAttribute]
public UInt32 get_SchemaVersion();
    [CompilerGeneratedAttribute]
public void set_SchemaVersion(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_ProcessId();
    [CompilerGeneratedAttribute]
public void set_ProcessId(UInt32 value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
}
internal class Microsoft.CodeCoverage.Core.Messages.Control.InitializeClientResponseMessage : object {
    public static ushort MessageTag;
    [CompilerGeneratedAttribute]
private bool <IsCodeCoverageEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <CommunicationTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    public bool IsCodeCoverageEnabled { get; public set; }
    public UInt32 CommunicationTimeout { get; public set; }
    public string Path { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsCodeCoverageEnabled();
    [CompilerGeneratedAttribute]
public void set_IsCodeCoverageEnabled(bool value);
    [CompilerGeneratedAttribute]
public UInt32 get_CommunicationTimeout();
    [CompilerGeneratedAttribute]
public void set_CommunicationTimeout(UInt32 value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeCoverage.Core.Messages.Control.InstrumentationStatisticsMessage : object {
    public static ushort MessageTag;
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <CoverageBufferId>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Dynamic>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Managed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Mixed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PortablePdb>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ModuleSize>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ModuleLinkTime>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Instrumented>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Skipped>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Failed>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Elapsed>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Properties>k__BackingField;
    public Guid Id { get; public set; }
    public Guid CoverageBufferId { get; public set; }
    [NullableAttribute("2")]
public string Path { get; public set; }
    public bool Dynamic { get; public set; }
    public bool Managed { get; public set; }
    public bool Mixed { get; public set; }
    public bool PortablePdb { get; public set; }
    public UInt32 ModuleSize { get; public set; }
    public UInt32 ModuleLinkTime { get; public set; }
    public UInt32 Instrumented { get; public set; }
    public UInt32 Skipped { get; public set; }
    public UInt32 Failed { get; public set; }
    public UInt32 Elapsed { get; public set; }
    public String[] Properties { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public Guid get_CoverageBufferId();
    [CompilerGeneratedAttribute]
public void set_CoverageBufferId(Guid value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Path();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public bool get_Dynamic();
    [CompilerGeneratedAttribute]
public void set_Dynamic(bool value);
    [CompilerGeneratedAttribute]
public bool get_Managed();
    [CompilerGeneratedAttribute]
public void set_Managed(bool value);
    [CompilerGeneratedAttribute]
public bool get_Mixed();
    [CompilerGeneratedAttribute]
public void set_Mixed(bool value);
    [CompilerGeneratedAttribute]
public bool get_PortablePdb();
    [CompilerGeneratedAttribute]
public void set_PortablePdb(bool value);
    [CompilerGeneratedAttribute]
public UInt32 get_ModuleSize();
    [CompilerGeneratedAttribute]
public void set_ModuleSize(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_ModuleLinkTime();
    [CompilerGeneratedAttribute]
public void set_ModuleLinkTime(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_Instrumented();
    [CompilerGeneratedAttribute]
public void set_Instrumented(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_Skipped();
    [CompilerGeneratedAttribute]
public void set_Skipped(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_Failed();
    [CompilerGeneratedAttribute]
public void set_Failed(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_Elapsed();
    [CompilerGeneratedAttribute]
public void set_Elapsed(UInt32 value);
    [CompilerGeneratedAttribute]
public String[] get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(String[] value);
}
internal class Microsoft.CodeCoverage.Core.Messages.Control.InstrumentedFunctionMessage : object {
    public static ushort MessageTag;
    [CompilerGeneratedAttribute]
private UInt32 <MetadataToken>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<UInt32> <FunctionBlocks>k__BackingField;
    public UInt32 MetadataToken { get; public set; }
    public UInt32 Offset { get; public set; }
    public IList`1<UInt32> FunctionBlocks { get; public set; }
    [CompilerGeneratedAttribute]
public UInt32 get_MetadataToken();
    [CompilerGeneratedAttribute]
public void set_MetadataToken(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_Offset();
    [CompilerGeneratedAttribute]
public void set_Offset(UInt32 value);
    [CompilerGeneratedAttribute]
public IList`1<UInt32> get_FunctionBlocks();
    [CompilerGeneratedAttribute]
public void set_FunctionBlocks(IList`1<UInt32> value);
}
internal class Microsoft.CodeCoverage.Core.Messages.Control.InstrumentedModuleMessage : object {
    public static ushort MessageTag;
    [CompilerGeneratedAttribute]
private string <BufferName>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <BufferSize>k__BackingField;
    public string BufferName { get; public set; }
    public UInt32 BufferSize { get; public set; }
    [CompilerGeneratedAttribute]
public string get_BufferName();
    [CompilerGeneratedAttribute]
public void set_BufferName(string value);
    [CompilerGeneratedAttribute]
public UInt32 get_BufferSize();
    [CompilerGeneratedAttribute]
public void set_BufferSize(UInt32 value);
}
internal class Microsoft.CodeCoverage.Core.Messages.Control.LoadModuleDataMessage : object {
    public static ushort MessageTag;
    [CompilerGeneratedAttribute]
private string <ModulePath>k__BackingField;
    public string ModulePath { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ModulePath();
    [CompilerGeneratedAttribute]
public void set_ModulePath(string value);
}
internal class Microsoft.CodeCoverage.Core.Messages.Control.PreloadModuleDataMessage : object {
    public static ushort MessageTag;
    [CompilerGeneratedAttribute]
private string <ModulePath>k__BackingField;
    public string ModulePath { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ModulePath();
    [CompilerGeneratedAttribute]
public void set_ModulePath(string value);
}
internal class Microsoft.CodeCoverage.Core.Messages.Control.PreloadModuleDataResponseMessage : object {
    public static ushort MessageTag;
    [CompilerGeneratedAttribute]
private bool <IsSupported>k__BackingField;
    public bool IsSupported { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsSupported();
    [CompilerGeneratedAttribute]
public void set_IsSupported(bool value);
}
internal class Microsoft.CodeCoverage.Core.Messages.Control.RegisterClientMessage : object {
    public static ushort MessageTag;
    [CompilerGeneratedAttribute]
private UInt32 <SchemaVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ProcessId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProcessOwnerSid>k__BackingField;
    public UInt32 SchemaVersion { get; public set; }
    public UInt32 ProcessId { get; public set; }
    public string ProcessOwnerSid { get; public set; }
    [CompilerGeneratedAttribute]
public UInt32 get_SchemaVersion();
    [CompilerGeneratedAttribute]
public void set_SchemaVersion(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_ProcessId();
    [CompilerGeneratedAttribute]
public void set_ProcessId(UInt32 value);
    [CompilerGeneratedAttribute]
public string get_ProcessOwnerSid();
    [CompilerGeneratedAttribute]
public void set_ProcessOwnerSid(string value);
}
internal class Microsoft.CodeCoverage.Core.Messages.Control.RegisterClientResponseMessage : object {
    public static ushort MessageTag;
}
internal class Microsoft.CodeCoverage.Core.Messages.Control.ShutdownLoggerMessage : object {
    public static ushort MessageTag;
}
internal class Microsoft.CodeCoverage.Core.Messages.Control.ShutdownMessage : object {
    public static ushort MessageTag;
}
internal class Microsoft.CodeCoverage.Core.Messages.Control.SnapshotMessage : object {
    public static ushort MessageTag;
    [CompilerGeneratedAttribute]
private bool <Reset>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputFilePath>k__BackingField;
    public bool Reset { get; public set; }
    public string OutputFilePath { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Reset();
    [CompilerGeneratedAttribute]
public void set_Reset(bool value);
    [CompilerGeneratedAttribute]
public string get_OutputFilePath();
    [CompilerGeneratedAttribute]
public void set_OutputFilePath(string value);
}
public class Microsoft.CodeCoverage.Core.Messages.Control.SuccessMessage : object {
    public static ushort MessageTag;
}
internal class Microsoft.CodeCoverage.Core.Messages.Control.WriteStreamBuffersMessage : object {
    public static ushort MessageTag;
    [CompilerGeneratedAttribute]
private Guid <StreamType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BufferHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ResetBuffers>k__BackingField;
    public Guid StreamType { get; public set; }
    public string BufferHeader { get; public set; }
    public bool ResetBuffers { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_StreamType();
    [CompilerGeneratedAttribute]
public void set_StreamType(Guid value);
    [CompilerGeneratedAttribute]
public string get_BufferHeader();
    [CompilerGeneratedAttribute]
public void set_BufferHeader(string value);
    [CompilerGeneratedAttribute]
public bool get_ResetBuffers();
    [CompilerGeneratedAttribute]
public void set_ResetBuffers(bool value);
}
internal class Microsoft.CodeCoverage.Core.Messages.Control.WriteStreamMessage : object {
    public static ushort MessageTag;
    [CompilerGeneratedAttribute]
private UInt32 <StreamId>k__BackingField;
    public UInt32 StreamId { get; public set; }
    [CompilerGeneratedAttribute]
public UInt32 get_StreamId();
    [CompilerGeneratedAttribute]
public void set_StreamId(UInt32 value);
}
internal class Microsoft.CodeCoverage.Core.Messages.CoverageData.ModuleBufferMessage : object {
    public static ushort MessageTag;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ModuleLinkTime>k__BackingField;
    public string Name { get; public set; }
    public UInt32 ModuleLinkTime { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public UInt32 get_ModuleLinkTime();
    [CompilerGeneratedAttribute]
public void set_ModuleLinkTime(UInt32 value);
}
internal class Microsoft.CodeCoverage.Core.Messages.CoverageData.TestCoverageDataMessage : object {
    public static ushort MessageTag;
    [CompilerGeneratedAttribute]
private string <TestId>k__BackingField;
    public string TestId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_TestId();
    [CompilerGeneratedAttribute]
public void set_TestId(string value);
}
internal class Microsoft.CodeCoverage.Core.Messages.ModuleData.BlockLineDataMessage : object {
    public static ushort MessageTag;
    [CompilerGeneratedAttribute]
private UInt32 <BlockIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <SourceId>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <StartLine>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <StartColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <EndLine>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <EndColumn>k__BackingField;
    public UInt32 BlockIndex { get; public set; }
    public UInt32 SourceId { get; public set; }
    public UInt32 StartLine { get; public set; }
    public UInt32 StartColumn { get; public set; }
    public UInt32 EndLine { get; public set; }
    public UInt32 EndColumn { get; public set; }
    [CompilerGeneratedAttribute]
public UInt32 get_BlockIndex();
    [CompilerGeneratedAttribute]
public void set_BlockIndex(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_SourceId();
    [CompilerGeneratedAttribute]
public void set_SourceId(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_StartLine();
    [CompilerGeneratedAttribute]
public void set_StartLine(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_StartColumn();
    [CompilerGeneratedAttribute]
public void set_StartColumn(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_EndLine();
    [CompilerGeneratedAttribute]
public void set_EndLine(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_EndColumn();
    [CompilerGeneratedAttribute]
public void set_EndColumn(UInt32 value);
    public virtual string ToString();
}
internal class Microsoft.CodeCoverage.Core.Messages.ModuleData.FunctionInstrumentedMessage : object {
    public static ushort MessageTag;
    [CompilerGeneratedAttribute]
private UInt32 <FunctionId>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <FunctionRva>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <MetadataToken>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <StartBlockIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <BlockCount>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NamespaceName>k__BackingField;
    [CompilerGeneratedAttribute]
private BlockLineDataMessage[] <LineData>k__BackingField;
    public UInt32 FunctionId { get; public set; }
    public UInt32 FunctionRva { get; public set; }
    public UInt32 MetadataToken { get; public set; }
    public UInt32 StartBlockIndex { get; public set; }
    public UInt32 BlockCount { get; public set; }
    public string Name { get; public set; }
    public string TypeName { get; public set; }
    public string NamespaceName { get; public set; }
    public BlockLineDataMessage[] LineData { get; public set; }
    [CompilerGeneratedAttribute]
public UInt32 get_FunctionId();
    [CompilerGeneratedAttribute]
public void set_FunctionId(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_FunctionRva();
    [CompilerGeneratedAttribute]
public void set_FunctionRva(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_MetadataToken();
    [CompilerGeneratedAttribute]
public void set_MetadataToken(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_StartBlockIndex();
    [CompilerGeneratedAttribute]
public void set_StartBlockIndex(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_BlockCount();
    [CompilerGeneratedAttribute]
public void set_BlockCount(UInt32 value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
public void set_TypeName(string value);
    [CompilerGeneratedAttribute]
public string get_NamespaceName();
    [CompilerGeneratedAttribute]
public void set_NamespaceName(string value);
    [CompilerGeneratedAttribute]
public BlockLineDataMessage[] get_LineData();
    [CompilerGeneratedAttribute]
public void set_LineData(BlockLineDataMessage[] value);
}
internal class Microsoft.CodeCoverage.Core.Messages.ModuleData.FunctionSkippedMessage : object {
    public static ushort MessageTag;
    [CompilerGeneratedAttribute]
private UInt32 <FunctionId>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <OriginalFunctionId>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <MetadataToken>k__BackingField;
    [CompilerGeneratedAttribute]
private FunctionSkipReason <SkipReason>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExceptionMessage>k__BackingField;
    public UInt32 FunctionId { get; public set; }
    public UInt32 OriginalFunctionId { get; public set; }
    public UInt32 MetadataToken { get; public set; }
    public FunctionSkipReason SkipReason { get; public set; }
    public string Name { get; public set; }
    public string TypeName { get; public set; }
    public string ExceptionMessage { get; public set; }
    [CompilerGeneratedAttribute]
public UInt32 get_FunctionId();
    [CompilerGeneratedAttribute]
public void set_FunctionId(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_OriginalFunctionId();
    [CompilerGeneratedAttribute]
public void set_OriginalFunctionId(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_MetadataToken();
    [CompilerGeneratedAttribute]
public void set_MetadataToken(UInt32 value);
    [CompilerGeneratedAttribute]
public FunctionSkipReason get_SkipReason();
    [CompilerGeneratedAttribute]
public void set_SkipReason(FunctionSkipReason value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
public void set_TypeName(string value);
    [CompilerGeneratedAttribute]
public string get_ExceptionMessage();
    [CompilerGeneratedAttribute]
public void set_ExceptionMessage(string value);
}
internal class Microsoft.CodeCoverage.Core.Messages.ModuleData.ModuleInstrumentedMessage : object {
    public static ushort MessageTag;
    [CompilerGeneratedAttribute]
private Byte[] <ModuleIdentifierBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <CoverageBufferId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ModuleSize>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ModuleLinkTime>k__BackingField;
    public string ModuleIdentifier { get; }
    public Byte[] ModuleIdentifierBytes { get; public set; }
    public Guid CoverageBufferId { get; public set; }
    public string Path { get; public set; }
    public UInt32 ModuleSize { get; public set; }
    public UInt32 ModuleLinkTime { get; public set; }
    public string get_ModuleIdentifier();
    [CompilerGeneratedAttribute]
public Byte[] get_ModuleIdentifierBytes();
    [CompilerGeneratedAttribute]
public void set_ModuleIdentifierBytes(Byte[] value);
    [CompilerGeneratedAttribute]
public Guid get_CoverageBufferId();
    [CompilerGeneratedAttribute]
public void set_CoverageBufferId(Guid value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public UInt32 get_ModuleSize();
    [CompilerGeneratedAttribute]
public void set_ModuleSize(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_ModuleLinkTime();
    [CompilerGeneratedAttribute]
public void set_ModuleLinkTime(UInt32 value);
}
internal class Microsoft.CodeCoverage.Core.Messages.ModuleData.SourceFileDataMessage : object {
    public static ushort MessageTag;
    [CompilerGeneratedAttribute]
private UInt32 <SourceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ChecksumType>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Checksum>k__BackingField;
    public UInt32 SourceId { get; public set; }
    public string Path { get; public set; }
    public UInt32 ChecksumType { get; public set; }
    public Byte[] Checksum { get; public set; }
    [CompilerGeneratedAttribute]
public UInt32 get_SourceId();
    [CompilerGeneratedAttribute]
public void set_SourceId(UInt32 value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public UInt32 get_ChecksumType();
    [CompilerGeneratedAttribute]
public void set_ChecksumType(UInt32 value);
    [CompilerGeneratedAttribute]
public Byte[] get_Checksum();
    [CompilerGeneratedAttribute]
public void set_Checksum(Byte[] value);
}
internal class Microsoft.CodeCoverage.Core.Messages.ModulesSkipped.ModuleSkippedMessage : object {
    public static ushort MessageTag;
    [CompilerGeneratedAttribute]
private ModuleSkipReason <SkipReason>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExceptionMessage>k__BackingField;
    public ModuleSkipReason SkipReason { get; public set; }
    public string Path { get; public set; }
    public string ExceptionMessage { get; public set; }
    [CompilerGeneratedAttribute]
public ModuleSkipReason get_SkipReason();
    [CompilerGeneratedAttribute]
public void set_SkipReason(ModuleSkipReason value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_ExceptionMessage();
    [CompilerGeneratedAttribute]
public void set_ExceptionMessage(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeCoverage.Core.Messages.PerTestCoverageData.CoverageBufferHashMessage : object {
    [CompilerGeneratedAttribute]
private string <HashName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BufferHash>k__BackingField;
    public static ushort MessageTag;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public string HashName { get; public set; }
    public string BufferHash { get; public set; }
    public CoverageBufferHashMessage(string HashName, string BufferHash);
    [CompilerGeneratedAttribute]
protected CoverageBufferHashMessage(CoverageBufferHashMessage original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_HashName();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_HashName(string value);
    [CompilerGeneratedAttribute]
public string get_BufferHash();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_BufferHash(string value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(CoverageBufferHashMessage left, CoverageBufferHashMessage right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(CoverageBufferHashMessage left, CoverageBufferHashMessage right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(CoverageBufferHashMessage other);
    [CompilerGeneratedAttribute]
public virtual CoverageBufferHashMessage <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& HashName, String& BufferHash);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeCoverage.Core.Messages.PerTestCoverageData.TestListIdentifierDataMessage : object {
    [CompilerGeneratedAttribute]
private String[] <TestIdentifiers>k__BackingField;
    public static ushort MessageTag;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public String[] TestIdentifiers { get; public set; }
    public TestListIdentifierDataMessage(String[] TestIdentifiers);
    [CompilerGeneratedAttribute]
protected TestListIdentifierDataMessage(TestListIdentifierDataMessage original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public String[] get_TestIdentifiers();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TestIdentifiers(String[] value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(TestListIdentifierDataMessage left, TestListIdentifierDataMessage right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(TestListIdentifierDataMessage left, TestListIdentifierDataMessage right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(TestListIdentifierDataMessage other);
    [CompilerGeneratedAttribute]
public virtual TestListIdentifierDataMessage <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String[]& TestIdentifiers);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeCoverage.Core.Messages.TestListInformationData.TestInformation : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public string Id { get; public set; }
    public string Name { get; public set; }
    public String[] Properties { get; public set; }
    public TestInformation(string Id, string Name, String[] Properties);
    [CompilerGeneratedAttribute]
protected TestInformation(TestInformation original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Name(string value);
    [CompilerGeneratedAttribute]
public String[] get_Properties();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Properties(String[] value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(TestInformation left, TestInformation right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(TestInformation left, TestInformation right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(TestInformation other);
    [CompilerGeneratedAttribute]
public virtual TestInformation <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& Id, String& Name, String[]& Properties);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeCoverage.Core.Messages.TestListInformationData.TestInformationListDataMessage : object {
    [CompilerGeneratedAttribute]
private TestInformation[] <TestList>k__BackingField;
    public static ushort MessageTag;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public TestInformation[] TestList { get; public set; }
    public TestInformationListDataMessage(TestInformation[] TestList);
    [CompilerGeneratedAttribute]
protected TestInformationListDataMessage(TestInformationListDataMessage original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public TestInformation[] get_TestList();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TestList(TestInformation[] value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(TestInformationListDataMessage left, TestInformationListDataMessage right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(TestInformationListDataMessage left, TestInformationListDataMessage right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(TestInformationListDataMessage other);
    [CompilerGeneratedAttribute]
public virtual TestInformationListDataMessage <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(TestInformation[]& TestList);
}
public enum Microsoft.CodeCoverage.Core.ModuleSkipReason : Enum {
    public int value__;
    public static ModuleSkipReason no_symbols;
    public static ModuleSkipReason path_is_excluded;
    public static ModuleSkipReason public_key_token_is_excluded;
    public static ModuleSkipReason company_name_is_excluded;
    public static ModuleSkipReason optimized_or_instrumented;
    public static ModuleSkipReason has_fixed_base;
    public static ModuleSkipReason nothing_instrumented;
    public static ModuleSkipReason instrumentation_failure;
    public static ModuleSkipReason configuration_changed;
    public static ModuleSkipReason module_compiler_generated;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeCoverage.Core.NativeHelper : object {
    public sealed virtual IntPtr LoadLibrary(string dllToLoad);
    public sealed virtual IntPtr GetProcAddress(IntPtr hModule, string procedureName);
    public sealed virtual bool FreeLibrary(IntPtr hModule);
    public sealed virtual Delegate GetDelegateForFunctionPointer(IntPtr ptr, Type t);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeCoverage.Core.NullLogger : object {
    public sealed virtual void LogError(string message);
    public sealed virtual void LogError(Exception exceptionToTrace);
    public sealed virtual void LogInfo(string message);
    public sealed virtual void LogVerbose(string message);
    public sealed virtual void LogWarning(string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeCoverage.Core.PlatformEnvironment : object {
    private static string LinuxReleaseFile;
    private static string LinuxReleaseFileIdPrefix;
    private IFileHelper _fileHelper;
    private IRuntimeInformationHelper _runtimeInformationHelper;
    private Nullable`1<PlatformOperatingSystem> _platformOperatingSystem;
    public PlatformOperatingSystem OperatingSystem { get; }
    public bool IsWindows { get; }
    internal PlatformEnvironment(IFileHelper fileHelper, IRuntimeInformationHelper runtimeInformationHelper);
    public sealed virtual PlatformOperatingSystem get_OperatingSystem();
    public sealed virtual bool get_IsWindows();
    private string GetLinuxDistributionFromFile();
    public sealed virtual string GetEnvironmentVariable(string variable, EnvironmentVariableTarget target);
    public sealed virtual string ExpandEnvironmentVariables(string name);
}
public enum Microsoft.CodeCoverage.Core.PlatformOperatingSystem : Enum {
    public int value__;
    public static PlatformOperatingSystem Windows;
    public static PlatformOperatingSystem UbuntuX64;
    public static PlatformOperatingSystem AlpineX64;
    public static PlatformOperatingSystem MacosX64;
    public static PlatformOperatingSystem DynamicNotSupported;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeCoverage.Core.ProfilersLocationProvider : object {
    private static string ClrIeX86InstallDirVariable;
    private static string ClrIeX64InstallDirVariable;
    private static string ClrIeARM64InstallDirVariable;
    private static string ClrIeX86FileName;
    private static string ClrIeX64FileName;
    private static string ClrIeARM64FileName;
    private static string ClrieX64LinuxFileName;
    private static string ClrieX64MacosFileName;
    private static string VanguardInstallDirVariable;
    private static string VanguardX86ProfilerPath;
    private static string VanguardX64ProfilerPath;
    private static string VanguardX86ProfilerConfigFileName;
    private static string VanguardX64ProfilerConfigFileName;
    private static string VanguardARM64ProfilerConfigFileName;
    private static string VanguardX64ProfilerConfigPath;
    private static string VanguardARM64ProfilerConfigPath;
    private static string VanguardShimPath;
    private static string VanguardStaticInstrumenterX86FileName;
    private static string VanguardStaticInstrumenterX64FileName;
    private static string VanguardStaticInstrumenterX64Path;
    private static string VanguardStaticInstrumenterConsoleX86FileName;
    private static string VanguardStaticInstrumenterConsoleX64FileName;
    private static string VanguardStaticInstrumenterConsoleX64Path;
    private IFileHelper _fileHelper;
    private IDirectoryHelper _directoryHelper;
    private IEnvironment _environment;
    [NullableAttribute("2")]
private string _vsInstallPath;
    private string _defaultVanguardDirectory;
    private string _defaultClrIeDirectory;
    private static string VanguardExeName;
    [NullableContextAttribute("2")]
internal ProfilersLocationProvider(IFileHelper fileHelper, IDirectoryHelper directoryHelper, IEnvironment environment);
    [NullableContextAttribute("2")]
internal ProfilersLocationProvider(string vsInstallPath, IFileHelper fileHelper, IDirectoryHelper directoryHelper, IEnvironment environment);
    private static ProfilersLocationProvider();
    public sealed virtual string GetVanguardPath(DataCollectorConfiguration configuration);
    public sealed virtual string GetVanguardProfilerX86Path(DataCollectorConfiguration configuration);
    public sealed virtual string GetVanguardProfilerX64Path(DataCollectorConfiguration configuration);
    public sealed virtual string GetVanguardProfilerConfigX86Path(DataCollectorConfiguration configuration);
    public sealed virtual string GetVanguardProfilerConfigX64Path(DataCollectorConfiguration configuration);
    public sealed virtual string GetVanguardProfilerConfigARM64Path(DataCollectorConfiguration configuration);
    public sealed virtual string GetClrInstrumentationEngineX86Path(DataCollectorConfiguration configuration);
    public sealed virtual string GetClrInstrumentationEngineX64Path(DataCollectorConfiguration configuration);
    public sealed virtual string GetClrInstrumentationEngineARM64Path(DataCollectorConfiguration configuration);
    public sealed virtual string GetCodeCoverageShimPath(DataCollectorConfiguration configuration);
    private string GetClrInstrumentationEnginePath(string arch, string fileName, string environmentVariableName, string configurationInstallationPath);
    private string GetVanguardDirectory(DataCollectorConfiguration configuration);
    private string GetDefaultVanguardDirectory();
    private string GetDefaultClrIeDirectory();
    private string GetCurrentAssemblyLocation();
    private string GetClrInstrumentationEngineX64FileName();
    private string GetClrInstrumentationEngineARM64FileName();
    public sealed virtual string GetStaticNativeInstrumenterX86Path(DataCollectorConfiguration configuration);
    public sealed virtual string GetStaticNativeInstrumenterX64Path(DataCollectorConfiguration configuration);
    public sealed virtual string GetStaticNativeInstrumenterConsoleX86Path(DataCollectorConfiguration configuration);
    public sealed virtual string GetStaticNativeInstrumenterConsoleX64Path(DataCollectorConfiguration configuration);
    public sealed virtual string GetStaticNativeRuntimeX86Directory(DataCollectorConfiguration configuration);
    public sealed virtual string GetStaticNativeRuntimeX64Directory(DataCollectorConfiguration configuration);
    public sealed virtual string GetStaticNativeRuntimeARM64Directory(DataCollectorConfiguration configuration);
}
internal static class Microsoft.CodeCoverage.Core.Resources : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static CultureInfo <Culture>k__BackingField;
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static string AllTests { get; }
    internal static string CodeCoverageLoggingDisabled { get; }
    internal static string CoverageFileException { get; }
    internal static string FailedToCreateDirectory { get; }
    internal static string FailedToCreateFile { get; }
    internal static string InvalidCoverageFileException { get; }
    internal static string OffsetOutOfRangeExceptionMessage { get; }
    internal static string UnsupportedCoverageFileException { get; }
    internal static ResourceManager get_ResourceManager();
    [CompilerGeneratedAttribute]
internal static CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
internal static void set_Culture(CultureInfo value);
    internal static string GetResourceString(string resourceKey, string defaultValue);
    internal static string get_AllTests();
    internal static string get_CodeCoverageLoggingDisabled();
    internal static string get_CoverageFileException();
    internal static string get_FailedToCreateDirectory();
    internal static string get_FailedToCreateFile();
    internal static string get_InvalidCoverageFileException();
    internal static string get_OffsetOutOfRangeExceptionMessage();
    internal static string get_UnsupportedCoverageFileException();
}
internal class Microsoft.CodeCoverage.Core.RuntimeInformationHelper : object {
    public string RuntimeIdentifier { get; }
    public Architecture OSArchitecture { get; }
    public sealed virtual string get_RuntimeIdentifier();
    public sealed virtual Architecture get_OSArchitecture();
    public sealed virtual bool IsOSPlatform(OSPlatform osPlatform);
}
public enum Microsoft.CodeCoverage.Core.SourceFileCheckSumType : Enum {
    public UInt32 value__;
    public static SourceFileCheckSumType Unknown;
    public static SourceFileCheckSumType Md5;
    public static SourceFileCheckSumType Sha1;
    public static SourceFileCheckSumType Sha256;
}
internal static class Microsoft.CodeCoverage.Core.SourceFileCheckSumTypeConverter : object {
    private static Guid SourceHashMD5;
    private static Guid SourceHashSHA1;
    private static Guid SourceHashSHA256;
    private static SourceFileCheckSumTypeConverter();
    internal static SourceFileCheckSumType ToSourceFileCheckSumType(Guid checkSumType);
    internal static SourceFileCheckSumType ToSourceFileCheckSumType(UInt32 checkSumType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeCoverage.Core.StaticInstrumentation.CacheCleaner : object {
    private DataCollectorConfiguration _config;
    private IDirectoryHelper _directoryHelper;
    private IMutexFactory _mutexFactory;
    private ICancellationTokenSourceFactory _cancellationTokenSourceFactory;
    private ILogger _logger;
    private DateTime _sessionStartTimeStamp;
    [NullableContextAttribute("2")]
public CacheCleaner(DataCollectorConfiguration dataCollectorConfiguration, IDirectoryHelper directoryHelper, IMutexFactory mutexFactory, ICancellationTokenSourceFactory cancellationTokenSourceFactory, ILogger logger, DateTime sessionStartTimeStamp);
    public sealed virtual void Clean();
    private void CleanSession(string path, TimeSpan expirationTime, CancellationToken token);
    private bool IsCacheEntryExpired(string path, TimeSpan expirationTime);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeCoverage.Core.StaticInstrumentation.CachingStaticInstrumenter : object {
    private IStaticNativeInstrumenter _instrumenter;
    private IDirectoryHelper _directoryHelper;
    private IFileHelper _fileHelper;
    private ILogger _logger;
    private IMutexFactory _mutexFactory;
    private TimeSpan _mutexTimeout;
    [NullableAttribute("2")]
private string _configurationHash;
    [NullableAttribute("2")]
private string _cachePath;
    [NullableAttribute("2")]
private string _correlationId;
    [NullableContextAttribute("2")]
internal CachingStaticInstrumenter(IStaticNativeInstrumenter instrumenter, IDirectoryHelper directoryHelper, IFileHelper fileHelper, ILogger logger, IMutexFactory mutexFactory);
    public sealed virtual UInt32 Initialize(CodeCoverageConfig configuration, string sessionId);
    public sealed virtual UInt32 Instrument(string binaryPath, string outputPath);
    public sealed virtual void Dispose();
    private string CalculateFileMD5(string path);
}
internal class Microsoft.CodeCoverage.Core.StaticInstrumentation.CleanUpFunction : MulticastDelegate {
    public CleanUpFunction(object object, IntPtr method);
    public virtual UInt32 Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual UInt32 EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeCoverage.Core.StaticInstrumentation.ConcurrentStaticInstrumenter : object {
    private IStaticNativeInstrumenter _innerInstrumenter;
    private ILogger _logger;
    private IMutexFactory _mutexFactory;
    private TimeSpan _mutexTimeout;
    [NullableContextAttribute("2")]
internal ConcurrentStaticInstrumenter(IStaticNativeInstrumenter innerInstrumenter, ILogger logger, IMutexFactory mutexFactory);
    public sealed virtual UInt32 Initialize(CodeCoverageConfig configuration, string sessionId);
    public sealed virtual UInt32 Instrument(string binaryPath, string outputPath);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeCoverage.Core.StaticInstrumentation.ConsoleStaticNativeInstrumenter : object {
    private string _consolePath;
    private string _configurationFilePath;
    [NullableAttribute("2")]
private string _sessionId;
    [NullableContextAttribute("2")]
internal ConsoleStaticNativeInstrumenter(string consolePath, string configurationFilePath);
    public sealed virtual UInt32 Initialize(CodeCoverageConfig configuration, string sessionId);
    public sealed virtual UInt32 Instrument(string binaryPath, string outputPath);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeCoverage.Core.StaticInstrumentation.ConsoleStaticNativeInstrumenterFactory : object {
    private IProfilersLocationProvider _profilersLocationProvider;
    private IFileHelper _fileHelper;
    private IDirectoryHelper _directoryHelper;
    private IMutexFactory _mutexFactory;
    [NullableContextAttribute("2")]
public ConsoleStaticNativeInstrumenterFactory(IProfilersLocationProvider profilersLocationProvider, IFileHelper fileHelper, IDirectoryHelper directoryHelper, IMutexFactory mutexFactory);
    public sealed virtual IStaticNativeInstrumenter Create(ILogger logger, DataCollectorConfiguration configuration, string configurationFilePath);
}
internal interface Microsoft.CodeCoverage.Core.StaticInstrumentation.ICacheCleaner {
    public abstract virtual void Clean();
}
internal class Microsoft.CodeCoverage.Core.StaticInstrumentation.InitializeFunction : MulticastDelegate {
    public InitializeFunction(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual UInt32 Invoke(string configurationPath, string sessionId, string libraryPath);
    public virtual IAsyncResult BeginInvoke(string configurationPath, string sessionId, string libraryPath, AsyncCallback callback, object object);
    public virtual UInt32 EndInvoke(IAsyncResult result);
}
internal class Microsoft.CodeCoverage.Core.StaticInstrumentation.InstrumentationFunction : MulticastDelegate {
    public InstrumentationFunction(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual UInt32 Invoke(string binaryPath, string outputPath);
    public virtual IAsyncResult BeginInvoke(string binaryPath, string outputPath, AsyncCallback callback, object object);
    public virtual UInt32 EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
internal interface Microsoft.CodeCoverage.Core.StaticInstrumentation.IStaticNativeInstrumenter {
    public abstract virtual UInt32 Initialize(CodeCoverageConfig configuration, string sessionId);
    public abstract virtual UInt32 Instrument(string binaryPath, string outputPath);
}
[NullableContextAttribute("1")]
internal interface Microsoft.CodeCoverage.Core.StaticInstrumentation.IStaticNativeInstrumenterFactory {
    public abstract virtual IStaticNativeInstrumenter Create(ILogger logger, DataCollectorConfiguration configuration, string configurationFilePath);
}
[NullableContextAttribute("1")]
internal interface Microsoft.CodeCoverage.Core.StaticInstrumentation.IStaticNativeRuntimeProvider {
    public abstract virtual IReadOnlyCollection`1<string> CopyRuntime(IEnumerable`1<string> directories);
    public abstract virtual void RemoveRuntime(IEnumerable`1<string> copiedFiles);
    [NullableContextAttribute("2")]
public abstract virtual string UpdatePathEnvironmentVariable(string pathEnvironmentVariable);
}
[NullableContextAttribute("2")]
internal interface Microsoft.CodeCoverage.Core.StaticInstrumentation.IStaticNativeRuntimeProviderFactory {
    public abstract virtual IStaticNativeRuntimeProvider Create(ILogger logger, DataCollectorConfiguration configuration);
}
internal enum Microsoft.CodeCoverage.Core.StaticInstrumentation.StaticNativeInstrumentationResult : Enum {
    public UInt32 value__;
    public static StaticNativeInstrumentationResult Success;
    public static StaticNativeInstrumentationResult ErrorUnknown;
    public static StaticNativeInstrumentationResult ErrorStringConversion;
    public static StaticNativeInstrumentationResult ErrorFailedToMoveFile;
    public static StaticNativeInstrumentationResult ErrorNoEntryPointInImage;
    public static StaticNativeInstrumentationResult ErrorBinaryCompressed;
    public static StaticNativeInstrumentationResult ErrorInvalidPeFile;
    public static StaticNativeInstrumentationResult ErrorInstrPdbMismatch;
    public static StaticNativeInstrumentationResult ErrorNoFixupData;
    public static StaticNativeInstrumentationResult ErrorInstrPdbFailure;
    public static StaticNativeInstrumentationResult ErrorInstrPdbWritable;
    public static StaticNativeInstrumentationResult ErrorEmittedByBBInstr;
    public static StaticNativeInstrumentationResult ErrorInstrUnsupportedArchitecture;
    public static StaticNativeInstrumentationResult ErrorInstrOutOfMem;
    public static StaticNativeInstrumentationResult ErrorUnableToInstrumentGeneric;
    public static StaticNativeInstrumentationResult SuccessFromCache;
    public static StaticNativeInstrumentationResult ErrorBinaryPathSyncMutexNotAcquired;
}
internal static class Microsoft.CodeCoverage.Core.StaticInstrumentation.StaticNativeInstrumentationResultHelper : object {
    public static UInt32 GenericResultCodeBase;
    public static UInt32 ModuleSkippedResultCodeBase;
    internal static bool IsInitializationSuccessful(UInt32 result);
    internal static bool CanConvertToGenericResultCode(UInt32 result);
    internal static StaticNativeInstrumentationResult ConvertToGenericResultCode(UInt32 result);
    internal static UInt32 ConvertToUInt(StaticNativeInstrumentationResult result);
    internal static bool CanConvertToModuleSkippedResultCode(UInt32 result);
    internal static ModuleSkipReason ConvertToModuleSkipReason(UInt32 result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeCoverage.Core.StaticInstrumentation.StaticNativeInstrumenter : SafeHandle {
    private string _instrumentationModulePath;
    private IntPtr _instrumentationModule;
    private InitializeFunction _initializeFunction;
    private InstrumentationFunction _instrumentationFunction;
    private CleanUpFunction _cleanUpFunction;
    private INativeHelper _nativeHelper;
    public bool IsInvalid { get; }
    [NullableContextAttribute("2")]
internal StaticNativeInstrumenter(INativeHelper nativeHelper, string nativeInstrumenterlibraryPath, IntPtr instrumentationModule, InitializeFunction initializeFunction, InstrumentationFunction instrumentationFunction, CleanUpFunction cleanUpFunction);
    public sealed virtual UInt32 Initialize(CodeCoverageConfig configuration, string sessionId);
    public sealed virtual UInt32 Instrument(string binaryPath, string outputPath);
    public virtual bool get_IsInvalid();
    protected virtual bool ReleaseHandle();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeCoverage.Core.StaticInstrumentation.StaticNativeInstrumenterFactory : object {
    private static string InitializationFunctionName;
    private static string InstrumentationFunctionName;
    private static string CleanUpFunctionName;
    private IProfilersLocationProvider _profilersLocationProvider;
    private IFileHelper _fileHelper;
    private IDirectoryHelper _directoryHelper;
    private INativeHelper _nativeHelper;
    private IMutexFactory _mutexFactory;
    public StaticNativeInstrumenterFactory(IProfilersLocationProvider profilersLocationProvider, IFileHelper fileHelper, IDirectoryHelper directoryHelper, INativeHelper nativeHelper, IMutexFactory mutexFactory);
    public sealed virtual IStaticNativeInstrumenter Create(ILogger logger, DataCollectorConfiguration configuration, string configurationFilePath);
    private bool GetFunction(IntPtr module, ILogger logger, string functionName, T& function);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeCoverage.Core.StaticInstrumentation.StaticNativeRuntimeProvider : object {
    private static ParallelOptions ParallelOptions;
    private static string StaticCovrunDllX86;
    private static string StaticCovrunDllX64;
    private static string StaticCovrunDllARM64;
    private ILogger _logger;
    private IFileHelper _fileHelper;
    private IProfilersLocationProvider _profilersLocationProvider;
    private DataCollectorConfiguration _configuration;
    [NullableContextAttribute("2")]
public StaticNativeRuntimeProvider(ILogger logger, IFileHelper fileHelper, IProfilersLocationProvider profilersLocationProvider, DataCollectorConfiguration configuration);
    private static StaticNativeRuntimeProvider();
    public sealed virtual IReadOnlyCollection`1<string> CopyRuntime(IEnumerable`1<string> directoriesIterator);
    public sealed virtual void RemoveRuntime(IEnumerable`1<string> copiedFiles);
    private void CopyRuntime(String[] directories, string libraryPath, string libraryName, ConcurrentQueue`1<string> copiedFiles);
    [NullableContextAttribute("2")]
public sealed virtual string UpdatePathEnvironmentVariable(string pathEnvironmentVariable);
    [NullableContextAttribute("2")]
private static string AppendPathIfNeeded(string updatedPathEnvironmentVariable, string originalPathEnvironmentVariable, string directory);
    [NullableContextAttribute("2")]
private static string AppendPath(string pathEnvironmentVariable, string directory);
}
internal class Microsoft.CodeCoverage.Core.StaticInstrumentation.StaticNativeRuntimeProviderFactory : object {
    [NullableAttribute("1")]
private IProfilersLocationProvider _profilersLocationProvider;
    [NullableAttribute("1")]
private IFileHelper _fileHelper;
    [NullableContextAttribute("2")]
public StaticNativeRuntimeProviderFactory(IProfilersLocationProvider profilersLocationProvider, IFileHelper fileHelper);
    [NullableContextAttribute("2")]
public sealed virtual IStaticNativeRuntimeProvider Create(ILogger logger, DataCollectorConfiguration configuration);
}
internal class Microsoft.CodeCoverage.Core.Threading.CancellationTokenSourceFactory : object {
    [NullableContextAttribute("1")]
public sealed virtual CancellationTokenSource Create(int millisecondsDelay);
}
[NullableContextAttribute("1")]
internal interface Microsoft.CodeCoverage.Core.Threading.ICancellationTokenSourceFactory {
    public abstract virtual CancellationTokenSource Create(int millisecondsDelay);
}
internal interface Microsoft.CodeCoverage.Core.Threading.IMutex {
    public abstract virtual bool WaitOne(TimeSpan timeout);
    public abstract virtual void ReleaseMutex();
}
[NullableContextAttribute("1")]
internal interface Microsoft.CodeCoverage.Core.Threading.IMutexFactory {
    public abstract virtual IMutex Create(bool initiallyOwned, string name);
    public abstract virtual IMutex Create(bool initiallyOwned, string name, Boolean& createdNew);
}
internal class Microsoft.CodeCoverage.Core.Threading.Mutex : object {
    [NullableAttribute("1")]
private Mutex _mutex;
    [NullableContextAttribute("1")]
public Mutex(bool initiallyOwned, string name);
    [NullableContextAttribute("2")]
public Mutex(bool initiallyOwned, string name, Boolean& createdNew);
    public sealed virtual void Dispose();
    public sealed virtual void ReleaseMutex();
    public sealed virtual bool WaitOne(TimeSpan timeout);
}
internal class Microsoft.CodeCoverage.Core.Threading.MutexFactory : object {
    [NullableContextAttribute("1")]
public sealed virtual IMutex Create(bool initiallyOwned, string name);
    [NullableContextAttribute("1")]
public sealed virtual IMutex Create(bool initiallyOwned, string name, Boolean& createdNew);
}
public class Microsoft.CodeCoverage.IO.Cobertura.CoberturaClass : CoverageDetails {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Filename>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<CoberturaMethod> <Methods>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<CoberturaLine> <Lines>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private SortedDictionary`2<int, List`1<ValueTuple`2<CoberturaLine, CoberturaMethod>>> <LineMethodDictionary>k__BackingField;
    [XmlAttributeAttribute("name")]
public string Name { get; public set; }
    [XmlAttributeAttribute("filename")]
public string Filename { get; public set; }
    [XmlArrayAttribute("methods")]
[XmlArrayItemAttribute("method")]
public List`1<CoberturaMethod> Methods { get; public set; }
    [XmlArrayAttribute("lines")]
[XmlArrayItemAttribute("line")]
public List`1<CoberturaLine> Lines { get; public set; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[XmlIgnoreAttribute]
public SortedDictionary`2<int, List`1<ValueTuple`2<CoberturaLine, CoberturaMethod>>> LineMethodDictionary { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Filename();
    [CompilerGeneratedAttribute]
public void set_Filename(string value);
    [CompilerGeneratedAttribute]
public List`1<CoberturaMethod> get_Methods();
    [CompilerGeneratedAttribute]
public void set_Methods(List`1<CoberturaMethod> value);
    [CompilerGeneratedAttribute]
public List`1<CoberturaLine> get_Lines();
    [CompilerGeneratedAttribute]
public void set_Lines(List`1<CoberturaLine> value);
    [CompilerGeneratedAttribute]
public SortedDictionary`2<int, List`1<ValueTuple`2<CoberturaLine, CoberturaMethod>>> get_LineMethodDictionary();
    [CompilerGeneratedAttribute]
public void set_LineMethodDictionary(SortedDictionary`2<int, List`1<ValueTuple`2<CoberturaLine, CoberturaMethod>>> value);
}
public class Microsoft.CodeCoverage.IO.Cobertura.CoberturaCondition : object {
    [CompilerGeneratedAttribute]
private int <Number>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<UInt32> <TargetOffsets>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Hits>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Coverage>k__BackingField;
    [XmlAttributeAttribute("number")]
public int Number { get; public set; }
    [XmlIgnoreAttribute]
public UInt32 Offset { get; public set; }
    [XmlIgnoreAttribute]
public List`1<UInt32> TargetOffsets { get; public set; }
    [XmlIgnoreAttribute]
public double Hits { get; public set; }
    [XmlAttributeAttribute("type")]
public string Type { get; public set; }
    [XmlAttributeAttribute("coverage")]
public string Coverage { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Number();
    [CompilerGeneratedAttribute]
public void set_Number(int value);
    [CompilerGeneratedAttribute]
public UInt32 get_Offset();
    [CompilerGeneratedAttribute]
public void set_Offset(UInt32 value);
    [CompilerGeneratedAttribute]
public List`1<UInt32> get_TargetOffsets();
    [CompilerGeneratedAttribute]
public void set_TargetOffsets(List`1<UInt32> value);
    [CompilerGeneratedAttribute]
public double get_Hits();
    [CompilerGeneratedAttribute]
public void set_Hits(double value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_Coverage();
    [CompilerGeneratedAttribute]
public void set_Coverage(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[XmlRootAttribute("coverage")]
public class Microsoft.CodeCoverage.IO.Cobertura.CoberturaFile : CoverageDetails {
    private static string FileVersion;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Sources>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<CoberturaPackage> <Packages>k__BackingField;
    [CompilerGeneratedAttribute]
private long <LinesCovered>k__BackingField;
    [CompilerGeneratedAttribute]
private long <LinesValid>k__BackingField;
    [CompilerGeneratedAttribute]
private long <BranchesCovered>k__BackingField;
    [CompilerGeneratedAttribute]
private long <BranchesValid>k__BackingField;
    [XmlAttributeAttribute("version")]
public string Version { get; public set; }
    [XmlAttributeAttribute("timestamp")]
public long Timestamp { get; public set; }
    [XmlArrayAttribute("sources")]
[XmlArrayItemAttribute("source")]
public String[] Sources { get; public set; }
    [XmlArrayAttribute("packages")]
[XmlArrayItemAttribute("package")]
public List`1<CoberturaPackage> Packages { get; public set; }
    [XmlAttributeAttribute("lines-covered")]
public long LinesCovered { get; public set; }
    [XmlAttributeAttribute("lines-valid")]
public long LinesValid { get; public set; }
    [XmlAttributeAttribute("branches-covered")]
public long BranchesCovered { get; public set; }
    [XmlAttributeAttribute("branches-valid")]
public long BranchesValid { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public long get_Timestamp();
    [CompilerGeneratedAttribute]
public void set_Timestamp(long value);
    [CompilerGeneratedAttribute]
public String[] get_Sources();
    [CompilerGeneratedAttribute]
public void set_Sources(String[] value);
    [CompilerGeneratedAttribute]
public List`1<CoberturaPackage> get_Packages();
    [CompilerGeneratedAttribute]
public void set_Packages(List`1<CoberturaPackage> value);
    [CompilerGeneratedAttribute]
public long get_LinesCovered();
    [CompilerGeneratedAttribute]
public void set_LinesCovered(long value);
    [CompilerGeneratedAttribute]
public long get_LinesValid();
    [CompilerGeneratedAttribute]
public void set_LinesValid(long value);
    [CompilerGeneratedAttribute]
public long get_BranchesCovered();
    [CompilerGeneratedAttribute]
public void set_BranchesCovered(long value);
    [CompilerGeneratedAttribute]
public long get_BranchesValid();
    [CompilerGeneratedAttribute]
public void set_BranchesValid(long value);
    public bool ShouldSerializeLinesCovered();
    public bool ShouldSerializeLinesValid();
    public bool ShouldSerializeBranchesCovered();
    public bool ShouldSerializeBranchesValid();
    public bool ShouldSerializeComplexity();
    public bool ShouldSerializeSources();
}
internal static class Microsoft.CodeCoverage.IO.Cobertura.CoberturaFileUtility : object {
    public static bool TryReadCoberturaFile(string path, CoberturaFile& coberturaFile);
    public static CoverageFile ToCoverageFile(CoberturaFile coberturaFile);
    private static ModuleWrapper ToModuleWrapper(CoberturaPackage package, String[] sources);
    private static string CalculateClassPath(string fileName, String[] sources);
    private static ValueTuple`2<FunctionInstrumentedMessage, Byte[]> ToFunctionInstrumentedMessage(CoberturaMethod method, string typeName, string namespaceName, UInt32 startBlockIndex, UInt32 functionId, UInt32 sourceId);
    private static SourceFileDataMessage ToSourceFileDataMessage(string path, Dictionary`2<string, UInt32> sourceFiles);
    internal static ValueTuple`2<string, string> PopulateClassProperties(CoberturaClass coberturaClass);
    public static CoberturaFile MergeCoberturaFiles(IList`1<string> files, bool skipInvalidFiles, int taskCount);
    [AsyncStateMachineAttribute("Microsoft.CodeCoverage.IO.Cobertura.CoberturaFileUtility/<MergeCoberturaFilesAsync>d__8")]
public static Task`1<CoberturaFile> MergeCoberturaFilesAsync(IList`1<ValueTuple`2<string, CoberturaFile>> files, CancellationToken token, bool skipInvalidFiles, int taskCount);
    [AsyncStateMachineAttribute("Microsoft.CodeCoverage.IO.Cobertura.CoberturaFileUtility/<MergeCoberturaFilesAsync>d__9")]
public static Task`1<CoberturaFile> MergeCoberturaFilesAsync(IList`1<string> files, CancellationToken token, bool skipInvalidFiles, int taskCount);
    [AsyncStateMachineAttribute("Microsoft.CodeCoverage.IO.Cobertura.CoberturaFileUtility/<Merge>d__10")]
private static Task`1<CoberturaFile> Merge(bool skipInvalidFiles, int taskCount, Queue`1<ValueTuple`2<string, CoberturaFile>> queue, CancellationToken token);
    private static CoberturaFile GetCoverageFile(ValueTuple`2<string, CoberturaFile> file, bool skipInvalidFiles, CancellationToken token);
    internal static CoberturaFile Merge(CoberturaFile file1, CoberturaFile file2, bool skipInvalidFiles, CancellationToken token);
    internal static void Merge(CoberturaPackage target, String[] targetSources, CoberturaPackage source, String[] sourceSources, Boolean& includeSourcesFromSourcePackage, CancellationToken token);
    internal static void Merge(CoberturaClass target, CoberturaClass source, CancellationToken token);
    internal static void Merge(CoberturaMethod target, CoberturaMethod source, CancellationToken token);
    internal static void Merge(CoberturaLine targetLine, CoberturaLine line);
}
public class Microsoft.CodeCoverage.IO.Cobertura.CoberturaLine : object {
    [CompilerGeneratedAttribute]
private int <Number>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Hits>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Branch>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConditionCoverage>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<CoberturaCondition> <Conditions>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<UInt32> <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsActualSequencePoint>k__BackingField;
    [XmlAttributeAttribute("number")]
public int Number { get; public set; }
    [XmlAttributeAttribute("hits")]
public int Hits { get; public set; }
    [XmlIgnoreAttribute]
public bool Branch { get; public set; }
    [XmlAttributeAttribute("branch")]
public string BranchString { get; public set; }
    [XmlAttributeAttribute("condition-coverage")]
public string ConditionCoverage { get; public set; }
    [XmlArrayAttribute("conditions")]
[XmlArrayItemAttribute("condition")]
public List`1<CoberturaCondition> Conditions { get; public set; }
    [XmlIgnoreAttribute]
public ISet`1<UInt32> Offset { get; public set; }
    [XmlIgnoreAttribute]
public bool IsActualSequencePoint { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Number();
    [CompilerGeneratedAttribute]
public void set_Number(int value);
    [CompilerGeneratedAttribute]
public int get_Hits();
    [CompilerGeneratedAttribute]
public void set_Hits(int value);
    [CompilerGeneratedAttribute]
public bool get_Branch();
    [CompilerGeneratedAttribute]
public void set_Branch(bool value);
    public string get_BranchString();
    public void set_BranchString(string value);
    [CompilerGeneratedAttribute]
public string get_ConditionCoverage();
    [CompilerGeneratedAttribute]
public void set_ConditionCoverage(string value);
    [CompilerGeneratedAttribute]
public List`1<CoberturaCondition> get_Conditions();
    [CompilerGeneratedAttribute]
public void set_Conditions(List`1<CoberturaCondition> value);
    [CompilerGeneratedAttribute]
public ISet`1<UInt32> get_Offset();
    [CompilerGeneratedAttribute]
public void set_Offset(ISet`1<UInt32> value);
    [CompilerGeneratedAttribute]
public bool get_IsActualSequencePoint();
    [CompilerGeneratedAttribute]
public void set_IsActualSequencePoint(bool value);
    public bool ShouldSerializeConditions();
}
public class Microsoft.CodeCoverage.IO.Cobertura.CoberturaMethod : CoverageDetails {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Signature>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<CoberturaLine> <Lines>k__BackingField;
    [XmlAttributeAttribute("name")]
public string Name { get; public set; }
    [XmlAttributeAttribute("signature")]
public string Signature { get; public set; }
    [XmlArrayAttribute("lines")]
[XmlArrayItemAttribute("line")]
public List`1<CoberturaLine> Lines { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Signature();
    [CompilerGeneratedAttribute]
public void set_Signature(string value);
    [CompilerGeneratedAttribute]
public List`1<CoberturaLine> get_Lines();
    [CompilerGeneratedAttribute]
public void set_Lines(List`1<CoberturaLine> value);
    public bool ShouldSerializeComplexity();
}
public class Microsoft.CodeCoverage.IO.Cobertura.CoberturaPackage : CoverageDetails {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<CoberturaClass> <Classes>k__BackingField;
    [XmlAttributeAttribute("name")]
public string Name { get; public set; }
    [XmlArrayAttribute("classes")]
[XmlArrayItemAttribute("class")]
public List`1<CoberturaClass> Classes { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public List`1<CoberturaClass> get_Classes();
    [CompilerGeneratedAttribute]
public void set_Classes(List`1<CoberturaClass> value);
}
public static class Microsoft.CodeCoverage.IO.Cobertura.CoberturaStatisticsCalculator : object {
    [NullableContextAttribute("1")]
public static void CalculateStatistics(CoberturaFile coverage);
    public static ValueTuple`4<int, int, int, int> CalculateStatistics(CoberturaPackage package);
    public static ValueTuple`4<int, int, int, int> CalculateStatistics(CoberturaClass class);
    public static ValueTuple`4<int, int, int, int> CalculateStatistics(CoberturaMethod method);
}
public abstract class Microsoft.CodeCoverage.IO.Cobertura.CoverageDetails : object {
    [CompilerGeneratedAttribute]
private double <LineRate>k__BackingField;
    [CompilerGeneratedAttribute]
private double <BranchRate>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Complexity>k__BackingField;
    [XmlAttributeAttribute("line-rate")]
public double LineRate { get; public set; }
    [XmlAttributeAttribute("branch-rate")]
public double BranchRate { get; public set; }
    [XmlAttributeAttribute("complexity")]
public double Complexity { get; public set; }
    [CompilerGeneratedAttribute]
public double get_LineRate();
    [CompilerGeneratedAttribute]
public void set_LineRate(double value);
    [CompilerGeneratedAttribute]
public double get_BranchRate();
    [CompilerGeneratedAttribute]
public void set_BranchRate(double value);
    [CompilerGeneratedAttribute]
public double get_Complexity();
    [CompilerGeneratedAttribute]
public void set_Complexity(double value);
}
internal class Microsoft.CodeCoverage.IO.Coverage.BasicBlockInfo : ValueType {
    [CompilerGeneratedAttribute]
private UInt32 <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Right>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <CoverageStatus>k__BackingField;
    public UInt32 Left { get; public set; }
    public UInt32 Right { get; public set; }
    public UInt32 CoverageStatus { get; public set; }
    public BasicBlockInfo(UInt32 left, UInt32 right, UInt32 coverageStatus);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public UInt32 get_Left();
    [CompilerGeneratedAttribute]
public void set_Left(UInt32 value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public UInt32 get_Right();
    [CompilerGeneratedAttribute]
public void set_Right(UInt32 value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public UInt32 get_CoverageStatus();
    [CompilerGeneratedAttribute]
public void set_CoverageStatus(UInt32 value);
    [NullableContextAttribute("1")]
public virtual string ToString();
    public sealed virtual int CompareTo(BasicBlockInfo other);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.CodeCoverage.IO.Coverage.BlockLineData : object {
    [CompilerGeneratedAttribute]
private UInt32 <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <SourceId>k__BackingField;
    [CompilerGeneratedAttribute]
private CoverageStatus <CoverageStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <StartLine>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <StartColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <EndLine>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <EndColumn>k__BackingField;
    [XmlIgnoreAttribute]
public UInt32 Index { get; public set; }
    [XmlAttributeAttribute("source_id")]
public UInt32 SourceId { get; public set; }
    [XmlAttributeAttribute("covered")]
public CoverageStatus CoverageStatus { get; public set; }
    [XmlAttributeAttribute("start_line")]
public UInt32 StartLine { get; public set; }
    [XmlAttributeAttribute("start_column")]
public UInt32 StartColumn { get; public set; }
    [XmlAttributeAttribute("end_line")]
public UInt32 EndLine { get; public set; }
    [XmlAttributeAttribute("end_column")]
public UInt32 EndColumn { get; public set; }
    [CompilerGeneratedAttribute]
public UInt32 get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_SourceId();
    [CompilerGeneratedAttribute]
public void set_SourceId(UInt32 value);
    [CompilerGeneratedAttribute]
public CoverageStatus get_CoverageStatus();
    [CompilerGeneratedAttribute]
public void set_CoverageStatus(CoverageStatus value);
    [CompilerGeneratedAttribute]
public UInt32 get_StartLine();
    [CompilerGeneratedAttribute]
public void set_StartLine(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_StartColumn();
    [CompilerGeneratedAttribute]
public void set_StartColumn(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_EndLine();
    [CompilerGeneratedAttribute]
public void set_EndLine(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_EndColumn();
    [CompilerGeneratedAttribute]
public void set_EndColumn(UInt32 value);
    public virtual string ToString();
    public sealed virtual int CompareTo(BlockLineData other);
    public static bool op_Equality(BlockLineData left, BlockLineData right);
    public static bool op_Inequality(BlockLineData left, BlockLineData right);
    public virtual bool Equals(object obj);
    private bool Equals(BlockLineData other);
    public static bool op_LessThan(BlockLineData left, BlockLineData right);
    public static bool op_LessThanOrEqual(BlockLineData left, BlockLineData right);
    public static bool op_GreaterThan(BlockLineData left, BlockLineData right);
    public static bool op_GreaterThanOrEqual(BlockLineData left, BlockLineData right);
    public virtual int GetHashCode();
}
public class Microsoft.CodeCoverage.IO.Coverage.CoverageBufferData : object {
    [CompilerGeneratedAttribute]
private string <ModuleName>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ModuleLinkTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <CoverageBuffer>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <Identifier>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ValueTuple`3<Guid, long, long> <CoverageBufferLocation>k__BackingField;
    public string ModuleName { get; public set; }
    public UInt32 ModuleLinkTime { get; public set; }
    internal Byte[] CoverageBuffer { get; internal set; }
    internal Guid Identifier { get; internal set; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal ValueTuple`3<Guid, long, long> CoverageBufferLocation { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_ModuleName();
    [CompilerGeneratedAttribute]
public void set_ModuleName(string value);
    [CompilerGeneratedAttribute]
public UInt32 get_ModuleLinkTime();
    [CompilerGeneratedAttribute]
public void set_ModuleLinkTime(UInt32 value);
    [CompilerGeneratedAttribute]
internal Byte[] get_CoverageBuffer();
    [CompilerGeneratedAttribute]
internal void set_CoverageBuffer(Byte[] value);
    [CompilerGeneratedAttribute]
internal Guid get_Identifier();
    [CompilerGeneratedAttribute]
internal void set_Identifier(Guid value);
    [CompilerGeneratedAttribute]
internal ValueTuple`3<Guid, long, long> get_CoverageBufferLocation();
    [CompilerGeneratedAttribute]
internal void set_CoverageBufferLocation(ValueTuple`3<Guid, long, long> value);
    public static bool op_Equality(CoverageBufferData left, CoverageBufferData right);
    public static bool op_Inequality(CoverageBufferData left, CoverageBufferData right);
    public virtual bool Equals(object obj);
    private bool Equals(CoverageBufferData other);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.CodeCoverage.IO.Coverage.CoverageData : object {
    [CompilerGeneratedAttribute]
private IList`1<ModuleWrapper> <Modules>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<SkippedModule> <SkippedModules>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <TestIds>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<TestCaseInformation> <TestCasesInformation>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<TestInformation> <TestsMessages>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Dictionary`2<Guid, Dictionary`2<CoverageBufferHashMessage, ValueTuple`2<List`1<string>, Byte[]>>> <CoveragePerTestsMessages>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IList`1<ValueTuple`2<long, long>> <SkippedModuleLocations>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IDictionary`2<Guid, IList`1<ValueTuple`3<string, long, long>>> <CoverageDataLocations>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IDictionary`2<string, IList`1<ValueTuple`2<long, long>>> <ModuleDataLocations>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <ModuleIds>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, List`1<ModuleHandle>> <ModuleHandles>k__BackingField;
    public IList`1<ModuleWrapper> Modules { get; }
    public IList`1<SkippedModule> SkippedModules { get; }
    public IList`1<string> TestIds { get; }
    internal ISet`1<TestCaseInformation> TestCasesInformation { get; }
    internal bool HasPerTestData { get; }
    internal List`1<TestInformation> TestsMessages { get; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Dictionary`2<Guid, Dictionary`2<CoverageBufferHashMessage, ValueTuple`2<List`1<string>, Byte[]>>> CoveragePerTestsMessages { get; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal IList`1<ValueTuple`2<long, long>> SkippedModuleLocations { get; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal IDictionary`2<Guid, IList`1<ValueTuple`3<string, long, long>>> CoverageDataLocations { get; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal IDictionary`2<string, IList`1<ValueTuple`2<long, long>>> ModuleDataLocations { get; }
    internal HashSet`1<string> ModuleIds { get; }
    internal IDictionary`2<string, List`1<ModuleHandle>> ModuleHandles { get; }
    [CompilerGeneratedAttribute]
public IList`1<ModuleWrapper> get_Modules();
    [CompilerGeneratedAttribute]
public IList`1<SkippedModule> get_SkippedModules();
    [CompilerGeneratedAttribute]
public IList`1<string> get_TestIds();
    [CompilerGeneratedAttribute]
internal ISet`1<TestCaseInformation> get_TestCasesInformation();
    internal bool get_HasPerTestData();
    [CompilerGeneratedAttribute]
internal List`1<TestInformation> get_TestsMessages();
    [CompilerGeneratedAttribute]
internal Dictionary`2<Guid, Dictionary`2<CoverageBufferHashMessage, ValueTuple`2<List`1<string>, Byte[]>>> get_CoveragePerTestsMessages();
    [CompilerGeneratedAttribute]
internal IList`1<ValueTuple`2<long, long>> get_SkippedModuleLocations();
    [CompilerGeneratedAttribute]
internal IDictionary`2<Guid, IList`1<ValueTuple`3<string, long, long>>> get_CoverageDataLocations();
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, IList`1<ValueTuple`2<long, long>>> get_ModuleDataLocations();
    [CompilerGeneratedAttribute]
internal HashSet`1<string> get_ModuleIds();
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, List`1<ModuleHandle>> get_ModuleHandles();
}
public abstract class Microsoft.CodeCoverage.IO.Coverage.CoverageStatistics : object {
    [CompilerGeneratedAttribute]
private UInt32 <BlocksCovered>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <BlocksNotCovered>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <LinesCovered>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <LinesPartiallyCovered>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <LinesNotCovered>k__BackingField;
    [XmlAttributeAttribute("block_coverage")]
public string BlockCoverage { get; public set; }
    [XmlAttributeAttribute("line_coverage")]
public string LineCoverage { get; public set; }
    [XmlAttributeAttribute("blocks_covered")]
public UInt32 BlocksCovered { get; public set; }
    [XmlAttributeAttribute("blocks_not_covered")]
public UInt32 BlocksNotCovered { get; public set; }
    [XmlAttributeAttribute("lines_covered")]
public UInt32 LinesCovered { get; public set; }
    [XmlAttributeAttribute("lines_partially_covered")]
public UInt32 LinesPartiallyCovered { get; public set; }
    [XmlAttributeAttribute("lines_not_covered")]
public UInt32 LinesNotCovered { get; public set; }
    public string get_BlockCoverage();
    public void set_BlockCoverage(string value);
    public string get_LineCoverage();
    public void set_LineCoverage(string value);
    [CompilerGeneratedAttribute]
public UInt32 get_BlocksCovered();
    [CompilerGeneratedAttribute]
public void set_BlocksCovered(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_BlocksNotCovered();
    [CompilerGeneratedAttribute]
public void set_BlocksNotCovered(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_LinesCovered();
    [CompilerGeneratedAttribute]
public void set_LinesCovered(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_LinesPartiallyCovered();
    [CompilerGeneratedAttribute]
public void set_LinesPartiallyCovered(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_LinesNotCovered();
    [CompilerGeneratedAttribute]
public void set_LinesNotCovered(UInt32 value);
}
public class Microsoft.CodeCoverage.IO.Coverage.Function : CoverageStatistics {
    private UInt32 _metadataToken;
    [CompilerGeneratedAttribute]
private UInt32 <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NamespaceName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<BlockLineData> <LineData>k__BackingField;
    [XmlAttributeAttribute("id")]
public UInt32 Id { get; public set; }
    [XmlIgnoreAttribute]
public UInt32 MetadataToken { get; public set; }
    [XmlAttributeAttribute("token")]
public string TokenString { get; public set; }
    [XmlAttributeAttribute("name")]
public string Name { get; public set; }
    [XmlAttributeAttribute("namespace")]
public string NamespaceName { get; public set; }
    [XmlAttributeAttribute("type_name")]
public string TypeName { get; public set; }
    [XmlArrayAttribute("ranges")]
[XmlArrayItemAttribute("range")]
public List`1<BlockLineData> LineData { get; public set; }
    [CompilerGeneratedAttribute]
public UInt32 get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(UInt32 value);
    public UInt32 get_MetadataToken();
    public void set_MetadataToken(UInt32 value);
    [CompilerGeneratedAttribute]
public string get_TokenString();
    [CompilerGeneratedAttribute]
public void set_TokenString(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_NamespaceName();
    [CompilerGeneratedAttribute]
public void set_NamespaceName(string value);
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
public void set_TypeName(string value);
    [CompilerGeneratedAttribute]
public List`1<BlockLineData> get_LineData();
    [CompilerGeneratedAttribute]
public void set_LineData(List`1<BlockLineData> value);
    public bool ShouldSerializeNamespaceName();
    public bool ShouldSerializeTokenString();
}
public class Microsoft.CodeCoverage.IO.Coverage.FunctionWrapper : object {
    private static UInt32 PartiallyCovered;
    private static UInt32 Covered;
    private static UInt32 NotCovered;
    private static UInt32 Unknown;
    [CompilerGeneratedAttribute]
private Function <Function>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <StartBlockIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <CoverageBuffer>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <BlockCount>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<BlockLineData> <LineDataOriginal>k__BackingField;
    public Function Function { get; public set; }
    public UInt32 Id { get; public set; }
    public UInt32 MetadataToken { get; public set; }
    public string Name { get; public set; }
    public string NamespaceName { get; public set; }
    public string TypeName { get; public set; }
    public UInt32 StartBlockIndex { get; public set; }
    public Byte[] CoverageBuffer { get; public set; }
    public UInt32 BlockCount { get; public set; }
    public List`1<BlockLineData> LineDataOriginal { get; public set; }
    [CompilerGeneratedAttribute]
public Function get_Function();
    [CompilerGeneratedAttribute]
public void set_Function(Function value);
    public UInt32 get_Id();
    public void set_Id(UInt32 value);
    public UInt32 get_MetadataToken();
    public void set_MetadataToken(UInt32 value);
    public string get_Name();
    public void set_Name(string value);
    public string get_NamespaceName();
    public void set_NamespaceName(string value);
    public string get_TypeName();
    public void set_TypeName(string value);
    [CompilerGeneratedAttribute]
public UInt32 get_StartBlockIndex();
    [CompilerGeneratedAttribute]
public void set_StartBlockIndex(UInt32 value);
    [CompilerGeneratedAttribute]
public Byte[] get_CoverageBuffer();
    [CompilerGeneratedAttribute]
public void set_CoverageBuffer(Byte[] value);
    [CompilerGeneratedAttribute]
public UInt32 get_BlockCount();
    [CompilerGeneratedAttribute]
public void set_BlockCount(UInt32 value);
    [CompilerGeneratedAttribute]
public List`1<BlockLineData> get_LineDataOriginal();
    [CompilerGeneratedAttribute]
public void set_LineDataOriginal(List`1<BlockLineData> value);
    internal void Merge(Byte[] buffer, UInt32 offset, UInt32 count);
    public void CalculateStatistics();
    private UInt32[] CalculateStatistics(IList`1<BasicBlockInfo> blockInfos);
    private bool FasterAlgorithm(IList`1<BasicBlockInfo> blockInfos, UInt32[]& statistics);
    private UInt32[] SlowerAlgorithm(IList`1<BasicBlockInfo> blockInfos);
    private bool IsCovered(UInt32 blockIndex);
}
public class Microsoft.CodeCoverage.IO.Coverage.Module : CoverageStatistics {
    private bool _includeSkippedFunctions;
    private string _id;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IdString>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Function> <Functions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<SkippedFunction> <SkippedFunctions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<SourceFile> <SourceFiles>k__BackingField;
    [XmlAttributeAttribute("name")]
public string Name { get; public set; }
    [XmlAttributeAttribute("path")]
public string Path { get; public set; }
    [XmlIgnoreAttribute]
public string Id { get; public set; }
    [XmlAttributeAttribute("id")]
public string IdString { get; public set; }
    [XmlArrayAttribute("functions")]
[XmlArrayItemAttribute("function")]
public List`1<Function> Functions { get; public set; }
    [XmlArrayAttribute("skipped_functions")]
[XmlArrayItemAttribute("skipped_function")]
public List`1<SkippedFunction> SkippedFunctions { get; public set; }
    [XmlArrayAttribute("source_files")]
[XmlArrayItemAttribute("source_file")]
public List`1<SourceFile> SourceFiles { get; public set; }
    public Module(string id);
    public Module(string id, bool includeSkippedFunctions);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    public string get_Id();
    public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_IdString();
    [CompilerGeneratedAttribute]
public void set_IdString(string value);
    [CompilerGeneratedAttribute]
public List`1<Function> get_Functions();
    [CompilerGeneratedAttribute]
public void set_Functions(List`1<Function> value);
    [CompilerGeneratedAttribute]
public List`1<SkippedFunction> get_SkippedFunctions();
    [CompilerGeneratedAttribute]
public void set_SkippedFunctions(List`1<SkippedFunction> value);
    [CompilerGeneratedAttribute]
public List`1<SourceFile> get_SourceFiles();
    [CompilerGeneratedAttribute]
public void set_SourceFiles(List`1<SourceFile> value);
    public bool ShouldSerializeSkipFunctions();
    public bool ShouldSerializeSourceFiles();
    public bool ShouldSerializeSkippedFunctions();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.CodeCoverage.IO.Coverage.ModuleHandle : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private ModuleInstrumentedMessage <ModuleInstrumentedMessage>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private long <End>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <CoverageBuffer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Hash>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <RawData>k__BackingField;
    [NullableAttribute("1")]
internal ModuleInstrumentedMessage ModuleInstrumentedMessage { get; }
    [NullableAttribute("1")]
internal string Path { get; }
    internal long Start { get; }
    internal long End { get; }
    internal long Offset { get; }
    internal Byte[] CoverageBuffer { get; internal set; }
    internal string Hash { get; internal set; }
    internal Byte[] RawData { get; internal set; }
    internal ModuleHandle(string path, ModuleInstrumentedMessage moduleInstrumentedMessage, long start, long end, long offset);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal ModuleInstrumentedMessage get_ModuleInstrumentedMessage();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal string get_Path();
    [CompilerGeneratedAttribute]
internal long get_Start();
    [CompilerGeneratedAttribute]
internal long get_End();
    [CompilerGeneratedAttribute]
internal long get_Offset();
    [CompilerGeneratedAttribute]
internal Byte[] get_CoverageBuffer();
    [CompilerGeneratedAttribute]
internal void set_CoverageBuffer(Byte[] value);
    [CompilerGeneratedAttribute]
internal string get_Hash();
    [CompilerGeneratedAttribute]
internal void set_Hash(string value);
    [CompilerGeneratedAttribute]
internal Byte[] get_RawData();
    [CompilerGeneratedAttribute]
internal void set_RawData(Byte[] value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.CodeCoverage.IO.Coverage.ModuleWrapper : object {
    private UInt32 _nextSourceFileId;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IDictionary`2<ValueTuple`2<UInt32, UInt32>, FunctionInstrumentedMessage> _functionInstrumentedMessagesMap;
    private IDictionary`2<UInt32, FunctionSkippedMessage> _functionSkippedMessagesMap;
    private IDictionary`2<string, UInt32> _sourcePathToIdMap;
    private IDictionary`2<UInt32, SourceFile> _sourceFiles;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IDictionary`2<ValueTuple`2<UInt32, UInt32>, SkippedFunction> _skippedFunctions;
    private Byte[] _emptyCoverageBuffer;
    [CompilerGeneratedAttribute]
private Module <Module>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <CoverageBuffer>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <BlockCount>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<SourceFileDataMessage> <SourceFileDataMessages>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IDictionary`2<ValueTuple`2<UInt32, UInt32>, FunctionWrapper> <FunctionWrappers>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ImageLinkTime>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ImageSize>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ModuleInstrumentedMessage <ModuleInstrumentedMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, Byte[]> <CoverageBuffers>k__BackingField;
    public Module Module { get; public set; }
    public string Id { get; public set; }
    public string IdString { get; public set; }
    public string Name { get; public set; }
    public string Path { get; public set; }
    public UInt32 BlocksCovered { get; public set; }
    public UInt32 BlocksNotCovered { get; public set; }
    public Byte[] CoverageBuffer { get; public set; }
    public UInt32 BlockCount { get; public set; }
    public List`1<Function> Functions { get; public set; }
    public List`1<SkippedFunction> SkippedFunctions { get; public set; }
    public List`1<SourceFile> SourceFiles { get; public set; }
    internal IEnumerable`1<FunctionSkippedMessage> FunctionSkippedMessages { get; }
    internal IList`1<SourceFileDataMessage> SourceFileDataMessages { get; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<ValueTuple`2<UInt32, UInt32>, FunctionWrapper> FunctionWrappers { get; }
    public UInt32 ImageLinkTime { get; public set; }
    public UInt32 ImageSize { get; public set; }
    [NullableAttribute("2")]
internal ModuleInstrumentedMessage ModuleInstrumentedMessage { get; internal set; }
    internal IEnumerable`1<FunctionInstrumentedMessage> FunctionInstrumentedMessages { get; }
    internal IDictionary`2<string, Byte[]> CoverageBuffers { get; }
    public ModuleWrapper(string id);
    [NullableContextAttribute("2")]
public ModuleWrapper(string id, bool includeSkippedFunctions);
    [CompilerGeneratedAttribute]
public Module get_Module();
    [CompilerGeneratedAttribute]
public void set_Module(Module value);
    public string get_Id();
    public void set_Id(string value);
    public string get_IdString();
    public void set_IdString(string value);
    public string get_Name();
    public void set_Name(string value);
    public string get_Path();
    public void set_Path(string value);
    public UInt32 get_BlocksCovered();
    public void set_BlocksCovered(UInt32 value);
    public UInt32 get_BlocksNotCovered();
    public void set_BlocksNotCovered(UInt32 value);
    [CompilerGeneratedAttribute]
public Byte[] get_CoverageBuffer();
    [CompilerGeneratedAttribute]
public void set_CoverageBuffer(Byte[] value);
    [CompilerGeneratedAttribute]
public UInt32 get_BlockCount();
    [CompilerGeneratedAttribute]
public void set_BlockCount(UInt32 value);
    public List`1<Function> get_Functions();
    public void set_Functions(List`1<Function> value);
    public List`1<SkippedFunction> get_SkippedFunctions();
    public void set_SkippedFunctions(List`1<SkippedFunction> value);
    public List`1<SourceFile> get_SourceFiles();
    public void set_SourceFiles(List`1<SourceFile> value);
    internal IEnumerable`1<FunctionSkippedMessage> get_FunctionSkippedMessages();
    [CompilerGeneratedAttribute]
internal IList`1<SourceFileDataMessage> get_SourceFileDataMessages();
    [CompilerGeneratedAttribute]
public IDictionary`2<ValueTuple`2<UInt32, UInt32>, FunctionWrapper> get_FunctionWrappers();
    [CompilerGeneratedAttribute]
public UInt32 get_ImageLinkTime();
    [CompilerGeneratedAttribute]
public void set_ImageLinkTime(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_ImageSize();
    [CompilerGeneratedAttribute]
public void set_ImageSize(UInt32 value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal ModuleInstrumentedMessage get_ModuleInstrumentedMessage();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_ModuleInstrumentedMessage(ModuleInstrumentedMessage value);
    internal IEnumerable`1<FunctionInstrumentedMessage> get_FunctionInstrumentedMessages();
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, Byte[]> get_CoverageBuffers();
    public void ClearObjects();
    public ValueTuple`2<SourceFile, bool> AddSourceFile(string path, SourceFileCheckSumType checksumType, Byte[] checksum);
    [NullableContextAttribute("2")]
public SourceFile GetSourceFile(UInt32 id);
    public ValueTuple`2<SkippedFunction, bool> AddSkippedFunction(bool checkInFunctions, UInt32 functionId, UInt32 originalFunctionId, UInt32 metadataToken, FunctionSkipReason functionSkipReason, string name, string typeName, string exceptionMessage);
    internal void RemoveSkippedFunction(UInt32 functionId, UInt32 metadataToken);
    internal ValueTuple`2<FunctionWrapper, bool> AddFunction(UInt32 functionId, UInt32 metadataToken, string name, string typeName, string namespaceName, UInt32 blockCount);
    internal ValueTuple`2<FunctionWrapper, bool> AddFunction(FunctionWrapper function);
    internal void AddFunctionSkippedMessage(FunctionSkippedMessage message);
    [NullableContextAttribute("2")]
internal FunctionSkippedMessage GetFunctionSkippedMessage(UInt32 functionId);
    internal void ClearFunctionSkippedMessages();
    internal void AddFunctionInstrumentedMessage(FunctionInstrumentedMessage message);
    [NullableContextAttribute("2")]
internal FunctionInstrumentedMessage GetFunctionInstrumentedMessage(UInt32 functionId, UInt32 metadataToken);
    internal void RemoveFunctionInstrumentedMessage(UInt32 functionId, UInt32 metadataToken);
    internal void UpdateFunctionInstrumentedMessage(FunctionInstrumentedMessage message);
    internal Byte[] GetCoverageBuffer(IList`1<string> testIds);
    internal Byte[] GetCoverageBuffer(TestCaseInformation testCaseInformation);
    public void CalculateStatistics();
    private void PopulateObjectsFromMessages();
}
internal class Microsoft.CodeCoverage.IO.Coverage.Segment : ValueType {
    [CompilerGeneratedAttribute]
private UInt32 <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Span>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <CoverageStatus>k__BackingField;
    public UInt32 Left { get; public set; }
    public bool Span { get; public set; }
    public UInt32 CoverageStatus { get; public set; }
    public Segment(UInt32 left, bool span);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public UInt32 get_Left();
    [CompilerGeneratedAttribute]
public void set_Left(UInt32 value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_Span();
    [CompilerGeneratedAttribute]
public void set_Span(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public UInt32 get_CoverageStatus();
    [CompilerGeneratedAttribute]
public void set_CoverageStatus(UInt32 value);
    public sealed virtual int CompareTo(Segment other);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
public class Microsoft.CodeCoverage.IO.Coverage.SkippedFunction : object {
    [CompilerGeneratedAttribute]
private UInt32 <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <OriginalId>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <MetadataToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private FunctionSkipReason <FunctionSkipReason>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExceptionMessage>k__BackingField;
    [XmlAttributeAttribute("id")]
public UInt32 Id { get; public set; }
    [XmlAttributeAttribute("original_id")]
public UInt32 OriginalId { get; public set; }
    [XmlIgnoreAttribute]
public UInt32 MetadataToken { get; public set; }
    [XmlAttributeAttribute("token")]
public string TokenString { get; public set; }
    [XmlAttributeAttribute("name")]
public string Name { get; public set; }
    [XmlAttributeAttribute("type_name")]
public string TypeName { get; public set; }
    [XmlAttributeAttribute("reason")]
public FunctionSkipReason FunctionSkipReason { get; public set; }
    [XmlAttributeAttribute("exception_message")]
public string ExceptionMessage { get; public set; }
    [CompilerGeneratedAttribute]
public UInt32 get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_OriginalId();
    [CompilerGeneratedAttribute]
public void set_OriginalId(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_MetadataToken();
    [CompilerGeneratedAttribute]
public void set_MetadataToken(UInt32 value);
    public string get_TokenString();
    public void set_TokenString(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
public void set_TypeName(string value);
    [CompilerGeneratedAttribute]
public FunctionSkipReason get_FunctionSkipReason();
    [CompilerGeneratedAttribute]
public void set_FunctionSkipReason(FunctionSkipReason value);
    [CompilerGeneratedAttribute]
public string get_ExceptionMessage();
    [CompilerGeneratedAttribute]
public void set_ExceptionMessage(string value);
    public bool ShouldSerializeOriginalId();
    public bool ShouldSerializeExceptionMessage();
    public bool ShouldSerializeTokenString();
    public static bool op_Equality(SkippedFunction left, SkippedFunction right);
    public static bool op_Inequality(SkippedFunction left, SkippedFunction right);
    public virtual bool Equals(object obj);
    private bool Equals(SkippedFunction other);
    public virtual int GetHashCode();
}
[XmlRootAttribute("skipped_module")]
public class Microsoft.CodeCoverage.IO.Coverage.SkippedModule : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private ModuleSkipReason <SkipReason>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExceptionMessage>k__BackingField;
    [XmlAttributeAttribute("name")]
public string Name { get; public set; }
    [XmlAttributeAttribute("path")]
public string Path { get; public set; }
    [XmlAttributeAttribute("reason")]
public ModuleSkipReason SkipReason { get; public set; }
    [XmlAttributeAttribute("exception_message")]
public string ExceptionMessage { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public ModuleSkipReason get_SkipReason();
    [CompilerGeneratedAttribute]
public void set_SkipReason(ModuleSkipReason value);
    [CompilerGeneratedAttribute]
public string get_ExceptionMessage();
    [CompilerGeneratedAttribute]
public void set_ExceptionMessage(string value);
    public bool ShouldSerializeExceptionMessage();
    public static bool op_Equality(SkippedModule left, SkippedModule right);
    public static bool op_Inequality(SkippedModule left, SkippedModule right);
    public virtual bool Equals(object obj);
    private bool Equals(SkippedModule other);
    public virtual int GetHashCode();
}
public class Microsoft.CodeCoverage.IO.Coverage.SourceFile : object {
    [CompilerGeneratedAttribute]
private UInt32 <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private SourceFileCheckSumType <ChecksumType>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Checksum>k__BackingField;
    [XmlAttributeAttribute("id")]
public UInt32 Id { get; public set; }
    [XmlAttributeAttribute("path")]
public string Path { get; public set; }
    [XmlIgnoreAttribute]
public SourceFileCheckSumType ChecksumType { get; public set; }
    [XmlAttributeAttribute("checksum_type")]
public string ChecksumTypeString { get; public set; }
    [XmlIgnoreAttribute]
public Byte[] Checksum { get; public set; }
    [XmlAttributeAttribute("checksum")]
public string ChecksumString { get; public set; }
    public SourceFile(UInt32 id, string path, SourceFileCheckSumType checksumType, Byte[] checksum);
    [CompilerGeneratedAttribute]
public UInt32 get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(UInt32 value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public SourceFileCheckSumType get_ChecksumType();
    [CompilerGeneratedAttribute]
public void set_ChecksumType(SourceFileCheckSumType value);
    public string get_ChecksumTypeString();
    public void set_ChecksumTypeString(string value);
    [CompilerGeneratedAttribute]
public Byte[] get_Checksum();
    [CompilerGeneratedAttribute]
public void set_Checksum(Byte[] value);
    public string get_ChecksumString();
    public void set_ChecksumString(string value);
    public bool ShouldSerializeChecksumTypeString();
    public bool ShouldSerializeChecksumString();
    public static bool op_Equality(SourceFile left, SourceFile right);
    public static bool op_Inequality(SourceFile left, SourceFile right);
    public virtual bool Equals(object obj);
    private bool Equals(SourceFile other);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.CodeCoverage.IO.Coverage.TestCaseInformation : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private static TestCaseInformation <AllTestsCaseInformation>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public string Id { get; public set; }
    public string Name { get; public set; }
    public String[] Properties { get; public set; }
    public static TestCaseInformation AllTestsCaseInformation { get; }
    public TestCaseInformation(string Id, string Name, String[] Properties);
    [CompilerGeneratedAttribute]
protected TestCaseInformation(TestCaseInformation original);
    private static TestCaseInformation();
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Name(string value);
    [CompilerGeneratedAttribute]
public String[] get_Properties();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Properties(String[] value);
    [CompilerGeneratedAttribute]
public static TestCaseInformation get_AllTestsCaseInformation();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(TestCaseInformation left, TestCaseInformation right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(TestCaseInformation left, TestCaseInformation right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(TestCaseInformation other);
    [CompilerGeneratedAttribute]
public virtual TestCaseInformation <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& Id, String& Name, String[]& Properties);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeCoverage.IO.CoverageBufferFile : CoverageFileBase {
    private CoverageBufferData _coverageBufferData;
    private CoverageBufferFile(string path);
    public static CoverageBufferData Read(string path);
    [AsyncStateMachineAttribute("Microsoft.CodeCoverage.IO.CoverageBufferFile/<ReadAsync>d__3")]
public static Task`1<CoverageBufferData> ReadAsync(string path, CancellationToken token);
    public static CoverageBufferData ReadCoverageBufferFile(string path, CancellationToken token);
    protected virtual void ProcessStreamHeader(StreamHeader streamHeader, BinaryReader reader, bool readModuleHandles, bool readOnlyTestList, String[] orderedTestIds);
    private void RecordCoverageDataStream(BinaryMessageReader reader, Guid identifier);
    private Byte[] GetCoverageBuffer(BinaryReader reader);
    internal static void WriteModuleCoverageBufferData(string outputFolder, ModuleWrapper module, Byte[] coverageBuffer);
    internal static void WriteModuleCoverageBufferData(string outputFolder, string moduleName, UInt32 imageLinkTime, UInt32 blockCount, Nullable`1<Guid> coverageBufferId, Byte[] coverageBuffer);
    internal static void WriteModuleCoverageBufferData(string outputPath, string moduleName, UInt32 imageLinkTime, Nullable`1<Guid> coverageBufferId, Byte[] coverageBuffer);
    private static void WriteBufferData(BinaryWriter writer, ModuleBufferMessage message, Byte[] coverageBuffer, Nullable`1<Guid> coverageBufferId);
    internal static Byte[] MergeCoverageBuffer(IEnumerable`1<string> bufferFiles, bool skipInvalidFiles, CancellationToken token);
}
internal class Microsoft.CodeCoverage.IO.CoverageFile : CoverageFileBase {
    private bool _cacheCoverageMessages;
    [CompilerGeneratedAttribute]
private CoverageData <CoverageData>k__BackingField;
    internal CoverageData CoverageData { get; private set; }
    internal CoverageFile(CoverageData coverageData);
    private CoverageFile(string path, bool cacheCoverageMessages);
    [CompilerGeneratedAttribute]
internal CoverageData get_CoverageData();
    [CompilerGeneratedAttribute]
private void set_CoverageData(CoverageData value);
    public static bool IsValidCoverageFile(string path);
    public long GetModuleCoverageBufferOffset(string moduleName, UInt32 moduleLinkTime);
    public void UpdateModuleCoverageBuffer(long offset, Byte[] coverageBuffer);
    public static string MergeCoverageBufferFiles(string covxFile, IList`1<string> coverageBufferFiles, bool skipInvalidFiles);
    [AsyncStateMachineAttribute("Microsoft.CodeCoverage.IO.CoverageFile/<MergeCoverageBufferFilesAsync>d__12")]
public static Task`1<string> MergeCoverageBufferFilesAsync(string covxFile, IList`1<string> coverageBufferFiles, CancellationToken token, bool skipInvalidFiles);
    private static string MergeCoverageBufferFiles(string covxFile, IList`1<string> coverageBufferFiles, bool skipInvalidFiles, CancellationToken token);
    public static CoverageData MergeCoverageFiles(IList`1<string> files, bool skipInvalidFiles, int maxTaskCount, bool loadAllModuleData);
    [AsyncStateMachineAttribute("Microsoft.CodeCoverage.IO.CoverageFile/<MergeCoverageFilesAsync>d__15")]
public static Task`1<CoverageData> MergeCoverageFilesAsync(IList`1<string> files, CancellationToken token, bool skipInvalidFiles, int taskCount, bool loadAllModuleData);
    [AsyncStateMachineAttribute("Microsoft.CodeCoverage.IO.CoverageFile/<MergeCoverageFilesAsync>d__16")]
internal static Task`1<CoverageData> MergeCoverageFilesAsync(IList`1<ValueTuple`2<string, CoverageFile>> files, CancellationToken token, bool skipInvalidFiles, int taskCount, bool loadAllModuleData);
    internal static CoverageFile GetCoverageFile(ValueTuple`2<string, CoverageFile> file, bool skipInvalidFiles, CancellationToken token);
    private static CoverageFile Merge(CoverageFile file1, CoverageFile file2, bool skipInvalidFiles, CancellationToken token);
    private static void MergeModules(CoverageFile file1, CoverageFile file2, CoverageFile target, bool skipInvalidFiles, CancellationToken token);
    private static void AddModule(CoverageFile file, CoverageFile target, string moduleId, bool skipInvalidFiles);
    private static void MergeModule(CoverageFile target, ModuleWrapper module1, ModuleWrapper module2, CancellationToken token);
    private static void MergeModuleCoverageBuffer(CoverageFile target, ModuleWrapper module1, ModuleWrapper module2, Byte[] coverageBuffer1, Byte[] coverageBuffer2, CancellationToken token);
    private static Byte[] MergeFunctionsCoverageBuffer(ModuleWrapper module1, ModuleWrapper module2, Byte[] coverageBuffer1, Byte[] coverageBuffer2);
    private static UInt32 MergeFunctionMessages(ModuleWrapper module1, ModuleWrapper module2, Byte[] coverageBuffer1, Byte[] coverageBuffer2, List`1<byte> finalCoverageBufferList, UInt32 functionStartIndex, bool mergeCommonMessages, bool addMissingMessagesToModule2);
    private static Byte[] GetBiggerCoverageBuffer(ModuleWrapper module1, ModuleWrapper module2, Byte[] coverageBuffer1, Byte[] coverageBuffer2, FunctionInstrumentedMessage message1, FunctionInstrumentedMessage message2, UInt32 functionBufferCount);
    private static void UpdateSourceIds(ModuleWrapper module1, ModuleWrapper module2, FunctionInstrumentedMessage message2);
    private static void MergeSkippedModules(CoverageFile file1, CoverageFile file2, CoverageFile target, CancellationToken token);
    private static void MergeModuleHandles(string moduleId1, ModuleHandle moduleHandle1, CoverageFile file1, CoverageFile file2, BinaryReader reader1, BinaryReader reader2, bool skipInvalidFiles, bool allowMergeWithSameId);
    private static bool AreEqualByHash(ModuleHandle moduleHandle1, ModuleHandle moduleHandle2, BinaryReader reader1, BinaryReader reader2);
    private static bool TryMergeCoverageBuffers(ModuleHandle moduleHandle1, ModuleHandle moduleHandle2, CoverageFile file1, CoverageFile file2, BinaryReader reader1, BinaryReader reader2, bool skipInvalidFiles);
    private static void MergeTestListData(CoverageData coverageData1, CoverageData coverageData2, CoverageData target);
    private static void MergePerTestData(CoverageData coverageData1, CoverageData coverageData2, CoverageData target);
    [NullableContextAttribute("1")]
internal static CoverageData ReadCoverageFile(string path, TestCaseInformation[] testCaseInformation);
    [NullableContextAttribute("1")]
internal static TestCaseInformation[] ReadTestCases(string path);
    [NullableContextAttribute("1")]
public static CoverageData Read(string path, bool readModules, bool readSkippedMessages, bool readSkippedModules, bool cacheCoverageMessages, bool readModuleHandles);
    [NullableContextAttribute("1")]
public static CoverageData Read(string path, IList`1<string> testIds, bool readModules, bool readSkippedMessages, bool readSkippedModules, bool cacheCoverageMessages, bool readModuleHandles);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Microsoft.CodeCoverage.IO.CoverageFile/<ReadAsync>d__37")]
public static Task`1<CoverageData> ReadAsync(string path, CancellationToken token, bool readModules, bool readSkippedFunctions, bool readSkippedModules, bool cacheCoverageMessages, bool readModuleHandles);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Microsoft.CodeCoverage.IO.CoverageFile/<ReadAsync>d__38")]
public static Task`1<CoverageData> ReadAsync(string path, CancellationToken token, IList`1<string> testIds, bool readModules, bool readSkippedFunctions, bool readSkippedModules, bool cacheCoverageMessages, bool readModuleHandles);
    [NullableContextAttribute("1")]
private static CoverageFile ReadCoverageFile(string path, bool readModules, bool readSkippedFunctions, bool readSkippedModules, bool readModuleHandles, bool cacheCoverageMessages, IList`1<string> testIds, bool readOnlyTestList, CancellationToken token);
    [NullableContextAttribute("1")]
internal static CoverageFile ReadCoverageFile(string path, BinaryReader reader, bool cacheCoverageMessages, bool readModules, bool readSkippedFunctions, bool readSkippedModules, bool readModuleHandles, IList`1<string> testIds, bool readOnlyTestList, CancellationToken token);
    [NullableContextAttribute("1")]
protected virtual void ProcessStreamHeader(StreamHeader streamHeader, BinaryReader reader, bool readModuleHandles, bool readOnlyTestList, String[] orderedTestIds);
    [NullableContextAttribute("1")]
private void RecordTestListInformationDataStreamType(BinaryMessageReader reader, String[] orderedTestIds);
    [NullableContextAttribute("1")]
private void RecordPerTestCodeCoverageDataStream(BinaryMessageReader reader, Guid identifier, String[] orderedTestIds);
    [NullableContextAttribute("1")]
private void RecordCoverageDataStream(BinaryMessageReader reader, Guid identifier);
    [NullableContextAttribute("1")]
private void RecordModuleStream(BinaryMessageReader reader, bool readModuleHandles);
    [NullableContextAttribute("1")]
internal static void GetSkippedModule(BinaryMessageReader reader, IList`1<SkippedModule> modules, string filePath);
    [NullableContextAttribute("1")]
private static void ReadModuleData(string path, BinaryReader reader, ModuleWrapper module, IList`1<string> testIds, bool readSkippedFunctions, bool cacheCoverageMessages, IDictionary`2<string, IList`1<ValueTuple`2<long, long>>> moduleDataLocations, IDictionary`2<Guid, IList`1<ValueTuple`3<string, long, long>>> coverageDataLocations, Byte[] coverageBuffer);
    [NullableContextAttribute("1")]
private static ValueTuple`2<Byte[], List`1<ValueTuple`2<UInt32, FunctionWrapper>>> ReadModuleStream(string path, BinaryReader reader, ModuleWrapper module, IList`1<string> testIds, long streamEnd, bool readSkippedFunctions, bool cacheCoverageMessages, IDictionary`2<Guid, IList`1<ValueTuple`3<string, long, long>>> coverageDataLocations, Byte[] coverageBuffer);
    [NullableContextAttribute("1")]
private static ValueTuple`2<Byte[], List`1<ValueTuple`2<UInt32, FunctionWrapper>>> ReadModuleStream(string path, BinaryReader reader, ModuleWrapper module, IList`1<string> testIds, bool readSkippedFunctions, bool cacheCoverageMessages, IDictionary`2<Guid, IList`1<ValueTuple`3<string, long, long>>> coverageDataLocations, Byte[] coverageBuffer, BinaryMessageReader stream);
    [NullableContextAttribute("1")]
internal static void LoadRawData(ModuleHandle moduleHandle);
    [NullableContextAttribute("1")]
internal static void LoadRawData(ModuleHandle moduleHandle, BinaryReader reader);
    [NullableContextAttribute("1")]
internal static void CalculateRawDataHash(ModuleHandle moduleHandle, BinaryReader binaryReader);
    [NullableContextAttribute("2")]
internal Byte[] GetCoverageBuffer(Guid coverageBufferId, bool skipInvalidFiles, BinaryReader binaryReader);
    [NullableContextAttribute("1")]
private static Byte[] GetCoverageBuffer(string path, BinaryReader reader, Guid coverageBufferId, IList`1<string> testIds, IDictionary`2<Guid, IList`1<ValueTuple`3<string, long, long>>> coverageDataLocations);
    [NullableContextAttribute("1")]
private static Byte[] MergeCoverageBuffer(string path, BinaryReader reader, long start, long blockCount, Byte[] buffer);
    [NullableContextAttribute("1")]
private static Byte[] AdjustCoverageBuffer(UInt32 currentBlockCount, ModuleWrapper module, List`1<ValueTuple`2<UInt32, FunctionWrapper>> bufferMap, Byte[] coverageBuffer);
    [NullableContextAttribute("1")]
internal static void ReadSoureFile(BinaryMessageReader reader, ModuleWrapper module, IDictionary`2<UInt32, UInt32> sourceIdMap, bool cacheCoverageMessages);
    [NullableContextAttribute("1")]
internal static ValueTuple`2<UInt32, FunctionWrapper> ReadFunction(BinaryMessageReader reader, ModuleWrapper module, Byte[] coverageBuffer, Dictionary`2<UInt32, UInt32> sourceIdMap, bool cacheCoverageMessages);
    [NullableContextAttribute("1")]
internal static void ReadSkippedMessage(BinaryMessageReader reader, ModuleWrapper module, bool readSkippedFunctions, bool cacheCoverageMessages);
    private void LoadAllModuleData(bool readSkippedFunctions, bool skipInvalidFiles);
    private void LoadAllCoverageBuffers(bool skipInvalidFiles);
    [NullableContextAttribute("1")]
internal static void LoadAllRawData(CoverageData coverageData);
    [NullableContextAttribute("1")]
private void LoadModuleData(string moduleId, bool readSkippedFunctions, bool skipInvalidFiles);
    [NullableContextAttribute("1")]
private void ReadModule(BinaryReader reader, bool readSkippedFunctions, IList`1<string> testIds, string moduleId);
    [NullableContextAttribute("1")]
private void ReadSkippedModules(BinaryReader reader);
    [NullableContextAttribute("1")]
private void ReadModules(BinaryReader reader, bool readSkippedFunctions, IList`1<string> testIds);
    public static void SplitCoverageFile(string path, string outputFolder, bool writeSkippedModules, bool generateCoverageBufferFiles);
    [AsyncStateMachineAttribute("Microsoft.CodeCoverage.IO.CoverageFile/<SplitCoverageFileAsync>d__68")]
public static Task SplitCoverageFileAsync(string path, string outputFolder, bool writeSkippedModules, bool generateCoverageBufferFiles, CancellationToken token);
    private static void SplitCoverageFile(CoverageData coverageData, string outputFolder, bool writeSkippedModules, bool generateCoverageBufferFiles, CancellationToken token);
    internal static void Write(string path, CoverageData coverageData);
    internal static void Write(string path, CoverageData coverageData, CancellationToken token);
    private static void Write(BinaryWriter writer, CoverageData coverageData, CancellationToken token);
    private static void WriteInstrumentedModuleData(BinaryWriter writer, ModuleWrapper module);
    private static void WriteInstrumentedModuleData(BinaryWriter writer, ModuleHandle moduleHandle);
    private static void WriteModuleCoverageData(BinaryWriter writer, Guid coverageBufferId, Byte[] coverageBuffer);
    private static void WriteSingleSkippedModuleToFile(string outputFolder, SkippedModule module, ConcurrentDictionary`2<string, byte> writtenModules);
    private static void WriteSkippedModuleData(BinaryWriter writer, SkippedModule module);
    private static void WriteSingleModuleToFile(string outputFolder, ModuleWrapper module, ConcurrentDictionary`2<string, byte> writtenModules, bool generateCoverageBufferFiles);
    private static void WriteInstrumentedModule(string outputFolder, ModuleWrapper module, Byte[] coverageBuffer, bool generateCoverageBufferFiles);
    private static Byte[] GetAdjustedCoverageBuffer(ModuleWrapper module, Byte[] coverageBuffer);
    private static void WriteTestListData(BinaryWriter writer, TestInformation[] testInformations);
    private static void WritePerTestData(BinaryWriter writer, Guid identifier, KeyValuePair`2<CoverageBufferHashMessage, ValueTuple`2<List`1<string>, Byte[]>> perTestCoverageData);
    [CompilerGeneratedAttribute]
internal static void <MergeTestListData>g__MergeTestListData|31_0(CoverageData coverageData, CoverageData target);
    [CompilerGeneratedAttribute]
internal static void <MergePerTestData>g__MergePerTestData|32_0(CoverageData coverageData, CoverageData target);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Microsoft.CodeCoverage.IO.CoverageFileBase : object {
    private static ushort MaximumMessageSchemaVersion;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    public string Path { get; }
    protected CoverageFileBase(string path);
    [CompilerGeneratedAttribute]
public string get_Path();
    internal static FileHeader ReadFileHeader(BinaryReader reader);
    internal static void ValidateFileHeader(FileHeader fileHeader, string path);
    internal static StreamHeader ReadStreamHeader(BinaryReader reader);
    internal static void ValidateStreamHeader(StreamHeader streamHeader, string path);
    protected virtual void ReadFile(BinaryReader reader, CancellationToken token, bool readModuleHandles, bool readOnlyTestList, IList`1<string> testIds);
    protected abstract virtual void ProcessStreamHeader(StreamHeader streamHeader, BinaryReader reader, bool readModuleHandles, bool readOnlyTestList, String[] orderedTestIds);
}
internal static class Microsoft.CodeCoverage.IO.CoverageFileConverter : object {
    [AsyncStateMachineAttribute("Microsoft.CodeCoverage.IO.CoverageFileConverter/<ToXmlFileAsync>d__0")]
public static Task ToXmlFileAsync(string path, string outputPath, bool includeSkippedFunctions, bool includeSkippedModules, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.CodeCoverage.IO.CoverageFileConverter/<ToCoverageXmlFileAsync>d__1")]
public static Task`1<CoverageXmlFile> ToCoverageXmlFileAsync(string path, bool includeSkippedFunctions, bool includeSkippedModules, CancellationToken token);
    internal static void WriteXmlFile(string path, CoverageData coverageData, bool includeSkippedModules, CancellationToken token);
    internal static void WriteXmlFile(string path, CoverageXmlFile coverageXmlFile);
    internal static CoverageXmlFile ToXml(CoverageData coverageData, bool includeSkippedModules, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.CodeCoverage.IO.CoverageFileConverter/<ToCoberturaFileAsync>d__5")]
public static Task ToCoberturaFileAsync(string path, string outputPath, CancellationToken token);
    internal static void WriteToCoberturaFile(string path, CoverageData coverageData, CancellationToken token);
    internal static CoberturaFile ToCobertura(CoverageData coverageData, CancellationToken token);
    private static CoberturaClass GetCoberturaClass(ModuleWrapper module, Function function, Dictionary`2<ValueTuple`2<string, string>, CoberturaClass> coberturaClasses, CoberturaPackage coberturaPackage);
    private static void AddMethod(CoberturaClass coberturaClass, Function function);
    private static void AddLine(CoberturaClass coberturaClass, CoberturaMethod coberturaMethod, BlockLineData line, UInt32 i);
}
public class Microsoft.CodeCoverage.IO.CoverageFileUtility : object {
    public sealed virtual bool IsValidCoverageFile(string path);
    public sealed virtual CoverageData ReadCoverageFile(string path);
    public sealed virtual CoverageData ReadCoverageFile(string path, IList`1<string> testIds);
    public sealed virtual CoverageData ReadCoverageFile(string path, bool readModules, bool readSkippedMessages, bool readSkippedModules, bool cacheCoverageMessages);
    public sealed virtual CoverageData ReadCoverageFile(string path, bool readModules, bool readSkippedMessages, bool readSkippedModules, bool cacheCoverageMessages, IList`1<string> testIds);
    public sealed virtual TestCaseInformation[] ReadTestCases(string path);
    public sealed virtual Task`1<CoverageData> ReadCoverageFileAsync(string path, CancellationToken token);
    public sealed virtual Task`1<CoverageData> ReadCoverageFileAsync(string path, IList`1<string> testIds, CancellationToken token);
    public sealed virtual Task`1<CoverageData> ReadCoverageFileAsync(string path, bool readModules, bool readSkippedMessages, bool readSkippedModules, bool cacheCoverageMessages, CancellationToken token);
    public sealed virtual Task`1<CoverageData> ReadCoverageFileAsync(string path, bool readModules, bool readSkippedMessages, bool readSkippedModules, bool cacheCoverageMessages, IList`1<string> testIds, CancellationToken token);
    public sealed virtual void WriteCoverageFile(string path, CoverageData coverageData);
    public sealed virtual void SplitCoverageFile(string path, string outputFolder, bool writeSkippedModules, bool generateCoverageBufferFiles);
    [AsyncStateMachineAttribute("Microsoft.CodeCoverage.IO.CoverageFileUtility/<SplitCoverageFileAsync>d__12")]
public sealed virtual Task SplitCoverageFileAsync(string path, string outputFolder, bool writeSkippedModules, bool generateCoverageBufferFiles, CancellationToken token);
    public sealed virtual string MergeCoverageBufferFiles(string covxFile, IList`1<string> coverageBufferFiles);
    public sealed virtual string MergeCoverageBufferFiles(string covxFile, IList`1<string> coverageBufferFiles, bool skipInvalidFiles);
    [AsyncStateMachineAttribute("Microsoft.CodeCoverage.IO.CoverageFileUtility/<MergeCoverageBufferFilesAsync>d__15")]
public sealed virtual Task`1<string> MergeCoverageBufferFilesAsync(string covxFile, IList`1<string> coverageBufferFiles, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.CodeCoverage.IO.CoverageFileUtility/<MergeCoverageBufferFilesAsync>d__16")]
public sealed virtual Task`1<string> MergeCoverageBufferFilesAsync(string covxFile, IList`1<string> coverageBufferFiles, bool skipInvalidFiles, CancellationToken token);
    public sealed virtual CoverageData MergeCoverageFiles(IList`1<string> files);
    public sealed virtual CoverageData MergeCoverageFiles(IList`1<string> files, bool skipInvalidFiles);
    public sealed virtual CoverageData MergeCoverageFiles(IList`1<string> files, int taskCount);
    public sealed virtual CoverageData MergeCoverageFiles(IList`1<string> files, bool skipInvalidFiles, int taskCount);
    [AsyncStateMachineAttribute("Microsoft.CodeCoverage.IO.CoverageFileUtility/<MergeCoverageFilesAsync>d__21")]
public sealed virtual Task`1<CoverageData> MergeCoverageFilesAsync(IList`1<string> files, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.CodeCoverage.IO.CoverageFileUtility/<MergeCoverageFilesAsync>d__22")]
public sealed virtual Task`1<CoverageData> MergeCoverageFilesAsync(IList`1<string> files, bool skipInvalidFiles, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.CodeCoverage.IO.CoverageFileUtility/<MergeCoverageFilesAsync>d__23")]
public sealed virtual Task`1<CoverageData> MergeCoverageFilesAsync(IList`1<string> files, int taskCount, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.CodeCoverage.IO.CoverageFileUtility/<MergeCoverageFilesAsync>d__24")]
public sealed virtual Task`1<CoverageData> MergeCoverageFilesAsync(IList`1<string> files, bool skipInvalidFiles, int taskCount, CancellationToken token);
    public sealed virtual void ConvertCoverageFile(string path, string outputPath, bool includeSkippedFunctions, bool includeSkippedModules);
    [AsyncStateMachineAttribute("Microsoft.CodeCoverage.IO.CoverageFileUtility/<GetCoverageReportAsync>d__26")]
public sealed virtual Task`1<ValueTuple`2<CoverageReportType, object>> GetCoverageReportAsync(string path, bool skipInvalidFile, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.CodeCoverage.IO.CoverageFileUtility/<MergeCoverageReportsAsync>d__27")]
public sealed virtual Task`1<IList`1<string>> MergeCoverageReportsAsync(string outputFilename, IList`1<string> inputFiles, CoverageMergeOperation mergeOperation, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.CodeCoverage.IO.CoverageFileUtility/<MergeCoverageReportsAsync>d__28")]
public sealed virtual Task`1<IList`1<string>> MergeCoverageReportsAsync(string outputFilename, IList`1<string> inputFiles, CoverageMergeOperation mergeOperation, bool skipInvalidFiles, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.CodeCoverage.IO.CoverageFileUtility/<MergeCoverageReportsAsync>d__29")]
public sealed virtual Task`1<IList`1<string>> MergeCoverageReportsAsync(string outputFilename, IList`1<string> inputFiles, CoverageMergeOperation mergeOperation, int taskCount, CancellationToken token);
    public sealed virtual Task`1<IList`1<string>> MergeCoverageReportsAsync(string outputFilename, IList`1<string> inputFiles, CoverageMergeOperation mergeOperation, bool skipInvalidFiles, int taskCount, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.CodeCoverage.IO.CoverageFileUtility/<MergeCoverageReportsAsync>d__31")]
public sealed virtual Task`1<IList`1<string>> MergeCoverageReportsAsync(string outputFilename, IList`1<ValueTuple`3<string, CoverageReportType, object>> reports, CoverageMergeOperation mergeOperation, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.CodeCoverage.IO.CoverageFileUtility/<MergeCoverageReportsAsync>d__32")]
public sealed virtual Task`1<IList`1<string>> MergeCoverageReportsAsync(string outputFilename, IList`1<ValueTuple`3<string, CoverageReportType, object>> reports, CoverageMergeOperation mergeOperation, bool skipInvalidFiles, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.CodeCoverage.IO.CoverageFileUtility/<MergeCoverageReportsAsync>d__33")]
public sealed virtual Task`1<IList`1<string>> MergeCoverageReportsAsync(string outputFilename, IList`1<ValueTuple`3<string, CoverageReportType, object>> reports, CoverageMergeOperation mergeOperation, int taskCount, CancellationToken token);
    public sealed virtual Task`1<IList`1<string>> MergeCoverageReportsAsync(string outputFilename, IList`1<ValueTuple`3<string, CoverageReportType, object>> reports, CoverageMergeOperation mergeOperation, bool skipInvalidFiles, int taskCount, CancellationToken token);
}
[XmlRootAttribute("results")]
public class Microsoft.CodeCoverage.IO.CoverageXmlFile : object {
    [CompilerGeneratedAttribute]
private List`1<Module> <Modules>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<SkippedModule> <SkippedModules>k__BackingField;
    [XmlArrayAttribute("modules")]
[XmlArrayItemAttribute("module")]
public List`1<Module> Modules { get; public set; }
    [XmlArrayAttribute("skipped_modules")]
[XmlArrayItemAttribute("skipped_module")]
public List`1<SkippedModule> SkippedModules { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<Module> get_Modules();
    [CompilerGeneratedAttribute]
public void set_Modules(List`1<Module> value);
    [CompilerGeneratedAttribute]
public List`1<SkippedModule> get_SkippedModules();
    [CompilerGeneratedAttribute]
public void set_SkippedModules(List`1<SkippedModule> value);
    public bool ShouldSerializeModules();
    public bool ShouldSerializeSkippedModules();
}
internal static class Microsoft.CodeCoverage.IO.CoverageXmlFileUtility : object {
    public static bool TryReadCoverageXmlFile(string path, CoverageXmlFile& coverageXmlFile);
    public static CoverageFile ToCoverageFile(CoverageXmlFile coverageXmlFile);
    private static ModuleWrapper ToModuleWrapper(Module module);
    private static ValueTuple`2<FunctionInstrumentedMessage, Byte[]> ToFunctionInstrumentedMessage(Function function, UInt32 startBlockIndex);
    private static FunctionSkippedMessage ToFunctionSkippedMessage(SkippedFunction skippedFunction);
    private static SourceFileDataMessage ToSourceFileDataMessage(SourceFile sourceFile);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.CodeCoverage.IO.Exceptions.CoverageFileException : VanguardException {
    public CoverageFileException(string path);
    public CoverageFileException(string path, Exception innerException);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.CodeCoverage.IO.Exceptions.InvalidBufferCountException : VanguardException {
    public InvalidBufferCountException(string message);
    public InvalidBufferCountException(string message, Exception innerException);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.CodeCoverage.IO.Exceptions.InvalidCoverageFileException : VanguardException {
    public InvalidCoverageFileException(string path);
    public InvalidCoverageFileException(string path, Exception innerException);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.CodeCoverage.IO.Exceptions.UnsupportedCoverageFileException : VanguardException {
    public UnsupportedCoverageFileException(string path);
    public UnsupportedCoverageFileException(string path, Exception innerException);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.CodeCoverage.IO.Exceptions.VanguardException : Exception {
    public VanguardException(string message);
    public VanguardException(string message, Exception innerException);
}
public interface Microsoft.CodeCoverage.IO.ICoverageFileUtility {
    public abstract virtual bool IsValidCoverageFile(string path);
    public abstract virtual CoverageData ReadCoverageFile(string path);
    public abstract virtual CoverageData ReadCoverageFile(string path, IList`1<string> testIds);
    public abstract virtual CoverageData ReadCoverageFile(string path, bool readModules, bool readSkippedMessages, bool readSkippedModules, bool cacheCoverageMessages);
    public abstract virtual CoverageData ReadCoverageFile(string path, bool readModules, bool readSkippedMessages, bool readSkippedModules, bool cacheCoverageMessages, IList`1<string> testIds);
    public abstract virtual TestCaseInformation[] ReadTestCases(string path);
    public abstract virtual Task`1<CoverageData> ReadCoverageFileAsync(string path, CancellationToken token);
    public abstract virtual Task`1<CoverageData> ReadCoverageFileAsync(string path, IList`1<string> testIds, CancellationToken token);
    public abstract virtual Task`1<CoverageData> ReadCoverageFileAsync(string path, bool readModules, bool readSkippedMessages, bool readSkippedModules, bool cacheCoverageMessages, CancellationToken token);
    public abstract virtual Task`1<CoverageData> ReadCoverageFileAsync(string path, bool readModules, bool readSkippedMessages, bool readSkippedModules, bool cacheCoverageMessages, IList`1<string> testIds, CancellationToken token);
    public abstract virtual void WriteCoverageFile(string path, CoverageData coverageData);
    public abstract virtual void SplitCoverageFile(string path, string outputFolder, bool writeSkippedModules, bool generateCoverageBufferFiles);
    public abstract virtual Task SplitCoverageFileAsync(string path, string outputFolder, bool writeSkippedModules, bool generateCoverageBufferFiles, CancellationToken token);
    public abstract virtual string MergeCoverageBufferFiles(string covxFile, IList`1<string> coverageBufferFiles);
    public abstract virtual string MergeCoverageBufferFiles(string covxFile, IList`1<string> coverageBufferFiles, bool skipInvalidFiles);
    public abstract virtual Task`1<string> MergeCoverageBufferFilesAsync(string covxFile, IList`1<string> coverageBufferFiles, CancellationToken token);
    public abstract virtual Task`1<string> MergeCoverageBufferFilesAsync(string covxFile, IList`1<string> coverageBufferFiles, bool skipInvalidFiles, CancellationToken token);
    public abstract virtual CoverageData MergeCoverageFiles(IList`1<string> files);
    public abstract virtual CoverageData MergeCoverageFiles(IList`1<string> files, bool skipInvalidFiles);
    public abstract virtual CoverageData MergeCoverageFiles(IList`1<string> files, int taskCount);
    public abstract virtual CoverageData MergeCoverageFiles(IList`1<string> files, bool skipInvalidFiles, int taskCount);
    public abstract virtual Task`1<CoverageData> MergeCoverageFilesAsync(IList`1<string> files, CancellationToken token);
    public abstract virtual Task`1<CoverageData> MergeCoverageFilesAsync(IList`1<string> files, bool skipInvalidFiles, CancellationToken token);
    public abstract virtual Task`1<CoverageData> MergeCoverageFilesAsync(IList`1<string> files, int taskCount, CancellationToken token);
    public abstract virtual Task`1<CoverageData> MergeCoverageFilesAsync(IList`1<string> files, bool skipInvalidFiles, int taskCount, CancellationToken token);
    public abstract virtual void ConvertCoverageFile(string path, string outputPath, bool includeSkippedModules, bool includeSkippedFunctions);
    public abstract virtual Task`1<ValueTuple`2<CoverageReportType, object>> GetCoverageReportAsync(string path, bool skipInvalidFile, CancellationToken token);
    public abstract virtual Task`1<IList`1<string>> MergeCoverageReportsAsync(string outputFilename, IList`1<string> files, CoverageMergeOperation mergeOperation, CancellationToken token);
    public abstract virtual Task`1<IList`1<string>> MergeCoverageReportsAsync(string outputFilename, IList`1<string> files, CoverageMergeOperation mergeOperation, bool skipInvalidFiles, CancellationToken token);
    public abstract virtual Task`1<IList`1<string>> MergeCoverageReportsAsync(string outputFilename, IList`1<string> files, CoverageMergeOperation mergeOperation, int taskCount, CancellationToken token);
    public abstract virtual Task`1<IList`1<string>> MergeCoverageReportsAsync(string outputFilename, IList`1<string> files, CoverageMergeOperation mergeOperation, bool skipInvalidFiles, int taskCount, CancellationToken token);
    public abstract virtual Task`1<IList`1<string>> MergeCoverageReportsAsync(string outputFilename, IList`1<ValueTuple`3<string, CoverageReportType, object>> reports, CoverageMergeOperation mergeOperation, CancellationToken token);
    public abstract virtual Task`1<IList`1<string>> MergeCoverageReportsAsync(string outputFilename, IList`1<ValueTuple`3<string, CoverageReportType, object>> reports, CoverageMergeOperation mergeOperation, bool skipInvalidFiles, CancellationToken token);
    public abstract virtual Task`1<IList`1<string>> MergeCoverageReportsAsync(string outputFilename, IList`1<ValueTuple`3<string, CoverageReportType, object>> reports, CoverageMergeOperation mergeOperation, int taskCount, CancellationToken token);
    public abstract virtual Task`1<IList`1<string>> MergeCoverageReportsAsync(string outputFilename, IList`1<ValueTuple`3<string, CoverageReportType, object>> reports, CoverageMergeOperation mergeOperation, bool skipInvalidFiles, int taskCount, CancellationToken token);
}
[ExtensionAttribute]
public static class Microsoft.CodeCoverage.IO.StringExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static string GetFileName(string path);
}
internal static class System.Runtime.CompilerServices.IsExternalInit : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
