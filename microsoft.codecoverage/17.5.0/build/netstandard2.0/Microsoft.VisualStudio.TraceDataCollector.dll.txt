[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.Coverage.CodeCoverageDataAttachmentsHandler : object {
    private static string CoverageUri;
    private static string CoverageFileExtension;
    private static string XmlFileExtension;
    private static string CoverageFriendlyName;
    private static Uri CodeCoverageDataCollectorUri;
    private static ICoverageFileUtility CoverageFileUtility;
    public bool SupportsIncrementalProcessing { get; }
    private static CodeCoverageDataAttachmentsHandler();
    public sealed virtual bool get_SupportsIncrementalProcessing();
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.Coverage.CodeCoverageDataAttachmentsHandler/<GetExtensionUris>d__8")]
public sealed virtual IEnumerable`1<Uri> GetExtensionUris();
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Coverage.CodeCoverageDataAttachmentsHandler/<ProcessAttachmentSetsAsync>d__9")]
public sealed virtual Task`1<ICollection`1<AttachmentSet>> ProcessAttachmentSetsAsync(XmlElement configurationElement, ICollection`1<AttachmentSet> attachments, IProgress`1<int> progressReporter, IMessageLogger logger, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Coverage.CodeCoverageDataAttachmentsHandler/<MergeCodeCoverageFilesAsync>d__10")]
private Task`1<IList`1<string>> MergeCodeCoverageFilesAsync(IList`1<string> files, IProgress`1<int> progressReporter, CancellationToken cancellationToken);
}
[DataCollectorTypeUriAttribute("datacollector://Microsoft/CodeCoverage/2.1")]
[DataCollectorFriendlyNameAttribute("Code Coverage 2.1")]
public class Microsoft.VisualStudio.Coverage.DynamicCoverage21DataCollector : DynamicCoverageDataCollector {
}
[DataCollectorTypeUriAttribute("datacollector://Microsoft/CodeCoverage/2.0")]
[DataCollectorFriendlyNameAttribute("Code Coverage")]
public class Microsoft.VisualStudio.Coverage.DynamicCoverageDataCollector : BaseDataCollector {
    private IEnvironment _environment;
    private IDirectoryHelper _directoryHelper;
    private IFileHelper _fileHelper;
    private IProfilersLocationProvider _profilersLocationProvider;
    private IDynamicCoverageDataCollectorImplFactory _dynamicCoverageDataCollectorImplFactory;
    private IVanguardProvider _vanguardProvider;
    private IStaticNativeRuntimeProviderFactory _staticNativeRuntimeProviderFactory;
    private DataCollectorConfiguration _collectorConfiguration;
    private IDynamicCoverageDataCollectorImpl _implementation;
    internal static string Uri;
    internal static string FriendlyName;
    internal DynamicCoverageDataCollector(IProfilersLocationProvider vanguardLocationProvider, IVanguardProvider vanguardProvider, IDynamicCoverageDataCollectorImplFactory dynamicCoverageDataCollectorImplFactory, IEnvironment environment, IFileHelper fileHelper, IDirectoryHelper directoryHelper, ITraceLogger traceLogger, IStaticNativeRuntimeProviderFactory staticNativeRuntimeProviderFactory);
    protected virtual void OnInitialize(XmlElement configurationElement);
    private void ValidateReportsConfiguration();
    private void InitializeConfiguration(XmlElement configurationElement);
    private void InitializeVanguardProvider();
    protected virtual void Dispose(bool disposing);
    protected virtual IEnumerable`1<KeyValuePair`2<string, string>> GetEnvironmentVariables();
    private void SessionEnd(object sender, SessionEndEventArgs e);
    private void SessionStart(object sender, SessionStartEventArgs e);
    private void Events_TestCaseEnd(object sender, TestCaseEndEventArgs e);
    private void Events_TestCaseStart(object sender, TestCaseStartEventArgs e);
    private void TestHostLaunched(object sender, TestHostLaunchedEventArgs e);
}
internal class Microsoft.VisualStudio.Coverage.DynamicCoverageDataCollectorImpl : object {
    private IDirectoryHelper _directoryHelper;
    private IFileHelper _fileHelper;
    private IEnvironment _environment;
    private IDataCollectionLogger _logger;
    private IDataCollectionSink _dataSink;
    private int _attachmentReferenceCount;
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _uploadedAttachmentsCount;
    [CompilerGeneratedAttribute]
private IVanguardProvider <VanguardProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private DataCollectorConfiguration <DataCollectorConfiguration>k__BackingField;
    public IVanguardProvider VanguardProvider { get; private set; }
    public DataCollectorConfiguration DataCollectorConfiguration { get; private set; }
    public DynamicCoverageDataCollectorImpl(IEnvironment environment);
    internal DynamicCoverageDataCollectorImpl(IDirectoryHelper directoryHelper, IFileHelper fileHelper, IEnvironment environment);
    [CompilerGeneratedAttribute]
public sealed virtual IVanguardProvider get_VanguardProvider();
    [CompilerGeneratedAttribute]
private void set_VanguardProvider(IVanguardProvider value);
    [CompilerGeneratedAttribute]
public DataCollectorConfiguration get_DataCollectorConfiguration();
    [CompilerGeneratedAttribute]
private void set_DataCollectorConfiguration(DataCollectorConfiguration value);
    public virtual void Initialize(DataCollectorConfiguration dataCollectorConfiguration, IDataCollectionSink dataSink, IDataCollectionLogger logger, IVanguardProvider vanguardProvider);
    public virtual void Dispose();
    public virtual void SessionStart(object sender, SessionStartEventArgs e);
    public virtual void SessionEnd(object sender, SessionEndEventArgs e);
    protected void StartVanguard(SessionStartEventArgs e);
    public sealed virtual void TestCaseStart(object sender, TestCaseStartEventArgs e);
    public sealed virtual void TestCaseEnd(object sender, TestCaseEndEventArgs e);
    protected void StopVanguard(DataCollectionContext context);
    protected void GetCoverageData(DataCollectionContext context);
    protected void OnSendFileCompletedEvent(object sender, AsyncCompletedEventArgs e);
    private void CreateDirectory(DataCollectionContext context, string path);
}
[DataCollectorTypeUriAttribute("datacollector://Microsoft/CodeCoverage/2.0")]
[DataCollectorFriendlyNameAttribute("Code Coverage")]
[DataCollectorAttachmentProcessorAttribute("Microsoft.VisualStudio.Coverage.CodeCoverageDataAttachmentsHandler")]
public class Microsoft.VisualStudio.Coverage.DynamicCoverageDataCollectorWithAttachmentProcessor : DynamicCoverageDataCollector {
}
internal interface Microsoft.VisualStudio.Coverage.Interfaces.IDynamicCoverageDataCollectorImpl {
    public IVanguardProvider VanguardProvider { get; }
    public abstract virtual IVanguardProvider get_VanguardProvider();
    public abstract virtual void Initialize(DataCollectorConfiguration dataCollectorConfiguration, IDataCollectionSink dataSink, IDataCollectionLogger logger, IVanguardProvider vanguardProvider);
    public abstract virtual void SessionEnd(object sender, SessionEndEventArgs sessionEndEventArgs);
    public abstract virtual void SessionStart(object sender, SessionStartEventArgs sessionStartEventArgs);
    public abstract virtual void TestCaseStart(object sender, TestCaseStartEventArgs e);
    public abstract virtual void TestCaseEnd(object sender, TestCaseEndEventArgs e);
}
internal interface Microsoft.VisualStudio.Coverage.Interfaces.IVanguard {
    public DataCollectorConfiguration Configuration { get; public set; }
    public int TestHostProcessId { get; public set; }
    public int NumberOfClientsConnected { get; }
    public abstract virtual DataCollectorConfiguration get_Configuration();
    public abstract virtual void set_Configuration(DataCollectorConfiguration value);
    public abstract virtual int get_TestHostProcessId();
    public abstract virtual void set_TestHostProcessId(int value);
    public abstract virtual int get_NumberOfClientsConnected();
    public abstract virtual void Initialize(string sessionName, string configurationFileName, IDataCollectionLogger logger);
    public abstract virtual void Start(string outputName, DataCollectionContext context, IEnvironment environment, IEnumerable`1<string> sources);
    public abstract virtual void Stop();
    public abstract virtual IList`1<string> GetOutputCoverageFiles();
    public abstract virtual void GetCoverageData(string outputName);
    public abstract virtual void TestCaseStart(object sender, TestCaseStartEventArgs e);
    public abstract virtual void TestCaseEnd(object sender, TestCaseEndEventArgs e);
}
internal interface Microsoft.VisualStudio.Coverage.Interfaces.IVanguardCommandBuilder {
    public abstract virtual string GenerateCommandLine(VanguardCommand vanguardCommand, string sessionName, string outputName, string configurationFilePath, string entryPoint);
}
internal interface Microsoft.VisualStudio.Coverage.Interfaces.IVanguardProvider {
    public IVanguard Vanguard { get; }
    public string SessionName { get; }
    public string PipePath { get; }
    public string SessionDirectory { get; }
    public string CoverageFileName { get; }
    public string ConfigurationFilePath { get; }
    public abstract virtual IVanguard get_Vanguard();
    public abstract virtual string get_SessionName();
    public abstract virtual string get_PipePath();
    public abstract virtual string get_SessionDirectory();
    public abstract virtual string get_CoverageFileName();
    public abstract virtual string get_ConfigurationFilePath();
    public abstract virtual void Initialize(DataCollectorConfiguration collectorConfiguration, IDataCollectionLogger logger);
    public abstract virtual void WriteConfigurationFiles();
    public abstract virtual string GenerateCoverageFileName();
    public abstract virtual void DeleteSessionDirectory();
}
public enum Microsoft.VisualStudio.Coverage.Interfaces.VanguardCommand : Enum {
    public int value__;
    public static VanguardCommand Collect;
    public static VanguardCommand Shutdown;
    public static VanguardCommand Register;
    public static VanguardCommand Unregister;
    public static VanguardCommand UnregisterAll;
    public static VanguardCommand GetCoverageData;
    public static VanguardCommand StartIISCollection;
}
internal class Microsoft.VisualStudio.Coverage.ManagedVanguard : VanguardBase {
    private string _pipePath;
    private IStaticNativeInstrumenterFactory _staticNativeInstrumenterFactory;
    private IStaticNativeRuntimeProviderFactory _staticNativeRuntimeProviderFactory;
    private IStaticNativeInstrumenter _staticNativeInstrumenter;
    private LoggerBase _vanguardLogger;
    private IDirectoryHelper _directoryHelper;
    private bool _disposed;
    private IList`1<string> _outputCoverageFiles;
    public int TestHostProcessId { get; public set; }
    public int NumberOfClientsConnected { get; }
    public ManagedVanguard(string sessionName, string pipePath, string configurationFilePath, DataCollectorConfiguration configuration, IDataCollectionLogger logger, IStaticNativeInstrumenterFactory staticNativeInstrumenterFactory, IStaticNativeRuntimeProviderFactory staticNativeRuntimeProviderFactory, IDirectoryHelper directoryHelper);
    public virtual int get_TestHostProcessId();
    public virtual void set_TestHostProcessId(int value);
    public virtual int get_NumberOfClientsConnected();
    public virtual void Start(string outputName, DataCollectionContext context, IEnvironment environment, IEnumerable`1<string> sources);
    public virtual void TestCaseStart(object sender, TestCaseStartEventArgs e);
    public virtual void TestCaseEnd(object sender, TestCaseEndEventArgs e);
    private bool InitializeTelemetryVanguardLogger(string outputName, IEnvironment environment, ILogger logger, IStaticNativeRuntimeProvider staticNativeRuntimeProvider);
    public virtual void Stop();
    public virtual IList`1<string> GetOutputCoverageFiles();
    public virtual void GetCoverageData(string outputName);
    protected virtual void Dispose(bool disposing);
    private void DisposeDependencies();
}
internal class Microsoft.VisualStudio.Coverage.UnmanagedVanguard : VanguardBase {
    private static UInt32 WaitObject0;
    private static int ProcessExitWaitLimit;
    private static string GlobalEventNamePrefix;
    private ManualResetEvent _vanguardProcessExitEvent;
    private Process _vanguardProcess;
    private UInt32 _eventTimeout;
    private IProcessJobObject _processJobObject;
    private IProfilersLocationProvider _vanguardLocationProvider;
    private IVanguardCommandBuilder _vanguardCommandBuilder;
    private bool _disposed;
    private bool IsRunning { get; }
    public UnmanagedVanguard(string sessionName, string configurationFilePath, DataCollectorConfiguration configuration, IEnumerable`1<string> entryPoints, IProfilersLocationProvider profilersLocationProvider);
    public UnmanagedVanguard(string sessionName, string configurationFilePath, DataCollectorConfiguration configuration, IEnumerable`1<string> entryPoints, IDataCollectionLogger logger, IProfilersLocationProvider profilersLocationProvider);
    internal UnmanagedVanguard(IProfilersLocationProvider vanguardLocationProvider, IVanguardCommandBuilder commandBuilder, IProcessJobObject processJobObject);
    private bool get_IsRunning();
    public virtual void Start(string outputName, DataCollectionContext context, IEnvironment environment, IEnumerable`1<string> sources);
    public virtual void TestCaseStart(object sender, TestCaseStartEventArgs e);
    public virtual void TestCaseEnd(object sender, TestCaseEndEventArgs e);
    public virtual void Stop();
    public virtual IList`1<string> GetOutputCoverageFiles();
    public virtual void GetCoverageData(string outputName);
    public virtual void Register(string entryPoint, string configFileName);
    public virtual void Unregister(string entryPoint);
    public virtual void UnregisterAll();
    protected virtual void Dispose(bool disposing);
    private Process StartVanguardProcess(string commandLine, bool wait, bool standardErrorAsynchronousCall);
    private void WaitForRunningEvent();
    private void LoggerProcessExited(object sender, EventArgs e);
    private void LoggerProcessErrorDataReceived(object sender, DataReceivedEventArgs e);
    private static int GetProcessId(Process process);
    private void CreateProcessJobObject();
    protected void WaitForEvent(string eventName);
    private static IntPtr CreateEvent(IntPtr lpEventAttributes, bool bManualReset, bool bInitialState, string lpName);
    private static UInt32 WaitForMultipleObjects(UInt32 nCount, IntPtr[] lpHandles, bool bWaitAll, UInt32 dwMilliseconds);
    private static UInt32 WaitForSingleObject(IntPtr hHandle, UInt32 dwMilliseconds);
    private static bool CloseHandle(IntPtr hObject);
}
internal abstract class Microsoft.VisualStudio.Coverage.VanguardBase : object {
    public static string SideBySideKeyOnTeamBuildMachine;
    private bool _disposed;
    [CompilerGeneratedAttribute]
private IDataCollectionLogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SessionName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConfigurationFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private DataCollectorConfiguration <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TestHostProcessId>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <EntryPoints>k__BackingField;
    [CompilerGeneratedAttribute]
private DataCollectionContext <Context>k__BackingField;
    public IDataCollectionLogger Logger { get; private set; }
    public string SessionName { get; private set; }
    public string OutputName { get; protected set; }
    public string ConfigurationFilePath { get; private set; }
    public DataCollectorConfiguration Configuration { get; public set; }
    public int TestHostProcessId { get; public set; }
    public int NumberOfClientsConnected { get; }
    public List`1<string> EntryPoints { get; protected set; }
    protected DataCollectionContext Context { get; protected set; }
    protected VanguardBase(string sessionName, string configurationFilePath, DataCollectorConfiguration configuration, IDataCollectionLogger logger);
    [CompilerGeneratedAttribute]
public IDataCollectionLogger get_Logger();
    [CompilerGeneratedAttribute]
private void set_Logger(IDataCollectionLogger value);
    [CompilerGeneratedAttribute]
public string get_SessionName();
    [CompilerGeneratedAttribute]
private void set_SessionName(string value);
    [CompilerGeneratedAttribute]
public string get_OutputName();
    [CompilerGeneratedAttribute]
protected void set_OutputName(string value);
    [CompilerGeneratedAttribute]
public string get_ConfigurationFilePath();
    [CompilerGeneratedAttribute]
private void set_ConfigurationFilePath(string value);
    [CompilerGeneratedAttribute]
public sealed virtual DataCollectorConfiguration get_Configuration();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Configuration(DataCollectorConfiguration value);
    [CompilerGeneratedAttribute]
public virtual int get_TestHostProcessId();
    [CompilerGeneratedAttribute]
public virtual void set_TestHostProcessId(int value);
    public virtual int get_NumberOfClientsConnected();
    [CompilerGeneratedAttribute]
public List`1<string> get_EntryPoints();
    [CompilerGeneratedAttribute]
protected void set_EntryPoints(List`1<string> value);
    [CompilerGeneratedAttribute]
protected DataCollectionContext get_Context();
    [CompilerGeneratedAttribute]
protected void set_Context(DataCollectionContext value);
    public sealed virtual void Initialize(string sessionName, string configurationFileName, IDataCollectionLogger logger);
    public abstract virtual void Start(string outputName, DataCollectionContext context, IEnvironment environment, IEnumerable`1<string> sources);
    public abstract virtual void TestCaseStart(object sender, TestCaseStartEventArgs e);
    public abstract virtual void TestCaseEnd(object sender, TestCaseEndEventArgs e);
    public abstract virtual void Stop();
    public abstract virtual IList`1<string> GetOutputCoverageFiles();
    public abstract virtual void GetCoverageData(string outputName);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
internal class Microsoft.VisualStudio.Coverage.VanguardCommandBuilder : object {
    public sealed virtual string GenerateCommandLine(VanguardCommand vanguardCommand, string sessionName, string outputName, string configurationFilePath, string entryPoint);
}
internal class Microsoft.VisualStudio.Coverage.VanguardException : Exception {
    [CompilerGeneratedAttribute]
private bool <IsCritical>k__BackingField;
    public bool IsCritical { get; }
    internal VanguardException(string message, bool isCritical);
    public VanguardException(string message);
    public VanguardException(string message, Exception innerException);
    [CompilerGeneratedAttribute]
public bool get_IsCritical();
}
internal class Microsoft.VisualStudio.Coverage.VanguardProvider : object {
    public static string MagicMtmSessionPrefix;
    internal static string VanguardConfigFileName;
    private IDirectoryHelper _directoryHelper;
    private IFileHelper _fileHelper;
    private IEnvironment _environment;
    private IProfilersLocationProvider _profilersLocationProvider;
    private IStaticNativeInstrumenterFactory _staticNativeInstrumenterFactory;
    private IStaticNativeRuntimeProviderFactory _staticNativeRuntimeProviderFactory;
    private bool _disposed;
    private IDataCollectionLogger _logger;
    private DataCollectorConfiguration _collectorConfiguration;
    [CompilerGeneratedAttribute]
private IVanguard <Vanguard>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SessionName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PipePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SessionDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CoverageFileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConfigurationFilePath>k__BackingField;
    public IVanguard Vanguard { get; private set; }
    public string SessionName { get; private set; }
    public string PipePath { get; private set; }
    public string SessionDirectory { get; private set; }
    public string CoverageFileName { get; private set; }
    public string ConfigurationFilePath { get; private set; }
    public VanguardProvider(IDirectoryHelper directoryHelper, IFileHelper fileHelper, IEnvironment environment, IProfilersLocationProvider profilersLocationProvider, IStaticNativeInstrumenterFactory staticNativeInstrumenterFactory, IStaticNativeRuntimeProviderFactory staticNativeRuntimeProviderFactory);
    [CompilerGeneratedAttribute]
public sealed virtual IVanguard get_Vanguard();
    [CompilerGeneratedAttribute]
private void set_Vanguard(IVanguard value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_SessionName();
    [CompilerGeneratedAttribute]
private void set_SessionName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_PipePath();
    [CompilerGeneratedAttribute]
private void set_PipePath(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_SessionDirectory();
    [CompilerGeneratedAttribute]
private void set_SessionDirectory(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_CoverageFileName();
    [CompilerGeneratedAttribute]
private void set_CoverageFileName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ConfigurationFilePath();
    [CompilerGeneratedAttribute]
private void set_ConfigurationFilePath(string value);
    public sealed virtual void Initialize(DataCollectorConfiguration collectorConfiguration, IDataCollectionLogger logger);
    private void SetSessionInfo();
    private static string GetSessionName();
    private string GetCoverageFileName(DataCollectorConfiguration configuration);
    public sealed virtual string GenerateCoverageFileName();
    private void PrepareVanguard();
    private IList`1<string> GetEntryPoints();
    public sealed virtual void WriteConfigurationFiles();
    public sealed virtual void DeleteSessionDirectory();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
internal class Microsoft.VisualStudio.TestPlatform.Constansts : object {
    public static string ExtensionTypeName;
}
[AttributeUsageAttribute("1")]
internal class Microsoft.VisualStudio.TestPlatform.TestExtensionTypesAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type[] <Types>k__BackingField;
    public Type[] Types { get; }
    public TestExtensionTypesAttribute(Type[] types);
    [CompilerGeneratedAttribute]
public Type[] get_Types();
}
[AttributeUsageAttribute("1")]
internal class Microsoft.VisualStudio.TestPlatform.TestExtensionTypesV2Attribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ExtensionType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtensionIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ExtensionImplementation>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Version>k__BackingField;
    public string ExtensionType { get; }
    public string ExtensionIdentifier { get; }
    public Type ExtensionImplementation { get; }
    public int Version { get; }
    public TestExtensionTypesV2Attribute(string extensionType, string extensionIdentifier, Type extensionImplementation, int version);
    [CompilerGeneratedAttribute]
public string get_ExtensionType();
    [CompilerGeneratedAttribute]
public string get_ExtensionIdentifier();
    [CompilerGeneratedAttribute]
public Type get_ExtensionImplementation();
    [CompilerGeneratedAttribute]
public int get_Version();
}
public abstract class Microsoft.VisualStudio.TraceCollector.BaseDataCollector : DataCollector {
    private static List`1<BaseDataCollector> DataCollectors;
    private static string LogFile;
    [CompilerGeneratedAttribute]
private bool <IsDisposed>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataCollectionEvents <Events>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataCollectionLogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataCollectionSink <DataSink>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataCollectionAgentContext <AgentContext>k__BackingField;
    protected bool IsDisposed { get; private set; }
    internal IDataCollectionEvents Events { get; private set; }
    internal IDataCollectionLogger Logger { get; private set; }
    internal IDataCollectionSink DataSink { get; private set; }
    internal IDataCollectionAgentContext AgentContext { get; private set; }
    protected static ReadOnlyCollection`1<BaseDataCollector> Collectors { get; }
    private static BaseDataCollector();
    [CompilerGeneratedAttribute]
protected bool get_IsDisposed();
    [CompilerGeneratedAttribute]
private void set_IsDisposed(bool value);
    [CompilerGeneratedAttribute]
internal IDataCollectionEvents get_Events();
    [CompilerGeneratedAttribute]
private void set_Events(IDataCollectionEvents value);
    [CompilerGeneratedAttribute]
internal IDataCollectionLogger get_Logger();
    [CompilerGeneratedAttribute]
private void set_Logger(IDataCollectionLogger value);
    [CompilerGeneratedAttribute]
internal IDataCollectionSink get_DataSink();
    [CompilerGeneratedAttribute]
private void set_DataSink(IDataCollectionSink value);
    [CompilerGeneratedAttribute]
internal IDataCollectionAgentContext get_AgentContext();
    [CompilerGeneratedAttribute]
private void set_AgentContext(IDataCollectionAgentContext value);
    protected static ReadOnlyCollection`1<BaseDataCollector> get_Collectors();
    public virtual void Initialize(XmlElement configurationElement, DataCollectionEvents events, DataCollectionSink dataSink, DataCollectionLogger logger, DataCollectionEnvironmentContext environmentContext);
    private sealed virtual override IEnumerable`1<KeyValuePair`2<string, string>> Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.ITestExecutionEnvironmentSpecifier.GetTestExecutionEnvironmentVariables();
    internal void Initialize(XmlElement configurationElement, IDataCollectionEvents events, IDataCollectionSink dataSink, IDataCollectionLogger logger, IDataCollectionAgentContext agentContext);
    protected abstract virtual void OnInitialize(XmlElement configurationElement);
    protected abstract virtual IEnumerable`1<KeyValuePair`2<string, string>> GetEnvironmentVariables();
}
internal class Microsoft.VisualStudio.TraceCollector.DataCollectionEnvironmentContextWrapper : object {
    private DataCollectionEnvironmentContext _environmentContext;
    public DataCollectionContext SessionDataCollectionContext { get; }
    public DataCollectionEnvironmentContextWrapper(DataCollectionEnvironmentContext environmentContext);
    public sealed virtual DataCollectionContext get_SessionDataCollectionContext();
}
internal class Microsoft.VisualStudio.TraceCollector.DataCollectionEventsWrapper : object {
    private DataCollectionEvents _wrapped;
    public DataCollectionEventsWrapper(DataCollectionEvents wrapped);
    private sealed virtual override void Microsoft.VisualStudio.TraceCollector.IDataCollectionEvents.add_TestHostLaunched(EventHandler`1<TestHostLaunchedEventArgs> value);
    private sealed virtual override void Microsoft.VisualStudio.TraceCollector.IDataCollectionEvents.remove_TestHostLaunched(EventHandler`1<TestHostLaunchedEventArgs> value);
    private sealed virtual override void Microsoft.VisualStudio.TraceCollector.IDataCollectionEvents.add_SessionEnd(EventHandler`1<SessionEndEventArgs> value);
    private sealed virtual override void Microsoft.VisualStudio.TraceCollector.IDataCollectionEvents.remove_SessionEnd(EventHandler`1<SessionEndEventArgs> value);
    private sealed virtual override void Microsoft.VisualStudio.TraceCollector.IDataCollectionEvents.add_SessionStart(EventHandler`1<SessionStartEventArgs> value);
    private sealed virtual override void Microsoft.VisualStudio.TraceCollector.IDataCollectionEvents.remove_SessionStart(EventHandler`1<SessionStartEventArgs> value);
    private sealed virtual override void Microsoft.VisualStudio.TraceCollector.IDataCollectionEvents.add_TestCaseEnd(EventHandler`1<TestCaseEndEventArgs> value);
    private sealed virtual override void Microsoft.VisualStudio.TraceCollector.IDataCollectionEvents.remove_TestCaseEnd(EventHandler`1<TestCaseEndEventArgs> value);
    private sealed virtual override void Microsoft.VisualStudio.TraceCollector.IDataCollectionEvents.add_TestCaseStart(EventHandler`1<TestCaseStartEventArgs> value);
    private sealed virtual override void Microsoft.VisualStudio.TraceCollector.IDataCollectionEvents.remove_TestCaseStart(EventHandler`1<TestCaseStartEventArgs> value);
}
internal class Microsoft.VisualStudio.TraceCollector.DataCollectionLoggerWrapper : object {
    private DataCollectionLogger _wrapped;
    public DataCollectionLoggerWrapper(DataCollectionLogger wrapped);
    private sealed virtual override void Microsoft.VisualStudio.TraceCollector.IDataCollectionLogger.LogError(DataCollectionContext context, Exception exception);
    private sealed virtual override void Microsoft.VisualStudio.TraceCollector.IDataCollectionLogger.LogError(DataCollectionContext context, string text);
    private sealed virtual override void Microsoft.VisualStudio.TraceCollector.IDataCollectionLogger.LogError(DataCollectionContext context, string text, Exception exception);
    private sealed virtual override void Microsoft.VisualStudio.TraceCollector.IDataCollectionLogger.LogWarning(DataCollectionContext context, string text);
}
internal class Microsoft.VisualStudio.TraceCollector.DataCollectionSinkWrapper : object {
    private DataCollectionSink _wrapped;
    public DataCollectionSinkWrapper(DataCollectionSink wrapped);
    private sealed virtual override void Microsoft.VisualStudio.TraceCollector.IDataCollectionSink.add_SendFileCompleted(AsyncCompletedEventHandler value);
    private sealed virtual override void Microsoft.VisualStudio.TraceCollector.IDataCollectionSink.remove_SendFileCompleted(AsyncCompletedEventHandler value);
    private sealed virtual override void Microsoft.VisualStudio.TraceCollector.IDataCollectionSink.SendFileAsync(DataCollectionContext context, string path, bool deleteFile);
    private sealed virtual override void Microsoft.VisualStudio.TraceCollector.IDataCollectionSink.SendFileAsync(DataCollectionContext context, string path, string description, bool deleteFile);
    private sealed virtual override void Microsoft.VisualStudio.TraceCollector.IDataCollectionSink.SendFileAsync(FileTransferInformation fileInformation);
}
internal interface Microsoft.VisualStudio.TraceCollector.IDataCollectionAgentContext {
    public DataCollectionContext SessionDataCollectionContext { get; }
    public abstract virtual DataCollectionContext get_SessionDataCollectionContext();
}
internal interface Microsoft.VisualStudio.TraceCollector.IDataCollectionEvents {
    [CompilerGeneratedAttribute]
public abstract virtual void add_TestHostLaunched(EventHandler`1<TestHostLaunchedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TestHostLaunched(EventHandler`1<TestHostLaunchedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_SessionEnd(EventHandler`1<SessionEndEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SessionEnd(EventHandler`1<SessionEndEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_SessionStart(EventHandler`1<SessionStartEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SessionStart(EventHandler`1<SessionStartEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TestCaseEnd(EventHandler`1<TestCaseEndEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TestCaseEnd(EventHandler`1<TestCaseEndEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TestCaseStart(EventHandler`1<TestCaseStartEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TestCaseStart(EventHandler`1<TestCaseStartEventArgs> value);
}
internal interface Microsoft.VisualStudio.TraceCollector.IDataCollectionLogger {
    public abstract virtual void LogError(DataCollectionContext context, Exception exception);
    public abstract virtual void LogError(DataCollectionContext context, string text);
    public abstract virtual void LogError(DataCollectionContext context, string text, Exception exception);
    public abstract virtual void LogWarning(DataCollectionContext context, string text);
}
internal interface Microsoft.VisualStudio.TraceCollector.IDataCollectionSink {
    [CompilerGeneratedAttribute]
public abstract virtual void add_SendFileCompleted(AsyncCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SendFileCompleted(AsyncCompletedEventHandler value);
    public abstract virtual void SendFileAsync(DataCollectionContext context, string path, bool deleteFile);
    public abstract virtual void SendFileAsync(DataCollectionContext context, string path, string displayName, bool deleteFile);
    public abstract virtual void SendFileAsync(FileTransferInformation fileInformation);
}
internal class Microsoft.VisualStudio.TraceCollector.Interfaces.DynamicCoverageDataCollectorImplFactory : object {
    public sealed virtual IDynamicCoverageDataCollectorImpl CreateImpl(IEnvironment environment);
}
internal interface Microsoft.VisualStudio.TraceCollector.Interfaces.IDynamicCoverageDataCollectorImplFactory {
    public abstract virtual IDynamicCoverageDataCollectorImpl CreateImpl(IEnvironment environment);
}
internal interface Microsoft.VisualStudio.TraceCollector.Interfaces.IProcessJobObject {
    public abstract virtual void AddProcess(IntPtr handle);
}
internal interface Microsoft.VisualStudio.TraceCollector.Interfaces.ITraceLogger {
    public abstract virtual IList`1<KeyValuePair`2<string, string>> GetProfilerEnvVars();
}
internal interface Microsoft.VisualStudio.TraceCollector.ITestCaseContextEventArgs {
    public DataCollectionContext Context { get; }
    public bool IsChildTestCase { get; }
    public Guid TestCaseId { get; }
    public string TestCaseName { get; }
    public TestCase TestElement { get; }
    public abstract virtual DataCollectionContext get_Context();
    public abstract virtual bool get_IsChildTestCase();
    public abstract virtual Guid get_TestCaseId();
    public abstract virtual string get_TestCaseName();
    public abstract virtual TestCase get_TestElement();
}
internal class Microsoft.VisualStudio.TraceCollector.ProcessJobObject : object {
    private static bool Is32Bit;
    private IntPtr _jobHandle;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _disposed;
    private static ProcessJobObject();
    protected virtual override void Finalize();
    public sealed virtual void AddProcess(IntPtr handle);
    public sealed virtual void Dispose();
    private void CreateJobObject();
    private void Dispose(bool disposing);
}
internal static class Microsoft.VisualStudio.TraceCollector.Resources : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static CultureInfo <Culture>k__BackingField;
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static string AndSeparator { get; }
    internal static string ASPNetNotInstalled { get; }
    internal static string Both { get; }
    internal static string CodeCoverageCollectorDescription { get; }
    internal static string CodeCoverageCollectorFriendlyName { get; }
    internal static string CodeCoverageLoggingDisabled { get; }
    internal static string CodeCoverageRunSettingsProcessorFailed { get; }
    internal static string ErrorLaunchVanguard { get; }
    internal static string ErrorNoEntryPoint { get; }
    internal static string ErrorNoVanguard { get; }
    internal static string ErrorRegisterExecutable { get; }
    internal static string Error_ArgumentIsEmpty { get; }
    internal static string Error_ArgumentIsNegative { get; }
    internal static string Error_ArgumentNotTypeOf { get; }
    internal static string Error_ArgumentPropertyIsEmpty { get; }
    internal static string Error_ArgumentPropertyIsNegative { get; }
    internal static string Error_ArgumentPropertyIsNull { get; }
    internal static string Error_ArgumentPropertyNotTypeOf { get; }
    internal static string Error_ConditionIsFalse { get; }
    internal static string EventsMustHaveId { get; }
    internal static string FailedToCreateCopy { get; }
    internal static string FailedToCreateDirectory { get; }
    internal static string FailedToCreateFile { get; }
    internal static string FailedToDeleteTestImpactFile { get; }
    internal static string FailedToInitializeCodeCoverageDataCollector { get; }
    internal static string GeneralErrorLaunchVanguard { get; }
    internal static string GenericIISFailure { get; }
    internal static string IISAccessLocal { get; }
    internal static string IISAccessRemote { get; }
    internal static string IISNotInstalled { get; }
    internal static string InvalidConfig { get; }
    internal static string InvalidSettingType { get; }
    internal static string LabAgentTaskExecutionFailed { get; }
    internal static string MustSetEnvironmentVariables { get; }
    internal static string NoConfiguration { get; }
    internal static string NoLoggersConnected { get; }
    internal static string NoRunningEventFromVanguard { get; }
    internal static string NoWebRequestsMade { get; }
    internal static string ProfilerNotConnected { get; }
    internal static string ProfilerNotConnectedGlibc { get; }
    internal static string ProfilerNotConnectedNonGlibc { get; }
    internal static string TestImpactCollectorFriendlyName { get; }
    internal static string TestImpactData { get; }
    internal static string TestImpactLogFileFull { get; }
    internal static string TraceDebuggerCollectorFriendlyName { get; }
    internal static string TraceLogName { get; }
    internal static string UnableEnumerateIISService { get; }
    internal static string UnableSetVss { get; }
    internal static string VanguardConnectionTimeout { get; }
    internal static string VanguardNotFound { get; }
    internal static ResourceManager get_ResourceManager();
    [CompilerGeneratedAttribute]
internal static CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
internal static void set_Culture(CultureInfo value);
    internal static string GetResourceString(string resourceKey, string defaultValue);
    internal static string get_AndSeparator();
    internal static string get_ASPNetNotInstalled();
    internal static string get_Both();
    internal static string get_CodeCoverageCollectorDescription();
    internal static string get_CodeCoverageCollectorFriendlyName();
    internal static string get_CodeCoverageLoggingDisabled();
    internal static string get_CodeCoverageRunSettingsProcessorFailed();
    internal static string get_ErrorLaunchVanguard();
    internal static string get_ErrorNoEntryPoint();
    internal static string get_ErrorNoVanguard();
    internal static string get_ErrorRegisterExecutable();
    internal static string get_Error_ArgumentIsEmpty();
    internal static string get_Error_ArgumentIsNegative();
    internal static string get_Error_ArgumentNotTypeOf();
    internal static string get_Error_ArgumentPropertyIsEmpty();
    internal static string get_Error_ArgumentPropertyIsNegative();
    internal static string get_Error_ArgumentPropertyIsNull();
    internal static string get_Error_ArgumentPropertyNotTypeOf();
    internal static string get_Error_ConditionIsFalse();
    internal static string get_EventsMustHaveId();
    internal static string get_FailedToCreateCopy();
    internal static string get_FailedToCreateDirectory();
    internal static string get_FailedToCreateFile();
    internal static string get_FailedToDeleteTestImpactFile();
    internal static string get_FailedToInitializeCodeCoverageDataCollector();
    internal static string get_GeneralErrorLaunchVanguard();
    internal static string get_GenericIISFailure();
    internal static string get_IISAccessLocal();
    internal static string get_IISAccessRemote();
    internal static string get_IISNotInstalled();
    internal static string get_InvalidConfig();
    internal static string get_InvalidSettingType();
    internal static string get_LabAgentTaskExecutionFailed();
    internal static string get_MustSetEnvironmentVariables();
    internal static string get_NoConfiguration();
    internal static string get_NoLoggersConnected();
    internal static string get_NoRunningEventFromVanguard();
    internal static string get_NoWebRequestsMade();
    internal static string get_ProfilerNotConnected();
    internal static string get_ProfilerNotConnectedGlibc();
    internal static string get_ProfilerNotConnectedNonGlibc();
    internal static string get_TestImpactCollectorFriendlyName();
    internal static string get_TestImpactData();
    internal static string get_TestImpactLogFileFull();
    internal static string get_TraceDebuggerCollectorFriendlyName();
    internal static string get_TraceLogName();
    internal static string get_UnableEnumerateIISService();
    internal static string get_UnableSetVss();
    internal static string get_VanguardConnectionTimeout();
    internal static string get_VanguardNotFound();
}
internal class Microsoft.VisualStudio.TraceCollector.Telemetry.CollectorTelemetryManager : TelemetryManager {
    [NullableContextAttribute("1")]
internal CollectorTelemetryManager(ITelemetrySession telemetrySession);
    public sealed virtual void ModuleEvent(IEnumerable`1<KeyValuePair`2<string, object>> properties);
    public sealed virtual void SessionEvent(IEnumerable`1<KeyValuePair`2<string, object>> properties);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TraceCollector.Telemetry.CollectorTelemetryManagerFactory : object {
    private ICollectorTelemetryManager _telemetryManager;
    public CollectorTelemetryManagerFactory(ILogger logger);
    public ICollectorTelemetryManager Create();
}
internal interface Microsoft.VisualStudio.TraceCollector.Telemetry.ICollectorTelemetryManager {
    public abstract virtual void ModuleEvent(IEnumerable`1<KeyValuePair`2<string, object>> properties);
    public abstract virtual void SessionEvent(IEnumerable`1<KeyValuePair`2<string, object>> properties);
}
internal class Microsoft.VisualStudio.TraceCollector.Telemetry.NullCollectorTelemetryManager : object {
    public sealed virtual void Dispose();
    public sealed virtual void ModuleEvent(IEnumerable`1<KeyValuePair`2<string, object>> properties);
    public sealed virtual void SessionEvent(IEnumerable`1<KeyValuePair`2<string, object>> properties);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.VisualStudio.TraceCollector.Telemetry.TelemetryConstants : object {
    public static string Collector;
    public static string CollectorEventBase;
    public static string CollectorPropertyBase;
    public static string VanguardModuleEvent;
    public static string VanguardSessionEvent;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TraceCollector.Telemetry.TelemetryLogger : LoggerBase {
    private static string FilePathHashKey;
    private static string FileHashKey;
    private static string BlocksKey;
    private static string BlocksCoveredKey;
    private static string BlocksNotCoveredKey;
    private static string BlocksCoverageKey;
    private static string MethodsInstrumentedKey;
    private static string MethodsSkippedKey;
    private static string MethodsFailedKey;
    private static string ModuleInstrumentedKey;
    private static string ModuleSkippedKey;
    private static string ModuleFailedKey;
    private static string ModuleStaticInstrumentedKey;
    private static string ModuleStaticSkippedKey;
    private static string IsManagedKey;
    private static string ElapsedKey;
    private static string ElapsedStaticKey;
    private static string ModulesInstrumentedManagedKey;
    private static string ModulesInstrumentedNativeKey;
    private static string ModulesSkippedManagedKey;
    private static string ModulesSkippedNativeKey;
    private static string ModulesFailedManagedKey;
    private static string ModulesFailedNativeKey;
    private static string ModulesInstrumentedStaticNativeKey;
    private static string ModulesSkippedStaticNativeKey;
    private static string ProcessorCountKey;
    private static string FrameworkDescriptionKey;
    private static object _lock;
    private ICollectorTelemetryManager _telemetryManager;
    private ILogger _logger;
    private IDictionary`2<string, IDictionary`2<string, object>> _moduleProperties;
    private IDictionary`2<Guid, IList`1<string>> _coverageBufferIdMapping;
    internal TelemetryLogger(string sessionName, string pipePath, string configurationFilePath, DataCollectorConfiguration dataCollectorConfiguration, ILogger logger, IEnvironment environment, IStaticNativeInstrumenter staticNativeInstrumenter, IStaticNativeRuntimeProvider staticNativeRuntimeProvider, IDirectoryHelper directoryHelper, ICollectorTelemetryManager telemetryManager);
    private static TelemetryLogger();
    protected virtual void OnBufferClose(Guid identifier, Byte[] bytes);
    protected virtual void OnInstrumentation(string path, Guid id, Guid coverageBufferId, bool isDynamic, bool isManaged, bool isMixed, bool isPortablePdb, UInt32 imageSize, UInt32 imageLinkTime, int numberOfMethodsInstrumented, int numberOfMethodsSkipped, int numberOfMethodsFailed, TimeSpan elapsed, Dictionary`2<string, string> properties);
    protected virtual void OnInstrumentationSkipped(string path, ModuleSkipReason moduleSkipReason, bool isManaged);
    protected virtual void OnStaticInstrumentation(string path, UInt32 staticResult, TimeSpan staticElapsed, bool isManaged);
    protected virtual void OnStaticInstrumentationSkipped(string path, bool isManaged);
    protected virtual void OnShutdown();
    private static void AddOrReplace(IDictionary`2<string, object> properties, string key, object value, bool overwrite);
    private static void Aggregate(IDictionary`2<string, object> sessionProperties, IDictionary`2<string, object> properties, string key);
    private static void Increment(IDictionary`2<string, object> properties, string key);
    private static bool GetFlag(IDictionary`2<string, object> properties, string key);
    private static ulong GetUlongProperty(IDictionary`2<string, object> properties, string key);
    private IDictionary`2<string, object> InitializeModulePropertiesIfNeeded(string path);
    protected virtual void Dispose(bool disposing);
}
internal class Microsoft.VisualStudio.TraceCollector.TestCaseEndEventArgsWrapper : object {
    private TestCaseEndEventArgs _args;
    public DataCollectionContext Context { get; }
    public bool IsChildTestCase { get; }
    public Guid TestCaseId { get; }
    public string TestCaseName { get; }
    public TestCase TestElement { get; }
    public TestCaseEndEventArgsWrapper(TestCaseEndEventArgs e);
    public sealed virtual DataCollectionContext get_Context();
    public sealed virtual bool get_IsChildTestCase();
    public sealed virtual Guid get_TestCaseId();
    public sealed virtual string get_TestCaseName();
    public sealed virtual TestCase get_TestElement();
}
internal class Microsoft.VisualStudio.TraceCollector.TestCaseStartEventArgsWrapper : object {
    private TestCaseStartEventArgs _args;
    public DataCollectionContext Context { get; }
    public bool IsChildTestCase { get; }
    public Guid TestCaseId { get; }
    public string TestCaseName { get; }
    public TestCase TestElement { get; }
    public TestCaseStartEventArgsWrapper(TestCaseStartEventArgs e);
    public sealed virtual DataCollectionContext get_Context();
    public sealed virtual bool get_IsChildTestCase();
    public sealed virtual Guid get_TestCaseId();
    public sealed virtual string get_TestCaseName();
    public sealed virtual TestCase get_TestElement();
}
public static class Microsoft.VisualStudio.TraceCollector.Validate : object {
    [DebuggerStepThroughAttribute]
public static T NotNull(T arg, string parameterName);
    [DebuggerStepThroughAttribute]
public static string NotNullOrEmpty(string arg, string parameterName);
    [DebuggerStepThroughAttribute]
public static string NotNullOrWhiteSpace(string arg, string parameterName);
    [DebuggerStepThroughAttribute]
public static void NotNegative(int arg, string parameterName);
    [DebuggerStepThroughAttribute]
public static void True(bool condition);
    [DebuggerStepThroughAttribute]
public static void True(bool condition, string message);
    [DebuggerStepThroughAttribute]
public static void NotNegative(long arg, string parameterName);
    [DebuggerStepThroughAttribute]
public static void NotNullOrEmpty(IEnumerable`1<T> arg, string parameterName);
    public static void Assert(bool condition, string message);
    public static void Assert(string message);
}
[AttributeUsageAttribute("2048")]
internal class Microsoft.VisualStudio.TraceCollector.ValidatedNotNullAttribute : Attribute {
}
internal class Microsoft.VisualStudio.TraceCollector.VanguardCollector.DataCollectionCoverageLogger : object {
    private IDataCollectionLogger _logger;
    private DataCollectionContext _context;
    public DataCollectionCoverageLogger(IDataCollectionLogger logger, DataCollectionContext context);
    public sealed virtual void LogError(string msg);
    public sealed virtual void LogError(Exception exceptionToTrace);
    public sealed virtual void LogWarning(string msg);
    public sealed virtual void LogInfo(string msg);
    public sealed virtual void LogVerbose(string message);
}
internal class Microsoft.VisualStudio.TraceCollector.VanguardCollector.EqtTraceLogger : object {
    public sealed virtual void LogError(string message);
    public sealed virtual void LogError(Exception exceptionToTrace);
    public sealed virtual void LogInfo(string message);
    public sealed virtual void LogVerbose(string message);
    public sealed virtual void LogWarning(string message);
}
internal class Microsoft.VisualStudio.TraceCollector.VanguardCollector.EqtTraceWrapper : object {
    private TraceLevel _traceLevel;
    public EqtTraceWrapper(string traceLevel);
    public sealed virtual void LogError(Exception exceptionToTrace);
    public sealed virtual void LogError(string message);
    public sealed virtual void LogInfo(string message);
    public sealed virtual void LogVerbose(string message);
    public sealed virtual void LogWarning(string message);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
