[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.CodeAnalysis.CodeActions.XunitCodeAction : object {
    public static CodeAction Create(Func`2<CancellationToken, Task`1<Document>> createChangedDocument, string equivalenceKey, string title);
    public static CodeAction Create(Func`2<CancellationToken, Task`1<Document>> createChangedDocument, string equivalenceKey, string titleFormat, object arg0);
    public static CodeAction Create(Func`2<CancellationToken, Task`1<Document>> createChangedDocument, string equivalenceKey, string titleFormat, object arg0, object arg1);
    public static CodeAction Create(Func`2<CancellationToken, Task`1<Document>> createChangedDocument, string equivalenceKey, string titleFormat, object arg0, object arg1, object arg2);
    public static CodeAction Create(Func`2<CancellationToken, Task`1<Document>> createChangedDocument, string equivalenceKey, string titleFormat, Object[] args);
    public static CodeAction UseDifferentAssertMethod(string equivalenceKey, Document document, InvocationExpressionSyntax invocation, string replacementMethod);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[AttributeUsageAttribute("10368")]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2048")]
internal class System.Runtime.CompilerServices.CallerArgumentExpressionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public CallerArgumentExpressionAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.6.139.59561")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyConfiguration;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyVersion;
    internal static DateTime GitCommitDate;
    internal static string GitCommitId;
    internal static bool IsPrerelease;
    internal static bool IsPublicRelease;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static string RootNamespace;
    private static ThisAssembly();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Xunit.Analyzers.Fixes.AssertCollectionContainsShouldNotUseBoolCheckFixer : BatchedCodeFixProvider {
    public static string Key_UseAlternateAssert;
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.AssertCollectionContainsShouldNotUseBoolCheckFixer/<RegisterCodeFixesAsync>d__2")]
public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.AssertCollectionContainsShouldNotUseBoolCheckFixer/<UseContainsCheck>d__3")]
private static Task`1<Document> UseContainsCheck(Document document, InvocationExpressionSyntax invocation, string replacement, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Xunit.Analyzers.Fixes.AssertEmptyCollectionCheckShouldNotBeUsedFixer : BatchedCodeFixProvider {
    public static string Key_AddElementInspector;
    public static string Key_UseAssertEmpty;
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.AssertEmptyCollectionCheckShouldNotBeUsedFixer/<RegisterCodeFixesAsync>d__3")]
public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.AssertEmptyCollectionCheckShouldNotBeUsedFixer/<UseEmptyCheck>d__4")]
private static Task`1<Document> UseEmptyCheck(Document document, InvocationExpressionSyntax invocation, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.AssertEmptyCollectionCheckShouldNotBeUsedFixer/<AddElementInspector>d__5")]
private static Task`1<Document> AddElementInspector(Document document, InvocationExpressionSyntax invocation, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Xunit.Analyzers.Fixes.AssertEmptyShouldNotBeUsedForCollectionDoesNotContainCheckFixer : BatchedCodeFixProvider {
    public static string Key_UseAlternateAssert;
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.AssertEmptyShouldNotBeUsedForCollectionDoesNotContainCheckFixer/<RegisterCodeFixesAsync>d__2")]
public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.AssertEmptyShouldNotBeUsedForCollectionDoesNotContainCheckFixer/<UseCheck>d__3")]
private static Task`1<Document> UseCheck(Document document, InvocationExpressionSyntax invocation, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Xunit.Analyzers.Fixes.AssertEnumerableAnyCheckShouldNotBeUsedForCollectionContainsCheckFixer : BatchedCodeFixProvider {
    public static string Key_UseAlternateAssert;
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.AssertEnumerableAnyCheckShouldNotBeUsedForCollectionContainsCheckFixer/<RegisterCodeFixesAsync>d__2")]
public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.AssertEnumerableAnyCheckShouldNotBeUsedForCollectionContainsCheckFixer/<UseContainsCheck>d__3")]
private static Task`1<Document> UseContainsCheck(Document document, InvocationExpressionSyntax invocation, string replacement, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Xunit.Analyzers.Fixes.AssertEqualGenericShouldNotBeUsedForStringValueFixer : BatchedCodeFixProvider {
    public static string Key_UseStringAssertEqual;
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.AssertEqualGenericShouldNotBeUsedForStringValueFixer/<RegisterCodeFixesAsync>d__2")]
public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.AssertEqualGenericShouldNotBeUsedForStringValueFixer/<UseNonGenericStringEqualCheck>d__3")]
private static Task`1<Document> UseNonGenericStringEqualCheck(Document document, InvocationExpressionSyntax invocation, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Xunit.Analyzers.Fixes.AssertEqualLiteralValueShouldBeFirstFixer : BatchedCodeFixProvider {
    public static string Key_SwapArguments;
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.AssertEqualLiteralValueShouldBeFirstFixer/<RegisterCodeFixesAsync>d__2")]
public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.AssertEqualLiteralValueShouldBeFirstFixer/<SwapArguments>d__3")]
private static Task`1<Document> SwapArguments(Document document, InvocationExpressionSyntax invocation, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Xunit.Analyzers.Fixes.AssertEqualPrecisionShouldBeInRangeFixer : BatchedCodeFixProvider {
    public static string Key_UsePrecision;
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.AssertEqualPrecisionShouldBeInRangeFixer/<RegisterCodeFixesAsync>d__2")]
public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.AssertEqualPrecisionShouldBeInRangeFixer/<UseRecommendedPrecision>d__3")]
private static Task`1<Document> UseRecommendedPrecision(Document document, ArgumentSyntax precisionArgument, int replacement, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Xunit.Analyzers.Fixes.AssertEqualShouldNotBeUsedForBoolLiteralCheckFixer : BatchedCodeFixProvider {
    public static string Key_UseAlternateAssert;
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.AssertEqualShouldNotBeUsedForBoolLiteralCheckFixer/<RegisterCodeFixesAsync>d__2")]
public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.AssertEqualShouldNotBeUsedForBoolLiteralCheckFixer/<UseBoolCheckAsync>d__3")]
private static Task`1<Document> UseBoolCheckAsync(Document document, InvocationExpressionSyntax invocation, string replacement, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Xunit.Analyzers.Fixes.AssertEqualShouldNotBeUsedForCollectionSizeCheckFixer : BatchedCodeFixProvider {
    public static string Key_UseAlternateAssert;
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.AssertEqualShouldNotBeUsedForCollectionSizeCheckFixer/<RegisterCodeFixesAsync>d__2")]
public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.AssertEqualShouldNotBeUsedForCollectionSizeCheckFixer/<UseCollectionSizeAssertionAsync>d__3")]
private static Task`1<Document> UseCollectionSizeAssertionAsync(Document document, InvocationExpressionSyntax invocation, string replacement, CancellationToken cancellationToken);
    private static ExpressionSyntax GetExpressionSyntax(InvocationExpressionSyntax invocation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Xunit.Analyzers.Fixes.AssertEqualShouldNotBeUsedForNullCheckFixer : BatchedCodeFixProvider {
    public static string Key_UseAlternateAssert;
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.AssertEqualShouldNotBeUsedForNullCheckFixer/<RegisterCodeFixesAsync>d__2")]
public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.AssertEqualShouldNotBeUsedForNullCheckFixer/<UseNullCheckAsync>d__3")]
private static Task`1<Document> UseNullCheckAsync(Document document, InvocationExpressionSyntax invocation, string replacement, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Xunit.Analyzers.Fixes.AssertEqualsShouldNotBeUsedFixer : BatchedCodeFixProvider {
    public static string Key_UseAlternateAssert;
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.AssertEqualsShouldNotBeUsedFixer/<RegisterCodeFixesAsync>d__2")]
public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Xunit.Analyzers.Fixes.AssertIsTypeShouldNotBeUsedForAbstractTypeFixer : BatchedCodeFixProvider {
    public static string Key_UseAlternateAssert;
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.AssertIsTypeShouldNotBeUsedForAbstractTypeFixer/<RegisterCodeFixesAsync>d__2")]
public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.AssertIsTypeShouldNotBeUsedForAbstractTypeFixer/<UseIsAssignableFrom>d__3")]
private static Task`1<Document> UseIsAssignableFrom(Document document, SimpleNameSyntax simpleName, string replacementName, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Xunit.Analyzers.Fixes.AssertNullShouldNotBeCalledOnValueTypesFixer : BatchedCodeFixProvider {
    public static string Key_RemoveAssert;
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.AssertNullShouldNotBeCalledOnValueTypesFixer/<RegisterCodeFixesAsync>d__2")]
public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.AssertNullShouldNotBeCalledOnValueTypesFixer/<RemoveCall>d__3")]
private static Task`1<Document> RemoveCall(Document document, ExpressionStatementSyntax call, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Xunit.Analyzers.Fixes.AssertRegexMatchShouldNotUseBoolLiteralCheckFixer : BatchedCodeFixProvider {
    public static string Key_UseAlternateAssert;
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.AssertRegexMatchShouldNotUseBoolLiteralCheckFixer/<RegisterCodeFixesAsync>d__2")]
public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.AssertRegexMatchShouldNotUseBoolLiteralCheckFixer/<UseRegexCheckAsync>d__3")]
private static Task`1<Document> UseRegexCheckAsync(Document document, InvocationExpressionSyntax invocation, string replacement, bool isStatic, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Xunit.Analyzers.Fixes.AssertSameShouldNotBeCalledOnValueTypesFixer : BatchedCodeFixProvider {
    public static string Key_UseAlternateAssert;
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.AssertSameShouldNotBeCalledOnValueTypesFixer/<RegisterCodeFixesAsync>d__2")]
public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Xunit.Analyzers.Fixes.AssertSingleShouldBeUsedForSingleParameterFixer : BatchedCodeFixProvider {
    private static string DefaultParameterName;
    public static string Key_UseSingleMethod;
    private static string GetSafeVariableName(string targetParameterName, ImmutableHashSet`1<string> localSymbols);
    [IteratorStateMachineAttribute("Xunit.Analyzers.Fixes.AssertSingleShouldBeUsedForSingleParameterFixer/<GetLambdaStatements>d__4")]
private static IEnumerable`1<SyntaxNode> GetLambdaStatements(SimpleLambdaExpressionSyntax lambdaExpression);
    private static SyntaxNode GetMethodInvocation(IdentifierNameSyntax methodExpression, string parameterName);
    private static LocalDeclarationStatementSyntax OneItemVariableStatement(string parameterName, InvocationExpressionSyntax replacementNode);
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.AssertSingleShouldBeUsedForSingleParameterFixer/<RegisterCodeFixesAsync>d__7")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.AssertSingleShouldBeUsedForSingleParameterFixer/<UseSingleMethod>d__8")]
private static Task`1<Document> UseSingleMethod(Document document, InvocationExpressionSyntax invocation, string replacementMethod, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Xunit.Analyzers.Fixes.AssertStringEqualityCheckShouldNotUseBoolCheckFixer : BatchedCodeFixProvider {
    public static string Key_UseAlternateAssert;
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.AssertStringEqualityCheckShouldNotUseBoolCheckFixer/<RegisterCodeFixesAsync>d__2")]
public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.AssertStringEqualityCheckShouldNotUseBoolCheckFixer/<UseEqualCheck>d__3")]
private static Task`1<Document> UseEqualCheck(Document document, InvocationExpressionSyntax invocation, string replacement, bool isStaticMethodCall, Nullable`1<bool> ignoreCase, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Xunit.Analyzers.Fixes.AssertSubstringCheckShouldNotUseBoolCheckFixer : BatchedCodeFixProvider {
    public static string Key_UseAlternateAssert;
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.AssertSubstringCheckShouldNotUseBoolCheckFixer/<RegisterCodeFixesAsync>d__2")]
public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.AssertSubstringCheckShouldNotUseBoolCheckFixer/<UseSubstringCheckAsync>d__3")]
private static Task`1<Document> UseSubstringCheckAsync(Document document, InvocationExpressionSyntax invocation, string replacement, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Xunit.Analyzers.Fixes.AssertThrowsShouldNotBeUsedForAsyncThrowsCheckFixer : BatchedCodeFixProvider {
    public static string Key_UseAlternateAssert;
    private static ExpressionSyntax GetAsyncAssertionInvocation(InvocationExpressionSyntax invocation, MemberAccessExpressionSyntax memberAccess, string replacement);
    private static SimpleNameSyntax GetAsyncAssertionMethodName(MemberAccessExpressionSyntax memberAccess, string replacement);
    private static IFunctionFixer GetFunctionFixer(SyntaxNode node, SemanticModel semanticModel, DocumentEditor editor);
    private static SyntaxNode GetParentFunction(InvocationExpressionSyntax invocation);
    private static bool IsFunction(SyntaxNode node);
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.AssertThrowsShouldNotBeUsedForAsyncThrowsCheckFixer/<RegisterCodeFixesAsync>d__7")]
public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [NullableContextAttribute("2")]
private static bool ShouldFixParentFunction(IFunctionFixer parentFunctionFixer, IFunctionFixer childFunctionFixer, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.AssertThrowsShouldNotBeUsedForAsyncThrowsCheckFixer/<UseAsyncAssertion>d__9")]
private static Task`1<Document> UseAsyncAssertion(Document document, InvocationExpressionSyntax invocation, string replacement, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Xunit.Analyzers.Fixes.AsyncAssertsShouldBeAwaitedFixer : BatchedCodeFixProvider {
    public static string Key_AddAwait;
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.AsyncAssertsShouldBeAwaitedFixer/<RegisterCodeFixesAsync>d__2")]
public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.AsyncAssertsShouldBeAwaitedFixer/<UseAsyncAwait>d__3")]
private static Task`1<Document> UseAsyncAwait(Document document, InvocationExpressionSyntax invocation, MethodDeclarationSyntax method, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Xunit.Analyzers.Fixes.AsyncHelper : object {
    private static TypeSyntax ConvertActionTypeToAsyncFunctionType(INamedTypeSymbol declarationTypeSymbol, Compilation compilation, DocumentEditor editor);
    private static TypeSyntax ConvertFunctionTypeToAsyncFunctionType(INamedTypeSymbol declarationTypeSymbol, Compilation compilation, DocumentEditor editor);
    public static SyntaxTokenList GetModifiersWithAsyncKeywordAdded(SyntaxTokenList modifiers);
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.AsyncHelper/<GetAsyncReturnType>d__3")]
public static Task`1<TypeSyntax> GetAsyncReturnType(TypeSyntax returnType, DocumentEditor editor, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.AsyncHelper/<GetAsyncSystemDelegateType>d__4")]
public static Task`1<TypeSyntax> GetAsyncSystemDelegateType(VariableDeclarationSyntax declaration, AnonymousFunctionExpressionSyntax anonymousFunction, DocumentEditor editor, CancellationToken cancellationToken);
    private static bool IsSystemActionType(INamedTypeSymbol typeSymbol, Compilation compilation);
    private static bool IsSystemFunctionType(INamedTypeSymbol typeSymbol, Compilation compilation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Xunit.Analyzers.Fixes.BatchedCodeFixProvider : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    protected BatchedCodeFixProvider(String[] diagnostics);
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public sealed virtual FixAllProvider GetFixAllProvider();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Xunit.Analyzers.Fixes.BatchedMemberFixProvider : BatchedCodeFixProvider {
    protected BatchedMemberFixProvider(String[] diagnostics);
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.BatchedMemberFixProvider/<RegisterCodeFixesAsync>d__1")]
public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    public abstract virtual Task RegisterCodeFixesAsync(CodeFixContext context, ISymbol member);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Xunit.Analyzers.Fixes.BooleanAssertsShouldNotBeNegatedFixer : BatchedCodeFixProvider {
    public static string Key_UseSuggestedAssert;
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.BooleanAssertsShouldNotBeNegatedFixer/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.BooleanAssertsShouldNotBeNegatedFixer/<UseSuggestedAssert>d__3")]
private static Task`1<Document> UseSuggestedAssert(Document document, InvocationExpressionSyntax invocation, string replacement, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Xunit.Analyzers.Fixes.BooleanAssertsShouldNotBeUsedForSimpleEqualityCheckBooleanFixer : BatchedCodeFixProvider {
    public static string Key_UseSuggestedAssert;
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.BooleanAssertsShouldNotBeUsedForSimpleEqualityCheckBooleanFixer/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.BooleanAssertsShouldNotBeUsedForSimpleEqualityCheckBooleanFixer/<UseSuggestedAssert>d__3")]
private static Task`1<Document> UseSuggestedAssert(Document document, InvocationExpressionSyntax invocation, string replacement, bool isLeftLiteral, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Xunit.Analyzers.Fixes.BooleanAssertsShouldNotBeUsedForSimpleEqualityCheckNonBooleanFixer : BatchedCodeFixProvider {
    public static string Key_UseSuggestedAssert;
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.BooleanAssertsShouldNotBeUsedForSimpleEqualityCheckNonBooleanFixer/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.BooleanAssertsShouldNotBeUsedForSimpleEqualityCheckNonBooleanFixer/<UseSuggestedAssert>d__3")]
private static Task`1<Document> UseSuggestedAssert(Document document, InvocationExpressionSyntax invocation, string replacement, bool isLeftLiteral, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Xunit.Analyzers.Fixes.ClassDataAttributeMustPointAtValidClassFixer : BatchedCodeFixProvider {
    public static string Key_FixDataClass;
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.ClassDataAttributeMustPointAtValidClassFixer/<RegisterCodeFixesAsync>d__2")]
public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.ClassDataAttributeMustPointAtValidClassFixer/<FixClass>d__3")]
private static Task`1<Solution> FixClass(Solution solution, INamedTypeSymbol typeSymbol, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Xunit.Analyzers.Fixes.CodeAnalysisExtensions : object {
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.CodeAnalysisExtensions/<AddConstructor>d__0")]
[ExtensionAttribute]
public static Task`1<Document> AddConstructor(Document document, ClassDeclarationSyntax declaration, string typeDisplayName, string typeName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.CodeAnalysisExtensions/<ChangeAccessibility>d__1")]
[ExtensionAttribute]
public static Task`1<Document> ChangeAccessibility(Document document, SyntaxNode declaration, Accessibility accessibility, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.CodeAnalysisExtensions/<ChangeMemberAccessibility>d__2")]
[ExtensionAttribute]
public static Task`1<Solution> ChangeMemberAccessibility(Solution solution, ISymbol memberSymbol, Accessibility accessibility, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.CodeAnalysisExtensions/<ChangeMemberStaticModifier>d__3")]
[ExtensionAttribute]
public static Task`1<Solution> ChangeMemberStaticModifier(Solution solution, ISymbol memberSymbol, bool isStatic, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.CodeAnalysisExtensions/<ChangeMemberType>d__4")]
[ExtensionAttribute]
public static Task`1<Solution> ChangeMemberType(Solution solution, ISymbol memberSymbol, ITypeSymbol type, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.CodeAnalysisExtensions/<RemoveNode>d__5")]
[ExtensionAttribute]
public static Task`1<Document> RemoveNode(Document document, SyntaxNode node, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.CodeAnalysisExtensions/<ExtractNodeFromParent>d__6")]
[ExtensionAttribute]
public static Task`1<Document> ExtractNodeFromParent(Document document, SyntaxNode node, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.CodeAnalysisExtensions/<SetBaseClass>d__7")]
[ExtensionAttribute]
public static Task`1<Document> SetBaseClass(Document document, ClassDeclarationSyntax declaration, string baseType, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Xunit.Analyzers.Fixes.CollectionDefinitionClassesMustBePublicFixer : BatchedCodeFixProvider {
    public static string Key_MakeCollectionDefinitionClassPublic;
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.CollectionDefinitionClassesMustBePublicFixer/<RegisterCodeFixesAsync>d__2")]
public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Analyzers.Fixes.ConvertAttributeCodeAction : CodeAction {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private SyntaxList`1<AttributeListSyntax> attributeLists;
    private Document document;
    private string fromTypeName;
    private string toTypeName;
    [CompilerGeneratedAttribute]
private string <EquivalenceKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    public string EquivalenceKey { get; }
    public string Title { get; }
    public ConvertAttributeCodeAction(string title, string equivalenceKey, Document document, SyntaxList`1<AttributeListSyntax> attributeLists, string fromTypeName, string toTypeName);
    [CompilerGeneratedAttribute]
public virtual string get_EquivalenceKey();
    [CompilerGeneratedAttribute]
public virtual string get_Title();
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.ConvertAttributeCodeAction/<GetChangedDocumentAsync>d__11")]
protected virtual Task`1<Document> GetChangedDocumentAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Xunit.Analyzers.Fixes.ConvertToFactFix : BatchedCodeFixProvider {
    public static string Key_ConvertToFact;
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.ConvertToFactFix/<RegisterCodeFixesAsync>d__2")]
public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Xunit.Analyzers.Fixes.ConvertToTheoryFix : BatchedCodeFixProvider {
    public static string Key_ConvertToTheory;
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.ConvertToTheoryFix/<RegisterCodeFixesAsync>d__2")]
public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Xunit.Analyzers.Fixes.CrossAppDomainClassesMustBeLongLivedMarshalByRefObjectFixer : BatchedCodeFixProvider {
    public static string Key_SetBaseType;
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.CrossAppDomainClassesMustBeLongLivedMarshalByRefObjectFixer/<RegisterCodeFixesAsync>d__2")]
public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Xunit.Analyzers.Fixes.DataAttributeShouldBeUsedOnATheoryFixer : BatchedCodeFixProvider {
    public static string Key_MarkAsTheory;
    public static string Key_RemoveDataAttributes;
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.DataAttributeShouldBeUsedOnATheoryFixer/<RegisterCodeFixesAsync>d__3")]
public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.DataAttributeShouldBeUsedOnATheoryFixer/<MarkAsTheoryAsync>d__4")]
private static Task`1<Document> MarkAsTheoryAsync(Document document, MethodDeclarationSyntax methodDeclaration, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Xunit.Analyzers.Fixes.DoNotUseAsyncVoidForTestMethodsFixer : BatchedMemberFixProvider {
    public static string Key_ConvertToTask;
    public static string Key_ConvertToValueTask;
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.DoNotUseAsyncVoidForTestMethodsFixer/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context, ISymbol member);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Xunit.Analyzers.Fixes.DoNotUseConfigureAwaitFixer : BatchedCodeFixProvider {
    public static string Key_RemoveConfigureAwait;
    public static string Key_ReplaceArgumentValue;
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.DoNotUseConfigureAwaitFixer/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Xunit.Analyzers.Fixes.FactMethodMustNotHaveParametersFixer : BatchedCodeFixProvider {
    public static string Key_RemoveParameters;
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.FactMethodMustNotHaveParametersFixer/<RegisterCodeFixesAsync>d__2")]
public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.FactMethodMustNotHaveParametersFixer/<RemoveParameters>d__3")]
private static Task`1<Document> RemoveParameters(Document document, ParameterListSyntax parameterListSyntax, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Xunit.Analyzers.Fixes.FactMethodShouldNotHaveTestDataFixer : BatchedCodeFixProvider {
    public static string Key_RemoveDataAttributes;
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.FactMethodShouldNotHaveTestDataFixer/<RegisterCodeFixesAsync>d__2")]
public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Xunit.Analyzers.Fixes.InlineDataMustMatchTheoryParameters_ExtraValueFixer : BatchedCodeFixProvider {
    public static string Key_AddTheoryParameter;
    public static string Key_RemoveExtraDataValue;
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.InlineDataMustMatchTheoryParameters_ExtraValueFixer/<RegisterCodeFixesAsync>d__3")]
public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.InlineDataMustMatchTheoryParameters_ExtraValueFixer/<AddTheoryParameter>d__4")]
private static Task`1<Document> AddTheoryParameter(Document document, MethodDeclarationSyntax method, SpecialType parameterSpecialType, string parameterName, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Xunit.Analyzers.Fixes.InlineDataMustMatchTheoryParameters_NullShouldNotBeUsedForIncompatibleParameterFixer : BatchedCodeFixProvider {
    public static string Key_MakeParameterNullable;
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.InlineDataMustMatchTheoryParameters_NullShouldNotBeUsedForIncompatibleParameterFixer/<RegisterCodeFixesAsync>d__2")]
public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.InlineDataMustMatchTheoryParameters_NullShouldNotBeUsedForIncompatibleParameterFixer/<MakeParameterNullable>d__3")]
private static Task`1<Document> MakeParameterNullable(Document document, MethodDeclarationSyntax method, int parameterIndex, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Xunit.Analyzers.Fixes.InlineDataMustMatchTheoryParameters_TooFewValuesFixer : BatchedCodeFixProvider {
    public static string Key_AddDefaultValues;
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.InlineDataMustMatchTheoryParameters_TooFewValuesFixer/<RegisterCodeFixesAsync>d__2")]
public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.InlineDataMustMatchTheoryParameters_TooFewValuesFixer/<AddDefaultValues>d__3")]
private static Task`1<Document> AddDefaultValues(Document document, AttributeSyntax attribute, MethodDeclarationSyntax method, ParameterArrayStyleType arrayStyle, CancellationToken cancellationToken);
    private static SyntaxNode CreateDefaultValueSyntax(DocumentEditor editor, TypeSyntax type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Xunit.Analyzers.Fixes.InlineDataShouldBeUniqueWithinTheoryFixer : BatchedCodeFixProvider {
    public static string Key_RemoveDuplicateInlineData;
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.InlineDataShouldBeUniqueWithinTheoryFixer/<RegisterCodeFixesAsync>d__2")]
public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.InlineDataShouldBeUniqueWithinTheoryFixer/<RemoveInlineDataDuplicate>d__3")]
private static Task`1<Document> RemoveInlineDataDuplicate(Document document, AttributeSyntax attributeDuplicate, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Xunit.Analyzers.Fixes.LocalFunctionsCannotBeTestFunctionsFixer : BatchedCodeFixProvider {
    public static string Key_RemoveAttribute;
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.LocalFunctionsCannotBeTestFunctionsFixer/<RegisterCodeFixesAsync>d__2")]
public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Xunit.Analyzers.Fixes.MemberDataShouldReferenceValidMember_ExtraValueFixer : BatchedCodeFixProvider {
    public static string Key_AddMethodParameter;
    public static string Key_RemoveExtraDataValue;
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.MemberDataShouldReferenceValidMember_ExtraValueFixer/<RegisterCodeFixesAsync>d__3")]
public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.MemberDataShouldReferenceValidMember_ExtraValueFixer/<AddMethodParameter>d__4")]
private static Task`1<Document> AddMethodParameter(Document document, MethodDeclarationSyntax method, SpecialType parameterSpecialType, string parameterName, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Xunit.Analyzers.Fixes.MemberDataShouldReferenceValidMember_NameOfFixer : BatchedCodeFixProvider {
    public static string Key_UseNameof;
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.MemberDataShouldReferenceValidMember_NameOfFixer/<RegisterCodeFixesAsync>d__2")]
public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.MemberDataShouldReferenceValidMember_NameOfFixer/<UseNameOf>d__3")]
private static Task`1<Document> UseNameOf(Document document, LiteralExpressionSyntax memberNameExpression, INamedTypeSymbol memberType, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Xunit.Analyzers.Fixes.MemberDataShouldReferenceValidMember_NullShouldNotBeUsedForIncompatibleParameterFixer : BatchedCodeFixProvider {
    public static string Key_MakeParameterNullable;
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.MemberDataShouldReferenceValidMember_NullShouldNotBeUsedForIncompatibleParameterFixer/<RegisterCodeFixesAsync>d__2")]
public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.MemberDataShouldReferenceValidMember_NullShouldNotBeUsedForIncompatibleParameterFixer/<MakeParameterNullable>d__3")]
private static Task`1<Document> MakeParameterNullable(Document document, MethodDeclarationSyntax method, int parameterIndex, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Xunit.Analyzers.Fixes.MemberDataShouldReferenceValidMember_ParamsForNonMethodFixer : BatchedCodeFixProvider {
    public static string Key_RemoveArgumentsFromMemberData;
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.MemberDataShouldReferenceValidMember_ParamsForNonMethodFixer/<RegisterCodeFixesAsync>d__2")]
public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.MemberDataShouldReferenceValidMember_ParamsForNonMethodFixer/<RemoveUnneededArguments>d__3")]
private static Task`1<Document> RemoveUnneededArguments(Document document, AttributeSyntax attribute, TextSpan span, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Xunit.Analyzers.Fixes.MemberDataShouldReferenceValidMember_ReturnTypeFixer : BatchedMemberFixProvider {
    public static string Key_ChangeMemberReturnType_ObjectArray;
    public static string Key_ChangeMemberReturnType_ITheoryDataRow;
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.MemberDataShouldReferenceValidMember_ReturnTypeFixer/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context, ISymbol member);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Xunit.Analyzers.Fixes.MemberDataShouldReferenceValidMember_StaticFixer : BatchedMemberFixProvider {
    public static string Key_MakeMemberStatic;
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context, ISymbol member);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Xunit.Analyzers.Fixes.MemberDataShouldReferenceValidMember_VisibilityFixer : BatchedMemberFixProvider {
    public static string Key_MakeMemberPublic;
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context, ISymbol member);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Xunit.Analyzers.Fixes.PublicMethodShouldBeMarkedAsTestFixer : BatchedCodeFixProvider {
    public static string Key_ConvertToFact;
    public static string Key_ConvertToTheory;
    public static string Key_MakeMethodInternal;
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.PublicMethodShouldBeMarkedAsTestFixer/<RegisterCodeFixesAsync>d__4")]
public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.PublicMethodShouldBeMarkedAsTestFixer/<AddAttribute>d__5")]
private static Task`1<Document> AddAttribute(Document document, MethodDeclarationSyntax methodDeclaration, string type, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Analyzers.Fixes.RemoveAttributesOfTypeCodeAction : CodeAction {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private SyntaxList`1<AttributeListSyntax> attributeLists;
    private string attributeType;
    private Document document;
    private bool exactMatch;
    [CompilerGeneratedAttribute]
private string <EquivalenceKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    public string EquivalenceKey { get; }
    public string Title { get; }
    public RemoveAttributesOfTypeCodeAction(string title, string equivalenceKey, Document document, SyntaxList`1<AttributeListSyntax> attributeLists, string attributeType, bool exactMatch);
    [CompilerGeneratedAttribute]
public virtual string get_EquivalenceKey();
    [CompilerGeneratedAttribute]
public virtual string get_Title();
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.RemoveAttributesOfTypeCodeAction/<GetChangedDocumentAsync>d__11")]
protected virtual Task`1<Document> GetChangedDocumentAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Xunit.Analyzers.Fixes.RemoveMethodParameterFix : BatchedCodeFixProvider {
    public static string Key_RemoveParameter;
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.RemoveMethodParameterFix/<RegisterCodeFixesAsync>d__2")]
public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Xunit.Analyzers.Fixes.SerializableClassMustHaveParameterlessConstructorFixer : BatchedCodeFixProvider {
    public static string Key_GenerateOrUpdateConstructor;
    private static LiteralExpressionSyntax obsoleteText;
    private static SerializableClassMustHaveParameterlessConstructorFixer();
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.SerializableClassMustHaveParameterlessConstructorFixer/<RegisterCodeFixesAsync>d__3")]
public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.SerializableClassMustHaveParameterlessConstructorFixer/<CreateOrUpdateConstructor>d__4")]
private static Task`1<Document> CreateOrUpdateConstructor(Document document, ClassDeclarationSyntax declaration, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Xunit.Analyzers.Fixes.TestClassCannotBeNestedInGenericClassFixer : BatchedCodeFixProvider {
    public static string Key_ExtractTestClass;
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.TestClassCannotBeNestedInGenericClassFixer/<RegisterCodeFixesAsync>d__2")]
public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Xunit.Analyzers.Fixes.TestClassMustBePublicFixer : BatchedCodeFixProvider {
    public static string Key_MakeTestClassPublic;
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.TestClassMustBePublicFixer/<RegisterCodeFixesAsync>d__2")]
public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Xunit.Analyzers.Fixes.TestClassShouldHaveTFixtureArgumentFixer : BatchedCodeFixProvider {
    public static string Key_GenerateConstructor;
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.TestClassShouldHaveTFixtureArgumentFixer/<RegisterCodeFixesAsync>d__2")]
public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Xunit.Analyzers.Fixes.TestMethodMustNotHaveMultipleFactAttributesFixer : BatchedCodeFixProvider {
    public static string Key_KeepAttribute(string simpleTypeName);
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.TestMethodMustNotHaveMultipleFactAttributesFixer/<RegisterCodeFixesAsync>d__2")]
public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static string GetAttributeSimpleName(string attributeType);
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.TestMethodMustNotHaveMultipleFactAttributesFixer/<RemoveAttributes>d__4")]
private static Task`1<Document> RemoveAttributes(Document document, MethodDeclarationSyntax methodDeclaration, IReadOnlyList`1<string> attributeTypesToConsider, string attributeTypeToKeep, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Xunit.Analyzers.Fixes.TestMethodShouldNotBeSkippedFixer : BatchedCodeFixProvider {
    public static string Key_RemoveSkipArgument;
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.TestMethodShouldNotBeSkippedFixer/<RegisterCodeFixesAsync>d__2")]
public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.TestMethodShouldNotBeSkippedFixer/<RemoveArgument>d__3")]
private static Task`1<Document> RemoveArgument(Document document, AttributeArgumentSyntax argument, CancellationToken ct);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Xunit.Analyzers.Fixes.TheoryMethodCannotHaveDefaultParameterFixer : BatchedCodeFixProvider {
    public static string Key_RemoveParameterDefault;
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.TheoryMethodCannotHaveDefaultParameterFixer/<RegisterCodeFixesAsync>d__2")]
public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Xunit.Analyzers.Fixes.UseAssertFailInsteadOfBooleanAssertFixer : BatchedCodeFixProvider {
    public static string Key_UseAssertFail;
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.UseAssertFailInsteadOfBooleanAssertFixer/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.UseAssertFailInsteadOfBooleanAssertFixer/<UseAssertFail>d__3")]
private static Task`1<Document> UseAssertFail(Document document, InvocationExpressionSyntax invocation, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Xunit.Analyzers.Fixes.UseGenericOverloadFix : BatchedCodeFixProvider {
    public static string Key_UseAlternateAssert;
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.UseGenericOverloadFix/<RegisterCodeFixesAsync>d__2")]
public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Xunit.Analyzers.Fixes.UseGenericOverloadFix/<RemoveTypeofInvocationAndAddGenericTypeAsync>d__3")]
private static Task`1<Document> RemoveTypeofInvocationAndAddGenericTypeAsync(Document document, InvocationExpressionSyntax invocation, MemberAccessExpressionSyntax memberAccess, TypeOfExpressionSyntax typeOfExpression, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Xunit.Guard : object {
    public static T ArgumentNotNull(T argValue, string argName);
    public static T ArgumentNotNullOrEmpty(T argValue, string argName);
    public static void ArgumentValid(string message, bool test, string argName);
    public static void ArgumentValid(Func`1<string> messageFunc, bool test, string argName);
}
