[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class DuckDB.NET.Data.ConnectionString.DuckDBConnectionString : object {
    [CompilerGeneratedAttribute]
private string <DataSource>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InMemory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Shared>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, string> <Configuration>k__BackingField;
    public string DataSource { get; }
    public bool InMemory { get; }
    public bool Shared { get; }
    public IReadOnlyDictionary`2<string, string> Configuration { get; }
    public DuckDBConnectionString(string dataSource, bool inMemory, bool shared, IReadOnlyDictionary`2<string, string> configuration);
    [CompilerGeneratedAttribute]
public string get_DataSource();
    [CompilerGeneratedAttribute]
public bool get_InMemory();
    [CompilerGeneratedAttribute]
public bool get_Shared();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, string> get_Configuration();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DuckDB.NET.Data.DuckDBAppender : object {
    private static ulong DuckDBVectorSize;
    private bool closed;
    private DuckDBAppender nativeAppender;
    private string qualifiedTableName;
    private ulong rowCount;
    private DuckDBLogicalType[] logicalTypes;
    private DuckDBDataChunk dataChunk;
    private VectorDataWriterBase[] vectorWriters;
    internal DuckDBAppender(DuckDBAppender appender, string qualifiedTableName);
    private static DuckDBAppender();
    public DuckDBAppenderRow CreateRow();
    public void Close();
    public sealed virtual void Dispose();
    private void InitVectorWriters();
    private void AppendDataChunk();
    [DoesNotReturnAttribute]
[StackTraceHiddenAttribute]
internal static void ThrowLastError(DuckDBAppender appender);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DuckDB.NET.Data.DuckDBAppenderRow : object {
    private int columnIndex;
    private string qualifiedTableName;
    private VectorDataWriterBase[] vectorWriters;
    private int rowIndex;
    internal DuckDBAppenderRow(string qualifiedTableName, VectorDataWriterBase[] vectorWriters, ulong rowIndex);
    public void EndRow();
    public DuckDBAppenderRow AppendNullValue();
    public DuckDBAppenderRow AppendValue(Nullable`1<bool> value);
    public DuckDBAppenderRow AppendValue(Byte[] value);
    [NullableContextAttribute("0")]
public DuckDBAppenderRow AppendValue(Span`1<byte> value);
    public DuckDBAppenderRow AppendValue(string value);
    public DuckDBAppenderRow AppendValue(Nullable`1<decimal> value);
    public DuckDBAppenderRow AppendValue(Nullable`1<Guid> value);
    public DuckDBAppenderRow AppendValue(Nullable`1<BigInteger> value);
    public DuckDBAppenderRow AppendValue(Nullable`1<sbyte> value);
    public DuckDBAppenderRow AppendValue(Nullable`1<short> value);
    public DuckDBAppenderRow AppendValue(Nullable`1<int> value);
    public DuckDBAppenderRow AppendValue(Nullable`1<long> value);
    public DuckDBAppenderRow AppendValue(Nullable`1<byte> value);
    public DuckDBAppenderRow AppendValue(Nullable`1<ushort> value);
    public DuckDBAppenderRow AppendValue(Nullable`1<UInt32> value);
    public DuckDBAppenderRow AppendValue(Nullable`1<ulong> value);
    public DuckDBAppenderRow AppendValue(Nullable`1<float> value);
    public DuckDBAppenderRow AppendValue(Nullable`1<double> value);
    public DuckDBAppenderRow AppendValue(Nullable`1<DateOnly> value);
    public DuckDBAppenderRow AppendValue(Nullable`1<TimeOnly> value);
    public DuckDBAppenderRow AppendValue(Nullable`1<DuckDBDateOnly> value);
    public DuckDBAppenderRow AppendValue(Nullable`1<DuckDBTimeOnly> value);
    public DuckDBAppenderRow AppendValue(Nullable`1<DateTime> value);
    public DuckDBAppenderRow AppendValue(Nullable`1<DateTimeOffset> value);
    public DuckDBAppenderRow AppendValue(Nullable`1<TimeSpan> value);
    public DuckDBAppenderRow AppendValue(IEnumerable`1<T> value);
    [NullableContextAttribute("2")]
private DuckDBAppenderRow AppendValueInternal(T value);
    [NullableContextAttribute("0")]
private DuckDBAppenderRow AppendSpan(Span`1<byte> val);
    private void CheckColumnAccess();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DuckDB.NET.Data.DuckDBClientFactory : DbProviderFactory {
    public static string ProviderInvariantName;
    public static DuckDBClientFactory Instance;
    public bool CanCreateDataSourceEnumerator { get; }
    private static DuckDBClientFactory();
    public virtual bool get_CanCreateDataSourceEnumerator();
    public virtual DbCommand CreateCommand();
    public virtual DbCommandBuilder CreateCommandBuilder();
    public virtual DbConnection CreateConnection();
    public virtual DbConnectionStringBuilder CreateConnectionStringBuilder();
    public virtual DbDataAdapter CreateDataAdapter();
    public virtual DbParameter CreateParameter();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DuckDB.NET.Data.DuckDBCommand : DbCommand {
    [NullableAttribute("2")]
private DuckDBConnection connection;
    private DuckDBParameterCollection parameters;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private DbTransaction <DbTransaction>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CommandTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandType <CommandType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DesignTimeVisible>k__BackingField;
    [CompilerGeneratedAttribute]
private UpdateRowSource <UpdatedRowSource>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseStreamingMode>k__BackingField;
    private string commandText;
    [NullableAttribute("2")]
protected DbTransaction DbTransaction { get; protected set; }
    protected DbParameterCollection DbParameterCollection { get; }
    public DuckDBParameterCollection Parameters { get; }
    public int CommandTimeout { get; public set; }
    public CommandType CommandType { get; public set; }
    public bool DesignTimeVisible { get; public set; }
    public UpdateRowSource UpdatedRowSource { get; public set; }
    public bool UseStreamingMode { get; public set; }
    [DefaultValueAttribute("")]
public string CommandText { get; public set; }
    [NullableAttribute("2")]
protected DbConnection DbConnection { get; protected set; }
    public DuckDBCommand(string commandText);
    public DuckDBCommand(string commandText, DuckDBConnection connection);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected virtual DbTransaction get_DbTransaction();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected virtual void set_DbTransaction(DbTransaction value);
    protected virtual DbParameterCollection get_DbParameterCollection();
    public virtual DuckDBParameterCollection get_Parameters();
    [CompilerGeneratedAttribute]
public virtual int get_CommandTimeout();
    [CompilerGeneratedAttribute]
public virtual void set_CommandTimeout(int value);
    [CompilerGeneratedAttribute]
public virtual CommandType get_CommandType();
    [CompilerGeneratedAttribute]
public virtual void set_CommandType(CommandType value);
    [CompilerGeneratedAttribute]
public virtual bool get_DesignTimeVisible();
    [CompilerGeneratedAttribute]
public virtual void set_DesignTimeVisible(bool value);
    [CompilerGeneratedAttribute]
public virtual UpdateRowSource get_UpdatedRowSource();
    [CompilerGeneratedAttribute]
public virtual void set_UpdatedRowSource(UpdateRowSource value);
    [CompilerGeneratedAttribute]
public bool get_UseStreamingMode();
    [CompilerGeneratedAttribute]
public void set_UseStreamingMode(bool value);
    public virtual string get_CommandText();
    public virtual void set_CommandText(string value);
    [NullableContextAttribute("2")]
protected virtual DbConnection get_DbConnection();
    [NullableContextAttribute("2")]
protected virtual void set_DbConnection(DbConnection value);
    public virtual void Cancel();
    public virtual int ExecuteNonQuery();
    [NullableContextAttribute("2")]
public virtual object ExecuteScalar();
    public DuckDBDataReader ExecuteReader();
    public DuckDBDataReader ExecuteReader(CommandBehavior behavior);
    protected virtual DbDataReader ExecuteDbDataReader(CommandBehavior behavior);
    public virtual void Prepare();
    protected virtual DbParameter CreateDbParameter();
    internal void CloseConnection();
    private void EnsureConnectionOpen(string operation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DuckDB.NET.Data.DuckDBConnection : DbConnection {
    private ConnectionManager connectionManager;
    private ConnectionState connectionState;
    [NullableAttribute("2")]
private DuckDBConnectionString parsedConnection;
    [NullableAttribute("2")]
private ConnectionReference connectionReference;
    private bool inMemoryDuplication;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private DuckDBTransaction <Transaction>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectionString>k__BackingField;
    [NullableAttribute("2")]
protected DbProviderFactory DbProviderFactory { get; }
    [NullableAttribute("2")]
internal DuckDBTransaction Transaction { get; internal set; }
    internal DuckDBConnectionString ParsedConnection { get; }
    [DefaultValueAttribute("")]
public string ConnectionString { get; public set; }
    public string Database { get; }
    public string DataSource { get; }
    internal DuckDBNativeConnection NativeConnection { get; }
    public string ServerVersion { get; }
    public ConnectionState State { get; }
    public DuckDBConnection(string connectionString);
    [NullableContextAttribute("2")]
protected virtual DbProviderFactory get_DbProviderFactory();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal DuckDBTransaction get_Transaction();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_Transaction(DuckDBTransaction value);
    internal DuckDBConnectionString get_ParsedConnection();
    [CompilerGeneratedAttribute]
public virtual string get_ConnectionString();
    [CompilerGeneratedAttribute]
public virtual void set_ConnectionString(string value);
    public virtual string get_Database();
    public virtual string get_DataSource();
    internal DuckDBNativeConnection get_NativeConnection();
    public virtual string get_ServerVersion();
    public virtual ConnectionState get_State();
    public virtual void ChangeDatabase(string databaseName);
    public virtual void Close();
    public virtual void Open();
    protected virtual DbTransaction BeginDbTransaction(IsolationLevel isolationLevel);
    public DuckDBTransaction BeginTransaction();
    private DuckDBTransaction BeginTransaction(IsolationLevel isolationLevel);
    protected virtual DbCommand CreateDbCommand();
    public virtual DuckDBCommand CreateCommand();
    public DuckDBAppender CreateAppender(string table);
    public DuckDBAppender CreateAppender(string schema, string table);
    protected virtual void Dispose(bool disposing);
    private void EnsureConnectionOpen(string operation);
    public DuckDBConnection Duplicate();
    public virtual DataTable GetSchema();
    public virtual DataTable GetSchema(string collectionName);
    public virtual DataTable GetSchema(string collectionName, String[] restrictionValues);
    [CompilerGeneratedAttribute]
internal static string <CreateAppender>g__GetTableName|38_0(<>c__DisplayClass38_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class DuckDB.NET.Data.DuckDBConnectionStringBuilder : DbConnectionStringBuilder {
    private static HashSet`1<string> DataSourceKeys;
    private static HashSet`1<string> ConfigurationOptions;
    public static string InMemoryDataSource;
    public static string InMemoryConnectionString;
    public static string InMemorySharedDataSource;
    public static string InMemorySharedConnectionString;
    private static string DataSourceKey;
    public object Item { get; public set; }
    public string DataSource { get; public set; }
    private static DuckDBConnectionStringBuilder();
    internal static DuckDBConnectionString Parse(string connectionString);
    public virtual object get_Item(string keyword);
    public virtual void set_Item(string keyword, object value);
    public string get_DataSource();
    public void set_DataSource(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class DuckDB.NET.Data.DuckDBDataReader : DbDataReader {
    private DuckDBCommand command;
    private CommandBehavior behavior;
    private DuckDBResult currentResult;
    [NullableAttribute("2")]
private DuckDBDataChunk currentChunk;
    private int fieldCount;
    private ulong currentChunkRowCount;
    private ulong rowsReadFromCurrentChunk;
    private bool closed;
    private bool hasRows;
    private bool streamingResult;
    private long currentChunkIndex;
    private IEnumerator`1<DuckDBResult> resultEnumerator;
    private VectorDataReaderBase[] vectorReaders;
    [CompilerGeneratedAttribute]
private int <Depth>k__BackingField;
    public int FieldCount { get; }
    public object Item { get; }
    public object Item { get; }
    public int RecordsAffected { get; }
    public bool HasRows { get; }
    public bool IsClosed { get; }
    public int Depth { get; }
    internal DuckDBDataReader(DuckDBCommand command, IEnumerable`1<DuckDBResult> queryResults, CommandBehavior behavior);
    private bool InitNextReader();
    private bool InitChunkData();
    public virtual bool GetBoolean(int ordinal);
    public virtual byte GetByte(int ordinal);
    [NullableContextAttribute("2")]
public virtual long GetBytes(int ordinal, long dataOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual char GetChar(int ordinal);
    [NullableContextAttribute("2")]
public virtual long GetChars(int ordinal, long dataOffset, Char[] buffer, int bufferOffset, int length);
    public virtual string GetDataTypeName(int ordinal);
    public virtual DateTime GetDateTime(int ordinal);
    public virtual decimal GetDecimal(int ordinal);
    public virtual double GetDouble(int ordinal);
    public virtual Type GetFieldType(int ordinal);
    public virtual Type GetProviderSpecificFieldType(int ordinal);
    public virtual float GetFloat(int ordinal);
    public virtual Guid GetGuid(int ordinal);
    public virtual short GetInt16(int ordinal);
    public virtual int GetInt32(int ordinal);
    public virtual long GetInt64(int ordinal);
    public virtual string GetName(int ordinal);
    public virtual int GetOrdinal(string name);
    public virtual string GetString(int ordinal);
    public virtual T GetFieldValue(int ordinal);
    public virtual object GetValue(int ordinal);
    public virtual object GetProviderSpecificValue(int ordinal);
    public virtual int GetValues(Object[] values);
    public virtual Stream GetStream(int ordinal);
    public virtual bool IsDBNull(int ordinal);
    public virtual int get_FieldCount();
    public virtual object get_Item(int ordinal);
    public virtual object get_Item(string name);
    public virtual int get_RecordsAffected();
    public virtual bool get_HasRows();
    public virtual bool get_IsClosed();
    public virtual bool NextResult();
    public virtual bool Read();
    [CompilerGeneratedAttribute]
public virtual int get_Depth();
    public virtual IEnumerator GetEnumerator();
    public virtual DataTable GetSchemaTable();
    public virtual void Close();
    private void CheckRowRead();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DuckDB.NET.Data.DuckDBException : DbException {
    internal DuckDBException(SerializationInfo info, StreamingContext context);
    internal DuckDBException(string message);
    internal DuckDBException(string message, DuckDBState state);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class DuckDB.NET.Data.DuckDbMetaDataCollectionNames : object {
    public static string Tables;
    public static string Columns;
    public static string ForeignKeys;
    public static string Indexes;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DuckDB.NET.Data.DuckDBParameter : DbParameter {
    private static DbType DefaultDbType;
    [NullableAttribute("2")]
private object value;
    [CompilerGeneratedAttribute]
private DbType <DbType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    [CompilerGeneratedAttribute]
private ParameterDirection <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNullable>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SourceColumnNullMapping>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Size>k__BackingField;
    public DbType DbType { get; public set; }
    [DefaultValueAttribute("")]
public string ParameterName { get; public set; }
    [NullableAttribute("2")]
public object Value { get; public set; }
    public ParameterDirection Direction { get; public set; }
    public bool IsNullable { get; public set; }
    [DefaultValueAttribute("")]
public string SourceColumn { get; public set; }
    public bool SourceColumnNullMapping { get; public set; }
    public int Size { get; public set; }
    public DuckDBParameter(object value);
    [NullableContextAttribute("2")]
public DuckDBParameter(DbType type, object value);
    public DuckDBParameter(string name, object value);
    public DuckDBParameter(string name, DbType type, object value);
    [CompilerGeneratedAttribute]
public virtual DbType get_DbType();
    [CompilerGeneratedAttribute]
public virtual void set_DbType(DbType value);
    [CompilerGeneratedAttribute]
public virtual string get_ParameterName();
    [CompilerGeneratedAttribute]
public virtual void set_ParameterName(string value);
    [NullableContextAttribute("2")]
public virtual object get_Value();
    [NullableContextAttribute("2")]
public virtual void set_Value(object value);
    [CompilerGeneratedAttribute]
public virtual ParameterDirection get_Direction();
    [CompilerGeneratedAttribute]
public virtual void set_Direction(ParameterDirection value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsNullable();
    [CompilerGeneratedAttribute]
public virtual void set_IsNullable(bool value);
    [CompilerGeneratedAttribute]
public virtual string get_SourceColumn();
    [CompilerGeneratedAttribute]
public virtual void set_SourceColumn(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_SourceColumnNullMapping();
    [CompilerGeneratedAttribute]
public virtual void set_SourceColumnNullMapping(bool value);
    [CompilerGeneratedAttribute]
public virtual int get_Size();
    [CompilerGeneratedAttribute]
public virtual void set_Size(int value);
    public virtual void ResetDbType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class DuckDB.NET.Data.DuckDBParameterCollection : DbParameterCollection {
    private List`1<DuckDBParameter> parameters;
    public DuckDBParameter Item { get; public set; }
    public DuckDBParameter Item { get; public set; }
    public int Count { get; }
    public object SyncRoot { get; }
    public DuckDBParameter get_Item(int index);
    public void set_Item(int index, DuckDBParameter value);
    public DuckDBParameter get_Item(string parameterName);
    public void set_Item(string parameterName, DuckDBParameter value);
    public virtual int get_Count();
    public virtual object get_SyncRoot();
    public virtual int Add(object value);
    public virtual void Clear();
    public virtual bool Contains(object value);
    public virtual int IndexOf(object value);
    public virtual void Insert(int index, object value);
    public virtual void Remove(object value);
    public int Add(DuckDBParameter value);
    public bool Contains(DuckDBParameter value);
    public int IndexOf(DuckDBParameter value);
    public void Insert(int index, DuckDBParameter value);
    public void Remove(DuckDBParameter value);
    public virtual void RemoveAt(int index);
    public virtual void RemoveAt(string parameterName);
    protected virtual void SetParameter(int index, DbParameter value);
    protected virtual void SetParameter(string parameterName, DbParameter value);
    public virtual int IndexOf(string parameterName);
    public virtual bool Contains(string value);
    public virtual void CopyTo(Array array, int index);
    public void CopyTo(DuckDBParameter[] array, int index);
    public virtual IEnumerator GetEnumerator();
    protected virtual DbParameter GetParameter(int index);
    protected virtual DbParameter GetParameter(string parameterName);
    public virtual void AddRange(Array values);
    public void AddRange(IEnumerable`1<DuckDBParameter> values);
    private int IndexOfSafe(string parameterName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class DuckDB.NET.Data.DuckDBSchema : object {
    private static String[] TableRestrictions;
    private static String[] ColumnRestrictions;
    private static String[] ForeignKeyRestrictions;
    private static String[] IndexesRestrictions;
    private static DuckDBSchema();
    public static DataTable GetSchema(DuckDBConnection connection, string collectionName, String[] restrictionValues);
    private static DataTable GetMetaDataCollections();
    private static DataTable GetRestrictions();
    private static DataTable GetReservedWords(DuckDBConnection connection);
    private static DataTable GetTables(DuckDBConnection connection, String[] restrictionValues);
    private static DataTable GetColumns(DuckDBConnection connection, String[] restrictionValues);
    private static DataTable GetForeignKeys(DuckDBConnection connection, String[] restrictionValues);
    private static DataTable GetIndexes(DuckDBConnection connection, String[] restrictionValues);
    private static DuckDBCommand BuildCommand(DuckDBConnection connection, string query, String[] restrictions, bool addWhere, String[] restrictionNames);
    private static DataTable GetDataTable(string tableName, DuckDBCommand command);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DuckDB.NET.Data.DuckDBTransaction : DbTransaction {
    private bool finished;
    private DuckDBConnection connection;
    [CompilerGeneratedAttribute]
private IsolationLevel <IsolationLevel>k__BackingField;
    protected DbConnection DbConnection { get; }
    public IsolationLevel IsolationLevel { get; }
    public DuckDBTransaction(DuckDBConnection connection, IsolationLevel isolationLevel);
    protected virtual DbConnection get_DbConnection();
    [CompilerGeneratedAttribute]
public virtual IsolationLevel get_IsolationLevel();
    public virtual void Commit();
    public virtual void Rollback();
    private void FinishTransaction(string finalizer);
    protected virtual void Dispose(bool disposing);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class DuckDB.NET.Data.Extensions.DbConnectionExtension : object {
    [ExtensionAttribute]
public static int ExecuteNonQuery(IDbConnection connection, string sql);
    [ExtensionAttribute]
public static bool IsOpen(IDbConnection connection);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class DuckDB.NET.Data.Extensions.GuidConverter : object {
    private static string GuidFormat;
    private static Char[] HexDigits;
    private static GuidConverter();
    [ExtensionAttribute]
public static Guid ConvertToGuid(DuckDBHugeInt input);
    [ExtensionAttribute]
public static DuckDBHugeInt ToHugeInt(Guid guid);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static void <ConvertToGuid>g__ByteToHex|2_0(Span`1<char> buffer, Int32& position, ulong value);
    [CompilerGeneratedAttribute]
internal static char <ToHugeInt>g__HexToChar|3_0(char ch);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class DuckDB.NET.Data.Extensions.TypeExtensions : object {
    private static HashSet`1<Type> FloatingNumericTypes;
    private static HashSet`1<Type> IntegralNumericTypes;
    private static TypeExtensions();
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsNull(object value);
    [NullableContextAttribute("2")]
public static ValueTuple`2<bool, Type> IsNullableValueType();
    [NullableContextAttribute("2")]
public static bool IsFloatingNumericType();
    [NullableContextAttribute("2")]
public static bool IsIntegralNumericType();
    [ExtensionAttribute]
public static bool IsNumeric(Type type);
    [ExtensionAttribute]
public static bool AllowsNullValue(Type type, Boolean& isNullableValueType, Type& underlyingType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class DuckDB.NET.Data.Internal.ConnectionManager : object {
    public static ConnectionManager Default;
    private static ConcurrentDictionary`2<string, FileRef> ConnectionCache;
    private static ConnectionManager();
    internal ConnectionReference GetConnectionReference(DuckDBConnectionString connectionString);
    internal void ReturnConnectionReference(ConnectionReference connectionReference);
    internal ConnectionReference DuplicateConnectionReference(ConnectionReference connectionReference);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class DuckDB.NET.Data.Internal.ConnectionReference : object {
    [CompilerGeneratedAttribute]
private FileRef <FileRefCounter>k__BackingField;
    [CompilerGeneratedAttribute]
private DuckDBNativeConnection <NativeConnection>k__BackingField;
    public FileRef FileRefCounter { get; private set; }
    public DuckDBNativeConnection NativeConnection { get; private set; }
    public ConnectionReference(FileRef fileRefCounter, DuckDBNativeConnection nativeConnection);
    [CompilerGeneratedAttribute]
public FileRef get_FileRefCounter();
    [CompilerGeneratedAttribute]
private void set_FileRefCounter(FileRef value);
    [CompilerGeneratedAttribute]
public DuckDBNativeConnection get_NativeConnection();
    [CompilerGeneratedAttribute]
private void set_NativeConnection(DuckDBNativeConnection value);
    [NullableContextAttribute("2")]
public virtual string ToString();
}
internal static class DuckDB.NET.Data.Internal.DbTypeMap : object {
    [NullableAttribute("1")]
private static Dictionary`2<Type, DbType> TypeMap;
    private static DbTypeMap();
    [NullableContextAttribute("2")]
public static DbType GetDbTypeForValue(object value);
}
public static class DuckDB.NET.Data.Internal.DuckDBGlobalData : object {
    [CompilerGeneratedAttribute]
private static ulong <VectorSize>k__BackingField;
    public static ulong VectorSize { get; }
    private static DuckDBGlobalData();
    [CompilerGeneratedAttribute]
public static ulong get_VectorSize();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class DuckDB.NET.Data.Internal.FileRef : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private DuckDBDatabase <Database>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ConnectionCount>k__BackingField;
    [NullableAttribute("2")]
public DuckDBDatabase Database { get; internal set; }
    public string FileName { get; }
    public long ConnectionCount { get; private set; }
    public FileRef(string filename);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public DuckDBDatabase get_Database();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_Database(DuckDBDatabase value);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public long get_ConnectionCount();
    [CompilerGeneratedAttribute]
private void set_ConnectionCount(long value);
    public long Decrement();
    public long Increment();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class DuckDB.NET.Data.Internal.PreparedStatement : object {
    private static Dictionary`2<DbType, Func`4<DuckDBPreparedStatement, long, object, DuckDBState>> Binders;
    private DuckDBPreparedStatement statement;
    private PreparedStatement(DuckDBPreparedStatement statement);
    private static PreparedStatement();
    [IteratorStateMachineAttribute("DuckDB.NET.Data.Internal.PreparedStatement/<PrepareMultiple>d__3")]
public static IEnumerable`1<DuckDBResult> PrepareMultiple(DuckDBNativeConnection connection, string query, DuckDBParameterCollection parameters, bool useStreamingMode);
    public DuckDBResult Execute(DuckDBParameterCollection parameterCollection, bool useStreamingMode);
    private static void BindParameters(DuckDBPreparedStatement preparedStatement, DuckDBParameterCollection parameterCollection);
    private static void BindParameter(DuckDBPreparedStatement preparedStatement, long index, DuckDBParameter parameter);
    private static DuckDBState BindObject(DuckDBPreparedStatement preparedStatement, long index, object value);
    private static DuckDBState BindBoolean(DuckDBPreparedStatement preparedStatement, long index, object value);
    private static DuckDBState BindInt8(DuckDBPreparedStatement preparedStatement, long index, object value);
    private static DuckDBState BindInt16(DuckDBPreparedStatement preparedStatement, long index, object value);
    private static DuckDBState BindInt32(DuckDBPreparedStatement preparedStatement, long index, object value);
    private static DuckDBState BindInt64(DuckDBPreparedStatement preparedStatement, long index, object value);
    private static DuckDBState BindUInt8(DuckDBPreparedStatement preparedStatement, long index, object value);
    private static DuckDBState BindUInt16(DuckDBPreparedStatement preparedStatement, long index, object value);
    private static DuckDBState BindUInt32(DuckDBPreparedStatement preparedStatement, long index, object value);
    private static DuckDBState BindUInt64(DuckDBPreparedStatement preparedStatement, long index, object value);
    private static DuckDBState BindFloat(DuckDBPreparedStatement preparedStatement, long index, object value);
    private static DuckDBState BindDouble(DuckDBPreparedStatement preparedStatement, long index, object value);
    private static DuckDBState BindString(DuckDBPreparedStatement preparedStatement, long index, object value);
    private static DuckDBState BindHugeInt(DuckDBPreparedStatement preparedStatement, long index, object value);
    private static DuckDBState BindBlob(DuckDBPreparedStatement preparedStatement, long index, object value);
    private static DuckDBState BindDateOnly(DuckDBPreparedStatement preparedStatement, long index, object value);
    private static DuckDBState BindTimeOnly(DuckDBPreparedStatement preparedStatement, long index, object value);
    private static DuckDBState BindTimestamp(DuckDBPreparedStatement preparedStatement, long index, object value);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class DuckDB.NET.Data.Internal.PropertyDetails : object {
    [CompilerGeneratedAttribute]
private Type <PropertyType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Nullable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NullableValueType>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Type <NullableType>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<object, object> <Setter>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public Type PropertyType { get; public set; }
    public bool Nullable { get; public set; }
    public bool NullableValueType { get; public set; }
    [NullableAttribute("2")]
public Type NullableType { get; public set; }
    public Action`2<object, object> Setter { get; public set; }
    public PropertyDetails(Type PropertyType, bool Nullable, bool NullableValueType, Type NullableType, Action`2<object, object> Setter);
    [CompilerGeneratedAttribute]
protected PropertyDetails(PropertyDetails original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public Type get_PropertyType();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_PropertyType(Type value);
    [CompilerGeneratedAttribute]
public bool get_Nullable();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Nullable(bool value);
    [CompilerGeneratedAttribute]
public bool get_NullableValueType();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_NullableValueType(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Type get_NullableType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_NullableType(Type value);
    [CompilerGeneratedAttribute]
public Action`2<object, object> get_Setter();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Setter(Action`2<object, object> value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(PropertyDetails left, PropertyDetails right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(PropertyDetails left, PropertyDetails right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(PropertyDetails other);
    [CompilerGeneratedAttribute]
public virtual PropertyDetails <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(Type& PropertyType, Boolean& Nullable, Boolean& NullableValueType, Type& NullableType, Action`2& Setter);
}
internal class DuckDB.NET.Data.Internal.Reader.BooleanVectorDataReader : VectorDataReaderBase {
    internal BooleanVectorDataReader(Void* dataPointer, UInt64* validityMaskPointer, DuckDBType columnType, string columnName);
    [NullableContextAttribute("1")]
protected virtual T GetValidValue(ulong offset, Type targetType);
    [NullableContextAttribute("1")]
internal virtual object GetValue(ulong offset, Type targetType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class DuckDB.NET.Data.Internal.Reader.DateTimeVectorDataReader : VectorDataReaderBase {
    private static Type DateTimeType;
    private static Type DateTimeNullableType;
    private static Type DateTimeOffsetType;
    private static Type DateTimeOffsetNullableType;
    private static Type DateOnlyType;
    private static Type DateOnlyNullableType;
    private static Type TimeOnlyType;
    private static Type TimeOnlyNullableType;
    [NullableContextAttribute("0")]
internal DateTimeVectorDataReader(Void* dataPointer, UInt64* validityMaskPointer, DuckDBType columnType, string columnName);
    private static DateTimeVectorDataReader();
    protected virtual T GetValidValue(ulong offset, Type targetType);
    private T ReadTimestamp(ulong offset, Type targetType, int factor, int divisor);
    internal virtual object GetValue(ulong offset, Type targetType);
    private DuckDBTimeTz GetTimeTz(ulong offset);
    private DuckDBTimeOnly GetTimeOnly(ulong offset);
    private DuckDBDateOnly GetDateOnly(ulong offset);
    private object GetDate(ulong offset, Type targetType);
    private object GetTime(ulong offset, Type targetType);
    private object GetDateTime(ulong offset, Type targetType, int factor, int divisor);
    private object GetDateTimeOffset(ulong offset, Type targetType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class DuckDB.NET.Data.Internal.Reader.DecimalVectorDataReader : VectorDataReaderBase {
    private DuckDBType decimalType;
    private NumericVectorDataReader numericVectorDataReader;
    [CompilerGeneratedAttribute]
private byte <Scale>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Precision>k__BackingField;
    internal byte Scale { get; }
    internal byte Precision { get; }
    [NullableContextAttribute("0")]
internal DecimalVectorDataReader(IntPtr vector, Void* dataPointer, UInt64* validityMaskPointer, DuckDBType columnType, string columnName);
    [CompilerGeneratedAttribute]
internal byte get_Scale();
    [CompilerGeneratedAttribute]
internal byte get_Precision();
    protected virtual T GetValidValue(ulong offset, Type targetType);
    internal virtual object GetValue(ulong offset, Type targetType);
    private decimal GetDecimal(ulong offset);
    public virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class DuckDB.NET.Data.Internal.Reader.EnumVectorDataReader : VectorDataReaderBase {
    private DuckDBType enumType;
    private DuckDBLogicalType logicalType;
    [NullableContextAttribute("0")]
internal EnumVectorDataReader(IntPtr vector, Void* dataPointer, UInt64* validityMaskPointer, DuckDBType columnType, string columnName);
    protected virtual T GetValidValue(ulong offset, Type targetType);
    internal virtual object GetValue(ulong offset, Type targetType);
    private object GetEnum(ulong offset, Type returnType);
    public virtual void Dispose();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private T <GetValidValue>g__ToEnumOrString|3_0(TSource enumValue);
}
internal class DuckDB.NET.Data.Internal.Reader.GuidVectorDataReader : VectorDataReaderBase {
    internal GuidVectorDataReader(Void* dataPointer, UInt64* validityMaskPointer, DuckDBType columnType, string columnName);
    [NullableContextAttribute("1")]
protected virtual T GetValidValue(ulong offset, Type targetType);
    [NullableContextAttribute("1")]
internal virtual object GetValue(ulong offset, Type targetType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class DuckDB.NET.Data.Internal.Reader.IntervalVectorDataReader : VectorDataReaderBase {
    private static Type TimeSpanType;
    private static Type TimeSpanNullableType;
    [NullableContextAttribute("0")]
internal IntervalVectorDataReader(Void* dataPointer, UInt64* validityMaskPointer, DuckDBType columnType, string columnName);
    private static IntervalVectorDataReader();
    protected virtual T GetValidValue(ulong offset, Type targetType);
    internal virtual object GetValue(ulong offset, Type targetType);
    private object GetInterval(ulong offset, Type targetType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class DuckDB.NET.Data.Internal.Reader.ListVectorDataReader : VectorDataReaderBase {
    private ulong arraySize;
    private VectorDataReaderBase listDataReader;
    public bool IsList { get; }
    [NullableContextAttribute("0")]
internal ListVectorDataReader(IntPtr vector, Void* dataPointer, UInt64* validityMaskPointer, DuckDBType columnType, string columnName);
    public bool get_IsList();
    protected virtual Type GetColumnType();
    protected virtual Type GetColumnProviderSpecificType();
    internal virtual object GetValue(ulong offset, Type targetType);
    private object GetList(Type returnType, ulong listOffset, ulong length);
    public virtual void Dispose();
    [CompilerGeneratedAttribute]
private List`1<T> <GetList>g__BuildList|8_0(List`1<T> result, <>c__DisplayClass8_0& );
    [CompilerGeneratedAttribute]
private IList <GetList>g__BuildListCommon|8_1(IList result, Type targetType, <>c__DisplayClass8_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class DuckDB.NET.Data.Internal.Reader.MapVectorDataReader : VectorDataReaderBase {
    private VectorDataReaderBase keyReader;
    private VectorDataReaderBase valueReader;
    [NullableContextAttribute("0")]
internal MapVectorDataReader(IntPtr vector, Void* dataPointer, UInt64* validityMaskPointer, DuckDBType columnType, string columnName);
    protected virtual Type GetColumnType();
    protected virtual Type GetColumnProviderSpecificType();
    internal virtual object GetValue(ulong offset, Type targetType);
}
internal class DuckDB.NET.Data.Internal.Reader.NumericVectorDataReader : VectorDataReaderBase {
    internal NumericVectorDataReader(Void* dataPointer, UInt64* validityMaskPointer, DuckDBType columnType, string columnName);
    [NullableContextAttribute("1")]
protected virtual T GetValidValue(ulong offset, Type targetType);
    [NullableContextAttribute("1")]
internal virtual object GetValue(ulong offset, Type targetType);
    internal BigInteger GetBigInteger(ulong offset, bool unsigned);
    [NullableContextAttribute("1")]
private T GetBigInteger(ulong offset, bool unsigned);
    private TResult GetUnmanagedTypeValue(ulong offset);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class DuckDB.NET.Data.Internal.Reader.StringVectorDataReader : VectorDataReaderBase {
    [NullableContextAttribute("0")]
internal StringVectorDataReader(Void* dataPointer, UInt64* validityMaskPointer, DuckDBType columnType, string columnName);
    protected virtual T GetValidValue(ulong offset, Type targetType);
    internal virtual object GetValue(ulong offset, Type targetType);
    private T GetBitString(ulong offset);
    private string GetBitString(ulong offset);
    private BitArray GetBitStringAsBitArray(ulong offset);
    private string GetString(ulong offset);
    private Stream GetStream(ulong offset);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class DuckDB.NET.Data.Internal.Reader.StructVectorDataReader : VectorDataReaderBase {
    private static ConcurrentDictionary`2<Type, TypeDetails> TypeCache;
    private Dictionary`2<string, VectorDataReaderBase> structDataReaders;
    [NullableContextAttribute("0")]
internal StructVectorDataReader(IntPtr vector, Void* dataPointer, UInt64* validityMaskPointer, DuckDBType columnType, string columnName);
    private static StructVectorDataReader();
    internal virtual object GetValue(ulong offset, Type targetType);
    private object GetStruct(ulong offset, Type returnType);
    public virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class DuckDB.NET.Data.Internal.Reader.VectorDataReaderBase : object {
    [NullableAttribute("0")]
private UInt64* validityMaskPointer;
    [NullableAttribute("2")]
private Type clrType;
    [NullableAttribute("2")]
private Type providerSpecificClrType;
    [CompilerGeneratedAttribute]
private string <ColumnName>k__BackingField;
    [CompilerGeneratedAttribute]
private DuckDBType <DuckDBType>k__BackingField;
    [NullableAttribute("0")]
[CompilerGeneratedAttribute]
private Void* <DataPointer>k__BackingField;
    public Type ClrType { get; }
    public Type ProviderSpecificClrType { get; }
    public string ColumnName { get; }
    public DuckDBType DuckDBType { get; }
    [NullableAttribute("0")]
private protected Void* DataPointer { get; }
    [NullableContextAttribute("0")]
internal VectorDataReaderBase(Void* dataPointer, UInt64* validityMaskPointer, DuckDBType columnType, string columnName);
    public Type get_ClrType();
    public Type get_ProviderSpecificClrType();
    [CompilerGeneratedAttribute]
public string get_ColumnName();
    [CompilerGeneratedAttribute]
public DuckDBType get_DuckDBType();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private protected Void* get_DataPointer();
    internal bool IsValid(ulong offset);
    internal virtual T GetValue(ulong offset);
    protected virtual T GetValidValue(ulong offset, Type targetType);
    internal object GetValue(ulong offset);
    internal virtual object GetValue(ulong offset, Type targetType);
    internal object GetProviderSpecificValue(ulong offset);
    protected virtual Type GetColumnType();
    protected virtual Type GetColumnProviderSpecificType();
    [NullableContextAttribute("0")]
protected T GetFieldData(ulong offset);
    public virtual void Dispose();
}
internal static class DuckDB.NET.Data.Internal.Reader.VectorDataReaderFactory : object {
    [NullableContextAttribute("1")]
public static VectorDataReaderBase CreateReader(IntPtr vector, DuckDBLogicalType logicalColumnType, string columnName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class DuckDB.NET.Data.Internal.TypeDetails : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, PropertyDetails> <Properties>k__BackingField;
    public Dictionary`2<string, PropertyDetails> Properties { get; public set; }
    [CompilerGeneratedAttribute]
public Dictionary`2<string, PropertyDetails> get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(Dictionary`2<string, PropertyDetails> value);
}
internal class DuckDB.NET.Data.Internal.Writer.BooleanVectorDataWriter : VectorDataWriterBase {
    public BooleanVectorDataWriter(IntPtr vector, Void* vectorData, DuckDBType columnType);
    internal virtual bool AppendBool(bool value, int rowIndex);
}
internal class DuckDB.NET.Data.Internal.Writer.DateTimeVectorDataWriter : VectorDataWriterBase {
    public DateTimeVectorDataWriter(IntPtr vector, Void* vectorData, DuckDBType columnType);
    internal virtual bool AppendDateTime(DateTime value, int rowIndex);
    internal virtual bool AppendDateTimeOffset(DateTimeOffset value, int rowIndex);
    internal virtual bool AppendDateOnly(DateOnly value, int rowIndex);
    internal virtual bool AppendTimeOnly(TimeOnly value, int rowIndex);
    internal virtual bool AppendDateOnly(DuckDBDateOnly value, int rowIndex);
    internal virtual bool AppendTimeOnly(DuckDBTimeOnly value, int rowIndex);
}
internal class DuckDB.NET.Data.Internal.Writer.DecimalVectorDataWriter : VectorDataWriterBase {
    private byte scale;
    private DuckDBType decimalType;
    public DecimalVectorDataWriter(IntPtr vector, Void* vectorData, DuckDBLogicalType logicalType, DuckDBType columnType);
    internal virtual bool AppendDecimal(decimal value, int rowIndex);
}
internal class DuckDB.NET.Data.Internal.Writer.GuidVectorDataWriter : VectorDataWriterBase {
    public GuidVectorDataWriter(IntPtr vector, Void* vectorData, DuckDBType columnType);
    internal virtual bool AppendGuid(Guid value, int rowIndex);
}
internal class DuckDB.NET.Data.Internal.Writer.IntervalVectorDataWriter : VectorDataWriterBase {
    public IntervalVectorDataWriter(IntPtr vector, Void* vectorData, DuckDBType columnType);
    internal virtual bool AppendTimeSpan(TimeSpan value, int rowIndex);
}
internal class DuckDB.NET.Data.Internal.Writer.ListVectorDataWriter : VectorDataWriterBase {
    private ulong offset;
    private ulong arraySize;
    [NullableAttribute("1")]
private VectorDataWriterBase listItemWriter;
    private ulong vectorReservedSize;
    public bool IsList { get; }
    public ListVectorDataWriter(IntPtr vector, Void* vectorData, DuckDBType columnType, DuckDBLogicalType logicalType);
    public bool get_IsList();
    [NullableContextAttribute("1")]
internal virtual bool AppendCollection(ICollection value, int rowIndex);
    private void ResizeVector(int rowIndex, ulong count);
    [CompilerGeneratedAttribute]
private int <AppendCollection>g__WriteItems|7_0(IEnumerable`1<T> items, <>c__DisplayClass7_0& );
}
internal class DuckDB.NET.Data.Internal.Writer.NumericVectorDataWriter : VectorDataWriterBase {
    public NumericVectorDataWriter(IntPtr vector, Void* vectorData, DuckDBType columnType);
    internal virtual bool AppendNumeric(T value, int rowIndex);
    internal virtual bool AppendBigInteger(BigInteger value, int rowIndex);
}
internal class DuckDB.NET.Data.Internal.Writer.StringVectorDataWriter : VectorDataWriterBase {
    public StringVectorDataWriter(IntPtr vector, Void* vectorData, DuckDBType columnType);
    [NullableContextAttribute("1")]
internal virtual bool AppendString(string value, int rowIndex);
    internal virtual bool AppendBlob(Byte* value, int length, int rowIndex);
}
internal class DuckDB.NET.Data.Internal.Writer.VectorDataWriterBase : object {
    [CompilerGeneratedAttribute]
private IntPtr <vector>P;
    [CompilerGeneratedAttribute]
private Void* <vectorData>P;
    [CompilerGeneratedAttribute]
private DuckDBType <columnType>P;
    private UInt64* validity;
    internal IntPtr Vector { get; }
    internal DuckDBType ColumnType { get; }
    public VectorDataWriterBase(IntPtr vector, Void* vectorData, DuckDBType columnType);
    internal IntPtr get_Vector();
    internal DuckDBType get_ColumnType();
    public void AppendNull(int rowIndex);
    [NullableContextAttribute("1")]
public void AppendValue(T value, int rowIndex);
    internal virtual bool AppendBool(bool value, int rowIndex);
    internal virtual bool AppendDecimal(decimal value, int rowIndex);
    internal virtual bool AppendTimeSpan(TimeSpan value, int rowIndex);
    internal virtual bool AppendGuid(Guid value, int rowIndex);
    internal virtual bool AppendBlob(Byte* value, int length, int rowIndex);
    [NullableContextAttribute("1")]
internal virtual bool AppendString(string value, int rowIndex);
    internal virtual bool AppendDateTime(DateTime value, int rowIndex);
    internal virtual bool AppendDateOnly(DateOnly value, int rowIndex);
    internal virtual bool AppendTimeOnly(TimeOnly value, int rowIndex);
    internal virtual bool AppendDateOnly(DuckDBDateOnly value, int rowIndex);
    internal virtual bool AppendTimeOnly(DuckDBTimeOnly value, int rowIndex);
    internal virtual bool AppendDateTimeOffset(DateTimeOffset value, int rowIndex);
    internal virtual bool AppendNumeric(T value, int rowIndex);
    internal virtual bool AppendBigInteger(BigInteger value, int rowIndex);
    [NullableContextAttribute("1")]
internal virtual bool AppendCollection(ICollection value, int rowIndex);
    [NullableContextAttribute("2")]
private bool ThrowException();
    internal bool AppendValueInternal(T value, int rowIndex);
    internal void InitializerWriter();
}
internal static class DuckDB.NET.Data.Internal.Writer.VectorDataWriterFactory : object {
    [NullableContextAttribute("1")]
public static VectorDataWriterBase CreateWriter(IntPtr vector, DuckDBLogicalType logicalType);
}
[CompilerGeneratedAttribute]
[ExcludeFromCodeCoverageAttribute]
internal static class GitVersionInformation : object {
    public static string Major;
    public static string Minor;
    public static string Patch;
    public static string PreReleaseTag;
    public static string PreReleaseTagWithDash;
    public static string PreReleaseLabel;
    public static string PreReleaseLabelWithDash;
    public static string PreReleaseNumber;
    public static string WeightedPreReleaseNumber;
    public static string BuildMetaData;
    public static string BuildMetaDataPadded;
    public static string FullBuildMetaData;
    public static string MajorMinorPatch;
    public static string SemVer;
    public static string LegacySemVer;
    public static string LegacySemVerPadded;
    public static string AssemblySemVer;
    public static string AssemblySemFileVer;
    public static string FullSemVer;
    public static string InformationalVersion;
    public static string BranchName;
    public static string EscapedBranchName;
    public static string Sha;
    public static string ShortSha;
    public static string NuGetVersionV2;
    public static string NuGetVersion;
    public static string NuGetPreReleaseTagV2;
    public static string NuGetPreReleaseTag;
    public static string VersionSourceSha;
    public static string CommitsSinceVersionSource;
    public static string CommitsSinceVersionSourcePadded;
    public static string UncommittedChanges;
    public static string CommitDate;
    private static GitVersionInformation();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal static class System.Runtime.CompilerServices.IsExternalInit : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsUnmanagedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
