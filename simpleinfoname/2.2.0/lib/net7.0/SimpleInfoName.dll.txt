[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class PolyfillExtensions : object {
    private static ConcurrentDictionary`2<ParameterInfo, NullabilityInfo> parameterCache;
    private static ConcurrentDictionary`2<PropertyInfo, NullabilityInfo> propertyCache;
    private static ConcurrentDictionary`2<EventInfo, NullabilityInfo> eventCache;
    private static ConcurrentDictionary`2<FieldInfo, NullabilityInfo> fieldCache;
    private static PolyfillExtensions();
    [ExtensionAttribute]
public static NullabilityInfo GetNullabilityInfo(MemberInfo info);
    [ExtensionAttribute]
public static NullabilityState GetNullability(MemberInfo info);
    [ExtensionAttribute]
public static bool IsNullable(MemberInfo info);
    [ExtensionAttribute]
public static NullabilityInfo GetNullabilityInfo(FieldInfo info);
    [ExtensionAttribute]
public static NullabilityState GetNullability(FieldInfo info);
    [ExtensionAttribute]
public static bool IsNullable(FieldInfo info);
    [ExtensionAttribute]
public static NullabilityInfo GetNullabilityInfo(EventInfo info);
    [ExtensionAttribute]
public static NullabilityState GetNullability(EventInfo info);
    [ExtensionAttribute]
public static bool IsNullable(EventInfo info);
    [ExtensionAttribute]
public static NullabilityInfo GetNullabilityInfo(PropertyInfo info);
    [ExtensionAttribute]
public static NullabilityState GetNullability(PropertyInfo info);
    [ExtensionAttribute]
public static bool IsNullable(PropertyInfo info);
    [ExtensionAttribute]
public static NullabilityInfo GetNullabilityInfo(ParameterInfo info);
    [ExtensionAttribute]
public static NullabilityState GetNullability(ParameterInfo info);
    [ExtensionAttribute]
public static bool IsNullable(ParameterInfo info);
    private static NullabilityState GetReadOrWriteState(NullabilityInfo nullability);
    private static NullabilityState GetKnownState(string name, NullabilityInfo nullability);
    private static bool IsNullable(string name, NullabilityInfo nullability);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.threading.cancellationtokensource.cancelasync")]
public static Task CancelAsync(CancellationTokenSource target);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.except?view=net-8.0#system-linq-enumerable-except-1(system-collections-generic-ienumerable((-0))-system-collections-generic-ienumerable((-0)))")]
public static IEnumerable`1<TSource> Except(IEnumerable`1<TSource> target, TSource item);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.except?view=net-8.0#system-linq-enumerable-except-1(system-collections-generic-ienumerable((-0))-system-collections-generic-ienumerable((-0)))")]
public static IEnumerable`1<TSource> Except(IEnumerable`1<TSource> target, TSource[] items);
    [NullableContextAttribute("0")]
[IteratorStateMachineAttribute("PolyfillExtensions/<Except>d__25`1")]
[ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.except#system-linq-enumerable-except-1(system-collections-generic-ienumerable((-0))-system-collections-generic-ienumerable((-0))-system-collections-generic-iequalitycomparer((-0)))")]
public static IEnumerable`1<TSource> Except(IEnumerable`1<TSource> target, TSource item, IEqualityComparer`1<TSource> comparer);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.except#system-linq-enumerable-except-1(system-collections-generic-ienumerable((-0))-system-collections-generic-ienumerable((-0))-system-collections-generic-iequalitycomparer((-0)))")]
public static IEnumerable`1<TSource> Except(IEnumerable`1<TSource> target, IEqualityComparer`1<TSource> comparer, TSource[] items);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.timespan.nanoseconds")]
public static int Nanoseconds(TimeSpan target);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.datetime.nanosecond")]
public static int Nanosecond(DateTime target);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.datetimeoffset.nanosecond")]
public static int Nanosecond(DateTimeOffset target);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.timespan.microsecond")]
public static int Microseconds(TimeSpan target);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.datetime.microsecond")]
public static int Microsecond(DateTime target);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.datetimeoffset.microsecond")]
public static int Microsecond(DateTimeOffset target);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.type.isgenericmethodparameter")]
public static bool IsGenericMethodParameter(Type target);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class SimpleInfoName.TypeNameConverter : object {
    private static ConcurrentDictionary`2<ICustomAttributeProvider, string> infoCache;
    private static ConcurrentDictionary`2<Type, Func`2<Type, Type>> redirects;
    private static ConcurrentDictionary`2<Type, string> cacheDictionary;
    private static TypeNameConverter();
    public static bool TryGetSimpleName(object info, String& name);
    [ExtensionAttribute]
public static bool TryGetSimpleName(ICustomAttributeProvider provider, String& name);
    [ExtensionAttribute]
public static string SimpleName(ConstructorInfo constructor);
    [ExtensionAttribute]
public static string SimpleName(FieldInfo field);
    [ExtensionAttribute]
private static string SimpleName(MemberInfo methodBase);
    [ExtensionAttribute]
public static string SimpleName(MethodInfo method);
    [ExtensionAttribute]
public static string SimpleName(ParameterInfo parameter);
    [ExtensionAttribute]
public static string SimpleName(PropertyInfo property);
    [NullableContextAttribute("2")]
public static void AddRedirect();
    public static void AddRedirect(Type from, Type to);
    public static void AddRedirect(Type from, Func`2<Type, Type> convert);
    [ExtensionAttribute]
public static string SimpleName(Type type);
    private static string Inner(Type type);
    [ExtensionAttribute]
private static bool IsAnonType(Type type);
    private static bool IsAnonType(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("6143")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.codeanalysis.experimentalattribute?view=net-8.0")]
internal class System.Diagnostics.CodeAnalysis.ExperimentalAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <DiagnosticId>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <UrlFormat>k__BackingField;
    public string DiagnosticId { get; }
    [NullableAttribute("2")]
public string UrlFormat { get; public set; }
    public ExperimentalAttribute(string diagnosticId);
    [CompilerGeneratedAttribute]
public string get_DiagnosticId();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_UrlFormat();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_UrlFormat(string value);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
