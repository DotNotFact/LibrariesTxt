public enum System.BaseEncoding : Enum {
    public int value__;
    public static BaseEncoding Base16;
    public static BaseEncoding Base32;
    public static BaseEncoding Base32WithPadding;
    public static BaseEncoding Base64;
    public static BaseEncoding Base64WithPadding;
}
public class System.Collections.Generic.GenericEqualityComparer`1 : object {
    private Func`3<T, T, bool> equals;
    private Func`2<T, int> getHashCode;
    public GenericEqualityComparer`1(Func`3<T, T, bool> equals, Func`2<T, int> getHashCode);
    public sealed virtual bool Equals(T x, T y);
    public sealed virtual int GetHashCode(T obj);
}
public class System.Collections.Generic.KeyValuePairEqualityComparer`2 : object {
    private IEqualityComparer`1<TKey> keyComparer;
    private IEqualityComparer`1<TValue> valueComparer;
    public KeyValuePairEqualityComparer`2(IEqualityComparer`1<TKey> keyComparer, IEqualityComparer`1<TValue> valueComparer);
    public sealed virtual bool Equals(KeyValuePair`2<TKey, TValue> x, KeyValuePair`2<TKey, TValue> y);
    public sealed virtual int GetHashCode(KeyValuePair`2<TKey, TValue> obj);
}
public class System.Diagnostics.PerformanceCounterSettings : object {
    private string category;
    private string name;
    [CompilerGeneratedAttribute]
private PerformanceCounterType <CounterType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReadOnly>k__BackingField;
    public string Category { get; public set; }
    public PerformanceCounterType CounterType { get; public set; }
    public string Name { get; public set; }
    public bool ReadOnly { get; public set; }
    public string get_Category();
    public void set_Category(string value);
    [CompilerGeneratedAttribute]
public PerformanceCounterType get_CounterType();
    [CompilerGeneratedAttribute]
public void set_CounterType(PerformanceCounterType value);
    public string get_Name();
    public void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_ReadOnly();
    [CompilerGeneratedAttribute]
public void set_ReadOnly(bool value);
    public sealed virtual bool IsValid();
    public PerformanceCounter CreateInstance();
}
[ExtensionAttribute]
public static class System.Diagnostics.PerformanceCounterSettingsExtensions : object {
    [CompilerGeneratedAttribute]
private static Func`2<PerformanceCounterSettings, string> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<IGrouping`2<string, PerformanceCounterSettings>, IGrouping`2<string, PerformanceCounterSettings>> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<IGrouping`2<string, PerformanceCounterSettings>, string> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`2<IGrouping`2<string, PerformanceCounterSettings>, List`1<PerformanceCounterSettings>> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`2<PerformanceCounterSettings, bool> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Func`2<PerformanceCounterSettings, CounterCreationData> CS$<>9__CachedAnonymousMethodDelegateb;
    [ExtensionAttribute]
public static void Install(IEnumerable`1<PerformanceCounterSettings> counters);
    [CompilerGeneratedAttribute]
private static string <Install>b__0(PerformanceCounterSettings counter);
    [CompilerGeneratedAttribute]
private static IGrouping`2<string, PerformanceCounterSettings> <Install>b__1(IGrouping`2<string, PerformanceCounterSettings> countersByCategory);
    [CompilerGeneratedAttribute]
private static string <Install>b__2(IGrouping`2<string, PerformanceCounterSettings> c);
    [CompilerGeneratedAttribute]
private static List`1<PerformanceCounterSettings> <Install>b__3(IGrouping`2<string, PerformanceCounterSettings> c);
    [CompilerGeneratedAttribute]
private static bool <Install>b__4(PerformanceCounterSettings counter);
    [CompilerGeneratedAttribute]
private static CounterCreationData <Install>b__5(PerformanceCounterSettings counterConfig);
}
public class System.Diagnostics.Tracing.DiagnosticsEventArgs : EventArgs {
    private EventLevel level;
    private string message;
    private string source;
    public EventLevel Level { get; }
    public string Message { get; }
    public string Source { get; }
    public DiagnosticsEventArgs(EventLevel level, string message, string source);
    private DiagnosticsEventArgs(SerializationInfo info, StreamingContext context);
    public EventLevel get_Level();
    public string get_Message();
    public string get_Source();
    public sealed virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class System.Diagnostics.Tracing.DiagnosticsEventHandler : MulticastDelegate {
    public DiagnosticsEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DiagnosticsEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DiagnosticsEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public abstract class System.DisposableBase : object {
    [CompilerGeneratedAttribute]
private bool <IsDisposed>k__BackingField;
    public bool IsDisposed { get; private set; }
    [CompilerGeneratedAttribute]
public bool get_IsDisposed();
    [CompilerGeneratedAttribute]
private void set_IsDisposed(bool value);
    public sealed virtual void Dispose();
    private void Dispose(bool fromDispose);
    protected abstract virtual void ReleaseResources();
}
public enum System.EntityState : Enum {
    public int value__;
    public static EntityState None;
    public static EntityState Inactive;
    public static EntityState Active;
    public static EntityState Retired;
    public static EntityState Transitioning;
    public static EntityState Updating;
    public static EntityState Creating;
    public static EntityState Activating;
    public static EntityState Deactivating;
    public static EntityState Retiring;
    public static EntityState Restoring;
}
public class System.EntityStateTransition : ValueType {
    private EntityState initialState;
    private EntityState targetState;
    public EntityState InitialState { get; }
    public EntityState TargetState { get; }
    public EntityStateTransition(EntityState initialState, EntityState targetState);
    public EntityState get_InitialState();
    public EntityState get_TargetState();
}
[ExtensionAttribute]
public static class System.Extensions.ArgumentExtensions : object {
    [ExtensionAttribute]
public static T CheckArgument(T argument, string argumentName);
    [ExtensionAttribute]
public static ISettings CheckArgument(ISettings argument, string argumentName);
    [ExtensionAttribute]
public static string CheckArgument(string argument, string argumentName);
}
[ExtensionAttribute]
public static class System.Extensions.CharExtensions : object {
    [ExtensionAttribute]
public static bool IsInRange(char value, char lowerBound, char upperBound);
}
[ExtensionAttribute]
public static class System.Extensions.DateTimeExtensions : object {
    private static DateTime unixStart;
    private static DateTimeExtensions();
    [ExtensionAttribute]
public static long ToUnixTime(DateTime value);
    [ExtensionAttribute]
public static DateTime Add(DateTime value, TimeInterval timeInterval);
    [ExtensionAttribute]
public static DateTime Subtract(DateTime value, TimeInterval timeInterval);
    [ExtensionAttribute]
public static DateTime Add(DateTime value, TimeUnit timeUnit);
    [ExtensionAttribute]
public static DateTime Subtract(DateTime value, TimeUnit timeUnit);
    [ExtensionAttribute]
public static DateTime Ceiling(DateTime value, TimeUnit timeUnit);
    [ExtensionAttribute]
public static DateTime Floor(DateTime value, TimeUnit timeUnit);
    [ExtensionAttribute]
public static bool IsLastTimeInterval(DateTime value, TimeUnit timeUnit);
}
[ExtensionAttribute]
public static class System.Extensions.DirectoryInfoExtensions : object {
    [ExtensionAttribute]
public static void Clean(DirectoryInfo directoryInfo);
}
[ExtensionAttribute]
public static class System.Extensions.EntityStateExtensions : object {
    [ExtensionAttribute]
public static bool CanChangeTo(EntityState source, EntityState target, IEnumerable`1<EntityStateTransition> workflow);
    public static EntityState ChangeTo(EntityState& source, EntityState target, IEnumerable`1<EntityStateTransition> workflow);
}
[ExtensionAttribute]
public static class System.Extensions.LinkedListExtensions : object {
    [ExtensionAttribute]
public static void RemoveAll(LinkedList`1<T> list, Func`2<T, bool> predicate);
}
[ExtensionAttribute]
public static class System.Extensions.RangeExtensions : object {
    [ExtensionAttribute]
public static IList`1<Range`1<T>> CombineSequences(IEnumerable`1<T> source, Func`3<T, T, bool> isNext, IList`1& singleValues);
    [ExtensionAttribute]
public static Range`1<T> Range(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static Range`1<TResult> Range(IEnumerable`1<TSource> source, Func`2<TSource, TResult> selector);
    [CompilerGeneratedAttribute]
private static T <CombineSequences>b__0(T x);
}
[ExtensionAttribute]
public static class System.Extensions.TimeUnitExtensions : object {
    [ExtensionAttribute]
public static bool TryGetNext(TimeUnit timeUnit, TimeUnit& result);
    [ExtensionAttribute]
public static bool TryGetPrevious(TimeUnit timeUnit, TimeUnit& result);
}
[ExtensionAttribute]
public static class System.Extensions.UInt32Extensions : object {
    [ExtensionAttribute]
public static int GetHighestSetBitIndex(UInt32 value);
    [ExtensionAttribute]
public static UInt32 GetSetBitsCount(UInt32 value);
    [ExtensionAttribute]
public static bool IsPowerOfTwo(UInt32 value);
    [ExtensionAttribute]
public static UInt32 Align(UInt32 value, UInt32 powerOfTwoBase);
}
public interface System.IEnvironmentSettings {
    public string EnvironmentId { get; public set; }
    public abstract virtual string get_EnvironmentId();
    public abstract virtual void set_EnvironmentId(string value);
}
public interface System.IFlushable {
    public abstract virtual Task FlushAsync(CancellationToken cancellationToken);
    public abstract virtual Task FlushAsync();
}
public interface System.IServerRequestHandler {
    public DateTime AcceptTime { get; }
    public abstract virtual DateTime get_AcceptTime();
    public abstract virtual Task`1<bool> TryProcessAsync();
}
public interface System.ISettings {
    public abstract virtual bool IsValid();
}
public class System.Json.EncodingJsonConverter : JsonConverter {
    private static Type encodingType;
    private static EncodingJsonConverter();
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
public class System.Json.MutableEnumerableJsonConverter`1 : JsonConverter {
    private static Type operationType;
    private Dictionary`2<string, Type> nameTypePairs;
    private Dictionary`2<Type, string> typeNamePairs;
    [CompilerGeneratedAttribute]
private static Func`2<Assembly, IEnumerable`1<Type>> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`3<Assembly, Type, <>f__AnonymousType0`2<Assembly, Type>> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType0`2<Assembly, Type>, bool> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType0`2<Assembly, Type>, Type> CS$<>9__CachedAnonymousMethodDelegate8;
    public MutableEnumerableJsonConverter`1(bool useFullNames);
    private static MutableEnumerableJsonConverter`1();
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<Type> <.ctor>b__1(Assembly assembly);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType0`2<Assembly, Type> <.ctor>b__2(Assembly assembly, Type type);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__3(<>f__AnonymousType0`2<Assembly, Type> <>h__TransparentIdentifier0);
    [CompilerGeneratedAttribute]
private static Type <.ctor>b__4(<>f__AnonymousType0`2<Assembly, Type> <>h__TransparentIdentifier0);
}
public class System.Json.TimeJsonConverter : JsonConverter {
    private static Type timeSpanType;
    private static Type dateTimeType;
    private static TimeJsonConverter();
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
[ExtensionAttribute]
public static class System.Linq.EnumerableExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<T> ApplyRange(IEnumerable`1<T> source, long count, long startIndex);
    [ExtensionAttribute]
public static bool IsSingle(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static bool IsMultiple(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static bool SafeSequenceEqual(IEnumerable`1<T> first, IEnumerable`1<T> second, IEqualityComparer`1<T> comparer);
    [ExtensionAttribute]
public static bool HasDuplicates(IEnumerable`1<TSource> source, Func`2<TSource, TKey> selector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static bool HasDuplicates(IEnumerable`1<T> source);
    [CompilerGeneratedAttribute]
private static bool <HasDuplicates>b__8(IGrouping`2<TKey, TSource> i);
    [CompilerGeneratedAttribute]
private static T <HasDuplicates>b__9(T x);
}
[ExcludeFromCodeCoverageAttribute]
public static class System.LoadTest : object {
    public static Result Execute(string testId, Action`1<long> action, long iterationCount);
    public static ComparedResults ExecuteCompare(string firstTestId, Action`1<long> firstAction, string secondTestId, Action`1<long> secondAction, long iterationCount);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("System.LoadTest/<ExecuteParallelAsync>d__6")]
public static Task`1<Result> ExecuteParallelAsync(string testId, Action`1<long> action, long iterationCount, long tasksCount);
    [AsyncStateMachineAttribute("System.LoadTest/<ExecuteParallelAsync>d__14")]
[DebuggerStepThroughAttribute]
public static Task`1<Result> ExecuteParallelAsync(string testId, Func`2<long, Task> func, long iterationCount, long tasksCount);
    public static Tuple`2<Result, Result> ExecuteTransformation(long iterationCount, Func`2<long, TSource> initialize, Func`2<TSource, TTarget> forward, Func`2<TTarget, TSource> backward, Action`4<long, TSource, TTarget, TSource> onError);
}
public class System.MemoryStreamManager : object {
    private int capacity;
    private ConcurrentQueue`1<MemoryStream> freeStreams;
    public int Capacity { get; }
    public MemoryStreamManager(int capacity);
    public int get_Capacity();
    public sealed virtual void Dispose();
    public void Put(MemoryStream stream);
    public MemoryStream Get();
}
public class System.Range`1 : ValueType {
    private T begin;
    private T end;
    public T Begin { get; }
    public T End { get; }
    public Range`1(T begin, T end);
    private Range`1(SerializationInfo info, StreamingContext context);
    public sealed virtual int CompareTo(Range`1<T> other);
    public sealed virtual int CompareTo(T other);
    public sealed virtual bool Equals(Range`1<T> other);
    public sealed virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public T get_Begin();
    public T get_End();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_GreaterThan(Range`1<T> first, Range`1<T> second);
    public static bool op_LessThan(Range`1<T> first, Range`1<T> second);
    public static bool op_Equality(Range`1<T> first, Range`1<T> second);
    public static bool op_Inequality(Range`1<T> first, Range`1<T> second);
}
public abstract class System.ServerBase : WorkerBase {
    private LinkedList`1<KeyValuePair`2<Task`1<bool>, IServerRequestHandler>> activeTasks;
    private PerformanceCounter activeTasksCounter;
    private PerformanceCounter badRequestsPerSecondCounter;
    private string name;
    private IReadOnlyDictionary`2<string, PerformanceCounter> performanceCounters;
    private PerformanceCounter requestProcessingAverageBaseCounter;
    private PerformanceCounter requestProcessingAverageTimeCounter;
    private PerformanceCounter requestsPerSecondCounter;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<Task`1<bool>, IServerRequestHandler>, Task`1<bool>> CS$<>9__CachedAnonymousMethodDelegate1;
    protected IReadOnlyDictionary`2<string, PerformanceCounter> PerformanceCounters { get; }
    public string Name { get; }
    protected internal ServerBase(ServerSettings settings, DiagnosticsEventHandler diagnosticEventHandler);
    protected IReadOnlyDictionary`2<string, PerformanceCounter> get_PerformanceCounters();
    public sealed virtual string get_Name();
    protected virtual void ReleaseManagedResources();
    protected abstract virtual Task`1<IServerRequestHandler> TryAwaitRequestAsync();
    private bool FinalizeRequestIfCompleted(KeyValuePair`2<Task`1<bool>, IServerRequestHandler> pair);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("System.ServerBase/<RunAsync>d__2")]
public Task RunAsync();
    [CompilerGeneratedAttribute]
private static Task`1<bool> <RunAsync>b__0(KeyValuePair`2<Task`1<bool>, IServerRequestHandler> pair);
}
[DataContractAttribute]
public class System.ServerSettings : StringSettingsBase {
    private Dictionary`2<string, PerformanceCounterSettings> performanceCounters;
    [CompilerGeneratedAttribute]
private static Func`2<PerformanceCounterSettings, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [DataMemberAttribute]
public string EnvironmentId { get; public set; }
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public IDictionary`2<string, PerformanceCounterSettings> PerformanceCounters { get; }
    public virtual string get_EnvironmentId();
    public virtual void set_EnvironmentId(string value);
    public string get_Name();
    public void set_Name(string value);
    public IDictionary`2<string, PerformanceCounterSettings> get_PerformanceCounters();
    public virtual bool IsValid();
    [CompilerGeneratedAttribute]
private static bool <IsValid>b__0(PerformanceCounterSettings s);
}
[DataContractAttribute]
public abstract class System.StringSettingsBase : object {
    protected Dictionary`2<string, string> stringSettings;
    public virtual bool IsValid();
}
public class System.StringTemplate : object {
    private Encoding encoding;
    private IReadOnlyList`1<Segment> segments;
    private int segmentsCount;
    [CompilerGeneratedAttribute]
private static Func`2<Tuple`3<int, int, int>, int> CS$<>9__CachedAnonymousMethodDelegate1;
    public Encoding Encoding { get; }
    public StringTemplate(Encoding encoding, string template, String[] variables);
    public Encoding get_Encoding();
    public string Instantiate(String[] arguments);
    public void Instantiate(Stream stream, Byte[][] encodedArguments);
    public void Instantiate(Stream stream, String[] arguments);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("System.StringTemplate/<InstantiateAsync>d__2")]
public Task InstantiateAsync(Stream stream, Byte[][] encodedArguments);
    public Task InstantiateAsync(Stream stream, String[] arguments);
    [CompilerGeneratedAttribute]
private static int <.ctor>b__0(Tuple`3<int, int, int> x);
}
public class System.Threading.AlignedTimer : object {
    private AlignedTimerCallback callback;
    private TimeUnit interval;
    private TimeSpan shift;
    private Timer timer;
    private bool enabled;
    private DateTime nextInvocationTime;
    public bool Enabled { get; public set; }
    public TimeUnit Interval { get; }
    public TimeSpan Shift { get; }
    public AlignedTimer(AlignedTimerCallback callback, TimeUnit interval, TimeSpan shift);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public TimeUnit get_Interval();
    public TimeSpan get_Shift();
    public sealed virtual void Dispose();
    private void TimerCallback(object state);
    private void ScheduleNextInvocation();
}
public class System.Threading.AlignedTimerCallback : MulticastDelegate {
    public AlignedTimerCallback(object object, IntPtr method);
    public virtual void Invoke(DateTime invocationTime);
    public virtual IAsyncResult BeginInvoke(DateTime invocationTime, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Threading.Tasks.SequentialExecutor : object {
    private ConcurrentQueue`1<Func`1<Task>> queue;
    private Task currentTask;
    private UnhandledExceptionEventHandler OnException;
    public void add_OnException(UnhandledExceptionEventHandler value);
    public void remove_OnException(UnhandledExceptionEventHandler value);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("System.Threading.Tasks.SequentialExecutor/<RunAsync>d__0")]
[DebuggerStepThroughAttribute]
private Task RunAsync();
    public void Enqueue(Func`1<Task> function);
    public TaskAwaiter GetAwaiter();
    public void Wait();
}
public class System.TimeInterval : ValueType {
    public static TimeInterval Millisecond;
    public static TimeInterval Second;
    public static TimeInterval Minute;
    public static TimeInterval Hour;
    public static TimeInterval Day;
    private ulong length;
    private TimeUnit unit;
    public ulong Length { get; }
    public TimeUnit Unit { get; }
    public TimeInterval(TimeUnit unit, ulong length);
    private TimeInterval(SerializationInfo info, StreamingContext context);
    private static TimeInterval();
    public ulong get_Length();
    public TimeUnit get_Unit();
    public sealed virtual bool Equals(TimeInterval other);
    public sealed virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public static TimeSpan op_Implicit(TimeInterval value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static bool op_Equality(TimeInterval first, TimeInterval second);
    public static bool op_Inequality(TimeInterval first, TimeInterval second);
    public static TimeInterval op_Addition(TimeInterval interval, ulong length);
    public static TimeInterval op_Subtraction(TimeInterval interval, ulong length);
    public static TimeInterval Add(TimeInterval interval, ulong length);
    public static TimeInterval Subtract(TimeInterval interval, ulong length);
}
public enum System.TimeUnit : Enum {
    public long value__;
    public static TimeUnit None;
    public static TimeUnit Millisecond;
    public static TimeUnit Second;
    public static TimeUnit Minute;
    public static TimeUnit Hour;
    public static TimeUnit Day;
}
[TypeConverterAttribute("System.Value128Converter")]
public class System.Value128 : ValueType {
    public static UInt32 Base16EncodedSymbolsCount;
    public static UInt32 Base32EncodedSymbolsCount;
    public static UInt32 Base64EncodedSymbolsCount;
    private static int base16Mask;
    private static int base32Mask;
    private static int base64Mask;
    private static char paddingSymbol;
    private static IReadOnlyList`1<char> base16Map;
    private static IReadOnlyList`1<char> base32Map;
    private static IReadOnlyList`1<char> base64Map;
    public static Value128 Zero;
    public static Value128 One;
    private ulong higherHalf;
    private ulong lowerHalf;
    public ulong HigherHalf { get; }
    public ulong LowerHalf { get; }
    public Value128(ulong higherHalf, ulong lowerHalf);
    private Value128(SerializationInfo info, StreamingContext context);
    private static Value128();
    public sealed virtual int CompareTo(Value128 other);
    public sealed virtual bool Equals(Value128 other);
    public sealed virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public ulong get_HigherHalf();
    public ulong get_LowerHalf();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static bool op_GreaterThan(Value128 first, Value128 second);
    public static bool op_LessThan(Value128 first, Value128 second);
    public static bool op_Equality(Value128 first, Value128 second);
    public static bool op_Inequality(Value128 first, Value128 second);
    public static Value128 op_Addition(Value128 first, Value128 second);
    public static Value128 op_Subtraction(Value128 first, Value128 second);
    public static Value128 Add(Value128 first, Value128 second);
    public static Value128 Subtract(Value128 first, Value128 second);
    public string ToString(BaseEncoding encoding);
    public static bool TryConvert(string value, ushort startIndex, Value128& result, BaseEncoding encoding);
    public static Nullable`1<Value128> Convert(string value, ushort startIndex, BaseEncoding encoding);
    public static string op_Implicit(Value128 value);
    private string ToBase16String();
    private static bool TryConvertFromBase16String(string value, ushort startIndex, Value128& result);
    private string ToBase32String(bool usePadding);
    private static bool TryConvertFromBase32String(string value, ushort startIndex, Value128& result);
    private string ToBase64String(bool usePadding);
    private static bool TryConvertFromBase64String(string value, ushort startIndex, Value128& result);
    private static ulong Convert(IList`1<byte> value, int startIndex);
    private static void Convert(ulong value, int startIndex, IList`1<byte> result);
    public static Byte[] op_Implicit(Value128 value);
    public static bool TryConvert(Byte[] value, int startIndex, Value128& result);
    public static IPAddress op_Implicit(Value128 value);
    public static bool TryConvert(IPAddress value, Value128& result);
    public static Value128 op_Implicit(Guid value);
    public static Guid op_Implicit(Value128 value);
}
public class System.Value128Converter : TypeConverter {
    private static Type[] supportedTypes;
    private static Value128Converter();
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class System.ValueChangedEventArgs`1 : EventArgs {
    [CompilerGeneratedAttribute]
private T <CurrentValue>k__BackingField;
    [CompilerGeneratedAttribute]
private T <PreviousValue>k__BackingField;
    public T CurrentValue { get; private set; }
    public T PreviousValue { get; private set; }
    public ValueChangedEventArgs`1(T previousValue, T currentValue);
    [CompilerGeneratedAttribute]
public T get_CurrentValue();
    [CompilerGeneratedAttribute]
private void set_CurrentValue(T value);
    [CompilerGeneratedAttribute]
public T get_PreviousValue();
    [CompilerGeneratedAttribute]
private void set_PreviousValue(T value);
}
public abstract class System.WorkerBase : DisposableBase {
    private static IEnumerable`1<EntityStateTransition> workerWorkflow;
    private IEnumerable`1<EntityStateTransition> workflow;
    private EntityState state;
    private EventHandler`1<ValueChangedEventArgs`1<EntityState>> StateChanged;
    private DiagnosticsEventHandler DiagnosticEvent;
    public bool IsActive { get; }
    public string Name { get; }
    public EntityState State { get; protected set; }
    public IEnumerable`1<EntityStateTransition> Workflow { get; }
    protected WorkerBase(DiagnosticsEventHandler diagnosticEventHandler, IEnumerable`1<EntityStateTransition> workflowExtension);
    private static WorkerBase();
    public void add_StateChanged(EventHandler`1<ValueChangedEventArgs`1<EntityState>> value);
    public void remove_StateChanged(EventHandler`1<ValueChangedEventArgs`1<EntityState>> value);
    public void add_DiagnosticEvent(DiagnosticsEventHandler value);
    public void remove_DiagnosticEvent(DiagnosticsEventHandler value);
    public bool get_IsActive();
    public abstract virtual string get_Name();
    public EntityState get_State();
    protected void set_State(EntityState value);
    public IEnumerable`1<EntityStateTransition> get_Workflow();
    protected sealed virtual void ReleaseResources();
    protected abstract virtual void ReleaseManagedResources();
    private void OnStateChanged(object sender, ValueChangedEventArgs`1<EntityState> args);
    protected abstract virtual Task`1<bool> ExecuteActivateOperationsAsync(CancellationToken cancellationToken);
    protected abstract virtual Task ExecuteDeactivateOperationsAsync(CancellationToken cancellationToken);
    public void TraceEvent(EventLevel level, string message, string source);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("System.WorkerBase/<ActivateAsync>d__0")]
public Task`1<bool> ActivateAsync(CancellationToken cancellationToken);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("System.WorkerBase/<DeactivateAsync>d__4")]
public Task DeactivateAsync(CancellationToken cancellationToken);
}
