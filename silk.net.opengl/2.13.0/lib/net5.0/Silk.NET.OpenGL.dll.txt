[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NativeNameAttribute("Name", "AccumOp")]
public enum Silk.NET.OpenGL.AccumOp : Enum {
    public int value__;
}
[NativeNameAttribute("Name", "AlphaFunction")]
public enum Silk.NET.OpenGL.AlphaFunction : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_NEVER")]
public static AlphaFunction Never;
    [NativeNameAttribute("Name", "GL_LESS")]
public static AlphaFunction Less;
    [NativeNameAttribute("Name", "GL_EQUAL")]
public static AlphaFunction Equal;
    [NativeNameAttribute("Name", "GL_LEQUAL")]
public static AlphaFunction Lequal;
    [NativeNameAttribute("Name", "GL_GREATER")]
public static AlphaFunction Greater;
    [NativeNameAttribute("Name", "GL_NOTEQUAL")]
public static AlphaFunction Notequal;
    [NativeNameAttribute("Name", "GL_GEQUAL")]
public static AlphaFunction Gequal;
    [NativeNameAttribute("Name", "GL_ALWAYS")]
public static AlphaFunction Always;
}
[NativeNameAttribute("Name", "ArrayObjectPNameATI")]
public enum Silk.NET.OpenGL.ArrayObjectPNameATI : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_OBJECT_BUFFER_SIZE_ATI")]
public static ArrayObjectPNameATI ObjectBufferSizeAti;
    [NativeNameAttribute("Name", "GL_OBJECT_BUFFER_USAGE_ATI")]
public static ArrayObjectPNameATI ObjectBufferUsageAti;
}
[NativeNameAttribute("Name", "ArrayObjectUsageATI")]
public enum Silk.NET.OpenGL.ArrayObjectUsageATI : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_STATIC_ATI")]
public static ArrayObjectUsageATI StaticAti;
    [NativeNameAttribute("Name", "GL_DYNAMIC_ATI")]
public static ArrayObjectUsageATI DynamicAti;
}
[NativeNameAttribute("Name", "AtomicCounterBufferPName")]
public enum Silk.NET.OpenGL.AtomicCounterBufferPName : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER")]
public static AtomicCounterBufferPName AtomicCounterBufferReferencedByComputeShader;
    [NativeNameAttribute("Name", "GL_ATOMIC_COUNTER_BUFFER_BINDING")]
public static AtomicCounterBufferPName AtomicCounterBufferBinding;
    [NativeNameAttribute("Name", "GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE")]
public static AtomicCounterBufferPName AtomicCounterBufferDataSize;
    [NativeNameAttribute("Name", "GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS")]
public static AtomicCounterBufferPName AtomicCounterBufferActiveAtomicCounters;
    [NativeNameAttribute("Name", "GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES")]
public static AtomicCounterBufferPName AtomicCounterBufferActiveAtomicCounterIndices;
    [NativeNameAttribute("Name", "GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER")]
public static AtomicCounterBufferPName AtomicCounterBufferReferencedByVertexShader;
    [NativeNameAttribute("Name", "GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER")]
public static AtomicCounterBufferPName AtomicCounterBufferReferencedByTessControlShader;
    [NativeNameAttribute("Name", "GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER")]
public static AtomicCounterBufferPName AtomicCounterBufferReferencedByTessEvaluationShader;
    [NativeNameAttribute("Name", "GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER")]
public static AtomicCounterBufferPName AtomicCounterBufferReferencedByGeometryShader;
    [NativeNameAttribute("Name", "GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER")]
public static AtomicCounterBufferPName AtomicCounterBufferReferencedByFragmentShader;
}
[NativeNameAttribute("Name", "AttribMask")]
public enum Silk.NET.OpenGL.AttribMask : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_DEPTH_BUFFER_BIT")]
public static AttribMask DepthBufferBit;
    [NativeNameAttribute("Name", "GL_STENCIL_BUFFER_BIT")]
public static AttribMask StencilBufferBit;
    [NativeNameAttribute("Name", "GL_COLOR_BUFFER_BIT")]
public static AttribMask ColorBufferBit;
    [NativeNameAttribute("Name", "GL_MULTISAMPLE_BIT_ARB")]
public static AttribMask MultisampleBitArb;
    [NativeNameAttribute("Name", "GL_MULTISAMPLE_BIT_EXT")]
public static AttribMask MultisampleBitExt;
    [NativeNameAttribute("Name", "GL_MULTISAMPLE_BIT_3DFX")]
public static AttribMask MultisampleBit3Dfx;
}
[NativeNameAttribute("Name", "AttributeType")]
public enum Silk.NET.OpenGL.AttributeType : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_INT")]
public static AttributeType Int;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT")]
public static AttributeType UnsignedInt;
    [NativeNameAttribute("Name", "GL_FLOAT")]
public static AttributeType Float;
    [NativeNameAttribute("Name", "GL_DOUBLE")]
public static AttributeType Double;
    [NativeNameAttribute("Name", "GL_INT64_ARB")]
public static AttributeType Int64Arb;
    [NativeNameAttribute("Name", "GL_INT64_NV")]
public static AttributeType Int64NV;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT64_ARB")]
public static AttributeType UnsignedInt64Arb;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT64_NV")]
public static AttributeType UnsignedInt64NV;
    [NativeNameAttribute("Name", "GL_FLOAT_VEC2")]
public static AttributeType FloatVec2;
    [NativeNameAttribute("Name", "GL_FLOAT_VEC2_ARB")]
public static AttributeType FloatVec2Arb;
    [NativeNameAttribute("Name", "GL_FLOAT_VEC3")]
public static AttributeType FloatVec3;
    [NativeNameAttribute("Name", "GL_FLOAT_VEC3_ARB")]
public static AttributeType FloatVec3Arb;
    [NativeNameAttribute("Name", "GL_FLOAT_VEC4")]
public static AttributeType FloatVec4;
    [NativeNameAttribute("Name", "GL_FLOAT_VEC4_ARB")]
public static AttributeType FloatVec4Arb;
    [NativeNameAttribute("Name", "GL_INT_VEC2")]
public static AttributeType IntVec2;
    [NativeNameAttribute("Name", "GL_INT_VEC2_ARB")]
public static AttributeType IntVec2Arb;
    [NativeNameAttribute("Name", "GL_INT_VEC3")]
public static AttributeType IntVec3;
    [NativeNameAttribute("Name", "GL_INT_VEC3_ARB")]
public static AttributeType IntVec3Arb;
    [NativeNameAttribute("Name", "GL_INT_VEC4")]
public static AttributeType IntVec4;
    [NativeNameAttribute("Name", "GL_INT_VEC4_ARB")]
public static AttributeType IntVec4Arb;
    [NativeNameAttribute("Name", "GL_BOOL")]
public static AttributeType Bool;
    [NativeNameAttribute("Name", "GL_BOOL_ARB")]
public static AttributeType BoolArb;
    [NativeNameAttribute("Name", "GL_BOOL_VEC2")]
public static AttributeType BoolVec2;
    [NativeNameAttribute("Name", "GL_BOOL_VEC2_ARB")]
public static AttributeType BoolVec2Arb;
    [NativeNameAttribute("Name", "GL_BOOL_VEC3")]
public static AttributeType BoolVec3;
    [NativeNameAttribute("Name", "GL_BOOL_VEC3_ARB")]
public static AttributeType BoolVec3Arb;
    [NativeNameAttribute("Name", "GL_BOOL_VEC4")]
public static AttributeType BoolVec4;
    [NativeNameAttribute("Name", "GL_BOOL_VEC4_ARB")]
public static AttributeType BoolVec4Arb;
    [NativeNameAttribute("Name", "GL_FLOAT_MAT2")]
public static AttributeType FloatMat2;
    [NativeNameAttribute("Name", "GL_FLOAT_MAT2_ARB")]
public static AttributeType FloatMat2Arb;
    [NativeNameAttribute("Name", "GL_FLOAT_MAT3")]
public static AttributeType FloatMat3;
    [NativeNameAttribute("Name", "GL_FLOAT_MAT3_ARB")]
public static AttributeType FloatMat3Arb;
    [NativeNameAttribute("Name", "GL_FLOAT_MAT4")]
public static AttributeType FloatMat4;
    [NativeNameAttribute("Name", "GL_FLOAT_MAT4_ARB")]
public static AttributeType FloatMat4Arb;
    [NativeNameAttribute("Name", "GL_SAMPLER_1D")]
public static AttributeType Sampler1D;
    [NativeNameAttribute("Name", "GL_SAMPLER_1D_ARB")]
public static AttributeType Sampler1DArb;
    [NativeNameAttribute("Name", "GL_SAMPLER_2D")]
public static AttributeType Sampler2D;
    [NativeNameAttribute("Name", "GL_SAMPLER_2D_ARB")]
public static AttributeType Sampler2DArb;
    [NativeNameAttribute("Name", "GL_SAMPLER_3D")]
public static AttributeType Sampler3D;
    [NativeNameAttribute("Name", "GL_SAMPLER_3D_ARB")]
public static AttributeType Sampler3DArb;
    [NativeNameAttribute("Name", "GL_SAMPLER_3D_OES")]
public static AttributeType Sampler3DOes;
    [NativeNameAttribute("Name", "GL_SAMPLER_CUBE")]
public static AttributeType SamplerCube;
    [NativeNameAttribute("Name", "GL_SAMPLER_CUBE_ARB")]
public static AttributeType SamplerCubeArb;
    [NativeNameAttribute("Name", "GL_SAMPLER_1D_SHADOW")]
public static AttributeType Sampler1DShadow;
    [NativeNameAttribute("Name", "GL_SAMPLER_1D_SHADOW_ARB")]
public static AttributeType Sampler1DShadowArb;
    [NativeNameAttribute("Name", "GL_SAMPLER_2D_SHADOW")]
public static AttributeType Sampler2DShadow;
    [NativeNameAttribute("Name", "GL_SAMPLER_2D_SHADOW_ARB")]
public static AttributeType Sampler2DShadowArb;
    [NativeNameAttribute("Name", "GL_SAMPLER_2D_SHADOW_EXT")]
public static AttributeType Sampler2DShadowExt;
    [NativeNameAttribute("Name", "GL_SAMPLER_2D_RECT")]
public static AttributeType Sampler2DRect;
    [NativeNameAttribute("Name", "GL_SAMPLER_2D_RECT_ARB")]
public static AttributeType Sampler2DRectArb;
    [NativeNameAttribute("Name", "GL_SAMPLER_2D_RECT_SHADOW")]
public static AttributeType Sampler2DRectShadow;
    [NativeNameAttribute("Name", "GL_SAMPLER_2D_RECT_SHADOW_ARB")]
public static AttributeType Sampler2DRectShadowArb;
    [NativeNameAttribute("Name", "GL_FLOAT_MAT2x3")]
public static AttributeType FloatMat2x3;
    [NativeNameAttribute("Name", "GL_FLOAT_MAT2x3_NV")]
public static AttributeType FloatMat2x3NV;
    [NativeNameAttribute("Name", "GL_FLOAT_MAT2x4")]
public static AttributeType FloatMat2x4;
    [NativeNameAttribute("Name", "GL_FLOAT_MAT2x4_NV")]
public static AttributeType FloatMat2x4NV;
    [NativeNameAttribute("Name", "GL_FLOAT_MAT3x2")]
public static AttributeType FloatMat3x2;
    [NativeNameAttribute("Name", "GL_FLOAT_MAT3x2_NV")]
public static AttributeType FloatMat3x2NV;
    [NativeNameAttribute("Name", "GL_FLOAT_MAT3x4")]
public static AttributeType FloatMat3x4;
    [NativeNameAttribute("Name", "GL_FLOAT_MAT3x4_NV")]
public static AttributeType FloatMat3x4NV;
    [NativeNameAttribute("Name", "GL_FLOAT_MAT4x2")]
public static AttributeType FloatMat4x2;
    [NativeNameAttribute("Name", "GL_FLOAT_MAT4x2_NV")]
public static AttributeType FloatMat4x2NV;
    [NativeNameAttribute("Name", "GL_FLOAT_MAT4x3")]
public static AttributeType FloatMat4x3;
    [NativeNameAttribute("Name", "GL_FLOAT_MAT4x3_NV")]
public static AttributeType FloatMat4x3NV;
    [NativeNameAttribute("Name", "GL_SAMPLER_BUFFER")]
public static AttributeType SamplerBuffer;
    [NativeNameAttribute("Name", "GL_SAMPLER_1D_ARRAY_SHADOW")]
public static AttributeType Sampler1DArrayShadow;
    [NativeNameAttribute("Name", "GL_SAMPLER_2D_ARRAY_SHADOW")]
public static AttributeType Sampler2DArrayShadow;
    [NativeNameAttribute("Name", "GL_SAMPLER_CUBE_SHADOW")]
public static AttributeType SamplerCubeShadow;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_VEC2")]
public static AttributeType UnsignedIntVec2;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_VEC3")]
public static AttributeType UnsignedIntVec3;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_VEC4")]
public static AttributeType UnsignedIntVec4;
    [NativeNameAttribute("Name", "GL_INT_SAMPLER_1D")]
public static AttributeType IntSampler1D;
    [NativeNameAttribute("Name", "GL_INT_SAMPLER_2D")]
public static AttributeType IntSampler2D;
    [NativeNameAttribute("Name", "GL_INT_SAMPLER_3D")]
public static AttributeType IntSampler3D;
    [NativeNameAttribute("Name", "GL_INT_SAMPLER_CUBE")]
public static AttributeType IntSamplerCube;
    [NativeNameAttribute("Name", "GL_INT_SAMPLER_2D_RECT")]
public static AttributeType IntSampler2DRect;
    [NativeNameAttribute("Name", "GL_INT_SAMPLER_1D_ARRAY")]
public static AttributeType IntSampler1DArray;
    [NativeNameAttribute("Name", "GL_INT_SAMPLER_2D_ARRAY")]
public static AttributeType IntSampler2DArray;
    [NativeNameAttribute("Name", "GL_INT_SAMPLER_BUFFER")]
public static AttributeType IntSamplerBuffer;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_SAMPLER_1D")]
public static AttributeType UnsignedIntSampler1D;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_SAMPLER_2D")]
public static AttributeType UnsignedIntSampler2D;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_SAMPLER_3D")]
public static AttributeType UnsignedIntSampler3D;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_SAMPLER_CUBE")]
public static AttributeType UnsignedIntSamplerCube;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_SAMPLER_2D_RECT")]
public static AttributeType UnsignedIntSampler2DRect;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_SAMPLER_1D_ARRAY")]
public static AttributeType UnsignedIntSampler1DArray;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_SAMPLER_2D_ARRAY")]
public static AttributeType UnsignedIntSampler2DArray;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_SAMPLER_BUFFER")]
public static AttributeType UnsignedIntSamplerBuffer;
    [NativeNameAttribute("Name", "GL_DOUBLE_MAT2")]
public static AttributeType DoubleMat2;
    [NativeNameAttribute("Name", "GL_DOUBLE_MAT3")]
public static AttributeType DoubleMat3;
    [NativeNameAttribute("Name", "GL_DOUBLE_MAT4")]
public static AttributeType DoubleMat4;
    [NativeNameAttribute("Name", "GL_DOUBLE_MAT2x3")]
public static AttributeType DoubleMat2x3;
    [NativeNameAttribute("Name", "GL_DOUBLE_MAT2x4")]
public static AttributeType DoubleMat2x4;
    [NativeNameAttribute("Name", "GL_DOUBLE_MAT3x2")]
public static AttributeType DoubleMat3x2;
    [NativeNameAttribute("Name", "GL_DOUBLE_MAT3x4")]
public static AttributeType DoubleMat3x4;
    [NativeNameAttribute("Name", "GL_DOUBLE_MAT4x2")]
public static AttributeType DoubleMat4x2;
    [NativeNameAttribute("Name", "GL_DOUBLE_MAT4x3")]
public static AttributeType DoubleMat4x3;
    [NativeNameAttribute("Name", "GL_INT64_VEC2_ARB")]
public static AttributeType Int64Vec2Arb;
    [NativeNameAttribute("Name", "GL_INT64_VEC3_ARB")]
public static AttributeType Int64Vec3Arb;
    [NativeNameAttribute("Name", "GL_INT64_VEC4_ARB")]
public static AttributeType Int64Vec4Arb;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT64_VEC2_ARB")]
public static AttributeType UnsignedInt64Vec2Arb;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT64_VEC3_ARB")]
public static AttributeType UnsignedInt64Vec3Arb;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT64_VEC4_ARB")]
public static AttributeType UnsignedInt64Vec4Arb;
    [NativeNameAttribute("Name", "GL_DOUBLE_VEC2")]
public static AttributeType DoubleVec2;
    [NativeNameAttribute("Name", "GL_DOUBLE_VEC3")]
public static AttributeType DoubleVec3;
    [NativeNameAttribute("Name", "GL_DOUBLE_VEC4")]
public static AttributeType DoubleVec4;
    [NativeNameAttribute("Name", "GL_SAMPLER_CUBE_MAP_ARRAY")]
public static AttributeType SamplerCubeMapArray;
    [NativeNameAttribute("Name", "GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW")]
public static AttributeType SamplerCubeMapArrayShadow;
    [NativeNameAttribute("Name", "GL_INT_SAMPLER_CUBE_MAP_ARRAY")]
public static AttributeType IntSamplerCubeMapArray;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY")]
public static AttributeType UnsignedIntSamplerCubeMapArray;
    [NativeNameAttribute("Name", "GL_IMAGE_1D")]
public static AttributeType Image1D;
    [NativeNameAttribute("Name", "GL_IMAGE_2D")]
public static AttributeType Image2D;
    [NativeNameAttribute("Name", "GL_IMAGE_3D")]
public static AttributeType Image3D;
    [NativeNameAttribute("Name", "GL_IMAGE_2D_RECT")]
public static AttributeType Image2DRect;
    [NativeNameAttribute("Name", "GL_IMAGE_CUBE")]
public static AttributeType ImageCube;
    [NativeNameAttribute("Name", "GL_IMAGE_BUFFER")]
public static AttributeType ImageBuffer;
    [NativeNameAttribute("Name", "GL_IMAGE_1D_ARRAY")]
public static AttributeType Image1DArray;
    [NativeNameAttribute("Name", "GL_IMAGE_2D_ARRAY")]
public static AttributeType Image2DArray;
    [NativeNameAttribute("Name", "GL_IMAGE_CUBE_MAP_ARRAY")]
public static AttributeType ImageCubeMapArray;
    [NativeNameAttribute("Name", "GL_IMAGE_2D_MULTISAMPLE")]
public static AttributeType Image2DMultisample;
    [NativeNameAttribute("Name", "GL_IMAGE_2D_MULTISAMPLE_ARRAY")]
public static AttributeType Image2DMultisampleArray;
    [NativeNameAttribute("Name", "GL_INT_IMAGE_1D")]
public static AttributeType IntImage1D;
    [NativeNameAttribute("Name", "GL_INT_IMAGE_2D")]
public static AttributeType IntImage2D;
    [NativeNameAttribute("Name", "GL_INT_IMAGE_3D")]
public static AttributeType IntImage3D;
    [NativeNameAttribute("Name", "GL_INT_IMAGE_2D_RECT")]
public static AttributeType IntImage2DRect;
    [NativeNameAttribute("Name", "GL_INT_IMAGE_CUBE")]
public static AttributeType IntImageCube;
    [NativeNameAttribute("Name", "GL_INT_IMAGE_BUFFER")]
public static AttributeType IntImageBuffer;
    [NativeNameAttribute("Name", "GL_INT_IMAGE_1D_ARRAY")]
public static AttributeType IntImage1DArray;
    [NativeNameAttribute("Name", "GL_INT_IMAGE_2D_ARRAY")]
public static AttributeType IntImage2DArray;
    [NativeNameAttribute("Name", "GL_INT_IMAGE_CUBE_MAP_ARRAY")]
public static AttributeType IntImageCubeMapArray;
    [NativeNameAttribute("Name", "GL_INT_IMAGE_2D_MULTISAMPLE")]
public static AttributeType IntImage2DMultisample;
    [NativeNameAttribute("Name", "GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY")]
public static AttributeType IntImage2DMultisampleArray;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_IMAGE_1D")]
public static AttributeType UnsignedIntImage1D;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_IMAGE_2D")]
public static AttributeType UnsignedIntImage2D;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_IMAGE_3D")]
public static AttributeType UnsignedIntImage3D;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_IMAGE_2D_RECT")]
public static AttributeType UnsignedIntImage2DRect;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_IMAGE_CUBE")]
public static AttributeType UnsignedIntImageCube;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_IMAGE_BUFFER")]
public static AttributeType UnsignedIntImageBuffer;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_IMAGE_1D_ARRAY")]
public static AttributeType UnsignedIntImage1DArray;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_IMAGE_2D_ARRAY")]
public static AttributeType UnsignedIntImage2DArray;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY")]
public static AttributeType UnsignedIntImageCubeMapArray;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE")]
public static AttributeType UnsignedIntImage2DMultisample;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY")]
public static AttributeType UnsignedIntImage2DMultisampleArray;
    [NativeNameAttribute("Name", "GL_SAMPLER_2D_MULTISAMPLE")]
public static AttributeType Sampler2DMultisample;
    [NativeNameAttribute("Name", "GL_INT_SAMPLER_2D_MULTISAMPLE")]
public static AttributeType IntSampler2DMultisample;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE")]
public static AttributeType UnsignedIntSampler2DMultisample;
    [NativeNameAttribute("Name", "GL_SAMPLER_2D_MULTISAMPLE_ARRAY")]
public static AttributeType Sampler2DMultisampleArray;
    [NativeNameAttribute("Name", "GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY")]
public static AttributeType IntSampler2DMultisampleArray;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY")]
public static AttributeType UnsignedIntSampler2DMultisampleArray;
}
[NativeNameAttribute("Name", "BindTransformFeedbackTarget")]
public enum Silk.NET.OpenGL.BindTransformFeedbackTarget : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_TRANSFORM_FEEDBACK")]
public static BindTransformFeedbackTarget TransformFeedback;
}
[NativeNameAttribute("Name", "BinormalPointerTypeEXT")]
public enum Silk.NET.OpenGL.BinormalPointerTypeEXT : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_BYTE")]
public static BinormalPointerTypeEXT Byte;
    [NativeNameAttribute("Name", "GL_SHORT")]
public static BinormalPointerTypeEXT Short;
    [NativeNameAttribute("Name", "GL_INT")]
public static BinormalPointerTypeEXT Int;
    [NativeNameAttribute("Name", "GL_FLOAT")]
public static BinormalPointerTypeEXT Float;
    [NativeNameAttribute("Name", "GL_DOUBLE")]
public static BinormalPointerTypeEXT Double;
    [NativeNameAttribute("Name", "GL_DOUBLE_EXT")]
public static BinormalPointerTypeEXT DoubleExt;
}
[NativeNameAttribute("Name", "BlendEquationModeEXT")]
public enum Silk.NET.OpenGL.BlendEquationModeEXT : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_FUNC_ADD")]
public static BlendEquationModeEXT FuncAdd;
    [NativeNameAttribute("Name", "GL_FUNC_ADD_EXT")]
public static BlendEquationModeEXT FuncAddExt;
    [NativeNameAttribute("Name", "GL_MIN")]
public static BlendEquationModeEXT Min;
    [NativeNameAttribute("Name", "GL_MIN_EXT")]
public static BlendEquationModeEXT MinExt;
    [NativeNameAttribute("Name", "GL_MAX")]
public static BlendEquationModeEXT Max;
    [NativeNameAttribute("Name", "GL_MAX_EXT")]
public static BlendEquationModeEXT MaxExt;
    [NativeNameAttribute("Name", "GL_FUNC_SUBTRACT")]
public static BlendEquationModeEXT FuncSubtract;
    [NativeNameAttribute("Name", "GL_FUNC_SUBTRACT_EXT")]
public static BlendEquationModeEXT FuncSubtractExt;
    [NativeNameAttribute("Name", "GL_FUNC_REVERSE_SUBTRACT")]
public static BlendEquationModeEXT FuncReverseSubtract;
    [NativeNameAttribute("Name", "GL_FUNC_REVERSE_SUBTRACT_EXT")]
public static BlendEquationModeEXT FuncReverseSubtractExt;
    [NativeNameAttribute("Name", "GL_ALPHA_MIN_SGIX")]
public static BlendEquationModeEXT AlphaMinSgix;
    [NativeNameAttribute("Name", "GL_ALPHA_MAX_SGIX")]
public static BlendEquationModeEXT AlphaMaxSgix;
}
[NativeNameAttribute("Name", "BlendingFactor")]
public enum Silk.NET.OpenGL.BlendingFactor : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_ZERO")]
public static BlendingFactor Zero;
    [NativeNameAttribute("Name", "GL_ONE")]
public static BlendingFactor One;
    [NativeNameAttribute("Name", "GL_SRC_COLOR")]
public static BlendingFactor SrcColor;
    [NativeNameAttribute("Name", "GL_ONE_MINUS_SRC_COLOR")]
public static BlendingFactor OneMinusSrcColor;
    [NativeNameAttribute("Name", "GL_SRC_ALPHA")]
public static BlendingFactor SrcAlpha;
    [NativeNameAttribute("Name", "GL_ONE_MINUS_SRC_ALPHA")]
public static BlendingFactor OneMinusSrcAlpha;
    [NativeNameAttribute("Name", "GL_DST_ALPHA")]
public static BlendingFactor DstAlpha;
    [NativeNameAttribute("Name", "GL_ONE_MINUS_DST_ALPHA")]
public static BlendingFactor OneMinusDstAlpha;
    [NativeNameAttribute("Name", "GL_DST_COLOR")]
public static BlendingFactor DstColor;
    [NativeNameAttribute("Name", "GL_ONE_MINUS_DST_COLOR")]
public static BlendingFactor OneMinusDstColor;
    [NativeNameAttribute("Name", "GL_SRC_ALPHA_SATURATE")]
public static BlendingFactor SrcAlphaSaturate;
    [NativeNameAttribute("Name", "GL_CONSTANT_COLOR")]
public static BlendingFactor ConstantColor;
    [NativeNameAttribute("Name", "GL_ONE_MINUS_CONSTANT_COLOR")]
public static BlendingFactor OneMinusConstantColor;
    [NativeNameAttribute("Name", "GL_CONSTANT_ALPHA")]
public static BlendingFactor ConstantAlpha;
    [NativeNameAttribute("Name", "GL_ONE_MINUS_CONSTANT_ALPHA")]
public static BlendingFactor OneMinusConstantAlpha;
    [NativeNameAttribute("Name", "GL_SRC1_ALPHA")]
public static BlendingFactor Src1Alpha;
    [NativeNameAttribute("Name", "GL_SRC1_COLOR")]
public static BlendingFactor Src1Color;
    [NativeNameAttribute("Name", "GL_ONE_MINUS_SRC1_COLOR")]
public static BlendingFactor OneMinusSrc1Color;
    [NativeNameAttribute("Name", "GL_ONE_MINUS_SRC1_ALPHA")]
public static BlendingFactor OneMinusSrc1Alpha;
}
[NativeNameAttribute("Name", "BlitFramebufferFilter")]
public enum Silk.NET.OpenGL.BlitFramebufferFilter : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_NEAREST")]
public static BlitFramebufferFilter Nearest;
    [NativeNameAttribute("Name", "GL_LINEAR")]
public static BlitFramebufferFilter Linear;
}
[NativeNameAttribute("Name", "Boolean")]
public enum Silk.NET.OpenGL.Boolean : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_FALSE")]
public static Boolean False;
    [NativeNameAttribute("Name", "GL_TRUE")]
public static Boolean True;
}
[NativeNameAttribute("Name", "buffer")]
public class Silk.NET.OpenGL.Buffer : ValueType {
    [NativeNameAttribute("Type", "")]
[NativeNameAttribute("Type.Name", "")]
[NativeNameAttribute("Name", "")]
public UInt32 Handle;
    public Buffer(Nullable`1<UInt32> handle);
}
[NativeNameAttribute("Name", "BufferAccessARB")]
public enum Silk.NET.OpenGL.BufferAccessARB : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_READ_ONLY")]
public static BufferAccessARB ReadOnly;
    [NativeNameAttribute("Name", "GL_WRITE_ONLY")]
public static BufferAccessARB WriteOnly;
    [NativeNameAttribute("Name", "GL_READ_WRITE")]
public static BufferAccessARB ReadWrite;
}
[NativeNameAttribute("Name", "BufferBitQCOM")]
public enum Silk.NET.OpenGL.BufferBitQCOM : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_COLOR_BUFFER_BIT0_QCOM")]
public static BufferBitQCOM ColorBufferBit0QCom;
    [NativeNameAttribute("Name", "GL_COLOR_BUFFER_BIT1_QCOM")]
public static BufferBitQCOM ColorBufferBit1QCom;
    [NativeNameAttribute("Name", "GL_COLOR_BUFFER_BIT2_QCOM")]
public static BufferBitQCOM ColorBufferBit2QCom;
    [NativeNameAttribute("Name", "GL_COLOR_BUFFER_BIT3_QCOM")]
public static BufferBitQCOM ColorBufferBit3QCom;
    [NativeNameAttribute("Name", "GL_COLOR_BUFFER_BIT4_QCOM")]
public static BufferBitQCOM ColorBufferBit4QCom;
    [NativeNameAttribute("Name", "GL_COLOR_BUFFER_BIT5_QCOM")]
public static BufferBitQCOM ColorBufferBit5QCom;
    [NativeNameAttribute("Name", "GL_COLOR_BUFFER_BIT6_QCOM")]
public static BufferBitQCOM ColorBufferBit6QCom;
    [NativeNameAttribute("Name", "GL_COLOR_BUFFER_BIT7_QCOM")]
public static BufferBitQCOM ColorBufferBit7QCom;
    [NativeNameAttribute("Name", "GL_DEPTH_BUFFER_BIT0_QCOM")]
public static BufferBitQCOM DepthBufferBit0QCom;
    [NativeNameAttribute("Name", "GL_DEPTH_BUFFER_BIT1_QCOM")]
public static BufferBitQCOM DepthBufferBit1QCom;
    [NativeNameAttribute("Name", "GL_DEPTH_BUFFER_BIT2_QCOM")]
public static BufferBitQCOM DepthBufferBit2QCom;
    [NativeNameAttribute("Name", "GL_DEPTH_BUFFER_BIT3_QCOM")]
public static BufferBitQCOM DepthBufferBit3QCom;
    [NativeNameAttribute("Name", "GL_DEPTH_BUFFER_BIT4_QCOM")]
public static BufferBitQCOM DepthBufferBit4QCom;
    [NativeNameAttribute("Name", "GL_DEPTH_BUFFER_BIT5_QCOM")]
public static BufferBitQCOM DepthBufferBit5QCom;
    [NativeNameAttribute("Name", "GL_DEPTH_BUFFER_BIT6_QCOM")]
public static BufferBitQCOM DepthBufferBit6QCom;
    [NativeNameAttribute("Name", "GL_DEPTH_BUFFER_BIT7_QCOM")]
public static BufferBitQCOM DepthBufferBit7QCom;
    [NativeNameAttribute("Name", "GL_STENCIL_BUFFER_BIT0_QCOM")]
public static BufferBitQCOM StencilBufferBit0QCom;
    [NativeNameAttribute("Name", "GL_STENCIL_BUFFER_BIT1_QCOM")]
public static BufferBitQCOM StencilBufferBit1QCom;
    [NativeNameAttribute("Name", "GL_STENCIL_BUFFER_BIT2_QCOM")]
public static BufferBitQCOM StencilBufferBit2QCom;
    [NativeNameAttribute("Name", "GL_STENCIL_BUFFER_BIT3_QCOM")]
public static BufferBitQCOM StencilBufferBit3QCom;
    [NativeNameAttribute("Name", "GL_STENCIL_BUFFER_BIT4_QCOM")]
public static BufferBitQCOM StencilBufferBit4QCom;
    [NativeNameAttribute("Name", "GL_STENCIL_BUFFER_BIT5_QCOM")]
public static BufferBitQCOM StencilBufferBit5QCom;
    [NativeNameAttribute("Name", "GL_STENCIL_BUFFER_BIT6_QCOM")]
public static BufferBitQCOM StencilBufferBit6QCom;
    [NativeNameAttribute("Name", "GL_STENCIL_BUFFER_BIT7_QCOM")]
public static BufferBitQCOM StencilBufferBit7QCom;
    [NativeNameAttribute("Name", "GL_MULTISAMPLE_BUFFER_BIT0_QCOM")]
public static BufferBitQCOM MultisampleBufferBit0QCom;
    [NativeNameAttribute("Name", "GL_MULTISAMPLE_BUFFER_BIT1_QCOM")]
public static BufferBitQCOM MultisampleBufferBit1QCom;
    [NativeNameAttribute("Name", "GL_MULTISAMPLE_BUFFER_BIT2_QCOM")]
public static BufferBitQCOM MultisampleBufferBit2QCom;
    [NativeNameAttribute("Name", "GL_MULTISAMPLE_BUFFER_BIT3_QCOM")]
public static BufferBitQCOM MultisampleBufferBit3QCom;
    [NativeNameAttribute("Name", "GL_MULTISAMPLE_BUFFER_BIT4_QCOM")]
public static BufferBitQCOM MultisampleBufferBit4QCom;
    [NativeNameAttribute("Name", "GL_MULTISAMPLE_BUFFER_BIT5_QCOM")]
public static BufferBitQCOM MultisampleBufferBit5QCom;
    [NativeNameAttribute("Name", "GL_MULTISAMPLE_BUFFER_BIT6_QCOM")]
public static BufferBitQCOM MultisampleBufferBit6QCom;
    [NativeNameAttribute("Name", "GL_MULTISAMPLE_BUFFER_BIT7_QCOM")]
public static BufferBitQCOM MultisampleBufferBit7QCom;
}
[NativeNameAttribute("Name", "Buffer")]
public enum Silk.NET.OpenGL.BufferKind : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_COLOR")]
public static BufferKind Color;
    [NativeNameAttribute("Name", "GL_DEPTH")]
public static BufferKind Depth;
    [NativeNameAttribute("Name", "GL_STENCIL")]
public static BufferKind Stencil;
}
[NativeNameAttribute("Name", "BufferPNameARB")]
public enum Silk.NET.OpenGL.BufferPNameARB : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_BUFFER_IMMUTABLE_STORAGE")]
public static BufferPNameARB BufferImmutableStorage;
    [NativeNameAttribute("Name", "GL_BUFFER_STORAGE_FLAGS")]
public static BufferPNameARB BufferStorageFlags;
    [NativeNameAttribute("Name", "GL_BUFFER_SIZE")]
public static BufferPNameARB BufferSize;
    [NativeNameAttribute("Name", "GL_BUFFER_SIZE_ARB")]
public static BufferPNameARB BufferSizeArb;
    [NativeNameAttribute("Name", "GL_BUFFER_USAGE")]
public static BufferPNameARB BufferUsage;
    [NativeNameAttribute("Name", "GL_BUFFER_USAGE_ARB")]
public static BufferPNameARB BufferUsageArb;
    [NativeNameAttribute("Name", "GL_BUFFER_ACCESS")]
public static BufferPNameARB BufferAccess;
    [NativeNameAttribute("Name", "GL_BUFFER_ACCESS_ARB")]
public static BufferPNameARB BufferAccessArb;
    [NativeNameAttribute("Name", "GL_BUFFER_MAPPED")]
public static BufferPNameARB BufferMapped;
    [NativeNameAttribute("Name", "GL_BUFFER_MAPPED_ARB")]
public static BufferPNameARB BufferMappedArb;
    [NativeNameAttribute("Name", "GL_BUFFER_ACCESS_FLAGS")]
public static BufferPNameARB BufferAccessFlags;
    [NativeNameAttribute("Name", "GL_BUFFER_MAP_LENGTH")]
public static BufferPNameARB BufferMapLength;
    [NativeNameAttribute("Name", "GL_BUFFER_MAP_OFFSET")]
public static BufferPNameARB BufferMapOffset;
}
[NativeNameAttribute("Name", "BufferPointerNameARB")]
public enum Silk.NET.OpenGL.BufferPointerNameARB : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_BUFFER_MAP_POINTER")]
public static BufferPointerNameARB BufferMapPointer;
    [NativeNameAttribute("Name", "GL_BUFFER_MAP_POINTER_ARB")]
public static BufferPointerNameARB BufferMapPointerArb;
}
[NativeNameAttribute("Name", "BufferStorageMask")]
public enum Silk.NET.OpenGL.BufferStorageMask : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_DYNAMIC_STORAGE_BIT")]
public static BufferStorageMask DynamicStorageBit;
    [NativeNameAttribute("Name", "GL_DYNAMIC_STORAGE_BIT_EXT")]
public static BufferStorageMask DynamicStorageBitExt;
    [NativeNameAttribute("Name", "GL_CLIENT_STORAGE_BIT")]
public static BufferStorageMask ClientStorageBit;
    [NativeNameAttribute("Name", "GL_CLIENT_STORAGE_BIT_EXT")]
public static BufferStorageMask ClientStorageBitExt;
    [NativeNameAttribute("Name", "GL_SPARSE_STORAGE_BIT_ARB")]
public static BufferStorageMask SparseStorageBitArb;
    [NativeNameAttribute("Name", "GL_LGPU_SEPARATE_STORAGE_BIT_NVX")]
public static BufferStorageMask LgpuSeparateStorageBitNvx;
    [NativeNameAttribute("Name", "GL_PER_GPU_STORAGE_BIT_NV")]
public static BufferStorageMask PerGpuStorageBitNV;
    [NativeNameAttribute("Name", "GL_EXTERNAL_STORAGE_BIT_NVX")]
public static BufferStorageMask ExternalStorageBitNvx;
    [NativeNameAttribute("Name", "GL_MAP_READ_BIT")]
public static BufferStorageMask MapReadBit;
    [NativeNameAttribute("Name", "GL_MAP_READ_BIT_EXT")]
public static BufferStorageMask MapReadBitExt;
    [NativeNameAttribute("Name", "GL_MAP_WRITE_BIT")]
public static BufferStorageMask MapWriteBit;
    [NativeNameAttribute("Name", "GL_MAP_WRITE_BIT_EXT")]
public static BufferStorageMask MapWriteBitExt;
    [NativeNameAttribute("Name", "GL_MAP_PERSISTENT_BIT")]
public static BufferStorageMask MapPersistentBit;
    [NativeNameAttribute("Name", "GL_MAP_PERSISTENT_BIT_EXT")]
public static BufferStorageMask MapPersistentBitExt;
    [NativeNameAttribute("Name", "GL_MAP_COHERENT_BIT")]
public static BufferStorageMask MapCoherentBit;
    [NativeNameAttribute("Name", "GL_MAP_COHERENT_BIT_EXT")]
public static BufferStorageMask MapCoherentBitExt;
}
[NativeNameAttribute("Name", "BufferStorageTarget")]
public enum Silk.NET.OpenGL.BufferStorageTarget : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_ARRAY_BUFFER")]
public static BufferStorageTarget ArrayBuffer;
    [NativeNameAttribute("Name", "GL_ELEMENT_ARRAY_BUFFER")]
public static BufferStorageTarget ElementArrayBuffer;
    [NativeNameAttribute("Name", "GL_PIXEL_PACK_BUFFER")]
public static BufferStorageTarget PixelPackBuffer;
    [NativeNameAttribute("Name", "GL_PIXEL_UNPACK_BUFFER")]
public static BufferStorageTarget PixelUnpackBuffer;
    [NativeNameAttribute("Name", "GL_UNIFORM_BUFFER")]
public static BufferStorageTarget UniformBuffer;
    [NativeNameAttribute("Name", "GL_TEXTURE_BUFFER")]
public static BufferStorageTarget TextureBuffer;
    [NativeNameAttribute("Name", "GL_TRANSFORM_FEEDBACK_BUFFER")]
public static BufferStorageTarget TransformFeedbackBuffer;
    [NativeNameAttribute("Name", "GL_COPY_READ_BUFFER")]
public static BufferStorageTarget CopyReadBuffer;
    [NativeNameAttribute("Name", "GL_COPY_WRITE_BUFFER")]
public static BufferStorageTarget CopyWriteBuffer;
    [NativeNameAttribute("Name", "GL_DRAW_INDIRECT_BUFFER")]
public static BufferStorageTarget DrawIndirectBuffer;
    [NativeNameAttribute("Name", "GL_SHADER_STORAGE_BUFFER")]
public static BufferStorageTarget ShaderStorageBuffer;
    [NativeNameAttribute("Name", "GL_DISPATCH_INDIRECT_BUFFER")]
public static BufferStorageTarget DispatchIndirectBuffer;
    [NativeNameAttribute("Name", "GL_QUERY_BUFFER")]
public static BufferStorageTarget QueryBuffer;
    [NativeNameAttribute("Name", "GL_ATOMIC_COUNTER_BUFFER")]
public static BufferStorageTarget AtomicCounterBuffer;
}
[NativeNameAttribute("Name", "BufferTargetARB")]
public enum Silk.NET.OpenGL.BufferTargetARB : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_PARAMETER_BUFFER")]
public static BufferTargetARB ParameterBuffer;
    [NativeNameAttribute("Name", "GL_ARRAY_BUFFER")]
public static BufferTargetARB ArrayBuffer;
    [NativeNameAttribute("Name", "GL_ELEMENT_ARRAY_BUFFER")]
public static BufferTargetARB ElementArrayBuffer;
    [NativeNameAttribute("Name", "GL_PIXEL_PACK_BUFFER")]
public static BufferTargetARB PixelPackBuffer;
    [NativeNameAttribute("Name", "GL_PIXEL_UNPACK_BUFFER")]
public static BufferTargetARB PixelUnpackBuffer;
    [NativeNameAttribute("Name", "GL_UNIFORM_BUFFER")]
public static BufferTargetARB UniformBuffer;
    [NativeNameAttribute("Name", "GL_TEXTURE_BUFFER")]
public static BufferTargetARB TextureBuffer;
    [NativeNameAttribute("Name", "GL_TRANSFORM_FEEDBACK_BUFFER")]
public static BufferTargetARB TransformFeedbackBuffer;
    [NativeNameAttribute("Name", "GL_COPY_READ_BUFFER")]
public static BufferTargetARB CopyReadBuffer;
    [NativeNameAttribute("Name", "GL_COPY_WRITE_BUFFER")]
public static BufferTargetARB CopyWriteBuffer;
    [NativeNameAttribute("Name", "GL_DRAW_INDIRECT_BUFFER")]
public static BufferTargetARB DrawIndirectBuffer;
    [NativeNameAttribute("Name", "GL_SHADER_STORAGE_BUFFER")]
public static BufferTargetARB ShaderStorageBuffer;
    [NativeNameAttribute("Name", "GL_DISPATCH_INDIRECT_BUFFER")]
public static BufferTargetARB DispatchIndirectBuffer;
    [NativeNameAttribute("Name", "GL_QUERY_BUFFER")]
public static BufferTargetARB QueryBuffer;
    [NativeNameAttribute("Name", "GL_ATOMIC_COUNTER_BUFFER")]
public static BufferTargetARB AtomicCounterBuffer;
}
[NativeNameAttribute("Name", "BufferUsageARB")]
public enum Silk.NET.OpenGL.BufferUsageARB : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_STREAM_DRAW")]
public static BufferUsageARB StreamDraw;
    [NativeNameAttribute("Name", "GL_STREAM_READ")]
public static BufferUsageARB StreamRead;
    [NativeNameAttribute("Name", "GL_STREAM_COPY")]
public static BufferUsageARB StreamCopy;
    [NativeNameAttribute("Name", "GL_STATIC_DRAW")]
public static BufferUsageARB StaticDraw;
    [NativeNameAttribute("Name", "GL_STATIC_READ")]
public static BufferUsageARB StaticRead;
    [NativeNameAttribute("Name", "GL_STATIC_COPY")]
public static BufferUsageARB StaticCopy;
    [NativeNameAttribute("Name", "GL_DYNAMIC_DRAW")]
public static BufferUsageARB DynamicDraw;
    [NativeNameAttribute("Name", "GL_DYNAMIC_READ")]
public static BufferUsageARB DynamicRead;
    [NativeNameAttribute("Name", "GL_DYNAMIC_COPY")]
public static BufferUsageARB DynamicCopy;
}
[NativeNameAttribute("Name", "CheckFramebufferStatusTarget")]
public enum Silk.NET.OpenGL.CheckFramebufferStatusTarget : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_READ_FRAMEBUFFER")]
public static CheckFramebufferStatusTarget ReadFramebuffer;
    [NativeNameAttribute("Name", "GL_DRAW_FRAMEBUFFER")]
public static CheckFramebufferStatusTarget DrawFramebuffer;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER")]
public static CheckFramebufferStatusTarget Framebuffer;
}
[NativeNameAttribute("Name", "ClampColorModeARB")]
public enum Silk.NET.OpenGL.ClampColorModeARB : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_FALSE")]
public static ClampColorModeARB False;
    [NativeNameAttribute("Name", "GL_TRUE")]
public static ClampColorModeARB True;
    [NativeNameAttribute("Name", "GL_FIXED_ONLY")]
public static ClampColorModeARB FixedOnly;
    [NativeNameAttribute("Name", "GL_FIXED_ONLY_ARB")]
public static ClampColorModeARB FixedOnlyArb;
}
[NativeNameAttribute("Name", "ClampColorTargetARB")]
public enum Silk.NET.OpenGL.ClampColorTargetARB : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_CLAMP_VERTEX_COLOR_ARB")]
public static ClampColorTargetARB ClampVertexColorArb;
    [NativeNameAttribute("Name", "GL_CLAMP_FRAGMENT_COLOR_ARB")]
public static ClampColorTargetARB ClampFragmentColorArb;
    [NativeNameAttribute("Name", "GL_CLAMP_READ_COLOR")]
public static ClampColorTargetARB ClampReadColor;
    [NativeNameAttribute("Name", "GL_CLAMP_READ_COLOR_ARB")]
public static ClampColorTargetARB ClampReadColorArb;
}
[NativeNameAttribute("Name", "ClearBufferMask")]
public enum Silk.NET.OpenGL.ClearBufferMask : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_DEPTH_BUFFER_BIT")]
public static ClearBufferMask DepthBufferBit;
    [NativeNameAttribute("Name", "GL_STENCIL_BUFFER_BIT")]
public static ClearBufferMask StencilBufferBit;
    [NativeNameAttribute("Name", "GL_COLOR_BUFFER_BIT")]
public static ClearBufferMask ColorBufferBit;
    [NativeNameAttribute("Name", "GL_COVERAGE_BUFFER_BIT_NV")]
public static ClearBufferMask CoverageBufferBitNV;
}
[NativeNameAttribute("Name", "ClientAttribMask")]
public enum Silk.NET.OpenGL.ClientAttribMask : Enum {
    public int value__;
}
[NativeNameAttribute("Name", "ClipControlDepth")]
public enum Silk.NET.OpenGL.ClipControlDepth : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_NEGATIVE_ONE_TO_ONE")]
public static ClipControlDepth NegativeOneToOne;
    [NativeNameAttribute("Name", "GL_ZERO_TO_ONE")]
public static ClipControlDepth ZeroToOne;
}
[NativeNameAttribute("Name", "ClipControlOrigin")]
public enum Silk.NET.OpenGL.ClipControlOrigin : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_LOWER_LEFT")]
public static ClipControlOrigin LowerLeft;
    [NativeNameAttribute("Name", "GL_UPPER_LEFT")]
public static ClipControlOrigin UpperLeft;
}
[NativeNameAttribute("Name", "ClipPlaneName")]
public enum Silk.NET.OpenGL.ClipPlaneName : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_CLIP_DISTANCE0")]
public static ClipPlaneName ClipDistance0;
    [NativeNameAttribute("Name", "GL_CLIP_DISTANCE1")]
public static ClipPlaneName ClipDistance1;
    [NativeNameAttribute("Name", "GL_CLIP_DISTANCE2")]
public static ClipPlaneName ClipDistance2;
    [NativeNameAttribute("Name", "GL_CLIP_DISTANCE3")]
public static ClipPlaneName ClipDistance3;
    [NativeNameAttribute("Name", "GL_CLIP_DISTANCE4")]
public static ClipPlaneName ClipDistance4;
    [NativeNameAttribute("Name", "GL_CLIP_DISTANCE5")]
public static ClipPlaneName ClipDistance5;
    [NativeNameAttribute("Name", "GL_CLIP_DISTANCE6")]
public static ClipPlaneName ClipDistance6;
    [NativeNameAttribute("Name", "GL_CLIP_DISTANCE7")]
public static ClipPlaneName ClipDistance7;
}
[NativeNameAttribute("Name", "ColorBuffer")]
public enum Silk.NET.OpenGL.ColorBuffer : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_NONE")]
public static ColorBuffer None;
    [NativeNameAttribute("Name", "GL_FRONT_LEFT")]
public static ColorBuffer FrontLeft;
    [NativeNameAttribute("Name", "GL_FRONT_RIGHT")]
public static ColorBuffer FrontRight;
    [NativeNameAttribute("Name", "GL_BACK_LEFT")]
public static ColorBuffer BackLeft;
    [NativeNameAttribute("Name", "GL_BACK_RIGHT")]
public static ColorBuffer BackRight;
    [NativeNameAttribute("Name", "GL_FRONT")]
public static ColorBuffer Front;
    [NativeNameAttribute("Name", "GL_BACK")]
public static ColorBuffer Back;
    [NativeNameAttribute("Name", "GL_LEFT")]
public static ColorBuffer Left;
    [NativeNameAttribute("Name", "GL_RIGHT")]
public static ColorBuffer Right;
    [NativeNameAttribute("Name", "GL_FRONT_AND_BACK")]
public static ColorBuffer FrontAndBack;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT0")]
public static ColorBuffer ColorAttachment0;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT1")]
public static ColorBuffer ColorAttachment1;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT2")]
public static ColorBuffer ColorAttachment2;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT3")]
public static ColorBuffer ColorAttachment3;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT4")]
public static ColorBuffer ColorAttachment4;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT5")]
public static ColorBuffer ColorAttachment5;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT6")]
public static ColorBuffer ColorAttachment6;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT7")]
public static ColorBuffer ColorAttachment7;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT8")]
public static ColorBuffer ColorAttachment8;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT9")]
public static ColorBuffer ColorAttachment9;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT10")]
public static ColorBuffer ColorAttachment10;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT11")]
public static ColorBuffer ColorAttachment11;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT12")]
public static ColorBuffer ColorAttachment12;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT13")]
public static ColorBuffer ColorAttachment13;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT14")]
public static ColorBuffer ColorAttachment14;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT15")]
public static ColorBuffer ColorAttachment15;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT16")]
public static ColorBuffer ColorAttachment16;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT17")]
public static ColorBuffer ColorAttachment17;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT18")]
public static ColorBuffer ColorAttachment18;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT19")]
public static ColorBuffer ColorAttachment19;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT20")]
public static ColorBuffer ColorAttachment20;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT21")]
public static ColorBuffer ColorAttachment21;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT22")]
public static ColorBuffer ColorAttachment22;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT23")]
public static ColorBuffer ColorAttachment23;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT24")]
public static ColorBuffer ColorAttachment24;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT25")]
public static ColorBuffer ColorAttachment25;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT26")]
public static ColorBuffer ColorAttachment26;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT27")]
public static ColorBuffer ColorAttachment27;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT28")]
public static ColorBuffer ColorAttachment28;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT29")]
public static ColorBuffer ColorAttachment29;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT30")]
public static ColorBuffer ColorAttachment30;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT31")]
public static ColorBuffer ColorAttachment31;
}
[NativeNameAttribute("Name", "ColorMaterialFace")]
public enum Silk.NET.OpenGL.ColorMaterialFace : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_FRONT")]
public static ColorMaterialFace Front;
    [NativeNameAttribute("Name", "GL_BACK")]
public static ColorMaterialFace Back;
    [NativeNameAttribute("Name", "GL_FRONT_AND_BACK")]
public static ColorMaterialFace FrontAndBack;
}
[NativeNameAttribute("Name", "ColorMaterialParameter")]
public enum Silk.NET.OpenGL.ColorMaterialParameter : Enum {
    public int value__;
}
[NativeNameAttribute("Name", "ColorPointerType")]
public enum Silk.NET.OpenGL.ColorPointerType : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_BYTE")]
public static ColorPointerType Byte;
    [NativeNameAttribute("Name", "GL_UNSIGNED_BYTE")]
public static ColorPointerType UnsignedByte;
    [NativeNameAttribute("Name", "GL_UNSIGNED_SHORT")]
public static ColorPointerType UnsignedShort;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT")]
public static ColorPointerType UnsignedInt;
}
[NativeNameAttribute("Name", "ColorTableParameterPName")]
public enum Silk.NET.OpenGL.ColorTableParameterPName : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_COLOR_TABLE_SCALE")]
public static ColorTableParameterPName ColorTableScale;
    [NativeNameAttribute("Name", "GL_COLOR_TABLE_BIAS")]
public static ColorTableParameterPName ColorTableBias;
    [NativeNameAttribute("Name", "GL_COLOR_TABLE_FORMAT")]
public static ColorTableParameterPName ColorTableFormat;
    [NativeNameAttribute("Name", "GL_COLOR_TABLE_WIDTH")]
public static ColorTableParameterPName ColorTableWidth;
    [NativeNameAttribute("Name", "GL_COLOR_TABLE_RED_SIZE")]
public static ColorTableParameterPName ColorTableRedSize;
    [NativeNameAttribute("Name", "GL_COLOR_TABLE_GREEN_SIZE")]
public static ColorTableParameterPName ColorTableGreenSize;
    [NativeNameAttribute("Name", "GL_COLOR_TABLE_BLUE_SIZE")]
public static ColorTableParameterPName ColorTableBlueSize;
    [NativeNameAttribute("Name", "GL_COLOR_TABLE_ALPHA_SIZE")]
public static ColorTableParameterPName ColorTableAlphaSize;
    [NativeNameAttribute("Name", "GL_COLOR_TABLE_LUMINANCE_SIZE")]
public static ColorTableParameterPName ColorTableLuminanceSize;
    [NativeNameAttribute("Name", "GL_COLOR_TABLE_INTENSITY_SIZE")]
public static ColorTableParameterPName ColorTableIntensitySize;
}
[NativeNameAttribute("Name", "ColorTableParameterPNameSGI")]
public enum Silk.NET.OpenGL.ColorTableParameterPNameSGI : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_COLOR_TABLE_SCALE")]
public static ColorTableParameterPNameSGI ColorTableScale;
    [NativeNameAttribute("Name", "GL_COLOR_TABLE_SCALE_SGI")]
public static ColorTableParameterPNameSGI ColorTableScaleSgi;
    [NativeNameAttribute("Name", "GL_COLOR_TABLE_BIAS")]
public static ColorTableParameterPNameSGI ColorTableBias;
    [NativeNameAttribute("Name", "GL_COLOR_TABLE_BIAS_SGI")]
public static ColorTableParameterPNameSGI ColorTableBiasSgi;
    [NativeNameAttribute("Name", "GL_COLOR_TABLE_FORMAT")]
public static ColorTableParameterPNameSGI ColorTableFormat;
    [NativeNameAttribute("Name", "GL_COLOR_TABLE_FORMAT_SGI")]
public static ColorTableParameterPNameSGI ColorTableFormatSgi;
    [NativeNameAttribute("Name", "GL_COLOR_TABLE_WIDTH")]
public static ColorTableParameterPNameSGI ColorTableWidth;
    [NativeNameAttribute("Name", "GL_COLOR_TABLE_WIDTH_SGI")]
public static ColorTableParameterPNameSGI ColorTableWidthSgi;
    [NativeNameAttribute("Name", "GL_COLOR_TABLE_RED_SIZE")]
public static ColorTableParameterPNameSGI ColorTableRedSize;
    [NativeNameAttribute("Name", "GL_COLOR_TABLE_RED_SIZE_SGI")]
public static ColorTableParameterPNameSGI ColorTableRedSizeSgi;
    [NativeNameAttribute("Name", "GL_COLOR_TABLE_GREEN_SIZE")]
public static ColorTableParameterPNameSGI ColorTableGreenSize;
    [NativeNameAttribute("Name", "GL_COLOR_TABLE_GREEN_SIZE_SGI")]
public static ColorTableParameterPNameSGI ColorTableGreenSizeSgi;
    [NativeNameAttribute("Name", "GL_COLOR_TABLE_BLUE_SIZE")]
public static ColorTableParameterPNameSGI ColorTableBlueSize;
    [NativeNameAttribute("Name", "GL_COLOR_TABLE_BLUE_SIZE_SGI")]
public static ColorTableParameterPNameSGI ColorTableBlueSizeSgi;
    [NativeNameAttribute("Name", "GL_COLOR_TABLE_ALPHA_SIZE")]
public static ColorTableParameterPNameSGI ColorTableAlphaSize;
    [NativeNameAttribute("Name", "GL_COLOR_TABLE_ALPHA_SIZE_SGI")]
public static ColorTableParameterPNameSGI ColorTableAlphaSizeSgi;
    [NativeNameAttribute("Name", "GL_COLOR_TABLE_LUMINANCE_SIZE")]
public static ColorTableParameterPNameSGI ColorTableLuminanceSize;
    [NativeNameAttribute("Name", "GL_COLOR_TABLE_LUMINANCE_SIZE_SGI")]
public static ColorTableParameterPNameSGI ColorTableLuminanceSizeSgi;
    [NativeNameAttribute("Name", "GL_COLOR_TABLE_INTENSITY_SIZE")]
public static ColorTableParameterPNameSGI ColorTableIntensitySize;
    [NativeNameAttribute("Name", "GL_COLOR_TABLE_INTENSITY_SIZE_SGI")]
public static ColorTableParameterPNameSGI ColorTableIntensitySizeSgi;
}
[NativeNameAttribute("Name", "ColorTableTarget")]
public enum Silk.NET.OpenGL.ColorTableTarget : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_COLOR_TABLE")]
public static ColorTableTarget ColorTable;
    [NativeNameAttribute("Name", "GL_POST_CONVOLUTION_COLOR_TABLE")]
public static ColorTableTarget PostConvolutionColorTable;
    [NativeNameAttribute("Name", "GL_POST_COLOR_MATRIX_COLOR_TABLE")]
public static ColorTableTarget PostColorMatrixColorTable;
    [NativeNameAttribute("Name", "GL_PROXY_COLOR_TABLE")]
public static ColorTableTarget ProxyColorTable;
    [NativeNameAttribute("Name", "GL_PROXY_POST_CONVOLUTION_COLOR_TABLE")]
public static ColorTableTarget ProxyPostConvolutionColorTable;
    [NativeNameAttribute("Name", "GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE")]
public static ColorTableTarget ProxyPostColorMatrixColorTable;
}
[NativeNameAttribute("Name", "ColorTableTargetSGI")]
public enum Silk.NET.OpenGL.ColorTableTargetSGI : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_TEXTURE_COLOR_TABLE_SGI")]
public static ColorTableTargetSGI TextureColorTableSgi;
    [NativeNameAttribute("Name", "GL_PROXY_TEXTURE_COLOR_TABLE_SGI")]
public static ColorTableTargetSGI ProxyTextureColorTableSgi;
    [NativeNameAttribute("Name", "GL_COLOR_TABLE")]
public static ColorTableTargetSGI ColorTable;
    [NativeNameAttribute("Name", "GL_COLOR_TABLE_SGI")]
public static ColorTableTargetSGI ColorTableSgi;
    [NativeNameAttribute("Name", "GL_POST_CONVOLUTION_COLOR_TABLE")]
public static ColorTableTargetSGI PostConvolutionColorTable;
    [NativeNameAttribute("Name", "GL_POST_CONVOLUTION_COLOR_TABLE_SGI")]
public static ColorTableTargetSGI PostConvolutionColorTableSgi;
    [NativeNameAttribute("Name", "GL_POST_COLOR_MATRIX_COLOR_TABLE")]
public static ColorTableTargetSGI PostColorMatrixColorTable;
    [NativeNameAttribute("Name", "GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI")]
public static ColorTableTargetSGI PostColorMatrixColorTableSgi;
    [NativeNameAttribute("Name", "GL_PROXY_COLOR_TABLE")]
public static ColorTableTargetSGI ProxyColorTable;
    [NativeNameAttribute("Name", "GL_PROXY_COLOR_TABLE_SGI")]
public static ColorTableTargetSGI ProxyColorTableSgi;
    [NativeNameAttribute("Name", "GL_PROXY_POST_CONVOLUTION_COLOR_TABLE")]
public static ColorTableTargetSGI ProxyPostConvolutionColorTable;
    [NativeNameAttribute("Name", "GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI")]
public static ColorTableTargetSGI ProxyPostConvolutionColorTableSgi;
    [NativeNameAttribute("Name", "GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE")]
public static ColorTableTargetSGI ProxyPostColorMatrixColorTable;
    [NativeNameAttribute("Name", "GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI")]
public static ColorTableTargetSGI ProxyPostColorMatrixColorTableSgi;
}
[NativeNameAttribute("Name", "CombinerBiasNV")]
public enum Silk.NET.OpenGL.CombinerBiasNV : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_NONE")]
public static CombinerBiasNV None;
    [NativeNameAttribute("Name", "GL_BIAS_BY_NEGATIVE_ONE_HALF_NV")]
public static CombinerBiasNV BiasByNegativeOneHalfNV;
}
[NativeNameAttribute("Name", "CombinerComponentUsageNV")]
public enum Silk.NET.OpenGL.CombinerComponentUsageNV : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_BLUE")]
public static CombinerComponentUsageNV Blue;
    [NativeNameAttribute("Name", "GL_ALPHA")]
public static CombinerComponentUsageNV Alpha;
    [NativeNameAttribute("Name", "GL_RGB")]
public static CombinerComponentUsageNV Rgb;
}
[NativeNameAttribute("Name", "CombinerMappingNV")]
public enum Silk.NET.OpenGL.CombinerMappingNV : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_UNSIGNED_IDENTITY_NV")]
public static CombinerMappingNV UnsignedIdentityNV;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INVERT_NV")]
public static CombinerMappingNV UnsignedInvertNV;
    [NativeNameAttribute("Name", "GL_EXPAND_NORMAL_NV")]
public static CombinerMappingNV ExpandNormalNV;
    [NativeNameAttribute("Name", "GL_EXPAND_NEGATE_NV")]
public static CombinerMappingNV ExpandNegateNV;
    [NativeNameAttribute("Name", "GL_HALF_BIAS_NORMAL_NV")]
public static CombinerMappingNV HalfBiasNormalNV;
    [NativeNameAttribute("Name", "GL_HALF_BIAS_NEGATE_NV")]
public static CombinerMappingNV HalfBiasNegateNV;
    [NativeNameAttribute("Name", "GL_SIGNED_IDENTITY_NV")]
public static CombinerMappingNV SignedIdentityNV;
    [NativeNameAttribute("Name", "GL_SIGNED_NEGATE_NV")]
public static CombinerMappingNV SignedNegateNV;
}
[NativeNameAttribute("Name", "CombinerParameterNV")]
public enum Silk.NET.OpenGL.CombinerParameterNV : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_COMBINER_INPUT_NV")]
public static CombinerParameterNV CombinerInputNV;
    [NativeNameAttribute("Name", "GL_COMBINER_MAPPING_NV")]
public static CombinerParameterNV CombinerMappingNV;
    [NativeNameAttribute("Name", "GL_COMBINER_COMPONENT_USAGE_NV")]
public static CombinerParameterNV CombinerComponentUsageNV;
}
[NativeNameAttribute("Name", "CombinerPortionNV")]
public enum Silk.NET.OpenGL.CombinerPortionNV : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_ALPHA")]
public static CombinerPortionNV Alpha;
    [NativeNameAttribute("Name", "GL_RGB")]
public static CombinerPortionNV Rgb;
}
[NativeNameAttribute("Name", "CombinerRegisterNV")]
public enum Silk.NET.OpenGL.CombinerRegisterNV : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_TEXTURE0_ARB")]
public static CombinerRegisterNV Texture0Arb;
    [NativeNameAttribute("Name", "GL_TEXTURE1_ARB")]
public static CombinerRegisterNV Texture1Arb;
    [NativeNameAttribute("Name", "GL_PRIMARY_COLOR_NV")]
public static CombinerRegisterNV PrimaryColorNV;
    [NativeNameAttribute("Name", "GL_SECONDARY_COLOR_NV")]
public static CombinerRegisterNV SecondaryColorNV;
    [NativeNameAttribute("Name", "GL_SPARE0_NV")]
public static CombinerRegisterNV Spare0NV;
    [NativeNameAttribute("Name", "GL_SPARE1_NV")]
public static CombinerRegisterNV Spare1NV;
    [NativeNameAttribute("Name", "GL_DISCARD_NV")]
public static CombinerRegisterNV DiscardNV;
}
[NativeNameAttribute("Name", "CombinerScaleNV")]
public enum Silk.NET.OpenGL.CombinerScaleNV : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_NONE")]
public static CombinerScaleNV None;
    [NativeNameAttribute("Name", "GL_SCALE_BY_TWO_NV")]
public static CombinerScaleNV ScaleByTwoNV;
    [NativeNameAttribute("Name", "GL_SCALE_BY_FOUR_NV")]
public static CombinerScaleNV ScaleByFourNV;
    [NativeNameAttribute("Name", "GL_SCALE_BY_ONE_HALF_NV")]
public static CombinerScaleNV ScaleByOneHalfNV;
}
[NativeNameAttribute("Name", "CombinerStageNV")]
public enum Silk.NET.OpenGL.CombinerStageNV : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_COMBINER0_NV")]
public static CombinerStageNV Combiner0NV;
    [NativeNameAttribute("Name", "GL_COMBINER1_NV")]
public static CombinerStageNV Combiner1NV;
    [NativeNameAttribute("Name", "GL_COMBINER2_NV")]
public static CombinerStageNV Combiner2NV;
    [NativeNameAttribute("Name", "GL_COMBINER3_NV")]
public static CombinerStageNV Combiner3NV;
    [NativeNameAttribute("Name", "GL_COMBINER4_NV")]
public static CombinerStageNV Combiner4NV;
    [NativeNameAttribute("Name", "GL_COMBINER5_NV")]
public static CombinerStageNV Combiner5NV;
    [NativeNameAttribute("Name", "GL_COMBINER6_NV")]
public static CombinerStageNV Combiner6NV;
    [NativeNameAttribute("Name", "GL_COMBINER7_NV")]
public static CombinerStageNV Combiner7NV;
}
[NativeNameAttribute("Name", "CombinerVariableNV")]
public enum Silk.NET.OpenGL.CombinerVariableNV : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_VARIABLE_A_NV")]
public static CombinerVariableNV VariableANV;
    [NativeNameAttribute("Name", "GL_VARIABLE_B_NV")]
public static CombinerVariableNV VariableBNV;
    [NativeNameAttribute("Name", "GL_VARIABLE_C_NV")]
public static CombinerVariableNV VariableCNV;
    [NativeNameAttribute("Name", "GL_VARIABLE_D_NV")]
public static CombinerVariableNV VariableDNV;
    [NativeNameAttribute("Name", "GL_VARIABLE_E_NV")]
public static CombinerVariableNV VariableENV;
    [NativeNameAttribute("Name", "GL_VARIABLE_F_NV")]
public static CombinerVariableNV VariableFNV;
    [NativeNameAttribute("Name", "GL_VARIABLE_G_NV")]
public static CombinerVariableNV VariableGNV;
}
[NativeNameAttribute("Name", "CommandOpcodesNV")]
public enum Silk.NET.OpenGL.CommandOpcodesNV : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_TERMINATE_SEQUENCE_COMMAND_NV")]
public static CommandOpcodesNV TerminateSequenceCommandNV;
    [NativeNameAttribute("Name", "GL_NOP_COMMAND_NV")]
public static CommandOpcodesNV NopCommandNV;
    [NativeNameAttribute("Name", "GL_DRAW_ELEMENTS_COMMAND_NV")]
public static CommandOpcodesNV DrawElementsCommandNV;
    [NativeNameAttribute("Name", "GL_DRAW_ARRAYS_COMMAND_NV")]
public static CommandOpcodesNV DrawArraysCommandNV;
    [NativeNameAttribute("Name", "GL_DRAW_ELEMENTS_STRIP_COMMAND_NV")]
public static CommandOpcodesNV DrawElementsStripCommandNV;
    [NativeNameAttribute("Name", "GL_DRAW_ARRAYS_STRIP_COMMAND_NV")]
public static CommandOpcodesNV DrawArraysStripCommandNV;
    [NativeNameAttribute("Name", "GL_DRAW_ELEMENTS_INSTANCED_COMMAND_NV")]
public static CommandOpcodesNV DrawElementsInstancedCommandNV;
    [NativeNameAttribute("Name", "GL_DRAW_ARRAYS_INSTANCED_COMMAND_NV")]
public static CommandOpcodesNV DrawArraysInstancedCommandNV;
    [NativeNameAttribute("Name", "GL_ELEMENT_ADDRESS_COMMAND_NV")]
public static CommandOpcodesNV ElementAddressCommandNV;
    [NativeNameAttribute("Name", "GL_ATTRIBUTE_ADDRESS_COMMAND_NV")]
public static CommandOpcodesNV AttributeAddressCommandNV;
    [NativeNameAttribute("Name", "GL_UNIFORM_ADDRESS_COMMAND_NV")]
public static CommandOpcodesNV UniformAddressCommandNV;
    [NativeNameAttribute("Name", "GL_BLEND_COLOR_COMMAND_NV")]
public static CommandOpcodesNV BlendColorCommandNV;
    [NativeNameAttribute("Name", "GL_STENCIL_REF_COMMAND_NV")]
public static CommandOpcodesNV StencilRefCommandNV;
    [NativeNameAttribute("Name", "GL_LINE_WIDTH_COMMAND_NV")]
public static CommandOpcodesNV LineWidthCommandNV;
    [NativeNameAttribute("Name", "GL_POLYGON_OFFSET_COMMAND_NV")]
public static CommandOpcodesNV PolygonOffsetCommandNV;
    [NativeNameAttribute("Name", "GL_ALPHA_REF_COMMAND_NV")]
public static CommandOpcodesNV AlphaRefCommandNV;
    [NativeNameAttribute("Name", "GL_VIEWPORT_COMMAND_NV")]
public static CommandOpcodesNV ViewportCommandNV;
    [NativeNameAttribute("Name", "GL_SCISSOR_COMMAND_NV")]
public static CommandOpcodesNV ScissorCommandNV;
    [NativeNameAttribute("Name", "GL_FRONT_FACE_COMMAND_NV")]
public static CommandOpcodesNV FrontFaceCommandNV;
}
[NativeNameAttribute("Name", "ConditionalRenderMode")]
public enum Silk.NET.OpenGL.ConditionalRenderMode : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_QUERY_WAIT")]
public static ConditionalRenderMode QueryWait;
    [NativeNameAttribute("Name", "GL_QUERY_NO_WAIT")]
public static ConditionalRenderMode QueryNoWait;
    [NativeNameAttribute("Name", "GL_QUERY_BY_REGION_WAIT")]
public static ConditionalRenderMode QueryByRegionWait;
    [NativeNameAttribute("Name", "GL_QUERY_BY_REGION_NO_WAIT")]
public static ConditionalRenderMode QueryByRegionNoWait;
    [NativeNameAttribute("Name", "GL_QUERY_WAIT_INVERTED")]
public static ConditionalRenderMode QueryWaitInverted;
    [NativeNameAttribute("Name", "GL_QUERY_NO_WAIT_INVERTED")]
public static ConditionalRenderMode QueryNoWaitInverted;
    [NativeNameAttribute("Name", "GL_QUERY_BY_REGION_WAIT_INVERTED")]
public static ConditionalRenderMode QueryByRegionWaitInverted;
    [NativeNameAttribute("Name", "GL_QUERY_BY_REGION_NO_WAIT_INVERTED")]
public static ConditionalRenderMode QueryByRegionNoWaitInverted;
}
[NativeNameAttribute("Name", "ContainerType")]
public enum Silk.NET.OpenGL.ContainerType : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_PROGRAM_OBJECT_ARB")]
public static ContainerType ProgramObjectArb;
    [NativeNameAttribute("Name", "GL_PROGRAM_OBJECT_EXT")]
public static ContainerType ProgramObjectExt;
}
[NativeNameAttribute("Name", "ContextFlagMask")]
public enum Silk.NET.OpenGL.ContextFlagMask : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT")]
public static ContextFlagMask ContextFlagForwardCompatibleBit;
    [NativeNameAttribute("Name", "GL_CONTEXT_FLAG_DEBUG_BIT")]
public static ContextFlagMask ContextFlagDebugBit;
    [NativeNameAttribute("Name", "GL_CONTEXT_FLAG_DEBUG_BIT_KHR")]
public static ContextFlagMask ContextFlagDebugBitKhr;
    [NativeNameAttribute("Name", "GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT")]
public static ContextFlagMask ContextFlagRobustAccessBit;
    [NativeNameAttribute("Name", "GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB")]
public static ContextFlagMask ContextFlagRobustAccessBitArb;
    [NativeNameAttribute("Name", "GL_CONTEXT_FLAG_NO_ERROR_BIT")]
public static ContextFlagMask ContextFlagNoErrorBit;
    [NativeNameAttribute("Name", "GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR")]
public static ContextFlagMask ContextFlagNoErrorBitKhr;
    [NativeNameAttribute("Name", "GL_CONTEXT_FLAG_PROTECTED_CONTENT_BIT_EXT")]
public static ContextFlagMask ContextFlagProtectedContentBitExt;
}
[NativeNameAttribute("Name", "ContextProfileMask")]
public enum Silk.NET.OpenGL.ContextProfileMask : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_CONTEXT_CORE_PROFILE_BIT")]
public static ContextProfileMask ContextCoreProfileBit;
    [NativeNameAttribute("Name", "GL_CONTEXT_COMPATIBILITY_PROFILE_BIT")]
public static ContextProfileMask ContextCompatibilityProfileBit;
}
[ExtensionAttribute]
public static class Silk.NET.OpenGL.ContextSourceExtensions : object {
    [ExtensionAttribute]
public static GL CreateOpenGL(IGLContextSource src);
}
[NativeNameAttribute("Name", "ConvolutionBorderModeEXT")]
public enum Silk.NET.OpenGL.ConvolutionBorderModeEXT : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_REDUCE")]
public static ConvolutionBorderModeEXT Reduce;
    [NativeNameAttribute("Name", "GL_REDUCE_EXT")]
public static ConvolutionBorderModeEXT ReduceExt;
}
[NativeNameAttribute("Name", "ConvolutionParameterEXT")]
public enum Silk.NET.OpenGL.ConvolutionParameterEXT : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_CONVOLUTION_BORDER_MODE")]
public static ConvolutionParameterEXT ConvolutionBorderMode;
    [NativeNameAttribute("Name", "GL_CONVOLUTION_BORDER_MODE_EXT")]
public static ConvolutionParameterEXT ConvolutionBorderModeExt;
    [NativeNameAttribute("Name", "GL_CONVOLUTION_FILTER_SCALE")]
public static ConvolutionParameterEXT ConvolutionFilterScale;
    [NativeNameAttribute("Name", "GL_CONVOLUTION_FILTER_SCALE_EXT")]
public static ConvolutionParameterEXT ConvolutionFilterScaleExt;
    [NativeNameAttribute("Name", "GL_CONVOLUTION_FILTER_BIAS")]
public static ConvolutionParameterEXT ConvolutionFilterBias;
    [NativeNameAttribute("Name", "GL_CONVOLUTION_FILTER_BIAS_EXT")]
public static ConvolutionParameterEXT ConvolutionFilterBiasExt;
}
[NativeNameAttribute("Name", "ConvolutionTarget")]
public enum Silk.NET.OpenGL.ConvolutionTarget : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_CONVOLUTION_1D")]
public static ConvolutionTarget Convolution1D;
    [NativeNameAttribute("Name", "GL_CONVOLUTION_2D")]
public static ConvolutionTarget Convolution2D;
}
[NativeNameAttribute("Name", "ConvolutionTargetEXT")]
public enum Silk.NET.OpenGL.ConvolutionTargetEXT : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_CONVOLUTION_1D")]
public static ConvolutionTargetEXT Convolution1D;
    [NativeNameAttribute("Name", "GL_CONVOLUTION_1D_EXT")]
public static ConvolutionTargetEXT Convolution1DExt;
    [NativeNameAttribute("Name", "GL_CONVOLUTION_2D")]
public static ConvolutionTargetEXT Convolution2D;
    [NativeNameAttribute("Name", "GL_CONVOLUTION_2D_EXT")]
public static ConvolutionTargetEXT Convolution2DExt;
}
[NativeNameAttribute("Name", "CopyBufferSubDataTarget")]
public enum Silk.NET.OpenGL.CopyBufferSubDataTarget : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_ARRAY_BUFFER")]
public static CopyBufferSubDataTarget ArrayBuffer;
    [NativeNameAttribute("Name", "GL_ELEMENT_ARRAY_BUFFER")]
public static CopyBufferSubDataTarget ElementArrayBuffer;
    [NativeNameAttribute("Name", "GL_PIXEL_PACK_BUFFER")]
public static CopyBufferSubDataTarget PixelPackBuffer;
    [NativeNameAttribute("Name", "GL_PIXEL_UNPACK_BUFFER")]
public static CopyBufferSubDataTarget PixelUnpackBuffer;
    [NativeNameAttribute("Name", "GL_UNIFORM_BUFFER")]
public static CopyBufferSubDataTarget UniformBuffer;
    [NativeNameAttribute("Name", "GL_TEXTURE_BUFFER")]
public static CopyBufferSubDataTarget TextureBuffer;
    [NativeNameAttribute("Name", "GL_TRANSFORM_FEEDBACK_BUFFER")]
public static CopyBufferSubDataTarget TransformFeedbackBuffer;
    [NativeNameAttribute("Name", "GL_COPY_READ_BUFFER")]
public static CopyBufferSubDataTarget CopyReadBuffer;
    [NativeNameAttribute("Name", "GL_COPY_WRITE_BUFFER")]
public static CopyBufferSubDataTarget CopyWriteBuffer;
    [NativeNameAttribute("Name", "GL_DRAW_INDIRECT_BUFFER")]
public static CopyBufferSubDataTarget DrawIndirectBuffer;
    [NativeNameAttribute("Name", "GL_SHADER_STORAGE_BUFFER")]
public static CopyBufferSubDataTarget ShaderStorageBuffer;
    [NativeNameAttribute("Name", "GL_DISPATCH_INDIRECT_BUFFER")]
public static CopyBufferSubDataTarget DispatchIndirectBuffer;
    [NativeNameAttribute("Name", "GL_QUERY_BUFFER")]
public static CopyBufferSubDataTarget QueryBuffer;
    [NativeNameAttribute("Name", "GL_ATOMIC_COUNTER_BUFFER")]
public static CopyBufferSubDataTarget AtomicCounterBuffer;
}
[NativeNameAttribute("Name", "CopyImageSubDataTarget")]
public enum Silk.NET.OpenGL.CopyImageSubDataTarget : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_TEXTURE_1D")]
public static CopyImageSubDataTarget Texture1D;
    [NativeNameAttribute("Name", "GL_TEXTURE_2D")]
public static CopyImageSubDataTarget Texture2D;
    [NativeNameAttribute("Name", "GL_TEXTURE_3D")]
public static CopyImageSubDataTarget Texture3D;
    [NativeNameAttribute("Name", "GL_TEXTURE_RECTANGLE")]
public static CopyImageSubDataTarget TextureRectangle;
    [NativeNameAttribute("Name", "GL_TEXTURE_CUBE_MAP")]
public static CopyImageSubDataTarget TextureCubeMap;
    [NativeNameAttribute("Name", "GL_TEXTURE_1D_ARRAY")]
public static CopyImageSubDataTarget Texture1DArray;
    [NativeNameAttribute("Name", "GL_TEXTURE_2D_ARRAY")]
public static CopyImageSubDataTarget Texture2DArray;
    [NativeNameAttribute("Name", "GL_RENDERBUFFER")]
public static CopyImageSubDataTarget Renderbuffer;
    [NativeNameAttribute("Name", "GL_TEXTURE_CUBE_MAP_ARRAY")]
public static CopyImageSubDataTarget TextureCubeMapArray;
    [NativeNameAttribute("Name", "GL_TEXTURE_2D_MULTISAMPLE")]
public static CopyImageSubDataTarget Texture2DMultisample;
    [NativeNameAttribute("Name", "GL_TEXTURE_2D_MULTISAMPLE_ARRAY")]
public static CopyImageSubDataTarget Texture2DMultisampleArray;
}
[NativeNameAttribute("Name", "CullFaceMode")]
public enum Silk.NET.OpenGL.CullFaceMode : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_FRONT")]
public static CullFaceMode Front;
    [NativeNameAttribute("Name", "GL_BACK")]
public static CullFaceMode Back;
    [NativeNameAttribute("Name", "GL_FRONT_AND_BACK")]
public static CullFaceMode FrontAndBack;
}
[NativeNameAttribute("Name", "CullParameterEXT")]
public enum Silk.NET.OpenGL.CullParameterEXT : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_CULL_VERTEX_EYE_POSITION_EXT")]
public static CullParameterEXT CullVertexEyePositionExt;
    [NativeNameAttribute("Name", "GL_CULL_VERTEX_OBJECT_POSITION_EXT")]
public static CullParameterEXT CullVertexObjectPositionExt;
}
[NativeNameAttribute("Name", "DataTypeEXT")]
public enum Silk.NET.OpenGL.DataTypeEXT : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_SCALAR_EXT")]
public static DataTypeEXT ScalarExt;
    [NativeNameAttribute("Name", "GL_VECTOR_EXT")]
public static DataTypeEXT VectorExt;
    [NativeNameAttribute("Name", "GL_MATRIX_EXT")]
public static DataTypeEXT MatrixExt;
}
public class Silk.NET.OpenGL.DebugProc : MulticastDelegate {
    public DebugProc(object object, IntPtr method);
    public virtual void Invoke(GLEnum source, GLEnum type, int id, GLEnum severity, int length, IntPtr message, IntPtr userParam);
    public virtual IAsyncResult BeginInvoke(GLEnum source, GLEnum type, int id, GLEnum severity, int length, IntPtr message, IntPtr userParam, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NativeNameAttribute("Name", "DebugSeverity")]
public enum Silk.NET.OpenGL.DebugSeverity : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_DONT_CARE")]
public static DebugSeverity DontCare;
    [NativeNameAttribute("Name", "GL_DEBUG_SEVERITY_NOTIFICATION")]
public static DebugSeverity DebugSeverityNotification;
    [NativeNameAttribute("Name", "GL_DEBUG_SEVERITY_HIGH")]
public static DebugSeverity DebugSeverityHigh;
    [NativeNameAttribute("Name", "GL_DEBUG_SEVERITY_MEDIUM")]
public static DebugSeverity DebugSeverityMedium;
    [NativeNameAttribute("Name", "GL_DEBUG_SEVERITY_LOW")]
public static DebugSeverity DebugSeverityLow;
}
[NativeNameAttribute("Name", "DebugSource")]
public enum Silk.NET.OpenGL.DebugSource : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_DONT_CARE")]
public static DebugSource DontCare;
    [NativeNameAttribute("Name", "GL_DEBUG_SOURCE_API")]
public static DebugSource DebugSourceApi;
    [NativeNameAttribute("Name", "GL_DEBUG_SOURCE_WINDOW_SYSTEM")]
public static DebugSource DebugSourceWindowSystem;
    [NativeNameAttribute("Name", "GL_DEBUG_SOURCE_SHADER_COMPILER")]
public static DebugSource DebugSourceShaderCompiler;
    [NativeNameAttribute("Name", "GL_DEBUG_SOURCE_THIRD_PARTY")]
public static DebugSource DebugSourceThirdParty;
    [NativeNameAttribute("Name", "GL_DEBUG_SOURCE_APPLICATION")]
public static DebugSource DebugSourceApplication;
    [NativeNameAttribute("Name", "GL_DEBUG_SOURCE_OTHER")]
public static DebugSource DebugSourceOther;
}
[NativeNameAttribute("Name", "DebugType")]
public enum Silk.NET.OpenGL.DebugType : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_DONT_CARE")]
public static DebugType DontCare;
    [NativeNameAttribute("Name", "GL_DEBUG_TYPE_ERROR")]
public static DebugType DebugTypeError;
    [NativeNameAttribute("Name", "GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR")]
public static DebugType DebugTypeDeprecatedBehavior;
    [NativeNameAttribute("Name", "GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR")]
public static DebugType DebugTypeUndefinedBehavior;
    [NativeNameAttribute("Name", "GL_DEBUG_TYPE_PORTABILITY")]
public static DebugType DebugTypePortability;
    [NativeNameAttribute("Name", "GL_DEBUG_TYPE_PERFORMANCE")]
public static DebugType DebugTypePerformance;
    [NativeNameAttribute("Name", "GL_DEBUG_TYPE_OTHER")]
public static DebugType DebugTypeOther;
    [NativeNameAttribute("Name", "GL_DEBUG_TYPE_MARKER")]
public static DebugType DebugTypeMarker;
    [NativeNameAttribute("Name", "GL_DEBUG_TYPE_PUSH_GROUP")]
public static DebugType DebugTypePushGroup;
    [NativeNameAttribute("Name", "GL_DEBUG_TYPE_POP_GROUP")]
public static DebugType DebugTypePopGroup;
}
[NativeNameAttribute("Name", "DepthFunction")]
public enum Silk.NET.OpenGL.DepthFunction : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_NEVER")]
public static DepthFunction Never;
    [NativeNameAttribute("Name", "GL_LESS")]
public static DepthFunction Less;
    [NativeNameAttribute("Name", "GL_EQUAL")]
public static DepthFunction Equal;
    [NativeNameAttribute("Name", "GL_LEQUAL")]
public static DepthFunction Lequal;
    [NativeNameAttribute("Name", "GL_GREATER")]
public static DepthFunction Greater;
    [NativeNameAttribute("Name", "GL_NOTEQUAL")]
public static DepthFunction Notequal;
    [NativeNameAttribute("Name", "GL_GEQUAL")]
public static DepthFunction Gequal;
    [NativeNameAttribute("Name", "GL_ALWAYS")]
public static DepthFunction Always;
}
[NativeNameAttribute("Name", "DepthStencilTextureMode")]
public enum Silk.NET.OpenGL.DepthStencilTextureMode : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_STENCIL_INDEX")]
public static DepthStencilTextureMode StencilIndex;
    [NativeNameAttribute("Name", "GL_DEPTH_COMPONENT")]
public static DepthStencilTextureMode DepthComponent;
}
[NativeNameAttribute("Name", "display list")]
public class Silk.NET.OpenGL.DisplayList : ValueType {
    [NativeNameAttribute("Type", "")]
[NativeNameAttribute("Type.Name", "")]
[NativeNameAttribute("Name", "")]
public UInt32 Handle;
    public DisplayList(Nullable`1<UInt32> handle);
}
[NativeNameAttribute("Name", "DrawBufferMode")]
public enum Silk.NET.OpenGL.DrawBufferMode : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_NONE")]
public static DrawBufferMode None;
    [NativeNameAttribute("Name", "GL_NONE_OES")]
public static DrawBufferMode NoneOes;
    [NativeNameAttribute("Name", "GL_FRONT_LEFT")]
public static DrawBufferMode FrontLeft;
    [NativeNameAttribute("Name", "GL_FRONT_RIGHT")]
public static DrawBufferMode FrontRight;
    [NativeNameAttribute("Name", "GL_BACK_LEFT")]
public static DrawBufferMode BackLeft;
    [NativeNameAttribute("Name", "GL_BACK_RIGHT")]
public static DrawBufferMode BackRight;
    [NativeNameAttribute("Name", "GL_FRONT")]
public static DrawBufferMode Front;
    [NativeNameAttribute("Name", "GL_BACK")]
public static DrawBufferMode Back;
    [NativeNameAttribute("Name", "GL_LEFT")]
public static DrawBufferMode Left;
    [NativeNameAttribute("Name", "GL_RIGHT")]
public static DrawBufferMode Right;
    [NativeNameAttribute("Name", "GL_FRONT_AND_BACK")]
public static DrawBufferMode FrontAndBack;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT0")]
public static DrawBufferMode ColorAttachment0;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT1")]
public static DrawBufferMode ColorAttachment1;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT2")]
public static DrawBufferMode ColorAttachment2;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT3")]
public static DrawBufferMode ColorAttachment3;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT4")]
public static DrawBufferMode ColorAttachment4;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT5")]
public static DrawBufferMode ColorAttachment5;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT6")]
public static DrawBufferMode ColorAttachment6;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT7")]
public static DrawBufferMode ColorAttachment7;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT8")]
public static DrawBufferMode ColorAttachment8;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT9")]
public static DrawBufferMode ColorAttachment9;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT10")]
public static DrawBufferMode ColorAttachment10;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT11")]
public static DrawBufferMode ColorAttachment11;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT12")]
public static DrawBufferMode ColorAttachment12;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT13")]
public static DrawBufferMode ColorAttachment13;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT14")]
public static DrawBufferMode ColorAttachment14;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT15")]
public static DrawBufferMode ColorAttachment15;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT16")]
public static DrawBufferMode ColorAttachment16;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT17")]
public static DrawBufferMode ColorAttachment17;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT18")]
public static DrawBufferMode ColorAttachment18;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT19")]
public static DrawBufferMode ColorAttachment19;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT20")]
public static DrawBufferMode ColorAttachment20;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT21")]
public static DrawBufferMode ColorAttachment21;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT22")]
public static DrawBufferMode ColorAttachment22;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT23")]
public static DrawBufferMode ColorAttachment23;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT24")]
public static DrawBufferMode ColorAttachment24;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT25")]
public static DrawBufferMode ColorAttachment25;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT26")]
public static DrawBufferMode ColorAttachment26;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT27")]
public static DrawBufferMode ColorAttachment27;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT28")]
public static DrawBufferMode ColorAttachment28;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT29")]
public static DrawBufferMode ColorAttachment29;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT30")]
public static DrawBufferMode ColorAttachment30;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT31")]
public static DrawBufferMode ColorAttachment31;
}
[NativeNameAttribute("Name", "DrawBufferModeATI")]
public enum Silk.NET.OpenGL.DrawBufferModeATI : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT0_NV")]
public static DrawBufferModeATI ColorAttachment0NV;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT1_NV")]
public static DrawBufferModeATI ColorAttachment1NV;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT2_NV")]
public static DrawBufferModeATI ColorAttachment2NV;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT3_NV")]
public static DrawBufferModeATI ColorAttachment3NV;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT4_NV")]
public static DrawBufferModeATI ColorAttachment4NV;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT5_NV")]
public static DrawBufferModeATI ColorAttachment5NV;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT6_NV")]
public static DrawBufferModeATI ColorAttachment6NV;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT7_NV")]
public static DrawBufferModeATI ColorAttachment7NV;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT8_NV")]
public static DrawBufferModeATI ColorAttachment8NV;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT9_NV")]
public static DrawBufferModeATI ColorAttachment9NV;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT10_NV")]
public static DrawBufferModeATI ColorAttachment10NV;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT11_NV")]
public static DrawBufferModeATI ColorAttachment11NV;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT12_NV")]
public static DrawBufferModeATI ColorAttachment12NV;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT13_NV")]
public static DrawBufferModeATI ColorAttachment13NV;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT14_NV")]
public static DrawBufferModeATI ColorAttachment14NV;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT15_NV")]
public static DrawBufferModeATI ColorAttachment15NV;
}
[NativeNameAttribute("Name", "DrawElementsType")]
public enum Silk.NET.OpenGL.DrawElementsType : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_UNSIGNED_BYTE")]
public static DrawElementsType UnsignedByte;
    [NativeNameAttribute("Name", "GL_UNSIGNED_SHORT")]
public static DrawElementsType UnsignedShort;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT")]
public static DrawElementsType UnsignedInt;
}
[NativeNameAttribute("Name", "ElementPointerTypeATI")]
public enum Silk.NET.OpenGL.ElementPointerTypeATI : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_UNSIGNED_BYTE")]
public static ElementPointerTypeATI UnsignedByte;
    [NativeNameAttribute("Name", "GL_UNSIGNED_SHORT")]
public static ElementPointerTypeATI UnsignedShort;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT")]
public static ElementPointerTypeATI UnsignedInt;
}
[NativeNameAttribute("Name", "EnableCap")]
public enum Silk.NET.OpenGL.EnableCap : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_LINE_SMOOTH")]
public static EnableCap LineSmooth;
    [NativeNameAttribute("Name", "GL_POLYGON_SMOOTH")]
public static EnableCap PolygonSmooth;
    [NativeNameAttribute("Name", "GL_CULL_FACE")]
public static EnableCap CullFace;
    [NativeNameAttribute("Name", "GL_DEPTH_TEST")]
public static EnableCap DepthTest;
    [NativeNameAttribute("Name", "GL_STENCIL_TEST")]
public static EnableCap StencilTest;
    [NativeNameAttribute("Name", "GL_DITHER")]
public static EnableCap Dither;
    [NativeNameAttribute("Name", "GL_BLEND")]
public static EnableCap Blend;
    [NativeNameAttribute("Name", "GL_COLOR_LOGIC_OP")]
public static EnableCap ColorLogicOp;
    [NativeNameAttribute("Name", "GL_SCISSOR_TEST")]
public static EnableCap ScissorTest;
    [NativeNameAttribute("Name", "GL_TEXTURE_1D")]
public static EnableCap Texture1D;
    [NativeNameAttribute("Name", "GL_TEXTURE_2D")]
public static EnableCap Texture2D;
    [NativeNameAttribute("Name", "GL_POLYGON_OFFSET_POINT")]
public static EnableCap PolygonOffsetPoint;
    [NativeNameAttribute("Name", "GL_POLYGON_OFFSET_LINE")]
public static EnableCap PolygonOffsetLine;
    [NativeNameAttribute("Name", "GL_CLIP_DISTANCE0")]
public static EnableCap ClipDistance0;
    [NativeNameAttribute("Name", "GL_CLIP_DISTANCE1")]
public static EnableCap ClipDistance1;
    [NativeNameAttribute("Name", "GL_CLIP_DISTANCE2")]
public static EnableCap ClipDistance2;
    [NativeNameAttribute("Name", "GL_CLIP_DISTANCE3")]
public static EnableCap ClipDistance3;
    [NativeNameAttribute("Name", "GL_CLIP_DISTANCE4")]
public static EnableCap ClipDistance4;
    [NativeNameAttribute("Name", "GL_CLIP_DISTANCE5")]
public static EnableCap ClipDistance5;
    [NativeNameAttribute("Name", "GL_CLIP_DISTANCE6")]
public static EnableCap ClipDistance6;
    [NativeNameAttribute("Name", "GL_CLIP_DISTANCE7")]
public static EnableCap ClipDistance7;
    [NativeNameAttribute("Name", "GL_CONVOLUTION_1D_EXT")]
public static EnableCap Convolution1DExt;
    [NativeNameAttribute("Name", "GL_CONVOLUTION_2D_EXT")]
public static EnableCap Convolution2DExt;
    [NativeNameAttribute("Name", "GL_SEPARABLE_2D_EXT")]
public static EnableCap Separable2DExt;
    [NativeNameAttribute("Name", "GL_HISTOGRAM_EXT")]
public static EnableCap HistogramExt;
    [NativeNameAttribute("Name", "GL_MINMAX_EXT")]
public static EnableCap MinmaxExt;
    [NativeNameAttribute("Name", "GL_POLYGON_OFFSET_FILL")]
public static EnableCap PolygonOffsetFill;
    [NativeNameAttribute("Name", "GL_RESCALE_NORMAL_EXT")]
public static EnableCap RescaleNormalExt;
    [NativeNameAttribute("Name", "GL_TEXTURE_3D_EXT")]
public static EnableCap Texture3DExt;
    [NativeNameAttribute("Name", "GL_VERTEX_ARRAY")]
public static EnableCap VertexArray;
    [NativeNameAttribute("Name", "GL_INTERLACE_SGIX")]
public static EnableCap InterlaceSgix;
    [NativeNameAttribute("Name", "GL_MULTISAMPLE")]
public static EnableCap Multisample;
    [NativeNameAttribute("Name", "GL_MULTISAMPLE_SGIS")]
public static EnableCap MultisampleSgis;
    [NativeNameAttribute("Name", "GL_SAMPLE_ALPHA_TO_COVERAGE")]
public static EnableCap SampleAlphaToCoverage;
    [NativeNameAttribute("Name", "GL_SAMPLE_ALPHA_TO_MASK_SGIS")]
public static EnableCap SampleAlphaToMaskSgis;
    [NativeNameAttribute("Name", "GL_SAMPLE_ALPHA_TO_ONE")]
public static EnableCap SampleAlphaToOne;
    [NativeNameAttribute("Name", "GL_SAMPLE_ALPHA_TO_ONE_SGIS")]
public static EnableCap SampleAlphaToOneSgis;
    [NativeNameAttribute("Name", "GL_SAMPLE_COVERAGE")]
public static EnableCap SampleCoverage;
    [NativeNameAttribute("Name", "GL_SAMPLE_MASK_SGIS")]
public static EnableCap SampleMaskSgis;
    [NativeNameAttribute("Name", "GL_TEXTURE_COLOR_TABLE_SGI")]
public static EnableCap TextureColorTableSgi;
    [NativeNameAttribute("Name", "GL_COLOR_TABLE")]
public static EnableCap ColorTable;
    [NativeNameAttribute("Name", "GL_COLOR_TABLE_SGI")]
public static EnableCap ColorTableSgi;
    [NativeNameAttribute("Name", "GL_POST_CONVOLUTION_COLOR_TABLE")]
public static EnableCap PostConvolutionColorTable;
    [NativeNameAttribute("Name", "GL_POST_CONVOLUTION_COLOR_TABLE_SGI")]
public static EnableCap PostConvolutionColorTableSgi;
    [NativeNameAttribute("Name", "GL_POST_COLOR_MATRIX_COLOR_TABLE")]
public static EnableCap PostColorMatrixColorTable;
    [NativeNameAttribute("Name", "GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI")]
public static EnableCap PostColorMatrixColorTableSgi;
    [NativeNameAttribute("Name", "GL_TEXTURE_4D_SGIS")]
public static EnableCap Texture4DSgis;
    [NativeNameAttribute("Name", "GL_PIXEL_TEX_GEN_SGIX")]
public static EnableCap PixelTexGenSgix;
    [NativeNameAttribute("Name", "GL_SPRITE_SGIX")]
public static EnableCap SpriteSgix;
    [NativeNameAttribute("Name", "GL_REFERENCE_PLANE_SGIX")]
public static EnableCap ReferencePlaneSgix;
    [NativeNameAttribute("Name", "GL_IR_INSTRUMENT1_SGIX")]
public static EnableCap IRInstrument1Sgix;
    [NativeNameAttribute("Name", "GL_CALLIGRAPHIC_FRAGMENT_SGIX")]
public static EnableCap CalligraphicFragmentSgix;
    [NativeNameAttribute("Name", "GL_FRAMEZOOM_SGIX")]
public static EnableCap FramezoomSgix;
    [NativeNameAttribute("Name", "GL_FOG_OFFSET_SGIX")]
public static EnableCap FogOffsetSgix;
    [NativeNameAttribute("Name", "GL_SHARED_TEXTURE_PALETTE_EXT")]
public static EnableCap SharedTexturePaletteExt;
    [NativeNameAttribute("Name", "GL_DEBUG_OUTPUT_SYNCHRONOUS")]
public static EnableCap DebugOutputSynchronous;
    [NativeNameAttribute("Name", "GL_ASYNC_HISTOGRAM_SGIX")]
public static EnableCap AsyncHistogramSgix;
    [NativeNameAttribute("Name", "GL_PIXEL_TEXTURE_SGIS")]
public static EnableCap PixelTextureSgis;
    [NativeNameAttribute("Name", "GL_ASYNC_TEX_IMAGE_SGIX")]
public static EnableCap AsyncTexImageSgix;
    [NativeNameAttribute("Name", "GL_ASYNC_DRAW_PIXELS_SGIX")]
public static EnableCap AsyncDrawPixelsSgix;
    [NativeNameAttribute("Name", "GL_ASYNC_READ_PIXELS_SGIX")]
public static EnableCap AsyncReadPixelsSgix;
    [NativeNameAttribute("Name", "GL_FRAGMENT_LIGHTING_SGIX")]
public static EnableCap FragmentLightingSgix;
    [NativeNameAttribute("Name", "GL_FRAGMENT_COLOR_MATERIAL_SGIX")]
public static EnableCap FragmentColorMaterialSgix;
    [NativeNameAttribute("Name", "GL_FRAGMENT_LIGHT0_SGIX")]
public static EnableCap FragmentLight0Sgix;
    [NativeNameAttribute("Name", "GL_FRAGMENT_LIGHT1_SGIX")]
public static EnableCap FragmentLight1Sgix;
    [NativeNameAttribute("Name", "GL_FRAGMENT_LIGHT2_SGIX")]
public static EnableCap FragmentLight2Sgix;
    [NativeNameAttribute("Name", "GL_FRAGMENT_LIGHT3_SGIX")]
public static EnableCap FragmentLight3Sgix;
    [NativeNameAttribute("Name", "GL_FRAGMENT_LIGHT4_SGIX")]
public static EnableCap FragmentLight4Sgix;
    [NativeNameAttribute("Name", "GL_FRAGMENT_LIGHT5_SGIX")]
public static EnableCap FragmentLight5Sgix;
    [NativeNameAttribute("Name", "GL_FRAGMENT_LIGHT6_SGIX")]
public static EnableCap FragmentLight6Sgix;
    [NativeNameAttribute("Name", "GL_FRAGMENT_LIGHT7_SGIX")]
public static EnableCap FragmentLight7Sgix;
    [NativeNameAttribute("Name", "GL_TEXTURE_RECTANGLE")]
public static EnableCap TextureRectangle;
    [NativeNameAttribute("Name", "GL_TEXTURE_RECTANGLE_ARB")]
public static EnableCap TextureRectangleArb;
    [NativeNameAttribute("Name", "GL_TEXTURE_RECTANGLE_NV")]
public static EnableCap TextureRectangleNV;
    [NativeNameAttribute("Name", "GL_TEXTURE_CUBE_MAP")]
public static EnableCap TextureCubeMap;
    [NativeNameAttribute("Name", "GL_TEXTURE_CUBE_MAP_ARB")]
public static EnableCap TextureCubeMapArb;
    [NativeNameAttribute("Name", "GL_TEXTURE_CUBE_MAP_EXT")]
public static EnableCap TextureCubeMapExt;
    [NativeNameAttribute("Name", "GL_TEXTURE_CUBE_MAP_OES")]
public static EnableCap TextureCubeMapOes;
    [NativeNameAttribute("Name", "GL_PROGRAM_POINT_SIZE")]
public static EnableCap ProgramPointSize;
    [NativeNameAttribute("Name", "GL_DEPTH_CLAMP")]
public static EnableCap DepthClamp;
    [NativeNameAttribute("Name", "GL_TEXTURE_CUBE_MAP_SEAMLESS")]
public static EnableCap TextureCubeMapSeamless;
    [NativeNameAttribute("Name", "GL_SAMPLE_SHADING")]
public static EnableCap SampleShading;
    [NativeNameAttribute("Name", "GL_RASTERIZER_DISCARD")]
public static EnableCap RasterizerDiscard;
    [NativeNameAttribute("Name", "GL_PRIMITIVE_RESTART_FIXED_INDEX")]
public static EnableCap PrimitiveRestartFixedIndex;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_SRGB")]
public static EnableCap FramebufferSrgb;
    [NativeNameAttribute("Name", "GL_SAMPLE_MASK")]
public static EnableCap SampleMask;
    [NativeNameAttribute("Name", "GL_FETCH_PER_SAMPLE_ARM")]
public static EnableCap FetchPerSampleArm;
    [NativeNameAttribute("Name", "GL_PRIMITIVE_RESTART")]
public static EnableCap PrimitiveRestart;
    [NativeNameAttribute("Name", "GL_DEBUG_OUTPUT")]
public static EnableCap DebugOutput;
    [NativeNameAttribute("Name", "GL_SHADING_RATE_IMAGE_PER_PRIMITIVE_NV")]
public static EnableCap ShadingRateImagePerPrimitiveNV;
    [NativeNameAttribute("Name", "GL_SHADING_RATE_PRESERVE_ASPECT_RATIO_QCOM")]
public static EnableCap ShadingRatePreserveAspectRatioQCom;
}
[NativeNameAttribute("Name", "ErrorCode")]
public enum Silk.NET.OpenGL.ErrorCode : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_NO_ERROR")]
public static ErrorCode NoError;
    [NativeNameAttribute("Name", "GL_INVALID_ENUM")]
public static ErrorCode InvalidEnum;
    [NativeNameAttribute("Name", "GL_INVALID_VALUE")]
public static ErrorCode InvalidValue;
    [NativeNameAttribute("Name", "GL_INVALID_OPERATION")]
public static ErrorCode InvalidOperation;
    [NativeNameAttribute("Name", "GL_STACK_OVERFLOW")]
public static ErrorCode StackOverflow;
    [NativeNameAttribute("Name", "GL_STACK_UNDERFLOW")]
public static ErrorCode StackUnderflow;
    [NativeNameAttribute("Name", "GL_OUT_OF_MEMORY")]
public static ErrorCode OutOfMemory;
    [NativeNameAttribute("Name", "GL_INVALID_FRAMEBUFFER_OPERATION")]
public static ErrorCode InvalidFramebufferOperation;
    [NativeNameAttribute("Name", "GL_INVALID_FRAMEBUFFER_OPERATION_EXT")]
public static ErrorCode InvalidFramebufferOperationExt;
    [NativeNameAttribute("Name", "GL_INVALID_FRAMEBUFFER_OPERATION_OES")]
public static ErrorCode InvalidFramebufferOperationOes;
    [NativeNameAttribute("Name", "GL_TABLE_TOO_LARGE_EXT")]
public static ErrorCode TableTooLargeExt;
    [NativeNameAttribute("Name", "GL_TABLE_TOO_LARGE")]
public static ErrorCode TableTooLarge;
    [NativeNameAttribute("Name", "GL_TEXTURE_TOO_LARGE_EXT")]
public static ErrorCode TextureTooLargeExt;
}
[NativeNameAttribute("Name", "EvalMapsModeNV")]
public enum Silk.NET.OpenGL.EvalMapsModeNV : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_FILL_NV")]
public static EvalMapsModeNV FillNV;
}
[NativeNameAttribute("Name", "EvalTargetNV")]
public enum Silk.NET.OpenGL.EvalTargetNV : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_EVAL_2D_NV")]
public static EvalTargetNV Eval2DNV;
    [NativeNameAttribute("Name", "GL_EVAL_TRIANGULAR_2D_NV")]
public static EvalTargetNV EvalTriangular2DNV;
}
[NativeNameAttribute("Name", "ExternalHandleType")]
public enum Silk.NET.OpenGL.ExternalHandleType : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_HANDLE_TYPE_OPAQUE_FD_EXT")]
public static ExternalHandleType HandleTypeOpaqueFDExt;
    [NativeNameAttribute("Name", "GL_HANDLE_TYPE_OPAQUE_WIN32_EXT")]
public static ExternalHandleType HandleTypeOpaqueWin32Ext;
    [NativeNameAttribute("Name", "GL_HANDLE_TYPE_OPAQUE_WIN32_KMT_EXT")]
public static ExternalHandleType HandleTypeOpaqueWin32KmtExt;
    [NativeNameAttribute("Name", "GL_HANDLE_TYPE_D3D12_TILEPOOL_EXT")]
public static ExternalHandleType HandleTypeD3D12TilepoolExt;
    [NativeNameAttribute("Name", "GL_HANDLE_TYPE_D3D12_RESOURCE_EXT")]
public static ExternalHandleType HandleTypeD3D12ResourceExt;
    [NativeNameAttribute("Name", "GL_HANDLE_TYPE_D3D11_IMAGE_EXT")]
public static ExternalHandleType HandleTypeD3D11ImageExt;
    [NativeNameAttribute("Name", "GL_HANDLE_TYPE_D3D11_IMAGE_KMT_EXT")]
public static ExternalHandleType HandleTypeD3D11ImageKmtExt;
    [NativeNameAttribute("Name", "GL_HANDLE_TYPE_D3D12_FENCE_EXT")]
public static ExternalHandleType HandleTypeD3D12FenceExt;
}
[NativeNameAttribute("Name", "FeedBackToken")]
public enum Silk.NET.OpenGL.FeedBackToken : Enum {
    public int value__;
}
[NativeNameAttribute("Name", "FeedbackType")]
public enum Silk.NET.OpenGL.FeedbackType : Enum {
    public int value__;
}
[NativeNameAttribute("Name", "FenceConditionNV")]
public enum Silk.NET.OpenGL.FenceConditionNV : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_ALL_COMPLETED_NV")]
public static FenceConditionNV AllCompletedNV;
}
[NativeNameAttribute("Name", "FenceParameterNameNV")]
public enum Silk.NET.OpenGL.FenceParameterNameNV : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_FENCE_STATUS_NV")]
public static FenceParameterNameNV FenceStatusNV;
    [NativeNameAttribute("Name", "GL_FENCE_CONDITION_NV")]
public static FenceParameterNameNV FenceConditionNV;
}
[NativeNameAttribute("Name", "FfdMaskSGIX")]
public enum Silk.NET.OpenGL.FfdMaskSGIX : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_TEXTURE_DEFORMATION_BIT_SGIX")]
public static FfdMaskSGIX TextureDeformationBitSgix;
    [NativeNameAttribute("Name", "GL_GEOMETRY_DEFORMATION_BIT_SGIX")]
public static FfdMaskSGIX GeometryDeformationBitSgix;
}
[NativeNameAttribute("Name", "FfdTargetSGIX")]
public enum Silk.NET.OpenGL.FfdTargetSGIX : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_GEOMETRY_DEFORMATION_SGIX")]
public static FfdTargetSGIX GeometryDeformationSgix;
    [NativeNameAttribute("Name", "GL_TEXTURE_DEFORMATION_SGIX")]
public static FfdTargetSGIX TextureDeformationSgix;
}
[NativeNameAttribute("Name", "FogCoordinatePointerType")]
public enum Silk.NET.OpenGL.FogCoordinatePointerType : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_FLOAT")]
public static FogCoordinatePointerType Float;
    [NativeNameAttribute("Name", "GL_DOUBLE")]
public static FogCoordinatePointerType Double;
}
[NativeNameAttribute("Name", "FogMode")]
public enum Silk.NET.OpenGL.FogMode : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_LINEAR")]
public static FogMode Linear;
    [NativeNameAttribute("Name", "GL_FOG_FUNC_SGIS")]
public static FogMode FogFuncSgis;
}
[NativeNameAttribute("Name", "FogParameter")]
public enum Silk.NET.OpenGL.FogParameter : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_FOG_OFFSET_VALUE_SGIX")]
public static FogParameter FogOffsetValueSgix;
}
[NativeNameAttribute("Name", "FogPName")]
public enum Silk.NET.OpenGL.FogPName : Enum {
    public int value__;
}
[NativeNameAttribute("Name", "FogPointerTypeEXT")]
public enum Silk.NET.OpenGL.FogPointerTypeEXT : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_FLOAT")]
public static FogPointerTypeEXT Float;
    [NativeNameAttribute("Name", "GL_DOUBLE")]
public static FogPointerTypeEXT Double;
}
[NativeNameAttribute("Name", "FogPointerTypeIBM")]
public enum Silk.NET.OpenGL.FogPointerTypeIBM : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_FLOAT")]
public static FogPointerTypeIBM Float;
    [NativeNameAttribute("Name", "GL_DOUBLE")]
public static FogPointerTypeIBM Double;
}
[NativeNameAttribute("Name", "FoveationConfigBitQCOM")]
public enum Silk.NET.OpenGL.FoveationConfigBitQCOM : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_FOVEATION_ENABLE_BIT_QCOM")]
public static FoveationConfigBitQCOM FoveationEnableBitQCom;
    [NativeNameAttribute("Name", "GL_FOVEATION_SCALED_BIN_METHOD_BIT_QCOM")]
public static FoveationConfigBitQCOM FoveationScaledBinMethodBitQCom;
    [NativeNameAttribute("Name", "GL_FOVEATION_SUBSAMPLED_LAYOUT_METHOD_BIT_QCOM")]
public static FoveationConfigBitQCOM FoveationSubsampledLayoutMethodBitQCom;
}
[NativeNameAttribute("Name", "FragmentLightModelParameterSGIX")]
public enum Silk.NET.OpenGL.FragmentLightModelParameterSGIX : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX")]
public static FragmentLightModelParameterSGIX FragmentLightModelLocalViewerSgix;
    [NativeNameAttribute("Name", "GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX")]
public static FragmentLightModelParameterSGIX FragmentLightModelTwoSideSgix;
    [NativeNameAttribute("Name", "GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX")]
public static FragmentLightModelParameterSGIX FragmentLightModelAmbientSgix;
    [NativeNameAttribute("Name", "GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX")]
public static FragmentLightModelParameterSGIX FragmentLightModelNormalInterpolationSgix;
}
[NativeNameAttribute("Name", "FragmentLightNameSGIX")]
public enum Silk.NET.OpenGL.FragmentLightNameSGIX : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_FRAGMENT_LIGHT0_SGIX")]
public static FragmentLightNameSGIX FragmentLight0Sgix;
    [NativeNameAttribute("Name", "GL_FRAGMENT_LIGHT1_SGIX")]
public static FragmentLightNameSGIX FragmentLight1Sgix;
    [NativeNameAttribute("Name", "GL_FRAGMENT_LIGHT2_SGIX")]
public static FragmentLightNameSGIX FragmentLight2Sgix;
    [NativeNameAttribute("Name", "GL_FRAGMENT_LIGHT3_SGIX")]
public static FragmentLightNameSGIX FragmentLight3Sgix;
    [NativeNameAttribute("Name", "GL_FRAGMENT_LIGHT4_SGIX")]
public static FragmentLightNameSGIX FragmentLight4Sgix;
    [NativeNameAttribute("Name", "GL_FRAGMENT_LIGHT5_SGIX")]
public static FragmentLightNameSGIX FragmentLight5Sgix;
    [NativeNameAttribute("Name", "GL_FRAGMENT_LIGHT6_SGIX")]
public static FragmentLightNameSGIX FragmentLight6Sgix;
    [NativeNameAttribute("Name", "GL_FRAGMENT_LIGHT7_SGIX")]
public static FragmentLightNameSGIX FragmentLight7Sgix;
}
[NativeNameAttribute("Name", "FragmentLightParameterSGIX")]
public enum Silk.NET.OpenGL.FragmentLightParameterSGIX : Enum {
    public int value__;
}
[NativeNameAttribute("Name", "FragmentOpATI")]
public enum Silk.NET.OpenGL.FragmentOpATI : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_MOV_ATI")]
public static FragmentOpATI MovAti;
    [NativeNameAttribute("Name", "GL_ADD_ATI")]
public static FragmentOpATI AddAti;
    [NativeNameAttribute("Name", "GL_MUL_ATI")]
public static FragmentOpATI MulAti;
    [NativeNameAttribute("Name", "GL_SUB_ATI")]
public static FragmentOpATI SubAti;
    [NativeNameAttribute("Name", "GL_DOT3_ATI")]
public static FragmentOpATI Dot3Ati;
    [NativeNameAttribute("Name", "GL_DOT4_ATI")]
public static FragmentOpATI Dot4Ati;
    [NativeNameAttribute("Name", "GL_MAD_ATI")]
public static FragmentOpATI MadAti;
    [NativeNameAttribute("Name", "GL_LERP_ATI")]
public static FragmentOpATI LerpAti;
    [NativeNameAttribute("Name", "GL_CND_ATI")]
public static FragmentOpATI CndAti;
    [NativeNameAttribute("Name", "GL_CND0_ATI")]
public static FragmentOpATI Cnd0Ati;
    [NativeNameAttribute("Name", "GL_DOT2_ADD_ATI")]
public static FragmentOpATI Dot2AddAti;
}
[NativeNameAttribute("Name", "FragmentShaderColorModMaskATI")]
public enum Silk.NET.OpenGL.FragmentShaderColorModMaskATI : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_COMP_BIT_ATI")]
public static FragmentShaderColorModMaskATI CompBitAti;
    [NativeNameAttribute("Name", "GL_NEGATE_BIT_ATI")]
public static FragmentShaderColorModMaskATI NegateBitAti;
    [NativeNameAttribute("Name", "GL_BIAS_BIT_ATI")]
public static FragmentShaderColorModMaskATI BiasBitAti;
}
[NativeNameAttribute("Name", "FragmentShaderDestMaskATI")]
public enum Silk.NET.OpenGL.FragmentShaderDestMaskATI : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_RED_BIT_ATI")]
public static FragmentShaderDestMaskATI RedBitAti;
    [NativeNameAttribute("Name", "GL_GREEN_BIT_ATI")]
public static FragmentShaderDestMaskATI GreenBitAti;
    [NativeNameAttribute("Name", "GL_BLUE_BIT_ATI")]
public static FragmentShaderDestMaskATI BlueBitAti;
}
[NativeNameAttribute("Name", "FragmentShaderDestModMaskATI")]
public enum Silk.NET.OpenGL.FragmentShaderDestModMaskATI : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_2X_BIT_ATI")]
public static FragmentShaderDestModMaskATI Gl2XBitAti;
    [NativeNameAttribute("Name", "GL_4X_BIT_ATI")]
public static FragmentShaderDestModMaskATI Gl4XBitAti;
    [NativeNameAttribute("Name", "GL_8X_BIT_ATI")]
public static FragmentShaderDestModMaskATI Gl8XBitAti;
    [NativeNameAttribute("Name", "GL_HALF_BIT_ATI")]
public static FragmentShaderDestModMaskATI HalfBitAti;
    [NativeNameAttribute("Name", "GL_QUARTER_BIT_ATI")]
public static FragmentShaderDestModMaskATI QuarterBitAti;
    [NativeNameAttribute("Name", "GL_EIGHTH_BIT_ATI")]
public static FragmentShaderDestModMaskATI EighthBitAti;
    [NativeNameAttribute("Name", "GL_SATURATE_BIT_ATI")]
public static FragmentShaderDestModMaskATI SaturateBitAti;
}
[NativeNameAttribute("Name", "framebuffer")]
public class Silk.NET.OpenGL.Framebuffer : ValueType {
    [NativeNameAttribute("Type", "")]
[NativeNameAttribute("Type.Name", "")]
[NativeNameAttribute("Name", "")]
public UInt32 Handle;
    public Framebuffer(Nullable`1<UInt32> handle);
}
[NativeNameAttribute("Name", "FramebufferAttachment")]
public enum Silk.NET.OpenGL.FramebufferAttachment : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_DEPTH_STENCIL_ATTACHMENT")]
public static FramebufferAttachment DepthStencilAttachment;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT0")]
public static FramebufferAttachment ColorAttachment0;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT1")]
public static FramebufferAttachment ColorAttachment1;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT2")]
public static FramebufferAttachment ColorAttachment2;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT3")]
public static FramebufferAttachment ColorAttachment3;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT4")]
public static FramebufferAttachment ColorAttachment4;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT5")]
public static FramebufferAttachment ColorAttachment5;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT6")]
public static FramebufferAttachment ColorAttachment6;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT7")]
public static FramebufferAttachment ColorAttachment7;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT8")]
public static FramebufferAttachment ColorAttachment8;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT9")]
public static FramebufferAttachment ColorAttachment9;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT10")]
public static FramebufferAttachment ColorAttachment10;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT11")]
public static FramebufferAttachment ColorAttachment11;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT12")]
public static FramebufferAttachment ColorAttachment12;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT13")]
public static FramebufferAttachment ColorAttachment13;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT14")]
public static FramebufferAttachment ColorAttachment14;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT15")]
public static FramebufferAttachment ColorAttachment15;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT16")]
public static FramebufferAttachment ColorAttachment16;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT17")]
public static FramebufferAttachment ColorAttachment17;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT18")]
public static FramebufferAttachment ColorAttachment18;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT19")]
public static FramebufferAttachment ColorAttachment19;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT20")]
public static FramebufferAttachment ColorAttachment20;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT21")]
public static FramebufferAttachment ColorAttachment21;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT22")]
public static FramebufferAttachment ColorAttachment22;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT23")]
public static FramebufferAttachment ColorAttachment23;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT24")]
public static FramebufferAttachment ColorAttachment24;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT25")]
public static FramebufferAttachment ColorAttachment25;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT26")]
public static FramebufferAttachment ColorAttachment26;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT27")]
public static FramebufferAttachment ColorAttachment27;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT28")]
public static FramebufferAttachment ColorAttachment28;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT29")]
public static FramebufferAttachment ColorAttachment29;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT30")]
public static FramebufferAttachment ColorAttachment30;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT31")]
public static FramebufferAttachment ColorAttachment31;
    [NativeNameAttribute("Name", "GL_DEPTH_ATTACHMENT")]
public static FramebufferAttachment DepthAttachment;
    [NativeNameAttribute("Name", "GL_STENCIL_ATTACHMENT")]
public static FramebufferAttachment StencilAttachment;
}
[NativeNameAttribute("Name", "FramebufferAttachmentParameterName")]
public enum Silk.NET.OpenGL.FramebufferAttachmentParameterName : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING")]
public static FramebufferAttachmentParameterName FramebufferAttachmentColorEncoding;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT")]
public static FramebufferAttachmentParameterName FramebufferAttachmentColorEncodingExt;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE")]
public static FramebufferAttachmentParameterName FramebufferAttachmentComponentType;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT")]
public static FramebufferAttachmentParameterName FramebufferAttachmentComponentTypeExt;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE")]
public static FramebufferAttachmentParameterName FramebufferAttachmentRedSize;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE")]
public static FramebufferAttachmentParameterName FramebufferAttachmentGreenSize;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE")]
public static FramebufferAttachmentParameterName FramebufferAttachmentBlueSize;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE")]
public static FramebufferAttachmentParameterName FramebufferAttachmentAlphaSize;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE")]
public static FramebufferAttachmentParameterName FramebufferAttachmentDepthSize;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE")]
public static FramebufferAttachmentParameterName FramebufferAttachmentStencilSize;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE")]
public static FramebufferAttachmentParameterName FramebufferAttachmentObjectType;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT")]
public static FramebufferAttachmentParameterName FramebufferAttachmentObjectTypeExt;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OES")]
public static FramebufferAttachmentParameterName FramebufferAttachmentObjectTypeOes;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME")]
public static FramebufferAttachmentParameterName FramebufferAttachmentObjectName;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT")]
public static FramebufferAttachmentParameterName FramebufferAttachmentObjectNameExt;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES")]
public static FramebufferAttachmentParameterName FramebufferAttachmentObjectNameOes;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL")]
public static FramebufferAttachmentParameterName FramebufferAttachmentTextureLevel;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT")]
public static FramebufferAttachmentParameterName FramebufferAttachmentTextureLevelExt;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OES")]
public static FramebufferAttachmentParameterName FramebufferAttachmentTextureLevelOes;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE")]
public static FramebufferAttachmentParameterName FramebufferAttachmentTextureCubeMapFace;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT")]
public static FramebufferAttachmentParameterName FramebufferAttachmentTextureCubeMapFaceExt;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OES")]
public static FramebufferAttachmentParameterName FramebufferAttachmentTextureCubeMapFaceOes;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT")]
public static FramebufferAttachmentParameterName FramebufferAttachmentTexture3DZoffsetExt;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_OES")]
public static FramebufferAttachmentParameterName FramebufferAttachmentTexture3DZoffsetOes;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER")]
public static FramebufferAttachmentParameterName FramebufferAttachmentTextureLayer;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT")]
public static FramebufferAttachmentParameterName FramebufferAttachmentTextureLayerExt;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT")]
public static FramebufferAttachmentParameterName FramebufferAttachmentTextureSamplesExt;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_ATTACHMENT_LAYERED")]
public static FramebufferAttachmentParameterName FramebufferAttachmentLayered;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB")]
public static FramebufferAttachmentParameterName FramebufferAttachmentLayeredArb;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT")]
public static FramebufferAttachmentParameterName FramebufferAttachmentLayeredExt;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_ATTACHMENT_LAYERED_OES")]
public static FramebufferAttachmentParameterName FramebufferAttachmentLayeredOes;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SCALE_IMG")]
public static FramebufferAttachmentParameterName FramebufferAttachmentTextureScaleImg;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR")]
public static FramebufferAttachmentParameterName FramebufferAttachmentTextureNumViewsOvr;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR")]
public static FramebufferAttachmentParameterName FramebufferAttachmentTextureBaseViewIndexOvr;
}
[NativeNameAttribute("Name", "FramebufferFetchNoncoherent")]
public enum Silk.NET.OpenGL.FramebufferFetchNoncoherent : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_FETCH_NONCOHERENT_QCOM")]
public static FramebufferFetchNoncoherent FramebufferFetchNoncoherentQCom;
}
[NativeNameAttribute("Name", "FramebufferParameterName")]
public enum Silk.NET.OpenGL.FramebufferParameterName : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_DEFAULT_WIDTH")]
public static FramebufferParameterName FramebufferDefaultWidth;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_DEFAULT_HEIGHT")]
public static FramebufferParameterName FramebufferDefaultHeight;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_DEFAULT_LAYERS")]
public static FramebufferParameterName FramebufferDefaultLayers;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_DEFAULT_SAMPLES")]
public static FramebufferParameterName FramebufferDefaultSamples;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS")]
public static FramebufferParameterName FramebufferDefaultFixedSampleLocations;
}
[NativeNameAttribute("Name", "FramebufferStatus")]
public enum Silk.NET.OpenGL.FramebufferStatus : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_UNDEFINED")]
public static FramebufferStatus FramebufferUndefined;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_COMPLETE")]
public static FramebufferStatus FramebufferComplete;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT")]
public static FramebufferStatus FramebufferIncompleteAttachment;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT")]
public static FramebufferStatus FramebufferIncompleteMissingAttachment;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER")]
public static FramebufferStatus FramebufferIncompleteDrawBuffer;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER")]
public static FramebufferStatus FramebufferIncompleteReadBuffer;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_UNSUPPORTED")]
public static FramebufferStatus FramebufferUnsupported;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE")]
public static FramebufferStatus FramebufferIncompleteMultisample;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS")]
public static FramebufferStatus FramebufferIncompleteLayerTargets;
}
[NativeNameAttribute("Name", "FramebufferTarget")]
public enum Silk.NET.OpenGL.FramebufferTarget : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_READ_FRAMEBUFFER")]
public static FramebufferTarget ReadFramebuffer;
    [NativeNameAttribute("Name", "GL_DRAW_FRAMEBUFFER")]
public static FramebufferTarget DrawFramebuffer;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER")]
public static FramebufferTarget Framebuffer;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_OES")]
public static FramebufferTarget FramebufferOes;
}
[NativeNameAttribute("Name", "FrontFaceDirection")]
public enum Silk.NET.OpenGL.FrontFaceDirection : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_CW")]
public static FrontFaceDirection CW;
    [NativeNameAttribute("Name", "GL_CCW")]
public static FrontFaceDirection Ccw;
}
[NativeNameAttribute("Name", "GetColorTableParameterPName")]
public enum Silk.NET.OpenGL.GetColorTableParameterPName : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_COLOR_TABLE_SCALE")]
public static GetColorTableParameterPName ColorTableScale;
    [NativeNameAttribute("Name", "GL_COLOR_TABLE_BIAS")]
public static GetColorTableParameterPName ColorTableBias;
    [NativeNameAttribute("Name", "GL_COLOR_TABLE_FORMAT")]
public static GetColorTableParameterPName ColorTableFormat;
    [NativeNameAttribute("Name", "GL_COLOR_TABLE_WIDTH")]
public static GetColorTableParameterPName ColorTableWidth;
    [NativeNameAttribute("Name", "GL_COLOR_TABLE_RED_SIZE")]
public static GetColorTableParameterPName ColorTableRedSize;
    [NativeNameAttribute("Name", "GL_COLOR_TABLE_GREEN_SIZE")]
public static GetColorTableParameterPName ColorTableGreenSize;
    [NativeNameAttribute("Name", "GL_COLOR_TABLE_BLUE_SIZE")]
public static GetColorTableParameterPName ColorTableBlueSize;
    [NativeNameAttribute("Name", "GL_COLOR_TABLE_ALPHA_SIZE")]
public static GetColorTableParameterPName ColorTableAlphaSize;
    [NativeNameAttribute("Name", "GL_COLOR_TABLE_LUMINANCE_SIZE")]
public static GetColorTableParameterPName ColorTableLuminanceSize;
    [NativeNameAttribute("Name", "GL_COLOR_TABLE_INTENSITY_SIZE")]
public static GetColorTableParameterPName ColorTableIntensitySize;
}
[NativeNameAttribute("Name", "GetColorTableParameterPNameSGI")]
public enum Silk.NET.OpenGL.GetColorTableParameterPNameSGI : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_COLOR_TABLE_SCALE")]
public static GetColorTableParameterPNameSGI ColorTableScale;
    [NativeNameAttribute("Name", "GL_COLOR_TABLE_SCALE_SGI")]
public static GetColorTableParameterPNameSGI ColorTableScaleSgi;
    [NativeNameAttribute("Name", "GL_COLOR_TABLE_BIAS")]
public static GetColorTableParameterPNameSGI ColorTableBias;
    [NativeNameAttribute("Name", "GL_COLOR_TABLE_BIAS_SGI")]
public static GetColorTableParameterPNameSGI ColorTableBiasSgi;
    [NativeNameAttribute("Name", "GL_COLOR_TABLE_FORMAT")]
public static GetColorTableParameterPNameSGI ColorTableFormat;
    [NativeNameAttribute("Name", "GL_COLOR_TABLE_FORMAT_SGI")]
public static GetColorTableParameterPNameSGI ColorTableFormatSgi;
    [NativeNameAttribute("Name", "GL_COLOR_TABLE_WIDTH")]
public static GetColorTableParameterPNameSGI ColorTableWidth;
    [NativeNameAttribute("Name", "GL_COLOR_TABLE_WIDTH_SGI")]
public static GetColorTableParameterPNameSGI ColorTableWidthSgi;
    [NativeNameAttribute("Name", "GL_COLOR_TABLE_RED_SIZE")]
public static GetColorTableParameterPNameSGI ColorTableRedSize;
    [NativeNameAttribute("Name", "GL_COLOR_TABLE_RED_SIZE_SGI")]
public static GetColorTableParameterPNameSGI ColorTableRedSizeSgi;
    [NativeNameAttribute("Name", "GL_COLOR_TABLE_GREEN_SIZE")]
public static GetColorTableParameterPNameSGI ColorTableGreenSize;
    [NativeNameAttribute("Name", "GL_COLOR_TABLE_GREEN_SIZE_SGI")]
public static GetColorTableParameterPNameSGI ColorTableGreenSizeSgi;
    [NativeNameAttribute("Name", "GL_COLOR_TABLE_BLUE_SIZE")]
public static GetColorTableParameterPNameSGI ColorTableBlueSize;
    [NativeNameAttribute("Name", "GL_COLOR_TABLE_BLUE_SIZE_SGI")]
public static GetColorTableParameterPNameSGI ColorTableBlueSizeSgi;
    [NativeNameAttribute("Name", "GL_COLOR_TABLE_ALPHA_SIZE")]
public static GetColorTableParameterPNameSGI ColorTableAlphaSize;
    [NativeNameAttribute("Name", "GL_COLOR_TABLE_ALPHA_SIZE_SGI")]
public static GetColorTableParameterPNameSGI ColorTableAlphaSizeSgi;
    [NativeNameAttribute("Name", "GL_COLOR_TABLE_LUMINANCE_SIZE")]
public static GetColorTableParameterPNameSGI ColorTableLuminanceSize;
    [NativeNameAttribute("Name", "GL_COLOR_TABLE_LUMINANCE_SIZE_SGI")]
public static GetColorTableParameterPNameSGI ColorTableLuminanceSizeSgi;
    [NativeNameAttribute("Name", "GL_COLOR_TABLE_INTENSITY_SIZE")]
public static GetColorTableParameterPNameSGI ColorTableIntensitySize;
    [NativeNameAttribute("Name", "GL_COLOR_TABLE_INTENSITY_SIZE_SGI")]
public static GetColorTableParameterPNameSGI ColorTableIntensitySizeSgi;
}
[NativeNameAttribute("Name", "GetConvolutionParameter")]
public enum Silk.NET.OpenGL.GetConvolutionParameter : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_CONVOLUTION_BORDER_MODE")]
public static GetConvolutionParameter ConvolutionBorderMode;
    [NativeNameAttribute("Name", "GL_CONVOLUTION_BORDER_MODE_EXT")]
public static GetConvolutionParameter ConvolutionBorderModeExt;
    [NativeNameAttribute("Name", "GL_CONVOLUTION_FILTER_SCALE")]
public static GetConvolutionParameter ConvolutionFilterScale;
    [NativeNameAttribute("Name", "GL_CONVOLUTION_FILTER_SCALE_EXT")]
public static GetConvolutionParameter ConvolutionFilterScaleExt;
    [NativeNameAttribute("Name", "GL_CONVOLUTION_FILTER_BIAS")]
public static GetConvolutionParameter ConvolutionFilterBias;
    [NativeNameAttribute("Name", "GL_CONVOLUTION_FILTER_BIAS_EXT")]
public static GetConvolutionParameter ConvolutionFilterBiasExt;
    [NativeNameAttribute("Name", "GL_CONVOLUTION_FORMAT")]
public static GetConvolutionParameter ConvolutionFormat;
    [NativeNameAttribute("Name", "GL_CONVOLUTION_FORMAT_EXT")]
public static GetConvolutionParameter ConvolutionFormatExt;
    [NativeNameAttribute("Name", "GL_CONVOLUTION_WIDTH")]
public static GetConvolutionParameter ConvolutionWidth;
    [NativeNameAttribute("Name", "GL_CONVOLUTION_WIDTH_EXT")]
public static GetConvolutionParameter ConvolutionWidthExt;
    [NativeNameAttribute("Name", "GL_CONVOLUTION_HEIGHT")]
public static GetConvolutionParameter ConvolutionHeight;
    [NativeNameAttribute("Name", "GL_CONVOLUTION_HEIGHT_EXT")]
public static GetConvolutionParameter ConvolutionHeightExt;
    [NativeNameAttribute("Name", "GL_MAX_CONVOLUTION_WIDTH")]
public static GetConvolutionParameter MaxConvolutionWidth;
    [NativeNameAttribute("Name", "GL_MAX_CONVOLUTION_WIDTH_EXT")]
public static GetConvolutionParameter MaxConvolutionWidthExt;
    [NativeNameAttribute("Name", "GL_MAX_CONVOLUTION_HEIGHT")]
public static GetConvolutionParameter MaxConvolutionHeight;
    [NativeNameAttribute("Name", "GL_MAX_CONVOLUTION_HEIGHT_EXT")]
public static GetConvolutionParameter MaxConvolutionHeightExt;
    [NativeNameAttribute("Name", "GL_CONVOLUTION_BORDER_COLOR")]
public static GetConvolutionParameter ConvolutionBorderColor;
}
[NativeNameAttribute("Name", "GetFramebufferParameter")]
public enum Silk.NET.OpenGL.GetFramebufferParameter : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_DOUBLEBUFFER")]
public static GetFramebufferParameter Doublebuffer;
    [NativeNameAttribute("Name", "GL_STEREO")]
public static GetFramebufferParameter Stereo;
    [NativeNameAttribute("Name", "GL_SAMPLE_BUFFERS")]
public static GetFramebufferParameter SampleBuffers;
    [NativeNameAttribute("Name", "GL_SAMPLES")]
public static GetFramebufferParameter Samples;
    [NativeNameAttribute("Name", "GL_IMPLEMENTATION_COLOR_READ_TYPE")]
public static GetFramebufferParameter ImplementationColorReadType;
    [NativeNameAttribute("Name", "GL_IMPLEMENTATION_COLOR_READ_FORMAT")]
public static GetFramebufferParameter ImplementationColorReadFormat;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_DEFAULT_WIDTH")]
public static GetFramebufferParameter FramebufferDefaultWidth;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_DEFAULT_HEIGHT")]
public static GetFramebufferParameter FramebufferDefaultHeight;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_DEFAULT_LAYERS")]
public static GetFramebufferParameter FramebufferDefaultLayers;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_DEFAULT_SAMPLES")]
public static GetFramebufferParameter FramebufferDefaultSamples;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS")]
public static GetFramebufferParameter FramebufferDefaultFixedSampleLocations;
}
[NativeNameAttribute("Name", "GetHistogramParameterPNameEXT")]
public enum Silk.NET.OpenGL.GetHistogramParameterPNameEXT : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_HISTOGRAM_WIDTH")]
public static GetHistogramParameterPNameEXT HistogramWidth;
    [NativeNameAttribute("Name", "GL_HISTOGRAM_WIDTH_EXT")]
public static GetHistogramParameterPNameEXT HistogramWidthExt;
    [NativeNameAttribute("Name", "GL_HISTOGRAM_FORMAT")]
public static GetHistogramParameterPNameEXT HistogramFormat;
    [NativeNameAttribute("Name", "GL_HISTOGRAM_FORMAT_EXT")]
public static GetHistogramParameterPNameEXT HistogramFormatExt;
    [NativeNameAttribute("Name", "GL_HISTOGRAM_RED_SIZE")]
public static GetHistogramParameterPNameEXT HistogramRedSize;
    [NativeNameAttribute("Name", "GL_HISTOGRAM_RED_SIZE_EXT")]
public static GetHistogramParameterPNameEXT HistogramRedSizeExt;
    [NativeNameAttribute("Name", "GL_HISTOGRAM_GREEN_SIZE")]
public static GetHistogramParameterPNameEXT HistogramGreenSize;
    [NativeNameAttribute("Name", "GL_HISTOGRAM_GREEN_SIZE_EXT")]
public static GetHistogramParameterPNameEXT HistogramGreenSizeExt;
    [NativeNameAttribute("Name", "GL_HISTOGRAM_BLUE_SIZE")]
public static GetHistogramParameterPNameEXT HistogramBlueSize;
    [NativeNameAttribute("Name", "GL_HISTOGRAM_BLUE_SIZE_EXT")]
public static GetHistogramParameterPNameEXT HistogramBlueSizeExt;
    [NativeNameAttribute("Name", "GL_HISTOGRAM_ALPHA_SIZE")]
public static GetHistogramParameterPNameEXT HistogramAlphaSize;
    [NativeNameAttribute("Name", "GL_HISTOGRAM_ALPHA_SIZE_EXT")]
public static GetHistogramParameterPNameEXT HistogramAlphaSizeExt;
    [NativeNameAttribute("Name", "GL_HISTOGRAM_LUMINANCE_SIZE")]
public static GetHistogramParameterPNameEXT HistogramLuminanceSize;
    [NativeNameAttribute("Name", "GL_HISTOGRAM_LUMINANCE_SIZE_EXT")]
public static GetHistogramParameterPNameEXT HistogramLuminanceSizeExt;
    [NativeNameAttribute("Name", "GL_HISTOGRAM_SINK")]
public static GetHistogramParameterPNameEXT HistogramSink;
    [NativeNameAttribute("Name", "GL_HISTOGRAM_SINK_EXT")]
public static GetHistogramParameterPNameEXT HistogramSinkExt;
}
[NativeNameAttribute("Name", "GetMapQuery")]
public enum Silk.NET.OpenGL.GetMapQuery : Enum {
    public int value__;
}
[NativeNameAttribute("Name", "GetMinmaxParameterPNameEXT")]
public enum Silk.NET.OpenGL.GetMinmaxParameterPNameEXT : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_MINMAX_FORMAT")]
public static GetMinmaxParameterPNameEXT MinmaxFormat;
    [NativeNameAttribute("Name", "GL_MINMAX_FORMAT_EXT")]
public static GetMinmaxParameterPNameEXT MinmaxFormatExt;
    [NativeNameAttribute("Name", "GL_MINMAX_SINK")]
public static GetMinmaxParameterPNameEXT MinmaxSink;
    [NativeNameAttribute("Name", "GL_MINMAX_SINK_EXT")]
public static GetMinmaxParameterPNameEXT MinmaxSinkExt;
}
[NativeNameAttribute("Name", "GetMultisamplePNameNV")]
public enum Silk.NET.OpenGL.GetMultisamplePNameNV : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_SAMPLE_POSITION")]
public static GetMultisamplePNameNV SamplePosition;
    [NativeNameAttribute("Name", "GL_SAMPLE_LOCATION_ARB")]
public static GetMultisamplePNameNV SampleLocationArb;
    [NativeNameAttribute("Name", "GL_PROGRAMMABLE_SAMPLE_LOCATION_ARB")]
public static GetMultisamplePNameNV ProgrammableSampleLocationArb;
}
[NativeNameAttribute("Name", "GetPixelMap")]
public enum Silk.NET.OpenGL.GetPixelMap : Enum {
    public int value__;
}
[NativeNameAttribute("Name", "GetPName")]
public enum Silk.NET.OpenGL.GetPName : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_POINT_SIZE")]
public static GetPName PointSize;
    [NativeNameAttribute("Name", "GL_POINT_SIZE_RANGE")]
public static GetPName PointSizeRange;
    [NativeNameAttribute("Name", "GL_SMOOTH_POINT_SIZE_RANGE")]
public static GetPName SmoothPointSizeRange;
    [NativeNameAttribute("Name", "GL_POINT_SIZE_GRANULARITY")]
public static GetPName PointSizeGranularity;
    [NativeNameAttribute("Name", "GL_SMOOTH_POINT_SIZE_GRANULARITY")]
public static GetPName SmoothPointSizeGranularity;
    [NativeNameAttribute("Name", "GL_LINE_SMOOTH")]
public static GetPName LineSmooth;
    [NativeNameAttribute("Name", "GL_LINE_WIDTH")]
public static GetPName LineWidth;
    [NativeNameAttribute("Name", "GL_LINE_WIDTH_RANGE")]
public static GetPName LineWidthRange;
    [NativeNameAttribute("Name", "GL_SMOOTH_LINE_WIDTH_RANGE")]
public static GetPName SmoothLineWidthRange;
    [NativeNameAttribute("Name", "GL_LINE_WIDTH_GRANULARITY")]
public static GetPName LineWidthGranularity;
    [NativeNameAttribute("Name", "GL_SMOOTH_LINE_WIDTH_GRANULARITY")]
public static GetPName SmoothLineWidthGranularity;
    [NativeNameAttribute("Name", "GL_POLYGON_MODE")]
public static GetPName PolygonMode;
    [NativeNameAttribute("Name", "GL_POLYGON_SMOOTH")]
public static GetPName PolygonSmooth;
    [NativeNameAttribute("Name", "GL_CULL_FACE")]
public static GetPName CullFace;
    [NativeNameAttribute("Name", "GL_CULL_FACE_MODE")]
public static GetPName CullFaceMode;
    [NativeNameAttribute("Name", "GL_FRONT_FACE")]
public static GetPName FrontFace;
    [NativeNameAttribute("Name", "GL_DEPTH_RANGE")]
public static GetPName DepthRange;
    [NativeNameAttribute("Name", "GL_DEPTH_TEST")]
public static GetPName DepthTest;
    [NativeNameAttribute("Name", "GL_DEPTH_WRITEMASK")]
public static GetPName DepthWritemask;
    [NativeNameAttribute("Name", "GL_DEPTH_CLEAR_VALUE")]
public static GetPName DepthClearValue;
    [NativeNameAttribute("Name", "GL_DEPTH_FUNC")]
public static GetPName DepthFunc;
    [NativeNameAttribute("Name", "GL_STENCIL_TEST")]
public static GetPName StencilTest;
    [NativeNameAttribute("Name", "GL_STENCIL_CLEAR_VALUE")]
public static GetPName StencilClearValue;
    [NativeNameAttribute("Name", "GL_STENCIL_FUNC")]
public static GetPName StencilFunc;
    [NativeNameAttribute("Name", "GL_STENCIL_VALUE_MASK")]
public static GetPName StencilValueMask;
    [NativeNameAttribute("Name", "GL_STENCIL_FAIL")]
public static GetPName StencilFail;
    [NativeNameAttribute("Name", "GL_STENCIL_PASS_DEPTH_FAIL")]
public static GetPName StencilPassDepthFail;
    [NativeNameAttribute("Name", "GL_STENCIL_PASS_DEPTH_PASS")]
public static GetPName StencilPassDepthPass;
    [NativeNameAttribute("Name", "GL_STENCIL_REF")]
public static GetPName StencilRef;
    [NativeNameAttribute("Name", "GL_STENCIL_WRITEMASK")]
public static GetPName StencilWritemask;
    [NativeNameAttribute("Name", "GL_VIEWPORT")]
public static GetPName Viewport;
    [NativeNameAttribute("Name", "GL_MODELVIEW0_STACK_DEPTH_EXT")]
public static GetPName Modelview0StackDepthExt;
    [NativeNameAttribute("Name", "GL_MODELVIEW0_MATRIX_EXT")]
public static GetPName Modelview0MatrixExt;
    [NativeNameAttribute("Name", "GL_ALPHA_TEST_QCOM")]
public static GetPName AlphaTestQCom;
    [NativeNameAttribute("Name", "GL_ALPHA_TEST_FUNC_QCOM")]
public static GetPName AlphaTestFuncQCom;
    [NativeNameAttribute("Name", "GL_ALPHA_TEST_REF_QCOM")]
public static GetPName AlphaTestRefQCom;
    [NativeNameAttribute("Name", "GL_DITHER")]
public static GetPName Dither;
    [NativeNameAttribute("Name", "GL_BLEND_DST")]
public static GetPName BlendDst;
    [NativeNameAttribute("Name", "GL_BLEND_SRC")]
public static GetPName BlendSrc;
    [NativeNameAttribute("Name", "GL_BLEND")]
public static GetPName Blend;
    [NativeNameAttribute("Name", "GL_LOGIC_OP_MODE")]
public static GetPName LogicOpMode;
    [NativeNameAttribute("Name", "GL_COLOR_LOGIC_OP")]
public static GetPName ColorLogicOp;
    [NativeNameAttribute("Name", "GL_DRAW_BUFFER")]
public static GetPName DrawBuffer;
    [NativeNameAttribute("Name", "GL_DRAW_BUFFER_EXT")]
public static GetPName DrawBufferExt;
    [NativeNameAttribute("Name", "GL_READ_BUFFER")]
public static GetPName ReadBuffer;
    [NativeNameAttribute("Name", "GL_READ_BUFFER_EXT")]
public static GetPName ReadBufferExt;
    [NativeNameAttribute("Name", "GL_READ_BUFFER_NV")]
public static GetPName ReadBufferNV;
    [NativeNameAttribute("Name", "GL_SCISSOR_BOX")]
public static GetPName ScissorBox;
    [NativeNameAttribute("Name", "GL_SCISSOR_TEST")]
public static GetPName ScissorTest;
    [NativeNameAttribute("Name", "GL_COLOR_CLEAR_VALUE")]
public static GetPName ColorClearValue;
    [NativeNameAttribute("Name", "GL_COLOR_WRITEMASK")]
public static GetPName ColorWritemask;
    [NativeNameAttribute("Name", "GL_DOUBLEBUFFER")]
public static GetPName Doublebuffer;
    [NativeNameAttribute("Name", "GL_STEREO")]
public static GetPName Stereo;
    [NativeNameAttribute("Name", "GL_LINE_SMOOTH_HINT")]
public static GetPName LineSmoothHint;
    [NativeNameAttribute("Name", "GL_POLYGON_SMOOTH_HINT")]
public static GetPName PolygonSmoothHint;
    [NativeNameAttribute("Name", "GL_UNPACK_SWAP_BYTES")]
public static GetPName UnpackSwapBytes;
    [NativeNameAttribute("Name", "GL_UNPACK_LSB_FIRST")]
public static GetPName UnpackLsbFirst;
    [NativeNameAttribute("Name", "GL_UNPACK_ROW_LENGTH")]
public static GetPName UnpackRowLength;
    [NativeNameAttribute("Name", "GL_UNPACK_SKIP_ROWS")]
public static GetPName UnpackSkipRows;
    [NativeNameAttribute("Name", "GL_UNPACK_SKIP_PIXELS")]
public static GetPName UnpackSkipPixels;
    [NativeNameAttribute("Name", "GL_UNPACK_ALIGNMENT")]
public static GetPName UnpackAlignment;
    [NativeNameAttribute("Name", "GL_PACK_SWAP_BYTES")]
public static GetPName PackSwapBytes;
    [NativeNameAttribute("Name", "GL_PACK_LSB_FIRST")]
public static GetPName PackLsbFirst;
    [NativeNameAttribute("Name", "GL_PACK_ROW_LENGTH")]
public static GetPName PackRowLength;
    [NativeNameAttribute("Name", "GL_PACK_SKIP_ROWS")]
public static GetPName PackSkipRows;
    [NativeNameAttribute("Name", "GL_PACK_SKIP_PIXELS")]
public static GetPName PackSkipPixels;
    [NativeNameAttribute("Name", "GL_PACK_ALIGNMENT")]
public static GetPName PackAlignment;
    [NativeNameAttribute("Name", "GL_MAX_CLIP_DISTANCES")]
public static GetPName MaxClipDistances;
    [NativeNameAttribute("Name", "GL_MAX_TEXTURE_SIZE")]
public static GetPName MaxTextureSize;
    [NativeNameAttribute("Name", "GL_MAX_VIEWPORT_DIMS")]
public static GetPName MaxViewportDims;
    [NativeNameAttribute("Name", "GL_SUBPIXEL_BITS")]
public static GetPName SubpixelBits;
    [NativeNameAttribute("Name", "GL_TEXTURE_1D")]
public static GetPName Texture1D;
    [NativeNameAttribute("Name", "GL_TEXTURE_2D")]
public static GetPName Texture2D;
    [NativeNameAttribute("Name", "GL_POLYGON_OFFSET_UNITS")]
public static GetPName PolygonOffsetUnits;
    [NativeNameAttribute("Name", "GL_POLYGON_OFFSET_POINT")]
public static GetPName PolygonOffsetPoint;
    [NativeNameAttribute("Name", "GL_POLYGON_OFFSET_LINE")]
public static GetPName PolygonOffsetLine;
    [NativeNameAttribute("Name", "GL_BLEND_COLOR")]
public static GetPName BlendColor;
    [NativeNameAttribute("Name", "GL_BLEND_COLOR_EXT")]
public static GetPName BlendColorExt;
    [NativeNameAttribute("Name", "GL_BLEND_EQUATION_EXT")]
public static GetPName BlendEquationExt;
    [NativeNameAttribute("Name", "GL_BLEND_EQUATION_RGB")]
public static GetPName BlendEquationRgb;
    [NativeNameAttribute("Name", "GL_PACK_CMYK_HINT_EXT")]
public static GetPName PackCmykHintExt;
    [NativeNameAttribute("Name", "GL_UNPACK_CMYK_HINT_EXT")]
public static GetPName UnpackCmykHintExt;
    [NativeNameAttribute("Name", "GL_CONVOLUTION_1D_EXT")]
public static GetPName Convolution1DExt;
    [NativeNameAttribute("Name", "GL_CONVOLUTION_2D_EXT")]
public static GetPName Convolution2DExt;
    [NativeNameAttribute("Name", "GL_SEPARABLE_2D_EXT")]
public static GetPName Separable2DExt;
    [NativeNameAttribute("Name", "GL_POST_CONVOLUTION_RED_SCALE_EXT")]
public static GetPName PostConvolutionRedScaleExt;
    [NativeNameAttribute("Name", "GL_POST_CONVOLUTION_GREEN_SCALE_EXT")]
public static GetPName PostConvolutionGreenScaleExt;
    [NativeNameAttribute("Name", "GL_POST_CONVOLUTION_BLUE_SCALE_EXT")]
public static GetPName PostConvolutionBlueScaleExt;
    [NativeNameAttribute("Name", "GL_POST_CONVOLUTION_ALPHA_SCALE_EXT")]
public static GetPName PostConvolutionAlphaScaleExt;
    [NativeNameAttribute("Name", "GL_POST_CONVOLUTION_RED_BIAS_EXT")]
public static GetPName PostConvolutionRedBiasExt;
    [NativeNameAttribute("Name", "GL_POST_CONVOLUTION_GREEN_BIAS_EXT")]
public static GetPName PostConvolutionGreenBiasExt;
    [NativeNameAttribute("Name", "GL_POST_CONVOLUTION_BLUE_BIAS_EXT")]
public static GetPName PostConvolutionBlueBiasExt;
    [NativeNameAttribute("Name", "GL_POST_CONVOLUTION_ALPHA_BIAS_EXT")]
public static GetPName PostConvolutionAlphaBiasExt;
    [NativeNameAttribute("Name", "GL_HISTOGRAM_EXT")]
public static GetPName HistogramExt;
    [NativeNameAttribute("Name", "GL_MINMAX_EXT")]
public static GetPName MinmaxExt;
    [NativeNameAttribute("Name", "GL_POLYGON_OFFSET_FILL")]
public static GetPName PolygonOffsetFill;
    [NativeNameAttribute("Name", "GL_POLYGON_OFFSET_FACTOR")]
public static GetPName PolygonOffsetFactor;
    [NativeNameAttribute("Name", "GL_POLYGON_OFFSET_BIAS_EXT")]
public static GetPName PolygonOffsetBiasExt;
    [NativeNameAttribute("Name", "GL_RESCALE_NORMAL_EXT")]
public static GetPName RescaleNormalExt;
    [NativeNameAttribute("Name", "GL_TEXTURE_BINDING_1D")]
public static GetPName TextureBinding1D;
    [NativeNameAttribute("Name", "GL_TEXTURE_BINDING_2D")]
public static GetPName TextureBinding2D;
    [NativeNameAttribute("Name", "GL_TEXTURE_3D_BINDING_EXT")]
public static GetPName Texture3DBindingExt;
    [NativeNameAttribute("Name", "GL_TEXTURE_BINDING_3D")]
public static GetPName TextureBinding3D;
    [NativeNameAttribute("Name", "GL_PACK_SKIP_IMAGES")]
public static GetPName PackSkipImages;
    [NativeNameAttribute("Name", "GL_PACK_SKIP_IMAGES_EXT")]
public static GetPName PackSkipImagesExt;
    [NativeNameAttribute("Name", "GL_PACK_IMAGE_HEIGHT")]
public static GetPName PackImageHeight;
    [NativeNameAttribute("Name", "GL_PACK_IMAGE_HEIGHT_EXT")]
public static GetPName PackImageHeightExt;
    [NativeNameAttribute("Name", "GL_UNPACK_SKIP_IMAGES")]
public static GetPName UnpackSkipImages;
    [NativeNameAttribute("Name", "GL_UNPACK_SKIP_IMAGES_EXT")]
public static GetPName UnpackSkipImagesExt;
    [NativeNameAttribute("Name", "GL_UNPACK_IMAGE_HEIGHT")]
public static GetPName UnpackImageHeight;
    [NativeNameAttribute("Name", "GL_UNPACK_IMAGE_HEIGHT_EXT")]
public static GetPName UnpackImageHeightExt;
    [NativeNameAttribute("Name", "GL_TEXTURE_3D_EXT")]
public static GetPName Texture3DExt;
    [NativeNameAttribute("Name", "GL_MAX_3D_TEXTURE_SIZE")]
public static GetPName Max3DTextureSize;
    [NativeNameAttribute("Name", "GL_MAX_3D_TEXTURE_SIZE_EXT")]
public static GetPName Max3DTextureSizeExt;
    [NativeNameAttribute("Name", "GL_VERTEX_ARRAY")]
public static GetPName VertexArray;
    [NativeNameAttribute("Name", "GL_VERTEX_ARRAY_COUNT_EXT")]
public static GetPName VertexArrayCountExt;
    [NativeNameAttribute("Name", "GL_NORMAL_ARRAY_COUNT_EXT")]
public static GetPName NormalArrayCountExt;
    [NativeNameAttribute("Name", "GL_COLOR_ARRAY_COUNT_EXT")]
public static GetPName ColorArrayCountExt;
    [NativeNameAttribute("Name", "GL_INDEX_ARRAY_COUNT_EXT")]
public static GetPName IndexArrayCountExt;
    [NativeNameAttribute("Name", "GL_TEXTURE_COORD_ARRAY_COUNT_EXT")]
public static GetPName TextureCoordArrayCountExt;
    [NativeNameAttribute("Name", "GL_EDGE_FLAG_ARRAY_COUNT_EXT")]
public static GetPName EdgeFlagArrayCountExt;
    [NativeNameAttribute("Name", "GL_INTERLACE_SGIX")]
public static GetPName InterlaceSgix;
    [NativeNameAttribute("Name", "GL_DETAIL_TEXTURE_2D_BINDING_SGIS")]
public static GetPName DetailTexture2DBindingSgis;
    [NativeNameAttribute("Name", "GL_MULTISAMPLE_SGIS")]
public static GetPName MultisampleSgis;
    [NativeNameAttribute("Name", "GL_SAMPLE_ALPHA_TO_MASK_SGIS")]
public static GetPName SampleAlphaToMaskSgis;
    [NativeNameAttribute("Name", "GL_SAMPLE_ALPHA_TO_ONE_SGIS")]
public static GetPName SampleAlphaToOneSgis;
    [NativeNameAttribute("Name", "GL_SAMPLE_MASK_SGIS")]
public static GetPName SampleMaskSgis;
    [NativeNameAttribute("Name", "GL_SAMPLE_BUFFERS")]
public static GetPName SampleBuffers;
    [NativeNameAttribute("Name", "GL_SAMPLE_BUFFERS_SGIS")]
public static GetPName SampleBuffersSgis;
    [NativeNameAttribute("Name", "GL_SAMPLES")]
public static GetPName Samples;
    [NativeNameAttribute("Name", "GL_SAMPLES_SGIS")]
public static GetPName SamplesSgis;
    [NativeNameAttribute("Name", "GL_SAMPLE_COVERAGE_VALUE")]
public static GetPName SampleCoverageValue;
    [NativeNameAttribute("Name", "GL_SAMPLE_MASK_VALUE_SGIS")]
public static GetPName SampleMaskValueSgis;
    [NativeNameAttribute("Name", "GL_SAMPLE_COVERAGE_INVERT")]
public static GetPName SampleCoverageInvert;
    [NativeNameAttribute("Name", "GL_SAMPLE_MASK_INVERT_SGIS")]
public static GetPName SampleMaskInvertSgis;
    [NativeNameAttribute("Name", "GL_SAMPLE_PATTERN_SGIS")]
public static GetPName SamplePatternSgis;
    [NativeNameAttribute("Name", "GL_COLOR_MATRIX_SGI")]
public static GetPName ColorMatrixSgi;
    [NativeNameAttribute("Name", "GL_COLOR_MATRIX_STACK_DEPTH_SGI")]
public static GetPName ColorMatrixStackDepthSgi;
    [NativeNameAttribute("Name", "GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI")]
public static GetPName MaxColorMatrixStackDepthSgi;
    [NativeNameAttribute("Name", "GL_POST_COLOR_MATRIX_RED_SCALE_SGI")]
public static GetPName PostColorMatrixRedScaleSgi;
    [NativeNameAttribute("Name", "GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI")]
public static GetPName PostColorMatrixGreenScaleSgi;
    [NativeNameAttribute("Name", "GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI")]
public static GetPName PostColorMatrixBlueScaleSgi;
    [NativeNameAttribute("Name", "GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI")]
public static GetPName PostColorMatrixAlphaScaleSgi;
    [NativeNameAttribute("Name", "GL_POST_COLOR_MATRIX_RED_BIAS_SGI")]
public static GetPName PostColorMatrixRedBiasSgi;
    [NativeNameAttribute("Name", "GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI")]
public static GetPName PostColorMatrixGreenBiasSgi;
    [NativeNameAttribute("Name", "GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI")]
public static GetPName PostColorMatrixBlueBiasSgi;
    [NativeNameAttribute("Name", "GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI")]
public static GetPName PostColorMatrixAlphaBiasSgi;
    [NativeNameAttribute("Name", "GL_TEXTURE_COLOR_TABLE_SGI")]
public static GetPName TextureColorTableSgi;
    [NativeNameAttribute("Name", "GL_BLEND_DST_RGB")]
public static GetPName BlendDstRgb;
    [NativeNameAttribute("Name", "GL_BLEND_SRC_RGB")]
public static GetPName BlendSrcRgb;
    [NativeNameAttribute("Name", "GL_BLEND_DST_ALPHA")]
public static GetPName BlendDstAlpha;
    [NativeNameAttribute("Name", "GL_BLEND_SRC_ALPHA")]
public static GetPName BlendSrcAlpha;
    [NativeNameAttribute("Name", "GL_COLOR_TABLE_SGI")]
public static GetPName ColorTableSgi;
    [NativeNameAttribute("Name", "GL_POST_CONVOLUTION_COLOR_TABLE_SGI")]
public static GetPName PostConvolutionColorTableSgi;
    [NativeNameAttribute("Name", "GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI")]
public static GetPName PostColorMatrixColorTableSgi;
    [NativeNameAttribute("Name", "GL_MAX_ELEMENTS_VERTICES")]
public static GetPName MaxElementsVertices;
    [NativeNameAttribute("Name", "GL_MAX_ELEMENTS_INDICES")]
public static GetPName MaxElementsIndices;
    [NativeNameAttribute("Name", "GL_POINT_SIZE_MIN_SGIS")]
public static GetPName PointSizeMinSgis;
    [NativeNameAttribute("Name", "GL_POINT_SIZE_MAX_SGIS")]
public static GetPName PointSizeMaxSgis;
    [NativeNameAttribute("Name", "GL_POINT_FADE_THRESHOLD_SIZE")]
public static GetPName PointFadeThresholdSize;
    [NativeNameAttribute("Name", "GL_POINT_FADE_THRESHOLD_SIZE_SGIS")]
public static GetPName PointFadeThresholdSizeSgis;
    [NativeNameAttribute("Name", "GL_DISTANCE_ATTENUATION_SGIS")]
public static GetPName DistanceAttenuationSgis;
    [NativeNameAttribute("Name", "GL_FOG_FUNC_POINTS_SGIS")]
public static GetPName FogFuncPointsSgis;
    [NativeNameAttribute("Name", "GL_MAX_FOG_FUNC_POINTS_SGIS")]
public static GetPName MaxFogFuncPointsSgis;
    [NativeNameAttribute("Name", "GL_PACK_SKIP_VOLUMES_SGIS")]
public static GetPName PackSkipVolumesSgis;
    [NativeNameAttribute("Name", "GL_PACK_IMAGE_DEPTH_SGIS")]
public static GetPName PackImageDepthSgis;
    [NativeNameAttribute("Name", "GL_UNPACK_SKIP_VOLUMES_SGIS")]
public static GetPName UnpackSkipVolumesSgis;
    [NativeNameAttribute("Name", "GL_UNPACK_IMAGE_DEPTH_SGIS")]
public static GetPName UnpackImageDepthSgis;
    [NativeNameAttribute("Name", "GL_TEXTURE_4D_SGIS")]
public static GetPName Texture4DSgis;
    [NativeNameAttribute("Name", "GL_MAX_4D_TEXTURE_SIZE_SGIS")]
public static GetPName Max4DTextureSizeSgis;
    [NativeNameAttribute("Name", "GL_PIXEL_TEX_GEN_SGIX")]
public static GetPName PixelTexGenSgix;
    [NativeNameAttribute("Name", "GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX")]
public static GetPName PixelTileBestAlignmentSgix;
    [NativeNameAttribute("Name", "GL_PIXEL_TILE_CACHE_INCREMENT_SGIX")]
public static GetPName PixelTileCacheIncrementSgix;
    [NativeNameAttribute("Name", "GL_PIXEL_TILE_WIDTH_SGIX")]
public static GetPName PixelTileWidthSgix;
    [NativeNameAttribute("Name", "GL_PIXEL_TILE_HEIGHT_SGIX")]
public static GetPName PixelTileHeightSgix;
    [NativeNameAttribute("Name", "GL_PIXEL_TILE_GRID_WIDTH_SGIX")]
public static GetPName PixelTileGridWidthSgix;
    [NativeNameAttribute("Name", "GL_PIXEL_TILE_GRID_HEIGHT_SGIX")]
public static GetPName PixelTileGridHeightSgix;
    [NativeNameAttribute("Name", "GL_PIXEL_TILE_GRID_DEPTH_SGIX")]
public static GetPName PixelTileGridDepthSgix;
    [NativeNameAttribute("Name", "GL_PIXEL_TILE_CACHE_SIZE_SGIX")]
public static GetPName PixelTileCacheSizeSgix;
    [NativeNameAttribute("Name", "GL_SPRITE_SGIX")]
public static GetPName SpriteSgix;
    [NativeNameAttribute("Name", "GL_SPRITE_MODE_SGIX")]
public static GetPName SpriteModeSgix;
    [NativeNameAttribute("Name", "GL_SPRITE_AXIS_SGIX")]
public static GetPName SpriteAxisSgix;
    [NativeNameAttribute("Name", "GL_SPRITE_TRANSLATION_SGIX")]
public static GetPName SpriteTranslationSgix;
    [NativeNameAttribute("Name", "GL_TEXTURE_4D_BINDING_SGIS")]
public static GetPName Texture4DBindingSgis;
    [NativeNameAttribute("Name", "GL_MAX_CLIPMAP_DEPTH_SGIX")]
public static GetPName MaxClipmapDepthSgix;
    [NativeNameAttribute("Name", "GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX")]
public static GetPName MaxClipmapVirtualDepthSgix;
    [NativeNameAttribute("Name", "GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX")]
public static GetPName PostTextureFilterBiasRangeSgix;
    [NativeNameAttribute("Name", "GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX")]
public static GetPName PostTextureFilterScaleRangeSgix;
    [NativeNameAttribute("Name", "GL_REFERENCE_PLANE_SGIX")]
public static GetPName ReferencePlaneSgix;
    [NativeNameAttribute("Name", "GL_REFERENCE_PLANE_EQUATION_SGIX")]
public static GetPName ReferencePlaneEquationSgix;
    [NativeNameAttribute("Name", "GL_IR_INSTRUMENT1_SGIX")]
public static GetPName IRInstrument1Sgix;
    [NativeNameAttribute("Name", "GL_INSTRUMENT_MEASUREMENTS_SGIX")]
public static GetPName InstrumentMeasurementsSgix;
    [NativeNameAttribute("Name", "GL_CALLIGRAPHIC_FRAGMENT_SGIX")]
public static GetPName CalligraphicFragmentSgix;
    [NativeNameAttribute("Name", "GL_FRAMEZOOM_SGIX")]
public static GetPName FramezoomSgix;
    [NativeNameAttribute("Name", "GL_FRAMEZOOM_FACTOR_SGIX")]
public static GetPName FramezoomFactorSgix;
    [NativeNameAttribute("Name", "GL_MAX_FRAMEZOOM_FACTOR_SGIX")]
public static GetPName MaxFramezoomFactorSgix;
    [NativeNameAttribute("Name", "GL_GENERATE_MIPMAP_HINT_SGIS")]
public static GetPName GenerateMipmapHintSgis;
    [NativeNameAttribute("Name", "GL_DEFORMATIONS_MASK_SGIX")]
public static GetPName DeformationsMaskSgix;
    [NativeNameAttribute("Name", "GL_FOG_OFFSET_SGIX")]
public static GetPName FogOffsetSgix;
    [NativeNameAttribute("Name", "GL_FOG_OFFSET_VALUE_SGIX")]
public static GetPName FogOffsetValueSgix;
    [NativeNameAttribute("Name", "GL_SHARED_TEXTURE_PALETTE_EXT")]
public static GetPName SharedTexturePaletteExt;
    [NativeNameAttribute("Name", "GL_MAJOR_VERSION")]
public static GetPName MajorVersion;
    [NativeNameAttribute("Name", "GL_MINOR_VERSION")]
public static GetPName MinorVersion;
    [NativeNameAttribute("Name", "GL_NUM_EXTENSIONS")]
public static GetPName NumExtensions;
    [NativeNameAttribute("Name", "GL_CONTEXT_FLAGS")]
public static GetPName ContextFlags;
    [NativeNameAttribute("Name", "GL_PROGRAM_PIPELINE_BINDING")]
public static GetPName ProgramPipelineBinding;
    [NativeNameAttribute("Name", "GL_MAX_VIEWPORTS")]
public static GetPName MaxViewports;
    [NativeNameAttribute("Name", "GL_VIEWPORT_SUBPIXEL_BITS")]
public static GetPName ViewportSubpixelBits;
    [NativeNameAttribute("Name", "GL_VIEWPORT_BOUNDS_RANGE")]
public static GetPName ViewportBoundsRange;
    [NativeNameAttribute("Name", "GL_LAYER_PROVOKING_VERTEX")]
public static GetPName LayerProvokingVertex;
    [NativeNameAttribute("Name", "GL_VIEWPORT_INDEX_PROVOKING_VERTEX")]
public static GetPName ViewportIndexProvokingVertex;
    [NativeNameAttribute("Name", "GL_MAX_COMPUTE_UNIFORM_COMPONENTS")]
public static GetPName MaxComputeUniformComponents;
    [NativeNameAttribute("Name", "GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS")]
public static GetPName MaxComputeAtomicCounterBuffers;
    [NativeNameAttribute("Name", "GL_MAX_COMPUTE_ATOMIC_COUNTERS")]
public static GetPName MaxComputeAtomicCounters;
    [NativeNameAttribute("Name", "GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS")]
public static GetPName MaxCombinedComputeUniformComponents;
    [NativeNameAttribute("Name", "GL_MAX_DEBUG_GROUP_STACK_DEPTH")]
public static GetPName MaxDebugGroupStackDepth;
    [NativeNameAttribute("Name", "GL_DEBUG_GROUP_STACK_DEPTH")]
public static GetPName DebugGroupStackDepth;
    [NativeNameAttribute("Name", "GL_MAX_UNIFORM_LOCATIONS")]
public static GetPName MaxUniformLocations;
    [NativeNameAttribute("Name", "GL_VERTEX_BINDING_DIVISOR")]
public static GetPName VertexBindingDivisor;
    [NativeNameAttribute("Name", "GL_VERTEX_BINDING_OFFSET")]
public static GetPName VertexBindingOffset;
    [NativeNameAttribute("Name", "GL_VERTEX_BINDING_STRIDE")]
public static GetPName VertexBindingStride;
    [NativeNameAttribute("Name", "GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET")]
public static GetPName MaxVertexAttribRelativeOffset;
    [NativeNameAttribute("Name", "GL_MAX_VERTEX_ATTRIB_BINDINGS")]
public static GetPName MaxVertexAttribBindings;
    [NativeNameAttribute("Name", "GL_MAX_LABEL_LENGTH")]
public static GetPName MaxLabelLength;
    [NativeNameAttribute("Name", "GL_CONVOLUTION_HINT_SGIX")]
public static GetPName ConvolutionHintSgix;
    [NativeNameAttribute("Name", "GL_ASYNC_MARKER_SGIX")]
public static GetPName AsyncMarkerSgix;
    [NativeNameAttribute("Name", "GL_PIXEL_TEX_GEN_MODE_SGIX")]
public static GetPName PixelTexGenModeSgix;
    [NativeNameAttribute("Name", "GL_ASYNC_HISTOGRAM_SGIX")]
public static GetPName AsyncHistogramSgix;
    [NativeNameAttribute("Name", "GL_MAX_ASYNC_HISTOGRAM_SGIX")]
public static GetPName MaxAsyncHistogramSgix;
    [NativeNameAttribute("Name", "GL_PIXEL_TEXTURE_SGIS")]
public static GetPName PixelTextureSgis;
    [NativeNameAttribute("Name", "GL_ASYNC_TEX_IMAGE_SGIX")]
public static GetPName AsyncTexImageSgix;
    [NativeNameAttribute("Name", "GL_ASYNC_DRAW_PIXELS_SGIX")]
public static GetPName AsyncDrawPixelsSgix;
    [NativeNameAttribute("Name", "GL_ASYNC_READ_PIXELS_SGIX")]
public static GetPName AsyncReadPixelsSgix;
    [NativeNameAttribute("Name", "GL_MAX_ASYNC_TEX_IMAGE_SGIX")]
public static GetPName MaxAsyncTexImageSgix;
    [NativeNameAttribute("Name", "GL_MAX_ASYNC_DRAW_PIXELS_SGIX")]
public static GetPName MaxAsyncDrawPixelsSgix;
    [NativeNameAttribute("Name", "GL_MAX_ASYNC_READ_PIXELS_SGIX")]
public static GetPName MaxAsyncReadPixelsSgix;
    [NativeNameAttribute("Name", "GL_VERTEX_PRECLIP_SGIX")]
public static GetPName VertexPreclipSgix;
    [NativeNameAttribute("Name", "GL_VERTEX_PRECLIP_HINT_SGIX")]
public static GetPName VertexPreclipHintSgix;
    [NativeNameAttribute("Name", "GL_FRAGMENT_LIGHTING_SGIX")]
public static GetPName FragmentLightingSgix;
    [NativeNameAttribute("Name", "GL_FRAGMENT_COLOR_MATERIAL_SGIX")]
public static GetPName FragmentColorMaterialSgix;
    [NativeNameAttribute("Name", "GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX")]
public static GetPName FragmentColorMaterialFaceSgix;
    [NativeNameAttribute("Name", "GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX")]
public static GetPName FragmentColorMaterialParameterSgix;
    [NativeNameAttribute("Name", "GL_MAX_FRAGMENT_LIGHTS_SGIX")]
public static GetPName MaxFragmentLightsSgix;
    [NativeNameAttribute("Name", "GL_MAX_ACTIVE_LIGHTS_SGIX")]
public static GetPName MaxActiveLightsSgix;
    [NativeNameAttribute("Name", "GL_LIGHT_ENV_MODE_SGIX")]
public static GetPName LightEnvModeSgix;
    [NativeNameAttribute("Name", "GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX")]
public static GetPName FragmentLightModelLocalViewerSgix;
    [NativeNameAttribute("Name", "GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX")]
public static GetPName FragmentLightModelTwoSideSgix;
    [NativeNameAttribute("Name", "GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX")]
public static GetPName FragmentLightModelAmbientSgix;
    [NativeNameAttribute("Name", "GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX")]
public static GetPName FragmentLightModelNormalInterpolationSgix;
    [NativeNameAttribute("Name", "GL_FRAGMENT_LIGHT0_SGIX")]
public static GetPName FragmentLight0Sgix;
    [NativeNameAttribute("Name", "GL_PACK_RESAMPLE_SGIX")]
public static GetPName PackResampleSgix;
    [NativeNameAttribute("Name", "GL_UNPACK_RESAMPLE_SGIX")]
public static GetPName UnpackResampleSgix;
    [NativeNameAttribute("Name", "GL_ALIASED_LINE_WIDTH_RANGE")]
public static GetPName AliasedLineWidthRange;
    [NativeNameAttribute("Name", "GL_ACTIVE_TEXTURE")]
public static GetPName ActiveTexture;
    [NativeNameAttribute("Name", "GL_MAX_RENDERBUFFER_SIZE")]
public static GetPName MaxRenderbufferSize;
    [NativeNameAttribute("Name", "GL_TEXTURE_COMPRESSION_HINT")]
public static GetPName TextureCompressionHint;
    [NativeNameAttribute("Name", "GL_TEXTURE_BINDING_RECTANGLE")]
public static GetPName TextureBindingRectangle;
    [NativeNameAttribute("Name", "GL_TEXTURE_BINDING_RECTANGLE_ARB")]
public static GetPName TextureBindingRectangleArb;
    [NativeNameAttribute("Name", "GL_TEXTURE_BINDING_RECTANGLE_NV")]
public static GetPName TextureBindingRectangleNV;
    [NativeNameAttribute("Name", "GL_MAX_RECTANGLE_TEXTURE_SIZE")]
public static GetPName MaxRectangleTextureSize;
    [NativeNameAttribute("Name", "GL_MAX_TEXTURE_LOD_BIAS")]
public static GetPName MaxTextureLodBias;
    [NativeNameAttribute("Name", "GL_TEXTURE_BINDING_CUBE_MAP")]
public static GetPName TextureBindingCubeMap;
    [NativeNameAttribute("Name", "GL_TEXTURE_BINDING_CUBE_MAP_ARB")]
public static GetPName TextureBindingCubeMapArb;
    [NativeNameAttribute("Name", "GL_TEXTURE_BINDING_CUBE_MAP_EXT")]
public static GetPName TextureBindingCubeMapExt;
    [NativeNameAttribute("Name", "GL_TEXTURE_BINDING_CUBE_MAP_OES")]
public static GetPName TextureBindingCubeMapOes;
    [NativeNameAttribute("Name", "GL_MAX_CUBE_MAP_TEXTURE_SIZE")]
public static GetPName MaxCubeMapTextureSize;
    [NativeNameAttribute("Name", "GL_PACK_SUBSAMPLE_RATE_SGIX")]
public static GetPName PackSubsampleRateSgix;
    [NativeNameAttribute("Name", "GL_UNPACK_SUBSAMPLE_RATE_SGIX")]
public static GetPName UnpackSubsampleRateSgix;
    [NativeNameAttribute("Name", "GL_VERTEX_ARRAY_BINDING")]
public static GetPName VertexArrayBinding;
    [NativeNameAttribute("Name", "GL_PROGRAM_POINT_SIZE")]
public static GetPName ProgramPointSize;
    [NativeNameAttribute("Name", "GL_NUM_COMPRESSED_TEXTURE_FORMATS")]
public static GetPName NumCompressedTextureFormats;
    [NativeNameAttribute("Name", "GL_COMPRESSED_TEXTURE_FORMATS")]
public static GetPName CompressedTextureFormats;
    [NativeNameAttribute("Name", "GL_NUM_PROGRAM_BINARY_FORMATS")]
public static GetPName NumProgramBinaryFormats;
    [NativeNameAttribute("Name", "GL_PROGRAM_BINARY_FORMATS")]
public static GetPName ProgramBinaryFormats;
    [NativeNameAttribute("Name", "GL_STENCIL_BACK_FUNC")]
public static GetPName StencilBackFunc;
    [NativeNameAttribute("Name", "GL_STENCIL_BACK_FAIL")]
public static GetPName StencilBackFail;
    [NativeNameAttribute("Name", "GL_STENCIL_BACK_PASS_DEPTH_FAIL")]
public static GetPName StencilBackPassDepthFail;
    [NativeNameAttribute("Name", "GL_STENCIL_BACK_PASS_DEPTH_PASS")]
public static GetPName StencilBackPassDepthPass;
    [NativeNameAttribute("Name", "GL_MAX_DRAW_BUFFERS")]
public static GetPName MaxDrawBuffers;
    [NativeNameAttribute("Name", "GL_BLEND_EQUATION_ALPHA")]
public static GetPName BlendEquationAlpha;
    [NativeNameAttribute("Name", "GL_MAX_VERTEX_ATTRIBS")]
public static GetPName MaxVertexAttribs;
    [NativeNameAttribute("Name", "GL_MAX_TEXTURE_IMAGE_UNITS")]
public static GetPName MaxTextureImageUnits;
    [NativeNameAttribute("Name", "GL_ARRAY_BUFFER_BINDING")]
public static GetPName ArrayBufferBinding;
    [NativeNameAttribute("Name", "GL_ELEMENT_ARRAY_BUFFER_BINDING")]
public static GetPName ElementArrayBufferBinding;
    [NativeNameAttribute("Name", "GL_PIXEL_PACK_BUFFER_BINDING")]
public static GetPName PixelPackBufferBinding;
    [NativeNameAttribute("Name", "GL_PIXEL_UNPACK_BUFFER_BINDING")]
public static GetPName PixelUnpackBufferBinding;
    [NativeNameAttribute("Name", "GL_MAX_DUAL_SOURCE_DRAW_BUFFERS")]
public static GetPName MaxDualSourceDrawBuffers;
    [NativeNameAttribute("Name", "GL_MAX_ARRAY_TEXTURE_LAYERS")]
public static GetPName MaxArrayTextureLayers;
    [NativeNameAttribute("Name", "GL_MIN_PROGRAM_TEXEL_OFFSET")]
public static GetPName MinProgramTexelOffset;
    [NativeNameAttribute("Name", "GL_MAX_PROGRAM_TEXEL_OFFSET")]
public static GetPName MaxProgramTexelOffset;
    [NativeNameAttribute("Name", "GL_SAMPLER_BINDING")]
public static GetPName SamplerBinding;
    [NativeNameAttribute("Name", "GL_UNIFORM_BUFFER_BINDING")]
public static GetPName UniformBufferBinding;
    [NativeNameAttribute("Name", "GL_UNIFORM_BUFFER_START")]
public static GetPName UniformBufferStart;
    [NativeNameAttribute("Name", "GL_UNIFORM_BUFFER_SIZE")]
public static GetPName UniformBufferSize;
    [NativeNameAttribute("Name", "GL_MAX_VERTEX_UNIFORM_BLOCKS")]
public static GetPName MaxVertexUniformBlocks;
    [NativeNameAttribute("Name", "GL_MAX_GEOMETRY_UNIFORM_BLOCKS")]
public static GetPName MaxGeometryUniformBlocks;
    [NativeNameAttribute("Name", "GL_MAX_FRAGMENT_UNIFORM_BLOCKS")]
public static GetPName MaxFragmentUniformBlocks;
    [NativeNameAttribute("Name", "GL_MAX_COMBINED_UNIFORM_BLOCKS")]
public static GetPName MaxCombinedUniformBlocks;
    [NativeNameAttribute("Name", "GL_MAX_UNIFORM_BUFFER_BINDINGS")]
public static GetPName MaxUniformBufferBindings;
    [NativeNameAttribute("Name", "GL_MAX_UNIFORM_BLOCK_SIZE")]
public static GetPName MaxUniformBlockSize;
    [NativeNameAttribute("Name", "GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS")]
public static GetPName MaxCombinedVertexUniformComponents;
    [NativeNameAttribute("Name", "GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS")]
public static GetPName MaxCombinedGeometryUniformComponents;
    [NativeNameAttribute("Name", "GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS")]
public static GetPName MaxCombinedFragmentUniformComponents;
    [NativeNameAttribute("Name", "GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT")]
public static GetPName UniformBufferOffsetAlignment;
    [NativeNameAttribute("Name", "GL_MAX_FRAGMENT_UNIFORM_COMPONENTS")]
public static GetPName MaxFragmentUniformComponents;
    [NativeNameAttribute("Name", "GL_MAX_VERTEX_UNIFORM_COMPONENTS")]
public static GetPName MaxVertexUniformComponents;
    [NativeNameAttribute("Name", "GL_MAX_VARYING_FLOATS")]
public static GetPName MaxVaryingFloats;
    [NativeNameAttribute("Name", "GL_MAX_VARYING_COMPONENTS")]
public static GetPName MaxVaryingComponents;
    [NativeNameAttribute("Name", "GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS")]
public static GetPName MaxVertexTextureImageUnits;
    [NativeNameAttribute("Name", "GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS")]
public static GetPName MaxCombinedTextureImageUnits;
    [NativeNameAttribute("Name", "GL_FRAGMENT_SHADER_DERIVATIVE_HINT")]
public static GetPName FragmentShaderDerivativeHint;
    [NativeNameAttribute("Name", "GL_CURRENT_PROGRAM")]
public static GetPName CurrentProgram;
    [NativeNameAttribute("Name", "GL_IMPLEMENTATION_COLOR_READ_TYPE")]
public static GetPName ImplementationColorReadType;
    [NativeNameAttribute("Name", "GL_IMPLEMENTATION_COLOR_READ_FORMAT")]
public static GetPName ImplementationColorReadFormat;
    [NativeNameAttribute("Name", "GL_TEXTURE_BINDING_1D_ARRAY")]
public static GetPName TextureBinding1DArray;
    [NativeNameAttribute("Name", "GL_TEXTURE_BINDING_2D_ARRAY")]
public static GetPName TextureBinding2DArray;
    [NativeNameAttribute("Name", "GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS")]
public static GetPName MaxGeometryTextureImageUnits;
    [NativeNameAttribute("Name", "GL_MAX_TEXTURE_BUFFER_SIZE")]
public static GetPName MaxTextureBufferSize;
    [NativeNameAttribute("Name", "GL_TEXTURE_BINDING_BUFFER")]
public static GetPName TextureBindingBuffer;
    [NativeNameAttribute("Name", "GL_TRANSFORM_FEEDBACK_BUFFER_START")]
public static GetPName TransformFeedbackBufferStart;
    [NativeNameAttribute("Name", "GL_TRANSFORM_FEEDBACK_BUFFER_SIZE")]
public static GetPName TransformFeedbackBufferSize;
    [NativeNameAttribute("Name", "GL_TRANSFORM_FEEDBACK_BUFFER_BINDING")]
public static GetPName TransformFeedbackBufferBinding;
    [NativeNameAttribute("Name", "GL_MOTION_ESTIMATION_SEARCH_BLOCK_X_QCOM")]
public static GetPName MotionEstimationSearchBlockXQCom;
    [NativeNameAttribute("Name", "GL_MOTION_ESTIMATION_SEARCH_BLOCK_Y_QCOM")]
public static GetPName MotionEstimationSearchBlockYQCom;
    [NativeNameAttribute("Name", "GL_STENCIL_BACK_REF")]
public static GetPName StencilBackRef;
    [NativeNameAttribute("Name", "GL_STENCIL_BACK_VALUE_MASK")]
public static GetPName StencilBackValueMask;
    [NativeNameAttribute("Name", "GL_STENCIL_BACK_WRITEMASK")]
public static GetPName StencilBackWritemask;
    [NativeNameAttribute("Name", "GL_DRAW_FRAMEBUFFER_BINDING")]
public static GetPName DrawFramebufferBinding;
    [NativeNameAttribute("Name", "GL_RENDERBUFFER_BINDING")]
public static GetPName RenderbufferBinding;
    [NativeNameAttribute("Name", "GL_READ_FRAMEBUFFER_BINDING")]
public static GetPName ReadFramebufferBinding;
    [NativeNameAttribute("Name", "GL_MAX_COLOR_ATTACHMENTS")]
public static GetPName MaxColorAttachments;
    [NativeNameAttribute("Name", "GL_MAX_COLOR_ATTACHMENTS_EXT")]
public static GetPName MaxColorAttachmentsExt;
    [NativeNameAttribute("Name", "GL_MAX_COLOR_ATTACHMENTS_NV")]
public static GetPName MaxColorAttachmentsNV;
    [NativeNameAttribute("Name", "GL_MAX_ELEMENT_INDEX")]
public static GetPName MaxElementIndex;
    [NativeNameAttribute("Name", "GL_MAX_GEOMETRY_UNIFORM_COMPONENTS")]
public static GetPName MaxGeometryUniformComponents;
    [NativeNameAttribute("Name", "GL_SHADER_BINARY_FORMATS")]
public static GetPName ShaderBinaryFormats;
    [NativeNameAttribute("Name", "GL_NUM_SHADER_BINARY_FORMATS")]
public static GetPName NumShaderBinaryFormats;
    [NativeNameAttribute("Name", "GL_SHADER_COMPILER")]
public static GetPName ShaderCompiler;
    [NativeNameAttribute("Name", "GL_MAX_VERTEX_UNIFORM_VECTORS")]
public static GetPName MaxVertexUniformVectors;
    [NativeNameAttribute("Name", "GL_MAX_VARYING_VECTORS")]
public static GetPName MaxVaryingVectors;
    [NativeNameAttribute("Name", "GL_MAX_FRAGMENT_UNIFORM_VECTORS")]
public static GetPName MaxFragmentUniformVectors;
    [NativeNameAttribute("Name", "GL_TIMESTAMP")]
public static GetPName Timestamp;
    [NativeNameAttribute("Name", "GL_PROVOKING_VERTEX")]
public static GetPName ProvokingVertex;
    [NativeNameAttribute("Name", "GL_MAX_SAMPLE_MASK_WORDS")]
public static GetPName MaxSampleMaskWords;
    [NativeNameAttribute("Name", "GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS")]
public static GetPName MaxTessControlUniformBlocks;
    [NativeNameAttribute("Name", "GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS")]
public static GetPName MaxTessEvaluationUniformBlocks;
    [NativeNameAttribute("Name", "GL_FETCH_PER_SAMPLE_ARM")]
public static GetPName FetchPerSampleArm;
    [NativeNameAttribute("Name", "GL_FRAGMENT_SHADER_FRAMEBUFFER_FETCH_MRT_ARM")]
public static GetPName FragmentShaderFramebufferFetchMrtArm;
    [NativeNameAttribute("Name", "GL_PRIMITIVE_RESTART_INDEX")]
public static GetPName PrimitiveRestartIndex;
    [NativeNameAttribute("Name", "GL_MIN_MAP_BUFFER_ALIGNMENT")]
public static GetPName MinMapBufferAlignment;
    [NativeNameAttribute("Name", "GL_SHADER_STORAGE_BUFFER_BINDING")]
public static GetPName ShaderStorageBufferBinding;
    [NativeNameAttribute("Name", "GL_SHADER_STORAGE_BUFFER_START")]
public static GetPName ShaderStorageBufferStart;
    [NativeNameAttribute("Name", "GL_SHADER_STORAGE_BUFFER_SIZE")]
public static GetPName ShaderStorageBufferSize;
    [NativeNameAttribute("Name", "GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS")]
public static GetPName MaxVertexShaderStorageBlocks;
    [NativeNameAttribute("Name", "GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS")]
public static GetPName MaxGeometryShaderStorageBlocks;
    [NativeNameAttribute("Name", "GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS")]
public static GetPName MaxTessControlShaderStorageBlocks;
    [NativeNameAttribute("Name", "GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS")]
public static GetPName MaxTessEvaluationShaderStorageBlocks;
    [NativeNameAttribute("Name", "GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS")]
public static GetPName MaxFragmentShaderStorageBlocks;
    [NativeNameAttribute("Name", "GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS")]
public static GetPName MaxComputeShaderStorageBlocks;
    [NativeNameAttribute("Name", "GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS")]
public static GetPName MaxCombinedShaderStorageBlocks;
    [NativeNameAttribute("Name", "GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS")]
public static GetPName MaxShaderStorageBufferBindings;
    [NativeNameAttribute("Name", "GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT")]
public static GetPName ShaderStorageBufferOffsetAlignment;
    [NativeNameAttribute("Name", "GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS")]
public static GetPName MaxComputeWorkGroupInvocations;
    [NativeNameAttribute("Name", "GL_DISPATCH_INDIRECT_BUFFER_BINDING")]
public static GetPName DispatchIndirectBufferBinding;
    [NativeNameAttribute("Name", "GL_TEXTURE_BINDING_2D_MULTISAMPLE")]
public static GetPName TextureBinding2DMultisample;
    [NativeNameAttribute("Name", "GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY")]
public static GetPName TextureBinding2DMultisampleArray;
    [NativeNameAttribute("Name", "GL_MAX_COLOR_TEXTURE_SAMPLES")]
public static GetPName MaxColorTextureSamples;
    [NativeNameAttribute("Name", "GL_MAX_DEPTH_TEXTURE_SAMPLES")]
public static GetPName MaxDepthTextureSamples;
    [NativeNameAttribute("Name", "GL_MAX_INTEGER_SAMPLES")]
public static GetPName MaxIntegerSamples;
    [NativeNameAttribute("Name", "GL_MAX_SERVER_WAIT_TIMEOUT")]
public static GetPName MaxServerWaitTimeout;
    [NativeNameAttribute("Name", "GL_MAX_VERTEX_OUTPUT_COMPONENTS")]
public static GetPName MaxVertexOutputComponents;
    [NativeNameAttribute("Name", "GL_MAX_GEOMETRY_INPUT_COMPONENTS")]
public static GetPName MaxGeometryInputComponents;
    [NativeNameAttribute("Name", "GL_MAX_GEOMETRY_OUTPUT_COMPONENTS")]
public static GetPName MaxGeometryOutputComponents;
    [NativeNameAttribute("Name", "GL_MAX_FRAGMENT_INPUT_COMPONENTS")]
public static GetPName MaxFragmentInputComponents;
    [NativeNameAttribute("Name", "GL_CONTEXT_PROFILE_MASK")]
public static GetPName ContextProfileMask;
    [NativeNameAttribute("Name", "GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT")]
public static GetPName TextureBufferOffsetAlignment;
    [NativeNameAttribute("Name", "GL_MAX_COMPUTE_UNIFORM_BLOCKS")]
public static GetPName MaxComputeUniformBlocks;
    [NativeNameAttribute("Name", "GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS")]
public static GetPName MaxComputeTextureImageUnits;
    [NativeNameAttribute("Name", "GL_MAX_COMPUTE_WORK_GROUP_COUNT")]
public static GetPName MaxComputeWorkGroupCount;
    [NativeNameAttribute("Name", "GL_MAX_COMPUTE_WORK_GROUP_SIZE")]
public static GetPName MaxComputeWorkGroupSize;
    [NativeNameAttribute("Name", "GL_MAX_VERTEX_ATOMIC_COUNTERS")]
public static GetPName MaxVertexAtomicCounters;
    [NativeNameAttribute("Name", "GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS")]
public static GetPName MaxTessControlAtomicCounters;
    [NativeNameAttribute("Name", "GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS")]
public static GetPName MaxTessEvaluationAtomicCounters;
    [NativeNameAttribute("Name", "GL_MAX_GEOMETRY_ATOMIC_COUNTERS")]
public static GetPName MaxGeometryAtomicCounters;
    [NativeNameAttribute("Name", "GL_MAX_FRAGMENT_ATOMIC_COUNTERS")]
public static GetPName MaxFragmentAtomicCounters;
    [NativeNameAttribute("Name", "GL_MAX_COMBINED_ATOMIC_COUNTERS")]
public static GetPName MaxCombinedAtomicCounters;
    [NativeNameAttribute("Name", "GL_MAX_FRAMEBUFFER_WIDTH")]
public static GetPName MaxFramebufferWidth;
    [NativeNameAttribute("Name", "GL_MAX_FRAMEBUFFER_HEIGHT")]
public static GetPName MaxFramebufferHeight;
    [NativeNameAttribute("Name", "GL_MAX_FRAMEBUFFER_LAYERS")]
public static GetPName MaxFramebufferLayers;
    [NativeNameAttribute("Name", "GL_MAX_FRAMEBUFFER_SAMPLES")]
public static GetPName MaxFramebufferSamples;
    [NativeNameAttribute("Name", "GL_NUM_DEVICE_UUIDS_EXT")]
public static GetPName NumDeviceUuidsExt;
    [NativeNameAttribute("Name", "GL_DEVICE_UUID_EXT")]
public static GetPName DeviceUuidExt;
    [NativeNameAttribute("Name", "GL_DRIVER_UUID_EXT")]
public static GetPName DriverUuidExt;
    [NativeNameAttribute("Name", "GL_DEVICE_LUID_EXT")]
public static GetPName DeviceLuidExt;
    [NativeNameAttribute("Name", "GL_DEVICE_NODE_MASK_EXT")]
public static GetPName DeviceNodeMaskExt;
    [NativeNameAttribute("Name", "GL_SHADING_RATE_IMAGE_PER_PRIMITIVE_NV")]
public static GetPName ShadingRateImagePerPrimitiveNV;
    [NativeNameAttribute("Name", "GL_SHADING_RATE_IMAGE_PALETTE_COUNT_NV")]
public static GetPName ShadingRateImagePaletteCountNV;
    [NativeNameAttribute("Name", "GL_MAX_TIMELINE_SEMAPHORE_VALUE_DIFFERENCE_NV")]
public static GetPName MaxTimelineSemaphoreValueDifferenceNV;
    [NativeNameAttribute("Name", "GL_SHADING_RATE_QCOM")]
public static GetPName ShadingRateQCom;
}
[NativeNameAttribute("Name", "GetPointervPName")]
public enum Silk.NET.OpenGL.GetPointervPName : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_VERTEX_ARRAY_POINTER_EXT")]
public static GetPointervPName VertexArrayPointerExt;
    [NativeNameAttribute("Name", "GL_NORMAL_ARRAY_POINTER_EXT")]
public static GetPointervPName NormalArrayPointerExt;
    [NativeNameAttribute("Name", "GL_COLOR_ARRAY_POINTER_EXT")]
public static GetPointervPName ColorArrayPointerExt;
    [NativeNameAttribute("Name", "GL_INDEX_ARRAY_POINTER_EXT")]
public static GetPointervPName IndexArrayPointerExt;
    [NativeNameAttribute("Name", "GL_TEXTURE_COORD_ARRAY_POINTER_EXT")]
public static GetPointervPName TextureCoordArrayPointerExt;
    [NativeNameAttribute("Name", "GL_EDGE_FLAG_ARRAY_POINTER_EXT")]
public static GetPointervPName EdgeFlagArrayPointerExt;
    [NativeNameAttribute("Name", "GL_INSTRUMENT_BUFFER_POINTER_SGIX")]
public static GetPointervPName InstrumentBufferPointerSgix;
    [NativeNameAttribute("Name", "GL_DEBUG_CALLBACK_FUNCTION")]
public static GetPointervPName DebugCallbackFunction;
    [NativeNameAttribute("Name", "GL_DEBUG_CALLBACK_USER_PARAM")]
public static GetPointervPName DebugCallbackUserParam;
}
[NativeNameAttribute("Name", "GetTexBumpParameterATI")]
public enum Silk.NET.OpenGL.GetTexBumpParameterATI : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_BUMP_ROT_MATRIX_ATI")]
public static GetTexBumpParameterATI BumpRotMatrixAti;
    [NativeNameAttribute("Name", "GL_BUMP_ROT_MATRIX_SIZE_ATI")]
public static GetTexBumpParameterATI BumpRotMatrixSizeAti;
    [NativeNameAttribute("Name", "GL_BUMP_NUM_TEX_UNITS_ATI")]
public static GetTexBumpParameterATI BumpNumTexUnitsAti;
    [NativeNameAttribute("Name", "GL_BUMP_TEX_UNITS_ATI")]
public static GetTexBumpParameterATI BumpTexUnitsAti;
}
[NativeNameAttribute("Name", "GetTextureParameter")]
public enum Silk.NET.OpenGL.GetTextureParameter : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_TEXTURE_WIDTH")]
public static GetTextureParameter TextureWidth;
    [NativeNameAttribute("Name", "GL_TEXTURE_HEIGHT")]
public static GetTextureParameter TextureHeight;
    [NativeNameAttribute("Name", "GL_TEXTURE_INTERNAL_FORMAT")]
public static GetTextureParameter TextureInternalFormat;
    [NativeNameAttribute("Name", "GL_TEXTURE_BORDER_COLOR")]
public static GetTextureParameter TextureBorderColor;
    [NativeNameAttribute("Name", "GL_TEXTURE_BORDER_COLOR_NV")]
public static GetTextureParameter TextureBorderColorNV;
    [NativeNameAttribute("Name", "GL_TEXTURE_MAG_FILTER")]
public static GetTextureParameter TextureMagFilter;
    [NativeNameAttribute("Name", "GL_TEXTURE_MIN_FILTER")]
public static GetTextureParameter TextureMinFilter;
    [NativeNameAttribute("Name", "GL_TEXTURE_WRAP_S")]
public static GetTextureParameter TextureWrapS;
    [NativeNameAttribute("Name", "GL_TEXTURE_WRAP_T")]
public static GetTextureParameter TextureWrapT;
    [NativeNameAttribute("Name", "GL_TEXTURE_RED_SIZE")]
public static GetTextureParameter TextureRedSize;
    [NativeNameAttribute("Name", "GL_TEXTURE_GREEN_SIZE")]
public static GetTextureParameter TextureGreenSize;
    [NativeNameAttribute("Name", "GL_TEXTURE_BLUE_SIZE")]
public static GetTextureParameter TextureBlueSize;
    [NativeNameAttribute("Name", "GL_TEXTURE_ALPHA_SIZE")]
public static GetTextureParameter TextureAlphaSize;
    [NativeNameAttribute("Name", "GL_TEXTURE_DEPTH_EXT")]
public static GetTextureParameter TextureDepthExt;
    [NativeNameAttribute("Name", "GL_TEXTURE_WRAP_R_EXT")]
public static GetTextureParameter TextureWrapRExt;
    [NativeNameAttribute("Name", "GL_DETAIL_TEXTURE_LEVEL_SGIS")]
public static GetTextureParameter DetailTextureLevelSgis;
    [NativeNameAttribute("Name", "GL_DETAIL_TEXTURE_MODE_SGIS")]
public static GetTextureParameter DetailTextureModeSgis;
    [NativeNameAttribute("Name", "GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS")]
public static GetTextureParameter DetailTextureFuncPointsSgis;
    [NativeNameAttribute("Name", "GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS")]
public static GetTextureParameter SharpenTextureFuncPointsSgis;
    [NativeNameAttribute("Name", "GL_SHADOW_AMBIENT_SGIX")]
public static GetTextureParameter ShadowAmbientSgix;
    [NativeNameAttribute("Name", "GL_DUAL_TEXTURE_SELECT_SGIS")]
public static GetTextureParameter DualTextureSelectSgis;
    [NativeNameAttribute("Name", "GL_QUAD_TEXTURE_SELECT_SGIS")]
public static GetTextureParameter QuadTextureSelectSgis;
    [NativeNameAttribute("Name", "GL_TEXTURE_4DSIZE_SGIS")]
public static GetTextureParameter Texture4DsizeSgis;
    [NativeNameAttribute("Name", "GL_TEXTURE_WRAP_Q_SGIS")]
public static GetTextureParameter TextureWrapQSgis;
    [NativeNameAttribute("Name", "GL_TEXTURE_MIN_LOD_SGIS")]
public static GetTextureParameter TextureMinLodSgis;
    [NativeNameAttribute("Name", "GL_TEXTURE_MAX_LOD_SGIS")]
public static GetTextureParameter TextureMaxLodSgis;
    [NativeNameAttribute("Name", "GL_TEXTURE_BASE_LEVEL_SGIS")]
public static GetTextureParameter TextureBaseLevelSgis;
    [NativeNameAttribute("Name", "GL_TEXTURE_MAX_LEVEL_SGIS")]
public static GetTextureParameter TextureMaxLevelSgis;
    [NativeNameAttribute("Name", "GL_TEXTURE_FILTER4_SIZE_SGIS")]
public static GetTextureParameter TextureFilter4SizeSgis;
    [NativeNameAttribute("Name", "GL_TEXTURE_CLIPMAP_CENTER_SGIX")]
public static GetTextureParameter TextureClipmapCenterSgix;
    [NativeNameAttribute("Name", "GL_TEXTURE_CLIPMAP_FRAME_SGIX")]
public static GetTextureParameter TextureClipmapFrameSgix;
    [NativeNameAttribute("Name", "GL_TEXTURE_CLIPMAP_OFFSET_SGIX")]
public static GetTextureParameter TextureClipmapOffsetSgix;
    [NativeNameAttribute("Name", "GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX")]
public static GetTextureParameter TextureClipmapVirtualDepthSgix;
    [NativeNameAttribute("Name", "GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX")]
public static GetTextureParameter TextureClipmapLodOffsetSgix;
    [NativeNameAttribute("Name", "GL_TEXTURE_CLIPMAP_DEPTH_SGIX")]
public static GetTextureParameter TextureClipmapDepthSgix;
    [NativeNameAttribute("Name", "GL_POST_TEXTURE_FILTER_BIAS_SGIX")]
public static GetTextureParameter PostTextureFilterBiasSgix;
    [NativeNameAttribute("Name", "GL_POST_TEXTURE_FILTER_SCALE_SGIX")]
public static GetTextureParameter PostTextureFilterScaleSgix;
    [NativeNameAttribute("Name", "GL_TEXTURE_LOD_BIAS_S_SGIX")]
public static GetTextureParameter TextureLodBiasSSgix;
    [NativeNameAttribute("Name", "GL_TEXTURE_LOD_BIAS_T_SGIX")]
public static GetTextureParameter TextureLodBiasTSgix;
    [NativeNameAttribute("Name", "GL_TEXTURE_LOD_BIAS_R_SGIX")]
public static GetTextureParameter TextureLodBiasRSgix;
    [NativeNameAttribute("Name", "GL_GENERATE_MIPMAP_SGIS")]
public static GetTextureParameter GenerateMipmapSgis;
    [NativeNameAttribute("Name", "GL_TEXTURE_COMPARE_SGIX")]
public static GetTextureParameter TextureCompareSgix;
    [NativeNameAttribute("Name", "GL_TEXTURE_COMPARE_OPERATOR_SGIX")]
public static GetTextureParameter TextureCompareOperatorSgix;
    [NativeNameAttribute("Name", "GL_TEXTURE_LEQUAL_R_SGIX")]
public static GetTextureParameter TextureLequalRSgix;
    [NativeNameAttribute("Name", "GL_TEXTURE_GEQUAL_R_SGIX")]
public static GetTextureParameter TextureGequalRSgix;
    [NativeNameAttribute("Name", "GL_TEXTURE_MAX_CLAMP_S_SGIX")]
public static GetTextureParameter TextureMaxClampSSgix;
    [NativeNameAttribute("Name", "GL_TEXTURE_MAX_CLAMP_T_SGIX")]
public static GetTextureParameter TextureMaxClampTSgix;
    [NativeNameAttribute("Name", "GL_TEXTURE_MAX_CLAMP_R_SGIX")]
public static GetTextureParameter TextureMaxClampRSgix;
    [NativeNameAttribute("Name", "GL_TEXTURE_UNNORMALIZED_COORDINATES_ARM")]
public static GetTextureParameter TextureUnnormalizedCoordinatesArm;
    [NativeNameAttribute("Name", "GL_SURFACE_COMPRESSION_EXT")]
public static GetTextureParameter SurfaceCompressionExt;
}
[NativeNameAttribute("Name", "GetVariantValueEXT")]
public enum Silk.NET.OpenGL.GetVariantValueEXT : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_VARIANT_VALUE_EXT")]
public static GetVariantValueEXT VariantValueExt;
    [NativeNameAttribute("Name", "GL_VARIANT_DATATYPE_EXT")]
public static GetVariantValueEXT VariantDatatypeExt;
    [NativeNameAttribute("Name", "GL_VARIANT_ARRAY_STRIDE_EXT")]
public static GetVariantValueEXT VariantArrayStrideExt;
    [NativeNameAttribute("Name", "GL_VARIANT_ARRAY_TYPE_EXT")]
public static GetVariantValueEXT VariantArrayTypeExt;
}
public class Silk.NET.OpenGL.GL : NativeAPI {
    private List`1<string> _extensions;
    public GL(INativeContext ctx);
    public static GL GetApi(IGLContextSource contextSource);
    public static GL GetApi(IGLContext ctx);
    public static GL GetApi(Func`2<string, IntPtr> getProcAddress);
    public static GL GetApi(INativeContext ctx);
    public bool TryGetExtension(T& ext);
    public virtual bool IsExtensionPresent(string extension);
    public void ClearColor(Color color);
    public void ClearColor(Vector4D`1<T> color);
    public void BlendColor(Color color);
    public void BlendColor(Vector4D`1<T> color);
    public void Uniform2(int location, Vector2& vector);
    public void Uniform3(int location, Vector3& vector);
    public void Uniform4(int location, Vector4& vector);
    public void Uniform2(int location, Vector2 vector);
    public void Uniform3(int location, Vector3 vector);
    public void Uniform4(int location, Vector4 vector);
    public void Uniform4(int location, Quaternion quaternion);
    public void ProgramUniform2(UInt32 program, int location, Vector2& vector);
    public void ProgramUniform3(UInt32 program, int location, Vector3& vector);
    public void ProgramUniform4(UInt32 program, int location, Vector4& vector);
    public void ProgramUniform2(UInt32 program, int location, Vector2 vector);
    public void ProgramUniform3(UInt32 program, int location, Vector3 vector);
    public void ProgramUniform4(UInt32 program, int location, Vector4 vector);
    public void ProgramUniform4(UInt32 program, int location, Quaternion quaternion);
    public string GetActiveAttrib(UInt32 program, UInt32 index, Int32& size, AttributeType& type);
    public string GetActiveUniform(UInt32 program, UInt32 uniformIndex, Int32& size, UniformType& type);
    public void ShaderSource(UInt32 shader, string string);
    public string GetShaderInfoLog(UInt32 shader);
    public void GetShaderInfoLog(UInt32 shader, String& info);
    public string GetProgramInfoLog(UInt32 program);
    public void GetProgramInfoLog(UInt32 program, String& info);
    [CLSCompliantAttribute("False")]
public void VertexAttrib2(UInt32 index, Vector2& v);
    [CLSCompliantAttribute("False")]
public void VertexAttrib3(UInt32 index, Vector3& v);
    [CLSCompliantAttribute("False")]
public void VertexAttrib4(UInt32 index, Vector4& v);
    public void VertexAttrib2(UInt32 index, Vector2 v);
    public void VertexAttrib3(UInt32 index, Vector3 v);
    public void VertexAttrib4(UInt32 index, Vector4 v);
    public void GetFloat(GLEnum pname, Vector2& vector);
    public void GetFloat(GLEnum pname, Vector3& vector);
    public void GetFloat(GLEnum pname, Vector4& vector);
    public void GetFloat(GLEnum pname, Matrix4x4& matrix);
    public void Viewport(Size size);
    public void Viewport(Vector2D`1<int> size);
    public void Viewport(Point location, Size size);
    public void Viewport(Vector2D`1<int> location, Vector2D`1<int> size);
    public void Viewport(Rectangle rectangle);
    public void Viewport(Rectangle`1<int> rectangle);
    [NativeApiAttribute]
public void MultiDrawArraysIndirectCount(GLEnum mode, Void* indirect, IntPtr drawcount, UInt32 maxdrawcount, UInt32 stride);
    [NativeApiAttribute]
public void MultiDrawArraysIndirectCount(GLEnum mode, T0& indirect, IntPtr drawcount, UInt32 maxdrawcount, UInt32 stride);
    [NativeApiAttribute]
public void MultiDrawArraysIndirectCount(PrimitiveType mode, Void* indirect, IntPtr drawcount, UInt32 maxdrawcount, UInt32 stride);
    [NativeApiAttribute]
public void MultiDrawArraysIndirectCount(PrimitiveType mode, T0& indirect, IntPtr drawcount, UInt32 maxdrawcount, UInt32 stride);
    [NativeApiAttribute]
public void MultiDrawElementsIndirectCount(GLEnum mode, GLEnum type, Void* indirect, IntPtr drawcount, UInt32 maxdrawcount, UInt32 stride);
    [NativeApiAttribute]
public void MultiDrawElementsIndirectCount(GLEnum mode, GLEnum type, T0& indirect, IntPtr drawcount, UInt32 maxdrawcount, UInt32 stride);
    [NativeApiAttribute]
public void MultiDrawElementsIndirectCount(GLEnum mode, DrawElementsType type, Void* indirect, IntPtr drawcount, UInt32 maxdrawcount, UInt32 stride);
    [NativeApiAttribute]
public void MultiDrawElementsIndirectCount(GLEnum mode, DrawElementsType type, T0& indirect, IntPtr drawcount, UInt32 maxdrawcount, UInt32 stride);
    [NativeApiAttribute]
public void MultiDrawElementsIndirectCount(PrimitiveType mode, GLEnum type, Void* indirect, IntPtr drawcount, UInt32 maxdrawcount, UInt32 stride);
    [NativeApiAttribute]
public void MultiDrawElementsIndirectCount(PrimitiveType mode, GLEnum type, T0& indirect, IntPtr drawcount, UInt32 maxdrawcount, UInt32 stride);
    [NativeApiAttribute]
public void MultiDrawElementsIndirectCount(PrimitiveType mode, DrawElementsType type, Void* indirect, IntPtr drawcount, UInt32 maxdrawcount, UInt32 stride);
    [NativeApiAttribute]
public void MultiDrawElementsIndirectCount(PrimitiveType mode, DrawElementsType type, T0& indirect, IntPtr drawcount, UInt32 maxdrawcount, UInt32 stride);
    [NativeApiAttribute]
public void PolygonOffsetClamp(float factor, float units, float clamp);
    [NativeApiAttribute]
public void SpecializeShader(UInt32 shader, Byte* pEntryPoint, UInt32 numSpecializationConstants, UInt32* pConstantIndex, UInt32* pConstantValue);
    [NativeApiAttribute]
public void SpecializeShader(UInt32 shader, Byte* pEntryPoint, UInt32 numSpecializationConstants, UInt32* pConstantIndex, UInt32& pConstantValue);
    [NativeApiAttribute]
public void SpecializeShader(UInt32 shader, Byte* pEntryPoint, UInt32 numSpecializationConstants, UInt32& pConstantIndex, UInt32* pConstantValue);
    [NativeApiAttribute]
public void SpecializeShader(UInt32 shader, Byte* pEntryPoint, UInt32 numSpecializationConstants, UInt32& pConstantIndex, UInt32& pConstantValue);
    [NativeApiAttribute]
public void SpecializeShader(UInt32 shader, Byte& pEntryPoint, UInt32 numSpecializationConstants, UInt32* pConstantIndex, UInt32* pConstantValue);
    [NativeApiAttribute]
public void SpecializeShader(UInt32 shader, Byte& pEntryPoint, UInt32 numSpecializationConstants, UInt32* pConstantIndex, UInt32& pConstantValue);
    [NativeApiAttribute]
public void SpecializeShader(UInt32 shader, Byte& pEntryPoint, UInt32 numSpecializationConstants, UInt32& pConstantIndex, UInt32* pConstantValue);
    [NativeApiAttribute]
public void SpecializeShader(UInt32 shader, Byte& pEntryPoint, UInt32 numSpecializationConstants, UInt32& pConstantIndex, UInt32& pConstantValue);
    [NativeApiAttribute]
public void SpecializeShader(UInt32 shader, string pEntryPoint, UInt32 numSpecializationConstants, UInt32* pConstantIndex, UInt32* pConstantValue);
    [NativeApiAttribute]
public void SpecializeShader(UInt32 shader, string pEntryPoint, UInt32 numSpecializationConstants, UInt32* pConstantIndex, UInt32& pConstantValue);
    [NativeApiAttribute]
public void SpecializeShader(UInt32 shader, string pEntryPoint, UInt32 numSpecializationConstants, UInt32& pConstantIndex, UInt32* pConstantValue);
    [NativeApiAttribute]
public void SpecializeShader(UInt32 shader, string pEntryPoint, UInt32 numSpecializationConstants, UInt32& pConstantIndex, UInt32& pConstantValue);
    [NativeApiAttribute]
public void BindTextureUnit(UInt32 unit, UInt32 texture);
    [NativeApiAttribute]
public void BlitNamedFramebuffer(UInt32 readFramebuffer, UInt32 drawFramebuffer, int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, UInt32 mask, GLEnum filter);
    [NativeApiAttribute]
public void BlitNamedFramebuffer(UInt32 readFramebuffer, UInt32 drawFramebuffer, int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, UInt32 mask, BlitFramebufferFilter filter);
    [NativeApiAttribute]
public void BlitNamedFramebuffer(UInt32 readFramebuffer, UInt32 drawFramebuffer, int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, ClearBufferMask mask, GLEnum filter);
    [NativeApiAttribute]
public void BlitNamedFramebuffer(UInt32 readFramebuffer, UInt32 drawFramebuffer, int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, ClearBufferMask mask, BlitFramebufferFilter filter);
    [NativeApiAttribute]
public GLEnum CheckNamedFramebufferStatus(UInt32 framebuffer, GLEnum target);
    [NativeApiAttribute]
public GLEnum CheckNamedFramebufferStatus(UInt32 framebuffer, FramebufferTarget target);
    [NativeApiAttribute]
public void ClearNamedBufferData(UInt32 buffer, GLEnum internalformat, GLEnum format, GLEnum type, Void* data);
    [NativeApiAttribute]
public void ClearNamedBufferData(UInt32 buffer, GLEnum internalformat, GLEnum format, GLEnum type, T0& data);
    [NativeApiAttribute]
public void ClearNamedBufferData(UInt32 buffer, GLEnum internalformat, GLEnum format, PixelType type, Void* data);
    [NativeApiAttribute]
public void ClearNamedBufferData(UInt32 buffer, GLEnum internalformat, GLEnum format, PixelType type, T0& data);
    [NativeApiAttribute]
public void ClearNamedBufferData(UInt32 buffer, GLEnum internalformat, PixelFormat format, GLEnum type, Void* data);
    [NativeApiAttribute]
public void ClearNamedBufferData(UInt32 buffer, GLEnum internalformat, PixelFormat format, GLEnum type, T0& data);
    [NativeApiAttribute]
public void ClearNamedBufferData(UInt32 buffer, GLEnum internalformat, PixelFormat format, PixelType type, Void* data);
    [NativeApiAttribute]
public void ClearNamedBufferData(UInt32 buffer, GLEnum internalformat, PixelFormat format, PixelType type, T0& data);
    [NativeApiAttribute]
public void ClearNamedBufferData(UInt32 buffer, SizedInternalFormat internalformat, GLEnum format, GLEnum type, Void* data);
    [NativeApiAttribute]
public void ClearNamedBufferData(UInt32 buffer, SizedInternalFormat internalformat, GLEnum format, GLEnum type, T0& data);
    [NativeApiAttribute]
public void ClearNamedBufferData(UInt32 buffer, SizedInternalFormat internalformat, GLEnum format, PixelType type, Void* data);
    [NativeApiAttribute]
public void ClearNamedBufferData(UInt32 buffer, SizedInternalFormat internalformat, GLEnum format, PixelType type, T0& data);
    [NativeApiAttribute]
public void ClearNamedBufferData(UInt32 buffer, SizedInternalFormat internalformat, PixelFormat format, GLEnum type, Void* data);
    [NativeApiAttribute]
public void ClearNamedBufferData(UInt32 buffer, SizedInternalFormat internalformat, PixelFormat format, GLEnum type, T0& data);
    [NativeApiAttribute]
public void ClearNamedBufferData(UInt32 buffer, SizedInternalFormat internalformat, PixelFormat format, PixelType type, Void* data);
    [NativeApiAttribute]
public void ClearNamedBufferData(UInt32 buffer, SizedInternalFormat internalformat, PixelFormat format, PixelType type, T0& data);
    [NativeApiAttribute]
public void ClearNamedBufferSubData(UInt32 buffer, GLEnum internalformat, IntPtr offset, UIntPtr size, GLEnum format, GLEnum type, Void* data);
    [NativeApiAttribute]
public void ClearNamedBufferSubData(UInt32 buffer, GLEnum internalformat, IntPtr offset, UIntPtr size, GLEnum format, GLEnum type, T0& data);
    [NativeApiAttribute]
public void ClearNamedBufferSubData(UInt32 buffer, GLEnum internalformat, IntPtr offset, UIntPtr size, GLEnum format, PixelType type, Void* data);
    [NativeApiAttribute]
public void ClearNamedBufferSubData(UInt32 buffer, GLEnum internalformat, IntPtr offset, UIntPtr size, GLEnum format, PixelType type, T0& data);
    [NativeApiAttribute]
public void ClearNamedBufferSubData(UInt32 buffer, GLEnum internalformat, IntPtr offset, UIntPtr size, PixelFormat format, GLEnum type, Void* data);
    [NativeApiAttribute]
public void ClearNamedBufferSubData(UInt32 buffer, GLEnum internalformat, IntPtr offset, UIntPtr size, PixelFormat format, GLEnum type, T0& data);
    [NativeApiAttribute]
public void ClearNamedBufferSubData(UInt32 buffer, GLEnum internalformat, IntPtr offset, UIntPtr size, PixelFormat format, PixelType type, Void* data);
    [NativeApiAttribute]
public void ClearNamedBufferSubData(UInt32 buffer, GLEnum internalformat, IntPtr offset, UIntPtr size, PixelFormat format, PixelType type, T0& data);
    [NativeApiAttribute]
public void ClearNamedBufferSubData(UInt32 buffer, SizedInternalFormat internalformat, IntPtr offset, UIntPtr size, GLEnum format, GLEnum type, Void* data);
    [NativeApiAttribute]
public void ClearNamedBufferSubData(UInt32 buffer, SizedInternalFormat internalformat, IntPtr offset, UIntPtr size, GLEnum format, GLEnum type, T0& data);
    [NativeApiAttribute]
public void ClearNamedBufferSubData(UInt32 buffer, SizedInternalFormat internalformat, IntPtr offset, UIntPtr size, GLEnum format, PixelType type, Void* data);
    [NativeApiAttribute]
public void ClearNamedBufferSubData(UInt32 buffer, SizedInternalFormat internalformat, IntPtr offset, UIntPtr size, GLEnum format, PixelType type, T0& data);
    [NativeApiAttribute]
public void ClearNamedBufferSubData(UInt32 buffer, SizedInternalFormat internalformat, IntPtr offset, UIntPtr size, PixelFormat format, GLEnum type, Void* data);
    [NativeApiAttribute]
public void ClearNamedBufferSubData(UInt32 buffer, SizedInternalFormat internalformat, IntPtr offset, UIntPtr size, PixelFormat format, GLEnum type, T0& data);
    [NativeApiAttribute]
public void ClearNamedBufferSubData(UInt32 buffer, SizedInternalFormat internalformat, IntPtr offset, UIntPtr size, PixelFormat format, PixelType type, Void* data);
    [NativeApiAttribute]
public void ClearNamedBufferSubData(UInt32 buffer, SizedInternalFormat internalformat, IntPtr offset, UIntPtr size, PixelFormat format, PixelType type, T0& data);
    [NativeApiAttribute]
public void ClearNamedFramebuffer(UInt32 framebuffer, GLEnum buffer, int drawbuffer, Int32* value);
    [NativeApiAttribute]
public void ClearNamedFramebuffer(UInt32 framebuffer, GLEnum buffer, int drawbuffer, Int32& value);
    [NativeApiAttribute]
public void ClearNamedFramebuffer(UInt32 framebuffer, BufferKind buffer, int drawbuffer, Int32* value);
    [NativeApiAttribute]
public void ClearNamedFramebuffer(UInt32 framebuffer, BufferKind buffer, int drawbuffer, Int32& value);
    [NativeApiAttribute]
public void ClearNamedFramebuffer(UInt32 framebuffer, GLEnum buffer, int drawbuffer, UInt32* value);
    [NativeApiAttribute]
public void ClearNamedFramebuffer(UInt32 framebuffer, GLEnum buffer, int drawbuffer, UInt32& value);
    [NativeApiAttribute]
public void ClearNamedFramebuffer(UInt32 framebuffer, BufferKind buffer, int drawbuffer, UInt32* value);
    [NativeApiAttribute]
public void ClearNamedFramebuffer(UInt32 framebuffer, BufferKind buffer, int drawbuffer, UInt32& value);
    [NativeApiAttribute]
public void ClearNamedFramebuffer(UInt32 framebuffer, GLEnum buffer, int drawbuffer, Single* value);
    [NativeApiAttribute]
public void ClearNamedFramebuffer(UInt32 framebuffer, GLEnum buffer, int drawbuffer, Single& value);
    [NativeApiAttribute]
public void ClearNamedFramebuffer(UInt32 framebuffer, BufferKind buffer, int drawbuffer, Single* value);
    [NativeApiAttribute]
public void ClearNamedFramebuffer(UInt32 framebuffer, BufferKind buffer, int drawbuffer, Single& value);
    [NativeApiAttribute]
public void ClearNamedFramebuffer(UInt32 framebuffer, GLEnum buffer, int drawbuffer, float depth, int stencil);
    [NativeApiAttribute]
public void ClearNamedFramebuffer(UInt32 framebuffer, BufferKind buffer, int drawbuffer, float depth, int stencil);
    [NativeApiAttribute]
public void ClipControl(GLEnum origin, GLEnum depth);
    [NativeApiAttribute]
public void ClipControl(GLEnum origin, ClipControlDepth depth);
    [NativeApiAttribute]
public void ClipControl(ClipControlOrigin origin, GLEnum depth);
    [NativeApiAttribute]
public void ClipControl(ClipControlOrigin origin, ClipControlDepth depth);
    [NativeApiAttribute]
public void CompressedTextureSubImage1D(UInt32 texture, int level, int xoffset, UInt32 width, GLEnum format, UInt32 imageSize, Void* data);
    [NativeApiAttribute]
public void CompressedTextureSubImage1D(UInt32 texture, int level, int xoffset, UInt32 width, GLEnum format, UInt32 imageSize, T0& data);
    [NativeApiAttribute]
public void CompressedTextureSubImage1D(UInt32 texture, int level, int xoffset, UInt32 width, InternalFormat format, UInt32 imageSize, Void* data);
    [NativeApiAttribute]
public void CompressedTextureSubImage1D(UInt32 texture, int level, int xoffset, UInt32 width, InternalFormat format, UInt32 imageSize, T0& data);
    [NativeApiAttribute]
public void CompressedTextureSubImage2D(UInt32 texture, int level, int xoffset, int yoffset, UInt32 width, UInt32 height, GLEnum format, UInt32 imageSize, Void* data);
    [NativeApiAttribute]
public void CompressedTextureSubImage2D(UInt32 texture, int level, int xoffset, int yoffset, UInt32 width, UInt32 height, GLEnum format, UInt32 imageSize, T0& data);
    [NativeApiAttribute]
public void CompressedTextureSubImage2D(UInt32 texture, int level, int xoffset, int yoffset, UInt32 width, UInt32 height, InternalFormat format, UInt32 imageSize, Void* data);
    [NativeApiAttribute]
public void CompressedTextureSubImage2D(UInt32 texture, int level, int xoffset, int yoffset, UInt32 width, UInt32 height, InternalFormat format, UInt32 imageSize, T0& data);
    [NativeApiAttribute]
public void CompressedTextureSubImage3D(UInt32 texture, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, GLEnum format, UInt32 imageSize, Void* data);
    [NativeApiAttribute]
public void CompressedTextureSubImage3D(UInt32 texture, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, GLEnum format, UInt32 imageSize, T0& data);
    [NativeApiAttribute]
public void CompressedTextureSubImage3D(UInt32 texture, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, InternalFormat format, UInt32 imageSize, Void* data);
    [NativeApiAttribute]
public void CompressedTextureSubImage3D(UInt32 texture, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, InternalFormat format, UInt32 imageSize, T0& data);
    [NativeApiAttribute]
public void CopyNamedBufferSubData(UInt32 readBuffer, UInt32 writeBuffer, IntPtr readOffset, IntPtr writeOffset, UIntPtr size);
    [NativeApiAttribute]
public void CopyTextureSubImage1D(UInt32 texture, int level, int xoffset, int x, int y, UInt32 width);
    [NativeApiAttribute]
public void CopyTextureSubImage2D(UInt32 texture, int level, int xoffset, int yoffset, int x, int y, UInt32 width, UInt32 height);
    [NativeApiAttribute]
public void CopyTextureSubImage3D(UInt32 texture, int level, int xoffset, int yoffset, int zoffset, int x, int y, UInt32 width, UInt32 height);
    [NativeApiAttribute]
public void CreateBuffers(UInt32 n, UInt32* buffers);
    [NativeApiAttribute]
public void CreateBuffers(UInt32 n, UInt32& buffers);
    [NativeApiAttribute]
public void CreateBuffers(UInt32 n, Buffer* buffers);
    [NativeApiAttribute]
public void CreateBuffers(UInt32 n, Buffer& buffers);
    [NativeApiAttribute]
public void CreateFramebuffers(UInt32 n, UInt32* framebuffers);
    [NativeApiAttribute]
public void CreateFramebuffers(UInt32 n, UInt32& framebuffers);
    [NativeApiAttribute]
public void CreateFramebuffers(UInt32 n, Framebuffer* framebuffers);
    [NativeApiAttribute]
public void CreateFramebuffers(UInt32 n, Framebuffer& framebuffers);
    [NativeApiAttribute]
public void CreateProgramPipelines(UInt32 n, UInt32* pipelines);
    [NativeApiAttribute]
public void CreateProgramPipelines(UInt32 n, UInt32& pipelines);
    [NativeApiAttribute]
public void CreateProgramPipelines(UInt32 n, ProgramPipeline* pipelines);
    [NativeApiAttribute]
public void CreateProgramPipelines(UInt32 n, ProgramPipeline& pipelines);
    [NativeApiAttribute]
public void CreateQueries(GLEnum target, UInt32 n, UInt32* ids);
    [NativeApiAttribute]
public void CreateQueries(GLEnum target, UInt32 n, UInt32& ids);
    [NativeApiAttribute]
public void CreateQueries(GLEnum target, UInt32 n, Query* ids);
    [NativeApiAttribute]
public void CreateQueries(GLEnum target, UInt32 n, Query& ids);
    [NativeApiAttribute]
public void CreateQueries(QueryTarget target, UInt32 n, UInt32* ids);
    [NativeApiAttribute]
public void CreateQueries(QueryTarget target, UInt32 n, UInt32& ids);
    [NativeApiAttribute]
public void CreateQueries(QueryTarget target, UInt32 n, Query* ids);
    [NativeApiAttribute]
public void CreateQueries(QueryTarget target, UInt32 n, Query& ids);
    [NativeApiAttribute]
public void CreateRenderbuffers(UInt32 n, UInt32* renderbuffers);
    [NativeApiAttribute]
public void CreateRenderbuffers(UInt32 n, UInt32& renderbuffers);
    [NativeApiAttribute]
public void CreateRenderbuffers(UInt32 n, Renderbuffer* renderbuffers);
    [NativeApiAttribute]
public void CreateRenderbuffers(UInt32 n, Renderbuffer& renderbuffers);
    [NativeApiAttribute]
public void CreateSamplers(UInt32 n, UInt32* samplers);
    [NativeApiAttribute]
public void CreateSamplers(UInt32 n, UInt32& samplers);
    [NativeApiAttribute]
public void CreateSamplers(UInt32 n, Sampler* samplers);
    [NativeApiAttribute]
public void CreateSamplers(UInt32 n, Sampler& samplers);
    [NativeApiAttribute]
public void CreateTextures(GLEnum target, UInt32 n, UInt32* textures);
    [NativeApiAttribute]
public void CreateTextures(GLEnum target, UInt32 n, UInt32& textures);
    [NativeApiAttribute]
public void CreateTextures(GLEnum target, UInt32 n, Texture* textures);
    [NativeApiAttribute]
public void CreateTextures(GLEnum target, UInt32 n, Texture& textures);
    [NativeApiAttribute]
public void CreateTextures(TextureTarget target, UInt32 n, UInt32* textures);
    [NativeApiAttribute]
public void CreateTextures(TextureTarget target, UInt32 n, UInt32& textures);
    [NativeApiAttribute]
public void CreateTextures(TextureTarget target, UInt32 n, Texture* textures);
    [NativeApiAttribute]
public void CreateTextures(TextureTarget target, UInt32 n, Texture& textures);
    [NativeApiAttribute]
public void CreateTransformFeedbacks(UInt32 n, UInt32* ids);
    [NativeApiAttribute]
public void CreateTransformFeedbacks(UInt32 n, UInt32& ids);
    [NativeApiAttribute]
public void CreateTransformFeedbacks(UInt32 n, TransformFeedback* ids);
    [NativeApiAttribute]
public void CreateTransformFeedbacks(UInt32 n, TransformFeedback& ids);
    [NativeApiAttribute]
public void CreateVertexArrays(UInt32 n, UInt32* arrays);
    [NativeApiAttribute]
public void CreateVertexArrays(UInt32 n, UInt32& arrays);
    [NativeApiAttribute]
public void CreateVertexArrays(UInt32 n, VertexArray* arrays);
    [NativeApiAttribute]
public void CreateVertexArrays(UInt32 n, VertexArray& arrays);
    [NativeApiAttribute]
public void DisableVertexArrayAttrib(UInt32 vaobj, UInt32 index);
    [NativeApiAttribute]
public void EnableVertexArrayAttrib(UInt32 vaobj, UInt32 index);
    [NativeApiAttribute]
public void FlushMappedNamedBufferRange(UInt32 buffer, IntPtr offset, UIntPtr length);
    [NativeApiAttribute]
public void GenerateTextureMipmap(UInt32 texture);
    [NativeApiAttribute]
public void GetCompressedTextureImage(UInt32 texture, int level, UInt32 bufSize, Void* pixels);
    [NativeApiAttribute]
public void GetCompressedTextureImage(UInt32 texture, int level, UInt32 bufSize, T0& pixels);
    [NativeApiAttribute]
public void GetCompressedTextureSubImage(UInt32 texture, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, UInt32 bufSize, Void* pixels);
    [NativeApiAttribute]
public void GetCompressedTextureSubImage(UInt32 texture, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, UInt32 bufSize, T0& pixels);
    [NativeApiAttribute]
public GLEnum GetGraphicsResetStatus();
    [NativeApiAttribute]
public void GetNamedBufferParameter(UInt32 buffer, GLEnum pname, Int32* params);
    [NativeApiAttribute]
public void GetNamedBufferParameter(UInt32 buffer, GLEnum pname, Int32& params);
    [NativeApiAttribute]
public void GetNamedBufferParameter(UInt32 buffer, BufferPNameARB pname, Int32* params);
    [NativeApiAttribute]
public void GetNamedBufferParameter(UInt32 buffer, BufferPNameARB pname, Int32& params);
    [NativeApiAttribute]
public void GetNamedBufferParameter(UInt32 buffer, GLEnum pname, Int64* params);
    [NativeApiAttribute]
public void GetNamedBufferParameter(UInt32 buffer, GLEnum pname, Int64& params);
    [NativeApiAttribute]
public void GetNamedBufferParameter(UInt32 buffer, BufferPNameARB pname, Int64* params);
    [NativeApiAttribute]
public void GetNamedBufferParameter(UInt32 buffer, BufferPNameARB pname, Int64& params);
    [NativeApiAttribute]
public void GetNamedBufferPointer(UInt32 buffer, GLEnum pname, Void** params);
    [NativeApiAttribute]
public void GetNamedBufferPointer(UInt32 buffer, GLEnum pname, Void*& params);
    [NativeApiAttribute]
public void GetNamedBufferPointer(UInt32 buffer, BufferPointerNameARB pname, Void** params);
    [NativeApiAttribute]
public void GetNamedBufferPointer(UInt32 buffer, BufferPointerNameARB pname, Void*& params);
    [NativeApiAttribute]
public void GetNamedBufferSubData(UInt32 buffer, IntPtr offset, UIntPtr size, Void* data);
    [NativeApiAttribute]
public void GetNamedBufferSubData(UInt32 buffer, IntPtr offset, UIntPtr size, T0& data);
    [NativeApiAttribute]
public void GetNamedFramebufferAttachmentParameter(UInt32 framebuffer, GLEnum attachment, GLEnum pname, Int32* params);
    [NativeApiAttribute]
public void GetNamedFramebufferAttachmentParameter(UInt32 framebuffer, GLEnum attachment, GLEnum pname, Int32& params);
    [NativeApiAttribute]
public void GetNamedFramebufferAttachmentParameter(UInt32 framebuffer, GLEnum attachment, FramebufferAttachmentParameterName pname, Int32* params);
    [NativeApiAttribute]
public void GetNamedFramebufferAttachmentParameter(UInt32 framebuffer, GLEnum attachment, FramebufferAttachmentParameterName pname, Int32& params);
    [NativeApiAttribute]
public void GetNamedFramebufferAttachmentParameter(UInt32 framebuffer, FramebufferAttachment attachment, GLEnum pname, Int32* params);
    [NativeApiAttribute]
public void GetNamedFramebufferAttachmentParameter(UInt32 framebuffer, FramebufferAttachment attachment, GLEnum pname, Int32& params);
    [NativeApiAttribute]
public void GetNamedFramebufferAttachmentParameter(UInt32 framebuffer, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, Int32* params);
    [NativeApiAttribute]
public void GetNamedFramebufferAttachmentParameter(UInt32 framebuffer, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, Int32& params);
    [NativeApiAttribute]
public void GetNamedFramebufferParameter(UInt32 framebuffer, GLEnum pname, Int32* param);
    [NativeApiAttribute]
public void GetNamedFramebufferParameter(UInt32 framebuffer, GLEnum pname, Int32& param);
    [NativeApiAttribute]
public void GetNamedFramebufferParameter(UInt32 framebuffer, GetFramebufferParameter pname, Int32* param);
    [NativeApiAttribute]
public void GetNamedFramebufferParameter(UInt32 framebuffer, GetFramebufferParameter pname, Int32& param);
    [NativeApiAttribute]
public void GetNamedRenderbufferParameter(UInt32 renderbuffer, GLEnum pname, Int32* params);
    [NativeApiAttribute]
public void GetNamedRenderbufferParameter(UInt32 renderbuffer, GLEnum pname, Int32& params);
    [NativeApiAttribute]
public void GetNamedRenderbufferParameter(UInt32 renderbuffer, RenderbufferParameterName pname, Int32* params);
    [NativeApiAttribute]
public void GetNamedRenderbufferParameter(UInt32 renderbuffer, RenderbufferParameterName pname, Int32& params);
    [NativeApiAttribute]
public void GetnColorTable(GLEnum target, GLEnum format, GLEnum type, UInt32 bufSize, Void* table);
    [NativeApiAttribute]
public void GetnColorTable(GLEnum target, GLEnum format, GLEnum type, UInt32 bufSize, T0& table);
    [NativeApiAttribute]
public void GetnColorTable(GLEnum target, GLEnum format, PixelType type, UInt32 bufSize, Void* table);
    [NativeApiAttribute]
public void GetnColorTable(GLEnum target, GLEnum format, PixelType type, UInt32 bufSize, T0& table);
    [NativeApiAttribute]
public void GetnColorTable(GLEnum target, PixelFormat format, GLEnum type, UInt32 bufSize, Void* table);
    [NativeApiAttribute]
public void GetnColorTable(GLEnum target, PixelFormat format, GLEnum type, UInt32 bufSize, T0& table);
    [NativeApiAttribute]
public void GetnColorTable(GLEnum target, PixelFormat format, PixelType type, UInt32 bufSize, Void* table);
    [NativeApiAttribute]
public void GetnColorTable(GLEnum target, PixelFormat format, PixelType type, UInt32 bufSize, T0& table);
    [NativeApiAttribute]
public void GetnColorTable(ColorTableTarget target, GLEnum format, GLEnum type, UInt32 bufSize, Void* table);
    [NativeApiAttribute]
public void GetnColorTable(ColorTableTarget target, GLEnum format, GLEnum type, UInt32 bufSize, T0& table);
    [NativeApiAttribute]
public void GetnColorTable(ColorTableTarget target, GLEnum format, PixelType type, UInt32 bufSize, Void* table);
    [NativeApiAttribute]
public void GetnColorTable(ColorTableTarget target, GLEnum format, PixelType type, UInt32 bufSize, T0& table);
    [NativeApiAttribute]
public void GetnColorTable(ColorTableTarget target, PixelFormat format, GLEnum type, UInt32 bufSize, Void* table);
    [NativeApiAttribute]
public void GetnColorTable(ColorTableTarget target, PixelFormat format, GLEnum type, UInt32 bufSize, T0& table);
    [NativeApiAttribute]
public void GetnColorTable(ColorTableTarget target, PixelFormat format, PixelType type, UInt32 bufSize, Void* table);
    [NativeApiAttribute]
public void GetnColorTable(ColorTableTarget target, PixelFormat format, PixelType type, UInt32 bufSize, T0& table);
    [NativeApiAttribute]
public void GetnCompressedTexImage(GLEnum target, int lod, UInt32 bufSize, Void* pixels);
    [NativeApiAttribute]
public void GetnCompressedTexImage(GLEnum target, int lod, UInt32 bufSize, T0& pixels);
    [NativeApiAttribute]
public void GetnCompressedTexImage(TextureTarget target, int lod, UInt32 bufSize, Void* pixels);
    [NativeApiAttribute]
public void GetnCompressedTexImage(TextureTarget target, int lod, UInt32 bufSize, T0& pixels);
    [NativeApiAttribute]
public void GetnConvolutionFilter(GLEnum target, GLEnum format, GLEnum type, UInt32 bufSize, Void* image);
    [NativeApiAttribute]
public void GetnConvolutionFilter(GLEnum target, GLEnum format, GLEnum type, UInt32 bufSize, T0& image);
    [NativeApiAttribute]
public void GetnConvolutionFilter(GLEnum target, GLEnum format, PixelType type, UInt32 bufSize, Void* image);
    [NativeApiAttribute]
public void GetnConvolutionFilter(GLEnum target, GLEnum format, PixelType type, UInt32 bufSize, T0& image);
    [NativeApiAttribute]
public void GetnConvolutionFilter(GLEnum target, PixelFormat format, GLEnum type, UInt32 bufSize, Void* image);
    [NativeApiAttribute]
public void GetnConvolutionFilter(GLEnum target, PixelFormat format, GLEnum type, UInt32 bufSize, T0& image);
    [NativeApiAttribute]
public void GetnConvolutionFilter(GLEnum target, PixelFormat format, PixelType type, UInt32 bufSize, Void* image);
    [NativeApiAttribute]
public void GetnConvolutionFilter(GLEnum target, PixelFormat format, PixelType type, UInt32 bufSize, T0& image);
    [NativeApiAttribute]
public void GetnConvolutionFilter(ConvolutionTarget target, GLEnum format, GLEnum type, UInt32 bufSize, Void* image);
    [NativeApiAttribute]
public void GetnConvolutionFilter(ConvolutionTarget target, GLEnum format, GLEnum type, UInt32 bufSize, T0& image);
    [NativeApiAttribute]
public void GetnConvolutionFilter(ConvolutionTarget target, GLEnum format, PixelType type, UInt32 bufSize, Void* image);
    [NativeApiAttribute]
public void GetnConvolutionFilter(ConvolutionTarget target, GLEnum format, PixelType type, UInt32 bufSize, T0& image);
    [NativeApiAttribute]
public void GetnConvolutionFilter(ConvolutionTarget target, PixelFormat format, GLEnum type, UInt32 bufSize, Void* image);
    [NativeApiAttribute]
public void GetnConvolutionFilter(ConvolutionTarget target, PixelFormat format, GLEnum type, UInt32 bufSize, T0& image);
    [NativeApiAttribute]
public void GetnConvolutionFilter(ConvolutionTarget target, PixelFormat format, PixelType type, UInt32 bufSize, Void* image);
    [NativeApiAttribute]
public void GetnConvolutionFilter(ConvolutionTarget target, PixelFormat format, PixelType type, UInt32 bufSize, T0& image);
    [NativeApiAttribute]
public void GetnHistogram(GLEnum target, bool reset, GLEnum format, GLEnum type, UInt32 bufSize, Void* values);
    [NativeApiAttribute]
public void GetnHistogram(GLEnum target, bool reset, GLEnum format, GLEnum type, UInt32 bufSize, T0& values);
    [NativeApiAttribute]
public void GetnHistogram(GLEnum target, bool reset, GLEnum format, PixelType type, UInt32 bufSize, Void* values);
    [NativeApiAttribute]
public void GetnHistogram(GLEnum target, bool reset, GLEnum format, PixelType type, UInt32 bufSize, T0& values);
    [NativeApiAttribute]
public void GetnHistogram(GLEnum target, bool reset, PixelFormat format, GLEnum type, UInt32 bufSize, Void* values);
    [NativeApiAttribute]
public void GetnHistogram(GLEnum target, bool reset, PixelFormat format, GLEnum type, UInt32 bufSize, T0& values);
    [NativeApiAttribute]
public void GetnHistogram(GLEnum target, bool reset, PixelFormat format, PixelType type, UInt32 bufSize, Void* values);
    [NativeApiAttribute]
public void GetnHistogram(GLEnum target, bool reset, PixelFormat format, PixelType type, UInt32 bufSize, T0& values);
    [NativeApiAttribute]
public void GetnHistogram(GLEnum target, Boolean reset, GLEnum format, GLEnum type, UInt32 bufSize, Void* values);
    [NativeApiAttribute]
public void GetnHistogram(GLEnum target, Boolean reset, GLEnum format, GLEnum type, UInt32 bufSize, T0& values);
    [NativeApiAttribute]
public void GetnHistogram(GLEnum target, Boolean reset, GLEnum format, PixelType type, UInt32 bufSize, Void* values);
    [NativeApiAttribute]
public void GetnHistogram(GLEnum target, Boolean reset, GLEnum format, PixelType type, UInt32 bufSize, T0& values);
    [NativeApiAttribute]
public void GetnHistogram(GLEnum target, Boolean reset, PixelFormat format, GLEnum type, UInt32 bufSize, Void* values);
    [NativeApiAttribute]
public void GetnHistogram(GLEnum target, Boolean reset, PixelFormat format, GLEnum type, UInt32 bufSize, T0& values);
    [NativeApiAttribute]
public void GetnHistogram(GLEnum target, Boolean reset, PixelFormat format, PixelType type, UInt32 bufSize, Void* values);
    [NativeApiAttribute]
public void GetnHistogram(GLEnum target, Boolean reset, PixelFormat format, PixelType type, UInt32 bufSize, T0& values);
    [NativeApiAttribute]
public void GetnHistogram(HistogramTarget target, bool reset, GLEnum format, GLEnum type, UInt32 bufSize, Void* values);
    [NativeApiAttribute]
public void GetnHistogram(HistogramTarget target, bool reset, GLEnum format, GLEnum type, UInt32 bufSize, T0& values);
    [NativeApiAttribute]
public void GetnHistogram(HistogramTarget target, bool reset, GLEnum format, PixelType type, UInt32 bufSize, Void* values);
    [NativeApiAttribute]
public void GetnHistogram(HistogramTarget target, bool reset, GLEnum format, PixelType type, UInt32 bufSize, T0& values);
    [NativeApiAttribute]
public void GetnHistogram(HistogramTarget target, bool reset, PixelFormat format, GLEnum type, UInt32 bufSize, Void* values);
    [NativeApiAttribute]
public void GetnHistogram(HistogramTarget target, bool reset, PixelFormat format, GLEnum type, UInt32 bufSize, T0& values);
    [NativeApiAttribute]
public void GetnHistogram(HistogramTarget target, bool reset, PixelFormat format, PixelType type, UInt32 bufSize, Void* values);
    [NativeApiAttribute]
public void GetnHistogram(HistogramTarget target, bool reset, PixelFormat format, PixelType type, UInt32 bufSize, T0& values);
    [NativeApiAttribute]
public void GetnHistogram(HistogramTarget target, Boolean reset, GLEnum format, GLEnum type, UInt32 bufSize, Void* values);
    [NativeApiAttribute]
public void GetnHistogram(HistogramTarget target, Boolean reset, GLEnum format, GLEnum type, UInt32 bufSize, T0& values);
    [NativeApiAttribute]
public void GetnHistogram(HistogramTarget target, Boolean reset, GLEnum format, PixelType type, UInt32 bufSize, Void* values);
    [NativeApiAttribute]
public void GetnHistogram(HistogramTarget target, Boolean reset, GLEnum format, PixelType type, UInt32 bufSize, T0& values);
    [NativeApiAttribute]
public void GetnHistogram(HistogramTarget target, Boolean reset, PixelFormat format, GLEnum type, UInt32 bufSize, Void* values);
    [NativeApiAttribute]
public void GetnHistogram(HistogramTarget target, Boolean reset, PixelFormat format, GLEnum type, UInt32 bufSize, T0& values);
    [NativeApiAttribute]
public void GetnHistogram(HistogramTarget target, Boolean reset, PixelFormat format, PixelType type, UInt32 bufSize, Void* values);
    [NativeApiAttribute]
public void GetnHistogram(HistogramTarget target, Boolean reset, PixelFormat format, PixelType type, UInt32 bufSize, T0& values);
    [NativeApiAttribute]
public void GetnMap(GLEnum target, GLEnum query, UInt32 bufSize, Double* v);
    [NativeApiAttribute]
public void GetnMap(GLEnum target, GLEnum query, UInt32 bufSize, Double& v);
    [NativeApiAttribute]
public void GetnMap(GLEnum target, MapQuery query, UInt32 bufSize, Double* v);
    [NativeApiAttribute]
public void GetnMap(GLEnum target, MapQuery query, UInt32 bufSize, Double& v);
    [NativeApiAttribute]
public void GetnMap(MapTarget target, GLEnum query, UInt32 bufSize, Double* v);
    [NativeApiAttribute]
public void GetnMap(MapTarget target, GLEnum query, UInt32 bufSize, Double& v);
    [NativeApiAttribute]
public void GetnMap(MapTarget target, MapQuery query, UInt32 bufSize, Double* v);
    [NativeApiAttribute]
public void GetnMap(MapTarget target, MapQuery query, UInt32 bufSize, Double& v);
    [NativeApiAttribute]
public void GetnMap(GLEnum target, GLEnum query, UInt32 bufSize, Single* v);
    [NativeApiAttribute]
public void GetnMap(GLEnum target, GLEnum query, UInt32 bufSize, Single& v);
    [NativeApiAttribute]
public void GetnMap(GLEnum target, MapQuery query, UInt32 bufSize, Single* v);
    [NativeApiAttribute]
public void GetnMap(GLEnum target, MapQuery query, UInt32 bufSize, Single& v);
    [NativeApiAttribute]
public void GetnMap(MapTarget target, GLEnum query, UInt32 bufSize, Single* v);
    [NativeApiAttribute]
public void GetnMap(MapTarget target, GLEnum query, UInt32 bufSize, Single& v);
    [NativeApiAttribute]
public void GetnMap(MapTarget target, MapQuery query, UInt32 bufSize, Single* v);
    [NativeApiAttribute]
public void GetnMap(MapTarget target, MapQuery query, UInt32 bufSize, Single& v);
    [NativeApiAttribute]
public void GetnMap(GLEnum target, GLEnum query, UInt32 bufSize, Int32* v);
    [NativeApiAttribute]
public void GetnMap(GLEnum target, GLEnum query, UInt32 bufSize, Int32& v);
    [NativeApiAttribute]
public void GetnMap(GLEnum target, MapQuery query, UInt32 bufSize, Int32* v);
    [NativeApiAttribute]
public void GetnMap(GLEnum target, MapQuery query, UInt32 bufSize, Int32& v);
    [NativeApiAttribute]
public void GetnMap(MapTarget target, GLEnum query, UInt32 bufSize, Int32* v);
    [NativeApiAttribute]
public void GetnMap(MapTarget target, GLEnum query, UInt32 bufSize, Int32& v);
    [NativeApiAttribute]
public void GetnMap(MapTarget target, MapQuery query, UInt32 bufSize, Int32* v);
    [NativeApiAttribute]
public void GetnMap(MapTarget target, MapQuery query, UInt32 bufSize, Int32& v);
    [NativeApiAttribute]
public void GetnMinmax(GLEnum target, bool reset, GLEnum format, GLEnum type, UInt32 bufSize, Void* values);
    [NativeApiAttribute]
public void GetnMinmax(GLEnum target, bool reset, GLEnum format, GLEnum type, UInt32 bufSize, T0& values);
    [NativeApiAttribute]
public void GetnMinmax(GLEnum target, bool reset, GLEnum format, PixelType type, UInt32 bufSize, Void* values);
    [NativeApiAttribute]
public void GetnMinmax(GLEnum target, bool reset, GLEnum format, PixelType type, UInt32 bufSize, T0& values);
    [NativeApiAttribute]
public void GetnMinmax(GLEnum target, bool reset, PixelFormat format, GLEnum type, UInt32 bufSize, Void* values);
    [NativeApiAttribute]
public void GetnMinmax(GLEnum target, bool reset, PixelFormat format, GLEnum type, UInt32 bufSize, T0& values);
    [NativeApiAttribute]
public void GetnMinmax(GLEnum target, bool reset, PixelFormat format, PixelType type, UInt32 bufSize, Void* values);
    [NativeApiAttribute]
public void GetnMinmax(GLEnum target, bool reset, PixelFormat format, PixelType type, UInt32 bufSize, T0& values);
    [NativeApiAttribute]
public void GetnMinmax(GLEnum target, Boolean reset, GLEnum format, GLEnum type, UInt32 bufSize, Void* values);
    [NativeApiAttribute]
public void GetnMinmax(GLEnum target, Boolean reset, GLEnum format, GLEnum type, UInt32 bufSize, T0& values);
    [NativeApiAttribute]
public void GetnMinmax(GLEnum target, Boolean reset, GLEnum format, PixelType type, UInt32 bufSize, Void* values);
    [NativeApiAttribute]
public void GetnMinmax(GLEnum target, Boolean reset, GLEnum format, PixelType type, UInt32 bufSize, T0& values);
    [NativeApiAttribute]
public void GetnMinmax(GLEnum target, Boolean reset, PixelFormat format, GLEnum type, UInt32 bufSize, Void* values);
    [NativeApiAttribute]
public void GetnMinmax(GLEnum target, Boolean reset, PixelFormat format, GLEnum type, UInt32 bufSize, T0& values);
    [NativeApiAttribute]
public void GetnMinmax(GLEnum target, Boolean reset, PixelFormat format, PixelType type, UInt32 bufSize, Void* values);
    [NativeApiAttribute]
public void GetnMinmax(GLEnum target, Boolean reset, PixelFormat format, PixelType type, UInt32 bufSize, T0& values);
    [NativeApiAttribute]
public void GetnMinmax(MinmaxTarget target, bool reset, GLEnum format, GLEnum type, UInt32 bufSize, Void* values);
    [NativeApiAttribute]
public void GetnMinmax(MinmaxTarget target, bool reset, GLEnum format, GLEnum type, UInt32 bufSize, T0& values);
    [NativeApiAttribute]
public void GetnMinmax(MinmaxTarget target, bool reset, GLEnum format, PixelType type, UInt32 bufSize, Void* values);
    [NativeApiAttribute]
public void GetnMinmax(MinmaxTarget target, bool reset, GLEnum format, PixelType type, UInt32 bufSize, T0& values);
    [NativeApiAttribute]
public void GetnMinmax(MinmaxTarget target, bool reset, PixelFormat format, GLEnum type, UInt32 bufSize, Void* values);
    [NativeApiAttribute]
public void GetnMinmax(MinmaxTarget target, bool reset, PixelFormat format, GLEnum type, UInt32 bufSize, T0& values);
    [NativeApiAttribute]
public void GetnMinmax(MinmaxTarget target, bool reset, PixelFormat format, PixelType type, UInt32 bufSize, Void* values);
    [NativeApiAttribute]
public void GetnMinmax(MinmaxTarget target, bool reset, PixelFormat format, PixelType type, UInt32 bufSize, T0& values);
    [NativeApiAttribute]
public void GetnMinmax(MinmaxTarget target, Boolean reset, GLEnum format, GLEnum type, UInt32 bufSize, Void* values);
    [NativeApiAttribute]
public void GetnMinmax(MinmaxTarget target, Boolean reset, GLEnum format, GLEnum type, UInt32 bufSize, T0& values);
    [NativeApiAttribute]
public void GetnMinmax(MinmaxTarget target, Boolean reset, GLEnum format, PixelType type, UInt32 bufSize, Void* values);
    [NativeApiAttribute]
public void GetnMinmax(MinmaxTarget target, Boolean reset, GLEnum format, PixelType type, UInt32 bufSize, T0& values);
    [NativeApiAttribute]
public void GetnMinmax(MinmaxTarget target, Boolean reset, PixelFormat format, GLEnum type, UInt32 bufSize, Void* values);
    [NativeApiAttribute]
public void GetnMinmax(MinmaxTarget target, Boolean reset, PixelFormat format, GLEnum type, UInt32 bufSize, T0& values);
    [NativeApiAttribute]
public void GetnMinmax(MinmaxTarget target, Boolean reset, PixelFormat format, PixelType type, UInt32 bufSize, Void* values);
    [NativeApiAttribute]
public void GetnMinmax(MinmaxTarget target, Boolean reset, PixelFormat format, PixelType type, UInt32 bufSize, T0& values);
    [NativeApiAttribute]
public void GetnPixelMap(GLEnum map, UInt32 bufSize, Single* values);
    [NativeApiAttribute]
public void GetnPixelMap(GLEnum map, UInt32 bufSize, Single& values);
    [NativeApiAttribute]
public void GetnPixelMap(PixelMap map, UInt32 bufSize, Single* values);
    [NativeApiAttribute]
public void GetnPixelMap(PixelMap map, UInt32 bufSize, Single& values);
    [NativeApiAttribute]
public void GetnPixelMap(GLEnum map, UInt32 bufSize, UInt32* values);
    [NativeApiAttribute]
public void GetnPixelMap(GLEnum map, UInt32 bufSize, UInt32& values);
    [NativeApiAttribute]
public void GetnPixelMap(PixelMap map, UInt32 bufSize, UInt32* values);
    [NativeApiAttribute]
public void GetnPixelMap(PixelMap map, UInt32 bufSize, UInt32& values);
    [NativeApiAttribute]
public void GetnPixelMap(GLEnum map, UInt32 bufSize, UInt16* values);
    [NativeApiAttribute]
public void GetnPixelMap(GLEnum map, UInt32 bufSize, UInt16& values);
    [NativeApiAttribute]
public void GetnPixelMap(PixelMap map, UInt32 bufSize, UInt16* values);
    [NativeApiAttribute]
public void GetnPixelMap(PixelMap map, UInt32 bufSize, UInt16& values);
    [NativeApiAttribute]
public void GetnPolygonStipple(UInt32 bufSize, Byte* pattern);
    [NativeApiAttribute]
public void GetnPolygonStipple(UInt32 bufSize, Byte& pattern);
    [NativeApiAttribute]
public void GetnPolygonStipple(UInt32 bufSize, String& pattern);
    [NativeApiAttribute]
public void GetnSeparableFilter(GLEnum target, GLEnum format, GLEnum type, UInt32 rowBufSize, Void* row, UInt32 columnBufSize, Void* column, Void* span);
    [NativeApiAttribute]
public void GetnSeparableFilter(GLEnum target, GLEnum format, GLEnum type, UInt32 rowBufSize, Void* row, UInt32 columnBufSize, Void* column, T0& span);
    [NativeApiAttribute]
public void GetnSeparableFilter(GLEnum target, GLEnum format, GLEnum type, UInt32 rowBufSize, Void* row, UInt32 columnBufSize, T0& column, Void* span);
    [NativeApiAttribute]
public void GetnSeparableFilter(GLEnum target, GLEnum format, GLEnum type, UInt32 rowBufSize, Void* row, UInt32 columnBufSize, T0& column, T1& span);
    [NativeApiAttribute]
public void GetnSeparableFilter(GLEnum target, GLEnum format, GLEnum type, UInt32 rowBufSize, T0& row, UInt32 columnBufSize, Void* column, Void* span);
    [NativeApiAttribute]
public void GetnSeparableFilter(GLEnum target, GLEnum format, GLEnum type, UInt32 rowBufSize, T0& row, UInt32 columnBufSize, Void* column, T1& span);
    [NativeApiAttribute]
public void GetnSeparableFilter(GLEnum target, GLEnum format, GLEnum type, UInt32 rowBufSize, T0& row, UInt32 columnBufSize, T1& column, Void* span);
    [NativeApiAttribute]
public void GetnSeparableFilter(GLEnum target, GLEnum format, GLEnum type, UInt32 rowBufSize, T0& row, UInt32 columnBufSize, T1& column, T2& span);
    [NativeApiAttribute]
public void GetnSeparableFilter(GLEnum target, GLEnum format, PixelType type, UInt32 rowBufSize, Void* row, UInt32 columnBufSize, Void* column, Void* span);
    [NativeApiAttribute]
public void GetnSeparableFilter(GLEnum target, GLEnum format, PixelType type, UInt32 rowBufSize, Void* row, UInt32 columnBufSize, Void* column, T0& span);
    [NativeApiAttribute]
public void GetnSeparableFilter(GLEnum target, GLEnum format, PixelType type, UInt32 rowBufSize, Void* row, UInt32 columnBufSize, T0& column, Void* span);
    [NativeApiAttribute]
public void GetnSeparableFilter(GLEnum target, GLEnum format, PixelType type, UInt32 rowBufSize, Void* row, UInt32 columnBufSize, T0& column, T1& span);
    [NativeApiAttribute]
public void GetnSeparableFilter(GLEnum target, GLEnum format, PixelType type, UInt32 rowBufSize, T0& row, UInt32 columnBufSize, Void* column, Void* span);
    [NativeApiAttribute]
public void GetnSeparableFilter(GLEnum target, GLEnum format, PixelType type, UInt32 rowBufSize, T0& row, UInt32 columnBufSize, Void* column, T1& span);
    [NativeApiAttribute]
public void GetnSeparableFilter(GLEnum target, GLEnum format, PixelType type, UInt32 rowBufSize, T0& row, UInt32 columnBufSize, T1& column, Void* span);
    [NativeApiAttribute]
public void GetnSeparableFilter(GLEnum target, GLEnum format, PixelType type, UInt32 rowBufSize, T0& row, UInt32 columnBufSize, T1& column, T2& span);
    [NativeApiAttribute]
public void GetnSeparableFilter(GLEnum target, PixelFormat format, GLEnum type, UInt32 rowBufSize, Void* row, UInt32 columnBufSize, Void* column, Void* span);
    [NativeApiAttribute]
public void GetnSeparableFilter(GLEnum target, PixelFormat format, GLEnum type, UInt32 rowBufSize, Void* row, UInt32 columnBufSize, Void* column, T0& span);
    [NativeApiAttribute]
public void GetnSeparableFilter(GLEnum target, PixelFormat format, GLEnum type, UInt32 rowBufSize, Void* row, UInt32 columnBufSize, T0& column, Void* span);
    [NativeApiAttribute]
public void GetnSeparableFilter(GLEnum target, PixelFormat format, GLEnum type, UInt32 rowBufSize, Void* row, UInt32 columnBufSize, T0& column, T1& span);
    [NativeApiAttribute]
public void GetnSeparableFilter(GLEnum target, PixelFormat format, GLEnum type, UInt32 rowBufSize, T0& row, UInt32 columnBufSize, Void* column, Void* span);
    [NativeApiAttribute]
public void GetnSeparableFilter(GLEnum target, PixelFormat format, GLEnum type, UInt32 rowBufSize, T0& row, UInt32 columnBufSize, Void* column, T1& span);
    [NativeApiAttribute]
public void GetnSeparableFilter(GLEnum target, PixelFormat format, GLEnum type, UInt32 rowBufSize, T0& row, UInt32 columnBufSize, T1& column, Void* span);
    [NativeApiAttribute]
public void GetnSeparableFilter(GLEnum target, PixelFormat format, GLEnum type, UInt32 rowBufSize, T0& row, UInt32 columnBufSize, T1& column, T2& span);
    [NativeApiAttribute]
public void GetnSeparableFilter(GLEnum target, PixelFormat format, PixelType type, UInt32 rowBufSize, Void* row, UInt32 columnBufSize, Void* column, Void* span);
    [NativeApiAttribute]
public void GetnSeparableFilter(GLEnum target, PixelFormat format, PixelType type, UInt32 rowBufSize, Void* row, UInt32 columnBufSize, Void* column, T0& span);
    [NativeApiAttribute]
public void GetnSeparableFilter(GLEnum target, PixelFormat format, PixelType type, UInt32 rowBufSize, Void* row, UInt32 columnBufSize, T0& column, Void* span);
    [NativeApiAttribute]
public void GetnSeparableFilter(GLEnum target, PixelFormat format, PixelType type, UInt32 rowBufSize, Void* row, UInt32 columnBufSize, T0& column, T1& span);
    [NativeApiAttribute]
public void GetnSeparableFilter(GLEnum target, PixelFormat format, PixelType type, UInt32 rowBufSize, T0& row, UInt32 columnBufSize, Void* column, Void* span);
    [NativeApiAttribute]
public void GetnSeparableFilter(GLEnum target, PixelFormat format, PixelType type, UInt32 rowBufSize, T0& row, UInt32 columnBufSize, Void* column, T1& span);
    [NativeApiAttribute]
public void GetnSeparableFilter(GLEnum target, PixelFormat format, PixelType type, UInt32 rowBufSize, T0& row, UInt32 columnBufSize, T1& column, Void* span);
    [NativeApiAttribute]
public void GetnSeparableFilter(GLEnum target, PixelFormat format, PixelType type, UInt32 rowBufSize, T0& row, UInt32 columnBufSize, T1& column, T2& span);
    [NativeApiAttribute]
public void GetnSeparableFilter(SeparableTarget target, GLEnum format, GLEnum type, UInt32 rowBufSize, Void* row, UInt32 columnBufSize, Void* column, Void* span);
    [NativeApiAttribute]
public void GetnSeparableFilter(SeparableTarget target, GLEnum format, GLEnum type, UInt32 rowBufSize, Void* row, UInt32 columnBufSize, Void* column, T0& span);
    [NativeApiAttribute]
public void GetnSeparableFilter(SeparableTarget target, GLEnum format, GLEnum type, UInt32 rowBufSize, Void* row, UInt32 columnBufSize, T0& column, Void* span);
    [NativeApiAttribute]
public void GetnSeparableFilter(SeparableTarget target, GLEnum format, GLEnum type, UInt32 rowBufSize, Void* row, UInt32 columnBufSize, T0& column, T1& span);
    [NativeApiAttribute]
public void GetnSeparableFilter(SeparableTarget target, GLEnum format, GLEnum type, UInt32 rowBufSize, T0& row, UInt32 columnBufSize, Void* column, Void* span);
    [NativeApiAttribute]
public void GetnSeparableFilter(SeparableTarget target, GLEnum format, GLEnum type, UInt32 rowBufSize, T0& row, UInt32 columnBufSize, Void* column, T1& span);
    [NativeApiAttribute]
public void GetnSeparableFilter(SeparableTarget target, GLEnum format, GLEnum type, UInt32 rowBufSize, T0& row, UInt32 columnBufSize, T1& column, Void* span);
    [NativeApiAttribute]
public void GetnSeparableFilter(SeparableTarget target, GLEnum format, GLEnum type, UInt32 rowBufSize, T0& row, UInt32 columnBufSize, T1& column, T2& span);
    [NativeApiAttribute]
public void GetnSeparableFilter(SeparableTarget target, GLEnum format, PixelType type, UInt32 rowBufSize, Void* row, UInt32 columnBufSize, Void* column, Void* span);
    [NativeApiAttribute]
public void GetnSeparableFilter(SeparableTarget target, GLEnum format, PixelType type, UInt32 rowBufSize, Void* row, UInt32 columnBufSize, Void* column, T0& span);
    [NativeApiAttribute]
public void GetnSeparableFilter(SeparableTarget target, GLEnum format, PixelType type, UInt32 rowBufSize, Void* row, UInt32 columnBufSize, T0& column, Void* span);
    [NativeApiAttribute]
public void GetnSeparableFilter(SeparableTarget target, GLEnum format, PixelType type, UInt32 rowBufSize, Void* row, UInt32 columnBufSize, T0& column, T1& span);
    [NativeApiAttribute]
public void GetnSeparableFilter(SeparableTarget target, GLEnum format, PixelType type, UInt32 rowBufSize, T0& row, UInt32 columnBufSize, Void* column, Void* span);
    [NativeApiAttribute]
public void GetnSeparableFilter(SeparableTarget target, GLEnum format, PixelType type, UInt32 rowBufSize, T0& row, UInt32 columnBufSize, Void* column, T1& span);
    [NativeApiAttribute]
public void GetnSeparableFilter(SeparableTarget target, GLEnum format, PixelType type, UInt32 rowBufSize, T0& row, UInt32 columnBufSize, T1& column, Void* span);
    [NativeApiAttribute]
public void GetnSeparableFilter(SeparableTarget target, GLEnum format, PixelType type, UInt32 rowBufSize, T0& row, UInt32 columnBufSize, T1& column, T2& span);
    [NativeApiAttribute]
public void GetnSeparableFilter(SeparableTarget target, PixelFormat format, GLEnum type, UInt32 rowBufSize, Void* row, UInt32 columnBufSize, Void* column, Void* span);
    [NativeApiAttribute]
public void GetnSeparableFilter(SeparableTarget target, PixelFormat format, GLEnum type, UInt32 rowBufSize, Void* row, UInt32 columnBufSize, Void* column, T0& span);
    [NativeApiAttribute]
public void GetnSeparableFilter(SeparableTarget target, PixelFormat format, GLEnum type, UInt32 rowBufSize, Void* row, UInt32 columnBufSize, T0& column, Void* span);
    [NativeApiAttribute]
public void GetnSeparableFilter(SeparableTarget target, PixelFormat format, GLEnum type, UInt32 rowBufSize, Void* row, UInt32 columnBufSize, T0& column, T1& span);
    [NativeApiAttribute]
public void GetnSeparableFilter(SeparableTarget target, PixelFormat format, GLEnum type, UInt32 rowBufSize, T0& row, UInt32 columnBufSize, Void* column, Void* span);
    [NativeApiAttribute]
public void GetnSeparableFilter(SeparableTarget target, PixelFormat format, GLEnum type, UInt32 rowBufSize, T0& row, UInt32 columnBufSize, Void* column, T1& span);
    [NativeApiAttribute]
public void GetnSeparableFilter(SeparableTarget target, PixelFormat format, GLEnum type, UInt32 rowBufSize, T0& row, UInt32 columnBufSize, T1& column, Void* span);
    [NativeApiAttribute]
public void GetnSeparableFilter(SeparableTarget target, PixelFormat format, GLEnum type, UInt32 rowBufSize, T0& row, UInt32 columnBufSize, T1& column, T2& span);
    [NativeApiAttribute]
public void GetnSeparableFilter(SeparableTarget target, PixelFormat format, PixelType type, UInt32 rowBufSize, Void* row, UInt32 columnBufSize, Void* column, Void* span);
    [NativeApiAttribute]
public void GetnSeparableFilter(SeparableTarget target, PixelFormat format, PixelType type, UInt32 rowBufSize, Void* row, UInt32 columnBufSize, Void* column, T0& span);
    [NativeApiAttribute]
public void GetnSeparableFilter(SeparableTarget target, PixelFormat format, PixelType type, UInt32 rowBufSize, Void* row, UInt32 columnBufSize, T0& column, Void* span);
    [NativeApiAttribute]
public void GetnSeparableFilter(SeparableTarget target, PixelFormat format, PixelType type, UInt32 rowBufSize, Void* row, UInt32 columnBufSize, T0& column, T1& span);
    [NativeApiAttribute]
public void GetnSeparableFilter(SeparableTarget target, PixelFormat format, PixelType type, UInt32 rowBufSize, T0& row, UInt32 columnBufSize, Void* column, Void* span);
    [NativeApiAttribute]
public void GetnSeparableFilter(SeparableTarget target, PixelFormat format, PixelType type, UInt32 rowBufSize, T0& row, UInt32 columnBufSize, Void* column, T1& span);
    [NativeApiAttribute]
public void GetnSeparableFilter(SeparableTarget target, PixelFormat format, PixelType type, UInt32 rowBufSize, T0& row, UInt32 columnBufSize, T1& column, Void* span);
    [NativeApiAttribute]
public void GetnSeparableFilter(SeparableTarget target, PixelFormat format, PixelType type, UInt32 rowBufSize, T0& row, UInt32 columnBufSize, T1& column, T2& span);
    [NativeApiAttribute]
public void GetnTexImage(GLEnum target, int level, GLEnum format, GLEnum type, UInt32 bufSize, Void* pixels);
    [NativeApiAttribute]
public void GetnTexImage(GLEnum target, int level, GLEnum format, GLEnum type, UInt32 bufSize, T0& pixels);
    [NativeApiAttribute]
public void GetnTexImage(GLEnum target, int level, GLEnum format, PixelType type, UInt32 bufSize, Void* pixels);
    [NativeApiAttribute]
public void GetnTexImage(GLEnum target, int level, GLEnum format, PixelType type, UInt32 bufSize, T0& pixels);
    [NativeApiAttribute]
public void GetnTexImage(GLEnum target, int level, PixelFormat format, GLEnum type, UInt32 bufSize, Void* pixels);
    [NativeApiAttribute]
public void GetnTexImage(GLEnum target, int level, PixelFormat format, GLEnum type, UInt32 bufSize, T0& pixels);
    [NativeApiAttribute]
public void GetnTexImage(GLEnum target, int level, PixelFormat format, PixelType type, UInt32 bufSize, Void* pixels);
    [NativeApiAttribute]
public void GetnTexImage(GLEnum target, int level, PixelFormat format, PixelType type, UInt32 bufSize, T0& pixels);
    [NativeApiAttribute]
public void GetnTexImage(TextureTarget target, int level, GLEnum format, GLEnum type, UInt32 bufSize, Void* pixels);
    [NativeApiAttribute]
public void GetnTexImage(TextureTarget target, int level, GLEnum format, GLEnum type, UInt32 bufSize, T0& pixels);
    [NativeApiAttribute]
public void GetnTexImage(TextureTarget target, int level, GLEnum format, PixelType type, UInt32 bufSize, Void* pixels);
    [NativeApiAttribute]
public void GetnTexImage(TextureTarget target, int level, GLEnum format, PixelType type, UInt32 bufSize, T0& pixels);
    [NativeApiAttribute]
public void GetnTexImage(TextureTarget target, int level, PixelFormat format, GLEnum type, UInt32 bufSize, Void* pixels);
    [NativeApiAttribute]
public void GetnTexImage(TextureTarget target, int level, PixelFormat format, GLEnum type, UInt32 bufSize, T0& pixels);
    [NativeApiAttribute]
public void GetnTexImage(TextureTarget target, int level, PixelFormat format, PixelType type, UInt32 bufSize, Void* pixels);
    [NativeApiAttribute]
public void GetnTexImage(TextureTarget target, int level, PixelFormat format, PixelType type, UInt32 bufSize, T0& pixels);
    [NativeApiAttribute]
public void GetnUniform(UInt32 program, int location, UInt32 bufSize, Double* params);
    [NativeApiAttribute]
public void GetnUniform(UInt32 program, int location, UInt32 bufSize, Double& params);
    [NativeApiAttribute]
public void GetnUniform(UInt32 program, int location, UInt32 bufSize, Single* params);
    [NativeApiAttribute]
public void GetnUniform(UInt32 program, int location, UInt32 bufSize, Single& params);
    [NativeApiAttribute]
public void GetnUniform(UInt32 program, int location, UInt32 bufSize, Int32* params);
    [NativeApiAttribute]
public void GetnUniform(UInt32 program, int location, UInt32 bufSize, Int32& params);
    [NativeApiAttribute]
public void GetnUniform(UInt32 program, int location, UInt32 bufSize, UInt32* params);
    [NativeApiAttribute]
public void GetnUniform(UInt32 program, int location, UInt32 bufSize, UInt32& params);
    [NativeApiAttribute]
public void GetQueryBufferObject(UInt32 id, UInt32 buffer, GLEnum pname, IntPtr offset);
    [NativeApiAttribute]
public void GetQueryBufferObject(UInt32 id, UInt32 buffer, QueryObjectParameterName pname, IntPtr offset);
    [NativeApiAttribute]
public void GetTextureImage(UInt32 texture, int level, GLEnum format, GLEnum type, UInt32 bufSize, Void* pixels);
    [NativeApiAttribute]
public void GetTextureImage(UInt32 texture, int level, GLEnum format, GLEnum type, UInt32 bufSize, T0& pixels);
    [NativeApiAttribute]
public void GetTextureImage(UInt32 texture, int level, GLEnum format, PixelType type, UInt32 bufSize, Void* pixels);
    [NativeApiAttribute]
public void GetTextureImage(UInt32 texture, int level, GLEnum format, PixelType type, UInt32 bufSize, T0& pixels);
    [NativeApiAttribute]
public void GetTextureImage(UInt32 texture, int level, PixelFormat format, GLEnum type, UInt32 bufSize, Void* pixels);
    [NativeApiAttribute]
public void GetTextureImage(UInt32 texture, int level, PixelFormat format, GLEnum type, UInt32 bufSize, T0& pixels);
    [NativeApiAttribute]
public void GetTextureImage(UInt32 texture, int level, PixelFormat format, PixelType type, UInt32 bufSize, Void* pixels);
    [NativeApiAttribute]
public void GetTextureImage(UInt32 texture, int level, PixelFormat format, PixelType type, UInt32 bufSize, T0& pixels);
    [NativeApiAttribute]
public void GetTextureLevelParameter(UInt32 texture, int level, GLEnum pname, Single* params);
    [NativeApiAttribute]
public void GetTextureLevelParameter(UInt32 texture, int level, GLEnum pname, Single& params);
    [NativeApiAttribute]
public void GetTextureLevelParameter(UInt32 texture, int level, GetTextureParameter pname, Single* params);
    [NativeApiAttribute]
public void GetTextureLevelParameter(UInt32 texture, int level, GetTextureParameter pname, Single& params);
    [NativeApiAttribute]
public void GetTextureLevelParameter(UInt32 texture, int level, GLEnum pname, Int32* params);
    [NativeApiAttribute]
public void GetTextureLevelParameter(UInt32 texture, int level, GLEnum pname, Int32& params);
    [NativeApiAttribute]
public void GetTextureLevelParameter(UInt32 texture, int level, GetTextureParameter pname, Int32* params);
    [NativeApiAttribute]
public void GetTextureLevelParameter(UInt32 texture, int level, GetTextureParameter pname, Int32& params);
    [NativeApiAttribute]
public void GetTextureParameter(UInt32 texture, GLEnum pname, Single* params);
    [NativeApiAttribute]
public void GetTextureParameter(UInt32 texture, GLEnum pname, Single& params);
    [NativeApiAttribute]
public void GetTextureParameter(UInt32 texture, GetTextureParameter pname, Single* params);
    [NativeApiAttribute]
public void GetTextureParameter(UInt32 texture, GetTextureParameter pname, Single& params);
    [NativeApiAttribute]
public void GetTextureParameter(UInt32 texture, GLEnum pname, Int32* params);
    [NativeApiAttribute]
public void GetTextureParameter(UInt32 texture, GLEnum pname, Int32& params);
    [NativeApiAttribute]
public void GetTextureParameter(UInt32 texture, GetTextureParameter pname, Int32* params);
    [NativeApiAttribute]
public void GetTextureParameter(UInt32 texture, GetTextureParameter pname, Int32& params);
    [NativeApiAttribute]
public void GetTextureParameterI(UInt32 texture, GLEnum pname, Int32* params);
    [NativeApiAttribute]
public void GetTextureParameterI(UInt32 texture, GLEnum pname, Int32& params);
    [NativeApiAttribute]
public void GetTextureParameterI(UInt32 texture, GetTextureParameter pname, Int32* params);
    [NativeApiAttribute]
public void GetTextureParameterI(UInt32 texture, GetTextureParameter pname, Int32& params);
    [NativeApiAttribute]
public void GetTextureParameterI(UInt32 texture, GLEnum pname, UInt32* params);
    [NativeApiAttribute]
public void GetTextureParameterI(UInt32 texture, GLEnum pname, UInt32& params);
    [NativeApiAttribute]
public void GetTextureParameterI(UInt32 texture, GetTextureParameter pname, UInt32* params);
    [NativeApiAttribute]
public void GetTextureParameterI(UInt32 texture, GetTextureParameter pname, UInt32& params);
    [NativeApiAttribute]
public void GetTextureSubImage(UInt32 texture, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, GLEnum format, GLEnum type, UInt32 bufSize, Void* pixels);
    [NativeApiAttribute]
public void GetTextureSubImage(UInt32 texture, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, GLEnum format, GLEnum type, UInt32 bufSize, T0& pixels);
    [NativeApiAttribute]
public void GetTextureSubImage(UInt32 texture, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, GLEnum format, PixelType type, UInt32 bufSize, Void* pixels);
    [NativeApiAttribute]
public void GetTextureSubImage(UInt32 texture, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, GLEnum format, PixelType type, UInt32 bufSize, T0& pixels);
    [NativeApiAttribute]
public void GetTextureSubImage(UInt32 texture, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, PixelFormat format, GLEnum type, UInt32 bufSize, Void* pixels);
    [NativeApiAttribute]
public void GetTextureSubImage(UInt32 texture, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, PixelFormat format, GLEnum type, UInt32 bufSize, T0& pixels);
    [NativeApiAttribute]
public void GetTextureSubImage(UInt32 texture, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, PixelFormat format, PixelType type, UInt32 bufSize, Void* pixels);
    [NativeApiAttribute]
public void GetTextureSubImage(UInt32 texture, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, PixelFormat format, PixelType type, UInt32 bufSize, T0& pixels);
    [NativeApiAttribute]
public void GetTransformFeedback(UInt32 xfb, GLEnum pname, Int32* param);
    [NativeApiAttribute]
public void GetTransformFeedback(UInt32 xfb, GLEnum pname, Int32& param);
    [NativeApiAttribute]
public void GetTransformFeedback(UInt32 xfb, TransformFeedbackPName pname, Int32* param);
    [NativeApiAttribute]
public void GetTransformFeedback(UInt32 xfb, TransformFeedbackPName pname, Int32& param);
    [NativeApiAttribute]
public void GetTransformFeedback(UInt32 xfb, GLEnum pname, UInt32 index, Int32* param);
    [NativeApiAttribute]
public void GetTransformFeedback(UInt32 xfb, GLEnum pname, UInt32 index, Int32& param);
    [NativeApiAttribute]
public void GetTransformFeedback(UInt32 xfb, TransformFeedbackPName pname, UInt32 index, Int32* param);
    [NativeApiAttribute]
public void GetTransformFeedback(UInt32 xfb, TransformFeedbackPName pname, UInt32 index, Int32& param);
    [NativeApiAttribute]
public void GetTransformFeedbacki64(UInt32 xfb, GLEnum pname, UInt32 index, Int64* param);
    [NativeApiAttribute]
public void GetTransformFeedbacki64(UInt32 xfb, GLEnum pname, UInt32 index, Int64& param);
    [NativeApiAttribute]
public void GetTransformFeedbacki64(UInt32 xfb, TransformFeedbackPName pname, UInt32 index, Int64* param);
    [NativeApiAttribute]
public void GetTransformFeedbacki64(UInt32 xfb, TransformFeedbackPName pname, UInt32 index, Int64& param);
    [NativeApiAttribute]
public void GetVertexArray(UInt32 vaobj, GLEnum pname, Int32* param);
    [NativeApiAttribute]
public void GetVertexArray(UInt32 vaobj, GLEnum pname, Int32& param);
    [NativeApiAttribute]
public void GetVertexArray(UInt32 vaobj, VertexArrayPName pname, Int32* param);
    [NativeApiAttribute]
public void GetVertexArray(UInt32 vaobj, VertexArrayPName pname, Int32& param);
    [NativeApiAttribute]
public void GetVertexArrayIndexed(UInt32 vaobj, UInt32 index, GLEnum pname, Int32* param);
    [NativeApiAttribute]
public void GetVertexArrayIndexed(UInt32 vaobj, UInt32 index, GLEnum pname, Int32& param);
    [NativeApiAttribute]
public void GetVertexArrayIndexed(UInt32 vaobj, UInt32 index, VertexArrayPName pname, Int32* param);
    [NativeApiAttribute]
public void GetVertexArrayIndexed(UInt32 vaobj, UInt32 index, VertexArrayPName pname, Int32& param);
    [NativeApiAttribute]
public void GetVertexArrayIndexed64(UInt32 vaobj, UInt32 index, GLEnum pname, Int64* param);
    [NativeApiAttribute]
public void GetVertexArrayIndexed64(UInt32 vaobj, UInt32 index, GLEnum pname, Int64& param);
    [NativeApiAttribute]
public void GetVertexArrayIndexed64(UInt32 vaobj, UInt32 index, VertexArrayPName pname, Int64* param);
    [NativeApiAttribute]
public void GetVertexArrayIndexed64(UInt32 vaobj, UInt32 index, VertexArrayPName pname, Int64& param);
    [NativeApiAttribute]
public void InvalidateNamedFramebufferData(UInt32 framebuffer, UInt32 numAttachments, GLEnum* attachments);
    [NativeApiAttribute]
public void InvalidateNamedFramebufferData(UInt32 framebuffer, UInt32 numAttachments, GLEnum& attachments);
    [NativeApiAttribute]
public void InvalidateNamedFramebufferData(UInt32 framebuffer, UInt32 numAttachments, FramebufferAttachment* attachments);
    [NativeApiAttribute]
public void InvalidateNamedFramebufferData(UInt32 framebuffer, UInt32 numAttachments, FramebufferAttachment& attachments);
    [NativeApiAttribute]
public void InvalidateNamedFramebufferSubData(UInt32 framebuffer, UInt32 numAttachments, GLEnum* attachments, int x, int y, UInt32 width, UInt32 height);
    [NativeApiAttribute]
public void InvalidateNamedFramebufferSubData(UInt32 framebuffer, UInt32 numAttachments, GLEnum& attachments, int x, int y, UInt32 width, UInt32 height);
    [NativeApiAttribute]
public void InvalidateNamedFramebufferSubData(UInt32 framebuffer, UInt32 numAttachments, FramebufferAttachment* attachments, int x, int y, UInt32 width, UInt32 height);
    [NativeApiAttribute]
public void InvalidateNamedFramebufferSubData(UInt32 framebuffer, UInt32 numAttachments, FramebufferAttachment& attachments, int x, int y, UInt32 width, UInt32 height);
    [NativeApiAttribute]
public Void* MapNamedBuffer(UInt32 buffer, GLEnum access);
    [NativeApiAttribute]
public Void* MapNamedBuffer(UInt32 buffer, BufferAccessARB access);
    [NativeApiAttribute]
public Void* MapNamedBufferRange(UInt32 buffer, IntPtr offset, UIntPtr length, UInt32 access);
    [NativeApiAttribute]
public Void* MapNamedBufferRange(UInt32 buffer, IntPtr offset, UIntPtr length, MapBufferAccessMask access);
    [NativeApiAttribute]
public void MemoryBarrierByRegion(UInt32 barriers);
    [NativeApiAttribute]
public void MemoryBarrierByRegion(MemoryBarrierMask barriers);
    [NativeApiAttribute]
public void NamedBufferData(UInt32 buffer, UIntPtr size, Void* data, GLEnum usage);
    [NativeApiAttribute]
public void NamedBufferData(UInt32 buffer, UIntPtr size, T0& data, GLEnum usage);
    [NativeApiAttribute]
public void NamedBufferData(UInt32 buffer, UIntPtr size, Void* data, VertexBufferObjectUsage usage);
    [NativeApiAttribute]
public void NamedBufferData(UInt32 buffer, UIntPtr size, T0& data, VertexBufferObjectUsage usage);
    [NativeApiAttribute]
public void NamedBufferStorage(UInt32 buffer, UIntPtr size, Void* data, UInt32 flags);
    [NativeApiAttribute]
public void NamedBufferStorage(UInt32 buffer, UIntPtr size, T0& data, UInt32 flags);
    [NativeApiAttribute]
public void NamedBufferStorage(UInt32 buffer, UIntPtr size, Void* data, BufferStorageMask flags);
    [NativeApiAttribute]
public void NamedBufferStorage(UInt32 buffer, UIntPtr size, T0& data, BufferStorageMask flags);
    [NativeApiAttribute]
public void NamedBufferSubData(UInt32 buffer, IntPtr offset, UIntPtr size, Void* data);
    [NativeApiAttribute]
public void NamedBufferSubData(UInt32 buffer, IntPtr offset, UIntPtr size, T0& data);
    [NativeApiAttribute]
public void NamedFramebufferDrawBuffer(UInt32 framebuffer, GLEnum buf);
    [NativeApiAttribute]
public void NamedFramebufferDrawBuffer(UInt32 framebuffer, ColorBuffer buf);
    [NativeApiAttribute]
public void NamedFramebufferDrawBuffers(UInt32 framebuffer, UInt32 n, GLEnum* bufs);
    [NativeApiAttribute]
public void NamedFramebufferDrawBuffers(UInt32 framebuffer, UInt32 n, GLEnum& bufs);
    [NativeApiAttribute]
public void NamedFramebufferDrawBuffers(UInt32 framebuffer, UInt32 n, ColorBuffer* bufs);
    [NativeApiAttribute]
public void NamedFramebufferDrawBuffers(UInt32 framebuffer, UInt32 n, ColorBuffer& bufs);
    [NativeApiAttribute]
public void NamedFramebufferParameter(UInt32 framebuffer, GLEnum pname, int param);
    [NativeApiAttribute]
public void NamedFramebufferParameter(UInt32 framebuffer, FramebufferParameterName pname, int param);
    [NativeApiAttribute]
public void NamedFramebufferReadBuffer(UInt32 framebuffer, GLEnum src);
    [NativeApiAttribute]
public void NamedFramebufferReadBuffer(UInt32 framebuffer, ColorBuffer src);
    [NativeApiAttribute]
public void NamedFramebufferRenderbuffer(UInt32 framebuffer, GLEnum attachment, GLEnum renderbuffertarget, UInt32 renderbuffer);
    [NativeApiAttribute]
public void NamedFramebufferRenderbuffer(UInt32 framebuffer, GLEnum attachment, RenderbufferTarget renderbuffertarget, UInt32 renderbuffer);
    [NativeApiAttribute]
public void NamedFramebufferRenderbuffer(UInt32 framebuffer, FramebufferAttachment attachment, GLEnum renderbuffertarget, UInt32 renderbuffer);
    [NativeApiAttribute]
public void NamedFramebufferRenderbuffer(UInt32 framebuffer, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, UInt32 renderbuffer);
    [NativeApiAttribute]
public void NamedFramebufferTexture(UInt32 framebuffer, GLEnum attachment, UInt32 texture, int level);
    [NativeApiAttribute]
public void NamedFramebufferTexture(UInt32 framebuffer, FramebufferAttachment attachment, UInt32 texture, int level);
    [NativeApiAttribute]
public void NamedFramebufferTextureLayer(UInt32 framebuffer, GLEnum attachment, UInt32 texture, int level, int layer);
    [NativeApiAttribute]
public void NamedFramebufferTextureLayer(UInt32 framebuffer, FramebufferAttachment attachment, UInt32 texture, int level, int layer);
    [NativeApiAttribute]
public void NamedRenderbufferStorage(UInt32 renderbuffer, GLEnum internalformat, UInt32 width, UInt32 height);
    [NativeApiAttribute]
public void NamedRenderbufferStorage(UInt32 renderbuffer, InternalFormat internalformat, UInt32 width, UInt32 height);
    [NativeApiAttribute]
public void NamedRenderbufferStorageMultisample(UInt32 renderbuffer, UInt32 samples, GLEnum internalformat, UInt32 width, UInt32 height);
    [NativeApiAttribute]
public void NamedRenderbufferStorageMultisample(UInt32 renderbuffer, UInt32 samples, InternalFormat internalformat, UInt32 width, UInt32 height);
    [NativeApiAttribute]
public void ReadnPixels(int x, int y, UInt32 width, UInt32 height, GLEnum format, GLEnum type, UInt32 bufSize, Void* data);
    [NativeApiAttribute]
public void ReadnPixels(int x, int y, UInt32 width, UInt32 height, GLEnum format, GLEnum type, UInt32 bufSize, T0& data);
    [NativeApiAttribute]
public void ReadnPixels(int x, int y, UInt32 width, UInt32 height, GLEnum format, PixelType type, UInt32 bufSize, Void* data);
    [NativeApiAttribute]
public void ReadnPixels(int x, int y, UInt32 width, UInt32 height, GLEnum format, PixelType type, UInt32 bufSize, T0& data);
    [NativeApiAttribute]
public void ReadnPixels(int x, int y, UInt32 width, UInt32 height, PixelFormat format, GLEnum type, UInt32 bufSize, Void* data);
    [NativeApiAttribute]
public void ReadnPixels(int x, int y, UInt32 width, UInt32 height, PixelFormat format, GLEnum type, UInt32 bufSize, T0& data);
    [NativeApiAttribute]
public void ReadnPixels(int x, int y, UInt32 width, UInt32 height, PixelFormat format, PixelType type, UInt32 bufSize, Void* data);
    [NativeApiAttribute]
public void ReadnPixels(int x, int y, UInt32 width, UInt32 height, PixelFormat format, PixelType type, UInt32 bufSize, T0& data);
    [NativeApiAttribute]
public void TextureBarrier();
    [NativeApiAttribute]
public void TextureBuffer(UInt32 texture, GLEnum internalformat, UInt32 buffer);
    [NativeApiAttribute]
public void TextureBuffer(UInt32 texture, SizedInternalFormat internalformat, UInt32 buffer);
    [NativeApiAttribute]
public void TextureBufferRange(UInt32 texture, GLEnum internalformat, UInt32 buffer, IntPtr offset, UIntPtr size);
    [NativeApiAttribute]
public void TextureBufferRange(UInt32 texture, SizedInternalFormat internalformat, UInt32 buffer, IntPtr offset, UIntPtr size);
    [NativeApiAttribute]
public void TextureParameter(UInt32 texture, GLEnum pname, float param);
    [NativeApiAttribute]
public void TextureParameter(UInt32 texture, TextureParameterName pname, float param);
    [NativeApiAttribute]
public void TextureParameter(UInt32 texture, GLEnum pname, Single* param);
    [NativeApiAttribute]
public void TextureParameter(UInt32 texture, GLEnum pname, Single& param);
    [NativeApiAttribute]
public void TextureParameter(UInt32 texture, TextureParameterName pname, Single* param);
    [NativeApiAttribute]
public void TextureParameter(UInt32 texture, TextureParameterName pname, Single& param);
    [NativeApiAttribute]
public void TextureParameter(UInt32 texture, GLEnum pname, int param);
    [NativeApiAttribute]
public void TextureParameter(UInt32 texture, TextureParameterName pname, int param);
    [NativeApiAttribute]
public void TextureParameter(UInt32 texture, GLEnum pname, Int32* param);
    [NativeApiAttribute]
public void TextureParameter(UInt32 texture, GLEnum pname, Int32& param);
    [NativeApiAttribute]
public void TextureParameter(UInt32 texture, TextureParameterName pname, Int32* param);
    [NativeApiAttribute]
public void TextureParameter(UInt32 texture, TextureParameterName pname, Int32& param);
    [NativeApiAttribute]
public void TextureParameterI(UInt32 texture, GLEnum pname, Int32* params);
    [NativeApiAttribute]
public void TextureParameterI(UInt32 texture, GLEnum pname, Int32& params);
    [NativeApiAttribute]
public void TextureParameterI(UInt32 texture, TextureParameterName pname, Int32* params);
    [NativeApiAttribute]
public void TextureParameterI(UInt32 texture, TextureParameterName pname, Int32& params);
    [NativeApiAttribute]
public void TextureParameterI(UInt32 texture, GLEnum pname, UInt32* params);
    [NativeApiAttribute]
public void TextureParameterI(UInt32 texture, GLEnum pname, UInt32& params);
    [NativeApiAttribute]
public void TextureParameterI(UInt32 texture, TextureParameterName pname, UInt32* params);
    [NativeApiAttribute]
public void TextureParameterI(UInt32 texture, TextureParameterName pname, UInt32& params);
    [NativeApiAttribute]
public void TextureStorage1D(UInt32 texture, UInt32 levels, GLEnum internalformat, UInt32 width);
    [NativeApiAttribute]
public void TextureStorage1D(UInt32 texture, UInt32 levels, SizedInternalFormat internalformat, UInt32 width);
    [NativeApiAttribute]
public void TextureStorage2D(UInt32 texture, UInt32 levels, GLEnum internalformat, UInt32 width, UInt32 height);
    [NativeApiAttribute]
public void TextureStorage2D(UInt32 texture, UInt32 levels, SizedInternalFormat internalformat, UInt32 width, UInt32 height);
    [NativeApiAttribute]
public void TextureStorage2DMultisample(UInt32 texture, UInt32 samples, GLEnum internalformat, UInt32 width, UInt32 height, bool fixedsamplelocations);
    [NativeApiAttribute]
public void TextureStorage2DMultisample(UInt32 texture, UInt32 samples, GLEnum internalformat, UInt32 width, UInt32 height, Boolean fixedsamplelocations);
    [NativeApiAttribute]
public void TextureStorage2DMultisample(UInt32 texture, UInt32 samples, SizedInternalFormat internalformat, UInt32 width, UInt32 height, bool fixedsamplelocations);
    [NativeApiAttribute]
public void TextureStorage2DMultisample(UInt32 texture, UInt32 samples, SizedInternalFormat internalformat, UInt32 width, UInt32 height, Boolean fixedsamplelocations);
    [NativeApiAttribute]
public void TextureStorage3D(UInt32 texture, UInt32 levels, GLEnum internalformat, UInt32 width, UInt32 height, UInt32 depth);
    [NativeApiAttribute]
public void TextureStorage3D(UInt32 texture, UInt32 levels, SizedInternalFormat internalformat, UInt32 width, UInt32 height, UInt32 depth);
    [NativeApiAttribute]
public void TextureStorage3DMultisample(UInt32 texture, UInt32 samples, GLEnum internalformat, UInt32 width, UInt32 height, UInt32 depth, bool fixedsamplelocations);
    [NativeApiAttribute]
public void TextureStorage3DMultisample(UInt32 texture, UInt32 samples, GLEnum internalformat, UInt32 width, UInt32 height, UInt32 depth, Boolean fixedsamplelocations);
    [NativeApiAttribute]
public void TextureStorage3DMultisample(UInt32 texture, UInt32 samples, SizedInternalFormat internalformat, UInt32 width, UInt32 height, UInt32 depth, bool fixedsamplelocations);
    [NativeApiAttribute]
public void TextureStorage3DMultisample(UInt32 texture, UInt32 samples, SizedInternalFormat internalformat, UInt32 width, UInt32 height, UInt32 depth, Boolean fixedsamplelocations);
    [NativeApiAttribute]
public void TextureSubImage1D(UInt32 texture, int level, int xoffset, UInt32 width, GLEnum format, GLEnum type, Void* pixels);
    [NativeApiAttribute]
public void TextureSubImage1D(UInt32 texture, int level, int xoffset, UInt32 width, GLEnum format, GLEnum type, T0& pixels);
    [NativeApiAttribute]
public void TextureSubImage1D(UInt32 texture, int level, int xoffset, UInt32 width, GLEnum format, PixelType type, Void* pixels);
    [NativeApiAttribute]
public void TextureSubImage1D(UInt32 texture, int level, int xoffset, UInt32 width, GLEnum format, PixelType type, T0& pixels);
    [NativeApiAttribute]
public void TextureSubImage1D(UInt32 texture, int level, int xoffset, UInt32 width, PixelFormat format, GLEnum type, Void* pixels);
    [NativeApiAttribute]
public void TextureSubImage1D(UInt32 texture, int level, int xoffset, UInt32 width, PixelFormat format, GLEnum type, T0& pixels);
    [NativeApiAttribute]
public void TextureSubImage1D(UInt32 texture, int level, int xoffset, UInt32 width, PixelFormat format, PixelType type, Void* pixels);
    [NativeApiAttribute]
public void TextureSubImage1D(UInt32 texture, int level, int xoffset, UInt32 width, PixelFormat format, PixelType type, T0& pixels);
    [NativeApiAttribute]
public void TextureSubImage2D(UInt32 texture, int level, int xoffset, int yoffset, UInt32 width, UInt32 height, GLEnum format, GLEnum type, Void* pixels);
    [NativeApiAttribute]
public void TextureSubImage2D(UInt32 texture, int level, int xoffset, int yoffset, UInt32 width, UInt32 height, GLEnum format, GLEnum type, T0& pixels);
    [NativeApiAttribute]
public void TextureSubImage2D(UInt32 texture, int level, int xoffset, int yoffset, UInt32 width, UInt32 height, GLEnum format, PixelType type, Void* pixels);
    [NativeApiAttribute]
public void TextureSubImage2D(UInt32 texture, int level, int xoffset, int yoffset, UInt32 width, UInt32 height, GLEnum format, PixelType type, T0& pixels);
    [NativeApiAttribute]
public void TextureSubImage2D(UInt32 texture, int level, int xoffset, int yoffset, UInt32 width, UInt32 height, PixelFormat format, GLEnum type, Void* pixels);
    [NativeApiAttribute]
public void TextureSubImage2D(UInt32 texture, int level, int xoffset, int yoffset, UInt32 width, UInt32 height, PixelFormat format, GLEnum type, T0& pixels);
    [NativeApiAttribute]
public void TextureSubImage2D(UInt32 texture, int level, int xoffset, int yoffset, UInt32 width, UInt32 height, PixelFormat format, PixelType type, Void* pixels);
    [NativeApiAttribute]
public void TextureSubImage2D(UInt32 texture, int level, int xoffset, int yoffset, UInt32 width, UInt32 height, PixelFormat format, PixelType type, T0& pixels);
    [NativeApiAttribute]
public void TextureSubImage3D(UInt32 texture, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, GLEnum format, GLEnum type, Void* pixels);
    [NativeApiAttribute]
public void TextureSubImage3D(UInt32 texture, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, GLEnum format, GLEnum type, T0& pixels);
    [NativeApiAttribute]
public void TextureSubImage3D(UInt32 texture, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, GLEnum format, PixelType type, Void* pixels);
    [NativeApiAttribute]
public void TextureSubImage3D(UInt32 texture, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, GLEnum format, PixelType type, T0& pixels);
    [NativeApiAttribute]
public void TextureSubImage3D(UInt32 texture, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, PixelFormat format, GLEnum type, Void* pixels);
    [NativeApiAttribute]
public void TextureSubImage3D(UInt32 texture, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, PixelFormat format, GLEnum type, T0& pixels);
    [NativeApiAttribute]
public void TextureSubImage3D(UInt32 texture, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, PixelFormat format, PixelType type, Void* pixels);
    [NativeApiAttribute]
public void TextureSubImage3D(UInt32 texture, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, PixelFormat format, PixelType type, T0& pixels);
    [NativeApiAttribute]
public void TransformFeedbackBufferBase(UInt32 xfb, UInt32 index, UInt32 buffer);
    [NativeApiAttribute]
public void TransformFeedbackBufferRange(UInt32 xfb, UInt32 index, UInt32 buffer, IntPtr offset, UIntPtr size);
    [NativeApiAttribute]
public bool UnmapNamedBuffer(UInt32 buffer);
    [NativeApiAttribute]
public void VertexArrayAttribBinding(UInt32 vaobj, UInt32 attribindex, UInt32 bindingindex);
    [NativeApiAttribute]
public void VertexArrayAttribFormat(UInt32 vaobj, UInt32 attribindex, int size, GLEnum type, bool normalized, UInt32 relativeoffset);
    [NativeApiAttribute]
public void VertexArrayAttribFormat(UInt32 vaobj, UInt32 attribindex, int size, GLEnum type, Boolean normalized, UInt32 relativeoffset);
    [NativeApiAttribute]
public void VertexArrayAttribFormat(UInt32 vaobj, UInt32 attribindex, int size, VertexAttribType type, bool normalized, UInt32 relativeoffset);
    [NativeApiAttribute]
public void VertexArrayAttribFormat(UInt32 vaobj, UInt32 attribindex, int size, VertexAttribType type, Boolean normalized, UInt32 relativeoffset);
    [NativeApiAttribute]
public void VertexArrayAttribIFormat(UInt32 vaobj, UInt32 attribindex, int size, GLEnum type, UInt32 relativeoffset);
    [NativeApiAttribute]
public void VertexArrayAttribIFormat(UInt32 vaobj, UInt32 attribindex, int size, VertexAttribIType type, UInt32 relativeoffset);
    [NativeApiAttribute]
public void VertexArrayAttribLFormat(UInt32 vaobj, UInt32 attribindex, int size, GLEnum type, UInt32 relativeoffset);
    [NativeApiAttribute]
public void VertexArrayAttribLFormat(UInt32 vaobj, UInt32 attribindex, int size, VertexAttribLType type, UInt32 relativeoffset);
    [NativeApiAttribute]
public void VertexArrayBindingDivisor(UInt32 vaobj, UInt32 bindingindex, UInt32 divisor);
    [NativeApiAttribute]
public void VertexArrayElementBuffer(UInt32 vaobj, UInt32 buffer);
    [NativeApiAttribute]
public void VertexArrayVertexBuffer(UInt32 vaobj, UInt32 bindingindex, UInt32 buffer, IntPtr offset, UInt32 stride);
    [NativeApiAttribute]
public void VertexArrayVertexBuffers(UInt32 vaobj, UInt32 first, UInt32 count, UInt32* buffers, IntPtr* offsets, UInt32* strides);
    [NativeApiAttribute]
public void VertexArrayVertexBuffers(UInt32 vaobj, UInt32 first, UInt32 count, UInt32* buffers, IntPtr* offsets, UInt32& strides);
    [NativeApiAttribute]
public void VertexArrayVertexBuffers(UInt32 vaobj, UInt32 first, UInt32 count, UInt32* buffers, IntPtr& offsets, UInt32* strides);
    [NativeApiAttribute]
public void VertexArrayVertexBuffers(UInt32 vaobj, UInt32 first, UInt32 count, UInt32* buffers, IntPtr& offsets, UInt32& strides);
    [NativeApiAttribute]
public void VertexArrayVertexBuffers(UInt32 vaobj, UInt32 first, UInt32 count, UInt32& buffers, IntPtr* offsets, UInt32* strides);
    [NativeApiAttribute]
public void VertexArrayVertexBuffers(UInt32 vaobj, UInt32 first, UInt32 count, UInt32& buffers, IntPtr* offsets, UInt32& strides);
    [NativeApiAttribute]
public void VertexArrayVertexBuffers(UInt32 vaobj, UInt32 first, UInt32 count, UInt32& buffers, IntPtr& offsets, UInt32* strides);
    [NativeApiAttribute]
public void VertexArrayVertexBuffers(UInt32 vaobj, UInt32 first, UInt32 count, UInt32& buffers, IntPtr& offsets, UInt32& strides);
    [NativeApiAttribute]
public void VertexArrayVertexBuffers(UInt32 vaobj, UInt32 first, UInt32 count, Buffer* buffers, IntPtr* offsets, UInt32* strides);
    [NativeApiAttribute]
public void VertexArrayVertexBuffers(UInt32 vaobj, UInt32 first, UInt32 count, Buffer* buffers, IntPtr* offsets, UInt32& strides);
    [NativeApiAttribute]
public void VertexArrayVertexBuffers(UInt32 vaobj, UInt32 first, UInt32 count, Buffer* buffers, IntPtr& offsets, UInt32* strides);
    [NativeApiAttribute]
public void VertexArrayVertexBuffers(UInt32 vaobj, UInt32 first, UInt32 count, Buffer* buffers, IntPtr& offsets, UInt32& strides);
    [NativeApiAttribute]
public void VertexArrayVertexBuffers(UInt32 vaobj, UInt32 first, UInt32 count, Buffer& buffers, IntPtr* offsets, UInt32* strides);
    [NativeApiAttribute]
public void VertexArrayVertexBuffers(UInt32 vaobj, UInt32 first, UInt32 count, Buffer& buffers, IntPtr* offsets, UInt32& strides);
    [NativeApiAttribute]
public void VertexArrayVertexBuffers(UInt32 vaobj, UInt32 first, UInt32 count, Buffer& buffers, IntPtr& offsets, UInt32* strides);
    [NativeApiAttribute]
public void VertexArrayVertexBuffers(UInt32 vaobj, UInt32 first, UInt32 count, Buffer& buffers, IntPtr& offsets, UInt32& strides);
    [NativeApiAttribute]
public void BindBuffersBase(GLEnum target, UInt32 first, UInt32 count, UInt32* buffers);
    [NativeApiAttribute]
public void BindBuffersBase(GLEnum target, UInt32 first, UInt32 count, UInt32& buffers);
    [NativeApiAttribute]
public void BindBuffersBase(GLEnum target, UInt32 first, UInt32 count, Buffer* buffers);
    [NativeApiAttribute]
public void BindBuffersBase(GLEnum target, UInt32 first, UInt32 count, Buffer& buffers);
    [NativeApiAttribute]
public void BindBuffersBase(BufferTargetARB target, UInt32 first, UInt32 count, UInt32* buffers);
    [NativeApiAttribute]
public void BindBuffersBase(BufferTargetARB target, UInt32 first, UInt32 count, UInt32& buffers);
    [NativeApiAttribute]
public void BindBuffersBase(BufferTargetARB target, UInt32 first, UInt32 count, Buffer* buffers);
    [NativeApiAttribute]
public void BindBuffersBase(BufferTargetARB target, UInt32 first, UInt32 count, Buffer& buffers);
    [NativeApiAttribute]
public void BindBuffersRange(GLEnum target, UInt32 first, UInt32 count, UInt32* buffers, IntPtr* offsets, UIntPtr* sizes);
    [NativeApiAttribute]
public void BindBuffersRange(GLEnum target, UInt32 first, UInt32 count, UInt32* buffers, IntPtr* offsets, UIntPtr& sizes);
    [NativeApiAttribute]
public void BindBuffersRange(GLEnum target, UInt32 first, UInt32 count, UInt32* buffers, IntPtr& offsets, UIntPtr* sizes);
    [NativeApiAttribute]
public void BindBuffersRange(GLEnum target, UInt32 first, UInt32 count, UInt32* buffers, IntPtr& offsets, UIntPtr& sizes);
    [NativeApiAttribute]
public void BindBuffersRange(GLEnum target, UInt32 first, UInt32 count, UInt32& buffers, IntPtr* offsets, UIntPtr* sizes);
    [NativeApiAttribute]
public void BindBuffersRange(GLEnum target, UInt32 first, UInt32 count, UInt32& buffers, IntPtr* offsets, UIntPtr& sizes);
    [NativeApiAttribute]
public void BindBuffersRange(GLEnum target, UInt32 first, UInt32 count, UInt32& buffers, IntPtr& offsets, UIntPtr* sizes);
    [NativeApiAttribute]
public void BindBuffersRange(GLEnum target, UInt32 first, UInt32 count, UInt32& buffers, IntPtr& offsets, UIntPtr& sizes);
    [NativeApiAttribute]
public void BindBuffersRange(GLEnum target, UInt32 first, UInt32 count, Buffer* buffers, IntPtr* offsets, UIntPtr* sizes);
    [NativeApiAttribute]
public void BindBuffersRange(GLEnum target, UInt32 first, UInt32 count, Buffer* buffers, IntPtr* offsets, UIntPtr& sizes);
    [NativeApiAttribute]
public void BindBuffersRange(GLEnum target, UInt32 first, UInt32 count, Buffer* buffers, IntPtr& offsets, UIntPtr* sizes);
    [NativeApiAttribute]
public void BindBuffersRange(GLEnum target, UInt32 first, UInt32 count, Buffer* buffers, IntPtr& offsets, UIntPtr& sizes);
    [NativeApiAttribute]
public void BindBuffersRange(GLEnum target, UInt32 first, UInt32 count, Buffer& buffers, IntPtr* offsets, UIntPtr* sizes);
    [NativeApiAttribute]
public void BindBuffersRange(GLEnum target, UInt32 first, UInt32 count, Buffer& buffers, IntPtr* offsets, UIntPtr& sizes);
    [NativeApiAttribute]
public void BindBuffersRange(GLEnum target, UInt32 first, UInt32 count, Buffer& buffers, IntPtr& offsets, UIntPtr* sizes);
    [NativeApiAttribute]
public void BindBuffersRange(GLEnum target, UInt32 first, UInt32 count, Buffer& buffers, IntPtr& offsets, UIntPtr& sizes);
    [NativeApiAttribute]
public void BindBuffersRange(BufferTargetARB target, UInt32 first, UInt32 count, UInt32* buffers, IntPtr* offsets, UIntPtr* sizes);
    [NativeApiAttribute]
public void BindBuffersRange(BufferTargetARB target, UInt32 first, UInt32 count, UInt32* buffers, IntPtr* offsets, UIntPtr& sizes);
    [NativeApiAttribute]
public void BindBuffersRange(BufferTargetARB target, UInt32 first, UInt32 count, UInt32* buffers, IntPtr& offsets, UIntPtr* sizes);
    [NativeApiAttribute]
public void BindBuffersRange(BufferTargetARB target, UInt32 first, UInt32 count, UInt32* buffers, IntPtr& offsets, UIntPtr& sizes);
    [NativeApiAttribute]
public void BindBuffersRange(BufferTargetARB target, UInt32 first, UInt32 count, UInt32& buffers, IntPtr* offsets, UIntPtr* sizes);
    [NativeApiAttribute]
public void BindBuffersRange(BufferTargetARB target, UInt32 first, UInt32 count, UInt32& buffers, IntPtr* offsets, UIntPtr& sizes);
    [NativeApiAttribute]
public void BindBuffersRange(BufferTargetARB target, UInt32 first, UInt32 count, UInt32& buffers, IntPtr& offsets, UIntPtr* sizes);
    [NativeApiAttribute]
public void BindBuffersRange(BufferTargetARB target, UInt32 first, UInt32 count, UInt32& buffers, IntPtr& offsets, UIntPtr& sizes);
    [NativeApiAttribute]
public void BindBuffersRange(BufferTargetARB target, UInt32 first, UInt32 count, Buffer* buffers, IntPtr* offsets, UIntPtr* sizes);
    [NativeApiAttribute]
public void BindBuffersRange(BufferTargetARB target, UInt32 first, UInt32 count, Buffer* buffers, IntPtr* offsets, UIntPtr& sizes);
    [NativeApiAttribute]
public void BindBuffersRange(BufferTargetARB target, UInt32 first, UInt32 count, Buffer* buffers, IntPtr& offsets, UIntPtr* sizes);
    [NativeApiAttribute]
public void BindBuffersRange(BufferTargetARB target, UInt32 first, UInt32 count, Buffer* buffers, IntPtr& offsets, UIntPtr& sizes);
    [NativeApiAttribute]
public void BindBuffersRange(BufferTargetARB target, UInt32 first, UInt32 count, Buffer& buffers, IntPtr* offsets, UIntPtr* sizes);
    [NativeApiAttribute]
public void BindBuffersRange(BufferTargetARB target, UInt32 first, UInt32 count, Buffer& buffers, IntPtr* offsets, UIntPtr& sizes);
    [NativeApiAttribute]
public void BindBuffersRange(BufferTargetARB target, UInt32 first, UInt32 count, Buffer& buffers, IntPtr& offsets, UIntPtr* sizes);
    [NativeApiAttribute]
public void BindBuffersRange(BufferTargetARB target, UInt32 first, UInt32 count, Buffer& buffers, IntPtr& offsets, UIntPtr& sizes);
    [NativeApiAttribute]
public void BindImageTextures(UInt32 first, UInt32 count, UInt32* textures);
    [NativeApiAttribute]
public void BindImageTextures(UInt32 first, UInt32 count, UInt32& textures);
    [NativeApiAttribute]
public void BindImageTextures(UInt32 first, UInt32 count, Texture* textures);
    [NativeApiAttribute]
public void BindImageTextures(UInt32 first, UInt32 count, Texture& textures);
    [NativeApiAttribute]
public void BindSamplers(UInt32 first, UInt32 count, UInt32* samplers);
    [NativeApiAttribute]
public void BindSamplers(UInt32 first, UInt32 count, UInt32& samplers);
    [NativeApiAttribute]
public void BindSamplers(UInt32 first, UInt32 count, Sampler* samplers);
    [NativeApiAttribute]
public void BindSamplers(UInt32 first, UInt32 count, Sampler& samplers);
    [NativeApiAttribute]
public void BindTextures(UInt32 first, UInt32 count, UInt32* textures);
    [NativeApiAttribute]
public void BindTextures(UInt32 first, UInt32 count, UInt32& textures);
    [NativeApiAttribute]
public void BindTextures(UInt32 first, UInt32 count, Texture* textures);
    [NativeApiAttribute]
public void BindTextures(UInt32 first, UInt32 count, Texture& textures);
    [NativeApiAttribute]
public void BindVertexBuffers(UInt32 first, UInt32 count, UInt32* buffers, IntPtr* offsets, UInt32* strides);
    [NativeApiAttribute]
public void BindVertexBuffers(UInt32 first, UInt32 count, UInt32* buffers, IntPtr* offsets, UInt32& strides);
    [NativeApiAttribute]
public void BindVertexBuffers(UInt32 first, UInt32 count, UInt32* buffers, IntPtr& offsets, UInt32* strides);
    [NativeApiAttribute]
public void BindVertexBuffers(UInt32 first, UInt32 count, UInt32* buffers, IntPtr& offsets, UInt32& strides);
    [NativeApiAttribute]
public void BindVertexBuffers(UInt32 first, UInt32 count, UInt32& buffers, IntPtr* offsets, UInt32* strides);
    [NativeApiAttribute]
public void BindVertexBuffers(UInt32 first, UInt32 count, UInt32& buffers, IntPtr* offsets, UInt32& strides);
    [NativeApiAttribute]
public void BindVertexBuffers(UInt32 first, UInt32 count, UInt32& buffers, IntPtr& offsets, UInt32* strides);
    [NativeApiAttribute]
public void BindVertexBuffers(UInt32 first, UInt32 count, UInt32& buffers, IntPtr& offsets, UInt32& strides);
    [NativeApiAttribute]
public void BindVertexBuffers(UInt32 first, UInt32 count, Buffer* buffers, IntPtr* offsets, UInt32* strides);
    [NativeApiAttribute]
public void BindVertexBuffers(UInt32 first, UInt32 count, Buffer* buffers, IntPtr* offsets, UInt32& strides);
    [NativeApiAttribute]
public void BindVertexBuffers(UInt32 first, UInt32 count, Buffer* buffers, IntPtr& offsets, UInt32* strides);
    [NativeApiAttribute]
public void BindVertexBuffers(UInt32 first, UInt32 count, Buffer* buffers, IntPtr& offsets, UInt32& strides);
    [NativeApiAttribute]
public void BindVertexBuffers(UInt32 first, UInt32 count, Buffer& buffers, IntPtr* offsets, UInt32* strides);
    [NativeApiAttribute]
public void BindVertexBuffers(UInt32 first, UInt32 count, Buffer& buffers, IntPtr* offsets, UInt32& strides);
    [NativeApiAttribute]
public void BindVertexBuffers(UInt32 first, UInt32 count, Buffer& buffers, IntPtr& offsets, UInt32* strides);
    [NativeApiAttribute]
public void BindVertexBuffers(UInt32 first, UInt32 count, Buffer& buffers, IntPtr& offsets, UInt32& strides);
    [NativeApiAttribute]
public void BufferStorage(GLEnum target, UIntPtr size, Void* data, UInt32 flags);
    [NativeApiAttribute]
public void BufferStorage(GLEnum target, UIntPtr size, T0& data, UInt32 flags);
    [NativeApiAttribute]
public void BufferStorage(GLEnum target, UIntPtr size, Void* data, BufferStorageMask flags);
    [NativeApiAttribute]
public void BufferStorage(GLEnum target, UIntPtr size, T0& data, BufferStorageMask flags);
    [NativeApiAttribute]
public void BufferStorage(BufferStorageTarget target, UIntPtr size, Void* data, UInt32 flags);
    [NativeApiAttribute]
public void BufferStorage(BufferStorageTarget target, UIntPtr size, T0& data, UInt32 flags);
    [NativeApiAttribute]
public void BufferStorage(BufferStorageTarget target, UIntPtr size, Void* data, BufferStorageMask flags);
    [NativeApiAttribute]
public void BufferStorage(BufferStorageTarget target, UIntPtr size, T0& data, BufferStorageMask flags);
    [NativeApiAttribute]
public void ClearTexImage(UInt32 texture, int level, GLEnum format, GLEnum type, Void* data);
    [NativeApiAttribute]
public void ClearTexImage(UInt32 texture, int level, GLEnum format, GLEnum type, T0& data);
    [NativeApiAttribute]
public void ClearTexImage(UInt32 texture, int level, GLEnum format, PixelType type, Void* data);
    [NativeApiAttribute]
public void ClearTexImage(UInt32 texture, int level, GLEnum format, PixelType type, T0& data);
    [NativeApiAttribute]
public void ClearTexImage(UInt32 texture, int level, PixelFormat format, GLEnum type, Void* data);
    [NativeApiAttribute]
public void ClearTexImage(UInt32 texture, int level, PixelFormat format, GLEnum type, T0& data);
    [NativeApiAttribute]
public void ClearTexImage(UInt32 texture, int level, PixelFormat format, PixelType type, Void* data);
    [NativeApiAttribute]
public void ClearTexImage(UInt32 texture, int level, PixelFormat format, PixelType type, T0& data);
    [NativeApiAttribute]
public void ClearTexSubImage(UInt32 texture, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, GLEnum format, GLEnum type, Void* data);
    [NativeApiAttribute]
public void ClearTexSubImage(UInt32 texture, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, GLEnum format, GLEnum type, T0& data);
    [NativeApiAttribute]
public void ClearTexSubImage(UInt32 texture, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, GLEnum format, PixelType type, Void* data);
    [NativeApiAttribute]
public void ClearTexSubImage(UInt32 texture, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, GLEnum format, PixelType type, T0& data);
    [NativeApiAttribute]
public void ClearTexSubImage(UInt32 texture, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, PixelFormat format, GLEnum type, Void* data);
    [NativeApiAttribute]
public void ClearTexSubImage(UInt32 texture, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, PixelFormat format, GLEnum type, T0& data);
    [NativeApiAttribute]
public void ClearTexSubImage(UInt32 texture, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, PixelFormat format, PixelType type, Void* data);
    [NativeApiAttribute]
public void ClearTexSubImage(UInt32 texture, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, PixelFormat format, PixelType type, T0& data);
    [NativeApiAttribute]
public void BindVertexBuffer(UInt32 bindingindex, UInt32 buffer, IntPtr offset, UInt32 stride);
    [NativeApiAttribute]
public void ClearBufferData(GLEnum target, GLEnum internalformat, GLEnum format, GLEnum type, Void* data);
    [NativeApiAttribute]
public void ClearBufferData(GLEnum target, GLEnum internalformat, GLEnum format, GLEnum type, T0& data);
    [NativeApiAttribute]
public void ClearBufferData(GLEnum target, GLEnum internalformat, GLEnum format, PixelType type, Void* data);
    [NativeApiAttribute]
public void ClearBufferData(GLEnum target, GLEnum internalformat, GLEnum format, PixelType type, T0& data);
    [NativeApiAttribute]
public void ClearBufferData(GLEnum target, GLEnum internalformat, PixelFormat format, GLEnum type, Void* data);
    [NativeApiAttribute]
public void ClearBufferData(GLEnum target, GLEnum internalformat, PixelFormat format, GLEnum type, T0& data);
    [NativeApiAttribute]
public void ClearBufferData(GLEnum target, GLEnum internalformat, PixelFormat format, PixelType type, Void* data);
    [NativeApiAttribute]
public void ClearBufferData(GLEnum target, GLEnum internalformat, PixelFormat format, PixelType type, T0& data);
    [NativeApiAttribute]
public void ClearBufferData(GLEnum target, SizedInternalFormat internalformat, GLEnum format, GLEnum type, Void* data);
    [NativeApiAttribute]
public void ClearBufferData(GLEnum target, SizedInternalFormat internalformat, GLEnum format, GLEnum type, T0& data);
    [NativeApiAttribute]
public void ClearBufferData(GLEnum target, SizedInternalFormat internalformat, GLEnum format, PixelType type, Void* data);
    [NativeApiAttribute]
public void ClearBufferData(GLEnum target, SizedInternalFormat internalformat, GLEnum format, PixelType type, T0& data);
    [NativeApiAttribute]
public void ClearBufferData(GLEnum target, SizedInternalFormat internalformat, PixelFormat format, GLEnum type, Void* data);
    [NativeApiAttribute]
public void ClearBufferData(GLEnum target, SizedInternalFormat internalformat, PixelFormat format, GLEnum type, T0& data);
    [NativeApiAttribute]
public void ClearBufferData(GLEnum target, SizedInternalFormat internalformat, PixelFormat format, PixelType type, Void* data);
    [NativeApiAttribute]
public void ClearBufferData(GLEnum target, SizedInternalFormat internalformat, PixelFormat format, PixelType type, T0& data);
    [NativeApiAttribute]
public void ClearBufferData(BufferStorageTarget target, GLEnum internalformat, GLEnum format, GLEnum type, Void* data);
    [NativeApiAttribute]
public void ClearBufferData(BufferStorageTarget target, GLEnum internalformat, GLEnum format, GLEnum type, T0& data);
    [NativeApiAttribute]
public void ClearBufferData(BufferStorageTarget target, GLEnum internalformat, GLEnum format, PixelType type, Void* data);
    [NativeApiAttribute]
public void ClearBufferData(BufferStorageTarget target, GLEnum internalformat, GLEnum format, PixelType type, T0& data);
    [NativeApiAttribute]
public void ClearBufferData(BufferStorageTarget target, GLEnum internalformat, PixelFormat format, GLEnum type, Void* data);
    [NativeApiAttribute]
public void ClearBufferData(BufferStorageTarget target, GLEnum internalformat, PixelFormat format, GLEnum type, T0& data);
    [NativeApiAttribute]
public void ClearBufferData(BufferStorageTarget target, GLEnum internalformat, PixelFormat format, PixelType type, Void* data);
    [NativeApiAttribute]
public void ClearBufferData(BufferStorageTarget target, GLEnum internalformat, PixelFormat format, PixelType type, T0& data);
    [NativeApiAttribute]
public void ClearBufferData(BufferStorageTarget target, SizedInternalFormat internalformat, GLEnum format, GLEnum type, Void* data);
    [NativeApiAttribute]
public void ClearBufferData(BufferStorageTarget target, SizedInternalFormat internalformat, GLEnum format, GLEnum type, T0& data);
    [NativeApiAttribute]
public void ClearBufferData(BufferStorageTarget target, SizedInternalFormat internalformat, GLEnum format, PixelType type, Void* data);
    [NativeApiAttribute]
public void ClearBufferData(BufferStorageTarget target, SizedInternalFormat internalformat, GLEnum format, PixelType type, T0& data);
    [NativeApiAttribute]
public void ClearBufferData(BufferStorageTarget target, SizedInternalFormat internalformat, PixelFormat format, GLEnum type, Void* data);
    [NativeApiAttribute]
public void ClearBufferData(BufferStorageTarget target, SizedInternalFormat internalformat, PixelFormat format, GLEnum type, T0& data);
    [NativeApiAttribute]
public void ClearBufferData(BufferStorageTarget target, SizedInternalFormat internalformat, PixelFormat format, PixelType type, Void* data);
    [NativeApiAttribute]
public void ClearBufferData(BufferStorageTarget target, SizedInternalFormat internalformat, PixelFormat format, PixelType type, T0& data);
    [NativeApiAttribute]
public void ClearBufferSubData(GLEnum target, GLEnum internalformat, IntPtr offset, UIntPtr size, GLEnum format, GLEnum type, Void* data);
    [NativeApiAttribute]
public void ClearBufferSubData(GLEnum target, GLEnum internalformat, IntPtr offset, UIntPtr size, GLEnum format, GLEnum type, T0& data);
    [NativeApiAttribute]
public void ClearBufferSubData(GLEnum target, GLEnum internalformat, IntPtr offset, UIntPtr size, GLEnum format, PixelType type, Void* data);
    [NativeApiAttribute]
public void ClearBufferSubData(GLEnum target, GLEnum internalformat, IntPtr offset, UIntPtr size, GLEnum format, PixelType type, T0& data);
    [NativeApiAttribute]
public void ClearBufferSubData(GLEnum target, GLEnum internalformat, IntPtr offset, UIntPtr size, PixelFormat format, GLEnum type, Void* data);
    [NativeApiAttribute]
public void ClearBufferSubData(GLEnum target, GLEnum internalformat, IntPtr offset, UIntPtr size, PixelFormat format, GLEnum type, T0& data);
    [NativeApiAttribute]
public void ClearBufferSubData(GLEnum target, GLEnum internalformat, IntPtr offset, UIntPtr size, PixelFormat format, PixelType type, Void* data);
    [NativeApiAttribute]
public void ClearBufferSubData(GLEnum target, GLEnum internalformat, IntPtr offset, UIntPtr size, PixelFormat format, PixelType type, T0& data);
    [NativeApiAttribute]
public void ClearBufferSubData(GLEnum target, SizedInternalFormat internalformat, IntPtr offset, UIntPtr size, GLEnum format, GLEnum type, Void* data);
    [NativeApiAttribute]
public void ClearBufferSubData(GLEnum target, SizedInternalFormat internalformat, IntPtr offset, UIntPtr size, GLEnum format, GLEnum type, T0& data);
    [NativeApiAttribute]
public void ClearBufferSubData(GLEnum target, SizedInternalFormat internalformat, IntPtr offset, UIntPtr size, GLEnum format, PixelType type, Void* data);
    [NativeApiAttribute]
public void ClearBufferSubData(GLEnum target, SizedInternalFormat internalformat, IntPtr offset, UIntPtr size, GLEnum format, PixelType type, T0& data);
    [NativeApiAttribute]
public void ClearBufferSubData(GLEnum target, SizedInternalFormat internalformat, IntPtr offset, UIntPtr size, PixelFormat format, GLEnum type, Void* data);
    [NativeApiAttribute]
public void ClearBufferSubData(GLEnum target, SizedInternalFormat internalformat, IntPtr offset, UIntPtr size, PixelFormat format, GLEnum type, T0& data);
    [NativeApiAttribute]
public void ClearBufferSubData(GLEnum target, SizedInternalFormat internalformat, IntPtr offset, UIntPtr size, PixelFormat format, PixelType type, Void* data);
    [NativeApiAttribute]
public void ClearBufferSubData(GLEnum target, SizedInternalFormat internalformat, IntPtr offset, UIntPtr size, PixelFormat format, PixelType type, T0& data);
    [NativeApiAttribute]
public void ClearBufferSubData(BufferTargetARB target, GLEnum internalformat, IntPtr offset, UIntPtr size, GLEnum format, GLEnum type, Void* data);
    [NativeApiAttribute]
public void ClearBufferSubData(BufferTargetARB target, GLEnum internalformat, IntPtr offset, UIntPtr size, GLEnum format, GLEnum type, T0& data);
    [NativeApiAttribute]
public void ClearBufferSubData(BufferTargetARB target, GLEnum internalformat, IntPtr offset, UIntPtr size, GLEnum format, PixelType type, Void* data);
    [NativeApiAttribute]
public void ClearBufferSubData(BufferTargetARB target, GLEnum internalformat, IntPtr offset, UIntPtr size, GLEnum format, PixelType type, T0& data);
    [NativeApiAttribute]
public void ClearBufferSubData(BufferTargetARB target, GLEnum internalformat, IntPtr offset, UIntPtr size, PixelFormat format, GLEnum type, Void* data);
    [NativeApiAttribute]
public void ClearBufferSubData(BufferTargetARB target, GLEnum internalformat, IntPtr offset, UIntPtr size, PixelFormat format, GLEnum type, T0& data);
    [NativeApiAttribute]
public void ClearBufferSubData(BufferTargetARB target, GLEnum internalformat, IntPtr offset, UIntPtr size, PixelFormat format, PixelType type, Void* data);
    [NativeApiAttribute]
public void ClearBufferSubData(BufferTargetARB target, GLEnum internalformat, IntPtr offset, UIntPtr size, PixelFormat format, PixelType type, T0& data);
    [NativeApiAttribute]
public void ClearBufferSubData(BufferTargetARB target, SizedInternalFormat internalformat, IntPtr offset, UIntPtr size, GLEnum format, GLEnum type, Void* data);
    [NativeApiAttribute]
public void ClearBufferSubData(BufferTargetARB target, SizedInternalFormat internalformat, IntPtr offset, UIntPtr size, GLEnum format, GLEnum type, T0& data);
    [NativeApiAttribute]
public void ClearBufferSubData(BufferTargetARB target, SizedInternalFormat internalformat, IntPtr offset, UIntPtr size, GLEnum format, PixelType type, Void* data);
    [NativeApiAttribute]
public void ClearBufferSubData(BufferTargetARB target, SizedInternalFormat internalformat, IntPtr offset, UIntPtr size, GLEnum format, PixelType type, T0& data);
    [NativeApiAttribute]
public void ClearBufferSubData(BufferTargetARB target, SizedInternalFormat internalformat, IntPtr offset, UIntPtr size, PixelFormat format, GLEnum type, Void* data);
    [NativeApiAttribute]
public void ClearBufferSubData(BufferTargetARB target, SizedInternalFormat internalformat, IntPtr offset, UIntPtr size, PixelFormat format, GLEnum type, T0& data);
    [NativeApiAttribute]
public void ClearBufferSubData(BufferTargetARB target, SizedInternalFormat internalformat, IntPtr offset, UIntPtr size, PixelFormat format, PixelType type, Void* data);
    [NativeApiAttribute]
public void ClearBufferSubData(BufferTargetARB target, SizedInternalFormat internalformat, IntPtr offset, UIntPtr size, PixelFormat format, PixelType type, T0& data);
    [NativeApiAttribute]
public void CopyImageSubData(UInt32 srcName, GLEnum srcTarget, int srcLevel, int srcX, int srcY, int srcZ, UInt32 dstName, GLEnum dstTarget, int dstLevel, int dstX, int dstY, int dstZ, UInt32 srcWidth, UInt32 srcHeight, UInt32 srcDepth);
    [NativeApiAttribute]
public void CopyImageSubData(UInt32 srcName, GLEnum srcTarget, int srcLevel, int srcX, int srcY, int srcZ, UInt32 dstName, CopyImageSubDataTarget dstTarget, int dstLevel, int dstX, int dstY, int dstZ, UInt32 srcWidth, UInt32 srcHeight, UInt32 srcDepth);
    [NativeApiAttribute]
public void CopyImageSubData(UInt32 srcName, CopyImageSubDataTarget srcTarget, int srcLevel, int srcX, int srcY, int srcZ, UInt32 dstName, GLEnum dstTarget, int dstLevel, int dstX, int dstY, int dstZ, UInt32 srcWidth, UInt32 srcHeight, UInt32 srcDepth);
    [NativeApiAttribute]
public void CopyImageSubData(UInt32 srcName, CopyImageSubDataTarget srcTarget, int srcLevel, int srcX, int srcY, int srcZ, UInt32 dstName, CopyImageSubDataTarget dstTarget, int dstLevel, int dstX, int dstY, int dstZ, UInt32 srcWidth, UInt32 srcHeight, UInt32 srcDepth);
    [NativeApiAttribute]
public void DebugMessageCallback(DebugProc callback, Void* userParam);
    [NativeApiAttribute]
public void DebugMessageCallback(DebugProc callback, T0& userParam);
    [NativeApiAttribute]
public void DebugMessageControl(GLEnum source, GLEnum type, GLEnum severity, UInt32 count, UInt32* ids, bool enabled);
    [NativeApiAttribute]
public void DebugMessageControl(GLEnum source, GLEnum type, GLEnum severity, UInt32 count, UInt32& ids, bool enabled);
    [NativeApiAttribute]
public void DebugMessageControl(GLEnum source, GLEnum type, GLEnum severity, UInt32 count, UInt32* ids, Boolean enabled);
    [NativeApiAttribute]
public void DebugMessageControl(GLEnum source, GLEnum type, GLEnum severity, UInt32 count, UInt32& ids, Boolean enabled);
    [NativeApiAttribute]
public void DebugMessageControl(GLEnum source, GLEnum type, DebugSeverity severity, UInt32 count, UInt32* ids, bool enabled);
    [NativeApiAttribute]
public void DebugMessageControl(GLEnum source, GLEnum type, DebugSeverity severity, UInt32 count, UInt32& ids, bool enabled);
    [NativeApiAttribute]
public void DebugMessageControl(GLEnum source, GLEnum type, DebugSeverity severity, UInt32 count, UInt32* ids, Boolean enabled);
    [NativeApiAttribute]
public void DebugMessageControl(GLEnum source, GLEnum type, DebugSeverity severity, UInt32 count, UInt32& ids, Boolean enabled);
    [NativeApiAttribute]
public void DebugMessageControl(GLEnum source, DebugType type, GLEnum severity, UInt32 count, UInt32* ids, bool enabled);
    [NativeApiAttribute]
public void DebugMessageControl(GLEnum source, DebugType type, GLEnum severity, UInt32 count, UInt32& ids, bool enabled);
    [NativeApiAttribute]
public void DebugMessageControl(GLEnum source, DebugType type, GLEnum severity, UInt32 count, UInt32* ids, Boolean enabled);
    [NativeApiAttribute]
public void DebugMessageControl(GLEnum source, DebugType type, GLEnum severity, UInt32 count, UInt32& ids, Boolean enabled);
    [NativeApiAttribute]
public void DebugMessageControl(GLEnum source, DebugType type, DebugSeverity severity, UInt32 count, UInt32* ids, bool enabled);
    [NativeApiAttribute]
public void DebugMessageControl(GLEnum source, DebugType type, DebugSeverity severity, UInt32 count, UInt32& ids, bool enabled);
    [NativeApiAttribute]
public void DebugMessageControl(GLEnum source, DebugType type, DebugSeverity severity, UInt32 count, UInt32* ids, Boolean enabled);
    [NativeApiAttribute]
public void DebugMessageControl(GLEnum source, DebugType type, DebugSeverity severity, UInt32 count, UInt32& ids, Boolean enabled);
    [NativeApiAttribute]
public void DebugMessageControl(DebugSource source, GLEnum type, GLEnum severity, UInt32 count, UInt32* ids, bool enabled);
    [NativeApiAttribute]
public void DebugMessageControl(DebugSource source, GLEnum type, GLEnum severity, UInt32 count, UInt32& ids, bool enabled);
    [NativeApiAttribute]
public void DebugMessageControl(DebugSource source, GLEnum type, GLEnum severity, UInt32 count, UInt32* ids, Boolean enabled);
    [NativeApiAttribute]
public void DebugMessageControl(DebugSource source, GLEnum type, GLEnum severity, UInt32 count, UInt32& ids, Boolean enabled);
    [NativeApiAttribute]
public void DebugMessageControl(DebugSource source, GLEnum type, DebugSeverity severity, UInt32 count, UInt32* ids, bool enabled);
    [NativeApiAttribute]
public void DebugMessageControl(DebugSource source, GLEnum type, DebugSeverity severity, UInt32 count, UInt32& ids, bool enabled);
    [NativeApiAttribute]
public void DebugMessageControl(DebugSource source, GLEnum type, DebugSeverity severity, UInt32 count, UInt32* ids, Boolean enabled);
    [NativeApiAttribute]
public void DebugMessageControl(DebugSource source, GLEnum type, DebugSeverity severity, UInt32 count, UInt32& ids, Boolean enabled);
    [NativeApiAttribute]
public void DebugMessageControl(DebugSource source, DebugType type, GLEnum severity, UInt32 count, UInt32* ids, bool enabled);
    [NativeApiAttribute]
public void DebugMessageControl(DebugSource source, DebugType type, GLEnum severity, UInt32 count, UInt32& ids, bool enabled);
    [NativeApiAttribute]
public void DebugMessageControl(DebugSource source, DebugType type, GLEnum severity, UInt32 count, UInt32* ids, Boolean enabled);
    [NativeApiAttribute]
public void DebugMessageControl(DebugSource source, DebugType type, GLEnum severity, UInt32 count, UInt32& ids, Boolean enabled);
    [NativeApiAttribute]
public void DebugMessageControl(DebugSource source, DebugType type, DebugSeverity severity, UInt32 count, UInt32* ids, bool enabled);
    [NativeApiAttribute]
public void DebugMessageControl(DebugSource source, DebugType type, DebugSeverity severity, UInt32 count, UInt32& ids, bool enabled);
    [NativeApiAttribute]
public void DebugMessageControl(DebugSource source, DebugType type, DebugSeverity severity, UInt32 count, UInt32* ids, Boolean enabled);
    [NativeApiAttribute]
public void DebugMessageControl(DebugSource source, DebugType type, DebugSeverity severity, UInt32 count, UInt32& ids, Boolean enabled);
    [NativeApiAttribute]
public void DebugMessageInsert(GLEnum source, GLEnum type, UInt32 id, GLEnum severity, UInt32 length, Byte* buf);
    [NativeApiAttribute]
public void DebugMessageInsert(GLEnum source, GLEnum type, UInt32 id, GLEnum severity, UInt32 length, Byte& buf);
    [NativeApiAttribute]
public void DebugMessageInsert(GLEnum source, GLEnum type, UInt32 id, GLEnum severity, UInt32 length, string buf);
    [NativeApiAttribute]
public void DebugMessageInsert(GLEnum source, GLEnum type, UInt32 id, DebugSeverity severity, UInt32 length, Byte* buf);
    [NativeApiAttribute]
public void DebugMessageInsert(GLEnum source, GLEnum type, UInt32 id, DebugSeverity severity, UInt32 length, Byte& buf);
    [NativeApiAttribute]
public void DebugMessageInsert(GLEnum source, GLEnum type, UInt32 id, DebugSeverity severity, UInt32 length, string buf);
    [NativeApiAttribute]
public void DebugMessageInsert(GLEnum source, DebugType type, UInt32 id, GLEnum severity, UInt32 length, Byte* buf);
    [NativeApiAttribute]
public void DebugMessageInsert(GLEnum source, DebugType type, UInt32 id, GLEnum severity, UInt32 length, Byte& buf);
    [NativeApiAttribute]
public void DebugMessageInsert(GLEnum source, DebugType type, UInt32 id, GLEnum severity, UInt32 length, string buf);
    [NativeApiAttribute]
public void DebugMessageInsert(GLEnum source, DebugType type, UInt32 id, DebugSeverity severity, UInt32 length, Byte* buf);
    [NativeApiAttribute]
public void DebugMessageInsert(GLEnum source, DebugType type, UInt32 id, DebugSeverity severity, UInt32 length, Byte& buf);
    [NativeApiAttribute]
public void DebugMessageInsert(GLEnum source, DebugType type, UInt32 id, DebugSeverity severity, UInt32 length, string buf);
    [NativeApiAttribute]
public void DebugMessageInsert(DebugSource source, GLEnum type, UInt32 id, GLEnum severity, UInt32 length, Byte* buf);
    [NativeApiAttribute]
public void DebugMessageInsert(DebugSource source, GLEnum type, UInt32 id, GLEnum severity, UInt32 length, Byte& buf);
    [NativeApiAttribute]
public void DebugMessageInsert(DebugSource source, GLEnum type, UInt32 id, GLEnum severity, UInt32 length, string buf);
    [NativeApiAttribute]
public void DebugMessageInsert(DebugSource source, GLEnum type, UInt32 id, DebugSeverity severity, UInt32 length, Byte* buf);
    [NativeApiAttribute]
public void DebugMessageInsert(DebugSource source, GLEnum type, UInt32 id, DebugSeverity severity, UInt32 length, Byte& buf);
    [NativeApiAttribute]
public void DebugMessageInsert(DebugSource source, GLEnum type, UInt32 id, DebugSeverity severity, UInt32 length, string buf);
    [NativeApiAttribute]
public void DebugMessageInsert(DebugSource source, DebugType type, UInt32 id, GLEnum severity, UInt32 length, Byte* buf);
    [NativeApiAttribute]
public void DebugMessageInsert(DebugSource source, DebugType type, UInt32 id, GLEnum severity, UInt32 length, Byte& buf);
    [NativeApiAttribute]
public void DebugMessageInsert(DebugSource source, DebugType type, UInt32 id, GLEnum severity, UInt32 length, string buf);
    [NativeApiAttribute]
public void DebugMessageInsert(DebugSource source, DebugType type, UInt32 id, DebugSeverity severity, UInt32 length, Byte* buf);
    [NativeApiAttribute]
public void DebugMessageInsert(DebugSource source, DebugType type, UInt32 id, DebugSeverity severity, UInt32 length, Byte& buf);
    [NativeApiAttribute]
public void DebugMessageInsert(DebugSource source, DebugType type, UInt32 id, DebugSeverity severity, UInt32 length, string buf);
    [NativeApiAttribute]
public void DispatchCompute(UInt32 num_groups_x, UInt32 num_groups_y, UInt32 num_groups_z);
    [NativeApiAttribute]
public void DispatchComputeIndirect(IntPtr indirect);
    [NativeApiAttribute]
public void FramebufferParameter(GLEnum target, GLEnum pname, int param);
    [NativeApiAttribute]
public void FramebufferParameter(GLEnum target, FramebufferParameterName pname, int param);
    [NativeApiAttribute]
public void FramebufferParameter(FramebufferTarget target, GLEnum pname, int param);
    [NativeApiAttribute]
public void FramebufferParameter(FramebufferTarget target, FramebufferParameterName pname, int param);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32* ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32* ids, GLEnum* severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32* ids, GLEnum* severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32* ids, GLEnum* severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32* ids, GLEnum* severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32* ids, GLEnum* severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32* ids, GLEnum& severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32* ids, GLEnum& severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32* ids, GLEnum& severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32* ids, GLEnum& severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32* ids, GLEnum& severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32* ids, GLEnum& severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32& ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32& ids, GLEnum* severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32& ids, GLEnum* severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32& ids, GLEnum* severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32& ids, GLEnum* severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32& ids, GLEnum* severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32& ids, GLEnum& severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32& ids, GLEnum& severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32& ids, GLEnum& severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32& ids, GLEnum& severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32& ids, GLEnum& severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32& ids, GLEnum& severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum& types, UInt32* ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum& types, UInt32* ids, GLEnum* severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum& types, UInt32* ids, GLEnum* severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum& types, UInt32* ids, GLEnum* severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum& types, UInt32* ids, GLEnum* severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum& types, UInt32* ids, GLEnum* severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum& types, UInt32* ids, GLEnum& severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum& types, UInt32* ids, GLEnum& severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum& types, UInt32* ids, GLEnum& severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum& types, UInt32* ids, GLEnum& severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum& types, UInt32* ids, GLEnum& severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum& types, UInt32* ids, GLEnum& severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum& types, UInt32& ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum& types, UInt32& ids, GLEnum* severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum& types, UInt32& ids, GLEnum* severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum& types, UInt32& ids, GLEnum* severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum& types, UInt32& ids, GLEnum* severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum& types, UInt32& ids, GLEnum* severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum& types, UInt32& ids, GLEnum& severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum& types, UInt32& ids, GLEnum& severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum& types, UInt32& ids, GLEnum& severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum& types, UInt32& ids, GLEnum& severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum& types, UInt32& ids, GLEnum& severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum& types, UInt32& ids, GLEnum& severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum* types, UInt32* ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum* types, UInt32* ids, GLEnum* severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum* types, UInt32* ids, GLEnum* severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum* types, UInt32* ids, GLEnum* severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum* types, UInt32* ids, GLEnum* severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum* types, UInt32* ids, GLEnum* severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum* types, UInt32* ids, GLEnum& severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum* types, UInt32* ids, GLEnum& severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum* types, UInt32* ids, GLEnum& severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum* types, UInt32* ids, GLEnum& severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum* types, UInt32* ids, GLEnum& severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum* types, UInt32* ids, GLEnum& severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum* types, UInt32& ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum* types, UInt32& ids, GLEnum* severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum* types, UInt32& ids, GLEnum* severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum* types, UInt32& ids, GLEnum* severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum* types, UInt32& ids, GLEnum* severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum* types, UInt32& ids, GLEnum* severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum* types, UInt32& ids, GLEnum& severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum* types, UInt32& ids, GLEnum& severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum* types, UInt32& ids, GLEnum& severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum* types, UInt32& ids, GLEnum& severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum* types, UInt32& ids, GLEnum& severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum* types, UInt32& ids, GLEnum& severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum& types, UInt32* ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum& types, UInt32* ids, GLEnum* severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum& types, UInt32* ids, GLEnum* severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum& types, UInt32* ids, GLEnum* severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum& types, UInt32* ids, GLEnum* severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum& types, UInt32* ids, GLEnum* severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum& types, UInt32* ids, GLEnum& severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum& types, UInt32* ids, GLEnum& severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum& types, UInt32* ids, GLEnum& severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum& types, UInt32* ids, GLEnum& severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum& types, UInt32* ids, GLEnum& severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum& types, UInt32* ids, GLEnum& severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum& types, UInt32& ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum& types, UInt32& ids, GLEnum* severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum& types, UInt32& ids, GLEnum* severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum& types, UInt32& ids, GLEnum* severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum& types, UInt32& ids, GLEnum* severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum& types, UInt32& ids, GLEnum* severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum& types, UInt32& ids, GLEnum& severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum& types, UInt32& ids, GLEnum& severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum& types, UInt32& ids, GLEnum& severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum& types, UInt32& ids, GLEnum& severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum& types, UInt32& ids, GLEnum& severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum& types, UInt32& ids, GLEnum& severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32* ids, DebugSeverity* severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32* ids, DebugSeverity* severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32* ids, DebugSeverity* severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32* ids, DebugSeverity& severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32* ids, DebugSeverity& severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32* ids, DebugSeverity& severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32* ids, DebugSeverity& severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32* ids, DebugSeverity& severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32* ids, DebugSeverity& severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32& ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32& ids, DebugSeverity* severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32& ids, DebugSeverity* severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32& ids, DebugSeverity* severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32& ids, DebugSeverity* severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32& ids, DebugSeverity* severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32& ids, DebugSeverity& severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32& ids, DebugSeverity& severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32& ids, DebugSeverity& severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32& ids, DebugSeverity& severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32& ids, DebugSeverity& severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32& ids, DebugSeverity& severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum& types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum& types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum& types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum& types, UInt32* ids, DebugSeverity* severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum& types, UInt32* ids, DebugSeverity* severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum& types, UInt32* ids, DebugSeverity* severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum& types, UInt32* ids, DebugSeverity& severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum& types, UInt32* ids, DebugSeverity& severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum& types, UInt32* ids, DebugSeverity& severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum& types, UInt32* ids, DebugSeverity& severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum& types, UInt32* ids, DebugSeverity& severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum& types, UInt32* ids, DebugSeverity& severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum& types, UInt32& ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum& types, UInt32& ids, DebugSeverity* severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum& types, UInt32& ids, DebugSeverity* severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum& types, UInt32& ids, DebugSeverity* severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum& types, UInt32& ids, DebugSeverity* severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum& types, UInt32& ids, DebugSeverity* severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum& types, UInt32& ids, DebugSeverity& severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum& types, UInt32& ids, DebugSeverity& severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum& types, UInt32& ids, DebugSeverity& severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum& types, UInt32& ids, DebugSeverity& severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum& types, UInt32& ids, DebugSeverity& severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum& types, UInt32& ids, DebugSeverity& severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum* types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum* types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum* types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum* types, UInt32* ids, DebugSeverity* severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum* types, UInt32* ids, DebugSeverity* severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum* types, UInt32* ids, DebugSeverity* severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum* types, UInt32* ids, DebugSeverity& severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum* types, UInt32* ids, DebugSeverity& severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum* types, UInt32* ids, DebugSeverity& severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum* types, UInt32* ids, DebugSeverity& severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum* types, UInt32* ids, DebugSeverity& severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum* types, UInt32* ids, DebugSeverity& severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum* types, UInt32& ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum* types, UInt32& ids, DebugSeverity* severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum* types, UInt32& ids, DebugSeverity* severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum* types, UInt32& ids, DebugSeverity* severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum* types, UInt32& ids, DebugSeverity* severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum* types, UInt32& ids, DebugSeverity* severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum* types, UInt32& ids, DebugSeverity& severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum* types, UInt32& ids, DebugSeverity& severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum* types, UInt32& ids, DebugSeverity& severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum* types, UInt32& ids, DebugSeverity& severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum* types, UInt32& ids, DebugSeverity& severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum* types, UInt32& ids, DebugSeverity& severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum& types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum& types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum& types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum& types, UInt32* ids, DebugSeverity* severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum& types, UInt32* ids, DebugSeverity* severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum& types, UInt32* ids, DebugSeverity* severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum& types, UInt32* ids, DebugSeverity& severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum& types, UInt32* ids, DebugSeverity& severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum& types, UInt32* ids, DebugSeverity& severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum& types, UInt32* ids, DebugSeverity& severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum& types, UInt32* ids, DebugSeverity& severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum& types, UInt32* ids, DebugSeverity& severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum& types, UInt32& ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum& types, UInt32& ids, DebugSeverity* severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum& types, UInt32& ids, DebugSeverity* severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum& types, UInt32& ids, DebugSeverity* severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum& types, UInt32& ids, DebugSeverity* severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum& types, UInt32& ids, DebugSeverity* severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum& types, UInt32& ids, DebugSeverity& severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum& types, UInt32& ids, DebugSeverity& severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum& types, UInt32& ids, DebugSeverity& severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum& types, UInt32& ids, DebugSeverity& severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum& types, UInt32& ids, DebugSeverity& severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, GLEnum& types, UInt32& ids, DebugSeverity& severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32* ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32* ids, GLEnum* severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32* ids, GLEnum* severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32* ids, GLEnum* severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32* ids, GLEnum* severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32* ids, GLEnum* severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32* ids, GLEnum& severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32* ids, GLEnum& severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32* ids, GLEnum& severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32* ids, GLEnum& severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32* ids, GLEnum& severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32* ids, GLEnum& severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32& ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32& ids, GLEnum* severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32& ids, GLEnum* severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32& ids, GLEnum* severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32& ids, GLEnum* severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32& ids, GLEnum* severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32& ids, GLEnum& severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32& ids, GLEnum& severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32& ids, GLEnum& severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32& ids, GLEnum& severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32& ids, GLEnum& severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32& ids, GLEnum& severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType& types, UInt32* ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType& types, UInt32* ids, GLEnum* severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType& types, UInt32* ids, GLEnum* severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType& types, UInt32* ids, GLEnum* severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType& types, UInt32* ids, GLEnum* severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType& types, UInt32* ids, GLEnum* severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType& types, UInt32* ids, GLEnum& severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType& types, UInt32* ids, GLEnum& severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType& types, UInt32* ids, GLEnum& severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType& types, UInt32* ids, GLEnum& severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType& types, UInt32* ids, GLEnum& severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType& types, UInt32* ids, GLEnum& severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType& types, UInt32& ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType& types, UInt32& ids, GLEnum* severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType& types, UInt32& ids, GLEnum* severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType& types, UInt32& ids, GLEnum* severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType& types, UInt32& ids, GLEnum* severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType& types, UInt32& ids, GLEnum* severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType& types, UInt32& ids, GLEnum& severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType& types, UInt32& ids, GLEnum& severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType& types, UInt32& ids, GLEnum& severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType& types, UInt32& ids, GLEnum& severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType& types, UInt32& ids, GLEnum& severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType& types, UInt32& ids, GLEnum& severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType* types, UInt32* ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType* types, UInt32* ids, GLEnum* severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType* types, UInt32* ids, GLEnum* severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType* types, UInt32* ids, GLEnum* severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType* types, UInt32* ids, GLEnum* severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType* types, UInt32* ids, GLEnum* severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType* types, UInt32* ids, GLEnum& severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType* types, UInt32* ids, GLEnum& severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType* types, UInt32* ids, GLEnum& severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType* types, UInt32* ids, GLEnum& severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType* types, UInt32* ids, GLEnum& severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType* types, UInt32* ids, GLEnum& severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType* types, UInt32& ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType* types, UInt32& ids, GLEnum* severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType* types, UInt32& ids, GLEnum* severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType* types, UInt32& ids, GLEnum* severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType* types, UInt32& ids, GLEnum* severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType* types, UInt32& ids, GLEnum* severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType* types, UInt32& ids, GLEnum& severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType* types, UInt32& ids, GLEnum& severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType* types, UInt32& ids, GLEnum& severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType* types, UInt32& ids, GLEnum& severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType* types, UInt32& ids, GLEnum& severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType* types, UInt32& ids, GLEnum& severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType& types, UInt32* ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType& types, UInt32* ids, GLEnum* severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType& types, UInt32* ids, GLEnum* severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType& types, UInt32* ids, GLEnum* severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType& types, UInt32* ids, GLEnum* severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType& types, UInt32* ids, GLEnum* severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType& types, UInt32* ids, GLEnum& severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType& types, UInt32* ids, GLEnum& severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType& types, UInt32* ids, GLEnum& severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType& types, UInt32* ids, GLEnum& severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType& types, UInt32* ids, GLEnum& severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType& types, UInt32* ids, GLEnum& severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType& types, UInt32& ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType& types, UInt32& ids, GLEnum* severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType& types, UInt32& ids, GLEnum* severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType& types, UInt32& ids, GLEnum* severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType& types, UInt32& ids, GLEnum* severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType& types, UInt32& ids, GLEnum* severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType& types, UInt32& ids, GLEnum& severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType& types, UInt32& ids, GLEnum& severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType& types, UInt32& ids, GLEnum& severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType& types, UInt32& ids, GLEnum& severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType& types, UInt32& ids, GLEnum& severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType& types, UInt32& ids, GLEnum& severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32* ids, DebugSeverity* severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32* ids, DebugSeverity* severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32* ids, DebugSeverity* severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32* ids, DebugSeverity& severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32* ids, DebugSeverity& severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32* ids, DebugSeverity& severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32* ids, DebugSeverity& severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32* ids, DebugSeverity& severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32* ids, DebugSeverity& severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32& ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32& ids, DebugSeverity* severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32& ids, DebugSeverity* severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32& ids, DebugSeverity* severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32& ids, DebugSeverity* severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32& ids, DebugSeverity* severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32& ids, DebugSeverity& severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32& ids, DebugSeverity& severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32& ids, DebugSeverity& severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32& ids, DebugSeverity& severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32& ids, DebugSeverity& severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32& ids, DebugSeverity& severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType& types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType& types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType& types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType& types, UInt32* ids, DebugSeverity* severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType& types, UInt32* ids, DebugSeverity* severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType& types, UInt32* ids, DebugSeverity* severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType& types, UInt32* ids, DebugSeverity& severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType& types, UInt32* ids, DebugSeverity& severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType& types, UInt32* ids, DebugSeverity& severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType& types, UInt32* ids, DebugSeverity& severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType& types, UInt32* ids, DebugSeverity& severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType& types, UInt32* ids, DebugSeverity& severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType& types, UInt32& ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType& types, UInt32& ids, DebugSeverity* severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType& types, UInt32& ids, DebugSeverity* severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType& types, UInt32& ids, DebugSeverity* severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType& types, UInt32& ids, DebugSeverity* severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType& types, UInt32& ids, DebugSeverity* severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType& types, UInt32& ids, DebugSeverity& severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType& types, UInt32& ids, DebugSeverity& severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType& types, UInt32& ids, DebugSeverity& severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType& types, UInt32& ids, DebugSeverity& severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType& types, UInt32& ids, DebugSeverity& severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType& types, UInt32& ids, DebugSeverity& severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType* types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType* types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType* types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType* types, UInt32* ids, DebugSeverity* severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType* types, UInt32* ids, DebugSeverity* severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType* types, UInt32* ids, DebugSeverity* severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType* types, UInt32* ids, DebugSeverity& severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType* types, UInt32* ids, DebugSeverity& severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType* types, UInt32* ids, DebugSeverity& severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType* types, UInt32* ids, DebugSeverity& severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType* types, UInt32* ids, DebugSeverity& severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType* types, UInt32* ids, DebugSeverity& severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType* types, UInt32& ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType* types, UInt32& ids, DebugSeverity* severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType* types, UInt32& ids, DebugSeverity* severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType* types, UInt32& ids, DebugSeverity* severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType* types, UInt32& ids, DebugSeverity* severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType* types, UInt32& ids, DebugSeverity* severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType* types, UInt32& ids, DebugSeverity& severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType* types, UInt32& ids, DebugSeverity& severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType* types, UInt32& ids, DebugSeverity& severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType* types, UInt32& ids, DebugSeverity& severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType* types, UInt32& ids, DebugSeverity& severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType* types, UInt32& ids, DebugSeverity& severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType& types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType& types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType& types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType& types, UInt32* ids, DebugSeverity* severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType& types, UInt32* ids, DebugSeverity* severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType& types, UInt32* ids, DebugSeverity* severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType& types, UInt32* ids, DebugSeverity& severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType& types, UInt32* ids, DebugSeverity& severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType& types, UInt32* ids, DebugSeverity& severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType& types, UInt32* ids, DebugSeverity& severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType& types, UInt32* ids, DebugSeverity& severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType& types, UInt32* ids, DebugSeverity& severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType& types, UInt32& ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType& types, UInt32& ids, DebugSeverity* severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType& types, UInt32& ids, DebugSeverity* severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType& types, UInt32& ids, DebugSeverity* severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType& types, UInt32& ids, DebugSeverity* severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType& types, UInt32& ids, DebugSeverity* severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType& types, UInt32& ids, DebugSeverity& severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType& types, UInt32& ids, DebugSeverity& severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType& types, UInt32& ids, DebugSeverity& severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType& types, UInt32& ids, DebugSeverity& severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType& types, UInt32& ids, DebugSeverity& severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, GLEnum& sources, DebugType& types, UInt32& ids, DebugSeverity& severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32* ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32* ids, GLEnum* severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32* ids, GLEnum* severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32* ids, GLEnum* severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32* ids, GLEnum* severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32* ids, GLEnum* severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32* ids, GLEnum& severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32* ids, GLEnum& severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32* ids, GLEnum& severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32* ids, GLEnum& severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32* ids, GLEnum& severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32* ids, GLEnum& severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32& ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32& ids, GLEnum* severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32& ids, GLEnum* severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32& ids, GLEnum* severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32& ids, GLEnum* severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32& ids, GLEnum* severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32& ids, GLEnum& severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32& ids, GLEnum& severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32& ids, GLEnum& severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32& ids, GLEnum& severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32& ids, GLEnum& severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32& ids, GLEnum& severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum& types, UInt32* ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum& types, UInt32* ids, GLEnum* severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum& types, UInt32* ids, GLEnum* severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum& types, UInt32* ids, GLEnum* severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum& types, UInt32* ids, GLEnum* severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum& types, UInt32* ids, GLEnum* severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum& types, UInt32* ids, GLEnum& severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum& types, UInt32* ids, GLEnum& severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum& types, UInt32* ids, GLEnum& severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum& types, UInt32* ids, GLEnum& severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum& types, UInt32* ids, GLEnum& severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum& types, UInt32* ids, GLEnum& severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum& types, UInt32& ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum& types, UInt32& ids, GLEnum* severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum& types, UInt32& ids, GLEnum* severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum& types, UInt32& ids, GLEnum* severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum& types, UInt32& ids, GLEnum* severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum& types, UInt32& ids, GLEnum* severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum& types, UInt32& ids, GLEnum& severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum& types, UInt32& ids, GLEnum& severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum& types, UInt32& ids, GLEnum& severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum& types, UInt32& ids, GLEnum& severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum& types, UInt32& ids, GLEnum& severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum& types, UInt32& ids, GLEnum& severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum* types, UInt32* ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum* types, UInt32* ids, GLEnum* severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum* types, UInt32* ids, GLEnum* severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum* types, UInt32* ids, GLEnum* severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum* types, UInt32* ids, GLEnum* severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum* types, UInt32* ids, GLEnum* severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum* types, UInt32* ids, GLEnum& severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum* types, UInt32* ids, GLEnum& severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum* types, UInt32* ids, GLEnum& severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum* types, UInt32* ids, GLEnum& severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum* types, UInt32* ids, GLEnum& severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum* types, UInt32* ids, GLEnum& severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum* types, UInt32& ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum* types, UInt32& ids, GLEnum* severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum* types, UInt32& ids, GLEnum* severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum* types, UInt32& ids, GLEnum* severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum* types, UInt32& ids, GLEnum* severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum* types, UInt32& ids, GLEnum* severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum* types, UInt32& ids, GLEnum& severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum* types, UInt32& ids, GLEnum& severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum* types, UInt32& ids, GLEnum& severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum* types, UInt32& ids, GLEnum& severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum* types, UInt32& ids, GLEnum& severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum* types, UInt32& ids, GLEnum& severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum& types, UInt32* ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum& types, UInt32* ids, GLEnum* severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum& types, UInt32* ids, GLEnum* severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum& types, UInt32* ids, GLEnum* severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum& types, UInt32* ids, GLEnum* severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum& types, UInt32* ids, GLEnum* severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum& types, UInt32* ids, GLEnum& severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum& types, UInt32* ids, GLEnum& severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum& types, UInt32* ids, GLEnum& severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum& types, UInt32* ids, GLEnum& severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum& types, UInt32* ids, GLEnum& severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum& types, UInt32* ids, GLEnum& severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum& types, UInt32& ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum& types, UInt32& ids, GLEnum* severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum& types, UInt32& ids, GLEnum* severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum& types, UInt32& ids, GLEnum* severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum& types, UInt32& ids, GLEnum* severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum& types, UInt32& ids, GLEnum* severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum& types, UInt32& ids, GLEnum& severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum& types, UInt32& ids, GLEnum& severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum& types, UInt32& ids, GLEnum& severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum& types, UInt32& ids, GLEnum& severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum& types, UInt32& ids, GLEnum& severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum& types, UInt32& ids, GLEnum& severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32* ids, DebugSeverity* severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32* ids, DebugSeverity* severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32* ids, DebugSeverity* severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32* ids, DebugSeverity& severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32* ids, DebugSeverity& severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32* ids, DebugSeverity& severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32* ids, DebugSeverity& severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32* ids, DebugSeverity& severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32* ids, DebugSeverity& severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32& ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32& ids, DebugSeverity* severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32& ids, DebugSeverity* severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32& ids, DebugSeverity* severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32& ids, DebugSeverity* severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32& ids, DebugSeverity* severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32& ids, DebugSeverity& severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32& ids, DebugSeverity& severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32& ids, DebugSeverity& severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32& ids, DebugSeverity& severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32& ids, DebugSeverity& severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32& ids, DebugSeverity& severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum& types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum& types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum& types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum& types, UInt32* ids, DebugSeverity* severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum& types, UInt32* ids, DebugSeverity* severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum& types, UInt32* ids, DebugSeverity* severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum& types, UInt32* ids, DebugSeverity& severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum& types, UInt32* ids, DebugSeverity& severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum& types, UInt32* ids, DebugSeverity& severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum& types, UInt32* ids, DebugSeverity& severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum& types, UInt32* ids, DebugSeverity& severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum& types, UInt32* ids, DebugSeverity& severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum& types, UInt32& ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum& types, UInt32& ids, DebugSeverity* severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum& types, UInt32& ids, DebugSeverity* severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum& types, UInt32& ids, DebugSeverity* severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum& types, UInt32& ids, DebugSeverity* severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum& types, UInt32& ids, DebugSeverity* severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum& types, UInt32& ids, DebugSeverity& severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum& types, UInt32& ids, DebugSeverity& severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum& types, UInt32& ids, DebugSeverity& severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum& types, UInt32& ids, DebugSeverity& severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum& types, UInt32& ids, DebugSeverity& severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum& types, UInt32& ids, DebugSeverity& severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum* types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum* types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum* types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum* types, UInt32* ids, DebugSeverity* severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum* types, UInt32* ids, DebugSeverity* severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum* types, UInt32* ids, DebugSeverity* severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum* types, UInt32* ids, DebugSeverity& severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum* types, UInt32* ids, DebugSeverity& severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum* types, UInt32* ids, DebugSeverity& severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum* types, UInt32* ids, DebugSeverity& severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum* types, UInt32* ids, DebugSeverity& severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum* types, UInt32* ids, DebugSeverity& severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum* types, UInt32& ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum* types, UInt32& ids, DebugSeverity* severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum* types, UInt32& ids, DebugSeverity* severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum* types, UInt32& ids, DebugSeverity* severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum* types, UInt32& ids, DebugSeverity* severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum* types, UInt32& ids, DebugSeverity* severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum* types, UInt32& ids, DebugSeverity& severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum* types, UInt32& ids, DebugSeverity& severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum* types, UInt32& ids, DebugSeverity& severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum* types, UInt32& ids, DebugSeverity& severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum* types, UInt32& ids, DebugSeverity& severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum* types, UInt32& ids, DebugSeverity& severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum& types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum& types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum& types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum& types, UInt32* ids, DebugSeverity* severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum& types, UInt32* ids, DebugSeverity* severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum& types, UInt32* ids, DebugSeverity* severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum& types, UInt32* ids, DebugSeverity& severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum& types, UInt32* ids, DebugSeverity& severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum& types, UInt32* ids, DebugSeverity& severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum& types, UInt32* ids, DebugSeverity& severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum& types, UInt32* ids, DebugSeverity& severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum& types, UInt32* ids, DebugSeverity& severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum& types, UInt32& ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum& types, UInt32& ids, DebugSeverity* severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum& types, UInt32& ids, DebugSeverity* severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum& types, UInt32& ids, DebugSeverity* severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum& types, UInt32& ids, DebugSeverity* severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum& types, UInt32& ids, DebugSeverity* severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum& types, UInt32& ids, DebugSeverity& severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum& types, UInt32& ids, DebugSeverity& severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum& types, UInt32& ids, DebugSeverity& severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum& types, UInt32& ids, DebugSeverity& severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum& types, UInt32& ids, DebugSeverity& severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, GLEnum& types, UInt32& ids, DebugSeverity& severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32* ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32* ids, GLEnum* severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32* ids, GLEnum* severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32* ids, GLEnum* severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32* ids, GLEnum* severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32* ids, GLEnum* severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32* ids, GLEnum& severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32* ids, GLEnum& severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32* ids, GLEnum& severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32* ids, GLEnum& severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32* ids, GLEnum& severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32* ids, GLEnum& severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32& ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32& ids, GLEnum* severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32& ids, GLEnum* severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32& ids, GLEnum* severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32& ids, GLEnum* severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32& ids, GLEnum* severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32& ids, GLEnum& severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32& ids, GLEnum& severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32& ids, GLEnum& severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32& ids, GLEnum& severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32& ids, GLEnum& severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32& ids, GLEnum& severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType& types, UInt32* ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType& types, UInt32* ids, GLEnum* severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType& types, UInt32* ids, GLEnum* severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType& types, UInt32* ids, GLEnum* severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType& types, UInt32* ids, GLEnum* severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType& types, UInt32* ids, GLEnum* severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType& types, UInt32* ids, GLEnum& severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType& types, UInt32* ids, GLEnum& severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType& types, UInt32* ids, GLEnum& severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType& types, UInt32* ids, GLEnum& severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType& types, UInt32* ids, GLEnum& severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType& types, UInt32* ids, GLEnum& severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType& types, UInt32& ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType& types, UInt32& ids, GLEnum* severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType& types, UInt32& ids, GLEnum* severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType& types, UInt32& ids, GLEnum* severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType& types, UInt32& ids, GLEnum* severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType& types, UInt32& ids, GLEnum* severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType& types, UInt32& ids, GLEnum& severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType& types, UInt32& ids, GLEnum& severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType& types, UInt32& ids, GLEnum& severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType& types, UInt32& ids, GLEnum& severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType& types, UInt32& ids, GLEnum& severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType& types, UInt32& ids, GLEnum& severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType* types, UInt32* ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType* types, UInt32* ids, GLEnum* severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType* types, UInt32* ids, GLEnum* severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType* types, UInt32* ids, GLEnum* severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType* types, UInt32* ids, GLEnum* severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType* types, UInt32* ids, GLEnum* severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType* types, UInt32* ids, GLEnum& severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType* types, UInt32* ids, GLEnum& severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType* types, UInt32* ids, GLEnum& severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType* types, UInt32* ids, GLEnum& severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType* types, UInt32* ids, GLEnum& severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType* types, UInt32* ids, GLEnum& severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType* types, UInt32& ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType* types, UInt32& ids, GLEnum* severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType* types, UInt32& ids, GLEnum* severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType* types, UInt32& ids, GLEnum* severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType* types, UInt32& ids, GLEnum* severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType* types, UInt32& ids, GLEnum* severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType* types, UInt32& ids, GLEnum& severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType* types, UInt32& ids, GLEnum& severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType* types, UInt32& ids, GLEnum& severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType* types, UInt32& ids, GLEnum& severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType* types, UInt32& ids, GLEnum& severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType* types, UInt32& ids, GLEnum& severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType& types, UInt32* ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType& types, UInt32* ids, GLEnum* severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType& types, UInt32* ids, GLEnum* severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType& types, UInt32* ids, GLEnum* severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType& types, UInt32* ids, GLEnum* severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType& types, UInt32* ids, GLEnum* severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType& types, UInt32* ids, GLEnum& severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType& types, UInt32* ids, GLEnum& severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType& types, UInt32* ids, GLEnum& severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType& types, UInt32* ids, GLEnum& severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType& types, UInt32* ids, GLEnum& severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType& types, UInt32* ids, GLEnum& severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType& types, UInt32& ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType& types, UInt32& ids, GLEnum* severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType& types, UInt32& ids, GLEnum* severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType& types, UInt32& ids, GLEnum* severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType& types, UInt32& ids, GLEnum* severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType& types, UInt32& ids, GLEnum* severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType& types, UInt32& ids, GLEnum& severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType& types, UInt32& ids, GLEnum& severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType& types, UInt32& ids, GLEnum& severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType& types, UInt32& ids, GLEnum& severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType& types, UInt32& ids, GLEnum& severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType& types, UInt32& ids, GLEnum& severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32* ids, DebugSeverity* severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32* ids, DebugSeverity* severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32* ids, DebugSeverity* severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32* ids, DebugSeverity& severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32* ids, DebugSeverity& severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32* ids, DebugSeverity& severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32* ids, DebugSeverity& severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32* ids, DebugSeverity& severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32* ids, DebugSeverity& severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32& ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32& ids, DebugSeverity* severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32& ids, DebugSeverity* severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32& ids, DebugSeverity* severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32& ids, DebugSeverity* severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32& ids, DebugSeverity* severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32& ids, DebugSeverity& severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32& ids, DebugSeverity& severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32& ids, DebugSeverity& severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32& ids, DebugSeverity& severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32& ids, DebugSeverity& severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32& ids, DebugSeverity& severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType& types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType& types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType& types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType& types, UInt32* ids, DebugSeverity* severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType& types, UInt32* ids, DebugSeverity* severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType& types, UInt32* ids, DebugSeverity* severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType& types, UInt32* ids, DebugSeverity& severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType& types, UInt32* ids, DebugSeverity& severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType& types, UInt32* ids, DebugSeverity& severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType& types, UInt32* ids, DebugSeverity& severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType& types, UInt32* ids, DebugSeverity& severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType& types, UInt32* ids, DebugSeverity& severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType& types, UInt32& ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType& types, UInt32& ids, DebugSeverity* severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType& types, UInt32& ids, DebugSeverity* severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType& types, UInt32& ids, DebugSeverity* severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType& types, UInt32& ids, DebugSeverity* severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType& types, UInt32& ids, DebugSeverity* severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType& types, UInt32& ids, DebugSeverity& severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType& types, UInt32& ids, DebugSeverity& severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType& types, UInt32& ids, DebugSeverity& severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType& types, UInt32& ids, DebugSeverity& severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType& types, UInt32& ids, DebugSeverity& severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType& types, UInt32& ids, DebugSeverity& severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType* types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType* types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType* types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType* types, UInt32* ids, DebugSeverity* severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType* types, UInt32* ids, DebugSeverity* severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType* types, UInt32* ids, DebugSeverity* severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType* types, UInt32* ids, DebugSeverity& severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType* types, UInt32* ids, DebugSeverity& severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType* types, UInt32* ids, DebugSeverity& severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType* types, UInt32* ids, DebugSeverity& severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType* types, UInt32* ids, DebugSeverity& severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType* types, UInt32* ids, DebugSeverity& severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType* types, UInt32& ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType* types, UInt32& ids, DebugSeverity* severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType* types, UInt32& ids, DebugSeverity* severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType* types, UInt32& ids, DebugSeverity* severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType* types, UInt32& ids, DebugSeverity* severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType* types, UInt32& ids, DebugSeverity* severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType* types, UInt32& ids, DebugSeverity& severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType* types, UInt32& ids, DebugSeverity& severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType* types, UInt32& ids, DebugSeverity& severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType* types, UInt32& ids, DebugSeverity& severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType* types, UInt32& ids, DebugSeverity& severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType* types, UInt32& ids, DebugSeverity& severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType& types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType& types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType& types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType& types, UInt32* ids, DebugSeverity* severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType& types, UInt32* ids, DebugSeverity* severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType& types, UInt32* ids, DebugSeverity* severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType& types, UInt32* ids, DebugSeverity& severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType& types, UInt32* ids, DebugSeverity& severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType& types, UInt32* ids, DebugSeverity& severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType& types, UInt32* ids, DebugSeverity& severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType& types, UInt32* ids, DebugSeverity& severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType& types, UInt32* ids, DebugSeverity& severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType& types, UInt32& ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType& types, UInt32& ids, DebugSeverity* severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType& types, UInt32& ids, DebugSeverity* severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType& types, UInt32& ids, DebugSeverity* severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType& types, UInt32& ids, DebugSeverity* severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType& types, UInt32& ids, DebugSeverity* severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType& types, UInt32& ids, DebugSeverity& severities, UInt32* lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType& types, UInt32& ids, DebugSeverity& severities, UInt32* lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType& types, UInt32& ids, DebugSeverity& severities, UInt32* lengths, String& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType& types, UInt32& ids, DebugSeverity& severities, UInt32& lengths, Byte* messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType& types, UInt32& ids, DebugSeverity& severities, UInt32& lengths, Byte& messageLog);
    [NativeApiAttribute]
public UInt32 GetDebugMessageLog(UInt32 count, UInt32 bufSize, DebugSource& sources, DebugType& types, UInt32& ids, DebugSeverity& severities, UInt32& lengths, String& messageLog);
    [NativeApiAttribute]
public void GetFramebufferParameter(GLEnum target, GLEnum pname, Int32* params);
    [NativeApiAttribute]
public void GetFramebufferParameter(GLEnum target, GLEnum pname, Int32& params);
    [NativeApiAttribute]
public void GetFramebufferParameter(GLEnum target, FramebufferAttachmentParameterName pname, Int32* params);
    [NativeApiAttribute]
public void GetFramebufferParameter(GLEnum target, FramebufferAttachmentParameterName pname, Int32& params);
    [NativeApiAttribute]
public void GetFramebufferParameter(FramebufferTarget target, GLEnum pname, Int32* params);
    [NativeApiAttribute]
public void GetFramebufferParameter(FramebufferTarget target, GLEnum pname, Int32& params);
    [NativeApiAttribute]
public void GetFramebufferParameter(FramebufferTarget target, FramebufferAttachmentParameterName pname, Int32* params);
    [NativeApiAttribute]
public void GetFramebufferParameter(FramebufferTarget target, FramebufferAttachmentParameterName pname, Int32& params);
    [NativeApiAttribute]
public void GetInternalformat(GLEnum target, GLEnum internalformat, GLEnum pname, UInt32 count, Int64* params);
    [NativeApiAttribute]
public void GetInternalformat(GLEnum target, GLEnum internalformat, GLEnum pname, UInt32 count, Int64& params);
    [NativeApiAttribute]
public void GetInternalformat(GLEnum target, GLEnum internalformat, InternalFormatPName pname, UInt32 count, Int64* params);
    [NativeApiAttribute]
public void GetInternalformat(GLEnum target, GLEnum internalformat, InternalFormatPName pname, UInt32 count, Int64& params);
    [NativeApiAttribute]
public void GetInternalformat(GLEnum target, InternalFormat internalformat, GLEnum pname, UInt32 count, Int64* params);
    [NativeApiAttribute]
public void GetInternalformat(GLEnum target, InternalFormat internalformat, GLEnum pname, UInt32 count, Int64& params);
    [NativeApiAttribute]
public void GetInternalformat(GLEnum target, InternalFormat internalformat, InternalFormatPName pname, UInt32 count, Int64* params);
    [NativeApiAttribute]
public void GetInternalformat(GLEnum target, InternalFormat internalformat, InternalFormatPName pname, UInt32 count, Int64& params);
    [NativeApiAttribute]
public void GetInternalformat(TextureTarget target, GLEnum internalformat, GLEnum pname, UInt32 count, Int64* params);
    [NativeApiAttribute]
public void GetInternalformat(TextureTarget target, GLEnum internalformat, GLEnum pname, UInt32 count, Int64& params);
    [NativeApiAttribute]
public void GetInternalformat(TextureTarget target, GLEnum internalformat, InternalFormatPName pname, UInt32 count, Int64* params);
    [NativeApiAttribute]
public void GetInternalformat(TextureTarget target, GLEnum internalformat, InternalFormatPName pname, UInt32 count, Int64& params);
    [NativeApiAttribute]
public void GetInternalformat(TextureTarget target, InternalFormat internalformat, GLEnum pname, UInt32 count, Int64* params);
    [NativeApiAttribute]
public void GetInternalformat(TextureTarget target, InternalFormat internalformat, GLEnum pname, UInt32 count, Int64& params);
    [NativeApiAttribute]
public void GetInternalformat(TextureTarget target, InternalFormat internalformat, InternalFormatPName pname, UInt32 count, Int64* params);
    [NativeApiAttribute]
public void GetInternalformat(TextureTarget target, InternalFormat internalformat, InternalFormatPName pname, UInt32 count, Int64& params);
    [NativeApiAttribute]
public void GetObjectLabel(GLEnum identifier, UInt32 name, UInt32 bufSize, UInt32* length, Byte* label);
    [NativeApiAttribute]
public void GetObjectLabel(GLEnum identifier, UInt32 name, UInt32 bufSize, UInt32* length, Byte& label);
    [NativeApiAttribute]
public void GetObjectLabel(GLEnum identifier, UInt32 name, UInt32 bufSize, UInt32* length, String& label);
    [NativeApiAttribute]
public void GetObjectLabel(GLEnum identifier, UInt32 name, UInt32 bufSize, UInt32& length, Byte* label);
    [NativeApiAttribute]
public void GetObjectLabel(GLEnum identifier, UInt32 name, UInt32 bufSize, UInt32& length, Byte& label);
    [NativeApiAttribute]
public void GetObjectLabel(GLEnum identifier, UInt32 name, UInt32 bufSize, UInt32& length, String& label);
    [NativeApiAttribute]
public void GetObjectLabel(ObjectIdentifier identifier, UInt32 name, UInt32 bufSize, UInt32* length, Byte* label);
    [NativeApiAttribute]
public void GetObjectLabel(ObjectIdentifier identifier, UInt32 name, UInt32 bufSize, UInt32* length, Byte& label);
    [NativeApiAttribute]
public void GetObjectLabel(ObjectIdentifier identifier, UInt32 name, UInt32 bufSize, UInt32* length, String& label);
    [NativeApiAttribute]
public void GetObjectLabel(ObjectIdentifier identifier, UInt32 name, UInt32 bufSize, UInt32& length, Byte* label);
    [NativeApiAttribute]
public void GetObjectLabel(ObjectIdentifier identifier, UInt32 name, UInt32 bufSize, UInt32& length, Byte& label);
    [NativeApiAttribute]
public void GetObjectLabel(ObjectIdentifier identifier, UInt32 name, UInt32 bufSize, UInt32& length, String& label);
    [NativeApiAttribute]
public void GetObjectPtrLabel(Void* ptr, UInt32 bufSize, UInt32* length, Byte* label);
    [NativeApiAttribute]
public void GetObjectPtrLabel(Void* ptr, UInt32 bufSize, UInt32* length, Byte& label);
    [NativeApiAttribute]
public void GetObjectPtrLabel(Void* ptr, UInt32 bufSize, UInt32* length, String& label);
    [NativeApiAttribute]
public void GetObjectPtrLabel(Void* ptr, UInt32 bufSize, UInt32& length, Byte* label);
    [NativeApiAttribute]
public void GetObjectPtrLabel(Void* ptr, UInt32 bufSize, UInt32& length, Byte& label);
    [NativeApiAttribute]
public void GetObjectPtrLabel(Void* ptr, UInt32 bufSize, UInt32& length, String& label);
    [NativeApiAttribute]
public void GetObjectPtrLabel(T0& ptr, UInt32 bufSize, UInt32* length, Byte* label);
    [NativeApiAttribute]
public void GetObjectPtrLabel(T0& ptr, UInt32 bufSize, UInt32* length, Byte& label);
    [NativeApiAttribute]
public void GetObjectPtrLabel(T0& ptr, UInt32 bufSize, UInt32* length, String& label);
    [NativeApiAttribute]
public void GetObjectPtrLabel(T0& ptr, UInt32 bufSize, UInt32& length, Byte* label);
    [NativeApiAttribute]
public void GetObjectPtrLabel(T0& ptr, UInt32 bufSize, UInt32& length, Byte& label);
    [NativeApiAttribute]
public void GetObjectPtrLabel(T0& ptr, UInt32 bufSize, UInt32& length, String& label);
    [NativeApiAttribute]
public void GetPointer(GLEnum pname, Void** params);
    [NativeApiAttribute]
public void GetPointer(GLEnum pname, Void*& params);
    [NativeApiAttribute]
public void GetPointer(GetPointervPName pname, Void** params);
    [NativeApiAttribute]
public void GetPointer(GetPointervPName pname, Void*& params);
    [NativeApiAttribute]
public void GetProgramInterface(UInt32 program, GLEnum programInterface, GLEnum pname, Int32* params);
    [NativeApiAttribute]
public void GetProgramInterface(UInt32 program, GLEnum programInterface, GLEnum pname, Int32& params);
    [NativeApiAttribute]
public void GetProgramInterface(UInt32 program, GLEnum programInterface, ProgramInterfacePName pname, Int32* params);
    [NativeApiAttribute]
public void GetProgramInterface(UInt32 program, GLEnum programInterface, ProgramInterfacePName pname, Int32& params);
    [NativeApiAttribute]
public void GetProgramInterface(UInt32 program, ProgramInterface programInterface, GLEnum pname, Int32* params);
    [NativeApiAttribute]
public void GetProgramInterface(UInt32 program, ProgramInterface programInterface, GLEnum pname, Int32& params);
    [NativeApiAttribute]
public void GetProgramInterface(UInt32 program, ProgramInterface programInterface, ProgramInterfacePName pname, Int32* params);
    [NativeApiAttribute]
public void GetProgramInterface(UInt32 program, ProgramInterface programInterface, ProgramInterfacePName pname, Int32& params);
    [NativeApiAttribute]
public void GetProgramResource(UInt32 program, GLEnum programInterface, UInt32 index, UInt32 propCount, GLEnum* props, UInt32 count, UInt32* length, Int32* params);
    [NativeApiAttribute]
public void GetProgramResource(UInt32 program, GLEnum programInterface, UInt32 index, UInt32 propCount, GLEnum* props, UInt32 count, UInt32* length, Int32& params);
    [NativeApiAttribute]
public void GetProgramResource(UInt32 program, GLEnum programInterface, UInt32 index, UInt32 propCount, GLEnum* props, UInt32 count, UInt32& length, Int32* params);
    [NativeApiAttribute]
public void GetProgramResource(UInt32 program, GLEnum programInterface, UInt32 index, UInt32 propCount, GLEnum* props, UInt32 count, UInt32& length, Int32& params);
    [NativeApiAttribute]
public void GetProgramResource(UInt32 program, GLEnum programInterface, UInt32 index, UInt32 propCount, GLEnum& props, UInt32 count, UInt32* length, Int32* params);
    [NativeApiAttribute]
public void GetProgramResource(UInt32 program, GLEnum programInterface, UInt32 index, UInt32 propCount, GLEnum& props, UInt32 count, UInt32* length, Int32& params);
    [NativeApiAttribute]
public void GetProgramResource(UInt32 program, GLEnum programInterface, UInt32 index, UInt32 propCount, GLEnum& props, UInt32 count, UInt32& length, Int32* params);
    [NativeApiAttribute]
public void GetProgramResource(UInt32 program, GLEnum programInterface, UInt32 index, UInt32 propCount, GLEnum& props, UInt32 count, UInt32& length, Int32& params);
    [NativeApiAttribute]
public void GetProgramResource(UInt32 program, GLEnum programInterface, UInt32 index, UInt32 propCount, ProgramResourceProperty* props, UInt32 count, UInt32* length, Int32* params);
    [NativeApiAttribute]
public void GetProgramResource(UInt32 program, GLEnum programInterface, UInt32 index, UInt32 propCount, ProgramResourceProperty* props, UInt32 count, UInt32* length, Int32& params);
    [NativeApiAttribute]
public void GetProgramResource(UInt32 program, GLEnum programInterface, UInt32 index, UInt32 propCount, ProgramResourceProperty* props, UInt32 count, UInt32& length, Int32* params);
    [NativeApiAttribute]
public void GetProgramResource(UInt32 program, GLEnum programInterface, UInt32 index, UInt32 propCount, ProgramResourceProperty* props, UInt32 count, UInt32& length, Int32& params);
    [NativeApiAttribute]
public void GetProgramResource(UInt32 program, GLEnum programInterface, UInt32 index, UInt32 propCount, ProgramResourceProperty& props, UInt32 count, UInt32* length, Int32* params);
    [NativeApiAttribute]
public void GetProgramResource(UInt32 program, GLEnum programInterface, UInt32 index, UInt32 propCount, ProgramResourceProperty& props, UInt32 count, UInt32* length, Int32& params);
    [NativeApiAttribute]
public void GetProgramResource(UInt32 program, GLEnum programInterface, UInt32 index, UInt32 propCount, ProgramResourceProperty& props, UInt32 count, UInt32& length, Int32* params);
    [NativeApiAttribute]
public void GetProgramResource(UInt32 program, GLEnum programInterface, UInt32 index, UInt32 propCount, ProgramResourceProperty& props, UInt32 count, UInt32& length, Int32& params);
    [NativeApiAttribute]
public void GetProgramResource(UInt32 program, ProgramInterface programInterface, UInt32 index, UInt32 propCount, GLEnum* props, UInt32 count, UInt32* length, Int32* params);
    [NativeApiAttribute]
public void GetProgramResource(UInt32 program, ProgramInterface programInterface, UInt32 index, UInt32 propCount, GLEnum* props, UInt32 count, UInt32* length, Int32& params);
    [NativeApiAttribute]
public void GetProgramResource(UInt32 program, ProgramInterface programInterface, UInt32 index, UInt32 propCount, GLEnum* props, UInt32 count, UInt32& length, Int32* params);
    [NativeApiAttribute]
public void GetProgramResource(UInt32 program, ProgramInterface programInterface, UInt32 index, UInt32 propCount, GLEnum* props, UInt32 count, UInt32& length, Int32& params);
    [NativeApiAttribute]
public void GetProgramResource(UInt32 program, ProgramInterface programInterface, UInt32 index, UInt32 propCount, GLEnum& props, UInt32 count, UInt32* length, Int32* params);
    [NativeApiAttribute]
public void GetProgramResource(UInt32 program, ProgramInterface programInterface, UInt32 index, UInt32 propCount, GLEnum& props, UInt32 count, UInt32* length, Int32& params);
    [NativeApiAttribute]
public void GetProgramResource(UInt32 program, ProgramInterface programInterface, UInt32 index, UInt32 propCount, GLEnum& props, UInt32 count, UInt32& length, Int32* params);
    [NativeApiAttribute]
public void GetProgramResource(UInt32 program, ProgramInterface programInterface, UInt32 index, UInt32 propCount, GLEnum& props, UInt32 count, UInt32& length, Int32& params);
    [NativeApiAttribute]
public void GetProgramResource(UInt32 program, ProgramInterface programInterface, UInt32 index, UInt32 propCount, ProgramResourceProperty* props, UInt32 count, UInt32* length, Int32* params);
    [NativeApiAttribute]
public void GetProgramResource(UInt32 program, ProgramInterface programInterface, UInt32 index, UInt32 propCount, ProgramResourceProperty* props, UInt32 count, UInt32* length, Int32& params);
    [NativeApiAttribute]
public void GetProgramResource(UInt32 program, ProgramInterface programInterface, UInt32 index, UInt32 propCount, ProgramResourceProperty* props, UInt32 count, UInt32& length, Int32* params);
    [NativeApiAttribute]
public void GetProgramResource(UInt32 program, ProgramInterface programInterface, UInt32 index, UInt32 propCount, ProgramResourceProperty* props, UInt32 count, UInt32& length, Int32& params);
    [NativeApiAttribute]
public void GetProgramResource(UInt32 program, ProgramInterface programInterface, UInt32 index, UInt32 propCount, ProgramResourceProperty& props, UInt32 count, UInt32* length, Int32* params);
    [NativeApiAttribute]
public void GetProgramResource(UInt32 program, ProgramInterface programInterface, UInt32 index, UInt32 propCount, ProgramResourceProperty& props, UInt32 count, UInt32* length, Int32& params);
    [NativeApiAttribute]
public void GetProgramResource(UInt32 program, ProgramInterface programInterface, UInt32 index, UInt32 propCount, ProgramResourceProperty& props, UInt32 count, UInt32& length, Int32* params);
    [NativeApiAttribute]
public void GetProgramResource(UInt32 program, ProgramInterface programInterface, UInt32 index, UInt32 propCount, ProgramResourceProperty& props, UInt32 count, UInt32& length, Int32& params);
    [NativeApiAttribute]
public UInt32 GetProgramResourceIndex(UInt32 program, GLEnum programInterface, Byte* name);
    [NativeApiAttribute]
public UInt32 GetProgramResourceIndex(UInt32 program, GLEnum programInterface, Byte& name);
    [NativeApiAttribute]
public UInt32 GetProgramResourceIndex(UInt32 program, GLEnum programInterface, string name);
    [NativeApiAttribute]
public UInt32 GetProgramResourceIndex(UInt32 program, ProgramInterface programInterface, Byte* name);
    [NativeApiAttribute]
public UInt32 GetProgramResourceIndex(UInt32 program, ProgramInterface programInterface, Byte& name);
    [NativeApiAttribute]
public UInt32 GetProgramResourceIndex(UInt32 program, ProgramInterface programInterface, string name);
    [NativeApiAttribute]
public int GetProgramResourceLocation(UInt32 program, GLEnum programInterface, Byte* name);
    [NativeApiAttribute]
public int GetProgramResourceLocation(UInt32 program, GLEnum programInterface, Byte& name);
    [NativeApiAttribute]
public int GetProgramResourceLocation(UInt32 program, GLEnum programInterface, string name);
    [NativeApiAttribute]
public int GetProgramResourceLocation(UInt32 program, ProgramInterface programInterface, Byte* name);
    [NativeApiAttribute]
public int GetProgramResourceLocation(UInt32 program, ProgramInterface programInterface, Byte& name);
    [NativeApiAttribute]
public int GetProgramResourceLocation(UInt32 program, ProgramInterface programInterface, string name);
    [NativeApiAttribute]
public int GetProgramResourceLocationIndex(UInt32 program, GLEnum programInterface, Byte* name);
    [NativeApiAttribute]
public int GetProgramResourceLocationIndex(UInt32 program, GLEnum programInterface, Byte& name);
    [NativeApiAttribute]
public int GetProgramResourceLocationIndex(UInt32 program, GLEnum programInterface, string name);
    [NativeApiAttribute]
public int GetProgramResourceLocationIndex(UInt32 program, ProgramInterface programInterface, Byte* name);
    [NativeApiAttribute]
public int GetProgramResourceLocationIndex(UInt32 program, ProgramInterface programInterface, Byte& name);
    [NativeApiAttribute]
public int GetProgramResourceLocationIndex(UInt32 program, ProgramInterface programInterface, string name);
    [NativeApiAttribute]
public void GetProgramResourceName(UInt32 program, GLEnum programInterface, UInt32 index, UInt32 bufSize, UInt32* length, Byte* name);
    [NativeApiAttribute]
public void GetProgramResourceName(UInt32 program, GLEnum programInterface, UInt32 index, UInt32 bufSize, UInt32* length, Byte& name);
    [NativeApiAttribute]
public void GetProgramResourceName(UInt32 program, GLEnum programInterface, UInt32 index, UInt32 bufSize, UInt32* length, String& name);
    [NativeApiAttribute]
public void GetProgramResourceName(UInt32 program, GLEnum programInterface, UInt32 index, UInt32 bufSize, UInt32& length, Byte* name);
    [NativeApiAttribute]
public void GetProgramResourceName(UInt32 program, GLEnum programInterface, UInt32 index, UInt32 bufSize, UInt32& length, Byte& name);
    [NativeApiAttribute]
public void GetProgramResourceName(UInt32 program, GLEnum programInterface, UInt32 index, UInt32 bufSize, UInt32& length, String& name);
    [NativeApiAttribute]
public void GetProgramResourceName(UInt32 program, ProgramInterface programInterface, UInt32 index, UInt32 bufSize, UInt32* length, Byte* name);
    [NativeApiAttribute]
public void GetProgramResourceName(UInt32 program, ProgramInterface programInterface, UInt32 index, UInt32 bufSize, UInt32* length, Byte& name);
    [NativeApiAttribute]
public void GetProgramResourceName(UInt32 program, ProgramInterface programInterface, UInt32 index, UInt32 bufSize, UInt32* length, String& name);
    [NativeApiAttribute]
public void GetProgramResourceName(UInt32 program, ProgramInterface programInterface, UInt32 index, UInt32 bufSize, UInt32& length, Byte* name);
    [NativeApiAttribute]
public void GetProgramResourceName(UInt32 program, ProgramInterface programInterface, UInt32 index, UInt32 bufSize, UInt32& length, Byte& name);
    [NativeApiAttribute]
public void GetProgramResourceName(UInt32 program, ProgramInterface programInterface, UInt32 index, UInt32 bufSize, UInt32& length, String& name);
    [NativeApiAttribute]
public void InvalidateBufferData(UInt32 buffer);
    [NativeApiAttribute]
public void InvalidateBufferSubData(UInt32 buffer, IntPtr offset, UIntPtr length);
    [NativeApiAttribute]
public void InvalidateFramebuffer(GLEnum target, UInt32 numAttachments, GLEnum* attachments);
    [NativeApiAttribute]
public void InvalidateFramebuffer(GLEnum target, UInt32 numAttachments, GLEnum& attachments);
    [NativeApiAttribute]
public void InvalidateFramebuffer(GLEnum target, UInt32 numAttachments, InvalidateFramebufferAttachment* attachments);
    [NativeApiAttribute]
public void InvalidateFramebuffer(GLEnum target, UInt32 numAttachments, InvalidateFramebufferAttachment& attachments);
    [NativeApiAttribute]
public void InvalidateFramebuffer(FramebufferTarget target, UInt32 numAttachments, GLEnum* attachments);
    [NativeApiAttribute]
public void InvalidateFramebuffer(FramebufferTarget target, UInt32 numAttachments, GLEnum& attachments);
    [NativeApiAttribute]
public void InvalidateFramebuffer(FramebufferTarget target, UInt32 numAttachments, InvalidateFramebufferAttachment* attachments);
    [NativeApiAttribute]
public void InvalidateFramebuffer(FramebufferTarget target, UInt32 numAttachments, InvalidateFramebufferAttachment& attachments);
    [NativeApiAttribute]
public void InvalidateSubFramebuffer(GLEnum target, UInt32 numAttachments, GLEnum* attachments, int x, int y, UInt32 width, UInt32 height);
    [NativeApiAttribute]
public void InvalidateSubFramebuffer(GLEnum target, UInt32 numAttachments, GLEnum& attachments, int x, int y, UInt32 width, UInt32 height);
    [NativeApiAttribute]
public void InvalidateSubFramebuffer(GLEnum target, UInt32 numAttachments, InvalidateFramebufferAttachment* attachments, int x, int y, UInt32 width, UInt32 height);
    [NativeApiAttribute]
public void InvalidateSubFramebuffer(GLEnum target, UInt32 numAttachments, InvalidateFramebufferAttachment& attachments, int x, int y, UInt32 width, UInt32 height);
    [NativeApiAttribute]
public void InvalidateSubFramebuffer(FramebufferTarget target, UInt32 numAttachments, GLEnum* attachments, int x, int y, UInt32 width, UInt32 height);
    [NativeApiAttribute]
public void InvalidateSubFramebuffer(FramebufferTarget target, UInt32 numAttachments, GLEnum& attachments, int x, int y, UInt32 width, UInt32 height);
    [NativeApiAttribute]
public void InvalidateSubFramebuffer(FramebufferTarget target, UInt32 numAttachments, InvalidateFramebufferAttachment* attachments, int x, int y, UInt32 width, UInt32 height);
    [NativeApiAttribute]
public void InvalidateSubFramebuffer(FramebufferTarget target, UInt32 numAttachments, InvalidateFramebufferAttachment& attachments, int x, int y, UInt32 width, UInt32 height);
    [NativeApiAttribute]
public void InvalidateTexImage(UInt32 texture, int level);
    [NativeApiAttribute]
public void InvalidateTexSubImage(UInt32 texture, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth);
    [NativeApiAttribute]
public void MultiDrawArraysIndirect(GLEnum mode, Void* indirect, UInt32 drawcount, UInt32 stride);
    [NativeApiAttribute]
public void MultiDrawArraysIndirect(GLEnum mode, T0& indirect, UInt32 drawcount, UInt32 stride);
    [NativeApiAttribute]
public void MultiDrawArraysIndirect(PrimitiveType mode, Void* indirect, UInt32 drawcount, UInt32 stride);
    [NativeApiAttribute]
public void MultiDrawArraysIndirect(PrimitiveType mode, T0& indirect, UInt32 drawcount, UInt32 stride);
    [NativeApiAttribute]
public void MultiDrawElementsIndirect(GLEnum mode, GLEnum type, Void* indirect, UInt32 drawcount, UInt32 stride);
    [NativeApiAttribute]
public void MultiDrawElementsIndirect(GLEnum mode, GLEnum type, T0& indirect, UInt32 drawcount, UInt32 stride);
    [NativeApiAttribute]
public void MultiDrawElementsIndirect(GLEnum mode, DrawElementsType type, Void* indirect, UInt32 drawcount, UInt32 stride);
    [NativeApiAttribute]
public void MultiDrawElementsIndirect(GLEnum mode, DrawElementsType type, T0& indirect, UInt32 drawcount, UInt32 stride);
    [NativeApiAttribute]
public void MultiDrawElementsIndirect(PrimitiveType mode, GLEnum type, Void* indirect, UInt32 drawcount, UInt32 stride);
    [NativeApiAttribute]
public void MultiDrawElementsIndirect(PrimitiveType mode, GLEnum type, T0& indirect, UInt32 drawcount, UInt32 stride);
    [NativeApiAttribute]
public void MultiDrawElementsIndirect(PrimitiveType mode, DrawElementsType type, Void* indirect, UInt32 drawcount, UInt32 stride);
    [NativeApiAttribute]
public void MultiDrawElementsIndirect(PrimitiveType mode, DrawElementsType type, T0& indirect, UInt32 drawcount, UInt32 stride);
    [NativeApiAttribute]
public void ObjectLabel(GLEnum identifier, UInt32 name, UInt32 length, Byte* label);
    [NativeApiAttribute]
public void ObjectLabel(GLEnum identifier, UInt32 name, UInt32 length, Byte& label);
    [NativeApiAttribute]
public void ObjectLabel(GLEnum identifier, UInt32 name, UInt32 length, string label);
    [NativeApiAttribute]
public void ObjectLabel(ObjectIdentifier identifier, UInt32 name, UInt32 length, Byte* label);
    [NativeApiAttribute]
public void ObjectLabel(ObjectIdentifier identifier, UInt32 name, UInt32 length, Byte& label);
    [NativeApiAttribute]
public void ObjectLabel(ObjectIdentifier identifier, UInt32 name, UInt32 length, string label);
    [NativeApiAttribute]
public void ObjectPtrLabel(Void* ptr, UInt32 length, Byte* label);
    [NativeApiAttribute]
public void ObjectPtrLabel(Void* ptr, UInt32 length, Byte& label);
    [NativeApiAttribute]
public void ObjectPtrLabel(Void* ptr, UInt32 length, string label);
    [NativeApiAttribute]
public void ObjectPtrLabel(T0& ptr, UInt32 length, Byte* label);
    [NativeApiAttribute]
public void ObjectPtrLabel(T0& ptr, UInt32 length, Byte& label);
    [NativeApiAttribute]
public void ObjectPtrLabel(T0& ptr, UInt32 length, string label);
    [NativeApiAttribute]
public void PopDebugGroup();
    [NativeApiAttribute]
public void PushDebugGroup(GLEnum source, UInt32 id, UInt32 length, Byte* message);
    [NativeApiAttribute]
public void PushDebugGroup(GLEnum source, UInt32 id, UInt32 length, Byte& message);
    [NativeApiAttribute]
public void PushDebugGroup(GLEnum source, UInt32 id, UInt32 length, string message);
    [NativeApiAttribute]
public void PushDebugGroup(DebugSource source, UInt32 id, UInt32 length, Byte* message);
    [NativeApiAttribute]
public void PushDebugGroup(DebugSource source, UInt32 id, UInt32 length, Byte& message);
    [NativeApiAttribute]
public void PushDebugGroup(DebugSource source, UInt32 id, UInt32 length, string message);
    [NativeApiAttribute]
public void ShaderStorageBlockBinding(UInt32 program, UInt32 storageBlockIndex, UInt32 storageBlockBinding);
    [NativeApiAttribute]
public void TexBufferRange(GLEnum target, GLEnum internalformat, UInt32 buffer, IntPtr offset, UIntPtr size);
    [NativeApiAttribute]
public void TexBufferRange(GLEnum target, SizedInternalFormat internalformat, UInt32 buffer, IntPtr offset, UIntPtr size);
    [NativeApiAttribute]
public void TexBufferRange(TextureTarget target, GLEnum internalformat, UInt32 buffer, IntPtr offset, UIntPtr size);
    [NativeApiAttribute]
public void TexBufferRange(TextureTarget target, SizedInternalFormat internalformat, UInt32 buffer, IntPtr offset, UIntPtr size);
    [NativeApiAttribute]
public void TexStorage2DMultisample(GLEnum target, UInt32 samples, GLEnum internalformat, UInt32 width, UInt32 height, bool fixedsamplelocations);
    [NativeApiAttribute]
public void TexStorage2DMultisample(GLEnum target, UInt32 samples, GLEnum internalformat, UInt32 width, UInt32 height, Boolean fixedsamplelocations);
    [NativeApiAttribute]
public void TexStorage2DMultisample(GLEnum target, UInt32 samples, SizedInternalFormat internalformat, UInt32 width, UInt32 height, bool fixedsamplelocations);
    [NativeApiAttribute]
public void TexStorage2DMultisample(GLEnum target, UInt32 samples, SizedInternalFormat internalformat, UInt32 width, UInt32 height, Boolean fixedsamplelocations);
    [NativeApiAttribute]
public void TexStorage2DMultisample(TextureTarget target, UInt32 samples, GLEnum internalformat, UInt32 width, UInt32 height, bool fixedsamplelocations);
    [NativeApiAttribute]
public void TexStorage2DMultisample(TextureTarget target, UInt32 samples, GLEnum internalformat, UInt32 width, UInt32 height, Boolean fixedsamplelocations);
    [NativeApiAttribute]
public void TexStorage2DMultisample(TextureTarget target, UInt32 samples, SizedInternalFormat internalformat, UInt32 width, UInt32 height, bool fixedsamplelocations);
    [NativeApiAttribute]
public void TexStorage2DMultisample(TextureTarget target, UInt32 samples, SizedInternalFormat internalformat, UInt32 width, UInt32 height, Boolean fixedsamplelocations);
    [NativeApiAttribute]
public void TexStorage3DMultisample(GLEnum target, UInt32 samples, GLEnum internalformat, UInt32 width, UInt32 height, UInt32 depth, bool fixedsamplelocations);
    [NativeApiAttribute]
public void TexStorage3DMultisample(GLEnum target, UInt32 samples, GLEnum internalformat, UInt32 width, UInt32 height, UInt32 depth, Boolean fixedsamplelocations);
    [NativeApiAttribute]
public void TexStorage3DMultisample(GLEnum target, UInt32 samples, SizedInternalFormat internalformat, UInt32 width, UInt32 height, UInt32 depth, bool fixedsamplelocations);
    [NativeApiAttribute]
public void TexStorage3DMultisample(GLEnum target, UInt32 samples, SizedInternalFormat internalformat, UInt32 width, UInt32 height, UInt32 depth, Boolean fixedsamplelocations);
    [NativeApiAttribute]
public void TexStorage3DMultisample(TextureTarget target, UInt32 samples, GLEnum internalformat, UInt32 width, UInt32 height, UInt32 depth, bool fixedsamplelocations);
    [NativeApiAttribute]
public void TexStorage3DMultisample(TextureTarget target, UInt32 samples, GLEnum internalformat, UInt32 width, UInt32 height, UInt32 depth, Boolean fixedsamplelocations);
    [NativeApiAttribute]
public void TexStorage3DMultisample(TextureTarget target, UInt32 samples, SizedInternalFormat internalformat, UInt32 width, UInt32 height, UInt32 depth, bool fixedsamplelocations);
    [NativeApiAttribute]
public void TexStorage3DMultisample(TextureTarget target, UInt32 samples, SizedInternalFormat internalformat, UInt32 width, UInt32 height, UInt32 depth, Boolean fixedsamplelocations);
    [NativeApiAttribute]
public void TextureView(UInt32 texture, GLEnum target, UInt32 origtexture, GLEnum internalformat, UInt32 minlevel, UInt32 numlevels, UInt32 minlayer, UInt32 numlayers);
    [NativeApiAttribute]
public void TextureView(UInt32 texture, GLEnum target, UInt32 origtexture, SizedInternalFormat internalformat, UInt32 minlevel, UInt32 numlevels, UInt32 minlayer, UInt32 numlayers);
    [NativeApiAttribute]
public void TextureView(UInt32 texture, TextureTarget target, UInt32 origtexture, GLEnum internalformat, UInt32 minlevel, UInt32 numlevels, UInt32 minlayer, UInt32 numlayers);
    [NativeApiAttribute]
public void TextureView(UInt32 texture, TextureTarget target, UInt32 origtexture, SizedInternalFormat internalformat, UInt32 minlevel, UInt32 numlevels, UInt32 minlayer, UInt32 numlayers);
    [NativeApiAttribute]
public void VertexAttribBinding(UInt32 attribindex, UInt32 bindingindex);
    [NativeApiAttribute]
public void VertexAttribFormat(UInt32 attribindex, int size, GLEnum type, bool normalized, UInt32 relativeoffset);
    [NativeApiAttribute]
public void VertexAttribFormat(UInt32 attribindex, int size, GLEnum type, Boolean normalized, UInt32 relativeoffset);
    [NativeApiAttribute]
public void VertexAttribFormat(UInt32 attribindex, int size, VertexAttribType type, bool normalized, UInt32 relativeoffset);
    [NativeApiAttribute]
public void VertexAttribFormat(UInt32 attribindex, int size, VertexAttribType type, Boolean normalized, UInt32 relativeoffset);
    [NativeApiAttribute]
public void VertexAttribIFormat(UInt32 attribindex, int size, GLEnum type, UInt32 relativeoffset);
    [NativeApiAttribute]
public void VertexAttribIFormat(UInt32 attribindex, int size, VertexAttribIType type, UInt32 relativeoffset);
    [NativeApiAttribute]
public void VertexAttribLFormat(UInt32 attribindex, int size, GLEnum type, UInt32 relativeoffset);
    [NativeApiAttribute]
public void VertexAttribLFormat(UInt32 attribindex, int size, VertexAttribLType type, UInt32 relativeoffset);
    [NativeApiAttribute]
public void VertexBindingDivisor(UInt32 bindingindex, UInt32 divisor);
    [NativeApiAttribute]
public void BindImageTexture(UInt32 unit, UInt32 texture, int level, bool layered, int layer, GLEnum access, GLEnum format);
    [NativeApiAttribute]
public void BindImageTexture(UInt32 unit, UInt32 texture, int level, bool layered, int layer, GLEnum access, InternalFormat format);
    [NativeApiAttribute]
public void BindImageTexture(UInt32 unit, UInt32 texture, int level, bool layered, int layer, BufferAccessARB access, GLEnum format);
    [NativeApiAttribute]
public void BindImageTexture(UInt32 unit, UInt32 texture, int level, bool layered, int layer, BufferAccessARB access, InternalFormat format);
    [NativeApiAttribute]
public void BindImageTexture(UInt32 unit, UInt32 texture, int level, Boolean layered, int layer, GLEnum access, GLEnum format);
    [NativeApiAttribute]
public void BindImageTexture(UInt32 unit, UInt32 texture, int level, Boolean layered, int layer, GLEnum access, InternalFormat format);
    [NativeApiAttribute]
public void BindImageTexture(UInt32 unit, UInt32 texture, int level, Boolean layered, int layer, BufferAccessARB access, GLEnum format);
    [NativeApiAttribute]
public void BindImageTexture(UInt32 unit, UInt32 texture, int level, Boolean layered, int layer, BufferAccessARB access, InternalFormat format);
    [NativeApiAttribute]
public void DrawArraysInstancedBaseInstance(GLEnum mode, int first, UInt32 count, UInt32 instancecount, UInt32 baseinstance);
    [NativeApiAttribute]
public void DrawArraysInstancedBaseInstance(PrimitiveType mode, int first, UInt32 count, UInt32 instancecount, UInt32 baseinstance);
    [NativeApiAttribute]
public void DrawElementsInstancedBaseInstance(GLEnum mode, UInt32 count, GLEnum type, Void* indices, UInt32 instancecount, UInt32 baseinstance);
    [NativeApiAttribute]
public void DrawElementsInstancedBaseInstance(GLEnum mode, UInt32 count, GLEnum type, T0& indices, UInt32 instancecount, UInt32 baseinstance);
    [NativeApiAttribute]
public void DrawElementsInstancedBaseInstance(GLEnum mode, UInt32 count, PrimitiveType type, Void* indices, UInt32 instancecount, UInt32 baseinstance);
    [NativeApiAttribute]
public void DrawElementsInstancedBaseInstance(GLEnum mode, UInt32 count, PrimitiveType type, T0& indices, UInt32 instancecount, UInt32 baseinstance);
    [NativeApiAttribute]
public void DrawElementsInstancedBaseInstance(PrimitiveType mode, UInt32 count, GLEnum type, Void* indices, UInt32 instancecount, UInt32 baseinstance);
    [NativeApiAttribute]
public void DrawElementsInstancedBaseInstance(PrimitiveType mode, UInt32 count, GLEnum type, T0& indices, UInt32 instancecount, UInt32 baseinstance);
    [NativeApiAttribute]
public void DrawElementsInstancedBaseInstance(PrimitiveType mode, UInt32 count, PrimitiveType type, Void* indices, UInt32 instancecount, UInt32 baseinstance);
    [NativeApiAttribute]
public void DrawElementsInstancedBaseInstance(PrimitiveType mode, UInt32 count, PrimitiveType type, T0& indices, UInt32 instancecount, UInt32 baseinstance);
    [NativeApiAttribute]
public void DrawElementsInstancedBaseVertexBaseInstance(GLEnum mode, UInt32 count, GLEnum type, Void* indices, UInt32 instancecount, int basevertex, UInt32 baseinstance);
    [NativeApiAttribute]
public void DrawElementsInstancedBaseVertexBaseInstance(GLEnum mode, UInt32 count, GLEnum type, T0& indices, UInt32 instancecount, int basevertex, UInt32 baseinstance);
    [NativeApiAttribute]
public void DrawElementsInstancedBaseVertexBaseInstance(GLEnum mode, UInt32 count, DrawElementsType type, Void* indices, UInt32 instancecount, int basevertex, UInt32 baseinstance);
    [NativeApiAttribute]
public void DrawElementsInstancedBaseVertexBaseInstance(GLEnum mode, UInt32 count, DrawElementsType type, T0& indices, UInt32 instancecount, int basevertex, UInt32 baseinstance);
    [NativeApiAttribute]
public void DrawElementsInstancedBaseVertexBaseInstance(PrimitiveType mode, UInt32 count, GLEnum type, Void* indices, UInt32 instancecount, int basevertex, UInt32 baseinstance);
    [NativeApiAttribute]
public void DrawElementsInstancedBaseVertexBaseInstance(PrimitiveType mode, UInt32 count, GLEnum type, T0& indices, UInt32 instancecount, int basevertex, UInt32 baseinstance);
    [NativeApiAttribute]
public void DrawElementsInstancedBaseVertexBaseInstance(PrimitiveType mode, UInt32 count, DrawElementsType type, Void* indices, UInt32 instancecount, int basevertex, UInt32 baseinstance);
    [NativeApiAttribute]
public void DrawElementsInstancedBaseVertexBaseInstance(PrimitiveType mode, UInt32 count, DrawElementsType type, T0& indices, UInt32 instancecount, int basevertex, UInt32 baseinstance);
    [NativeApiAttribute]
public void DrawTransformFeedbackInstanced(GLEnum mode, UInt32 id, UInt32 instancecount);
    [NativeApiAttribute]
public void DrawTransformFeedbackInstanced(PrimitiveType mode, UInt32 id, UInt32 instancecount);
    [NativeApiAttribute]
public void DrawTransformFeedbackStreamInstanced(GLEnum mode, UInt32 id, UInt32 stream, UInt32 instancecount);
    [NativeApiAttribute]
public void DrawTransformFeedbackStreamInstanced(PrimitiveType mode, UInt32 id, UInt32 stream, UInt32 instancecount);
    [NativeApiAttribute]
public void GetActiveAtomicCounterBuffer(UInt32 program, UInt32 bufferIndex, GLEnum pname, Int32* params);
    [NativeApiAttribute]
public void GetActiveAtomicCounterBuffer(UInt32 program, UInt32 bufferIndex, GLEnum pname, Int32& params);
    [NativeApiAttribute]
public void GetActiveAtomicCounterBuffer(UInt32 program, UInt32 bufferIndex, AtomicCounterBufferPName pname, Int32* params);
    [NativeApiAttribute]
public void GetActiveAtomicCounterBuffer(UInt32 program, UInt32 bufferIndex, AtomicCounterBufferPName pname, Int32& params);
    [NativeApiAttribute]
public void GetInternalformat(GLEnum target, GLEnum internalformat, GLEnum pname, UInt32 count, Int32* params);
    [NativeApiAttribute]
public void GetInternalformat(GLEnum target, GLEnum internalformat, GLEnum pname, UInt32 count, Int32& params);
    [NativeApiAttribute]
public void GetInternalformat(GLEnum target, GLEnum internalformat, InternalFormatPName pname, UInt32 count, Int32* params);
    [NativeApiAttribute]
public void GetInternalformat(GLEnum target, GLEnum internalformat, InternalFormatPName pname, UInt32 count, Int32& params);
    [NativeApiAttribute]
public void GetInternalformat(GLEnum target, InternalFormat internalformat, GLEnum pname, UInt32 count, Int32* params);
    [NativeApiAttribute]
public void GetInternalformat(GLEnum target, InternalFormat internalformat, GLEnum pname, UInt32 count, Int32& params);
    [NativeApiAttribute]
public void GetInternalformat(GLEnum target, InternalFormat internalformat, InternalFormatPName pname, UInt32 count, Int32* params);
    [NativeApiAttribute]
public void GetInternalformat(GLEnum target, InternalFormat internalformat, InternalFormatPName pname, UInt32 count, Int32& params);
    [NativeApiAttribute]
public void GetInternalformat(TextureTarget target, GLEnum internalformat, GLEnum pname, UInt32 count, Int32* params);
    [NativeApiAttribute]
public void GetInternalformat(TextureTarget target, GLEnum internalformat, GLEnum pname, UInt32 count, Int32& params);
    [NativeApiAttribute]
public void GetInternalformat(TextureTarget target, GLEnum internalformat, InternalFormatPName pname, UInt32 count, Int32* params);
    [NativeApiAttribute]
public void GetInternalformat(TextureTarget target, GLEnum internalformat, InternalFormatPName pname, UInt32 count, Int32& params);
    [NativeApiAttribute]
public void GetInternalformat(TextureTarget target, InternalFormat internalformat, GLEnum pname, UInt32 count, Int32* params);
    [NativeApiAttribute]
public void GetInternalformat(TextureTarget target, InternalFormat internalformat, GLEnum pname, UInt32 count, Int32& params);
    [NativeApiAttribute]
public void GetInternalformat(TextureTarget target, InternalFormat internalformat, InternalFormatPName pname, UInt32 count, Int32* params);
    [NativeApiAttribute]
public void GetInternalformat(TextureTarget target, InternalFormat internalformat, InternalFormatPName pname, UInt32 count, Int32& params);
    [NativeApiAttribute]
public void MemoryBarrier(UInt32 barriers);
    [NativeApiAttribute]
public void MemoryBarrier(MemoryBarrierMask barriers);
    [NativeApiAttribute]
public void TexStorage1D(GLEnum target, UInt32 levels, GLEnum internalformat, UInt32 width);
    [NativeApiAttribute]
public void TexStorage1D(GLEnum target, UInt32 levels, SizedInternalFormat internalformat, UInt32 width);
    [NativeApiAttribute]
public void TexStorage1D(TextureTarget target, UInt32 levels, GLEnum internalformat, UInt32 width);
    [NativeApiAttribute]
public void TexStorage1D(TextureTarget target, UInt32 levels, SizedInternalFormat internalformat, UInt32 width);
    [NativeApiAttribute]
public void TexStorage2D(GLEnum target, UInt32 levels, GLEnum internalformat, UInt32 width, UInt32 height);
    [NativeApiAttribute]
public void TexStorage2D(GLEnum target, UInt32 levels, SizedInternalFormat internalformat, UInt32 width, UInt32 height);
    [NativeApiAttribute]
public void TexStorage2D(TextureTarget target, UInt32 levels, GLEnum internalformat, UInt32 width, UInt32 height);
    [NativeApiAttribute]
public void TexStorage2D(TextureTarget target, UInt32 levels, SizedInternalFormat internalformat, UInt32 width, UInt32 height);
    [NativeApiAttribute]
public void TexStorage3D(GLEnum target, UInt32 levels, GLEnum internalformat, UInt32 width, UInt32 height, UInt32 depth);
    [NativeApiAttribute]
public void TexStorage3D(GLEnum target, UInt32 levels, SizedInternalFormat internalformat, UInt32 width, UInt32 height, UInt32 depth);
    [NativeApiAttribute]
public void TexStorage3D(TextureTarget target, UInt32 levels, GLEnum internalformat, UInt32 width, UInt32 height, UInt32 depth);
    [NativeApiAttribute]
public void TexStorage3D(TextureTarget target, UInt32 levels, SizedInternalFormat internalformat, UInt32 width, UInt32 height, UInt32 depth);
    [NativeApiAttribute]
public void ActiveShaderProgram(UInt32 pipeline, UInt32 program);
    [NativeApiAttribute]
public void BindProgramPipeline(UInt32 pipeline);
    [NativeApiAttribute]
public void ClearDepth(float d);
    [NativeApiAttribute]
public UInt32 CreateShaderProgram(GLEnum type, UInt32 count, Byte** strings);
    [NativeApiAttribute]
public UInt32 CreateShaderProgram(GLEnum type, UInt32 count, Byte*& strings);
    [NativeApiAttribute]
public UInt32 CreateShaderProgram(ShaderType type, UInt32 count, Byte** strings);
    [NativeApiAttribute]
public UInt32 CreateShaderProgram(ShaderType type, UInt32 count, Byte*& strings);
    [NativeApiAttribute]
public void DeleteProgramPipelines(UInt32 n, UInt32* pipelines);
    [NativeApiAttribute]
public void DeleteProgramPipelines(UInt32 n, UInt32& pipelines);
    [NativeApiAttribute]
public void DeleteProgramPipelines(UInt32 n, ProgramPipeline* pipelines);
    [NativeApiAttribute]
public void DeleteProgramPipelines(UInt32 n, ProgramPipeline& pipelines);
    [NativeApiAttribute]
public void DepthRange(float n, float f);
    [NativeApiAttribute]
public void DepthRangeArray(UInt32 first, UInt32 count, Double* v);
    [NativeApiAttribute]
public void DepthRangeArray(UInt32 first, UInt32 count, Double& v);
    [NativeApiAttribute]
public void DepthRangeIndexed(UInt32 index, double n, double f);
    [NativeApiAttribute]
public void GenProgramPipelines(UInt32 n, UInt32* pipelines);
    [NativeApiAttribute]
public void GenProgramPipelines(UInt32 n, UInt32& pipelines);
    [NativeApiAttribute]
public void GenProgramPipelines(UInt32 n, ProgramPipeline* pipelines);
    [NativeApiAttribute]
public void GenProgramPipelines(UInt32 n, ProgramPipeline& pipelines);
    [NativeApiAttribute]
public void GetDouble(GLEnum target, UInt32 index, Double* data);
    [NativeApiAttribute]
public void GetDouble(GLEnum target, UInt32 index, Double& data);
    [NativeApiAttribute]
public void GetDouble(GetPName target, UInt32 index, Double* data);
    [NativeApiAttribute]
public void GetDouble(GetPName target, UInt32 index, Double& data);
    [NativeApiAttribute]
public void GetFloat(GLEnum target, UInt32 index, Single* data);
    [NativeApiAttribute]
public void GetFloat(GLEnum target, UInt32 index, Single& data);
    [NativeApiAttribute]
public void GetFloat(GetPName target, UInt32 index, Single* data);
    [NativeApiAttribute]
public void GetFloat(GetPName target, UInt32 index, Single& data);
    [NativeApiAttribute]
public void GetProgramBinary(UInt32 program, UInt32 bufSize, UInt32* length, GLEnum* binaryFormat, Void* binary);
    [NativeApiAttribute]
public void GetProgramBinary(UInt32 program, UInt32 bufSize, UInt32* length, GLEnum* binaryFormat, T0& binary);
    [NativeApiAttribute]
public void GetProgramBinary(UInt32 program, UInt32 bufSize, UInt32* length, GLEnum& binaryFormat, Void* binary);
    [NativeApiAttribute]
public void GetProgramBinary(UInt32 program, UInt32 bufSize, UInt32* length, GLEnum& binaryFormat, T0& binary);
    [NativeApiAttribute]
public void GetProgramBinary(UInt32 program, UInt32 bufSize, UInt32& length, GLEnum* binaryFormat, Void* binary);
    [NativeApiAttribute]
public void GetProgramBinary(UInt32 program, UInt32 bufSize, UInt32& length, GLEnum* binaryFormat, T0& binary);
    [NativeApiAttribute]
public void GetProgramBinary(UInt32 program, UInt32 bufSize, UInt32& length, GLEnum& binaryFormat, Void* binary);
    [NativeApiAttribute]
public void GetProgramBinary(UInt32 program, UInt32 bufSize, UInt32& length, GLEnum& binaryFormat, T0& binary);
    [NativeApiAttribute]
public void GetProgramPipeline(UInt32 pipeline, GLEnum pname, Int32* params);
    [NativeApiAttribute]
public void GetProgramPipeline(UInt32 pipeline, GLEnum pname, Int32& params);
    [NativeApiAttribute]
public void GetProgramPipeline(UInt32 pipeline, PipelineParameterName pname, Int32* params);
    [NativeApiAttribute]
public void GetProgramPipeline(UInt32 pipeline, PipelineParameterName pname, Int32& params);
    [NativeApiAttribute]
public void GetProgramPipelineInfoLog(UInt32 pipeline, UInt32 bufSize, UInt32* length, Byte* infoLog);
    [NativeApiAttribute]
public void GetProgramPipelineInfoLog(UInt32 pipeline, UInt32 bufSize, UInt32* length, Byte& infoLog);
    [NativeApiAttribute]
public void GetProgramPipelineInfoLog(UInt32 pipeline, UInt32 bufSize, UInt32* length, String& infoLog);
    [NativeApiAttribute]
public void GetProgramPipelineInfoLog(UInt32 pipeline, UInt32 bufSize, UInt32& length, Byte* infoLog);
    [NativeApiAttribute]
public void GetProgramPipelineInfoLog(UInt32 pipeline, UInt32 bufSize, UInt32& length, Byte& infoLog);
    [NativeApiAttribute]
public void GetProgramPipelineInfoLog(UInt32 pipeline, UInt32 bufSize, UInt32& length, String& infoLog);
    [NativeApiAttribute]
public void GetShaderPrecisionFormat(GLEnum shadertype, GLEnum precisiontype, Int32* range, Int32* precision);
    [NativeApiAttribute]
public void GetShaderPrecisionFormat(GLEnum shadertype, GLEnum precisiontype, Int32* range, Int32& precision);
    [NativeApiAttribute]
public void GetShaderPrecisionFormat(GLEnum shadertype, GLEnum precisiontype, Int32& range, Int32* precision);
    [NativeApiAttribute]
public void GetShaderPrecisionFormat(GLEnum shadertype, GLEnum precisiontype, Int32& range, Int32& precision);
    [NativeApiAttribute]
public void GetShaderPrecisionFormat(GLEnum shadertype, PrecisionType precisiontype, Int32* range, Int32* precision);
    [NativeApiAttribute]
public void GetShaderPrecisionFormat(GLEnum shadertype, PrecisionType precisiontype, Int32* range, Int32& precision);
    [NativeApiAttribute]
public void GetShaderPrecisionFormat(GLEnum shadertype, PrecisionType precisiontype, Int32& range, Int32* precision);
    [NativeApiAttribute]
public void GetShaderPrecisionFormat(GLEnum shadertype, PrecisionType precisiontype, Int32& range, Int32& precision);
    [NativeApiAttribute]
public void GetShaderPrecisionFormat(ShaderType shadertype, GLEnum precisiontype, Int32* range, Int32* precision);
    [NativeApiAttribute]
public void GetShaderPrecisionFormat(ShaderType shadertype, GLEnum precisiontype, Int32* range, Int32& precision);
    [NativeApiAttribute]
public void GetShaderPrecisionFormat(ShaderType shadertype, GLEnum precisiontype, Int32& range, Int32* precision);
    [NativeApiAttribute]
public void GetShaderPrecisionFormat(ShaderType shadertype, GLEnum precisiontype, Int32& range, Int32& precision);
    [NativeApiAttribute]
public void GetShaderPrecisionFormat(ShaderType shadertype, PrecisionType precisiontype, Int32* range, Int32* precision);
    [NativeApiAttribute]
public void GetShaderPrecisionFormat(ShaderType shadertype, PrecisionType precisiontype, Int32* range, Int32& precision);
    [NativeApiAttribute]
public void GetShaderPrecisionFormat(ShaderType shadertype, PrecisionType precisiontype, Int32& range, Int32* precision);
    [NativeApiAttribute]
public void GetShaderPrecisionFormat(ShaderType shadertype, PrecisionType precisiontype, Int32& range, Int32& precision);
    [NativeApiAttribute]
public void GetVertexAttribL(UInt32 index, GLEnum pname, Double* params);
    [NativeApiAttribute]
public void GetVertexAttribL(UInt32 index, GLEnum pname, Double& params);
    [NativeApiAttribute]
public void GetVertexAttribL(UInt32 index, VertexAttribEnum pname, Double* params);
    [NativeApiAttribute]
public void GetVertexAttribL(UInt32 index, VertexAttribEnum pname, Double& params);
    [NativeApiAttribute]
public bool IsProgramPipeline(UInt32 pipeline);
    [NativeApiAttribute]
public void ProgramBinary(UInt32 program, GLEnum binaryFormat, Void* binary, UInt32 length);
    [NativeApiAttribute]
public void ProgramBinary(UInt32 program, GLEnum binaryFormat, T0& binary, UInt32 length);
    [NativeApiAttribute]
public void ProgramParameter(UInt32 program, GLEnum pname, int value);
    [NativeApiAttribute]
public void ProgramParameter(UInt32 program, ProgramParameterPName pname, int value);
    [NativeApiAttribute]
public void ProgramUniform1(UInt32 program, int location, int v0);
    [NativeApiAttribute]
public void ProgramUniform1(UInt32 program, int location, UInt32 count, Int32* value);
    [NativeApiAttribute]
public void ProgramUniform1(UInt32 program, int location, UInt32 count, Int32& value);
    [NativeApiAttribute]
public void ProgramUniform1(UInt32 program, int location, float v0);
    [NativeApiAttribute]
public void ProgramUniform1(UInt32 program, int location, UInt32 count, Single* value);
    [NativeApiAttribute]
public void ProgramUniform1(UInt32 program, int location, UInt32 count, Single& value);
    [NativeApiAttribute]
public void ProgramUniform1(UInt32 program, int location, double v0);
    [NativeApiAttribute]
public void ProgramUniform1(UInt32 program, int location, UInt32 count, Double* value);
    [NativeApiAttribute]
public void ProgramUniform1(UInt32 program, int location, UInt32 count, Double& value);
    [NativeApiAttribute]
public void ProgramUniform1(UInt32 program, int location, UInt32 v0);
    [NativeApiAttribute]
public void ProgramUniform1(UInt32 program, int location, UInt32 count, UInt32* value);
    [NativeApiAttribute]
public void ProgramUniform1(UInt32 program, int location, UInt32 count, UInt32& value);
    [NativeApiAttribute]
public void ProgramUniform2(UInt32 program, int location, int v0, int v1);
    [NativeApiAttribute]
public void ProgramUniform2(UInt32 program, int location, UInt32 count, Int32* value);
    [NativeApiAttribute]
public void ProgramUniform2(UInt32 program, int location, UInt32 count, Int32& value);
    [NativeApiAttribute]
public void ProgramUniform2(UInt32 program, int location, float v0, float v1);
    [NativeApiAttribute]
public void ProgramUniform2(UInt32 program, int location, UInt32 count, Single* value);
    [NativeApiAttribute]
public void ProgramUniform2(UInt32 program, int location, UInt32 count, Single& value);
    [NativeApiAttribute]
public void ProgramUniform2(UInt32 program, int location, double v0, double v1);
    [NativeApiAttribute]
public void ProgramUniform2(UInt32 program, int location, UInt32 count, Double* value);
    [NativeApiAttribute]
public void ProgramUniform2(UInt32 program, int location, UInt32 count, Double& value);
    [NativeApiAttribute]
public void ProgramUniform2(UInt32 program, int location, UInt32 v0, UInt32 v1);
    [NativeApiAttribute]
public void ProgramUniform2(UInt32 program, int location, UInt32 count, UInt32* value);
    [NativeApiAttribute]
public void ProgramUniform2(UInt32 program, int location, UInt32 count, UInt32& value);
    [NativeApiAttribute]
public void ProgramUniform3(UInt32 program, int location, int v0, int v1, int v2);
    [NativeApiAttribute]
public void ProgramUniform3(UInt32 program, int location, UInt32 count, Int32* value);
    [NativeApiAttribute]
public void ProgramUniform3(UInt32 program, int location, UInt32 count, Int32& value);
    [NativeApiAttribute]
public void ProgramUniform3(UInt32 program, int location, float v0, float v1, float v2);
    [NativeApiAttribute]
public void ProgramUniform3(UInt32 program, int location, UInt32 count, Single* value);
    [NativeApiAttribute]
public void ProgramUniform3(UInt32 program, int location, UInt32 count, Single& value);
    [NativeApiAttribute]
public void ProgramUniform3(UInt32 program, int location, double v0, double v1, double v2);
    [NativeApiAttribute]
public void ProgramUniform3(UInt32 program, int location, UInt32 count, Double* value);
    [NativeApiAttribute]
public void ProgramUniform3(UInt32 program, int location, UInt32 count, Double& value);
    [NativeApiAttribute]
public void ProgramUniform3(UInt32 program, int location, UInt32 v0, UInt32 v1, UInt32 v2);
    [NativeApiAttribute]
public void ProgramUniform3(UInt32 program, int location, UInt32 count, UInt32* value);
    [NativeApiAttribute]
public void ProgramUniform3(UInt32 program, int location, UInt32 count, UInt32& value);
    [NativeApiAttribute]
public void ProgramUniform4(UInt32 program, int location, int v0, int v1, int v2, int v3);
    [NativeApiAttribute]
public void ProgramUniform4(UInt32 program, int location, UInt32 count, Int32* value);
    [NativeApiAttribute]
public void ProgramUniform4(UInt32 program, int location, UInt32 count, Int32& value);
    [NativeApiAttribute]
public void ProgramUniform4(UInt32 program, int location, float v0, float v1, float v2, float v3);
    [NativeApiAttribute]
public void ProgramUniform4(UInt32 program, int location, UInt32 count, Single* value);
    [NativeApiAttribute]
public void ProgramUniform4(UInt32 program, int location, UInt32 count, Single& value);
    [NativeApiAttribute]
public void ProgramUniform4(UInt32 program, int location, double v0, double v1, double v2, double v3);
    [NativeApiAttribute]
public void ProgramUniform4(UInt32 program, int location, UInt32 count, Double* value);
    [NativeApiAttribute]
public void ProgramUniform4(UInt32 program, int location, UInt32 count, Double& value);
    [NativeApiAttribute]
public void ProgramUniform4(UInt32 program, int location, UInt32 v0, UInt32 v1, UInt32 v2, UInt32 v3);
    [NativeApiAttribute]
public void ProgramUniform4(UInt32 program, int location, UInt32 count, UInt32* value);
    [NativeApiAttribute]
public void ProgramUniform4(UInt32 program, int location, UInt32 count, UInt32& value);
    [NativeApiAttribute]
public void ProgramUniformMatrix2(UInt32 program, int location, UInt32 count, bool transpose, Single* value);
    [NativeApiAttribute]
public void ProgramUniformMatrix2(UInt32 program, int location, UInt32 count, bool transpose, Single& value);
    [NativeApiAttribute]
public void ProgramUniformMatrix2(UInt32 program, int location, UInt32 count, Boolean transpose, Single* value);
    [NativeApiAttribute]
public void ProgramUniformMatrix2(UInt32 program, int location, UInt32 count, Boolean transpose, Single& value);
    [NativeApiAttribute]
public void ProgramUniformMatrix2(UInt32 program, int location, UInt32 count, bool transpose, Double* value);
    [NativeApiAttribute]
public void ProgramUniformMatrix2(UInt32 program, int location, UInt32 count, bool transpose, Double& value);
    [NativeApiAttribute]
public void ProgramUniformMatrix2(UInt32 program, int location, UInt32 count, Boolean transpose, Double* value);
    [NativeApiAttribute]
public void ProgramUniformMatrix2(UInt32 program, int location, UInt32 count, Boolean transpose, Double& value);
    [NativeApiAttribute]
public void ProgramUniformMatrix2x3(UInt32 program, int location, UInt32 count, bool transpose, Single* value);
    [NativeApiAttribute]
public void ProgramUniformMatrix2x3(UInt32 program, int location, UInt32 count, bool transpose, Single& value);
    [NativeApiAttribute]
public void ProgramUniformMatrix2x3(UInt32 program, int location, UInt32 count, Boolean transpose, Single* value);
    [NativeApiAttribute]
public void ProgramUniformMatrix2x3(UInt32 program, int location, UInt32 count, Boolean transpose, Single& value);
    [NativeApiAttribute]
public void ProgramUniformMatrix2x3(UInt32 program, int location, UInt32 count, bool transpose, Double* value);
    [NativeApiAttribute]
public void ProgramUniformMatrix2x3(UInt32 program, int location, UInt32 count, bool transpose, Double& value);
    [NativeApiAttribute]
public void ProgramUniformMatrix2x3(UInt32 program, int location, UInt32 count, Boolean transpose, Double* value);
    [NativeApiAttribute]
public void ProgramUniformMatrix2x3(UInt32 program, int location, UInt32 count, Boolean transpose, Double& value);
    [NativeApiAttribute]
public void ProgramUniformMatrix2x4(UInt32 program, int location, UInt32 count, bool transpose, Single* value);
    [NativeApiAttribute]
public void ProgramUniformMatrix2x4(UInt32 program, int location, UInt32 count, bool transpose, Single& value);
    [NativeApiAttribute]
public void ProgramUniformMatrix2x4(UInt32 program, int location, UInt32 count, Boolean transpose, Single* value);
    [NativeApiAttribute]
public void ProgramUniformMatrix2x4(UInt32 program, int location, UInt32 count, Boolean transpose, Single& value);
    [NativeApiAttribute]
public void ProgramUniformMatrix2x4(UInt32 program, int location, UInt32 count, bool transpose, Double* value);
    [NativeApiAttribute]
public void ProgramUniformMatrix2x4(UInt32 program, int location, UInt32 count, bool transpose, Double& value);
    [NativeApiAttribute]
public void ProgramUniformMatrix2x4(UInt32 program, int location, UInt32 count, Boolean transpose, Double* value);
    [NativeApiAttribute]
public void ProgramUniformMatrix2x4(UInt32 program, int location, UInt32 count, Boolean transpose, Double& value);
    [NativeApiAttribute]
public void ProgramUniformMatrix3(UInt32 program, int location, UInt32 count, bool transpose, Single* value);
    [NativeApiAttribute]
public void ProgramUniformMatrix3(UInt32 program, int location, UInt32 count, bool transpose, Single& value);
    [NativeApiAttribute]
public void ProgramUniformMatrix3(UInt32 program, int location, UInt32 count, Boolean transpose, Single* value);
    [NativeApiAttribute]
public void ProgramUniformMatrix3(UInt32 program, int location, UInt32 count, Boolean transpose, Single& value);
    [NativeApiAttribute]
public void ProgramUniformMatrix3(UInt32 program, int location, UInt32 count, bool transpose, Double* value);
    [NativeApiAttribute]
public void ProgramUniformMatrix3(UInt32 program, int location, UInt32 count, bool transpose, Double& value);
    [NativeApiAttribute]
public void ProgramUniformMatrix3(UInt32 program, int location, UInt32 count, Boolean transpose, Double* value);
    [NativeApiAttribute]
public void ProgramUniformMatrix3(UInt32 program, int location, UInt32 count, Boolean transpose, Double& value);
    [NativeApiAttribute]
public void ProgramUniformMatrix3x2(UInt32 program, int location, UInt32 count, bool transpose, Single* value);
    [NativeApiAttribute]
public void ProgramUniformMatrix3x2(UInt32 program, int location, UInt32 count, bool transpose, Single& value);
    [NativeApiAttribute]
public void ProgramUniformMatrix3x2(UInt32 program, int location, UInt32 count, Boolean transpose, Single* value);
    [NativeApiAttribute]
public void ProgramUniformMatrix3x2(UInt32 program, int location, UInt32 count, Boolean transpose, Single& value);
    [NativeApiAttribute]
public void ProgramUniformMatrix3x2(UInt32 program, int location, UInt32 count, bool transpose, Double* value);
    [NativeApiAttribute]
public void ProgramUniformMatrix3x2(UInt32 program, int location, UInt32 count, bool transpose, Double& value);
    [NativeApiAttribute]
public void ProgramUniformMatrix3x2(UInt32 program, int location, UInt32 count, Boolean transpose, Double* value);
    [NativeApiAttribute]
public void ProgramUniformMatrix3x2(UInt32 program, int location, UInt32 count, Boolean transpose, Double& value);
    [NativeApiAttribute]
public void ProgramUniformMatrix3x4(UInt32 program, int location, UInt32 count, bool transpose, Single* value);
    [NativeApiAttribute]
public void ProgramUniformMatrix3x4(UInt32 program, int location, UInt32 count, bool transpose, Single& value);
    [NativeApiAttribute]
public void ProgramUniformMatrix3x4(UInt32 program, int location, UInt32 count, Boolean transpose, Single* value);
    [NativeApiAttribute]
public void ProgramUniformMatrix3x4(UInt32 program, int location, UInt32 count, Boolean transpose, Single& value);
    [NativeApiAttribute]
public void ProgramUniformMatrix3x4(UInt32 program, int location, UInt32 count, bool transpose, Double* value);
    [NativeApiAttribute]
public void ProgramUniformMatrix3x4(UInt32 program, int location, UInt32 count, bool transpose, Double& value);
    [NativeApiAttribute]
public void ProgramUniformMatrix3x4(UInt32 program, int location, UInt32 count, Boolean transpose, Double* value);
    [NativeApiAttribute]
public void ProgramUniformMatrix3x4(UInt32 program, int location, UInt32 count, Boolean transpose, Double& value);
    [NativeApiAttribute]
public void ProgramUniformMatrix4(UInt32 program, int location, UInt32 count, bool transpose, Single* value);
    [NativeApiAttribute]
public void ProgramUniformMatrix4(UInt32 program, int location, UInt32 count, bool transpose, Single& value);
    [NativeApiAttribute]
public void ProgramUniformMatrix4(UInt32 program, int location, UInt32 count, Boolean transpose, Single* value);
    [NativeApiAttribute]
public void ProgramUniformMatrix4(UInt32 program, int location, UInt32 count, Boolean transpose, Single& value);
    [NativeApiAttribute]
public void ProgramUniformMatrix4(UInt32 program, int location, UInt32 count, bool transpose, Double* value);
    [NativeApiAttribute]
public void ProgramUniformMatrix4(UInt32 program, int location, UInt32 count, bool transpose, Double& value);
    [NativeApiAttribute]
public void ProgramUniformMatrix4(UInt32 program, int location, UInt32 count, Boolean transpose, Double* value);
    [NativeApiAttribute]
public void ProgramUniformMatrix4(UInt32 program, int location, UInt32 count, Boolean transpose, Double& value);
    [NativeApiAttribute]
public void ProgramUniformMatrix4x2(UInt32 program, int location, UInt32 count, bool transpose, Single* value);
    [NativeApiAttribute]
public void ProgramUniformMatrix4x2(UInt32 program, int location, UInt32 count, bool transpose, Single& value);
    [NativeApiAttribute]
public void ProgramUniformMatrix4x2(UInt32 program, int location, UInt32 count, Boolean transpose, Single* value);
    [NativeApiAttribute]
public void ProgramUniformMatrix4x2(UInt32 program, int location, UInt32 count, Boolean transpose, Single& value);
    [NativeApiAttribute]
public void ProgramUniformMatrix4x2(UInt32 program, int location, UInt32 count, bool transpose, Double* value);
    [NativeApiAttribute]
public void ProgramUniformMatrix4x2(UInt32 program, int location, UInt32 count, bool transpose, Double& value);
    [NativeApiAttribute]
public void ProgramUniformMatrix4x2(UInt32 program, int location, UInt32 count, Boolean transpose, Double* value);
    [NativeApiAttribute]
public void ProgramUniformMatrix4x2(UInt32 program, int location, UInt32 count, Boolean transpose, Double& value);
    [NativeApiAttribute]
public void ProgramUniformMatrix4x3(UInt32 program, int location, UInt32 count, bool transpose, Single* value);
    [NativeApiAttribute]
public void ProgramUniformMatrix4x3(UInt32 program, int location, UInt32 count, bool transpose, Single& value);
    [NativeApiAttribute]
public void ProgramUniformMatrix4x3(UInt32 program, int location, UInt32 count, Boolean transpose, Single* value);
    [NativeApiAttribute]
public void ProgramUniformMatrix4x3(UInt32 program, int location, UInt32 count, Boolean transpose, Single& value);
    [NativeApiAttribute]
public void ProgramUniformMatrix4x3(UInt32 program, int location, UInt32 count, bool transpose, Double* value);
    [NativeApiAttribute]
public void ProgramUniformMatrix4x3(UInt32 program, int location, UInt32 count, bool transpose, Double& value);
    [NativeApiAttribute]
public void ProgramUniformMatrix4x3(UInt32 program, int location, UInt32 count, Boolean transpose, Double* value);
    [NativeApiAttribute]
public void ProgramUniformMatrix4x3(UInt32 program, int location, UInt32 count, Boolean transpose, Double& value);
    [NativeApiAttribute]
public void ReleaseShaderCompiler();
    [NativeApiAttribute]
public void ScissorArray(UInt32 first, UInt32 count, Int32* v);
    [NativeApiAttribute]
public void ScissorArray(UInt32 first, UInt32 count, Int32& v);
    [NativeApiAttribute]
public void ScissorIndexed(UInt32 index, int left, int bottom, UInt32 width, UInt32 height);
    [NativeApiAttribute]
public void ScissorIndexed(UInt32 index, Int32* v);
    [NativeApiAttribute]
public void ScissorIndexed(UInt32 index, Int32& v);
    [NativeApiAttribute]
public void ShaderBinary(UInt32 count, UInt32* shaders, GLEnum binaryFormat, Void* binary, UInt32 length);
    [NativeApiAttribute]
public void ShaderBinary(UInt32 count, UInt32* shaders, GLEnum binaryFormat, T0& binary, UInt32 length);
    [NativeApiAttribute]
public void ShaderBinary(UInt32 count, UInt32& shaders, GLEnum binaryFormat, Void* binary, UInt32 length);
    [NativeApiAttribute]
public void ShaderBinary(UInt32 count, UInt32& shaders, GLEnum binaryFormat, T0& binary, UInt32 length);
    [NativeApiAttribute]
public void ShaderBinary(UInt32 count, UInt32* shaders, ShaderBinaryFormat binaryFormat, Void* binary, UInt32 length);
    [NativeApiAttribute]
public void ShaderBinary(UInt32 count, UInt32* shaders, ShaderBinaryFormat binaryFormat, T0& binary, UInt32 length);
    [NativeApiAttribute]
public void ShaderBinary(UInt32 count, UInt32& shaders, ShaderBinaryFormat binaryFormat, Void* binary, UInt32 length);
    [NativeApiAttribute]
public void ShaderBinary(UInt32 count, UInt32& shaders, ShaderBinaryFormat binaryFormat, T0& binary, UInt32 length);
    [NativeApiAttribute]
public void ShaderBinary(UInt32 count, Shader* shaders, GLEnum binaryFormat, Void* binary, UInt32 length);
    [NativeApiAttribute]
public void ShaderBinary(UInt32 count, Shader* shaders, GLEnum binaryFormat, T0& binary, UInt32 length);
    [NativeApiAttribute]
public void ShaderBinary(UInt32 count, Shader& shaders, GLEnum binaryFormat, Void* binary, UInt32 length);
    [NativeApiAttribute]
public void ShaderBinary(UInt32 count, Shader& shaders, GLEnum binaryFormat, T0& binary, UInt32 length);
    [NativeApiAttribute]
public void ShaderBinary(UInt32 count, Shader* shaders, ShaderBinaryFormat binaryFormat, Void* binary, UInt32 length);
    [NativeApiAttribute]
public void ShaderBinary(UInt32 count, Shader* shaders, ShaderBinaryFormat binaryFormat, T0& binary, UInt32 length);
    [NativeApiAttribute]
public void ShaderBinary(UInt32 count, Shader& shaders, ShaderBinaryFormat binaryFormat, Void* binary, UInt32 length);
    [NativeApiAttribute]
public void ShaderBinary(UInt32 count, Shader& shaders, ShaderBinaryFormat binaryFormat, T0& binary, UInt32 length);
    [NativeApiAttribute]
public void UseProgramStages(UInt32 pipeline, UInt32 stages, UInt32 program);
    [NativeApiAttribute]
public void UseProgramStages(UInt32 pipeline, UseProgramStageMask stages, UInt32 program);
    [NativeApiAttribute]
public void ValidateProgramPipeline(UInt32 pipeline);
    [NativeApiAttribute]
public void VertexAttribL1(UInt32 index, double x);
    [NativeApiAttribute]
public void VertexAttribL1(UInt32 index, Double* v);
    [NativeApiAttribute]
public void VertexAttribL1(UInt32 index, Double& v);
    [NativeApiAttribute]
public void VertexAttribL2(UInt32 index, double x, double y);
    [NativeApiAttribute]
public void VertexAttribL2(UInt32 index, Double* v);
    [NativeApiAttribute]
public void VertexAttribL2(UInt32 index, Double& v);
    [NativeApiAttribute]
public void VertexAttribL3(UInt32 index, double x, double y, double z);
    [NativeApiAttribute]
public void VertexAttribL3(UInt32 index, Double* v);
    [NativeApiAttribute]
public void VertexAttribL3(UInt32 index, Double& v);
    [NativeApiAttribute]
public void VertexAttribL4(UInt32 index, double x, double y, double z, double w);
    [NativeApiAttribute]
public void VertexAttribL4(UInt32 index, Double* v);
    [NativeApiAttribute]
public void VertexAttribL4(UInt32 index, Double& v);
    [NativeApiAttribute]
public void VertexAttribLPointer(UInt32 index, int size, GLEnum type, UInt32 stride, Void* pointer);
    [NativeApiAttribute]
public void VertexAttribLPointer(UInt32 index, int size, VertexAttribLType type, UInt32 stride, Void* pointer);
    [NativeApiAttribute]
public void ViewportArray(UInt32 first, UInt32 count, Single* v);
    [NativeApiAttribute]
public void ViewportArray(UInt32 first, UInt32 count, Single& v);
    [NativeApiAttribute]
public void ViewportIndexed(UInt32 index, float x, float y, float w, float h);
    [NativeApiAttribute]
public void ViewportIndexed(UInt32 index, Single* v);
    [NativeApiAttribute]
public void ViewportIndexed(UInt32 index, Single& v);
    [NativeApiAttribute]
public void BeginQueryIndexed(GLEnum target, UInt32 index, UInt32 id);
    [NativeApiAttribute]
public void BeginQueryIndexed(QueryTarget target, UInt32 index, UInt32 id);
    [NativeApiAttribute]
public void BindTransformFeedback(GLEnum target, UInt32 id);
    [NativeApiAttribute]
public void BindTransformFeedback(BindTransformFeedbackTarget target, UInt32 id);
    [NativeApiAttribute]
public void BlendEquation(UInt32 buf, GLEnum mode);
    [NativeApiAttribute]
public void BlendEquation(UInt32 buf, BlendEquationModeEXT mode);
    [NativeApiAttribute]
public void BlendEquationSeparate(UInt32 buf, GLEnum modeRGB, GLEnum modeAlpha);
    [NativeApiAttribute]
public void BlendEquationSeparate(UInt32 buf, GLEnum modeRGB, BlendEquationModeEXT modeAlpha);
    [NativeApiAttribute]
public void BlendEquationSeparate(UInt32 buf, BlendEquationModeEXT modeRGB, GLEnum modeAlpha);
    [NativeApiAttribute]
public void BlendEquationSeparate(UInt32 buf, BlendEquationModeEXT modeRGB, BlendEquationModeEXT modeAlpha);
    [NativeApiAttribute]
public void BlendFunc(UInt32 buf, GLEnum src, GLEnum dst);
    [NativeApiAttribute]
public void BlendFunc(UInt32 buf, GLEnum src, BlendingFactor dst);
    [NativeApiAttribute]
public void BlendFunc(UInt32 buf, BlendingFactor src, GLEnum dst);
    [NativeApiAttribute]
public void BlendFunc(UInt32 buf, BlendingFactor src, BlendingFactor dst);
    [NativeApiAttribute]
public void BlendFuncSeparate(UInt32 buf, GLEnum srcRGB, GLEnum dstRGB, GLEnum srcAlpha, GLEnum dstAlpha);
    [NativeApiAttribute]
public void BlendFuncSeparate(UInt32 buf, GLEnum srcRGB, GLEnum dstRGB, GLEnum srcAlpha, BlendingFactor dstAlpha);
    [NativeApiAttribute]
public void BlendFuncSeparate(UInt32 buf, GLEnum srcRGB, GLEnum dstRGB, BlendingFactor srcAlpha, GLEnum dstAlpha);
    [NativeApiAttribute]
public void BlendFuncSeparate(UInt32 buf, GLEnum srcRGB, GLEnum dstRGB, BlendingFactor srcAlpha, BlendingFactor dstAlpha);
    [NativeApiAttribute]
public void BlendFuncSeparate(UInt32 buf, GLEnum srcRGB, BlendingFactor dstRGB, GLEnum srcAlpha, GLEnum dstAlpha);
    [NativeApiAttribute]
public void BlendFuncSeparate(UInt32 buf, GLEnum srcRGB, BlendingFactor dstRGB, GLEnum srcAlpha, BlendingFactor dstAlpha);
    [NativeApiAttribute]
public void BlendFuncSeparate(UInt32 buf, GLEnum srcRGB, BlendingFactor dstRGB, BlendingFactor srcAlpha, GLEnum dstAlpha);
    [NativeApiAttribute]
public void BlendFuncSeparate(UInt32 buf, GLEnum srcRGB, BlendingFactor dstRGB, BlendingFactor srcAlpha, BlendingFactor dstAlpha);
    [NativeApiAttribute]
public void BlendFuncSeparate(UInt32 buf, BlendingFactor srcRGB, GLEnum dstRGB, GLEnum srcAlpha, GLEnum dstAlpha);
    [NativeApiAttribute]
public void BlendFuncSeparate(UInt32 buf, BlendingFactor srcRGB, GLEnum dstRGB, GLEnum srcAlpha, BlendingFactor dstAlpha);
    [NativeApiAttribute]
public void BlendFuncSeparate(UInt32 buf, BlendingFactor srcRGB, GLEnum dstRGB, BlendingFactor srcAlpha, GLEnum dstAlpha);
    [NativeApiAttribute]
public void BlendFuncSeparate(UInt32 buf, BlendingFactor srcRGB, GLEnum dstRGB, BlendingFactor srcAlpha, BlendingFactor dstAlpha);
    [NativeApiAttribute]
public void BlendFuncSeparate(UInt32 buf, BlendingFactor srcRGB, BlendingFactor dstRGB, GLEnum srcAlpha, GLEnum dstAlpha);
    [NativeApiAttribute]
public void BlendFuncSeparate(UInt32 buf, BlendingFactor srcRGB, BlendingFactor dstRGB, GLEnum srcAlpha, BlendingFactor dstAlpha);
    [NativeApiAttribute]
public void BlendFuncSeparate(UInt32 buf, BlendingFactor srcRGB, BlendingFactor dstRGB, BlendingFactor srcAlpha, GLEnum dstAlpha);
    [NativeApiAttribute]
public void BlendFuncSeparate(UInt32 buf, BlendingFactor srcRGB, BlendingFactor dstRGB, BlendingFactor srcAlpha, BlendingFactor dstAlpha);
    [NativeApiAttribute]
public void DeleteTransformFeedbacks(UInt32 n, UInt32* ids);
    [NativeApiAttribute]
public void DeleteTransformFeedbacks(UInt32 n, UInt32& ids);
    [NativeApiAttribute]
public void DeleteTransformFeedbacks(UInt32 n, TransformFeedback* ids);
    [NativeApiAttribute]
public void DeleteTransformFeedbacks(UInt32 n, TransformFeedback& ids);
    [NativeApiAttribute]
public void DrawArraysIndirect(GLEnum mode, Void* indirect);
    [NativeApiAttribute]
public void DrawArraysIndirect(GLEnum mode, T0& indirect);
    [NativeApiAttribute]
public void DrawArraysIndirect(PrimitiveType mode, Void* indirect);
    [NativeApiAttribute]
public void DrawArraysIndirect(PrimitiveType mode, T0& indirect);
    [NativeApiAttribute]
public void DrawElementsIndirect(GLEnum mode, GLEnum type, Void* indirect);
    [NativeApiAttribute]
public void DrawElementsIndirect(GLEnum mode, GLEnum type, T0& indirect);
    [NativeApiAttribute]
public void DrawElementsIndirect(GLEnum mode, DrawElementsType type, Void* indirect);
    [NativeApiAttribute]
public void DrawElementsIndirect(GLEnum mode, DrawElementsType type, T0& indirect);
    [NativeApiAttribute]
public void DrawElementsIndirect(PrimitiveType mode, GLEnum type, Void* indirect);
    [NativeApiAttribute]
public void DrawElementsIndirect(PrimitiveType mode, GLEnum type, T0& indirect);
    [NativeApiAttribute]
public void DrawElementsIndirect(PrimitiveType mode, DrawElementsType type, Void* indirect);
    [NativeApiAttribute]
public void DrawElementsIndirect(PrimitiveType mode, DrawElementsType type, T0& indirect);
    [NativeApiAttribute]
public void DrawTransformFeedback(GLEnum mode, UInt32 id);
    [NativeApiAttribute]
public void DrawTransformFeedback(PrimitiveType mode, UInt32 id);
    [NativeApiAttribute]
public void DrawTransformFeedbackStream(GLEnum mode, UInt32 id, UInt32 stream);
    [NativeApiAttribute]
public void DrawTransformFeedbackStream(PrimitiveType mode, UInt32 id, UInt32 stream);
    [NativeApiAttribute]
public void EndQueryIndexed(GLEnum target, UInt32 index);
    [NativeApiAttribute]
public void EndQueryIndexed(QueryTarget target, UInt32 index);
    [NativeApiAttribute]
public void GenTransformFeedbacks(UInt32 n, UInt32* ids);
    [NativeApiAttribute]
public void GenTransformFeedbacks(UInt32 n, UInt32& ids);
    [NativeApiAttribute]
public void GenTransformFeedbacks(UInt32 n, TransformFeedback* ids);
    [NativeApiAttribute]
public void GenTransformFeedbacks(UInt32 n, TransformFeedback& ids);
    [NativeApiAttribute]
public void GetActiveSubroutineName(UInt32 program, GLEnum shadertype, UInt32 index, UInt32 bufSize, UInt32* length, Byte* name);
    [NativeApiAttribute]
public void GetActiveSubroutineName(UInt32 program, GLEnum shadertype, UInt32 index, UInt32 bufSize, UInt32* length, Byte& name);
    [NativeApiAttribute]
public void GetActiveSubroutineName(UInt32 program, GLEnum shadertype, UInt32 index, UInt32 bufSize, UInt32* length, String& name);
    [NativeApiAttribute]
public void GetActiveSubroutineName(UInt32 program, GLEnum shadertype, UInt32 index, UInt32 bufSize, UInt32& length, Byte* name);
    [NativeApiAttribute]
public void GetActiveSubroutineName(UInt32 program, GLEnum shadertype, UInt32 index, UInt32 bufSize, UInt32& length, Byte& name);
    [NativeApiAttribute]
public void GetActiveSubroutineName(UInt32 program, GLEnum shadertype, UInt32 index, UInt32 bufSize, UInt32& length, String& name);
    [NativeApiAttribute]
public void GetActiveSubroutineName(UInt32 program, ShaderType shadertype, UInt32 index, UInt32 bufSize, UInt32* length, Byte* name);
    [NativeApiAttribute]
public void GetActiveSubroutineName(UInt32 program, ShaderType shadertype, UInt32 index, UInt32 bufSize, UInt32* length, Byte& name);
    [NativeApiAttribute]
public void GetActiveSubroutineName(UInt32 program, ShaderType shadertype, UInt32 index, UInt32 bufSize, UInt32* length, String& name);
    [NativeApiAttribute]
public void GetActiveSubroutineName(UInt32 program, ShaderType shadertype, UInt32 index, UInt32 bufSize, UInt32& length, Byte* name);
    [NativeApiAttribute]
public void GetActiveSubroutineName(UInt32 program, ShaderType shadertype, UInt32 index, UInt32 bufSize, UInt32& length, Byte& name);
    [NativeApiAttribute]
public void GetActiveSubroutineName(UInt32 program, ShaderType shadertype, UInt32 index, UInt32 bufSize, UInt32& length, String& name);
    [NativeApiAttribute]
public void GetActiveSubroutineUniform(UInt32 program, GLEnum shadertype, UInt32 index, GLEnum pname, Int32* values);
    [NativeApiAttribute]
public void GetActiveSubroutineUniform(UInt32 program, GLEnum shadertype, UInt32 index, GLEnum pname, Int32& values);
    [NativeApiAttribute]
public void GetActiveSubroutineUniform(UInt32 program, GLEnum shadertype, UInt32 index, SubroutineParameterName pname, Int32* values);
    [NativeApiAttribute]
public void GetActiveSubroutineUniform(UInt32 program, GLEnum shadertype, UInt32 index, SubroutineParameterName pname, Int32& values);
    [NativeApiAttribute]
public void GetActiveSubroutineUniform(UInt32 program, ShaderType shadertype, UInt32 index, GLEnum pname, Int32* values);
    [NativeApiAttribute]
public void GetActiveSubroutineUniform(UInt32 program, ShaderType shadertype, UInt32 index, GLEnum pname, Int32& values);
    [NativeApiAttribute]
public void GetActiveSubroutineUniform(UInt32 program, ShaderType shadertype, UInt32 index, SubroutineParameterName pname, Int32* values);
    [NativeApiAttribute]
public void GetActiveSubroutineUniform(UInt32 program, ShaderType shadertype, UInt32 index, SubroutineParameterName pname, Int32& values);
    [NativeApiAttribute]
public void GetActiveSubroutineUniformName(UInt32 program, GLEnum shadertype, UInt32 index, UInt32 bufSize, UInt32* length, Byte* name);
    [NativeApiAttribute]
public void GetActiveSubroutineUniformName(UInt32 program, GLEnum shadertype, UInt32 index, UInt32 bufSize, UInt32* length, Byte& name);
    [NativeApiAttribute]
public void GetActiveSubroutineUniformName(UInt32 program, GLEnum shadertype, UInt32 index, UInt32 bufSize, UInt32* length, String& name);
    [NativeApiAttribute]
public void GetActiveSubroutineUniformName(UInt32 program, GLEnum shadertype, UInt32 index, UInt32 bufSize, UInt32& length, Byte* name);
    [NativeApiAttribute]
public void GetActiveSubroutineUniformName(UInt32 program, GLEnum shadertype, UInt32 index, UInt32 bufSize, UInt32& length, Byte& name);
    [NativeApiAttribute]
public void GetActiveSubroutineUniformName(UInt32 program, GLEnum shadertype, UInt32 index, UInt32 bufSize, UInt32& length, String& name);
    [NativeApiAttribute]
public void GetActiveSubroutineUniformName(UInt32 program, ShaderType shadertype, UInt32 index, UInt32 bufSize, UInt32* length, Byte* name);
    [NativeApiAttribute]
public void GetActiveSubroutineUniformName(UInt32 program, ShaderType shadertype, UInt32 index, UInt32 bufSize, UInt32* length, Byte& name);
    [NativeApiAttribute]
public void GetActiveSubroutineUniformName(UInt32 program, ShaderType shadertype, UInt32 index, UInt32 bufSize, UInt32* length, String& name);
    [NativeApiAttribute]
public void GetActiveSubroutineUniformName(UInt32 program, ShaderType shadertype, UInt32 index, UInt32 bufSize, UInt32& length, Byte* name);
    [NativeApiAttribute]
public void GetActiveSubroutineUniformName(UInt32 program, ShaderType shadertype, UInt32 index, UInt32 bufSize, UInt32& length, Byte& name);
    [NativeApiAttribute]
public void GetActiveSubroutineUniformName(UInt32 program, ShaderType shadertype, UInt32 index, UInt32 bufSize, UInt32& length, String& name);
    [NativeApiAttribute]
public void GetProgramStage(UInt32 program, GLEnum shadertype, GLEnum pname, Int32* values);
    [NativeApiAttribute]
public void GetProgramStage(UInt32 program, GLEnum shadertype, GLEnum pname, Int32& values);
    [NativeApiAttribute]
public void GetProgramStage(UInt32 program, GLEnum shadertype, ProgramStagePName pname, Int32* values);
    [NativeApiAttribute]
public void GetProgramStage(UInt32 program, GLEnum shadertype, ProgramStagePName pname, Int32& values);
    [NativeApiAttribute]
public void GetProgramStage(UInt32 program, ShaderType shadertype, GLEnum pname, Int32* values);
    [NativeApiAttribute]
public void GetProgramStage(UInt32 program, ShaderType shadertype, GLEnum pname, Int32& values);
    [NativeApiAttribute]
public void GetProgramStage(UInt32 program, ShaderType shadertype, ProgramStagePName pname, Int32* values);
    [NativeApiAttribute]
public void GetProgramStage(UInt32 program, ShaderType shadertype, ProgramStagePName pname, Int32& values);
    [NativeApiAttribute]
public void GetQueryIndexed(GLEnum target, UInt32 index, GLEnum pname, Int32* params);
    [NativeApiAttribute]
public void GetQueryIndexed(GLEnum target, UInt32 index, GLEnum pname, Int32& params);
    [NativeApiAttribute]
public void GetQueryIndexed(GLEnum target, UInt32 index, QueryParameterName pname, Int32* params);
    [NativeApiAttribute]
public void GetQueryIndexed(GLEnum target, UInt32 index, QueryParameterName pname, Int32& params);
    [NativeApiAttribute]
public void GetQueryIndexed(QueryTarget target, UInt32 index, GLEnum pname, Int32* params);
    [NativeApiAttribute]
public void GetQueryIndexed(QueryTarget target, UInt32 index, GLEnum pname, Int32& params);
    [NativeApiAttribute]
public void GetQueryIndexed(QueryTarget target, UInt32 index, QueryParameterName pname, Int32* params);
    [NativeApiAttribute]
public void GetQueryIndexed(QueryTarget target, UInt32 index, QueryParameterName pname, Int32& params);
    [NativeApiAttribute]
public UInt32 GetSubroutineIndex(UInt32 program, GLEnum shadertype, Byte* name);
    [NativeApiAttribute]
public UInt32 GetSubroutineIndex(UInt32 program, GLEnum shadertype, Byte& name);
    [NativeApiAttribute]
public UInt32 GetSubroutineIndex(UInt32 program, GLEnum shadertype, string name);
    [NativeApiAttribute]
public UInt32 GetSubroutineIndex(UInt32 program, ShaderType shadertype, Byte* name);
    [NativeApiAttribute]
public UInt32 GetSubroutineIndex(UInt32 program, ShaderType shadertype, Byte& name);
    [NativeApiAttribute]
public UInt32 GetSubroutineIndex(UInt32 program, ShaderType shadertype, string name);
    [NativeApiAttribute]
public int GetSubroutineUniformLocation(UInt32 program, GLEnum shadertype, Byte* name);
    [NativeApiAttribute]
public int GetSubroutineUniformLocation(UInt32 program, GLEnum shadertype, Byte& name);
    [NativeApiAttribute]
public int GetSubroutineUniformLocation(UInt32 program, GLEnum shadertype, string name);
    [NativeApiAttribute]
public int GetSubroutineUniformLocation(UInt32 program, ShaderType shadertype, Byte* name);
    [NativeApiAttribute]
public int GetSubroutineUniformLocation(UInt32 program, ShaderType shadertype, Byte& name);
    [NativeApiAttribute]
public int GetSubroutineUniformLocation(UInt32 program, ShaderType shadertype, string name);
    [NativeApiAttribute]
public void GetUniform(UInt32 program, int location, Double* params);
    [NativeApiAttribute]
public void GetUniform(UInt32 program, int location, Double& params);
    [NativeApiAttribute]
public void GetUniformSubroutine(GLEnum shadertype, int location, UInt32* params);
    [NativeApiAttribute]
public void GetUniformSubroutine(GLEnum shadertype, int location, UInt32& params);
    [NativeApiAttribute]
public void GetUniformSubroutine(ShaderType shadertype, int location, UInt32* params);
    [NativeApiAttribute]
public void GetUniformSubroutine(ShaderType shadertype, int location, UInt32& params);
    [NativeApiAttribute]
public bool IsTransformFeedback(UInt32 id);
    [NativeApiAttribute]
public void MinSampleShading(float value);
    [NativeApiAttribute]
public void PatchParameter(GLEnum pname, int value);
    [NativeApiAttribute]
public void PatchParameter(PatchParameterName pname, int value);
    [NativeApiAttribute]
public void PatchParameter(GLEnum pname, Single* values);
    [NativeApiAttribute]
public void PatchParameter(GLEnum pname, Single& values);
    [NativeApiAttribute]
public void PatchParameter(PatchParameterName pname, Single* values);
    [NativeApiAttribute]
public void PatchParameter(PatchParameterName pname, Single& values);
    [NativeApiAttribute]
public void PauseTransformFeedback();
    [NativeApiAttribute]
public void ResumeTransformFeedback();
    [NativeApiAttribute]
public void Uniform1(int location, double x);
    [NativeApiAttribute]
public void Uniform1(int location, UInt32 count, Double* value);
    [NativeApiAttribute]
public void Uniform1(int location, UInt32 count, Double& value);
    [NativeApiAttribute]
public void Uniform2(int location, double x, double y);
    [NativeApiAttribute]
public void Uniform2(int location, UInt32 count, Double* value);
    [NativeApiAttribute]
public void Uniform2(int location, UInt32 count, Double& value);
    [NativeApiAttribute]
public void Uniform3(int location, double x, double y, double z);
    [NativeApiAttribute]
public void Uniform3(int location, UInt32 count, Double* value);
    [NativeApiAttribute]
public void Uniform3(int location, UInt32 count, Double& value);
    [NativeApiAttribute]
public void Uniform4(int location, double x, double y, double z, double w);
    [NativeApiAttribute]
public void Uniform4(int location, UInt32 count, Double* value);
    [NativeApiAttribute]
public void Uniform4(int location, UInt32 count, Double& value);
    [NativeApiAttribute]
public void UniformMatrix2(int location, UInt32 count, bool transpose, Double* value);
    [NativeApiAttribute]
public void UniformMatrix2(int location, UInt32 count, bool transpose, Double& value);
    [NativeApiAttribute]
public void UniformMatrix2(int location, UInt32 count, Boolean transpose, Double* value);
    [NativeApiAttribute]
public void UniformMatrix2(int location, UInt32 count, Boolean transpose, Double& value);
    [NativeApiAttribute]
public void UniformMatrix2x3(int location, UInt32 count, bool transpose, Double* value);
    [NativeApiAttribute]
public void UniformMatrix2x3(int location, UInt32 count, bool transpose, Double& value);
    [NativeApiAttribute]
public void UniformMatrix2x3(int location, UInt32 count, Boolean transpose, Double* value);
    [NativeApiAttribute]
public void UniformMatrix2x3(int location, UInt32 count, Boolean transpose, Double& value);
    [NativeApiAttribute]
public void UniformMatrix2x4(int location, UInt32 count, bool transpose, Double* value);
    [NativeApiAttribute]
public void UniformMatrix2x4(int location, UInt32 count, bool transpose, Double& value);
    [NativeApiAttribute]
public void UniformMatrix2x4(int location, UInt32 count, Boolean transpose, Double* value);
    [NativeApiAttribute]
public void UniformMatrix2x4(int location, UInt32 count, Boolean transpose, Double& value);
    [NativeApiAttribute]
public void UniformMatrix3(int location, UInt32 count, bool transpose, Double* value);
    [NativeApiAttribute]
public void UniformMatrix3(int location, UInt32 count, bool transpose, Double& value);
    [NativeApiAttribute]
public void UniformMatrix3(int location, UInt32 count, Boolean transpose, Double* value);
    [NativeApiAttribute]
public void UniformMatrix3(int location, UInt32 count, Boolean transpose, Double& value);
    [NativeApiAttribute]
public void UniformMatrix3x2(int location, UInt32 count, bool transpose, Double* value);
    [NativeApiAttribute]
public void UniformMatrix3x2(int location, UInt32 count, bool transpose, Double& value);
    [NativeApiAttribute]
public void UniformMatrix3x2(int location, UInt32 count, Boolean transpose, Double* value);
    [NativeApiAttribute]
public void UniformMatrix3x2(int location, UInt32 count, Boolean transpose, Double& value);
    [NativeApiAttribute]
public void UniformMatrix3x4(int location, UInt32 count, bool transpose, Double* value);
    [NativeApiAttribute]
public void UniformMatrix3x4(int location, UInt32 count, bool transpose, Double& value);
    [NativeApiAttribute]
public void UniformMatrix3x4(int location, UInt32 count, Boolean transpose, Double* value);
    [NativeApiAttribute]
public void UniformMatrix3x4(int location, UInt32 count, Boolean transpose, Double& value);
    [NativeApiAttribute]
public void UniformMatrix4(int location, UInt32 count, bool transpose, Double* value);
    [NativeApiAttribute]
public void UniformMatrix4(int location, UInt32 count, bool transpose, Double& value);
    [NativeApiAttribute]
public void UniformMatrix4(int location, UInt32 count, Boolean transpose, Double* value);
    [NativeApiAttribute]
public void UniformMatrix4(int location, UInt32 count, Boolean transpose, Double& value);
    [NativeApiAttribute]
public void UniformMatrix4x2(int location, UInt32 count, bool transpose, Double* value);
    [NativeApiAttribute]
public void UniformMatrix4x2(int location, UInt32 count, bool transpose, Double& value);
    [NativeApiAttribute]
public void UniformMatrix4x2(int location, UInt32 count, Boolean transpose, Double* value);
    [NativeApiAttribute]
public void UniformMatrix4x2(int location, UInt32 count, Boolean transpose, Double& value);
    [NativeApiAttribute]
public void UniformMatrix4x3(int location, UInt32 count, bool transpose, Double* value);
    [NativeApiAttribute]
public void UniformMatrix4x3(int location, UInt32 count, bool transpose, Double& value);
    [NativeApiAttribute]
public void UniformMatrix4x3(int location, UInt32 count, Boolean transpose, Double* value);
    [NativeApiAttribute]
public void UniformMatrix4x3(int location, UInt32 count, Boolean transpose, Double& value);
    [NativeApiAttribute]
public void UniformSubroutines(GLEnum shadertype, UInt32 count, UInt32* indices);
    [NativeApiAttribute]
public void UniformSubroutines(GLEnum shadertype, UInt32 count, UInt32& indices);
    [NativeApiAttribute]
public void UniformSubroutines(ShaderType shadertype, UInt32 count, UInt32* indices);
    [NativeApiAttribute]
public void UniformSubroutines(ShaderType shadertype, UInt32 count, UInt32& indices);
    [NativeApiAttribute]
public void BindFragDataLocationIndexed(UInt32 program, UInt32 colorNumber, UInt32 index, Byte* name);
    [NativeApiAttribute]
public void BindFragDataLocationIndexed(UInt32 program, UInt32 colorNumber, UInt32 index, Byte& name);
    [NativeApiAttribute]
public void BindFragDataLocationIndexed(UInt32 program, UInt32 colorNumber, UInt32 index, string name);
    [NativeApiAttribute]
public void BindSampler(UInt32 unit, UInt32 sampler);
    [NativeApiAttribute]
public void ColorP3(GLEnum type, UInt32 color);
    [NativeApiAttribute]
public void ColorP3(ColorPointerType type, UInt32 color);
    [NativeApiAttribute]
public void ColorP3(GLEnum type, UInt32* color);
    [NativeApiAttribute]
public void ColorP3(GLEnum type, UInt32& color);
    [NativeApiAttribute]
public void ColorP3(ColorPointerType type, UInt32* color);
    [NativeApiAttribute]
public void ColorP3(ColorPointerType type, UInt32& color);
    [NativeApiAttribute]
public void ColorP4(GLEnum type, UInt32 color);
    [NativeApiAttribute]
public void ColorP4(ColorPointerType type, UInt32 color);
    [NativeApiAttribute]
public void ColorP4(GLEnum type, UInt32* color);
    [NativeApiAttribute]
public void ColorP4(GLEnum type, UInt32& color);
    [NativeApiAttribute]
public void ColorP4(ColorPointerType type, UInt32* color);
    [NativeApiAttribute]
public void ColorP4(ColorPointerType type, UInt32& color);
    [NativeApiAttribute]
public void DeleteSamplers(UInt32 count, UInt32* samplers);
    [NativeApiAttribute]
public void DeleteSamplers(UInt32 count, UInt32& samplers);
    [NativeApiAttribute]
public void DeleteSamplers(UInt32 count, Sampler* samplers);
    [NativeApiAttribute]
public void DeleteSamplers(UInt32 count, Sampler& samplers);
    [NativeApiAttribute]
public void GenSamplers(UInt32 count, UInt32* samplers);
    [NativeApiAttribute]
public void GenSamplers(UInt32 count, UInt32& samplers);
    [NativeApiAttribute]
public void GenSamplers(UInt32 count, Sampler* samplers);
    [NativeApiAttribute]
public void GenSamplers(UInt32 count, Sampler& samplers);
    [NativeApiAttribute]
public int GetFragDataIndex(UInt32 program, Byte* name);
    [NativeApiAttribute]
public int GetFragDataIndex(UInt32 program, Byte& name);
    [NativeApiAttribute]
public int GetFragDataIndex(UInt32 program, string name);
    [NativeApiAttribute]
public void GetQueryObject(UInt32 id, GLEnum pname, Int64* params);
    [NativeApiAttribute]
public void GetQueryObject(UInt32 id, GLEnum pname, Int64& params);
    [NativeApiAttribute]
public void GetQueryObject(UInt32 id, QueryObjectParameterName pname, Int64* params);
    [NativeApiAttribute]
public void GetQueryObject(UInt32 id, QueryObjectParameterName pname, Int64& params);
    [NativeApiAttribute]
public void GetQueryObject(UInt32 id, GLEnum pname, UInt64* params);
    [NativeApiAttribute]
public void GetQueryObject(UInt32 id, GLEnum pname, UInt64& params);
    [NativeApiAttribute]
public void GetQueryObject(UInt32 id, QueryObjectParameterName pname, UInt64* params);
    [NativeApiAttribute]
public void GetQueryObject(UInt32 id, QueryObjectParameterName pname, UInt64& params);
    [NativeApiAttribute]
public void GetSamplerParameter(UInt32 sampler, GLEnum pname, Int32* params);
    [NativeApiAttribute]
public void GetSamplerParameter(UInt32 sampler, GLEnum pname, Int32& params);
    [NativeApiAttribute]
public void GetSamplerParameter(UInt32 sampler, SamplerParameterI pname, Int32* params);
    [NativeApiAttribute]
public void GetSamplerParameter(UInt32 sampler, SamplerParameterI pname, Int32& params);
    [NativeApiAttribute]
public void GetSamplerParameter(UInt32 sampler, GLEnum pname, Single* params);
    [NativeApiAttribute]
public void GetSamplerParameter(UInt32 sampler, GLEnum pname, Single& params);
    [NativeApiAttribute]
public void GetSamplerParameter(UInt32 sampler, SamplerParameterF pname, Single* params);
    [NativeApiAttribute]
public void GetSamplerParameter(UInt32 sampler, SamplerParameterF pname, Single& params);
    [NativeApiAttribute]
public void GetSamplerParameterI(UInt32 sampler, GLEnum pname, Int32* params);
    [NativeApiAttribute]
public void GetSamplerParameterI(UInt32 sampler, GLEnum pname, Int32& params);
    [NativeApiAttribute]
public void GetSamplerParameterI(UInt32 sampler, SamplerParameterI pname, Int32* params);
    [NativeApiAttribute]
public void GetSamplerParameterI(UInt32 sampler, SamplerParameterI pname, Int32& params);
    [NativeApiAttribute]
public void GetSamplerParameterI(UInt32 sampler, GLEnum pname, UInt32* params);
    [NativeApiAttribute]
public void GetSamplerParameterI(UInt32 sampler, GLEnum pname, UInt32& params);
    [NativeApiAttribute]
public void GetSamplerParameterI(UInt32 sampler, SamplerParameterI pname, UInt32* params);
    [NativeApiAttribute]
public void GetSamplerParameterI(UInt32 sampler, SamplerParameterI pname, UInt32& params);
    [NativeApiAttribute]
public bool IsSampler(UInt32 sampler);
    [NativeApiAttribute]
public void MultiTexCoordP1(GLEnum texture, GLEnum type, UInt32 coords);
    [NativeApiAttribute]
public void MultiTexCoordP1(GLEnum texture, TexCoordPointerType type, UInt32 coords);
    [NativeApiAttribute]
public void MultiTexCoordP1(TextureUnit texture, GLEnum type, UInt32 coords);
    [NativeApiAttribute]
public void MultiTexCoordP1(TextureUnit texture, TexCoordPointerType type, UInt32 coords);
    [NativeApiAttribute]
public void MultiTexCoordP1(GLEnum texture, GLEnum type, UInt32* coords);
    [NativeApiAttribute]
public void MultiTexCoordP1(GLEnum texture, GLEnum type, UInt32& coords);
    [NativeApiAttribute]
public void MultiTexCoordP1(GLEnum texture, TexCoordPointerType type, UInt32* coords);
    [NativeApiAttribute]
public void MultiTexCoordP1(GLEnum texture, TexCoordPointerType type, UInt32& coords);
    [NativeApiAttribute]
public void MultiTexCoordP1(TextureUnit texture, GLEnum type, UInt32* coords);
    [NativeApiAttribute]
public void MultiTexCoordP1(TextureUnit texture, GLEnum type, UInt32& coords);
    [NativeApiAttribute]
public void MultiTexCoordP1(TextureUnit texture, TexCoordPointerType type, UInt32* coords);
    [NativeApiAttribute]
public void MultiTexCoordP1(TextureUnit texture, TexCoordPointerType type, UInt32& coords);
    [NativeApiAttribute]
public void MultiTexCoordP2(GLEnum texture, GLEnum type, UInt32 coords);
    [NativeApiAttribute]
public void MultiTexCoordP2(GLEnum texture, TexCoordPointerType type, UInt32 coords);
    [NativeApiAttribute]
public void MultiTexCoordP2(TextureUnit texture, GLEnum type, UInt32 coords);
    [NativeApiAttribute]
public void MultiTexCoordP2(TextureUnit texture, TexCoordPointerType type, UInt32 coords);
    [NativeApiAttribute]
public void MultiTexCoordP2(GLEnum texture, GLEnum type, UInt32* coords);
    [NativeApiAttribute]
public void MultiTexCoordP2(GLEnum texture, GLEnum type, UInt32& coords);
    [NativeApiAttribute]
public void MultiTexCoordP2(GLEnum texture, TexCoordPointerType type, UInt32* coords);
    [NativeApiAttribute]
public void MultiTexCoordP2(GLEnum texture, TexCoordPointerType type, UInt32& coords);
    [NativeApiAttribute]
public void MultiTexCoordP2(TextureUnit texture, GLEnum type, UInt32* coords);
    [NativeApiAttribute]
public void MultiTexCoordP2(TextureUnit texture, GLEnum type, UInt32& coords);
    [NativeApiAttribute]
public void MultiTexCoordP2(TextureUnit texture, TexCoordPointerType type, UInt32* coords);
    [NativeApiAttribute]
public void MultiTexCoordP2(TextureUnit texture, TexCoordPointerType type, UInt32& coords);
    [NativeApiAttribute]
public void MultiTexCoordP3(GLEnum texture, GLEnum type, UInt32 coords);
    [NativeApiAttribute]
public void MultiTexCoordP3(GLEnum texture, TexCoordPointerType type, UInt32 coords);
    [NativeApiAttribute]
public void MultiTexCoordP3(TextureUnit texture, GLEnum type, UInt32 coords);
    [NativeApiAttribute]
public void MultiTexCoordP3(TextureUnit texture, TexCoordPointerType type, UInt32 coords);
    [NativeApiAttribute]
public void MultiTexCoordP3(GLEnum texture, GLEnum type, UInt32* coords);
    [NativeApiAttribute]
public void MultiTexCoordP3(GLEnum texture, GLEnum type, UInt32& coords);
    [NativeApiAttribute]
public void MultiTexCoordP3(GLEnum texture, TexCoordPointerType type, UInt32* coords);
    [NativeApiAttribute]
public void MultiTexCoordP3(GLEnum texture, TexCoordPointerType type, UInt32& coords);
    [NativeApiAttribute]
public void MultiTexCoordP3(TextureUnit texture, GLEnum type, UInt32* coords);
    [NativeApiAttribute]
public void MultiTexCoordP3(TextureUnit texture, GLEnum type, UInt32& coords);
    [NativeApiAttribute]
public void MultiTexCoordP3(TextureUnit texture, TexCoordPointerType type, UInt32* coords);
    [NativeApiAttribute]
public void MultiTexCoordP3(TextureUnit texture, TexCoordPointerType type, UInt32& coords);
    [NativeApiAttribute]
public void MultiTexCoordP4(GLEnum texture, GLEnum type, UInt32 coords);
    [NativeApiAttribute]
public void MultiTexCoordP4(GLEnum texture, TexCoordPointerType type, UInt32 coords);
    [NativeApiAttribute]
public void MultiTexCoordP4(TextureUnit texture, GLEnum type, UInt32 coords);
    [NativeApiAttribute]
public void MultiTexCoordP4(TextureUnit texture, TexCoordPointerType type, UInt32 coords);
    [NativeApiAttribute]
public void MultiTexCoordP4(GLEnum texture, GLEnum type, UInt32* coords);
    [NativeApiAttribute]
public void MultiTexCoordP4(GLEnum texture, GLEnum type, UInt32& coords);
    [NativeApiAttribute]
public void MultiTexCoordP4(GLEnum texture, TexCoordPointerType type, UInt32* coords);
    [NativeApiAttribute]
public void MultiTexCoordP4(GLEnum texture, TexCoordPointerType type, UInt32& coords);
    [NativeApiAttribute]
public void MultiTexCoordP4(TextureUnit texture, GLEnum type, UInt32* coords);
    [NativeApiAttribute]
public void MultiTexCoordP4(TextureUnit texture, GLEnum type, UInt32& coords);
    [NativeApiAttribute]
public void MultiTexCoordP4(TextureUnit texture, TexCoordPointerType type, UInt32* coords);
    [NativeApiAttribute]
public void MultiTexCoordP4(TextureUnit texture, TexCoordPointerType type, UInt32& coords);
    [NativeApiAttribute]
public void NormalP3(GLEnum type, UInt32 coords);
    [NativeApiAttribute]
public void NormalP3(NormalPointerType type, UInt32 coords);
    [NativeApiAttribute]
public void NormalP3(GLEnum type, UInt32* coords);
    [NativeApiAttribute]
public void NormalP3(GLEnum type, UInt32& coords);
    [NativeApiAttribute]
public void NormalP3(NormalPointerType type, UInt32* coords);
    [NativeApiAttribute]
public void NormalP3(NormalPointerType type, UInt32& coords);
    [NativeApiAttribute]
public void QueryCounter(UInt32 id, GLEnum target);
    [NativeApiAttribute]
public void QueryCounter(UInt32 id, QueryCounterTarget target);
    [NativeApiAttribute]
public void SamplerParameter(UInt32 sampler, GLEnum pname, int param);
    [NativeApiAttribute]
public void SamplerParameter(UInt32 sampler, SamplerParameterI pname, int param);
    [NativeApiAttribute]
public void SamplerParameter(UInt32 sampler, GLEnum pname, Int32* param);
    [NativeApiAttribute]
public void SamplerParameter(UInt32 sampler, GLEnum pname, Int32& param);
    [NativeApiAttribute]
public void SamplerParameter(UInt32 sampler, SamplerParameterI pname, Int32* param);
    [NativeApiAttribute]
public void SamplerParameter(UInt32 sampler, SamplerParameterI pname, Int32& param);
    [NativeApiAttribute]
public void SamplerParameter(UInt32 sampler, GLEnum pname, float param);
    [NativeApiAttribute]
public void SamplerParameter(UInt32 sampler, SamplerParameterF pname, float param);
    [NativeApiAttribute]
public void SamplerParameter(UInt32 sampler, GLEnum pname, Single* param);
    [NativeApiAttribute]
public void SamplerParameter(UInt32 sampler, GLEnum pname, Single& param);
    [NativeApiAttribute]
public void SamplerParameter(UInt32 sampler, SamplerParameterF pname, Single* param);
    [NativeApiAttribute]
public void SamplerParameter(UInt32 sampler, SamplerParameterF pname, Single& param);
    [NativeApiAttribute]
public void SamplerParameterI(UInt32 sampler, GLEnum pname, Int32* param);
    [NativeApiAttribute]
public void SamplerParameterI(UInt32 sampler, GLEnum pname, Int32& param);
    [NativeApiAttribute]
public void SamplerParameterI(UInt32 sampler, SamplerParameterI pname, Int32* param);
    [NativeApiAttribute]
public void SamplerParameterI(UInt32 sampler, SamplerParameterI pname, Int32& param);
    [NativeApiAttribute]
public void SamplerParameterI(UInt32 sampler, GLEnum pname, UInt32* param);
    [NativeApiAttribute]
public void SamplerParameterI(UInt32 sampler, GLEnum pname, UInt32& param);
    [NativeApiAttribute]
public void SamplerParameterI(UInt32 sampler, SamplerParameterI pname, UInt32* param);
    [NativeApiAttribute]
public void SamplerParameterI(UInt32 sampler, SamplerParameterI pname, UInt32& param);
    [NativeApiAttribute]
public void SecondaryColorP3(GLEnum type, UInt32 color);
    [NativeApiAttribute]
public void SecondaryColorP3(ColorPointerType type, UInt32 color);
    [NativeApiAttribute]
public void SecondaryColorP3(GLEnum type, UInt32* color);
    [NativeApiAttribute]
public void SecondaryColorP3(GLEnum type, UInt32& color);
    [NativeApiAttribute]
public void SecondaryColorP3(ColorPointerType type, UInt32* color);
    [NativeApiAttribute]
public void SecondaryColorP3(ColorPointerType type, UInt32& color);
    [NativeApiAttribute]
public void TexCoordP1(GLEnum type, UInt32 coords);
    [NativeApiAttribute]
public void TexCoordP1(TexCoordPointerType type, UInt32 coords);
    [NativeApiAttribute]
public void TexCoordP1(GLEnum type, UInt32* coords);
    [NativeApiAttribute]
public void TexCoordP1(GLEnum type, UInt32& coords);
    [NativeApiAttribute]
public void TexCoordP1(TexCoordPointerType type, UInt32* coords);
    [NativeApiAttribute]
public void TexCoordP1(TexCoordPointerType type, UInt32& coords);
    [NativeApiAttribute]
public void TexCoordP2(GLEnum type, UInt32 coords);
    [NativeApiAttribute]
public void TexCoordP2(TexCoordPointerType type, UInt32 coords);
    [NativeApiAttribute]
public void TexCoordP2(GLEnum type, UInt32* coords);
    [NativeApiAttribute]
public void TexCoordP2(GLEnum type, UInt32& coords);
    [NativeApiAttribute]
public void TexCoordP2(TexCoordPointerType type, UInt32* coords);
    [NativeApiAttribute]
public void TexCoordP2(TexCoordPointerType type, UInt32& coords);
    [NativeApiAttribute]
public void TexCoordP3(GLEnum type, UInt32 coords);
    [NativeApiAttribute]
public void TexCoordP3(TexCoordPointerType type, UInt32 coords);
    [NativeApiAttribute]
public void TexCoordP3(GLEnum type, UInt32* coords);
    [NativeApiAttribute]
public void TexCoordP3(GLEnum type, UInt32& coords);
    [NativeApiAttribute]
public void TexCoordP3(TexCoordPointerType type, UInt32* coords);
    [NativeApiAttribute]
public void TexCoordP3(TexCoordPointerType type, UInt32& coords);
    [NativeApiAttribute]
public void TexCoordP4(GLEnum type, UInt32 coords);
    [NativeApiAttribute]
public void TexCoordP4(TexCoordPointerType type, UInt32 coords);
    [NativeApiAttribute]
public void TexCoordP4(GLEnum type, UInt32* coords);
    [NativeApiAttribute]
public void TexCoordP4(GLEnum type, UInt32& coords);
    [NativeApiAttribute]
public void TexCoordP4(TexCoordPointerType type, UInt32* coords);
    [NativeApiAttribute]
public void TexCoordP4(TexCoordPointerType type, UInt32& coords);
    [NativeApiAttribute]
public void VertexAttribDivisor(UInt32 index, UInt32 divisor);
    [NativeApiAttribute]
public void VertexAttribP1(UInt32 index, GLEnum type, bool normalized, UInt32 value);
    [NativeApiAttribute]
public void VertexAttribP1(UInt32 index, GLEnum type, Boolean normalized, UInt32 value);
    [NativeApiAttribute]
public void VertexAttribP1(UInt32 index, VertexAttribPointerType type, bool normalized, UInt32 value);
    [NativeApiAttribute]
public void VertexAttribP1(UInt32 index, VertexAttribPointerType type, Boolean normalized, UInt32 value);
    [NativeApiAttribute]
public void VertexAttribP1(UInt32 index, GLEnum type, bool normalized, UInt32* value);
    [NativeApiAttribute]
public void VertexAttribP1(UInt32 index, GLEnum type, bool normalized, UInt32& value);
    [NativeApiAttribute]
public void VertexAttribP1(UInt32 index, GLEnum type, Boolean normalized, UInt32* value);
    [NativeApiAttribute]
public void VertexAttribP1(UInt32 index, GLEnum type, Boolean normalized, UInt32& value);
    [NativeApiAttribute]
public void VertexAttribP1(UInt32 index, VertexAttribPointerType type, bool normalized, UInt32* value);
    [NativeApiAttribute]
public void VertexAttribP1(UInt32 index, VertexAttribPointerType type, bool normalized, UInt32& value);
    [NativeApiAttribute]
public void VertexAttribP1(UInt32 index, VertexAttribPointerType type, Boolean normalized, UInt32* value);
    [NativeApiAttribute]
public void VertexAttribP1(UInt32 index, VertexAttribPointerType type, Boolean normalized, UInt32& value);
    [NativeApiAttribute]
public void VertexAttribP2(UInt32 index, GLEnum type, bool normalized, UInt32 value);
    [NativeApiAttribute]
public void VertexAttribP2(UInt32 index, GLEnum type, Boolean normalized, UInt32 value);
    [NativeApiAttribute]
public void VertexAttribP2(UInt32 index, VertexAttribPointerType type, bool normalized, UInt32 value);
    [NativeApiAttribute]
public void VertexAttribP2(UInt32 index, VertexAttribPointerType type, Boolean normalized, UInt32 value);
    [NativeApiAttribute]
public void VertexAttribP2(UInt32 index, GLEnum type, bool normalized, UInt32* value);
    [NativeApiAttribute]
public void VertexAttribP2(UInt32 index, GLEnum type, bool normalized, UInt32& value);
    [NativeApiAttribute]
public void VertexAttribP2(UInt32 index, GLEnum type, Boolean normalized, UInt32* value);
    [NativeApiAttribute]
public void VertexAttribP2(UInt32 index, GLEnum type, Boolean normalized, UInt32& value);
    [NativeApiAttribute]
public void VertexAttribP2(UInt32 index, VertexAttribPointerType type, bool normalized, UInt32* value);
    [NativeApiAttribute]
public void VertexAttribP2(UInt32 index, VertexAttribPointerType type, bool normalized, UInt32& value);
    [NativeApiAttribute]
public void VertexAttribP2(UInt32 index, VertexAttribPointerType type, Boolean normalized, UInt32* value);
    [NativeApiAttribute]
public void VertexAttribP2(UInt32 index, VertexAttribPointerType type, Boolean normalized, UInt32& value);
    [NativeApiAttribute]
public void VertexAttribP3(UInt32 index, GLEnum type, bool normalized, UInt32 value);
    [NativeApiAttribute]
public void VertexAttribP3(UInt32 index, GLEnum type, Boolean normalized, UInt32 value);
    [NativeApiAttribute]
public void VertexAttribP3(UInt32 index, VertexAttribPointerType type, bool normalized, UInt32 value);
    [NativeApiAttribute]
public void VertexAttribP3(UInt32 index, VertexAttribPointerType type, Boolean normalized, UInt32 value);
    [NativeApiAttribute]
public void VertexAttribP3(UInt32 index, GLEnum type, bool normalized, UInt32* value);
    [NativeApiAttribute]
public void VertexAttribP3(UInt32 index, GLEnum type, bool normalized, UInt32& value);
    [NativeApiAttribute]
public void VertexAttribP3(UInt32 index, GLEnum type, Boolean normalized, UInt32* value);
    [NativeApiAttribute]
public void VertexAttribP3(UInt32 index, GLEnum type, Boolean normalized, UInt32& value);
    [NativeApiAttribute]
public void VertexAttribP3(UInt32 index, VertexAttribPointerType type, bool normalized, UInt32* value);
    [NativeApiAttribute]
public void VertexAttribP3(UInt32 index, VertexAttribPointerType type, bool normalized, UInt32& value);
    [NativeApiAttribute]
public void VertexAttribP3(UInt32 index, VertexAttribPointerType type, Boolean normalized, UInt32* value);
    [NativeApiAttribute]
public void VertexAttribP3(UInt32 index, VertexAttribPointerType type, Boolean normalized, UInt32& value);
    [NativeApiAttribute]
public void VertexAttribP4(UInt32 index, GLEnum type, bool normalized, UInt32 value);
    [NativeApiAttribute]
public void VertexAttribP4(UInt32 index, GLEnum type, Boolean normalized, UInt32 value);
    [NativeApiAttribute]
public void VertexAttribP4(UInt32 index, VertexAttribPointerType type, bool normalized, UInt32 value);
    [NativeApiAttribute]
public void VertexAttribP4(UInt32 index, VertexAttribPointerType type, Boolean normalized, UInt32 value);
    [NativeApiAttribute]
public void VertexAttribP4(UInt32 index, GLEnum type, bool normalized, UInt32* value);
    [NativeApiAttribute]
public void VertexAttribP4(UInt32 index, GLEnum type, bool normalized, UInt32& value);
    [NativeApiAttribute]
public void VertexAttribP4(UInt32 index, GLEnum type, Boolean normalized, UInt32* value);
    [NativeApiAttribute]
public void VertexAttribP4(UInt32 index, GLEnum type, Boolean normalized, UInt32& value);
    [NativeApiAttribute]
public void VertexAttribP4(UInt32 index, VertexAttribPointerType type, bool normalized, UInt32* value);
    [NativeApiAttribute]
public void VertexAttribP4(UInt32 index, VertexAttribPointerType type, bool normalized, UInt32& value);
    [NativeApiAttribute]
public void VertexAttribP4(UInt32 index, VertexAttribPointerType type, Boolean normalized, UInt32* value);
    [NativeApiAttribute]
public void VertexAttribP4(UInt32 index, VertexAttribPointerType type, Boolean normalized, UInt32& value);
    [NativeApiAttribute]
public void VertexP2(GLEnum type, UInt32 value);
    [NativeApiAttribute]
public void VertexP2(VertexPointerType type, UInt32 value);
    [NativeApiAttribute]
public void VertexP2(GLEnum type, UInt32* value);
    [NativeApiAttribute]
public void VertexP2(GLEnum type, UInt32& value);
    [NativeApiAttribute]
public void VertexP2(VertexPointerType type, UInt32* value);
    [NativeApiAttribute]
public void VertexP2(VertexPointerType type, UInt32& value);
    [NativeApiAttribute]
public void VertexP3(GLEnum type, UInt32 value);
    [NativeApiAttribute]
public void VertexP3(VertexPointerType type, UInt32 value);
    [NativeApiAttribute]
public void VertexP3(GLEnum type, UInt32* value);
    [NativeApiAttribute]
public void VertexP3(GLEnum type, UInt32& value);
    [NativeApiAttribute]
public void VertexP3(VertexPointerType type, UInt32* value);
    [NativeApiAttribute]
public void VertexP3(VertexPointerType type, UInt32& value);
    [NativeApiAttribute]
public void VertexP4(GLEnum type, UInt32 value);
    [NativeApiAttribute]
public void VertexP4(VertexPointerType type, UInt32 value);
    [NativeApiAttribute]
public void VertexP4(GLEnum type, UInt32* value);
    [NativeApiAttribute]
public void VertexP4(GLEnum type, UInt32& value);
    [NativeApiAttribute]
public void VertexP4(VertexPointerType type, UInt32* value);
    [NativeApiAttribute]
public void VertexP4(VertexPointerType type, UInt32& value);
    [NativeApiAttribute]
public GLEnum ClientWaitSync(IntPtr sync, UInt32 flags, ulong timeout);
    [NativeApiAttribute]
public GLEnum ClientWaitSync(IntPtr sync, SyncObjectMask flags, ulong timeout);
    [NativeApiAttribute]
public void DeleteSync(IntPtr sync);
    [NativeApiAttribute]
public void DrawElementsBaseVertex(GLEnum mode, UInt32 count, GLEnum type, Void* indices, int basevertex);
    [NativeApiAttribute]
public void DrawElementsBaseVertex(GLEnum mode, UInt32 count, GLEnum type, T0& indices, int basevertex);
    [NativeApiAttribute]
public void DrawElementsBaseVertex(GLEnum mode, UInt32 count, DrawElementsType type, Void* indices, int basevertex);
    [NativeApiAttribute]
public void DrawElementsBaseVertex(GLEnum mode, UInt32 count, DrawElementsType type, T0& indices, int basevertex);
    [NativeApiAttribute]
public void DrawElementsBaseVertex(PrimitiveType mode, UInt32 count, GLEnum type, Void* indices, int basevertex);
    [NativeApiAttribute]
public void DrawElementsBaseVertex(PrimitiveType mode, UInt32 count, GLEnum type, T0& indices, int basevertex);
    [NativeApiAttribute]
public void DrawElementsBaseVertex(PrimitiveType mode, UInt32 count, DrawElementsType type, Void* indices, int basevertex);
    [NativeApiAttribute]
public void DrawElementsBaseVertex(PrimitiveType mode, UInt32 count, DrawElementsType type, T0& indices, int basevertex);
    [NativeApiAttribute]
public void DrawElementsInstancedBaseVertex(GLEnum mode, UInt32 count, GLEnum type, Void* indices, UInt32 instancecount, int basevertex);
    [NativeApiAttribute]
public void DrawElementsInstancedBaseVertex(GLEnum mode, UInt32 count, GLEnum type, T0& indices, UInt32 instancecount, int basevertex);
    [NativeApiAttribute]
public void DrawElementsInstancedBaseVertex(GLEnum mode, UInt32 count, DrawElementsType type, Void* indices, UInt32 instancecount, int basevertex);
    [NativeApiAttribute]
public void DrawElementsInstancedBaseVertex(GLEnum mode, UInt32 count, DrawElementsType type, T0& indices, UInt32 instancecount, int basevertex);
    [NativeApiAttribute]
public void DrawElementsInstancedBaseVertex(PrimitiveType mode, UInt32 count, GLEnum type, Void* indices, UInt32 instancecount, int basevertex);
    [NativeApiAttribute]
public void DrawElementsInstancedBaseVertex(PrimitiveType mode, UInt32 count, GLEnum type, T0& indices, UInt32 instancecount, int basevertex);
    [NativeApiAttribute]
public void DrawElementsInstancedBaseVertex(PrimitiveType mode, UInt32 count, DrawElementsType type, Void* indices, UInt32 instancecount, int basevertex);
    [NativeApiAttribute]
public void DrawElementsInstancedBaseVertex(PrimitiveType mode, UInt32 count, DrawElementsType type, T0& indices, UInt32 instancecount, int basevertex);
    [NativeApiAttribute]
public void DrawRangeElementsBaseVertex(GLEnum mode, UInt32 start, UInt32 end, UInt32 count, GLEnum type, Void* indices, int basevertex);
    [NativeApiAttribute]
public void DrawRangeElementsBaseVertex(GLEnum mode, UInt32 start, UInt32 end, UInt32 count, GLEnum type, T0& indices, int basevertex);
    [NativeApiAttribute]
public void DrawRangeElementsBaseVertex(GLEnum mode, UInt32 start, UInt32 end, UInt32 count, DrawElementsType type, Void* indices, int basevertex);
    [NativeApiAttribute]
public void DrawRangeElementsBaseVertex(GLEnum mode, UInt32 start, UInt32 end, UInt32 count, DrawElementsType type, T0& indices, int basevertex);
    [NativeApiAttribute]
public void DrawRangeElementsBaseVertex(PrimitiveType mode, UInt32 start, UInt32 end, UInt32 count, GLEnum type, Void* indices, int basevertex);
    [NativeApiAttribute]
public void DrawRangeElementsBaseVertex(PrimitiveType mode, UInt32 start, UInt32 end, UInt32 count, GLEnum type, T0& indices, int basevertex);
    [NativeApiAttribute]
public void DrawRangeElementsBaseVertex(PrimitiveType mode, UInt32 start, UInt32 end, UInt32 count, DrawElementsType type, Void* indices, int basevertex);
    [NativeApiAttribute]
public void DrawRangeElementsBaseVertex(PrimitiveType mode, UInt32 start, UInt32 end, UInt32 count, DrawElementsType type, T0& indices, int basevertex);
    [NativeApiAttribute]
public IntPtr FenceSync(GLEnum condition, UInt32 flags);
    [NativeApiAttribute]
public IntPtr FenceSync(GLEnum condition, SyncBehaviorFlags flags);
    [NativeApiAttribute]
public IntPtr FenceSync(SyncCondition condition, UInt32 flags);
    [NativeApiAttribute]
public IntPtr FenceSync(SyncCondition condition, SyncBehaviorFlags flags);
    [NativeApiAttribute]
public void FramebufferTexture(GLEnum target, GLEnum attachment, UInt32 texture, int level);
    [NativeApiAttribute]
public void FramebufferTexture(GLEnum target, FramebufferAttachment attachment, UInt32 texture, int level);
    [NativeApiAttribute]
public void FramebufferTexture(FramebufferTarget target, GLEnum attachment, UInt32 texture, int level);
    [NativeApiAttribute]
public void FramebufferTexture(FramebufferTarget target, FramebufferAttachment attachment, UInt32 texture, int level);
    [NativeApiAttribute]
public void GetBufferParameter(GLEnum target, GLEnum pname, Int64* params);
    [NativeApiAttribute]
public void GetBufferParameter(GLEnum target, GLEnum pname, Int64& params);
    [NativeApiAttribute]
public void GetBufferParameter(GLEnum target, BufferPNameARB pname, Int64* params);
    [NativeApiAttribute]
public void GetBufferParameter(GLEnum target, BufferPNameARB pname, Int64& params);
    [NativeApiAttribute]
public void GetBufferParameter(BufferTargetARB target, GLEnum pname, Int64* params);
    [NativeApiAttribute]
public void GetBufferParameter(BufferTargetARB target, GLEnum pname, Int64& params);
    [NativeApiAttribute]
public void GetBufferParameter(BufferTargetARB target, BufferPNameARB pname, Int64* params);
    [NativeApiAttribute]
public void GetBufferParameter(BufferTargetARB target, BufferPNameARB pname, Int64& params);
    [NativeApiAttribute]
public void GetInteger64(GLEnum pname, Int64* data);
    [NativeApiAttribute]
public void GetInteger64(GLEnum pname, Int64& data);
    [NativeApiAttribute]
public void GetInteger64(GetPName pname, Int64* data);
    [NativeApiAttribute]
public void GetInteger64(GetPName pname, Int64& data);
    [NativeApiAttribute]
public void GetInteger64(GLEnum target, UInt32 index, Int64* data);
    [NativeApiAttribute]
public void GetInteger64(GLEnum target, UInt32 index, Int64& data);
    [NativeApiAttribute]
public void GetInteger64(GetPName target, UInt32 index, Int64* data);
    [NativeApiAttribute]
public void GetInteger64(GetPName target, UInt32 index, Int64& data);
    [NativeApiAttribute]
public void GetMultisample(GLEnum pname, UInt32 index, Single* val);
    [NativeApiAttribute]
public void GetMultisample(GLEnum pname, UInt32 index, Single& val);
    [NativeApiAttribute]
public void GetMultisample(GetMultisamplePNameNV pname, UInt32 index, Single* val);
    [NativeApiAttribute]
public void GetMultisample(GetMultisamplePNameNV pname, UInt32 index, Single& val);
    [NativeApiAttribute]
public void GetSync(IntPtr sync, GLEnum pname, UInt32 count, UInt32* length, Int32* values);
    [NativeApiAttribute]
public void GetSync(IntPtr sync, GLEnum pname, UInt32 count, UInt32* length, Int32& values);
    [NativeApiAttribute]
public void GetSync(IntPtr sync, GLEnum pname, UInt32 count, UInt32& length, Int32* values);
    [NativeApiAttribute]
public void GetSync(IntPtr sync, GLEnum pname, UInt32 count, UInt32& length, Int32& values);
    [NativeApiAttribute]
public void GetSync(IntPtr sync, SyncParameterName pname, UInt32 count, UInt32* length, Int32* values);
    [NativeApiAttribute]
public void GetSync(IntPtr sync, SyncParameterName pname, UInt32 count, UInt32* length, Int32& values);
    [NativeApiAttribute]
public void GetSync(IntPtr sync, SyncParameterName pname, UInt32 count, UInt32& length, Int32* values);
    [NativeApiAttribute]
public void GetSync(IntPtr sync, SyncParameterName pname, UInt32 count, UInt32& length, Int32& values);
    [NativeApiAttribute]
public bool IsSync(IntPtr sync);
    [NativeApiAttribute]
public void MultiDrawElementsBaseVertex(GLEnum mode, UInt32* count, GLEnum type, Void** indices, UInt32 drawcount, Int32* basevertex);
    [NativeApiAttribute]
public void MultiDrawElementsBaseVertex(GLEnum mode, UInt32* count, GLEnum type, Void** indices, UInt32 drawcount, Int32& basevertex);
    [NativeApiAttribute]
public void MultiDrawElementsBaseVertex(GLEnum mode, UInt32* count, GLEnum type, Void*& indices, UInt32 drawcount, Int32* basevertex);
    [NativeApiAttribute]
public void MultiDrawElementsBaseVertex(GLEnum mode, UInt32* count, GLEnum type, Void*& indices, UInt32 drawcount, Int32& basevertex);
    [NativeApiAttribute]
public void MultiDrawElementsBaseVertex(GLEnum mode, UInt32& count, GLEnum type, Void** indices, UInt32 drawcount, Int32* basevertex);
    [NativeApiAttribute]
public void MultiDrawElementsBaseVertex(GLEnum mode, UInt32& count, GLEnum type, Void** indices, UInt32 drawcount, Int32& basevertex);
    [NativeApiAttribute]
public void MultiDrawElementsBaseVertex(GLEnum mode, UInt32& count, GLEnum type, Void*& indices, UInt32 drawcount, Int32* basevertex);
    [NativeApiAttribute]
public void MultiDrawElementsBaseVertex(GLEnum mode, UInt32& count, GLEnum type, Void*& indices, UInt32 drawcount, Int32& basevertex);
    [NativeApiAttribute]
public void MultiDrawElementsBaseVertex(GLEnum mode, UInt32* count, DrawElementsType type, Void** indices, UInt32 drawcount, Int32* basevertex);
    [NativeApiAttribute]
public void MultiDrawElementsBaseVertex(GLEnum mode, UInt32* count, DrawElementsType type, Void** indices, UInt32 drawcount, Int32& basevertex);
    [NativeApiAttribute]
public void MultiDrawElementsBaseVertex(GLEnum mode, UInt32* count, DrawElementsType type, Void*& indices, UInt32 drawcount, Int32* basevertex);
    [NativeApiAttribute]
public void MultiDrawElementsBaseVertex(GLEnum mode, UInt32* count, DrawElementsType type, Void*& indices, UInt32 drawcount, Int32& basevertex);
    [NativeApiAttribute]
public void MultiDrawElementsBaseVertex(GLEnum mode, UInt32& count, DrawElementsType type, Void** indices, UInt32 drawcount, Int32* basevertex);
    [NativeApiAttribute]
public void MultiDrawElementsBaseVertex(GLEnum mode, UInt32& count, DrawElementsType type, Void** indices, UInt32 drawcount, Int32& basevertex);
    [NativeApiAttribute]
public void MultiDrawElementsBaseVertex(GLEnum mode, UInt32& count, DrawElementsType type, Void*& indices, UInt32 drawcount, Int32* basevertex);
    [NativeApiAttribute]
public void MultiDrawElementsBaseVertex(GLEnum mode, UInt32& count, DrawElementsType type, Void*& indices, UInt32 drawcount, Int32& basevertex);
    [NativeApiAttribute]
public void MultiDrawElementsBaseVertex(PrimitiveType mode, UInt32* count, GLEnum type, Void** indices, UInt32 drawcount, Int32* basevertex);
    [NativeApiAttribute]
public void MultiDrawElementsBaseVertex(PrimitiveType mode, UInt32* count, GLEnum type, Void** indices, UInt32 drawcount, Int32& basevertex);
    [NativeApiAttribute]
public void MultiDrawElementsBaseVertex(PrimitiveType mode, UInt32* count, GLEnum type, Void*& indices, UInt32 drawcount, Int32* basevertex);
    [NativeApiAttribute]
public void MultiDrawElementsBaseVertex(PrimitiveType mode, UInt32* count, GLEnum type, Void*& indices, UInt32 drawcount, Int32& basevertex);
    [NativeApiAttribute]
public void MultiDrawElementsBaseVertex(PrimitiveType mode, UInt32& count, GLEnum type, Void** indices, UInt32 drawcount, Int32* basevertex);
    [NativeApiAttribute]
public void MultiDrawElementsBaseVertex(PrimitiveType mode, UInt32& count, GLEnum type, Void** indices, UInt32 drawcount, Int32& basevertex);
    [NativeApiAttribute]
public void MultiDrawElementsBaseVertex(PrimitiveType mode, UInt32& count, GLEnum type, Void*& indices, UInt32 drawcount, Int32* basevertex);
    [NativeApiAttribute]
public void MultiDrawElementsBaseVertex(PrimitiveType mode, UInt32& count, GLEnum type, Void*& indices, UInt32 drawcount, Int32& basevertex);
    [NativeApiAttribute]
public void MultiDrawElementsBaseVertex(PrimitiveType mode, UInt32* count, DrawElementsType type, Void** indices, UInt32 drawcount, Int32* basevertex);
    [NativeApiAttribute]
public void MultiDrawElementsBaseVertex(PrimitiveType mode, UInt32* count, DrawElementsType type, Void** indices, UInt32 drawcount, Int32& basevertex);
    [NativeApiAttribute]
public void MultiDrawElementsBaseVertex(PrimitiveType mode, UInt32* count, DrawElementsType type, Void*& indices, UInt32 drawcount, Int32* basevertex);
    [NativeApiAttribute]
public void MultiDrawElementsBaseVertex(PrimitiveType mode, UInt32* count, DrawElementsType type, Void*& indices, UInt32 drawcount, Int32& basevertex);
    [NativeApiAttribute]
public void MultiDrawElementsBaseVertex(PrimitiveType mode, UInt32& count, DrawElementsType type, Void** indices, UInt32 drawcount, Int32* basevertex);
    [NativeApiAttribute]
public void MultiDrawElementsBaseVertex(PrimitiveType mode, UInt32& count, DrawElementsType type, Void** indices, UInt32 drawcount, Int32& basevertex);
    [NativeApiAttribute]
public void MultiDrawElementsBaseVertex(PrimitiveType mode, UInt32& count, DrawElementsType type, Void*& indices, UInt32 drawcount, Int32* basevertex);
    [NativeApiAttribute]
public void MultiDrawElementsBaseVertex(PrimitiveType mode, UInt32& count, DrawElementsType type, Void*& indices, UInt32 drawcount, Int32& basevertex);
    [NativeApiAttribute]
public void ProvokingVertex(GLEnum mode);
    [NativeApiAttribute]
public void ProvokingVertex(VertexProvokingMode mode);
    [NativeApiAttribute]
public void SampleMask(UInt32 maskNumber, UInt32 mask);
    [NativeApiAttribute]
public void TexImage2DMultisample(GLEnum target, UInt32 samples, GLEnum internalformat, UInt32 width, UInt32 height, bool fixedsamplelocations);
    [NativeApiAttribute]
public void TexImage2DMultisample(GLEnum target, UInt32 samples, GLEnum internalformat, UInt32 width, UInt32 height, Boolean fixedsamplelocations);
    [NativeApiAttribute]
public void TexImage2DMultisample(GLEnum target, UInt32 samples, InternalFormat internalformat, UInt32 width, UInt32 height, bool fixedsamplelocations);
    [NativeApiAttribute]
public void TexImage2DMultisample(GLEnum target, UInt32 samples, InternalFormat internalformat, UInt32 width, UInt32 height, Boolean fixedsamplelocations);
    [NativeApiAttribute]
public void TexImage2DMultisample(TextureTarget target, UInt32 samples, GLEnum internalformat, UInt32 width, UInt32 height, bool fixedsamplelocations);
    [NativeApiAttribute]
public void TexImage2DMultisample(TextureTarget target, UInt32 samples, GLEnum internalformat, UInt32 width, UInt32 height, Boolean fixedsamplelocations);
    [NativeApiAttribute]
public void TexImage2DMultisample(TextureTarget target, UInt32 samples, InternalFormat internalformat, UInt32 width, UInt32 height, bool fixedsamplelocations);
    [NativeApiAttribute]
public void TexImage2DMultisample(TextureTarget target, UInt32 samples, InternalFormat internalformat, UInt32 width, UInt32 height, Boolean fixedsamplelocations);
    [NativeApiAttribute]
public void TexImage3DMultisample(GLEnum target, UInt32 samples, GLEnum internalformat, UInt32 width, UInt32 height, UInt32 depth, bool fixedsamplelocations);
    [NativeApiAttribute]
public void TexImage3DMultisample(GLEnum target, UInt32 samples, GLEnum internalformat, UInt32 width, UInt32 height, UInt32 depth, Boolean fixedsamplelocations);
    [NativeApiAttribute]
public void TexImage3DMultisample(GLEnum target, UInt32 samples, InternalFormat internalformat, UInt32 width, UInt32 height, UInt32 depth, bool fixedsamplelocations);
    [NativeApiAttribute]
public void TexImage3DMultisample(GLEnum target, UInt32 samples, InternalFormat internalformat, UInt32 width, UInt32 height, UInt32 depth, Boolean fixedsamplelocations);
    [NativeApiAttribute]
public void TexImage3DMultisample(TextureTarget target, UInt32 samples, GLEnum internalformat, UInt32 width, UInt32 height, UInt32 depth, bool fixedsamplelocations);
    [NativeApiAttribute]
public void TexImage3DMultisample(TextureTarget target, UInt32 samples, GLEnum internalformat, UInt32 width, UInt32 height, UInt32 depth, Boolean fixedsamplelocations);
    [NativeApiAttribute]
public void TexImage3DMultisample(TextureTarget target, UInt32 samples, InternalFormat internalformat, UInt32 width, UInt32 height, UInt32 depth, bool fixedsamplelocations);
    [NativeApiAttribute]
public void TexImage3DMultisample(TextureTarget target, UInt32 samples, InternalFormat internalformat, UInt32 width, UInt32 height, UInt32 depth, Boolean fixedsamplelocations);
    [NativeApiAttribute]
public void WaitSync(IntPtr sync, UInt32 flags, ulong timeout);
    [NativeApiAttribute]
public void WaitSync(IntPtr sync, SyncBehaviorFlags flags, ulong timeout);
    [NativeApiAttribute]
public void BindBufferBase(GLEnum target, UInt32 index, UInt32 buffer);
    [NativeApiAttribute]
public void BindBufferBase(BufferTargetARB target, UInt32 index, UInt32 buffer);
    [NativeApiAttribute]
public void BindBufferRange(GLEnum target, UInt32 index, UInt32 buffer, IntPtr offset, UIntPtr size);
    [NativeApiAttribute]
public void BindBufferRange(BufferTargetARB target, UInt32 index, UInt32 buffer, IntPtr offset, UIntPtr size);
    [NativeApiAttribute]
public void CopyBufferSubData(GLEnum readTarget, GLEnum writeTarget, IntPtr readOffset, IntPtr writeOffset, UIntPtr size);
    [NativeApiAttribute]
public void CopyBufferSubData(GLEnum readTarget, CopyBufferSubDataTarget writeTarget, IntPtr readOffset, IntPtr writeOffset, UIntPtr size);
    [NativeApiAttribute]
public void CopyBufferSubData(CopyBufferSubDataTarget readTarget, GLEnum writeTarget, IntPtr readOffset, IntPtr writeOffset, UIntPtr size);
    [NativeApiAttribute]
public void CopyBufferSubData(CopyBufferSubDataTarget readTarget, CopyBufferSubDataTarget writeTarget, IntPtr readOffset, IntPtr writeOffset, UIntPtr size);
    [NativeApiAttribute]
public void DrawArraysInstanced(GLEnum mode, int first, UInt32 count, UInt32 instancecount);
    [NativeApiAttribute]
public void DrawArraysInstanced(PrimitiveType mode, int first, UInt32 count, UInt32 instancecount);
    [NativeApiAttribute]
public void DrawElementsInstanced(GLEnum mode, UInt32 count, GLEnum type, Void* indices, UInt32 instancecount);
    [NativeApiAttribute]
public void DrawElementsInstanced(GLEnum mode, UInt32 count, GLEnum type, T0& indices, UInt32 instancecount);
    [NativeApiAttribute]
public void DrawElementsInstanced(GLEnum mode, UInt32 count, DrawElementsType type, Void* indices, UInt32 instancecount);
    [NativeApiAttribute]
public void DrawElementsInstanced(GLEnum mode, UInt32 count, DrawElementsType type, T0& indices, UInt32 instancecount);
    [NativeApiAttribute]
public void DrawElementsInstanced(PrimitiveType mode, UInt32 count, GLEnum type, Void* indices, UInt32 instancecount);
    [NativeApiAttribute]
public void DrawElementsInstanced(PrimitiveType mode, UInt32 count, GLEnum type, T0& indices, UInt32 instancecount);
    [NativeApiAttribute]
public void DrawElementsInstanced(PrimitiveType mode, UInt32 count, DrawElementsType type, Void* indices, UInt32 instancecount);
    [NativeApiAttribute]
public void DrawElementsInstanced(PrimitiveType mode, UInt32 count, DrawElementsType type, T0& indices, UInt32 instancecount);
    [NativeApiAttribute]
public void GetActiveUniformBlock(UInt32 program, UInt32 uniformBlockIndex, GLEnum pname, Int32* params);
    [NativeApiAttribute]
public void GetActiveUniformBlock(UInt32 program, UInt32 uniformBlockIndex, GLEnum pname, Int32& params);
    [NativeApiAttribute]
public void GetActiveUniformBlock(UInt32 program, UInt32 uniformBlockIndex, UniformBlockPName pname, Int32* params);
    [NativeApiAttribute]
public void GetActiveUniformBlock(UInt32 program, UInt32 uniformBlockIndex, UniformBlockPName pname, Int32& params);
    [NativeApiAttribute]
public void GetActiveUniformBlockName(UInt32 program, UInt32 uniformBlockIndex, UInt32 bufSize, UInt32* length, Byte* uniformBlockName);
    [NativeApiAttribute]
public void GetActiveUniformBlockName(UInt32 program, UInt32 uniformBlockIndex, UInt32 bufSize, UInt32* length, Byte& uniformBlockName);
    [NativeApiAttribute]
public void GetActiveUniformBlockName(UInt32 program, UInt32 uniformBlockIndex, UInt32 bufSize, UInt32* length, String& uniformBlockName);
    [NativeApiAttribute]
public void GetActiveUniformBlockName(UInt32 program, UInt32 uniformBlockIndex, UInt32 bufSize, UInt32& length, Byte* uniformBlockName);
    [NativeApiAttribute]
public void GetActiveUniformBlockName(UInt32 program, UInt32 uniformBlockIndex, UInt32 bufSize, UInt32& length, Byte& uniformBlockName);
    [NativeApiAttribute]
public void GetActiveUniformBlockName(UInt32 program, UInt32 uniformBlockIndex, UInt32 bufSize, UInt32& length, String& uniformBlockName);
    [NativeApiAttribute]
public void GetActiveUniformName(UInt32 program, UInt32 uniformIndex, UInt32 bufSize, UInt32* length, Byte* uniformName);
    [NativeApiAttribute]
public void GetActiveUniformName(UInt32 program, UInt32 uniformIndex, UInt32 bufSize, UInt32* length, Byte& uniformName);
    [NativeApiAttribute]
public void GetActiveUniformName(UInt32 program, UInt32 uniformIndex, UInt32 bufSize, UInt32* length, String& uniformName);
    [NativeApiAttribute]
public void GetActiveUniformName(UInt32 program, UInt32 uniformIndex, UInt32 bufSize, UInt32& length, Byte* uniformName);
    [NativeApiAttribute]
public void GetActiveUniformName(UInt32 program, UInt32 uniformIndex, UInt32 bufSize, UInt32& length, Byte& uniformName);
    [NativeApiAttribute]
public void GetActiveUniformName(UInt32 program, UInt32 uniformIndex, UInt32 bufSize, UInt32& length, String& uniformName);
    [NativeApiAttribute]
public void GetActiveUniforms(UInt32 program, UInt32 uniformCount, UInt32* uniformIndices, GLEnum pname, Int32* params);
    [NativeApiAttribute]
public void GetActiveUniforms(UInt32 program, UInt32 uniformCount, UInt32* uniformIndices, GLEnum pname, Int32& params);
    [NativeApiAttribute]
public void GetActiveUniforms(UInt32 program, UInt32 uniformCount, UInt32& uniformIndices, GLEnum pname, Int32* params);
    [NativeApiAttribute]
public void GetActiveUniforms(UInt32 program, UInt32 uniformCount, UInt32& uniformIndices, GLEnum pname, Int32& params);
    [NativeApiAttribute]
public void GetActiveUniforms(UInt32 program, UInt32 uniformCount, UInt32* uniformIndices, UniformPName pname, Int32* params);
    [NativeApiAttribute]
public void GetActiveUniforms(UInt32 program, UInt32 uniformCount, UInt32* uniformIndices, UniformPName pname, Int32& params);
    [NativeApiAttribute]
public void GetActiveUniforms(UInt32 program, UInt32 uniformCount, UInt32& uniformIndices, UniformPName pname, Int32* params);
    [NativeApiAttribute]
public void GetActiveUniforms(UInt32 program, UInt32 uniformCount, UInt32& uniformIndices, UniformPName pname, Int32& params);
    [NativeApiAttribute]
public void GetInteger(GLEnum target, UInt32 index, Int32* data);
    [NativeApiAttribute]
public void GetInteger(GLEnum target, UInt32 index, Int32& data);
    [NativeApiAttribute]
public void GetInteger(GetPName target, UInt32 index, Int32* data);
    [NativeApiAttribute]
public void GetInteger(GetPName target, UInt32 index, Int32& data);
    [NativeApiAttribute]
public UInt32 GetUniformBlockIndex(UInt32 program, Byte* uniformBlockName);
    [NativeApiAttribute]
public UInt32 GetUniformBlockIndex(UInt32 program, Byte& uniformBlockName);
    [NativeApiAttribute]
public UInt32 GetUniformBlockIndex(UInt32 program, string uniformBlockName);
    [NativeApiAttribute]
public void GetUniformIndices(UInt32 program, UInt32 uniformCount, Byte** uniformNames, UInt32* uniformIndices);
    [NativeApiAttribute]
public void GetUniformIndices(UInt32 program, UInt32 uniformCount, Byte** uniformNames, UInt32& uniformIndices);
    [NativeApiAttribute]
public void GetUniformIndices(UInt32 program, UInt32 uniformCount, Byte*& uniformNames, UInt32* uniformIndices);
    [NativeApiAttribute]
public void GetUniformIndices(UInt32 program, UInt32 uniformCount, Byte*& uniformNames, UInt32& uniformIndices);
    [NativeApiAttribute]
public void PrimitiveRestartIndex(UInt32 index);
    [NativeApiAttribute]
public void TexBuffer(GLEnum target, GLEnum internalformat, UInt32 buffer);
    [NativeApiAttribute]
public void TexBuffer(GLEnum target, SizedInternalFormat internalformat, UInt32 buffer);
    [NativeApiAttribute]
public void TexBuffer(TextureTarget target, GLEnum internalformat, UInt32 buffer);
    [NativeApiAttribute]
public void TexBuffer(TextureTarget target, SizedInternalFormat internalformat, UInt32 buffer);
    [NativeApiAttribute]
public void UniformBlockBinding(UInt32 program, UInt32 uniformBlockIndex, UInt32 uniformBlockBinding);
    [NativeApiAttribute]
public void BeginConditionalRender(UInt32 id, GLEnum mode);
    [NativeApiAttribute]
public void BeginConditionalRender(UInt32 id, ConditionalRenderMode mode);
    [NativeApiAttribute]
public void BeginTransformFeedback(GLEnum primitiveMode);
    [NativeApiAttribute]
public void BeginTransformFeedback(PrimitiveType primitiveMode);
    [NativeApiAttribute]
public void BindFragDataLocation(UInt32 program, UInt32 color, Byte* name);
    [NativeApiAttribute]
public void BindFragDataLocation(UInt32 program, UInt32 color, Byte& name);
    [NativeApiAttribute]
public void BindFragDataLocation(UInt32 program, UInt32 color, string name);
    [NativeApiAttribute]
public void BindFramebuffer(GLEnum target, UInt32 framebuffer);
    [NativeApiAttribute]
public void BindFramebuffer(FramebufferTarget target, UInt32 framebuffer);
    [NativeApiAttribute]
public void BindRenderbuffer(GLEnum target, UInt32 renderbuffer);
    [NativeApiAttribute]
public void BindRenderbuffer(RenderbufferTarget target, UInt32 renderbuffer);
    [NativeApiAttribute]
public void BindVertexArray(UInt32 array);
    [NativeApiAttribute]
public void BlitFramebuffer(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, UInt32 mask, GLEnum filter);
    [NativeApiAttribute]
public void BlitFramebuffer(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, UInt32 mask, BlitFramebufferFilter filter);
    [NativeApiAttribute]
public void BlitFramebuffer(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, ClearBufferMask mask, GLEnum filter);
    [NativeApiAttribute]
public void BlitFramebuffer(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, ClearBufferMask mask, BlitFramebufferFilter filter);
    [NativeApiAttribute]
public GLEnum CheckFramebufferStatus(GLEnum target);
    [NativeApiAttribute]
public GLEnum CheckFramebufferStatus(FramebufferTarget target);
    [NativeApiAttribute]
public void ClampColor(GLEnum target, GLEnum clamp);
    [NativeApiAttribute]
public void ClampColor(GLEnum target, ClampColorModeARB clamp);
    [NativeApiAttribute]
public void ClampColor(ClampColorTargetARB target, GLEnum clamp);
    [NativeApiAttribute]
public void ClampColor(ClampColorTargetARB target, ClampColorModeARB clamp);
    [NativeApiAttribute]
public void ClearBuffer(GLEnum buffer, int drawbuffer, Int32* value);
    [NativeApiAttribute]
public void ClearBuffer(GLEnum buffer, int drawbuffer, Int32& value);
    [NativeApiAttribute]
public void ClearBuffer(BufferKind buffer, int drawbuffer, Int32* value);
    [NativeApiAttribute]
public void ClearBuffer(BufferKind buffer, int drawbuffer, Int32& value);
    [NativeApiAttribute]
public void ClearBuffer(GLEnum buffer, int drawbuffer, UInt32* value);
    [NativeApiAttribute]
public void ClearBuffer(GLEnum buffer, int drawbuffer, UInt32& value);
    [NativeApiAttribute]
public void ClearBuffer(BufferKind buffer, int drawbuffer, UInt32* value);
    [NativeApiAttribute]
public void ClearBuffer(BufferKind buffer, int drawbuffer, UInt32& value);
    [NativeApiAttribute]
public void ClearBuffer(GLEnum buffer, int drawbuffer, Single* value);
    [NativeApiAttribute]
public void ClearBuffer(GLEnum buffer, int drawbuffer, Single& value);
    [NativeApiAttribute]
public void ClearBuffer(BufferKind buffer, int drawbuffer, Single* value);
    [NativeApiAttribute]
public void ClearBuffer(BufferKind buffer, int drawbuffer, Single& value);
    [NativeApiAttribute]
public void ClearBuffer(GLEnum buffer, int drawbuffer, float depth, int stencil);
    [NativeApiAttribute]
public void ClearBuffer(BufferKind buffer, int drawbuffer, float depth, int stencil);
    [NativeApiAttribute]
public void ColorMask(UInt32 index, bool r, bool g, bool b, bool a);
    [NativeApiAttribute]
public void ColorMask(UInt32 index, bool r, bool g, bool b, Boolean a);
    [NativeApiAttribute]
public void ColorMask(UInt32 index, bool r, bool g, Boolean b, bool a);
    [NativeApiAttribute]
public void ColorMask(UInt32 index, bool r, bool g, Boolean b, Boolean a);
    [NativeApiAttribute]
public void ColorMask(UInt32 index, bool r, Boolean g, bool b, bool a);
    [NativeApiAttribute]
public void ColorMask(UInt32 index, bool r, Boolean g, bool b, Boolean a);
    [NativeApiAttribute]
public void ColorMask(UInt32 index, bool r, Boolean g, Boolean b, bool a);
    [NativeApiAttribute]
public void ColorMask(UInt32 index, bool r, Boolean g, Boolean b, Boolean a);
    [NativeApiAttribute]
public void ColorMask(UInt32 index, Boolean r, bool g, bool b, bool a);
    [NativeApiAttribute]
public void ColorMask(UInt32 index, Boolean r, bool g, bool b, Boolean a);
    [NativeApiAttribute]
public void ColorMask(UInt32 index, Boolean r, bool g, Boolean b, bool a);
    [NativeApiAttribute]
public void ColorMask(UInt32 index, Boolean r, bool g, Boolean b, Boolean a);
    [NativeApiAttribute]
public void ColorMask(UInt32 index, Boolean r, Boolean g, bool b, bool a);
    [NativeApiAttribute]
public void ColorMask(UInt32 index, Boolean r, Boolean g, bool b, Boolean a);
    [NativeApiAttribute]
public void ColorMask(UInt32 index, Boolean r, Boolean g, Boolean b, bool a);
    [NativeApiAttribute]
public void ColorMask(UInt32 index, Boolean r, Boolean g, Boolean b, Boolean a);
    [NativeApiAttribute]
public void DeleteFramebuffers(UInt32 n, UInt32* framebuffers);
    [NativeApiAttribute]
public void DeleteFramebuffers(UInt32 n, UInt32& framebuffers);
    [NativeApiAttribute]
public void DeleteFramebuffers(UInt32 n, Framebuffer* framebuffers);
    [NativeApiAttribute]
public void DeleteFramebuffers(UInt32 n, Framebuffer& framebuffers);
    [NativeApiAttribute]
public void DeleteRenderbuffers(UInt32 n, UInt32* renderbuffers);
    [NativeApiAttribute]
public void DeleteRenderbuffers(UInt32 n, UInt32& renderbuffers);
    [NativeApiAttribute]
public void DeleteRenderbuffers(UInt32 n, Renderbuffer* renderbuffers);
    [NativeApiAttribute]
public void DeleteRenderbuffers(UInt32 n, Renderbuffer& renderbuffers);
    [NativeApiAttribute]
public void DeleteVertexArrays(UInt32 n, UInt32* arrays);
    [NativeApiAttribute]
public void DeleteVertexArrays(UInt32 n, UInt32& arrays);
    [NativeApiAttribute]
public void DeleteVertexArrays(UInt32 n, VertexArray* arrays);
    [NativeApiAttribute]
public void DeleteVertexArrays(UInt32 n, VertexArray& arrays);
    [NativeApiAttribute]
public void Disable(GLEnum target, UInt32 index);
    [NativeApiAttribute]
public void Disable(EnableCap target, UInt32 index);
    [NativeApiAttribute]
public void Enable(GLEnum target, UInt32 index);
    [NativeApiAttribute]
public void Enable(EnableCap target, UInt32 index);
    [NativeApiAttribute]
public void EndConditionalRender();
    [NativeApiAttribute]
public void EndTransformFeedback();
    [NativeApiAttribute]
public void FlushMappedBufferRange(GLEnum target, IntPtr offset, UIntPtr length);
    [NativeApiAttribute]
public void FlushMappedBufferRange(BufferTargetARB target, IntPtr offset, UIntPtr length);
    [NativeApiAttribute]
public void FramebufferRenderbuffer(GLEnum target, GLEnum attachment, GLEnum renderbuffertarget, UInt32 renderbuffer);
    [NativeApiAttribute]
public void FramebufferRenderbuffer(GLEnum target, GLEnum attachment, RenderbufferTarget renderbuffertarget, UInt32 renderbuffer);
    [NativeApiAttribute]
public void FramebufferRenderbuffer(GLEnum target, FramebufferAttachment attachment, GLEnum renderbuffertarget, UInt32 renderbuffer);
    [NativeApiAttribute]
public void FramebufferRenderbuffer(GLEnum target, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, UInt32 renderbuffer);
    [NativeApiAttribute]
public void FramebufferRenderbuffer(FramebufferTarget target, GLEnum attachment, GLEnum renderbuffertarget, UInt32 renderbuffer);
    [NativeApiAttribute]
public void FramebufferRenderbuffer(FramebufferTarget target, GLEnum attachment, RenderbufferTarget renderbuffertarget, UInt32 renderbuffer);
    [NativeApiAttribute]
public void FramebufferRenderbuffer(FramebufferTarget target, FramebufferAttachment attachment, GLEnum renderbuffertarget, UInt32 renderbuffer);
    [NativeApiAttribute]
public void FramebufferRenderbuffer(FramebufferTarget target, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, UInt32 renderbuffer);
    [NativeApiAttribute]
public void FramebufferTexture1D(GLEnum target, GLEnum attachment, GLEnum textarget, UInt32 texture, int level);
    [NativeApiAttribute]
public void FramebufferTexture1D(GLEnum target, GLEnum attachment, TextureTarget textarget, UInt32 texture, int level);
    [NativeApiAttribute]
public void FramebufferTexture1D(GLEnum target, FramebufferAttachment attachment, GLEnum textarget, UInt32 texture, int level);
    [NativeApiAttribute]
public void FramebufferTexture1D(GLEnum target, FramebufferAttachment attachment, TextureTarget textarget, UInt32 texture, int level);
    [NativeApiAttribute]
public void FramebufferTexture1D(FramebufferTarget target, GLEnum attachment, GLEnum textarget, UInt32 texture, int level);
    [NativeApiAttribute]
public void FramebufferTexture1D(FramebufferTarget target, GLEnum attachment, TextureTarget textarget, UInt32 texture, int level);
    [NativeApiAttribute]
public void FramebufferTexture1D(FramebufferTarget target, FramebufferAttachment attachment, GLEnum textarget, UInt32 texture, int level);
    [NativeApiAttribute]
public void FramebufferTexture1D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, UInt32 texture, int level);
    [NativeApiAttribute]
public void FramebufferTexture2D(GLEnum target, GLEnum attachment, GLEnum textarget, UInt32 texture, int level);
    [NativeApiAttribute]
public void FramebufferTexture2D(GLEnum target, GLEnum attachment, TextureTarget textarget, UInt32 texture, int level);
    [NativeApiAttribute]
public void FramebufferTexture2D(GLEnum target, FramebufferAttachment attachment, GLEnum textarget, UInt32 texture, int level);
    [NativeApiAttribute]
public void FramebufferTexture2D(GLEnum target, FramebufferAttachment attachment, TextureTarget textarget, UInt32 texture, int level);
    [NativeApiAttribute]
public void FramebufferTexture2D(FramebufferTarget target, GLEnum attachment, GLEnum textarget, UInt32 texture, int level);
    [NativeApiAttribute]
public void FramebufferTexture2D(FramebufferTarget target, GLEnum attachment, TextureTarget textarget, UInt32 texture, int level);
    [NativeApiAttribute]
public void FramebufferTexture2D(FramebufferTarget target, FramebufferAttachment attachment, GLEnum textarget, UInt32 texture, int level);
    [NativeApiAttribute]
public void FramebufferTexture2D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, UInt32 texture, int level);
    [NativeApiAttribute]
public void FramebufferTexture3D(GLEnum target, GLEnum attachment, GLEnum textarget, UInt32 texture, int level, int zoffset);
    [NativeApiAttribute]
public void FramebufferTexture3D(GLEnum target, GLEnum attachment, TextureTarget textarget, UInt32 texture, int level, int zoffset);
    [NativeApiAttribute]
public void FramebufferTexture3D(GLEnum target, FramebufferAttachment attachment, GLEnum textarget, UInt32 texture, int level, int zoffset);
    [NativeApiAttribute]
public void FramebufferTexture3D(GLEnum target, FramebufferAttachment attachment, TextureTarget textarget, UInt32 texture, int level, int zoffset);
    [NativeApiAttribute]
public void FramebufferTexture3D(FramebufferTarget target, GLEnum attachment, GLEnum textarget, UInt32 texture, int level, int zoffset);
    [NativeApiAttribute]
public void FramebufferTexture3D(FramebufferTarget target, GLEnum attachment, TextureTarget textarget, UInt32 texture, int level, int zoffset);
    [NativeApiAttribute]
public void FramebufferTexture3D(FramebufferTarget target, FramebufferAttachment attachment, GLEnum textarget, UInt32 texture, int level, int zoffset);
    [NativeApiAttribute]
public void FramebufferTexture3D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, UInt32 texture, int level, int zoffset);
    [NativeApiAttribute]
public void FramebufferTextureLayer(GLEnum target, GLEnum attachment, UInt32 texture, int level, int layer);
    [NativeApiAttribute]
public void FramebufferTextureLayer(GLEnum target, FramebufferAttachment attachment, UInt32 texture, int level, int layer);
    [NativeApiAttribute]
public void FramebufferTextureLayer(FramebufferTarget target, GLEnum attachment, UInt32 texture, int level, int layer);
    [NativeApiAttribute]
public void FramebufferTextureLayer(FramebufferTarget target, FramebufferAttachment attachment, UInt32 texture, int level, int layer);
    [NativeApiAttribute]
public void GenerateMipmap(GLEnum target);
    [NativeApiAttribute]
public void GenerateMipmap(TextureTarget target);
    [NativeApiAttribute]
public void GenFramebuffers(UInt32 n, UInt32* framebuffers);
    [NativeApiAttribute]
public void GenFramebuffers(UInt32 n, UInt32& framebuffers);
    [NativeApiAttribute]
public void GenFramebuffers(UInt32 n, Framebuffer* framebuffers);
    [NativeApiAttribute]
public void GenFramebuffers(UInt32 n, Framebuffer& framebuffers);
    [NativeApiAttribute]
public void GenRenderbuffers(UInt32 n, UInt32* renderbuffers);
    [NativeApiAttribute]
public void GenRenderbuffers(UInt32 n, UInt32& renderbuffers);
    [NativeApiAttribute]
public void GenRenderbuffers(UInt32 n, Renderbuffer* renderbuffers);
    [NativeApiAttribute]
public void GenRenderbuffers(UInt32 n, Renderbuffer& renderbuffers);
    [NativeApiAttribute]
public void GenVertexArrays(UInt32 n, UInt32* arrays);
    [NativeApiAttribute]
public void GenVertexArrays(UInt32 n, UInt32& arrays);
    [NativeApiAttribute]
public void GenVertexArrays(UInt32 n, VertexArray* arrays);
    [NativeApiAttribute]
public void GenVertexArrays(UInt32 n, VertexArray& arrays);
    [NativeApiAttribute]
public void GetBoolean(GLEnum target, UInt32 index, Boolean* data);
    [NativeApiAttribute]
public void GetBoolean(GLEnum target, UInt32 index, Boolean& data);
    [NativeApiAttribute]
public void GetBoolean(GLEnum target, UInt32 index, Boolean* data);
    [NativeApiAttribute]
public void GetBoolean(GLEnum target, UInt32 index, Boolean& data);
    [NativeApiAttribute]
public void GetBoolean(BufferTargetARB target, UInt32 index, Boolean* data);
    [NativeApiAttribute]
public void GetBoolean(BufferTargetARB target, UInt32 index, Boolean& data);
    [NativeApiAttribute]
public void GetBoolean(BufferTargetARB target, UInt32 index, Boolean* data);
    [NativeApiAttribute]
public void GetBoolean(BufferTargetARB target, UInt32 index, Boolean& data);
    [NativeApiAttribute]
public int GetFragDataLocation(UInt32 program, Byte* name);
    [NativeApiAttribute]
public int GetFragDataLocation(UInt32 program, Byte& name);
    [NativeApiAttribute]
public int GetFragDataLocation(UInt32 program, string name);
    [NativeApiAttribute]
public void GetFramebufferAttachmentParameter(GLEnum target, GLEnum attachment, GLEnum pname, Int32* params);
    [NativeApiAttribute]
public void GetFramebufferAttachmentParameter(GLEnum target, GLEnum attachment, GLEnum pname, Int32& params);
    [NativeApiAttribute]
public void GetFramebufferAttachmentParameter(GLEnum target, GLEnum attachment, FramebufferAttachmentParameterName pname, Int32* params);
    [NativeApiAttribute]
public void GetFramebufferAttachmentParameter(GLEnum target, GLEnum attachment, FramebufferAttachmentParameterName pname, Int32& params);
    [NativeApiAttribute]
public void GetFramebufferAttachmentParameter(GLEnum target, FramebufferAttachment attachment, GLEnum pname, Int32* params);
    [NativeApiAttribute]
public void GetFramebufferAttachmentParameter(GLEnum target, FramebufferAttachment attachment, GLEnum pname, Int32& params);
    [NativeApiAttribute]
public void GetFramebufferAttachmentParameter(GLEnum target, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, Int32* params);
    [NativeApiAttribute]
public void GetFramebufferAttachmentParameter(GLEnum target, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, Int32& params);
    [NativeApiAttribute]
public void GetFramebufferAttachmentParameter(FramebufferTarget target, GLEnum attachment, GLEnum pname, Int32* params);
    [NativeApiAttribute]
public void GetFramebufferAttachmentParameter(FramebufferTarget target, GLEnum attachment, GLEnum pname, Int32& params);
    [NativeApiAttribute]
public void GetFramebufferAttachmentParameter(FramebufferTarget target, GLEnum attachment, FramebufferAttachmentParameterName pname, Int32* params);
    [NativeApiAttribute]
public void GetFramebufferAttachmentParameter(FramebufferTarget target, GLEnum attachment, FramebufferAttachmentParameterName pname, Int32& params);
    [NativeApiAttribute]
public void GetFramebufferAttachmentParameter(FramebufferTarget target, FramebufferAttachment attachment, GLEnum pname, Int32* params);
    [NativeApiAttribute]
public void GetFramebufferAttachmentParameter(FramebufferTarget target, FramebufferAttachment attachment, GLEnum pname, Int32& params);
    [NativeApiAttribute]
public void GetFramebufferAttachmentParameter(FramebufferTarget target, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, Int32* params);
    [NativeApiAttribute]
public void GetFramebufferAttachmentParameter(FramebufferTarget target, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, Int32& params);
    [NativeApiAttribute]
public void GetRenderbufferParameter(GLEnum target, GLEnum pname, Int32* params);
    [NativeApiAttribute]
public void GetRenderbufferParameter(GLEnum target, GLEnum pname, Int32& params);
    [NativeApiAttribute]
public void GetRenderbufferParameter(GLEnum target, RenderbufferParameterName pname, Int32* params);
    [NativeApiAttribute]
public void GetRenderbufferParameter(GLEnum target, RenderbufferParameterName pname, Int32& params);
    [NativeApiAttribute]
public void GetRenderbufferParameter(RenderbufferTarget target, GLEnum pname, Int32* params);
    [NativeApiAttribute]
public void GetRenderbufferParameter(RenderbufferTarget target, GLEnum pname, Int32& params);
    [NativeApiAttribute]
public void GetRenderbufferParameter(RenderbufferTarget target, RenderbufferParameterName pname, Int32* params);
    [NativeApiAttribute]
public void GetRenderbufferParameter(RenderbufferTarget target, RenderbufferParameterName pname, Int32& params);
    [NativeApiAttribute]
public Byte* GetString(GLEnum name, UInt32 index);
    [NativeApiAttribute]
public string GetStringS(GLEnum name, UInt32 index);
    [NativeApiAttribute]
public Byte* GetString(StringName name, UInt32 index);
    [NativeApiAttribute]
public string GetStringS(StringName name, UInt32 index);
    [NativeApiAttribute]
public void GetTexParameterI(GLEnum target, GLEnum pname, Int32* params);
    [NativeApiAttribute]
public void GetTexParameterI(GLEnum target, GLEnum pname, Int32& params);
    [NativeApiAttribute]
public void GetTexParameterI(GLEnum target, GetTextureParameter pname, Int32* params);
    [NativeApiAttribute]
public void GetTexParameterI(GLEnum target, GetTextureParameter pname, Int32& params);
    [NativeApiAttribute]
public void GetTexParameterI(TextureTarget target, GLEnum pname, Int32* params);
    [NativeApiAttribute]
public void GetTexParameterI(TextureTarget target, GLEnum pname, Int32& params);
    [NativeApiAttribute]
public void GetTexParameterI(TextureTarget target, GetTextureParameter pname, Int32* params);
    [NativeApiAttribute]
public void GetTexParameterI(TextureTarget target, GetTextureParameter pname, Int32& params);
    [NativeApiAttribute]
public void GetTexParameterI(GLEnum target, GLEnum pname, UInt32* params);
    [NativeApiAttribute]
public void GetTexParameterI(GLEnum target, GLEnum pname, UInt32& params);
    [NativeApiAttribute]
public void GetTexParameterI(GLEnum target, GetTextureParameter pname, UInt32* params);
    [NativeApiAttribute]
public void GetTexParameterI(GLEnum target, GetTextureParameter pname, UInt32& params);
    [NativeApiAttribute]
public void GetTexParameterI(TextureTarget target, GLEnum pname, UInt32* params);
    [NativeApiAttribute]
public void GetTexParameterI(TextureTarget target, GLEnum pname, UInt32& params);
    [NativeApiAttribute]
public void GetTexParameterI(TextureTarget target, GetTextureParameter pname, UInt32* params);
    [NativeApiAttribute]
public void GetTexParameterI(TextureTarget target, GetTextureParameter pname, UInt32& params);
    [NativeApiAttribute]
public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, UInt32* size, GLEnum* type, Byte* name);
    [NativeApiAttribute]
public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, UInt32* size, GLEnum* type, Byte& name);
    [NativeApiAttribute]
public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, UInt32* size, GLEnum* type, String& name);
    [NativeApiAttribute]
public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, UInt32* size, GLEnum& type, Byte* name);
    [NativeApiAttribute]
public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, UInt32* size, GLEnum& type, Byte& name);
    [NativeApiAttribute]
public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, UInt32* size, GLEnum& type, String& name);
    [NativeApiAttribute]
public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, UInt32& size, GLEnum* type, Byte* name);
    [NativeApiAttribute]
public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, UInt32& size, GLEnum* type, Byte& name);
    [NativeApiAttribute]
public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, UInt32& size, GLEnum* type, String& name);
    [NativeApiAttribute]
public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, UInt32& size, GLEnum& type, Byte* name);
    [NativeApiAttribute]
public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, UInt32& size, GLEnum& type, Byte& name);
    [NativeApiAttribute]
public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, UInt32& size, GLEnum& type, String& name);
    [NativeApiAttribute]
public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, UInt32* size, GLEnum* type, Byte* name);
    [NativeApiAttribute]
public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, UInt32* size, GLEnum* type, Byte& name);
    [NativeApiAttribute]
public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, UInt32* size, GLEnum* type, String& name);
    [NativeApiAttribute]
public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, UInt32* size, GLEnum& type, Byte* name);
    [NativeApiAttribute]
public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, UInt32* size, GLEnum& type, Byte& name);
    [NativeApiAttribute]
public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, UInt32* size, GLEnum& type, String& name);
    [NativeApiAttribute]
public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, UInt32& size, GLEnum* type, Byte* name);
    [NativeApiAttribute]
public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, UInt32& size, GLEnum* type, Byte& name);
    [NativeApiAttribute]
public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, UInt32& size, GLEnum* type, String& name);
    [NativeApiAttribute]
public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, UInt32& size, GLEnum& type, Byte* name);
    [NativeApiAttribute]
public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, UInt32& size, GLEnum& type, Byte& name);
    [NativeApiAttribute]
public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, UInt32& size, GLEnum& type, String& name);
    [NativeApiAttribute]
public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, UInt32* size, AttributeType* type, Byte* name);
    [NativeApiAttribute]
public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, UInt32* size, AttributeType* type, Byte& name);
    [NativeApiAttribute]
public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, UInt32* size, AttributeType* type, String& name);
    [NativeApiAttribute]
public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, UInt32* size, AttributeType& type, Byte* name);
    [NativeApiAttribute]
public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, UInt32* size, AttributeType& type, Byte& name);
    [NativeApiAttribute]
public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, UInt32* size, AttributeType& type, String& name);
    [NativeApiAttribute]
public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, UInt32& size, AttributeType* type, Byte* name);
    [NativeApiAttribute]
public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, UInt32& size, AttributeType* type, Byte& name);
    [NativeApiAttribute]
public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, UInt32& size, AttributeType* type, String& name);
    [NativeApiAttribute]
public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, UInt32& size, AttributeType& type, Byte* name);
    [NativeApiAttribute]
public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, UInt32& size, AttributeType& type, Byte& name);
    [NativeApiAttribute]
public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, UInt32& size, AttributeType& type, String& name);
    [NativeApiAttribute]
public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, UInt32* size, AttributeType* type, Byte* name);
    [NativeApiAttribute]
public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, UInt32* size, AttributeType* type, Byte& name);
    [NativeApiAttribute]
public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, UInt32* size, AttributeType* type, String& name);
    [NativeApiAttribute]
public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, UInt32* size, AttributeType& type, Byte* name);
    [NativeApiAttribute]
public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, UInt32* size, AttributeType& type, Byte& name);
    [NativeApiAttribute]
public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, UInt32* size, AttributeType& type, String& name);
    [NativeApiAttribute]
public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, UInt32& size, AttributeType* type, Byte* name);
    [NativeApiAttribute]
public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, UInt32& size, AttributeType* type, Byte& name);
    [NativeApiAttribute]
public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, UInt32& size, AttributeType* type, String& name);
    [NativeApiAttribute]
public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, UInt32& size, AttributeType& type, Byte* name);
    [NativeApiAttribute]
public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, UInt32& size, AttributeType& type, Byte& name);
    [NativeApiAttribute]
public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, UInt32& size, AttributeType& type, String& name);
    [NativeApiAttribute]
public void GetUniform(UInt32 program, int location, UInt32* params);
    [NativeApiAttribute]
public void GetUniform(UInt32 program, int location, UInt32& params);
    [NativeApiAttribute]
public void GetVertexAttribI(UInt32 index, GLEnum pname, Int32* params);
    [NativeApiAttribute]
public void GetVertexAttribI(UInt32 index, GLEnum pname, Int32& params);
    [NativeApiAttribute]
public void GetVertexAttribI(UInt32 index, VertexAttribEnum pname, Int32* params);
    [NativeApiAttribute]
public void GetVertexAttribI(UInt32 index, VertexAttribEnum pname, Int32& params);
    [NativeApiAttribute]
public void GetVertexAttribI(UInt32 index, GLEnum pname, UInt32* params);
    [NativeApiAttribute]
public void GetVertexAttribI(UInt32 index, GLEnum pname, UInt32& params);
    [NativeApiAttribute]
public void GetVertexAttribI(UInt32 index, VertexAttribEnum pname, UInt32* params);
    [NativeApiAttribute]
public void GetVertexAttribI(UInt32 index, VertexAttribEnum pname, UInt32& params);
    [NativeApiAttribute]
public bool IsEnabled(GLEnum target, UInt32 index);
    [NativeApiAttribute]
public bool IsEnabled(EnableCap target, UInt32 index);
    [NativeApiAttribute]
public bool IsFramebuffer(UInt32 framebuffer);
    [NativeApiAttribute]
public bool IsRenderbuffer(UInt32 renderbuffer);
    [NativeApiAttribute]
public bool IsVertexArray(UInt32 array);
    [NativeApiAttribute]
public Void* MapBufferRange(GLEnum target, IntPtr offset, UIntPtr length, UInt32 access);
    [NativeApiAttribute]
public Void* MapBufferRange(GLEnum target, IntPtr offset, UIntPtr length, MapBufferAccessMask access);
    [NativeApiAttribute]
public Void* MapBufferRange(BufferTargetARB target, IntPtr offset, UIntPtr length, UInt32 access);
    [NativeApiAttribute]
public Void* MapBufferRange(BufferTargetARB target, IntPtr offset, UIntPtr length, MapBufferAccessMask access);
    [NativeApiAttribute]
public void RenderbufferStorage(GLEnum target, GLEnum internalformat, UInt32 width, UInt32 height);
    [NativeApiAttribute]
public void RenderbufferStorage(GLEnum target, InternalFormat internalformat, UInt32 width, UInt32 height);
    [NativeApiAttribute]
public void RenderbufferStorage(RenderbufferTarget target, GLEnum internalformat, UInt32 width, UInt32 height);
    [NativeApiAttribute]
public void RenderbufferStorage(RenderbufferTarget target, InternalFormat internalformat, UInt32 width, UInt32 height);
    [NativeApiAttribute]
public void RenderbufferStorageMultisample(GLEnum target, UInt32 samples, GLEnum internalformat, UInt32 width, UInt32 height);
    [NativeApiAttribute]
public void RenderbufferStorageMultisample(GLEnum target, UInt32 samples, InternalFormat internalformat, UInt32 width, UInt32 height);
    [NativeApiAttribute]
public void RenderbufferStorageMultisample(RenderbufferTarget target, UInt32 samples, GLEnum internalformat, UInt32 width, UInt32 height);
    [NativeApiAttribute]
public void RenderbufferStorageMultisample(RenderbufferTarget target, UInt32 samples, InternalFormat internalformat, UInt32 width, UInt32 height);
    [NativeApiAttribute]
public void TexParameterI(GLEnum target, GLEnum pname, Int32* params);
    [NativeApiAttribute]
public void TexParameterI(GLEnum target, GLEnum pname, Int32& params);
    [NativeApiAttribute]
public void TexParameterI(GLEnum target, TextureParameterName pname, Int32* params);
    [NativeApiAttribute]
public void TexParameterI(GLEnum target, TextureParameterName pname, Int32& params);
    [NativeApiAttribute]
public void TexParameterI(TextureTarget target, GLEnum pname, Int32* params);
    [NativeApiAttribute]
public void TexParameterI(TextureTarget target, GLEnum pname, Int32& params);
    [NativeApiAttribute]
public void TexParameterI(TextureTarget target, TextureParameterName pname, Int32* params);
    [NativeApiAttribute]
public void TexParameterI(TextureTarget target, TextureParameterName pname, Int32& params);
    [NativeApiAttribute]
public void TexParameterI(GLEnum target, GLEnum pname, UInt32* params);
    [NativeApiAttribute]
public void TexParameterI(GLEnum target, GLEnum pname, UInt32& params);
    [NativeApiAttribute]
public void TexParameterI(GLEnum target, TextureParameterName pname, UInt32* params);
    [NativeApiAttribute]
public void TexParameterI(GLEnum target, TextureParameterName pname, UInt32& params);
    [NativeApiAttribute]
public void TexParameterI(TextureTarget target, GLEnum pname, UInt32* params);
    [NativeApiAttribute]
public void TexParameterI(TextureTarget target, GLEnum pname, UInt32& params);
    [NativeApiAttribute]
public void TexParameterI(TextureTarget target, TextureParameterName pname, UInt32* params);
    [NativeApiAttribute]
public void TexParameterI(TextureTarget target, TextureParameterName pname, UInt32& params);
    [NativeApiAttribute]
public void TransformFeedbackVaryings(UInt32 program, UInt32 count, Byte** varyings, GLEnum bufferMode);
    [NativeApiAttribute]
public void TransformFeedbackVaryings(UInt32 program, UInt32 count, Byte*& varyings, GLEnum bufferMode);
    [NativeApiAttribute]
public void TransformFeedbackVaryings(UInt32 program, UInt32 count, Byte** varyings, TransformFeedbackBufferMode bufferMode);
    [NativeApiAttribute]
public void TransformFeedbackVaryings(UInt32 program, UInt32 count, Byte*& varyings, TransformFeedbackBufferMode bufferMode);
    [NativeApiAttribute]
public void Uniform1(int location, UInt32 v0);
    [NativeApiAttribute]
public void Uniform1(int location, UInt32 count, UInt32* value);
    [NativeApiAttribute]
public void Uniform1(int location, UInt32 count, UInt32& value);
    [NativeApiAttribute]
public void Uniform2(int location, UInt32 v0, UInt32 v1);
    [NativeApiAttribute]
public void Uniform2(int location, UInt32 count, UInt32* value);
    [NativeApiAttribute]
public void Uniform2(int location, UInt32 count, UInt32& value);
    [NativeApiAttribute]
public void Uniform3(int location, UInt32 v0, UInt32 v1, UInt32 v2);
    [NativeApiAttribute]
public void Uniform3(int location, UInt32 count, UInt32* value);
    [NativeApiAttribute]
public void Uniform3(int location, UInt32 count, UInt32& value);
    [NativeApiAttribute]
public void Uniform4(int location, UInt32 v0, UInt32 v1, UInt32 v2, UInt32 v3);
    [NativeApiAttribute]
public void Uniform4(int location, UInt32 count, UInt32* value);
    [NativeApiAttribute]
public void Uniform4(int location, UInt32 count, UInt32& value);
    [NativeApiAttribute]
public void VertexAttribI1(UInt32 index, int x);
    [NativeApiAttribute]
public void VertexAttribI1(UInt32 index, UInt32 x);
    [NativeApiAttribute]
public void VertexAttribI1(UInt32 index, Int32* v);
    [NativeApiAttribute]
public void VertexAttribI1(UInt32 index, Int32& v);
    [NativeApiAttribute]
public void VertexAttribI1(UInt32 index, UInt32* v);
    [NativeApiAttribute]
public void VertexAttribI1(UInt32 index, UInt32& v);
    [NativeApiAttribute]
public void VertexAttribI2(UInt32 index, int x, int y);
    [NativeApiAttribute]
public void VertexAttribI2(UInt32 index, UInt32 x, UInt32 y);
    [NativeApiAttribute]
public void VertexAttribI2(UInt32 index, Int32* v);
    [NativeApiAttribute]
public void VertexAttribI2(UInt32 index, Int32& v);
    [NativeApiAttribute]
public void VertexAttribI2(UInt32 index, UInt32* v);
    [NativeApiAttribute]
public void VertexAttribI2(UInt32 index, UInt32& v);
    [NativeApiAttribute]
public void VertexAttribI3(UInt32 index, int x, int y, int z);
    [NativeApiAttribute]
public void VertexAttribI3(UInt32 index, UInt32 x, UInt32 y, UInt32 z);
    [NativeApiAttribute]
public void VertexAttribI3(UInt32 index, Int32* v);
    [NativeApiAttribute]
public void VertexAttribI3(UInt32 index, Int32& v);
    [NativeApiAttribute]
public void VertexAttribI3(UInt32 index, UInt32* v);
    [NativeApiAttribute]
public void VertexAttribI3(UInt32 index, UInt32& v);
    [NativeApiAttribute]
public void VertexAttribI4(UInt32 index, int x, int y, int z, int w);
    [NativeApiAttribute]
public void VertexAttribI4(UInt32 index, UInt32 x, UInt32 y, UInt32 z, UInt32 w);
    [NativeApiAttribute]
public void VertexAttribI4(UInt32 index, Int32* v);
    [NativeApiAttribute]
public void VertexAttribI4(UInt32 index, Int32& v);
    [NativeApiAttribute]
public void VertexAttribI4(UInt32 index, UInt32* v);
    [NativeApiAttribute]
public void VertexAttribI4(UInt32 index, UInt32& v);
    [NativeApiAttribute]
public void VertexAttribI4(UInt32 index, SByte* v);
    [NativeApiAttribute]
public void VertexAttribI4(UInt32 index, SByte& v);
    [NativeApiAttribute]
public void VertexAttribI4(UInt32 index, Int16* v);
    [NativeApiAttribute]
public void VertexAttribI4(UInt32 index, Int16& v);
    [NativeApiAttribute]
public void VertexAttribI4(UInt32 index, Byte* v);
    [NativeApiAttribute]
public void VertexAttribI4(UInt32 index, Byte& v);
    [NativeApiAttribute]
public void VertexAttribI4(UInt32 index, string v);
    [NativeApiAttribute]
public void VertexAttribI4(UInt32 index, UInt16* v);
    [NativeApiAttribute]
public void VertexAttribI4(UInt32 index, UInt16& v);
    [NativeApiAttribute]
public void VertexAttribIPointer(UInt32 index, int size, GLEnum type, UInt32 stride, Void* pointer);
    [NativeApiAttribute]
public void VertexAttribIPointer(UInt32 index, int size, VertexAttribIType type, UInt32 stride, Void* pointer);
    [NativeApiAttribute]
public void UniformMatrix2x3(int location, UInt32 count, bool transpose, Single* value);
    [NativeApiAttribute]
public void UniformMatrix2x3(int location, UInt32 count, bool transpose, Single& value);
    [NativeApiAttribute]
public void UniformMatrix2x3(int location, UInt32 count, Boolean transpose, Single* value);
    [NativeApiAttribute]
public void UniformMatrix2x3(int location, UInt32 count, Boolean transpose, Single& value);
    [NativeApiAttribute]
public void UniformMatrix2x4(int location, UInt32 count, bool transpose, Single* value);
    [NativeApiAttribute]
public void UniformMatrix2x4(int location, UInt32 count, bool transpose, Single& value);
    [NativeApiAttribute]
public void UniformMatrix2x4(int location, UInt32 count, Boolean transpose, Single* value);
    [NativeApiAttribute]
public void UniformMatrix2x4(int location, UInt32 count, Boolean transpose, Single& value);
    [NativeApiAttribute]
public void UniformMatrix3x2(int location, UInt32 count, bool transpose, Single* value);
    [NativeApiAttribute]
public void UniformMatrix3x2(int location, UInt32 count, bool transpose, Single& value);
    [NativeApiAttribute]
public void UniformMatrix3x2(int location, UInt32 count, Boolean transpose, Single* value);
    [NativeApiAttribute]
public void UniformMatrix3x2(int location, UInt32 count, Boolean transpose, Single& value);
    [NativeApiAttribute]
public void UniformMatrix3x4(int location, UInt32 count, bool transpose, Single* value);
    [NativeApiAttribute]
public void UniformMatrix3x4(int location, UInt32 count, bool transpose, Single& value);
    [NativeApiAttribute]
public void UniformMatrix3x4(int location, UInt32 count, Boolean transpose, Single* value);
    [NativeApiAttribute]
public void UniformMatrix3x4(int location, UInt32 count, Boolean transpose, Single& value);
    [NativeApiAttribute]
public void UniformMatrix4x2(int location, UInt32 count, bool transpose, Single* value);
    [NativeApiAttribute]
public void UniformMatrix4x2(int location, UInt32 count, bool transpose, Single& value);
    [NativeApiAttribute]
public void UniformMatrix4x2(int location, UInt32 count, Boolean transpose, Single* value);
    [NativeApiAttribute]
public void UniformMatrix4x2(int location, UInt32 count, Boolean transpose, Single& value);
    [NativeApiAttribute]
public void UniformMatrix4x3(int location, UInt32 count, bool transpose, Single* value);
    [NativeApiAttribute]
public void UniformMatrix4x3(int location, UInt32 count, bool transpose, Single& value);
    [NativeApiAttribute]
public void UniformMatrix4x3(int location, UInt32 count, Boolean transpose, Single* value);
    [NativeApiAttribute]
public void UniformMatrix4x3(int location, UInt32 count, Boolean transpose, Single& value);
    [NativeApiAttribute]
public void AttachShader(UInt32 program, UInt32 shader);
    [NativeApiAttribute]
public void BindAttribLocation(UInt32 program, UInt32 index, Byte* name);
    [NativeApiAttribute]
public void BindAttribLocation(UInt32 program, UInt32 index, Byte& name);
    [NativeApiAttribute]
public void BindAttribLocation(UInt32 program, UInt32 index, string name);
    [NativeApiAttribute]
public void BlendEquationSeparate(GLEnum modeRGB, GLEnum modeAlpha);
    [NativeApiAttribute]
public void BlendEquationSeparate(GLEnum modeRGB, BlendEquationModeEXT modeAlpha);
    [NativeApiAttribute]
public void BlendEquationSeparate(BlendEquationModeEXT modeRGB, GLEnum modeAlpha);
    [NativeApiAttribute]
public void BlendEquationSeparate(BlendEquationModeEXT modeRGB, BlendEquationModeEXT modeAlpha);
    [NativeApiAttribute]
public void CompileShader(UInt32 shader);
    [NativeApiAttribute]
public UInt32 CreateProgram();
    [NativeApiAttribute]
public UInt32 CreateShader(GLEnum type);
    [NativeApiAttribute]
public UInt32 CreateShader(ShaderType type);
    [NativeApiAttribute]
public void DeleteProgram(UInt32 program);
    [NativeApiAttribute]
public void DeleteShader(UInt32 shader);
    [NativeApiAttribute]
public void DetachShader(UInt32 program, UInt32 shader);
    [NativeApiAttribute]
public void DisableVertexAttribArray(UInt32 index);
    [NativeApiAttribute]
public void DrawBuffers(UInt32 n, GLEnum* bufs);
    [NativeApiAttribute]
public void DrawBuffers(UInt32 n, GLEnum& bufs);
    [NativeApiAttribute]
public void DrawBuffers(UInt32 n, DrawBufferMode* bufs);
    [NativeApiAttribute]
public void DrawBuffers(UInt32 n, DrawBufferMode& bufs);
    [NativeApiAttribute]
public void EnableVertexAttribArray(UInt32 index);
    [NativeApiAttribute]
public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Int32* size, GLEnum* type, Byte* name);
    [NativeApiAttribute]
public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Int32* size, GLEnum* type, Byte& name);
    [NativeApiAttribute]
public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Int32* size, GLEnum* type, String& name);
    [NativeApiAttribute]
public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Int32* size, GLEnum& type, Byte* name);
    [NativeApiAttribute]
public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Int32* size, GLEnum& type, Byte& name);
    [NativeApiAttribute]
public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Int32* size, GLEnum& type, String& name);
    [NativeApiAttribute]
public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Int32& size, GLEnum* type, Byte* name);
    [NativeApiAttribute]
public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Int32& size, GLEnum* type, Byte& name);
    [NativeApiAttribute]
public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Int32& size, GLEnum* type, String& name);
    [NativeApiAttribute]
public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Int32& size, GLEnum& type, Byte* name);
    [NativeApiAttribute]
public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Int32& size, GLEnum& type, Byte& name);
    [NativeApiAttribute]
public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Int32& size, GLEnum& type, String& name);
    [NativeApiAttribute]
public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, Int32* size, GLEnum* type, Byte* name);
    [NativeApiAttribute]
public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, Int32* size, GLEnum* type, Byte& name);
    [NativeApiAttribute]
public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, Int32* size, GLEnum* type, String& name);
    [NativeApiAttribute]
public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, Int32* size, GLEnum& type, Byte* name);
    [NativeApiAttribute]
public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, Int32* size, GLEnum& type, Byte& name);
    [NativeApiAttribute]
public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, Int32* size, GLEnum& type, String& name);
    [NativeApiAttribute]
public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, Int32& size, GLEnum* type, Byte* name);
    [NativeApiAttribute]
public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, Int32& size, GLEnum* type, Byte& name);
    [NativeApiAttribute]
public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, Int32& size, GLEnum* type, String& name);
    [NativeApiAttribute]
public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, Int32& size, GLEnum& type, Byte* name);
    [NativeApiAttribute]
public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, Int32& size, GLEnum& type, Byte& name);
    [NativeApiAttribute]
public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, Int32& size, GLEnum& type, String& name);
    [NativeApiAttribute]
public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Int32* size, AttributeType* type, Byte* name);
    [NativeApiAttribute]
public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Int32* size, AttributeType* type, Byte& name);
    [NativeApiAttribute]
public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Int32* size, AttributeType* type, String& name);
    [NativeApiAttribute]
public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Int32* size, AttributeType& type, Byte* name);
    [NativeApiAttribute]
public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Int32* size, AttributeType& type, Byte& name);
    [NativeApiAttribute]
public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Int32* size, AttributeType& type, String& name);
    [NativeApiAttribute]
public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Int32& size, AttributeType* type, Byte* name);
    [NativeApiAttribute]
public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Int32& size, AttributeType* type, Byte& name);
    [NativeApiAttribute]
public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Int32& size, AttributeType* type, String& name);
    [NativeApiAttribute]
public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Int32& size, AttributeType& type, Byte* name);
    [NativeApiAttribute]
public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Int32& size, AttributeType& type, Byte& name);
    [NativeApiAttribute]
public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Int32& size, AttributeType& type, String& name);
    [NativeApiAttribute]
public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, Int32* size, AttributeType* type, Byte* name);
    [NativeApiAttribute]
public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, Int32* size, AttributeType* type, Byte& name);
    [NativeApiAttribute]
public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, Int32* size, AttributeType* type, String& name);
    [NativeApiAttribute]
public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, Int32* size, AttributeType& type, Byte* name);
    [NativeApiAttribute]
public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, Int32* size, AttributeType& type, Byte& name);
    [NativeApiAttribute]
public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, Int32* size, AttributeType& type, String& name);
    [NativeApiAttribute]
public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, Int32& size, AttributeType* type, Byte* name);
    [NativeApiAttribute]
public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, Int32& size, AttributeType* type, Byte& name);
    [NativeApiAttribute]
public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, Int32& size, AttributeType* type, String& name);
    [NativeApiAttribute]
public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, Int32& size, AttributeType& type, Byte* name);
    [NativeApiAttribute]
public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, Int32& size, AttributeType& type, Byte& name);
    [NativeApiAttribute]
public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, Int32& size, AttributeType& type, String& name);
    [NativeApiAttribute]
public void GetActiveUniform(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Int32* size, GLEnum* type, Byte* name);
    [NativeApiAttribute]
public void GetActiveUniform(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Int32* size, GLEnum* type, Byte& name);
    [NativeApiAttribute]
public void GetActiveUniform(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Int32* size, GLEnum* type, String& name);
    [NativeApiAttribute]
public void GetActiveUniform(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Int32* size, GLEnum& type, Byte* name);
    [NativeApiAttribute]
public void GetActiveUniform(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Int32* size, GLEnum& type, Byte& name);
    [NativeApiAttribute]
public void GetActiveUniform(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Int32* size, GLEnum& type, String& name);
    [NativeApiAttribute]
public void GetActiveUniform(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Int32& size, GLEnum* type, Byte* name);
    [NativeApiAttribute]
public void GetActiveUniform(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Int32& size, GLEnum* type, Byte& name);
    [NativeApiAttribute]
public void GetActiveUniform(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Int32& size, GLEnum* type, String& name);
    [NativeApiAttribute]
public void GetActiveUniform(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Int32& size, GLEnum& type, Byte* name);
    [NativeApiAttribute]
public void GetActiveUniform(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Int32& size, GLEnum& type, Byte& name);
    [NativeApiAttribute]
public void GetActiveUniform(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Int32& size, GLEnum& type, String& name);
    [NativeApiAttribute]
public void GetActiveUniform(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, Int32* size, GLEnum* type, Byte* name);
    [NativeApiAttribute]
public void GetActiveUniform(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, Int32* size, GLEnum* type, Byte& name);
    [NativeApiAttribute]
public void GetActiveUniform(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, Int32* size, GLEnum* type, String& name);
    [NativeApiAttribute]
public void GetActiveUniform(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, Int32* size, GLEnum& type, Byte* name);
    [NativeApiAttribute]
public void GetActiveUniform(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, Int32* size, GLEnum& type, Byte& name);
    [NativeApiAttribute]
public void GetActiveUniform(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, Int32* size, GLEnum& type, String& name);
    [NativeApiAttribute]
public void GetActiveUniform(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, Int32& size, GLEnum* type, Byte* name);
    [NativeApiAttribute]
public void GetActiveUniform(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, Int32& size, GLEnum* type, Byte& name);
    [NativeApiAttribute]
public void GetActiveUniform(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, Int32& size, GLEnum* type, String& name);
    [NativeApiAttribute]
public void GetActiveUniform(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, Int32& size, GLEnum& type, Byte* name);
    [NativeApiAttribute]
public void GetActiveUniform(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, Int32& size, GLEnum& type, Byte& name);
    [NativeApiAttribute]
public void GetActiveUniform(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, Int32& size, GLEnum& type, String& name);
    [NativeApiAttribute]
public void GetActiveUniform(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Int32* size, UniformType* type, Byte* name);
    [NativeApiAttribute]
public void GetActiveUniform(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Int32* size, UniformType* type, Byte& name);
    [NativeApiAttribute]
public void GetActiveUniform(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Int32* size, UniformType* type, String& name);
    [NativeApiAttribute]
public void GetActiveUniform(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Int32* size, UniformType& type, Byte* name);
    [NativeApiAttribute]
public void GetActiveUniform(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Int32* size, UniformType& type, Byte& name);
    [NativeApiAttribute]
public void GetActiveUniform(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Int32* size, UniformType& type, String& name);
    [NativeApiAttribute]
public void GetActiveUniform(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Int32& size, UniformType* type, Byte* name);
    [NativeApiAttribute]
public void GetActiveUniform(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Int32& size, UniformType* type, Byte& name);
    [NativeApiAttribute]
public void GetActiveUniform(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Int32& size, UniformType* type, String& name);
    [NativeApiAttribute]
public void GetActiveUniform(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Int32& size, UniformType& type, Byte* name);
    [NativeApiAttribute]
public void GetActiveUniform(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Int32& size, UniformType& type, Byte& name);
    [NativeApiAttribute]
public void GetActiveUniform(UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Int32& size, UniformType& type, String& name);
    [NativeApiAttribute]
public void GetActiveUniform(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, Int32* size, UniformType* type, Byte* name);
    [NativeApiAttribute]
public void GetActiveUniform(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, Int32* size, UniformType* type, Byte& name);
    [NativeApiAttribute]
public void GetActiveUniform(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, Int32* size, UniformType* type, String& name);
    [NativeApiAttribute]
public void GetActiveUniform(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, Int32* size, UniformType& type, Byte* name);
    [NativeApiAttribute]
public void GetActiveUniform(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, Int32* size, UniformType& type, Byte& name);
    [NativeApiAttribute]
public void GetActiveUniform(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, Int32* size, UniformType& type, String& name);
    [NativeApiAttribute]
public void GetActiveUniform(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, Int32& size, UniformType* type, Byte* name);
    [NativeApiAttribute]
public void GetActiveUniform(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, Int32& size, UniformType* type, Byte& name);
    [NativeApiAttribute]
public void GetActiveUniform(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, Int32& size, UniformType* type, String& name);
    [NativeApiAttribute]
public void GetActiveUniform(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, Int32& size, UniformType& type, Byte* name);
    [NativeApiAttribute]
public void GetActiveUniform(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, Int32& size, UniformType& type, Byte& name);
    [NativeApiAttribute]
public void GetActiveUniform(UInt32 program, UInt32 index, UInt32 bufSize, UInt32& length, Int32& size, UniformType& type, String& name);
    [NativeApiAttribute]
public void GetAttachedShaders(UInt32 program, UInt32 maxCount, UInt32* count, UInt32* shaders);
    [NativeApiAttribute]
public void GetAttachedShaders(UInt32 program, UInt32 maxCount, UInt32* count, UInt32& shaders);
    [NativeApiAttribute]
public void GetAttachedShaders(UInt32 program, UInt32 maxCount, UInt32& count, UInt32* shaders);
    [NativeApiAttribute]
public void GetAttachedShaders(UInt32 program, UInt32 maxCount, UInt32& count, UInt32& shaders);
    [NativeApiAttribute]
public void GetAttachedShaders(UInt32 program, UInt32 maxCount, UInt32* count, Shader* shaders);
    [NativeApiAttribute]
public void GetAttachedShaders(UInt32 program, UInt32 maxCount, UInt32* count, Shader& shaders);
    [NativeApiAttribute]
public void GetAttachedShaders(UInt32 program, UInt32 maxCount, UInt32& count, Shader* shaders);
    [NativeApiAttribute]
public void GetAttachedShaders(UInt32 program, UInt32 maxCount, UInt32& count, Shader& shaders);
    [NativeApiAttribute]
public int GetAttribLocation(UInt32 program, Byte* name);
    [NativeApiAttribute]
public int GetAttribLocation(UInt32 program, Byte& name);
    [NativeApiAttribute]
public int GetAttribLocation(UInt32 program, string name);
    [NativeApiAttribute]
public void GetProgram(UInt32 program, GLEnum pname, Int32* params);
    [NativeApiAttribute]
public void GetProgram(UInt32 program, GLEnum pname, Int32& params);
    [NativeApiAttribute]
public void GetProgram(UInt32 program, ProgramPropertyARB pname, Int32* params);
    [NativeApiAttribute]
public void GetProgram(UInt32 program, ProgramPropertyARB pname, Int32& params);
    [NativeApiAttribute]
public void GetProgramInfoLog(UInt32 program, UInt32 bufSize, UInt32* length, Byte* infoLog);
    [NativeApiAttribute]
public void GetProgramInfoLog(UInt32 program, UInt32 bufSize, UInt32* length, Byte& infoLog);
    [NativeApiAttribute]
public void GetProgramInfoLog(UInt32 program, UInt32 bufSize, UInt32* length, String& infoLog);
    [NativeApiAttribute]
public void GetProgramInfoLog(UInt32 program, UInt32 bufSize, UInt32& length, Byte* infoLog);
    [NativeApiAttribute]
public void GetProgramInfoLog(UInt32 program, UInt32 bufSize, UInt32& length, Byte& infoLog);
    [NativeApiAttribute]
public void GetProgramInfoLog(UInt32 program, UInt32 bufSize, UInt32& length, String& infoLog);
    [NativeApiAttribute]
public void GetShader(UInt32 shader, GLEnum pname, Int32* params);
    [NativeApiAttribute]
public void GetShader(UInt32 shader, GLEnum pname, Int32& params);
    [NativeApiAttribute]
public void GetShader(UInt32 shader, ShaderParameterName pname, Int32* params);
    [NativeApiAttribute]
public void GetShader(UInt32 shader, ShaderParameterName pname, Int32& params);
    [NativeApiAttribute]
public void GetShaderInfoLog(UInt32 shader, UInt32 bufSize, UInt32* length, Byte* infoLog);
    [NativeApiAttribute]
public void GetShaderInfoLog(UInt32 shader, UInt32 bufSize, UInt32* length, Byte& infoLog);
    [NativeApiAttribute]
public void GetShaderInfoLog(UInt32 shader, UInt32 bufSize, UInt32* length, String& infoLog);
    [NativeApiAttribute]
public void GetShaderInfoLog(UInt32 shader, UInt32 bufSize, UInt32& length, Byte* infoLog);
    [NativeApiAttribute]
public void GetShaderInfoLog(UInt32 shader, UInt32 bufSize, UInt32& length, Byte& infoLog);
    [NativeApiAttribute]
public void GetShaderInfoLog(UInt32 shader, UInt32 bufSize, UInt32& length, String& infoLog);
    [NativeApiAttribute]
public void GetShaderSource(UInt32 shader, UInt32 bufSize, UInt32* length, Byte* source);
    [NativeApiAttribute]
public void GetShaderSource(UInt32 shader, UInt32 bufSize, UInt32* length, Byte& source);
    [NativeApiAttribute]
public void GetShaderSource(UInt32 shader, UInt32 bufSize, UInt32* length, String& source);
    [NativeApiAttribute]
public void GetShaderSource(UInt32 shader, UInt32 bufSize, UInt32& length, Byte* source);
    [NativeApiAttribute]
public void GetShaderSource(UInt32 shader, UInt32 bufSize, UInt32& length, Byte& source);
    [NativeApiAttribute]
public void GetShaderSource(UInt32 shader, UInt32 bufSize, UInt32& length, String& source);
    [NativeApiAttribute]
public void GetUniform(UInt32 program, int location, Single* params);
    [NativeApiAttribute]
public void GetUniform(UInt32 program, int location, Single& params);
    [NativeApiAttribute]
public void GetUniform(UInt32 program, int location, Int32* params);
    [NativeApiAttribute]
public void GetUniform(UInt32 program, int location, Int32& params);
    [NativeApiAttribute]
public int GetUniformLocation(UInt32 program, Byte* name);
    [NativeApiAttribute]
public int GetUniformLocation(UInt32 program, Byte& name);
    [NativeApiAttribute]
public int GetUniformLocation(UInt32 program, string name);
    [NativeApiAttribute]
public void GetVertexAttrib(UInt32 index, GLEnum pname, Double* params);
    [NativeApiAttribute]
public void GetVertexAttrib(UInt32 index, GLEnum pname, Double& params);
    [NativeApiAttribute]
public void GetVertexAttrib(UInt32 index, VertexAttribPropertyARB pname, Double* params);
    [NativeApiAttribute]
public void GetVertexAttrib(UInt32 index, VertexAttribPropertyARB pname, Double& params);
    [NativeApiAttribute]
public void GetVertexAttrib(UInt32 index, GLEnum pname, Single* params);
    [NativeApiAttribute]
public void GetVertexAttrib(UInt32 index, GLEnum pname, Single& params);
    [NativeApiAttribute]
public void GetVertexAttrib(UInt32 index, VertexAttribPropertyARB pname, Single* params);
    [NativeApiAttribute]
public void GetVertexAttrib(UInt32 index, VertexAttribPropertyARB pname, Single& params);
    [NativeApiAttribute]
public void GetVertexAttrib(UInt32 index, GLEnum pname, Int32* params);
    [NativeApiAttribute]
public void GetVertexAttrib(UInt32 index, GLEnum pname, Int32& params);
    [NativeApiAttribute]
public void GetVertexAttrib(UInt32 index, VertexAttribPropertyARB pname, Int32* params);
    [NativeApiAttribute]
public void GetVertexAttrib(UInt32 index, VertexAttribPropertyARB pname, Int32& params);
    [NativeApiAttribute]
public void GetVertexAttribPointer(UInt32 index, GLEnum pname, Void** pointer);
    [NativeApiAttribute]
public void GetVertexAttribPointer(UInt32 index, GLEnum pname, Void*& pointer);
    [NativeApiAttribute]
public void GetVertexAttribPointer(UInt32 index, VertexAttribPointerPropertyARB pname, Void** pointer);
    [NativeApiAttribute]
public void GetVertexAttribPointer(UInt32 index, VertexAttribPointerPropertyARB pname, Void*& pointer);
    [NativeApiAttribute]
public bool IsProgram(UInt32 program);
    [NativeApiAttribute]
public bool IsShader(UInt32 shader);
    [NativeApiAttribute]
public void LinkProgram(UInt32 program);
    [NativeApiAttribute]
public void ShaderSource(UInt32 shader, UInt32 count, Byte** string, Int32* length);
    [NativeApiAttribute]
public void ShaderSource(UInt32 shader, UInt32 count, Byte** string, Int32& length);
    [NativeApiAttribute]
public void ShaderSource(UInt32 shader, UInt32 count, Byte*& string, Int32* length);
    [NativeApiAttribute]
public void ShaderSource(UInt32 shader, UInt32 count, Byte*& string, Int32& length);
    [NativeApiAttribute]
public void StencilFuncSeparate(GLEnum face, GLEnum func, int ref, UInt32 mask);
    [NativeApiAttribute]
public void StencilFuncSeparate(GLEnum face, StencilFunction func, int ref, UInt32 mask);
    [NativeApiAttribute]
public void StencilFuncSeparate(StencilFaceDirection face, GLEnum func, int ref, UInt32 mask);
    [NativeApiAttribute]
public void StencilFuncSeparate(StencilFaceDirection face, StencilFunction func, int ref, UInt32 mask);
    [NativeApiAttribute]
public void StencilMaskSeparate(GLEnum face, UInt32 mask);
    [NativeApiAttribute]
public void StencilMaskSeparate(StencilFaceDirection face, UInt32 mask);
    [NativeApiAttribute]
public void StencilOpSeparate(GLEnum face, GLEnum sfail, GLEnum dpfail, GLEnum dppass);
    [NativeApiAttribute]
public void StencilOpSeparate(GLEnum face, GLEnum sfail, GLEnum dpfail, StencilOp dppass);
    [NativeApiAttribute]
public void StencilOpSeparate(GLEnum face, GLEnum sfail, StencilOp dpfail, GLEnum dppass);
    [NativeApiAttribute]
public void StencilOpSeparate(GLEnum face, GLEnum sfail, StencilOp dpfail, StencilOp dppass);
    [NativeApiAttribute]
public void StencilOpSeparate(GLEnum face, StencilOp sfail, GLEnum dpfail, GLEnum dppass);
    [NativeApiAttribute]
public void StencilOpSeparate(GLEnum face, StencilOp sfail, GLEnum dpfail, StencilOp dppass);
    [NativeApiAttribute]
public void StencilOpSeparate(GLEnum face, StencilOp sfail, StencilOp dpfail, GLEnum dppass);
    [NativeApiAttribute]
public void StencilOpSeparate(GLEnum face, StencilOp sfail, StencilOp dpfail, StencilOp dppass);
    [NativeApiAttribute]
public void StencilOpSeparate(StencilFaceDirection face, GLEnum sfail, GLEnum dpfail, GLEnum dppass);
    [NativeApiAttribute]
public void StencilOpSeparate(StencilFaceDirection face, GLEnum sfail, GLEnum dpfail, StencilOp dppass);
    [NativeApiAttribute]
public void StencilOpSeparate(StencilFaceDirection face, GLEnum sfail, StencilOp dpfail, GLEnum dppass);
    [NativeApiAttribute]
public void StencilOpSeparate(StencilFaceDirection face, GLEnum sfail, StencilOp dpfail, StencilOp dppass);
    [NativeApiAttribute]
public void StencilOpSeparate(StencilFaceDirection face, StencilOp sfail, GLEnum dpfail, GLEnum dppass);
    [NativeApiAttribute]
public void StencilOpSeparate(StencilFaceDirection face, StencilOp sfail, GLEnum dpfail, StencilOp dppass);
    [NativeApiAttribute]
public void StencilOpSeparate(StencilFaceDirection face, StencilOp sfail, StencilOp dpfail, GLEnum dppass);
    [NativeApiAttribute]
public void StencilOpSeparate(StencilFaceDirection face, StencilOp sfail, StencilOp dpfail, StencilOp dppass);
    [NativeApiAttribute]
public void Uniform1(int location, float v0);
    [NativeApiAttribute]
public void Uniform1(int location, int v0);
    [NativeApiAttribute]
public void Uniform1(int location, UInt32 count, Single* value);
    [NativeApiAttribute]
public void Uniform1(int location, UInt32 count, Single& value);
    [NativeApiAttribute]
public void Uniform1(int location, UInt32 count, Int32* value);
    [NativeApiAttribute]
public void Uniform1(int location, UInt32 count, Int32& value);
    [NativeApiAttribute]
public void Uniform2(int location, float v0, float v1);
    [NativeApiAttribute]
public void Uniform2(int location, int v0, int v1);
    [NativeApiAttribute]
public void Uniform2(int location, UInt32 count, Single* value);
    [NativeApiAttribute]
public void Uniform2(int location, UInt32 count, Single& value);
    [NativeApiAttribute]
public void Uniform2(int location, UInt32 count, Int32* value);
    [NativeApiAttribute]
public void Uniform2(int location, UInt32 count, Int32& value);
    [NativeApiAttribute]
public void Uniform3(int location, float v0, float v1, float v2);
    [NativeApiAttribute]
public void Uniform3(int location, int v0, int v1, int v2);
    [NativeApiAttribute]
public void Uniform3(int location, UInt32 count, Single* value);
    [NativeApiAttribute]
public void Uniform3(int location, UInt32 count, Single& value);
    [NativeApiAttribute]
public void Uniform3(int location, UInt32 count, Int32* value);
    [NativeApiAttribute]
public void Uniform3(int location, UInt32 count, Int32& value);
    [NativeApiAttribute]
public void Uniform4(int location, float v0, float v1, float v2, float v3);
    [NativeApiAttribute]
public void Uniform4(int location, int v0, int v1, int v2, int v3);
    [NativeApiAttribute]
public void Uniform4(int location, UInt32 count, Single* value);
    [NativeApiAttribute]
public void Uniform4(int location, UInt32 count, Single& value);
    [NativeApiAttribute]
public void Uniform4(int location, UInt32 count, Int32* value);
    [NativeApiAttribute]
public void Uniform4(int location, UInt32 count, Int32& value);
    [NativeApiAttribute]
public void UniformMatrix2(int location, UInt32 count, bool transpose, Single* value);
    [NativeApiAttribute]
public void UniformMatrix2(int location, UInt32 count, bool transpose, Single& value);
    [NativeApiAttribute]
public void UniformMatrix2(int location, UInt32 count, Boolean transpose, Single* value);
    [NativeApiAttribute]
public void UniformMatrix2(int location, UInt32 count, Boolean transpose, Single& value);
    [NativeApiAttribute]
public void UniformMatrix3(int location, UInt32 count, bool transpose, Single* value);
    [NativeApiAttribute]
public void UniformMatrix3(int location, UInt32 count, bool transpose, Single& value);
    [NativeApiAttribute]
public void UniformMatrix3(int location, UInt32 count, Boolean transpose, Single* value);
    [NativeApiAttribute]
public void UniformMatrix3(int location, UInt32 count, Boolean transpose, Single& value);
    [NativeApiAttribute]
public void UniformMatrix4(int location, UInt32 count, bool transpose, Single* value);
    [NativeApiAttribute]
public void UniformMatrix4(int location, UInt32 count, bool transpose, Single& value);
    [NativeApiAttribute]
public void UniformMatrix4(int location, UInt32 count, Boolean transpose, Single* value);
    [NativeApiAttribute]
public void UniformMatrix4(int location, UInt32 count, Boolean transpose, Single& value);
    [NativeApiAttribute]
public void UseProgram(UInt32 program);
    [NativeApiAttribute]
public void ValidateProgram(UInt32 program);
    [NativeApiAttribute]
public void VertexAttrib1(UInt32 index, double x);
    [NativeApiAttribute]
public void VertexAttrib1(UInt32 index, Double* v);
    [NativeApiAttribute]
public void VertexAttrib1(UInt32 index, Double& v);
    [NativeApiAttribute]
public void VertexAttrib1(UInt32 index, float x);
    [NativeApiAttribute]
public void VertexAttrib1(UInt32 index, Single* v);
    [NativeApiAttribute]
public void VertexAttrib1(UInt32 index, Single& v);
    [NativeApiAttribute]
public void VertexAttrib1(UInt32 index, short x);
    [NativeApiAttribute]
public void VertexAttrib1(UInt32 index, Int16* v);
    [NativeApiAttribute]
public void VertexAttrib1(UInt32 index, Int16& v);
    [NativeApiAttribute]
public void VertexAttrib2(UInt32 index, double x, double y);
    [NativeApiAttribute]
public void VertexAttrib2(UInt32 index, Double* v);
    [NativeApiAttribute]
public void VertexAttrib2(UInt32 index, Double& v);
    [NativeApiAttribute]
public void VertexAttrib2(UInt32 index, float x, float y);
    [NativeApiAttribute]
public void VertexAttrib2(UInt32 index, Single* v);
    [NativeApiAttribute]
public void VertexAttrib2(UInt32 index, Single& v);
    [NativeApiAttribute]
public void VertexAttrib2(UInt32 index, short x, short y);
    [NativeApiAttribute]
public void VertexAttrib2(UInt32 index, Int16* v);
    [NativeApiAttribute]
public void VertexAttrib2(UInt32 index, Int16& v);
    [NativeApiAttribute]
public void VertexAttrib3(UInt32 index, double x, double y, double z);
    [NativeApiAttribute]
public void VertexAttrib3(UInt32 index, Double* v);
    [NativeApiAttribute]
public void VertexAttrib3(UInt32 index, Double& v);
    [NativeApiAttribute]
public void VertexAttrib3(UInt32 index, float x, float y, float z);
    [NativeApiAttribute]
public void VertexAttrib3(UInt32 index, Single* v);
    [NativeApiAttribute]
public void VertexAttrib3(UInt32 index, Single& v);
    [NativeApiAttribute]
public void VertexAttrib3(UInt32 index, short x, short y, short z);
    [NativeApiAttribute]
public void VertexAttrib3(UInt32 index, Int16* v);
    [NativeApiAttribute]
public void VertexAttrib3(UInt32 index, Int16& v);
    [NativeApiAttribute]
public void VertexAttrib4(UInt32 index, SByte* v);
    [NativeApiAttribute]
public void VertexAttrib4(UInt32 index, SByte& v);
    [NativeApiAttribute]
public void VertexAttrib4(UInt32 index, double x, double y, double z, double w);
    [NativeApiAttribute]
public void VertexAttrib4(UInt32 index, Double* v);
    [NativeApiAttribute]
public void VertexAttrib4(UInt32 index, Double& v);
    [NativeApiAttribute]
public void VertexAttrib4(UInt32 index, float x, float y, float z, float w);
    [NativeApiAttribute]
public void VertexAttrib4(UInt32 index, Single* v);
    [NativeApiAttribute]
public void VertexAttrib4(UInt32 index, Single& v);
    [NativeApiAttribute]
public void VertexAttrib4(UInt32 index, Int32* v);
    [NativeApiAttribute]
public void VertexAttrib4(UInt32 index, Int32& v);
    [NativeApiAttribute]
public void VertexAttrib4(UInt32 index, short x, short y, short z, short w);
    [NativeApiAttribute]
public void VertexAttrib4(UInt32 index, Int16* v);
    [NativeApiAttribute]
public void VertexAttrib4(UInt32 index, Int16& v);
    [NativeApiAttribute]
public void VertexAttrib4(UInt32 index, Byte* v);
    [NativeApiAttribute]
public void VertexAttrib4(UInt32 index, Byte& v);
    [NativeApiAttribute]
public void VertexAttrib4(UInt32 index, string v);
    [NativeApiAttribute]
public void VertexAttrib4(UInt32 index, UInt32* v);
    [NativeApiAttribute]
public void VertexAttrib4(UInt32 index, UInt32& v);
    [NativeApiAttribute]
public void VertexAttrib4(UInt32 index, UInt16* v);
    [NativeApiAttribute]
public void VertexAttrib4(UInt32 index, UInt16& v);
    [NativeApiAttribute]
public void VertexAttrib4N(UInt32 index, SByte* v);
    [NativeApiAttribute]
public void VertexAttrib4N(UInt32 index, SByte& v);
    [NativeApiAttribute]
public void VertexAttrib4N(UInt32 index, Int32* v);
    [NativeApiAttribute]
public void VertexAttrib4N(UInt32 index, Int32& v);
    [NativeApiAttribute]
public void VertexAttrib4N(UInt32 index, Int16* v);
    [NativeApiAttribute]
public void VertexAttrib4N(UInt32 index, Int16& v);
    [NativeApiAttribute]
public void VertexAttrib4N(UInt32 index, byte x, byte y, byte z, byte w);
    [NativeApiAttribute]
public void VertexAttrib4N(UInt32 index, Byte* v);
    [NativeApiAttribute]
public void VertexAttrib4N(UInt32 index, Byte& v);
    [NativeApiAttribute]
public void VertexAttrib4N(UInt32 index, string v);
    [NativeApiAttribute]
public void VertexAttrib4N(UInt32 index, UInt32* v);
    [NativeApiAttribute]
public void VertexAttrib4N(UInt32 index, UInt32& v);
    [NativeApiAttribute]
public void VertexAttrib4N(UInt32 index, UInt16* v);
    [NativeApiAttribute]
public void VertexAttrib4N(UInt32 index, UInt16& v);
    [NativeApiAttribute]
public void VertexAttribPointer(UInt32 index, int size, GLEnum type, bool normalized, UInt32 stride, Void* pointer);
    [NativeApiAttribute]
public void VertexAttribPointer(UInt32 index, int size, GLEnum type, Boolean normalized, UInt32 stride, Void* pointer);
    [NativeApiAttribute]
public void VertexAttribPointer(UInt32 index, int size, VertexAttribPointerType type, bool normalized, UInt32 stride, Void* pointer);
    [NativeApiAttribute]
public void VertexAttribPointer(UInt32 index, int size, VertexAttribPointerType type, Boolean normalized, UInt32 stride, Void* pointer);
    [NativeApiAttribute]
public void BeginQuery(GLEnum target, UInt32 id);
    [NativeApiAttribute]
public void BeginQuery(QueryTarget target, UInt32 id);
    [NativeApiAttribute]
public void BindBuffer(GLEnum target, UInt32 buffer);
    [NativeApiAttribute]
public void BindBuffer(BufferTargetARB target, UInt32 buffer);
    [NativeApiAttribute]
public void BufferData(GLEnum target, UIntPtr size, Void* data, GLEnum usage);
    [NativeApiAttribute]
public void BufferData(GLEnum target, UIntPtr size, T0& data, GLEnum usage);
    [NativeApiAttribute]
public void BufferData(GLEnum target, UIntPtr size, Void* data, BufferUsageARB usage);
    [NativeApiAttribute]
public void BufferData(GLEnum target, UIntPtr size, T0& data, BufferUsageARB usage);
    [NativeApiAttribute]
public void BufferData(BufferTargetARB target, UIntPtr size, Void* data, GLEnum usage);
    [NativeApiAttribute]
public void BufferData(BufferTargetARB target, UIntPtr size, T0& data, GLEnum usage);
    [NativeApiAttribute]
public void BufferData(BufferTargetARB target, UIntPtr size, Void* data, BufferUsageARB usage);
    [NativeApiAttribute]
public void BufferData(BufferTargetARB target, UIntPtr size, T0& data, BufferUsageARB usage);
    [NativeApiAttribute]
public void BufferSubData(GLEnum target, IntPtr offset, UIntPtr size, Void* data);
    [NativeApiAttribute]
public void BufferSubData(GLEnum target, IntPtr offset, UIntPtr size, T0& data);
    [NativeApiAttribute]
public void BufferSubData(BufferTargetARB target, IntPtr offset, UIntPtr size, Void* data);
    [NativeApiAttribute]
public void BufferSubData(BufferTargetARB target, IntPtr offset, UIntPtr size, T0& data);
    [NativeApiAttribute]
public void DeleteBuffers(UInt32 n, UInt32* buffers);
    [NativeApiAttribute]
public void DeleteBuffers(UInt32 n, UInt32& buffers);
    [NativeApiAttribute]
public void DeleteBuffers(UInt32 n, Buffer* buffers);
    [NativeApiAttribute]
public void DeleteBuffers(UInt32 n, Buffer& buffers);
    [NativeApiAttribute]
public void DeleteQueries(UInt32 n, UInt32* ids);
    [NativeApiAttribute]
public void DeleteQueries(UInt32 n, UInt32& ids);
    [NativeApiAttribute]
public void DeleteQueries(UInt32 n, Query* ids);
    [NativeApiAttribute]
public void DeleteQueries(UInt32 n, Query& ids);
    [NativeApiAttribute]
public void EndQuery(GLEnum target);
    [NativeApiAttribute]
public void EndQuery(QueryTarget target);
    [NativeApiAttribute]
public void GenBuffers(UInt32 n, UInt32* buffers);
    [NativeApiAttribute]
public void GenBuffers(UInt32 n, UInt32& buffers);
    [NativeApiAttribute]
public void GenBuffers(UInt32 n, Buffer* buffers);
    [NativeApiAttribute]
public void GenBuffers(UInt32 n, Buffer& buffers);
    [NativeApiAttribute]
public void GenQueries(UInt32 n, UInt32* ids);
    [NativeApiAttribute]
public void GenQueries(UInt32 n, UInt32& ids);
    [NativeApiAttribute]
public void GenQueries(UInt32 n, Query* ids);
    [NativeApiAttribute]
public void GenQueries(UInt32 n, Query& ids);
    [NativeApiAttribute]
public void GetBufferParameter(GLEnum target, GLEnum pname, Int32* params);
    [NativeApiAttribute]
public void GetBufferParameter(GLEnum target, GLEnum pname, Int32& params);
    [NativeApiAttribute]
public void GetBufferParameter(GLEnum target, BufferPNameARB pname, Int32* params);
    [NativeApiAttribute]
public void GetBufferParameter(GLEnum target, BufferPNameARB pname, Int32& params);
    [NativeApiAttribute]
public void GetBufferParameter(BufferTargetARB target, GLEnum pname, Int32* params);
    [NativeApiAttribute]
public void GetBufferParameter(BufferTargetARB target, GLEnum pname, Int32& params);
    [NativeApiAttribute]
public void GetBufferParameter(BufferTargetARB target, BufferPNameARB pname, Int32* params);
    [NativeApiAttribute]
public void GetBufferParameter(BufferTargetARB target, BufferPNameARB pname, Int32& params);
    [NativeApiAttribute]
public void GetBufferPointer(GLEnum target, GLEnum pname, Void** params);
    [NativeApiAttribute]
public void GetBufferPointer(GLEnum target, GLEnum pname, Void*& params);
    [NativeApiAttribute]
public void GetBufferPointer(GLEnum target, BufferPointerNameARB pname, Void** params);
    [NativeApiAttribute]
public void GetBufferPointer(GLEnum target, BufferPointerNameARB pname, Void*& params);
    [NativeApiAttribute]
public void GetBufferPointer(BufferTargetARB target, GLEnum pname, Void** params);
    [NativeApiAttribute]
public void GetBufferPointer(BufferTargetARB target, GLEnum pname, Void*& params);
    [NativeApiAttribute]
public void GetBufferPointer(BufferTargetARB target, BufferPointerNameARB pname, Void** params);
    [NativeApiAttribute]
public void GetBufferPointer(BufferTargetARB target, BufferPointerNameARB pname, Void*& params);
    [NativeApiAttribute]
public void GetBufferSubData(GLEnum target, IntPtr offset, UIntPtr size, Void* data);
    [NativeApiAttribute]
public void GetBufferSubData(GLEnum target, IntPtr offset, UIntPtr size, T0& data);
    [NativeApiAttribute]
public void GetBufferSubData(BufferTargetARB target, IntPtr offset, UIntPtr size, Void* data);
    [NativeApiAttribute]
public void GetBufferSubData(BufferTargetARB target, IntPtr offset, UIntPtr size, T0& data);
    [NativeApiAttribute]
public void GetQuery(GLEnum target, GLEnum pname, Int32* params);
    [NativeApiAttribute]
public void GetQuery(GLEnum target, GLEnum pname, Int32& params);
    [NativeApiAttribute]
public void GetQuery(GLEnum target, QueryParameterName pname, Int32* params);
    [NativeApiAttribute]
public void GetQuery(GLEnum target, QueryParameterName pname, Int32& params);
    [NativeApiAttribute]
public void GetQuery(QueryTarget target, GLEnum pname, Int32* params);
    [NativeApiAttribute]
public void GetQuery(QueryTarget target, GLEnum pname, Int32& params);
    [NativeApiAttribute]
public void GetQuery(QueryTarget target, QueryParameterName pname, Int32* params);
    [NativeApiAttribute]
public void GetQuery(QueryTarget target, QueryParameterName pname, Int32& params);
    [NativeApiAttribute]
public void GetQueryObject(UInt32 id, GLEnum pname, Int32* params);
    [NativeApiAttribute]
public void GetQueryObject(UInt32 id, GLEnum pname, Int32& params);
    [NativeApiAttribute]
public void GetQueryObject(UInt32 id, QueryObjectParameterName pname, Int32* params);
    [NativeApiAttribute]
public void GetQueryObject(UInt32 id, QueryObjectParameterName pname, Int32& params);
    [NativeApiAttribute]
public void GetQueryObject(UInt32 id, GLEnum pname, UInt32* params);
    [NativeApiAttribute]
public void GetQueryObject(UInt32 id, GLEnum pname, UInt32& params);
    [NativeApiAttribute]
public void GetQueryObject(UInt32 id, QueryObjectParameterName pname, UInt32* params);
    [NativeApiAttribute]
public void GetQueryObject(UInt32 id, QueryObjectParameterName pname, UInt32& params);
    [NativeApiAttribute]
public bool IsBuffer(UInt32 buffer);
    [NativeApiAttribute]
public bool IsQuery(UInt32 id);
    [NativeApiAttribute]
public Void* MapBuffer(GLEnum target, GLEnum access);
    [NativeApiAttribute]
public Void* MapBuffer(GLEnum target, BufferAccessARB access);
    [NativeApiAttribute]
public Void* MapBuffer(BufferTargetARB target, GLEnum access);
    [NativeApiAttribute]
public Void* MapBuffer(BufferTargetARB target, BufferAccessARB access);
    [NativeApiAttribute]
public bool UnmapBuffer(GLEnum target);
    [NativeApiAttribute]
public bool UnmapBuffer(BufferTargetARB target);
    [NativeApiAttribute]
public void BlendColor(float red, float green, float blue, float alpha);
    [NativeApiAttribute]
public void BlendEquation(GLEnum mode);
    [NativeApiAttribute]
public void BlendEquation(BlendEquationModeEXT mode);
    [NativeApiAttribute]
public void BlendFuncSeparate(GLEnum sfactorRGB, GLEnum dfactorRGB, GLEnum sfactorAlpha, GLEnum dfactorAlpha);
    [NativeApiAttribute]
public void BlendFuncSeparate(GLEnum sfactorRGB, GLEnum dfactorRGB, GLEnum sfactorAlpha, BlendingFactor dfactorAlpha);
    [NativeApiAttribute]
public void BlendFuncSeparate(GLEnum sfactorRGB, GLEnum dfactorRGB, BlendingFactor sfactorAlpha, GLEnum dfactorAlpha);
    [NativeApiAttribute]
public void BlendFuncSeparate(GLEnum sfactorRGB, GLEnum dfactorRGB, BlendingFactor sfactorAlpha, BlendingFactor dfactorAlpha);
    [NativeApiAttribute]
public void BlendFuncSeparate(GLEnum sfactorRGB, BlendingFactor dfactorRGB, GLEnum sfactorAlpha, GLEnum dfactorAlpha);
    [NativeApiAttribute]
public void BlendFuncSeparate(GLEnum sfactorRGB, BlendingFactor dfactorRGB, GLEnum sfactorAlpha, BlendingFactor dfactorAlpha);
    [NativeApiAttribute]
public void BlendFuncSeparate(GLEnum sfactorRGB, BlendingFactor dfactorRGB, BlendingFactor sfactorAlpha, GLEnum dfactorAlpha);
    [NativeApiAttribute]
public void BlendFuncSeparate(GLEnum sfactorRGB, BlendingFactor dfactorRGB, BlendingFactor sfactorAlpha, BlendingFactor dfactorAlpha);
    [NativeApiAttribute]
public void BlendFuncSeparate(BlendingFactor sfactorRGB, GLEnum dfactorRGB, GLEnum sfactorAlpha, GLEnum dfactorAlpha);
    [NativeApiAttribute]
public void BlendFuncSeparate(BlendingFactor sfactorRGB, GLEnum dfactorRGB, GLEnum sfactorAlpha, BlendingFactor dfactorAlpha);
    [NativeApiAttribute]
public void BlendFuncSeparate(BlendingFactor sfactorRGB, GLEnum dfactorRGB, BlendingFactor sfactorAlpha, GLEnum dfactorAlpha);
    [NativeApiAttribute]
public void BlendFuncSeparate(BlendingFactor sfactorRGB, GLEnum dfactorRGB, BlendingFactor sfactorAlpha, BlendingFactor dfactorAlpha);
    [NativeApiAttribute]
public void BlendFuncSeparate(BlendingFactor sfactorRGB, BlendingFactor dfactorRGB, GLEnum sfactorAlpha, GLEnum dfactorAlpha);
    [NativeApiAttribute]
public void BlendFuncSeparate(BlendingFactor sfactorRGB, BlendingFactor dfactorRGB, GLEnum sfactorAlpha, BlendingFactor dfactorAlpha);
    [NativeApiAttribute]
public void BlendFuncSeparate(BlendingFactor sfactorRGB, BlendingFactor dfactorRGB, BlendingFactor sfactorAlpha, GLEnum dfactorAlpha);
    [NativeApiAttribute]
public void BlendFuncSeparate(BlendingFactor sfactorRGB, BlendingFactor dfactorRGB, BlendingFactor sfactorAlpha, BlendingFactor dfactorAlpha);
    [NativeApiAttribute]
public void MultiDrawArrays(GLEnum mode, Int32* first, UInt32* count, UInt32 drawcount);
    [NativeApiAttribute]
public void MultiDrawArrays(GLEnum mode, Int32* first, UInt32& count, UInt32 drawcount);
    [NativeApiAttribute]
public void MultiDrawArrays(GLEnum mode, Int32& first, UInt32* count, UInt32 drawcount);
    [NativeApiAttribute]
public void MultiDrawArrays(GLEnum mode, Int32& first, UInt32& count, UInt32 drawcount);
    [NativeApiAttribute]
public void MultiDrawArrays(PrimitiveType mode, Int32* first, UInt32* count, UInt32 drawcount);
    [NativeApiAttribute]
public void MultiDrawArrays(PrimitiveType mode, Int32* first, UInt32& count, UInt32 drawcount);
    [NativeApiAttribute]
public void MultiDrawArrays(PrimitiveType mode, Int32& first, UInt32* count, UInt32 drawcount);
    [NativeApiAttribute]
public void MultiDrawArrays(PrimitiveType mode, Int32& first, UInt32& count, UInt32 drawcount);
    [NativeApiAttribute]
public void MultiDrawElements(GLEnum mode, UInt32* count, GLEnum type, Void** indices, UInt32 drawcount);
    [NativeApiAttribute]
public void MultiDrawElements(GLEnum mode, UInt32* count, GLEnum type, Void*& indices, UInt32 drawcount);
    [NativeApiAttribute]
public void MultiDrawElements(GLEnum mode, UInt32& count, GLEnum type, Void** indices, UInt32 drawcount);
    [NativeApiAttribute]
public void MultiDrawElements(GLEnum mode, UInt32& count, GLEnum type, Void*& indices, UInt32 drawcount);
    [NativeApiAttribute]
public void MultiDrawElements(GLEnum mode, UInt32* count, DrawElementsType type, Void** indices, UInt32 drawcount);
    [NativeApiAttribute]
public void MultiDrawElements(GLEnum mode, UInt32* count, DrawElementsType type, Void*& indices, UInt32 drawcount);
    [NativeApiAttribute]
public void MultiDrawElements(GLEnum mode, UInt32& count, DrawElementsType type, Void** indices, UInt32 drawcount);
    [NativeApiAttribute]
public void MultiDrawElements(GLEnum mode, UInt32& count, DrawElementsType type, Void*& indices, UInt32 drawcount);
    [NativeApiAttribute]
public void MultiDrawElements(PrimitiveType mode, UInt32* count, GLEnum type, Void** indices, UInt32 drawcount);
    [NativeApiAttribute]
public void MultiDrawElements(PrimitiveType mode, UInt32* count, GLEnum type, Void*& indices, UInt32 drawcount);
    [NativeApiAttribute]
public void MultiDrawElements(PrimitiveType mode, UInt32& count, GLEnum type, Void** indices, UInt32 drawcount);
    [NativeApiAttribute]
public void MultiDrawElements(PrimitiveType mode, UInt32& count, GLEnum type, Void*& indices, UInt32 drawcount);
    [NativeApiAttribute]
public void MultiDrawElements(PrimitiveType mode, UInt32* count, DrawElementsType type, Void** indices, UInt32 drawcount);
    [NativeApiAttribute]
public void MultiDrawElements(PrimitiveType mode, UInt32* count, DrawElementsType type, Void*& indices, UInt32 drawcount);
    [NativeApiAttribute]
public void MultiDrawElements(PrimitiveType mode, UInt32& count, DrawElementsType type, Void** indices, UInt32 drawcount);
    [NativeApiAttribute]
public void MultiDrawElements(PrimitiveType mode, UInt32& count, DrawElementsType type, Void*& indices, UInt32 drawcount);
    [NativeApiAttribute]
public void PointParameter(GLEnum pname, float param);
    [NativeApiAttribute]
public void PointParameter(PointParameterNameARB pname, float param);
    [NativeApiAttribute]
public void PointParameter(GLEnum pname, Single* params);
    [NativeApiAttribute]
public void PointParameter(GLEnum pname, Single& params);
    [NativeApiAttribute]
public void PointParameter(PointParameterNameARB pname, Single* params);
    [NativeApiAttribute]
public void PointParameter(PointParameterNameARB pname, Single& params);
    [NativeApiAttribute]
public void PointParameter(GLEnum pname, int param);
    [NativeApiAttribute]
public void PointParameter(PointParameterNameARB pname, int param);
    [NativeApiAttribute]
public void PointParameter(GLEnum pname, Int32* params);
    [NativeApiAttribute]
public void PointParameter(GLEnum pname, Int32& params);
    [NativeApiAttribute]
public void PointParameter(PointParameterNameARB pname, Int32* params);
    [NativeApiAttribute]
public void PointParameter(PointParameterNameARB pname, Int32& params);
    [NativeApiAttribute]
public void ActiveTexture(GLEnum texture);
    [NativeApiAttribute]
public void ActiveTexture(TextureUnit texture);
    [NativeApiAttribute]
public void CompressedTexImage1D(GLEnum target, int level, GLEnum internalformat, UInt32 width, int border, UInt32 imageSize, Void* data);
    [NativeApiAttribute]
public void CompressedTexImage1D(GLEnum target, int level, GLEnum internalformat, UInt32 width, int border, UInt32 imageSize, T0& data);
    [NativeApiAttribute]
public void CompressedTexImage1D(GLEnum target, int level, InternalFormat internalformat, UInt32 width, int border, UInt32 imageSize, Void* data);
    [NativeApiAttribute]
public void CompressedTexImage1D(GLEnum target, int level, InternalFormat internalformat, UInt32 width, int border, UInt32 imageSize, T0& data);
    [NativeApiAttribute]
public void CompressedTexImage1D(TextureTarget target, int level, GLEnum internalformat, UInt32 width, int border, UInt32 imageSize, Void* data);
    [NativeApiAttribute]
public void CompressedTexImage1D(TextureTarget target, int level, GLEnum internalformat, UInt32 width, int border, UInt32 imageSize, T0& data);
    [NativeApiAttribute]
public void CompressedTexImage1D(TextureTarget target, int level, InternalFormat internalformat, UInt32 width, int border, UInt32 imageSize, Void* data);
    [NativeApiAttribute]
public void CompressedTexImage1D(TextureTarget target, int level, InternalFormat internalformat, UInt32 width, int border, UInt32 imageSize, T0& data);
    [NativeApiAttribute]
public void CompressedTexImage2D(GLEnum target, int level, GLEnum internalformat, UInt32 width, UInt32 height, int border, UInt32 imageSize, Void* data);
    [NativeApiAttribute]
public void CompressedTexImage2D(GLEnum target, int level, GLEnum internalformat, UInt32 width, UInt32 height, int border, UInt32 imageSize, T0& data);
    [NativeApiAttribute]
public void CompressedTexImage2D(GLEnum target, int level, InternalFormat internalformat, UInt32 width, UInt32 height, int border, UInt32 imageSize, Void* data);
    [NativeApiAttribute]
public void CompressedTexImage2D(GLEnum target, int level, InternalFormat internalformat, UInt32 width, UInt32 height, int border, UInt32 imageSize, T0& data);
    [NativeApiAttribute]
public void CompressedTexImage2D(TextureTarget target, int level, GLEnum internalformat, UInt32 width, UInt32 height, int border, UInt32 imageSize, Void* data);
    [NativeApiAttribute]
public void CompressedTexImage2D(TextureTarget target, int level, GLEnum internalformat, UInt32 width, UInt32 height, int border, UInt32 imageSize, T0& data);
    [NativeApiAttribute]
public void CompressedTexImage2D(TextureTarget target, int level, InternalFormat internalformat, UInt32 width, UInt32 height, int border, UInt32 imageSize, Void* data);
    [NativeApiAttribute]
public void CompressedTexImage2D(TextureTarget target, int level, InternalFormat internalformat, UInt32 width, UInt32 height, int border, UInt32 imageSize, T0& data);
    [NativeApiAttribute]
public void CompressedTexImage3D(GLEnum target, int level, GLEnum internalformat, UInt32 width, UInt32 height, UInt32 depth, int border, UInt32 imageSize, Void* data);
    [NativeApiAttribute]
public void CompressedTexImage3D(GLEnum target, int level, GLEnum internalformat, UInt32 width, UInt32 height, UInt32 depth, int border, UInt32 imageSize, T0& data);
    [NativeApiAttribute]
public void CompressedTexImage3D(GLEnum target, int level, InternalFormat internalformat, UInt32 width, UInt32 height, UInt32 depth, int border, UInt32 imageSize, Void* data);
    [NativeApiAttribute]
public void CompressedTexImage3D(GLEnum target, int level, InternalFormat internalformat, UInt32 width, UInt32 height, UInt32 depth, int border, UInt32 imageSize, T0& data);
    [NativeApiAttribute]
public void CompressedTexImage3D(TextureTarget target, int level, GLEnum internalformat, UInt32 width, UInt32 height, UInt32 depth, int border, UInt32 imageSize, Void* data);
    [NativeApiAttribute]
public void CompressedTexImage3D(TextureTarget target, int level, GLEnum internalformat, UInt32 width, UInt32 height, UInt32 depth, int border, UInt32 imageSize, T0& data);
    [NativeApiAttribute]
public void CompressedTexImage3D(TextureTarget target, int level, InternalFormat internalformat, UInt32 width, UInt32 height, UInt32 depth, int border, UInt32 imageSize, Void* data);
    [NativeApiAttribute]
public void CompressedTexImage3D(TextureTarget target, int level, InternalFormat internalformat, UInt32 width, UInt32 height, UInt32 depth, int border, UInt32 imageSize, T0& data);
    [NativeApiAttribute]
public void CompressedTexSubImage1D(GLEnum target, int level, int xoffset, UInt32 width, GLEnum format, UInt32 imageSize, Void* data);
    [NativeApiAttribute]
public void CompressedTexSubImage1D(GLEnum target, int level, int xoffset, UInt32 width, GLEnum format, UInt32 imageSize, T0& data);
    [NativeApiAttribute]
public void CompressedTexSubImage1D(GLEnum target, int level, int xoffset, UInt32 width, InternalFormat format, UInt32 imageSize, Void* data);
    [NativeApiAttribute]
public void CompressedTexSubImage1D(GLEnum target, int level, int xoffset, UInt32 width, InternalFormat format, UInt32 imageSize, T0& data);
    [NativeApiAttribute]
public void CompressedTexSubImage1D(TextureTarget target, int level, int xoffset, UInt32 width, GLEnum format, UInt32 imageSize, Void* data);
    [NativeApiAttribute]
public void CompressedTexSubImage1D(TextureTarget target, int level, int xoffset, UInt32 width, GLEnum format, UInt32 imageSize, T0& data);
    [NativeApiAttribute]
public void CompressedTexSubImage1D(TextureTarget target, int level, int xoffset, UInt32 width, InternalFormat format, UInt32 imageSize, Void* data);
    [NativeApiAttribute]
public void CompressedTexSubImage1D(TextureTarget target, int level, int xoffset, UInt32 width, InternalFormat format, UInt32 imageSize, T0& data);
    [NativeApiAttribute]
public void CompressedTexSubImage2D(GLEnum target, int level, int xoffset, int yoffset, UInt32 width, UInt32 height, GLEnum format, UInt32 imageSize, Void* data);
    [NativeApiAttribute]
public void CompressedTexSubImage2D(GLEnum target, int level, int xoffset, int yoffset, UInt32 width, UInt32 height, GLEnum format, UInt32 imageSize, T0& data);
    [NativeApiAttribute]
public void CompressedTexSubImage2D(GLEnum target, int level, int xoffset, int yoffset, UInt32 width, UInt32 height, InternalFormat format, UInt32 imageSize, Void* data);
    [NativeApiAttribute]
public void CompressedTexSubImage2D(GLEnum target, int level, int xoffset, int yoffset, UInt32 width, UInt32 height, InternalFormat format, UInt32 imageSize, T0& data);
    [NativeApiAttribute]
public void CompressedTexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, UInt32 width, UInt32 height, GLEnum format, UInt32 imageSize, Void* data);
    [NativeApiAttribute]
public void CompressedTexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, UInt32 width, UInt32 height, GLEnum format, UInt32 imageSize, T0& data);
    [NativeApiAttribute]
public void CompressedTexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, UInt32 width, UInt32 height, InternalFormat format, UInt32 imageSize, Void* data);
    [NativeApiAttribute]
public void CompressedTexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, UInt32 width, UInt32 height, InternalFormat format, UInt32 imageSize, T0& data);
    [NativeApiAttribute]
public void CompressedTexSubImage3D(GLEnum target, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, GLEnum format, UInt32 imageSize, Void* data);
    [NativeApiAttribute]
public void CompressedTexSubImage3D(GLEnum target, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, GLEnum format, UInt32 imageSize, T0& data);
    [NativeApiAttribute]
public void CompressedTexSubImage3D(GLEnum target, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, InternalFormat format, UInt32 imageSize, Void* data);
    [NativeApiAttribute]
public void CompressedTexSubImage3D(GLEnum target, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, InternalFormat format, UInt32 imageSize, T0& data);
    [NativeApiAttribute]
public void CompressedTexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, GLEnum format, UInt32 imageSize, Void* data);
    [NativeApiAttribute]
public void CompressedTexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, GLEnum format, UInt32 imageSize, T0& data);
    [NativeApiAttribute]
public void CompressedTexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, InternalFormat format, UInt32 imageSize, Void* data);
    [NativeApiAttribute]
public void CompressedTexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, InternalFormat format, UInt32 imageSize, T0& data);
    [NativeApiAttribute]
public void GetCompressedTexImage(GLEnum target, int level, Void* img);
    [NativeApiAttribute]
public void GetCompressedTexImage(GLEnum target, int level, T0& img);
    [NativeApiAttribute]
public void GetCompressedTexImage(TextureTarget target, int level, Void* img);
    [NativeApiAttribute]
public void GetCompressedTexImage(TextureTarget target, int level, T0& img);
    [NativeApiAttribute]
public void SampleCoverage(float value, bool invert);
    [NativeApiAttribute]
public void SampleCoverage(float value, Boolean invert);
    [NativeApiAttribute]
public void CopyTexSubImage3D(GLEnum target, int level, int xoffset, int yoffset, int zoffset, int x, int y, UInt32 width, UInt32 height);
    [NativeApiAttribute]
public void CopyTexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int x, int y, UInt32 width, UInt32 height);
    [NativeApiAttribute]
public void DrawRangeElements(GLEnum mode, UInt32 start, UInt32 end, UInt32 count, GLEnum type, Void* indices);
    [NativeApiAttribute]
public void DrawRangeElements(GLEnum mode, UInt32 start, UInt32 end, UInt32 count, GLEnum type, T0& indices);
    [NativeApiAttribute]
public void DrawRangeElements(GLEnum mode, UInt32 start, UInt32 end, UInt32 count, DrawElementsType type, Void* indices);
    [NativeApiAttribute]
public void DrawRangeElements(GLEnum mode, UInt32 start, UInt32 end, UInt32 count, DrawElementsType type, T0& indices);
    [NativeApiAttribute]
public void DrawRangeElements(PrimitiveType mode, UInt32 start, UInt32 end, UInt32 count, GLEnum type, Void* indices);
    [NativeApiAttribute]
public void DrawRangeElements(PrimitiveType mode, UInt32 start, UInt32 end, UInt32 count, GLEnum type, T0& indices);
    [NativeApiAttribute]
public void DrawRangeElements(PrimitiveType mode, UInt32 start, UInt32 end, UInt32 count, DrawElementsType type, Void* indices);
    [NativeApiAttribute]
public void DrawRangeElements(PrimitiveType mode, UInt32 start, UInt32 end, UInt32 count, DrawElementsType type, T0& indices);
    [NativeApiAttribute]
public void TexImage3D(GLEnum target, int level, int internalformat, UInt32 width, UInt32 height, UInt32 depth, int border, GLEnum format, GLEnum type, Void* pixels);
    [NativeApiAttribute]
public void TexImage3D(GLEnum target, int level, int internalformat, UInt32 width, UInt32 height, UInt32 depth, int border, GLEnum format, GLEnum type, T0& pixels);
    [NativeApiAttribute]
public void TexImage3D(GLEnum target, int level, int internalformat, UInt32 width, UInt32 height, UInt32 depth, int border, GLEnum format, PixelType type, Void* pixels);
    [NativeApiAttribute]
public void TexImage3D(GLEnum target, int level, int internalformat, UInt32 width, UInt32 height, UInt32 depth, int border, GLEnum format, PixelType type, T0& pixels);
    [NativeApiAttribute]
public void TexImage3D(GLEnum target, int level, int internalformat, UInt32 width, UInt32 height, UInt32 depth, int border, PixelFormat format, GLEnum type, Void* pixels);
    [NativeApiAttribute]
public void TexImage3D(GLEnum target, int level, int internalformat, UInt32 width, UInt32 height, UInt32 depth, int border, PixelFormat format, GLEnum type, T0& pixels);
    [NativeApiAttribute]
public void TexImage3D(GLEnum target, int level, int internalformat, UInt32 width, UInt32 height, UInt32 depth, int border, PixelFormat format, PixelType type, Void* pixels);
    [NativeApiAttribute]
public void TexImage3D(GLEnum target, int level, int internalformat, UInt32 width, UInt32 height, UInt32 depth, int border, PixelFormat format, PixelType type, T0& pixels);
    [NativeApiAttribute]
public void TexImage3D(GLEnum target, int level, InternalFormat internalformat, UInt32 width, UInt32 height, UInt32 depth, int border, GLEnum format, GLEnum type, Void* pixels);
    [NativeApiAttribute]
public void TexImage3D(GLEnum target, int level, InternalFormat internalformat, UInt32 width, UInt32 height, UInt32 depth, int border, GLEnum format, GLEnum type, T0& pixels);
    [NativeApiAttribute]
public void TexImage3D(GLEnum target, int level, InternalFormat internalformat, UInt32 width, UInt32 height, UInt32 depth, int border, GLEnum format, PixelType type, Void* pixels);
    [NativeApiAttribute]
public void TexImage3D(GLEnum target, int level, InternalFormat internalformat, UInt32 width, UInt32 height, UInt32 depth, int border, GLEnum format, PixelType type, T0& pixels);
    [NativeApiAttribute]
public void TexImage3D(GLEnum target, int level, InternalFormat internalformat, UInt32 width, UInt32 height, UInt32 depth, int border, PixelFormat format, GLEnum type, Void* pixels);
    [NativeApiAttribute]
public void TexImage3D(GLEnum target, int level, InternalFormat internalformat, UInt32 width, UInt32 height, UInt32 depth, int border, PixelFormat format, GLEnum type, T0& pixels);
    [NativeApiAttribute]
public void TexImage3D(GLEnum target, int level, InternalFormat internalformat, UInt32 width, UInt32 height, UInt32 depth, int border, PixelFormat format, PixelType type, Void* pixels);
    [NativeApiAttribute]
public void TexImage3D(GLEnum target, int level, InternalFormat internalformat, UInt32 width, UInt32 height, UInt32 depth, int border, PixelFormat format, PixelType type, T0& pixels);
    [NativeApiAttribute]
public void TexImage3D(TextureTarget target, int level, int internalformat, UInt32 width, UInt32 height, UInt32 depth, int border, GLEnum format, GLEnum type, Void* pixels);
    [NativeApiAttribute]
public void TexImage3D(TextureTarget target, int level, int internalformat, UInt32 width, UInt32 height, UInt32 depth, int border, GLEnum format, GLEnum type, T0& pixels);
    [NativeApiAttribute]
public void TexImage3D(TextureTarget target, int level, int internalformat, UInt32 width, UInt32 height, UInt32 depth, int border, GLEnum format, PixelType type, Void* pixels);
    [NativeApiAttribute]
public void TexImage3D(TextureTarget target, int level, int internalformat, UInt32 width, UInt32 height, UInt32 depth, int border, GLEnum format, PixelType type, T0& pixels);
    [NativeApiAttribute]
public void TexImage3D(TextureTarget target, int level, int internalformat, UInt32 width, UInt32 height, UInt32 depth, int border, PixelFormat format, GLEnum type, Void* pixels);
    [NativeApiAttribute]
public void TexImage3D(TextureTarget target, int level, int internalformat, UInt32 width, UInt32 height, UInt32 depth, int border, PixelFormat format, GLEnum type, T0& pixels);
    [NativeApiAttribute]
public void TexImage3D(TextureTarget target, int level, int internalformat, UInt32 width, UInt32 height, UInt32 depth, int border, PixelFormat format, PixelType type, Void* pixels);
    [NativeApiAttribute]
public void TexImage3D(TextureTarget target, int level, int internalformat, UInt32 width, UInt32 height, UInt32 depth, int border, PixelFormat format, PixelType type, T0& pixels);
    [NativeApiAttribute]
public void TexImage3D(TextureTarget target, int level, InternalFormat internalformat, UInt32 width, UInt32 height, UInt32 depth, int border, GLEnum format, GLEnum type, Void* pixels);
    [NativeApiAttribute]
public void TexImage3D(TextureTarget target, int level, InternalFormat internalformat, UInt32 width, UInt32 height, UInt32 depth, int border, GLEnum format, GLEnum type, T0& pixels);
    [NativeApiAttribute]
public void TexImage3D(TextureTarget target, int level, InternalFormat internalformat, UInt32 width, UInt32 height, UInt32 depth, int border, GLEnum format, PixelType type, Void* pixels);
    [NativeApiAttribute]
public void TexImage3D(TextureTarget target, int level, InternalFormat internalformat, UInt32 width, UInt32 height, UInt32 depth, int border, GLEnum format, PixelType type, T0& pixels);
    [NativeApiAttribute]
public void TexImage3D(TextureTarget target, int level, InternalFormat internalformat, UInt32 width, UInt32 height, UInt32 depth, int border, PixelFormat format, GLEnum type, Void* pixels);
    [NativeApiAttribute]
public void TexImage3D(TextureTarget target, int level, InternalFormat internalformat, UInt32 width, UInt32 height, UInt32 depth, int border, PixelFormat format, GLEnum type, T0& pixels);
    [NativeApiAttribute]
public void TexImage3D(TextureTarget target, int level, InternalFormat internalformat, UInt32 width, UInt32 height, UInt32 depth, int border, PixelFormat format, PixelType type, Void* pixels);
    [NativeApiAttribute]
public void TexImage3D(TextureTarget target, int level, InternalFormat internalformat, UInt32 width, UInt32 height, UInt32 depth, int border, PixelFormat format, PixelType type, T0& pixels);
    [NativeApiAttribute]
public void TexSubImage3D(GLEnum target, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, GLEnum format, GLEnum type, Void* pixels);
    [NativeApiAttribute]
public void TexSubImage3D(GLEnum target, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, GLEnum format, GLEnum type, T0& pixels);
    [NativeApiAttribute]
public void TexSubImage3D(GLEnum target, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, GLEnum format, PixelType type, Void* pixels);
    [NativeApiAttribute]
public void TexSubImage3D(GLEnum target, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, GLEnum format, PixelType type, T0& pixels);
    [NativeApiAttribute]
public void TexSubImage3D(GLEnum target, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, PixelFormat format, GLEnum type, Void* pixels);
    [NativeApiAttribute]
public void TexSubImage3D(GLEnum target, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, PixelFormat format, GLEnum type, T0& pixels);
    [NativeApiAttribute]
public void TexSubImage3D(GLEnum target, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, PixelFormat format, PixelType type, Void* pixels);
    [NativeApiAttribute]
public void TexSubImage3D(GLEnum target, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, PixelFormat format, PixelType type, T0& pixels);
    [NativeApiAttribute]
public void TexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, GLEnum format, GLEnum type, Void* pixels);
    [NativeApiAttribute]
public void TexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, GLEnum format, GLEnum type, T0& pixels);
    [NativeApiAttribute]
public void TexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, GLEnum format, PixelType type, Void* pixels);
    [NativeApiAttribute]
public void TexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, GLEnum format, PixelType type, T0& pixels);
    [NativeApiAttribute]
public void TexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, PixelFormat format, GLEnum type, Void* pixels);
    [NativeApiAttribute]
public void TexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, PixelFormat format, GLEnum type, T0& pixels);
    [NativeApiAttribute]
public void TexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, PixelFormat format, PixelType type, Void* pixels);
    [NativeApiAttribute]
public void TexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, PixelFormat format, PixelType type, T0& pixels);
    [NativeApiAttribute]
public void BindTexture(GLEnum target, UInt32 texture);
    [NativeApiAttribute]
public void BindTexture(TextureTarget target, UInt32 texture);
    [NativeApiAttribute]
public void CopyTexImage1D(GLEnum target, int level, GLEnum internalformat, int x, int y, UInt32 width, int border);
    [NativeApiAttribute]
public void CopyTexImage1D(GLEnum target, int level, InternalFormat internalformat, int x, int y, UInt32 width, int border);
    [NativeApiAttribute]
public void CopyTexImage1D(TextureTarget target, int level, GLEnum internalformat, int x, int y, UInt32 width, int border);
    [NativeApiAttribute]
public void CopyTexImage1D(TextureTarget target, int level, InternalFormat internalformat, int x, int y, UInt32 width, int border);
    [NativeApiAttribute]
public void CopyTexImage2D(GLEnum target, int level, GLEnum internalformat, int x, int y, UInt32 width, UInt32 height, int border);
    [NativeApiAttribute]
public void CopyTexImage2D(GLEnum target, int level, InternalFormat internalformat, int x, int y, UInt32 width, UInt32 height, int border);
    [NativeApiAttribute]
public void CopyTexImage2D(TextureTarget target, int level, GLEnum internalformat, int x, int y, UInt32 width, UInt32 height, int border);
    [NativeApiAttribute]
public void CopyTexImage2D(TextureTarget target, int level, InternalFormat internalformat, int x, int y, UInt32 width, UInt32 height, int border);
    [NativeApiAttribute]
public void CopyTexSubImage1D(GLEnum target, int level, int xoffset, int x, int y, UInt32 width);
    [NativeApiAttribute]
public void CopyTexSubImage1D(TextureTarget target, int level, int xoffset, int x, int y, UInt32 width);
    [NativeApiAttribute]
public void CopyTexSubImage2D(GLEnum target, int level, int xoffset, int yoffset, int x, int y, UInt32 width, UInt32 height);
    [NativeApiAttribute]
public void CopyTexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int x, int y, UInt32 width, UInt32 height);
    [NativeApiAttribute]
public void DeleteTextures(UInt32 n, UInt32* textures);
    [NativeApiAttribute]
public void DeleteTextures(UInt32 n, UInt32& textures);
    [NativeApiAttribute]
public void DeleteTextures(UInt32 n, Texture* textures);
    [NativeApiAttribute]
public void DeleteTextures(UInt32 n, Texture& textures);
    [NativeApiAttribute]
public void DrawArrays(GLEnum mode, int first, UInt32 count);
    [NativeApiAttribute]
public void DrawArrays(PrimitiveType mode, int first, UInt32 count);
    [NativeApiAttribute]
public void DrawElements(GLEnum mode, UInt32 count, GLEnum type, Void* indices);
    [NativeApiAttribute]
public void DrawElements(GLEnum mode, UInt32 count, GLEnum type, T0& indices);
    [NativeApiAttribute]
public void DrawElements(GLEnum mode, UInt32 count, DrawElementsType type, Void* indices);
    [NativeApiAttribute]
public void DrawElements(GLEnum mode, UInt32 count, DrawElementsType type, T0& indices);
    [NativeApiAttribute]
public void DrawElements(PrimitiveType mode, UInt32 count, GLEnum type, Void* indices);
    [NativeApiAttribute]
public void DrawElements(PrimitiveType mode, UInt32 count, GLEnum type, T0& indices);
    [NativeApiAttribute]
public void DrawElements(PrimitiveType mode, UInt32 count, DrawElementsType type, Void* indices);
    [NativeApiAttribute]
public void DrawElements(PrimitiveType mode, UInt32 count, DrawElementsType type, T0& indices);
    [NativeApiAttribute]
public void GenTextures(UInt32 n, UInt32* textures);
    [NativeApiAttribute]
public void GenTextures(UInt32 n, UInt32& textures);
    [NativeApiAttribute]
public void GenTextures(UInt32 n, Texture* textures);
    [NativeApiAttribute]
public void GenTextures(UInt32 n, Texture& textures);
    [NativeApiAttribute]
public bool IsTexture(UInt32 texture);
    [NativeApiAttribute]
public void PolygonOffset(float factor, float units);
    [NativeApiAttribute]
public void TexSubImage1D(GLEnum target, int level, int xoffset, UInt32 width, GLEnum format, GLEnum type, Void* pixels);
    [NativeApiAttribute]
public void TexSubImage1D(GLEnum target, int level, int xoffset, UInt32 width, GLEnum format, GLEnum type, T0& pixels);
    [NativeApiAttribute]
public void TexSubImage1D(GLEnum target, int level, int xoffset, UInt32 width, GLEnum format, PixelType type, Void* pixels);
    [NativeApiAttribute]
public void TexSubImage1D(GLEnum target, int level, int xoffset, UInt32 width, GLEnum format, PixelType type, T0& pixels);
    [NativeApiAttribute]
public void TexSubImage1D(GLEnum target, int level, int xoffset, UInt32 width, PixelFormat format, GLEnum type, Void* pixels);
    [NativeApiAttribute]
public void TexSubImage1D(GLEnum target, int level, int xoffset, UInt32 width, PixelFormat format, GLEnum type, T0& pixels);
    [NativeApiAttribute]
public void TexSubImage1D(GLEnum target, int level, int xoffset, UInt32 width, PixelFormat format, PixelType type, Void* pixels);
    [NativeApiAttribute]
public void TexSubImage1D(GLEnum target, int level, int xoffset, UInt32 width, PixelFormat format, PixelType type, T0& pixels);
    [NativeApiAttribute]
public void TexSubImage1D(TextureTarget target, int level, int xoffset, UInt32 width, GLEnum format, GLEnum type, Void* pixels);
    [NativeApiAttribute]
public void TexSubImage1D(TextureTarget target, int level, int xoffset, UInt32 width, GLEnum format, GLEnum type, T0& pixels);
    [NativeApiAttribute]
public void TexSubImage1D(TextureTarget target, int level, int xoffset, UInt32 width, GLEnum format, PixelType type, Void* pixels);
    [NativeApiAttribute]
public void TexSubImage1D(TextureTarget target, int level, int xoffset, UInt32 width, GLEnum format, PixelType type, T0& pixels);
    [NativeApiAttribute]
public void TexSubImage1D(TextureTarget target, int level, int xoffset, UInt32 width, PixelFormat format, GLEnum type, Void* pixels);
    [NativeApiAttribute]
public void TexSubImage1D(TextureTarget target, int level, int xoffset, UInt32 width, PixelFormat format, GLEnum type, T0& pixels);
    [NativeApiAttribute]
public void TexSubImage1D(TextureTarget target, int level, int xoffset, UInt32 width, PixelFormat format, PixelType type, Void* pixels);
    [NativeApiAttribute]
public void TexSubImage1D(TextureTarget target, int level, int xoffset, UInt32 width, PixelFormat format, PixelType type, T0& pixels);
    [NativeApiAttribute]
public void TexSubImage2D(GLEnum target, int level, int xoffset, int yoffset, UInt32 width, UInt32 height, GLEnum format, GLEnum type, Void* pixels);
    [NativeApiAttribute]
public void TexSubImage2D(GLEnum target, int level, int xoffset, int yoffset, UInt32 width, UInt32 height, GLEnum format, GLEnum type, T0& pixels);
    [NativeApiAttribute]
public void TexSubImage2D(GLEnum target, int level, int xoffset, int yoffset, UInt32 width, UInt32 height, GLEnum format, PixelType type, Void* pixels);
    [NativeApiAttribute]
public void TexSubImage2D(GLEnum target, int level, int xoffset, int yoffset, UInt32 width, UInt32 height, GLEnum format, PixelType type, T0& pixels);
    [NativeApiAttribute]
public void TexSubImage2D(GLEnum target, int level, int xoffset, int yoffset, UInt32 width, UInt32 height, PixelFormat format, GLEnum type, Void* pixels);
    [NativeApiAttribute]
public void TexSubImage2D(GLEnum target, int level, int xoffset, int yoffset, UInt32 width, UInt32 height, PixelFormat format, GLEnum type, T0& pixels);
    [NativeApiAttribute]
public void TexSubImage2D(GLEnum target, int level, int xoffset, int yoffset, UInt32 width, UInt32 height, PixelFormat format, PixelType type, Void* pixels);
    [NativeApiAttribute]
public void TexSubImage2D(GLEnum target, int level, int xoffset, int yoffset, UInt32 width, UInt32 height, PixelFormat format, PixelType type, T0& pixels);
    [NativeApiAttribute]
public void TexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, UInt32 width, UInt32 height, GLEnum format, GLEnum type, Void* pixels);
    [NativeApiAttribute]
public void TexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, UInt32 width, UInt32 height, GLEnum format, GLEnum type, T0& pixels);
    [NativeApiAttribute]
public void TexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, UInt32 width, UInt32 height, GLEnum format, PixelType type, Void* pixels);
    [NativeApiAttribute]
public void TexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, UInt32 width, UInt32 height, GLEnum format, PixelType type, T0& pixels);
    [NativeApiAttribute]
public void TexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, UInt32 width, UInt32 height, PixelFormat format, GLEnum type, Void* pixels);
    [NativeApiAttribute]
public void TexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, UInt32 width, UInt32 height, PixelFormat format, GLEnum type, T0& pixels);
    [NativeApiAttribute]
public void TexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, UInt32 width, UInt32 height, PixelFormat format, PixelType type, Void* pixels);
    [NativeApiAttribute]
public void TexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, UInt32 width, UInt32 height, PixelFormat format, PixelType type, T0& pixels);
    [NativeApiAttribute]
public void BlendFunc(GLEnum sfactor, GLEnum dfactor);
    [NativeApiAttribute]
public void BlendFunc(GLEnum sfactor, BlendingFactor dfactor);
    [NativeApiAttribute]
public void BlendFunc(BlendingFactor sfactor, GLEnum dfactor);
    [NativeApiAttribute]
public void BlendFunc(BlendingFactor sfactor, BlendingFactor dfactor);
    [NativeApiAttribute]
public void Clear(UInt32 mask);
    [NativeApiAttribute]
public void Clear(ClearBufferMask mask);
    [NativeApiAttribute]
public void ClearColor(float red, float green, float blue, float alpha);
    [NativeApiAttribute]
public void ClearDepth(double depth);
    [NativeApiAttribute]
public void ClearStencil(int s);
    [NativeApiAttribute]
public void ColorMask(bool red, bool green, bool blue, bool alpha);
    [NativeApiAttribute]
public void ColorMask(bool red, bool green, bool blue, Boolean alpha);
    [NativeApiAttribute]
public void ColorMask(bool red, bool green, Boolean blue, bool alpha);
    [NativeApiAttribute]
public void ColorMask(bool red, bool green, Boolean blue, Boolean alpha);
    [NativeApiAttribute]
public void ColorMask(bool red, Boolean green, bool blue, bool alpha);
    [NativeApiAttribute]
public void ColorMask(bool red, Boolean green, bool blue, Boolean alpha);
    [NativeApiAttribute]
public void ColorMask(bool red, Boolean green, Boolean blue, bool alpha);
    [NativeApiAttribute]
public void ColorMask(bool red, Boolean green, Boolean blue, Boolean alpha);
    [NativeApiAttribute]
public void ColorMask(Boolean red, bool green, bool blue, bool alpha);
    [NativeApiAttribute]
public void ColorMask(Boolean red, bool green, bool blue, Boolean alpha);
    [NativeApiAttribute]
public void ColorMask(Boolean red, bool green, Boolean blue, bool alpha);
    [NativeApiAttribute]
public void ColorMask(Boolean red, bool green, Boolean blue, Boolean alpha);
    [NativeApiAttribute]
public void ColorMask(Boolean red, Boolean green, bool blue, bool alpha);
    [NativeApiAttribute]
public void ColorMask(Boolean red, Boolean green, bool blue, Boolean alpha);
    [NativeApiAttribute]
public void ColorMask(Boolean red, Boolean green, Boolean blue, bool alpha);
    [NativeApiAttribute]
public void ColorMask(Boolean red, Boolean green, Boolean blue, Boolean alpha);
    [NativeApiAttribute]
public void CullFace(GLEnum mode);
    [NativeApiAttribute]
public void CullFace(CullFaceMode mode);
    [NativeApiAttribute]
public void DepthFunc(GLEnum func);
    [NativeApiAttribute]
public void DepthFunc(DepthFunction func);
    [NativeApiAttribute]
public void DepthMask(bool flag);
    [NativeApiAttribute]
public void DepthMask(Boolean flag);
    [NativeApiAttribute]
public void DepthRange(double n, double f);
    [NativeApiAttribute]
public void Disable(GLEnum cap);
    [NativeApiAttribute]
public void Disable(EnableCap cap);
    [NativeApiAttribute]
public void DrawBuffer(GLEnum buf);
    [NativeApiAttribute]
public void DrawBuffer(DrawBufferMode buf);
    [NativeApiAttribute]
public void Enable(GLEnum cap);
    [NativeApiAttribute]
public void Enable(EnableCap cap);
    [NativeApiAttribute]
public void Finish();
    [NativeApiAttribute]
public void Flush();
    [NativeApiAttribute]
public void FrontFace(GLEnum mode);
    [NativeApiAttribute]
public void FrontFace(FrontFaceDirection mode);
    [NativeApiAttribute]
public void GetBoolean(GLEnum pname, Boolean* data);
    [NativeApiAttribute]
public void GetBoolean(GLEnum pname, Boolean& data);
    [NativeApiAttribute]
public void GetBoolean(GLEnum pname, Boolean* data);
    [NativeApiAttribute]
public void GetBoolean(GLEnum pname, Boolean& data);
    [NativeApiAttribute]
public void GetBoolean(GetPName pname, Boolean* data);
    [NativeApiAttribute]
public void GetBoolean(GetPName pname, Boolean& data);
    [NativeApiAttribute]
public void GetBoolean(GetPName pname, Boolean* data);
    [NativeApiAttribute]
public void GetBoolean(GetPName pname, Boolean& data);
    [NativeApiAttribute]
public void GetDouble(GLEnum pname, Double* data);
    [NativeApiAttribute]
public void GetDouble(GLEnum pname, Double& data);
    [NativeApiAttribute]
public void GetDouble(GetPName pname, Double* data);
    [NativeApiAttribute]
public void GetDouble(GetPName pname, Double& data);
    [NativeApiAttribute]
public GLEnum GetError();
    [NativeApiAttribute]
public void GetFloat(GLEnum pname, Single* data);
    [NativeApiAttribute]
public void GetFloat(GLEnum pname, Single& data);
    [NativeApiAttribute]
public void GetFloat(GetPName pname, Single* data);
    [NativeApiAttribute]
public void GetFloat(GetPName pname, Single& data);
    [NativeApiAttribute]
public void GetInteger(GLEnum pname, Int32* data);
    [NativeApiAttribute]
public void GetInteger(GLEnum pname, Int32& data);
    [NativeApiAttribute]
public void GetInteger(GetPName pname, Int32* data);
    [NativeApiAttribute]
public void GetInteger(GetPName pname, Int32& data);
    [NativeApiAttribute]
public Byte* GetString(GLEnum name);
    [NativeApiAttribute]
public string GetStringS(GLEnum name);
    [NativeApiAttribute]
public Byte* GetString(StringName name);
    [NativeApiAttribute]
public string GetStringS(StringName name);
    [NativeApiAttribute]
public void GetTexImage(GLEnum target, int level, GLEnum format, GLEnum type, Void* pixels);
    [NativeApiAttribute]
public void GetTexImage(GLEnum target, int level, GLEnum format, GLEnum type, T0& pixels);
    [NativeApiAttribute]
public void GetTexImage(GLEnum target, int level, GLEnum format, PixelType type, Void* pixels);
    [NativeApiAttribute]
public void GetTexImage(GLEnum target, int level, GLEnum format, PixelType type, T0& pixels);
    [NativeApiAttribute]
public void GetTexImage(GLEnum target, int level, PixelFormat format, GLEnum type, Void* pixels);
    [NativeApiAttribute]
public void GetTexImage(GLEnum target, int level, PixelFormat format, GLEnum type, T0& pixels);
    [NativeApiAttribute]
public void GetTexImage(GLEnum target, int level, PixelFormat format, PixelType type, Void* pixels);
    [NativeApiAttribute]
public void GetTexImage(GLEnum target, int level, PixelFormat format, PixelType type, T0& pixels);
    [NativeApiAttribute]
public void GetTexImage(TextureTarget target, int level, GLEnum format, GLEnum type, Void* pixels);
    [NativeApiAttribute]
public void GetTexImage(TextureTarget target, int level, GLEnum format, GLEnum type, T0& pixels);
    [NativeApiAttribute]
public void GetTexImage(TextureTarget target, int level, GLEnum format, PixelType type, Void* pixels);
    [NativeApiAttribute]
public void GetTexImage(TextureTarget target, int level, GLEnum format, PixelType type, T0& pixels);
    [NativeApiAttribute]
public void GetTexImage(TextureTarget target, int level, PixelFormat format, GLEnum type, Void* pixels);
    [NativeApiAttribute]
public void GetTexImage(TextureTarget target, int level, PixelFormat format, GLEnum type, T0& pixels);
    [NativeApiAttribute]
public void GetTexImage(TextureTarget target, int level, PixelFormat format, PixelType type, Void* pixels);
    [NativeApiAttribute]
public void GetTexImage(TextureTarget target, int level, PixelFormat format, PixelType type, T0& pixels);
    [NativeApiAttribute]
public void GetTexLevelParameter(GLEnum target, int level, GLEnum pname, Single* params);
    [NativeApiAttribute]
public void GetTexLevelParameter(GLEnum target, int level, GLEnum pname, Single& params);
    [NativeApiAttribute]
public void GetTexLevelParameter(GLEnum target, int level, GetTextureParameter pname, Single* params);
    [NativeApiAttribute]
public void GetTexLevelParameter(GLEnum target, int level, GetTextureParameter pname, Single& params);
    [NativeApiAttribute]
public void GetTexLevelParameter(TextureTarget target, int level, GLEnum pname, Single* params);
    [NativeApiAttribute]
public void GetTexLevelParameter(TextureTarget target, int level, GLEnum pname, Single& params);
    [NativeApiAttribute]
public void GetTexLevelParameter(TextureTarget target, int level, GetTextureParameter pname, Single* params);
    [NativeApiAttribute]
public void GetTexLevelParameter(TextureTarget target, int level, GetTextureParameter pname, Single& params);
    [NativeApiAttribute]
public void GetTexLevelParameter(GLEnum target, int level, GLEnum pname, Int32* params);
    [NativeApiAttribute]
public void GetTexLevelParameter(GLEnum target, int level, GLEnum pname, Int32& params);
    [NativeApiAttribute]
public void GetTexLevelParameter(GLEnum target, int level, GetTextureParameter pname, Int32* params);
    [NativeApiAttribute]
public void GetTexLevelParameter(GLEnum target, int level, GetTextureParameter pname, Int32& params);
    [NativeApiAttribute]
public void GetTexLevelParameter(TextureTarget target, int level, GLEnum pname, Int32* params);
    [NativeApiAttribute]
public void GetTexLevelParameter(TextureTarget target, int level, GLEnum pname, Int32& params);
    [NativeApiAttribute]
public void GetTexLevelParameter(TextureTarget target, int level, GetTextureParameter pname, Int32* params);
    [NativeApiAttribute]
public void GetTexLevelParameter(TextureTarget target, int level, GetTextureParameter pname, Int32& params);
    [NativeApiAttribute]
public void GetTexParameter(GLEnum target, GLEnum pname, Single* params);
    [NativeApiAttribute]
public void GetTexParameter(GLEnum target, GLEnum pname, Single& params);
    [NativeApiAttribute]
public void GetTexParameter(GLEnum target, GetTextureParameter pname, Single* params);
    [NativeApiAttribute]
public void GetTexParameter(GLEnum target, GetTextureParameter pname, Single& params);
    [NativeApiAttribute]
public void GetTexParameter(TextureTarget target, GLEnum pname, Single* params);
    [NativeApiAttribute]
public void GetTexParameter(TextureTarget target, GLEnum pname, Single& params);
    [NativeApiAttribute]
public void GetTexParameter(TextureTarget target, GetTextureParameter pname, Single* params);
    [NativeApiAttribute]
public void GetTexParameter(TextureTarget target, GetTextureParameter pname, Single& params);
    [NativeApiAttribute]
public void GetTexParameter(GLEnum target, GLEnum pname, Int32* params);
    [NativeApiAttribute]
public void GetTexParameter(GLEnum target, GLEnum pname, Int32& params);
    [NativeApiAttribute]
public void GetTexParameter(GLEnum target, GetTextureParameter pname, Int32* params);
    [NativeApiAttribute]
public void GetTexParameter(GLEnum target, GetTextureParameter pname, Int32& params);
    [NativeApiAttribute]
public void GetTexParameter(TextureTarget target, GLEnum pname, Int32* params);
    [NativeApiAttribute]
public void GetTexParameter(TextureTarget target, GLEnum pname, Int32& params);
    [NativeApiAttribute]
public void GetTexParameter(TextureTarget target, GetTextureParameter pname, Int32* params);
    [NativeApiAttribute]
public void GetTexParameter(TextureTarget target, GetTextureParameter pname, Int32& params);
    [NativeApiAttribute]
public void Hint(GLEnum target, GLEnum mode);
    [NativeApiAttribute]
public void Hint(GLEnum target, HintMode mode);
    [NativeApiAttribute]
public void Hint(HintTarget target, GLEnum mode);
    [NativeApiAttribute]
public void Hint(HintTarget target, HintMode mode);
    [NativeApiAttribute]
public bool IsEnabled(GLEnum cap);
    [NativeApiAttribute]
public bool IsEnabled(EnableCap cap);
    [NativeApiAttribute]
public void LineWidth(float width);
    [NativeApiAttribute]
public void LogicOp(GLEnum opcode);
    [NativeApiAttribute]
public void LogicOp(LogicOp opcode);
    [NativeApiAttribute]
public void PixelStore(GLEnum pname, float param);
    [NativeApiAttribute]
public void PixelStore(PixelStoreParameter pname, float param);
    [NativeApiAttribute]
public void PixelStore(GLEnum pname, int param);
    [NativeApiAttribute]
public void PixelStore(PixelStoreParameter pname, int param);
    [NativeApiAttribute]
public void PointSize(float size);
    [NativeApiAttribute]
public void PolygonMode(GLEnum face, GLEnum mode);
    [NativeApiAttribute]
public void PolygonMode(GLEnum face, PolygonMode mode);
    [NativeApiAttribute]
public void PolygonMode(MaterialFace face, GLEnum mode);
    [NativeApiAttribute]
public void PolygonMode(MaterialFace face, PolygonMode mode);
    [NativeApiAttribute]
public void ReadBuffer(GLEnum src);
    [NativeApiAttribute]
public void ReadBuffer(ReadBufferMode src);
    [NativeApiAttribute]
public void ReadPixels(int x, int y, UInt32 width, UInt32 height, GLEnum format, GLEnum type, Void* pixels);
    [NativeApiAttribute]
public void ReadPixels(int x, int y, UInt32 width, UInt32 height, GLEnum format, GLEnum type, T0& pixels);
    [NativeApiAttribute]
public void ReadPixels(int x, int y, UInt32 width, UInt32 height, GLEnum format, PixelType type, Void* pixels);
    [NativeApiAttribute]
public void ReadPixels(int x, int y, UInt32 width, UInt32 height, GLEnum format, PixelType type, T0& pixels);
    [NativeApiAttribute]
public void ReadPixels(int x, int y, UInt32 width, UInt32 height, PixelFormat format, GLEnum type, Void* pixels);
    [NativeApiAttribute]
public void ReadPixels(int x, int y, UInt32 width, UInt32 height, PixelFormat format, GLEnum type, T0& pixels);
    [NativeApiAttribute]
public void ReadPixels(int x, int y, UInt32 width, UInt32 height, PixelFormat format, PixelType type, Void* pixels);
    [NativeApiAttribute]
public void ReadPixels(int x, int y, UInt32 width, UInt32 height, PixelFormat format, PixelType type, T0& pixels);
    [NativeApiAttribute]
public void Scissor(int x, int y, UInt32 width, UInt32 height);
    [NativeApiAttribute]
public void StencilFunc(GLEnum func, int ref, UInt32 mask);
    [NativeApiAttribute]
public void StencilFunc(StencilFunction func, int ref, UInt32 mask);
    [NativeApiAttribute]
public void StencilMask(UInt32 mask);
    [NativeApiAttribute]
public void StencilOp(GLEnum fail, GLEnum zfail, GLEnum zpass);
    [NativeApiAttribute]
public void StencilOp(GLEnum fail, GLEnum zfail, StencilOp zpass);
    [NativeApiAttribute]
public void StencilOp(GLEnum fail, StencilOp zfail, GLEnum zpass);
    [NativeApiAttribute]
public void StencilOp(GLEnum fail, StencilOp zfail, StencilOp zpass);
    [NativeApiAttribute]
public void StencilOp(StencilOp fail, GLEnum zfail, GLEnum zpass);
    [NativeApiAttribute]
public void StencilOp(StencilOp fail, GLEnum zfail, StencilOp zpass);
    [NativeApiAttribute]
public void StencilOp(StencilOp fail, StencilOp zfail, GLEnum zpass);
    [NativeApiAttribute]
public void StencilOp(StencilOp fail, StencilOp zfail, StencilOp zpass);
    [NativeApiAttribute]
public void TexImage1D(GLEnum target, int level, int internalformat, UInt32 width, int border, GLEnum format, GLEnum type, Void* pixels);
    [NativeApiAttribute]
public void TexImage1D(GLEnum target, int level, int internalformat, UInt32 width, int border, GLEnum format, GLEnum type, T0& pixels);
    [NativeApiAttribute]
public void TexImage1D(GLEnum target, int level, int internalformat, UInt32 width, int border, GLEnum format, PixelType type, Void* pixels);
    [NativeApiAttribute]
public void TexImage1D(GLEnum target, int level, int internalformat, UInt32 width, int border, GLEnum format, PixelType type, T0& pixels);
    [NativeApiAttribute]
public void TexImage1D(GLEnum target, int level, int internalformat, UInt32 width, int border, PixelFormat format, GLEnum type, Void* pixels);
    [NativeApiAttribute]
public void TexImage1D(GLEnum target, int level, int internalformat, UInt32 width, int border, PixelFormat format, GLEnum type, T0& pixels);
    [NativeApiAttribute]
public void TexImage1D(GLEnum target, int level, int internalformat, UInt32 width, int border, PixelFormat format, PixelType type, Void* pixels);
    [NativeApiAttribute]
public void TexImage1D(GLEnum target, int level, int internalformat, UInt32 width, int border, PixelFormat format, PixelType type, T0& pixels);
    [NativeApiAttribute]
public void TexImage1D(GLEnum target, int level, InternalFormat internalformat, UInt32 width, int border, GLEnum format, GLEnum type, Void* pixels);
    [NativeApiAttribute]
public void TexImage1D(GLEnum target, int level, InternalFormat internalformat, UInt32 width, int border, GLEnum format, GLEnum type, T0& pixels);
    [NativeApiAttribute]
public void TexImage1D(GLEnum target, int level, InternalFormat internalformat, UInt32 width, int border, GLEnum format, PixelType type, Void* pixels);
    [NativeApiAttribute]
public void TexImage1D(GLEnum target, int level, InternalFormat internalformat, UInt32 width, int border, GLEnum format, PixelType type, T0& pixels);
    [NativeApiAttribute]
public void TexImage1D(GLEnum target, int level, InternalFormat internalformat, UInt32 width, int border, PixelFormat format, GLEnum type, Void* pixels);
    [NativeApiAttribute]
public void TexImage1D(GLEnum target, int level, InternalFormat internalformat, UInt32 width, int border, PixelFormat format, GLEnum type, T0& pixels);
    [NativeApiAttribute]
public void TexImage1D(GLEnum target, int level, InternalFormat internalformat, UInt32 width, int border, PixelFormat format, PixelType type, Void* pixels);
    [NativeApiAttribute]
public void TexImage1D(GLEnum target, int level, InternalFormat internalformat, UInt32 width, int border, PixelFormat format, PixelType type, T0& pixels);
    [NativeApiAttribute]
public void TexImage1D(TextureTarget target, int level, int internalformat, UInt32 width, int border, GLEnum format, GLEnum type, Void* pixels);
    [NativeApiAttribute]
public void TexImage1D(TextureTarget target, int level, int internalformat, UInt32 width, int border, GLEnum format, GLEnum type, T0& pixels);
    [NativeApiAttribute]
public void TexImage1D(TextureTarget target, int level, int internalformat, UInt32 width, int border, GLEnum format, PixelType type, Void* pixels);
    [NativeApiAttribute]
public void TexImage1D(TextureTarget target, int level, int internalformat, UInt32 width, int border, GLEnum format, PixelType type, T0& pixels);
    [NativeApiAttribute]
public void TexImage1D(TextureTarget target, int level, int internalformat, UInt32 width, int border, PixelFormat format, GLEnum type, Void* pixels);
    [NativeApiAttribute]
public void TexImage1D(TextureTarget target, int level, int internalformat, UInt32 width, int border, PixelFormat format, GLEnum type, T0& pixels);
    [NativeApiAttribute]
public void TexImage1D(TextureTarget target, int level, int internalformat, UInt32 width, int border, PixelFormat format, PixelType type, Void* pixels);
    [NativeApiAttribute]
public void TexImage1D(TextureTarget target, int level, int internalformat, UInt32 width, int border, PixelFormat format, PixelType type, T0& pixels);
    [NativeApiAttribute]
public void TexImage1D(TextureTarget target, int level, InternalFormat internalformat, UInt32 width, int border, GLEnum format, GLEnum type, Void* pixels);
    [NativeApiAttribute]
public void TexImage1D(TextureTarget target, int level, InternalFormat internalformat, UInt32 width, int border, GLEnum format, GLEnum type, T0& pixels);
    [NativeApiAttribute]
public void TexImage1D(TextureTarget target, int level, InternalFormat internalformat, UInt32 width, int border, GLEnum format, PixelType type, Void* pixels);
    [NativeApiAttribute]
public void TexImage1D(TextureTarget target, int level, InternalFormat internalformat, UInt32 width, int border, GLEnum format, PixelType type, T0& pixels);
    [NativeApiAttribute]
public void TexImage1D(TextureTarget target, int level, InternalFormat internalformat, UInt32 width, int border, PixelFormat format, GLEnum type, Void* pixels);
    [NativeApiAttribute]
public void TexImage1D(TextureTarget target, int level, InternalFormat internalformat, UInt32 width, int border, PixelFormat format, GLEnum type, T0& pixels);
    [NativeApiAttribute]
public void TexImage1D(TextureTarget target, int level, InternalFormat internalformat, UInt32 width, int border, PixelFormat format, PixelType type, Void* pixels);
    [NativeApiAttribute]
public void TexImage1D(TextureTarget target, int level, InternalFormat internalformat, UInt32 width, int border, PixelFormat format, PixelType type, T0& pixels);
    [NativeApiAttribute]
public void TexImage2D(GLEnum target, int level, int internalformat, UInt32 width, UInt32 height, int border, GLEnum format, GLEnum type, Void* pixels);
    [NativeApiAttribute]
public void TexImage2D(GLEnum target, int level, int internalformat, UInt32 width, UInt32 height, int border, GLEnum format, GLEnum type, T0& pixels);
    [NativeApiAttribute]
public void TexImage2D(GLEnum target, int level, int internalformat, UInt32 width, UInt32 height, int border, GLEnum format, PixelType type, Void* pixels);
    [NativeApiAttribute]
public void TexImage2D(GLEnum target, int level, int internalformat, UInt32 width, UInt32 height, int border, GLEnum format, PixelType type, T0& pixels);
    [NativeApiAttribute]
public void TexImage2D(GLEnum target, int level, int internalformat, UInt32 width, UInt32 height, int border, PixelFormat format, GLEnum type, Void* pixels);
    [NativeApiAttribute]
public void TexImage2D(GLEnum target, int level, int internalformat, UInt32 width, UInt32 height, int border, PixelFormat format, GLEnum type, T0& pixels);
    [NativeApiAttribute]
public void TexImage2D(GLEnum target, int level, int internalformat, UInt32 width, UInt32 height, int border, PixelFormat format, PixelType type, Void* pixels);
    [NativeApiAttribute]
public void TexImage2D(GLEnum target, int level, int internalformat, UInt32 width, UInt32 height, int border, PixelFormat format, PixelType type, T0& pixels);
    [NativeApiAttribute]
public void TexImage2D(GLEnum target, int level, InternalFormat internalformat, UInt32 width, UInt32 height, int border, GLEnum format, GLEnum type, Void* pixels);
    [NativeApiAttribute]
public void TexImage2D(GLEnum target, int level, InternalFormat internalformat, UInt32 width, UInt32 height, int border, GLEnum format, GLEnum type, T0& pixels);
    [NativeApiAttribute]
public void TexImage2D(GLEnum target, int level, InternalFormat internalformat, UInt32 width, UInt32 height, int border, GLEnum format, PixelType type, Void* pixels);
    [NativeApiAttribute]
public void TexImage2D(GLEnum target, int level, InternalFormat internalformat, UInt32 width, UInt32 height, int border, GLEnum format, PixelType type, T0& pixels);
    [NativeApiAttribute]
public void TexImage2D(GLEnum target, int level, InternalFormat internalformat, UInt32 width, UInt32 height, int border, PixelFormat format, GLEnum type, Void* pixels);
    [NativeApiAttribute]
public void TexImage2D(GLEnum target, int level, InternalFormat internalformat, UInt32 width, UInt32 height, int border, PixelFormat format, GLEnum type, T0& pixels);
    [NativeApiAttribute]
public void TexImage2D(GLEnum target, int level, InternalFormat internalformat, UInt32 width, UInt32 height, int border, PixelFormat format, PixelType type, Void* pixels);
    [NativeApiAttribute]
public void TexImage2D(GLEnum target, int level, InternalFormat internalformat, UInt32 width, UInt32 height, int border, PixelFormat format, PixelType type, T0& pixels);
    [NativeApiAttribute]
public void TexImage2D(TextureTarget target, int level, int internalformat, UInt32 width, UInt32 height, int border, GLEnum format, GLEnum type, Void* pixels);
    [NativeApiAttribute]
public void TexImage2D(TextureTarget target, int level, int internalformat, UInt32 width, UInt32 height, int border, GLEnum format, GLEnum type, T0& pixels);
    [NativeApiAttribute]
public void TexImage2D(TextureTarget target, int level, int internalformat, UInt32 width, UInt32 height, int border, GLEnum format, PixelType type, Void* pixels);
    [NativeApiAttribute]
public void TexImage2D(TextureTarget target, int level, int internalformat, UInt32 width, UInt32 height, int border, GLEnum format, PixelType type, T0& pixels);
    [NativeApiAttribute]
public void TexImage2D(TextureTarget target, int level, int internalformat, UInt32 width, UInt32 height, int border, PixelFormat format, GLEnum type, Void* pixels);
    [NativeApiAttribute]
public void TexImage2D(TextureTarget target, int level, int internalformat, UInt32 width, UInt32 height, int border, PixelFormat format, GLEnum type, T0& pixels);
    [NativeApiAttribute]
public void TexImage2D(TextureTarget target, int level, int internalformat, UInt32 width, UInt32 height, int border, PixelFormat format, PixelType type, Void* pixels);
    [NativeApiAttribute]
public void TexImage2D(TextureTarget target, int level, int internalformat, UInt32 width, UInt32 height, int border, PixelFormat format, PixelType type, T0& pixels);
    [NativeApiAttribute]
public void TexImage2D(TextureTarget target, int level, InternalFormat internalformat, UInt32 width, UInt32 height, int border, GLEnum format, GLEnum type, Void* pixels);
    [NativeApiAttribute]
public void TexImage2D(TextureTarget target, int level, InternalFormat internalformat, UInt32 width, UInt32 height, int border, GLEnum format, GLEnum type, T0& pixels);
    [NativeApiAttribute]
public void TexImage2D(TextureTarget target, int level, InternalFormat internalformat, UInt32 width, UInt32 height, int border, GLEnum format, PixelType type, Void* pixels);
    [NativeApiAttribute]
public void TexImage2D(TextureTarget target, int level, InternalFormat internalformat, UInt32 width, UInt32 height, int border, GLEnum format, PixelType type, T0& pixels);
    [NativeApiAttribute]
public void TexImage2D(TextureTarget target, int level, InternalFormat internalformat, UInt32 width, UInt32 height, int border, PixelFormat format, GLEnum type, Void* pixels);
    [NativeApiAttribute]
public void TexImage2D(TextureTarget target, int level, InternalFormat internalformat, UInt32 width, UInt32 height, int border, PixelFormat format, GLEnum type, T0& pixels);
    [NativeApiAttribute]
public void TexImage2D(TextureTarget target, int level, InternalFormat internalformat, UInt32 width, UInt32 height, int border, PixelFormat format, PixelType type, Void* pixels);
    [NativeApiAttribute]
public void TexImage2D(TextureTarget target, int level, InternalFormat internalformat, UInt32 width, UInt32 height, int border, PixelFormat format, PixelType type, T0& pixels);
    [NativeApiAttribute]
public void TexParameter(GLEnum target, GLEnum pname, float param);
    [NativeApiAttribute]
public void TexParameter(GLEnum target, TextureParameterName pname, float param);
    [NativeApiAttribute]
public void TexParameter(TextureTarget target, GLEnum pname, float param);
    [NativeApiAttribute]
public void TexParameter(TextureTarget target, TextureParameterName pname, float param);
    [NativeApiAttribute]
public void TexParameter(GLEnum target, GLEnum pname, Single* params);
    [NativeApiAttribute]
public void TexParameter(GLEnum target, GLEnum pname, Single& params);
    [NativeApiAttribute]
public void TexParameter(GLEnum target, TextureParameterName pname, Single* params);
    [NativeApiAttribute]
public void TexParameter(GLEnum target, TextureParameterName pname, Single& params);
    [NativeApiAttribute]
public void TexParameter(TextureTarget target, GLEnum pname, Single* params);
    [NativeApiAttribute]
public void TexParameter(TextureTarget target, GLEnum pname, Single& params);
    [NativeApiAttribute]
public void TexParameter(TextureTarget target, TextureParameterName pname, Single* params);
    [NativeApiAttribute]
public void TexParameter(TextureTarget target, TextureParameterName pname, Single& params);
    [NativeApiAttribute]
public void TexParameter(GLEnum target, GLEnum pname, int param);
    [NativeApiAttribute]
public void TexParameter(GLEnum target, TextureParameterName pname, int param);
    [NativeApiAttribute]
public void TexParameter(TextureTarget target, GLEnum pname, int param);
    [NativeApiAttribute]
public void TexParameter(TextureTarget target, TextureParameterName pname, int param);
    [NativeApiAttribute]
public void TexParameter(GLEnum target, GLEnum pname, Int32* params);
    [NativeApiAttribute]
public void TexParameter(GLEnum target, GLEnum pname, Int32& params);
    [NativeApiAttribute]
public void TexParameter(GLEnum target, TextureParameterName pname, Int32* params);
    [NativeApiAttribute]
public void TexParameter(GLEnum target, TextureParameterName pname, Int32& params);
    [NativeApiAttribute]
public void TexParameter(TextureTarget target, GLEnum pname, Int32* params);
    [NativeApiAttribute]
public void TexParameter(TextureTarget target, GLEnum pname, Int32& params);
    [NativeApiAttribute]
public void TexParameter(TextureTarget target, TextureParameterName pname, Int32* params);
    [NativeApiAttribute]
public void TexParameter(TextureTarget target, TextureParameterName pname, Int32& params);
    [NativeApiAttribute]
public void Viewport(int x, int y, UInt32 width, UInt32 height);
    public UInt32 CreateBuffer();
    public void CreateBuffers(Span`1<UInt32> buffers);
    public void CreateBuffers(Span`1<Buffer> buffers);
    public UInt32 CreateFramebuffer();
    public void CreateFramebuffers(Span`1<UInt32> framebuffers);
    public void CreateFramebuffers(Span`1<Framebuffer> framebuffers);
    public UInt32 CreateProgramPipeline();
    public void CreateProgramPipelines(Span`1<UInt32> pipelines);
    public void CreateProgramPipelines(Span`1<ProgramPipeline> pipelines);
    public void CreateQueries(GLEnum target, Span`1<UInt32> ids);
    public void CreateQueries(GLEnum target, Span`1<Query> ids);
    public void CreateQueries(QueryTarget target, Span`1<UInt32> ids);
    public void CreateQueries(QueryTarget target, Span`1<Query> ids);
    public UInt32 CreateRenderbuffer();
    public void CreateRenderbuffers(Span`1<UInt32> renderbuffers);
    public void CreateRenderbuffers(Span`1<Renderbuffer> renderbuffers);
    public UInt32 CreateSampler();
    public void CreateSamplers(Span`1<UInt32> samplers);
    public void CreateSamplers(Span`1<Sampler> samplers);
    public void CreateTextures(GLEnum target, Span`1<UInt32> textures);
    public void CreateTextures(GLEnum target, Span`1<Texture> textures);
    public void CreateTextures(TextureTarget target, Span`1<UInt32> textures);
    public void CreateTextures(TextureTarget target, Span`1<Texture> textures);
    public UInt32 CreateTransformFeedback();
    public void CreateTransformFeedbacks(Span`1<UInt32> ids);
    public void CreateTransformFeedbacks(Span`1<TransformFeedback> ids);
    public UInt32 CreateVertexArray();
    public void CreateVertexArrays(Span`1<UInt32> arrays);
    public void CreateVertexArrays(Span`1<VertexArray> arrays);
    public void GetnColorTable(GLEnum target, GLEnum format, GLEnum type, Span`1<T0> table);
    public void GetnColorTable(GLEnum target, GLEnum format, PixelType type, Span`1<T0> table);
    public void GetnColorTable(GLEnum target, PixelFormat format, GLEnum type, Span`1<T0> table);
    public void GetnColorTable(GLEnum target, PixelFormat format, PixelType type, Span`1<T0> table);
    public void GetnColorTable(ColorTableTarget target, GLEnum format, GLEnum type, Span`1<T0> table);
    public void GetnColorTable(ColorTableTarget target, GLEnum format, PixelType type, Span`1<T0> table);
    public void GetnColorTable(ColorTableTarget target, PixelFormat format, GLEnum type, Span`1<T0> table);
    public void GetnColorTable(ColorTableTarget target, PixelFormat format, PixelType type, Span`1<T0> table);
    public void GetnCompressedTexImage(GLEnum target, int lod, Span`1<T0> pixels);
    public void GetnCompressedTexImage(TextureTarget target, int lod, Span`1<T0> pixels);
    public void GetnConvolutionFilter(GLEnum target, GLEnum format, GLEnum type, Span`1<T0> image);
    public void GetnConvolutionFilter(GLEnum target, GLEnum format, PixelType type, Span`1<T0> image);
    public void GetnConvolutionFilter(GLEnum target, PixelFormat format, GLEnum type, Span`1<T0> image);
    public void GetnConvolutionFilter(GLEnum target, PixelFormat format, PixelType type, Span`1<T0> image);
    public void GetnConvolutionFilter(ConvolutionTarget target, GLEnum format, GLEnum type, Span`1<T0> image);
    public void GetnConvolutionFilter(ConvolutionTarget target, GLEnum format, PixelType type, Span`1<T0> image);
    public void GetnConvolutionFilter(ConvolutionTarget target, PixelFormat format, GLEnum type, Span`1<T0> image);
    public void GetnConvolutionFilter(ConvolutionTarget target, PixelFormat format, PixelType type, Span`1<T0> image);
    public void GetnHistogram(GLEnum target, bool reset, GLEnum format, GLEnum type, Span`1<T0> values);
    public void GetnHistogram(GLEnum target, bool reset, GLEnum format, PixelType type, Span`1<T0> values);
    public void GetnHistogram(GLEnum target, bool reset, PixelFormat format, GLEnum type, Span`1<T0> values);
    public void GetnHistogram(GLEnum target, bool reset, PixelFormat format, PixelType type, Span`1<T0> values);
    public void GetnHistogram(GLEnum target, Boolean reset, GLEnum format, GLEnum type, Span`1<T0> values);
    public void GetnHistogram(GLEnum target, Boolean reset, GLEnum format, PixelType type, Span`1<T0> values);
    public void GetnHistogram(GLEnum target, Boolean reset, PixelFormat format, GLEnum type, Span`1<T0> values);
    public void GetnHistogram(GLEnum target, Boolean reset, PixelFormat format, PixelType type, Span`1<T0> values);
    public void GetnHistogram(HistogramTarget target, bool reset, GLEnum format, GLEnum type, Span`1<T0> values);
    public void GetnHistogram(HistogramTarget target, bool reset, GLEnum format, PixelType type, Span`1<T0> values);
    public void GetnHistogram(HistogramTarget target, bool reset, PixelFormat format, GLEnum type, Span`1<T0> values);
    public void GetnHistogram(HistogramTarget target, bool reset, PixelFormat format, PixelType type, Span`1<T0> values);
    public void GetnHistogram(HistogramTarget target, Boolean reset, GLEnum format, GLEnum type, Span`1<T0> values);
    public void GetnHistogram(HistogramTarget target, Boolean reset, GLEnum format, PixelType type, Span`1<T0> values);
    public void GetnHistogram(HistogramTarget target, Boolean reset, PixelFormat format, GLEnum type, Span`1<T0> values);
    public void GetnHistogram(HistogramTarget target, Boolean reset, PixelFormat format, PixelType type, Span`1<T0> values);
    public void GetnMinmax(GLEnum target, bool reset, GLEnum format, GLEnum type, Span`1<T0> values);
    public void GetnMinmax(GLEnum target, bool reset, GLEnum format, PixelType type, Span`1<T0> values);
    public void GetnMinmax(GLEnum target, bool reset, PixelFormat format, GLEnum type, Span`1<T0> values);
    public void GetnMinmax(GLEnum target, bool reset, PixelFormat format, PixelType type, Span`1<T0> values);
    public void GetnMinmax(GLEnum target, Boolean reset, GLEnum format, GLEnum type, Span`1<T0> values);
    public void GetnMinmax(GLEnum target, Boolean reset, GLEnum format, PixelType type, Span`1<T0> values);
    public void GetnMinmax(GLEnum target, Boolean reset, PixelFormat format, GLEnum type, Span`1<T0> values);
    public void GetnMinmax(GLEnum target, Boolean reset, PixelFormat format, PixelType type, Span`1<T0> values);
    public void GetnMinmax(MinmaxTarget target, bool reset, GLEnum format, GLEnum type, Span`1<T0> values);
    public void GetnMinmax(MinmaxTarget target, bool reset, GLEnum format, PixelType type, Span`1<T0> values);
    public void GetnMinmax(MinmaxTarget target, bool reset, PixelFormat format, GLEnum type, Span`1<T0> values);
    public void GetnMinmax(MinmaxTarget target, bool reset, PixelFormat format, PixelType type, Span`1<T0> values);
    public void GetnMinmax(MinmaxTarget target, Boolean reset, GLEnum format, GLEnum type, Span`1<T0> values);
    public void GetnMinmax(MinmaxTarget target, Boolean reset, GLEnum format, PixelType type, Span`1<T0> values);
    public void GetnMinmax(MinmaxTarget target, Boolean reset, PixelFormat format, GLEnum type, Span`1<T0> values);
    public void GetnMinmax(MinmaxTarget target, Boolean reset, PixelFormat format, PixelType type, Span`1<T0> values);
    public byte GetnPolygonStipple();
    public void GetnPolygonStipple(Span`1<byte> pattern);
    public void GetnPolygonStipple(Span`1<string> pattern);
    public void GetnSeparableFilter(GLEnum target, GLEnum format, GLEnum type, UInt32 rowBufSize, Void* row, Span`1<T0> column, Void* span);
    public void GetnSeparableFilter(GLEnum target, GLEnum format, GLEnum type, UInt32 rowBufSize, Void* row, Span`1<T0> column, T1& span);
    public void GetnSeparableFilter(GLEnum target, GLEnum format, GLEnum type, Span`1<T0> row, UInt32 columnBufSize, Void* column, Void* span);
    public void GetnSeparableFilter(GLEnum target, GLEnum format, GLEnum type, Span`1<T0> row, UInt32 columnBufSize, Void* column, T1& span);
    public void GetnSeparableFilter(GLEnum target, GLEnum format, GLEnum type, Span`1<T0> row, Span`1<T1> column, Void* span);
    public void GetnSeparableFilter(GLEnum target, GLEnum format, GLEnum type, Span`1<T0> row, Span`1<T1> column, T2& span);
    public void GetnSeparableFilter(GLEnum target, GLEnum format, PixelType type, UInt32 rowBufSize, Void* row, Span`1<T0> column, Void* span);
    public void GetnSeparableFilter(GLEnum target, GLEnum format, PixelType type, UInt32 rowBufSize, Void* row, Span`1<T0> column, T1& span);
    public void GetnSeparableFilter(GLEnum target, GLEnum format, PixelType type, Span`1<T0> row, UInt32 columnBufSize, Void* column, Void* span);
    public void GetnSeparableFilter(GLEnum target, GLEnum format, PixelType type, Span`1<T0> row, UInt32 columnBufSize, Void* column, T1& span);
    public void GetnSeparableFilter(GLEnum target, GLEnum format, PixelType type, Span`1<T0> row, Span`1<T1> column, Void* span);
    public void GetnSeparableFilter(GLEnum target, GLEnum format, PixelType type, Span`1<T0> row, Span`1<T1> column, T2& span);
    public void GetnSeparableFilter(GLEnum target, PixelFormat format, GLEnum type, UInt32 rowBufSize, Void* row, Span`1<T0> column, Void* span);
    public void GetnSeparableFilter(GLEnum target, PixelFormat format, GLEnum type, UInt32 rowBufSize, Void* row, Span`1<T0> column, T1& span);
    public void GetnSeparableFilter(GLEnum target, PixelFormat format, GLEnum type, Span`1<T0> row, UInt32 columnBufSize, Void* column, Void* span);
    public void GetnSeparableFilter(GLEnum target, PixelFormat format, GLEnum type, Span`1<T0> row, UInt32 columnBufSize, Void* column, T1& span);
    public void GetnSeparableFilter(GLEnum target, PixelFormat format, GLEnum type, Span`1<T0> row, Span`1<T1> column, Void* span);
    public void GetnSeparableFilter(GLEnum target, PixelFormat format, GLEnum type, Span`1<T0> row, Span`1<T1> column, T2& span);
    public void GetnSeparableFilter(GLEnum target, PixelFormat format, PixelType type, UInt32 rowBufSize, Void* row, Span`1<T0> column, Void* span);
    public void GetnSeparableFilter(GLEnum target, PixelFormat format, PixelType type, UInt32 rowBufSize, Void* row, Span`1<T0> column, T1& span);
    public void GetnSeparableFilter(GLEnum target, PixelFormat format, PixelType type, Span`1<T0> row, UInt32 columnBufSize, Void* column, Void* span);
    public void GetnSeparableFilter(GLEnum target, PixelFormat format, PixelType type, Span`1<T0> row, UInt32 columnBufSize, Void* column, T1& span);
    public void GetnSeparableFilter(GLEnum target, PixelFormat format, PixelType type, Span`1<T0> row, Span`1<T1> column, Void* span);
    public void GetnSeparableFilter(GLEnum target, PixelFormat format, PixelType type, Span`1<T0> row, Span`1<T1> column, T2& span);
    public void GetnSeparableFilter(SeparableTarget target, GLEnum format, GLEnum type, UInt32 rowBufSize, Void* row, Span`1<T0> column, Void* span);
    public void GetnSeparableFilter(SeparableTarget target, GLEnum format, GLEnum type, UInt32 rowBufSize, Void* row, Span`1<T0> column, T1& span);
    public void GetnSeparableFilter(SeparableTarget target, GLEnum format, GLEnum type, Span`1<T0> row, UInt32 columnBufSize, Void* column, Void* span);
    public void GetnSeparableFilter(SeparableTarget target, GLEnum format, GLEnum type, Span`1<T0> row, UInt32 columnBufSize, Void* column, T1& span);
    public void GetnSeparableFilter(SeparableTarget target, GLEnum format, GLEnum type, Span`1<T0> row, Span`1<T1> column, Void* span);
    public void GetnSeparableFilter(SeparableTarget target, GLEnum format, GLEnum type, Span`1<T0> row, Span`1<T1> column, T2& span);
    public void GetnSeparableFilter(SeparableTarget target, GLEnum format, PixelType type, UInt32 rowBufSize, Void* row, Span`1<T0> column, Void* span);
    public void GetnSeparableFilter(SeparableTarget target, GLEnum format, PixelType type, UInt32 rowBufSize, Void* row, Span`1<T0> column, T1& span);
    public void GetnSeparableFilter(SeparableTarget target, GLEnum format, PixelType type, Span`1<T0> row, UInt32 columnBufSize, Void* column, Void* span);
    public void GetnSeparableFilter(SeparableTarget target, GLEnum format, PixelType type, Span`1<T0> row, UInt32 columnBufSize, Void* column, T1& span);
    public void GetnSeparableFilter(SeparableTarget target, GLEnum format, PixelType type, Span`1<T0> row, Span`1<T1> column, Void* span);
    public void GetnSeparableFilter(SeparableTarget target, GLEnum format, PixelType type, Span`1<T0> row, Span`1<T1> column, T2& span);
    public void GetnSeparableFilter(SeparableTarget target, PixelFormat format, GLEnum type, UInt32 rowBufSize, Void* row, Span`1<T0> column, Void* span);
    public void GetnSeparableFilter(SeparableTarget target, PixelFormat format, GLEnum type, UInt32 rowBufSize, Void* row, Span`1<T0> column, T1& span);
    public void GetnSeparableFilter(SeparableTarget target, PixelFormat format, GLEnum type, Span`1<T0> row, UInt32 columnBufSize, Void* column, Void* span);
    public void GetnSeparableFilter(SeparableTarget target, PixelFormat format, GLEnum type, Span`1<T0> row, UInt32 columnBufSize, Void* column, T1& span);
    public void GetnSeparableFilter(SeparableTarget target, PixelFormat format, GLEnum type, Span`1<T0> row, Span`1<T1> column, Void* span);
    public void GetnSeparableFilter(SeparableTarget target, PixelFormat format, GLEnum type, Span`1<T0> row, Span`1<T1> column, T2& span);
    public void GetnSeparableFilter(SeparableTarget target, PixelFormat format, PixelType type, UInt32 rowBufSize, Void* row, Span`1<T0> column, Void* span);
    public void GetnSeparableFilter(SeparableTarget target, PixelFormat format, PixelType type, UInt32 rowBufSize, Void* row, Span`1<T0> column, T1& span);
    public void GetnSeparableFilter(SeparableTarget target, PixelFormat format, PixelType type, Span`1<T0> row, UInt32 columnBufSize, Void* column, Void* span);
    public void GetnSeparableFilter(SeparableTarget target, PixelFormat format, PixelType type, Span`1<T0> row, UInt32 columnBufSize, Void* column, T1& span);
    public void GetnSeparableFilter(SeparableTarget target, PixelFormat format, PixelType type, Span`1<T0> row, Span`1<T1> column, Void* span);
    public void GetnSeparableFilter(SeparableTarget target, PixelFormat format, PixelType type, Span`1<T0> row, Span`1<T1> column, T2& span);
    public void GetnTexImage(GLEnum target, int level, GLEnum format, GLEnum type, Span`1<T0> pixels);
    public void GetnTexImage(GLEnum target, int level, GLEnum format, PixelType type, Span`1<T0> pixels);
    public void GetnTexImage(GLEnum target, int level, PixelFormat format, GLEnum type, Span`1<T0> pixels);
    public void GetnTexImage(GLEnum target, int level, PixelFormat format, PixelType type, Span`1<T0> pixels);
    public void GetnTexImage(TextureTarget target, int level, GLEnum format, GLEnum type, Span`1<T0> pixels);
    public void GetnTexImage(TextureTarget target, int level, GLEnum format, PixelType type, Span`1<T0> pixels);
    public void GetnTexImage(TextureTarget target, int level, PixelFormat format, GLEnum type, Span`1<T0> pixels);
    public void GetnTexImage(TextureTarget target, int level, PixelFormat format, PixelType type, Span`1<T0> pixels);
    public void GetnUniform(UInt32 program, int location, Span`1<double> params);
    public void GetnUniform(UInt32 program, int location, Span`1<float> params);
    public void GetnUniform(UInt32 program, int location, Span`1<int> params);
    public void GetnUniform(UInt32 program, int location, Span`1<UInt32> params);
    public void NamedBufferStorage(UInt32 buffer, ReadOnlySpan`1<T0> data, UInt32 flags);
    public void NamedBufferStorage(UInt32 buffer, ReadOnlySpan`1<T0> data, BufferStorageMask flags);
    public void ReadnPixels(int x, int y, UInt32 width, UInt32 height, GLEnum format, GLEnum type, Span`1<T0> data);
    public void ReadnPixels(int x, int y, UInt32 width, UInt32 height, GLEnum format, PixelType type, Span`1<T0> data);
    public void ReadnPixels(int x, int y, UInt32 width, UInt32 height, PixelFormat format, GLEnum type, Span`1<T0> data);
    public void ReadnPixels(int x, int y, UInt32 width, UInt32 height, PixelFormat format, PixelType type, Span`1<T0> data);
    public void BindBuffersBase(GLEnum target, UInt32 first, ReadOnlySpan`1<UInt32> buffers);
    public void BindBuffersBase(GLEnum target, UInt32 first, ReadOnlySpan`1<Buffer> buffers);
    public void BindBuffersBase(BufferTargetARB target, UInt32 first, ReadOnlySpan`1<UInt32> buffers);
    public void BindBuffersBase(BufferTargetARB target, UInt32 first, ReadOnlySpan`1<Buffer> buffers);
    public void BindBuffersRange(GLEnum target, UInt32 first, UInt32* buffers, IntPtr* offsets, ReadOnlySpan`1<UIntPtr> sizes);
    public void BindBuffersRange(GLEnum target, UInt32 first, UInt32* buffers, ReadOnlySpan`1<IntPtr> offsets, UIntPtr* sizes);
    public void BindBuffersRange(GLEnum target, UInt32 first, UInt32* buffers, ReadOnlySpan`1<IntPtr> offsets, ReadOnlySpan`1<UIntPtr> sizes);
    public void BindBuffersRange(GLEnum target, UInt32 first, ReadOnlySpan`1<UInt32> buffers, IntPtr* offsets, UIntPtr* sizes);
    public void BindBuffersRange(GLEnum target, UInt32 first, ReadOnlySpan`1<UInt32> buffers, IntPtr* offsets, ReadOnlySpan`1<UIntPtr> sizes);
    public void BindBuffersRange(GLEnum target, UInt32 first, ReadOnlySpan`1<UInt32> buffers, ReadOnlySpan`1<IntPtr> offsets, UIntPtr* sizes);
    public void BindBuffersRange(GLEnum target, UInt32 first, ReadOnlySpan`1<UInt32> buffers, ReadOnlySpan`1<IntPtr> offsets, ReadOnlySpan`1<UIntPtr> sizes);
    public void BindBuffersRange(GLEnum target, UInt32 first, Buffer* buffers, IntPtr* offsets, ReadOnlySpan`1<UIntPtr> sizes);
    public void BindBuffersRange(GLEnum target, UInt32 first, Buffer* buffers, ReadOnlySpan`1<IntPtr> offsets, UIntPtr* sizes);
    public void BindBuffersRange(GLEnum target, UInt32 first, Buffer* buffers, ReadOnlySpan`1<IntPtr> offsets, ReadOnlySpan`1<UIntPtr> sizes);
    public void BindBuffersRange(GLEnum target, UInt32 first, ReadOnlySpan`1<Buffer> buffers, IntPtr* offsets, UIntPtr* sizes);
    public void BindBuffersRange(GLEnum target, UInt32 first, ReadOnlySpan`1<Buffer> buffers, IntPtr* offsets, ReadOnlySpan`1<UIntPtr> sizes);
    public void BindBuffersRange(GLEnum target, UInt32 first, ReadOnlySpan`1<Buffer> buffers, ReadOnlySpan`1<IntPtr> offsets, UIntPtr* sizes);
    public void BindBuffersRange(GLEnum target, UInt32 first, ReadOnlySpan`1<Buffer> buffers, ReadOnlySpan`1<IntPtr> offsets, ReadOnlySpan`1<UIntPtr> sizes);
    public void BindBuffersRange(BufferTargetARB target, UInt32 first, UInt32* buffers, IntPtr* offsets, ReadOnlySpan`1<UIntPtr> sizes);
    public void BindBuffersRange(BufferTargetARB target, UInt32 first, UInt32* buffers, ReadOnlySpan`1<IntPtr> offsets, UIntPtr* sizes);
    public void BindBuffersRange(BufferTargetARB target, UInt32 first, UInt32* buffers, ReadOnlySpan`1<IntPtr> offsets, ReadOnlySpan`1<UIntPtr> sizes);
    public void BindBuffersRange(BufferTargetARB target, UInt32 first, ReadOnlySpan`1<UInt32> buffers, IntPtr* offsets, UIntPtr* sizes);
    public void BindBuffersRange(BufferTargetARB target, UInt32 first, ReadOnlySpan`1<UInt32> buffers, IntPtr* offsets, ReadOnlySpan`1<UIntPtr> sizes);
    public void BindBuffersRange(BufferTargetARB target, UInt32 first, ReadOnlySpan`1<UInt32> buffers, ReadOnlySpan`1<IntPtr> offsets, UIntPtr* sizes);
    public void BindBuffersRange(BufferTargetARB target, UInt32 first, ReadOnlySpan`1<UInt32> buffers, ReadOnlySpan`1<IntPtr> offsets, ReadOnlySpan`1<UIntPtr> sizes);
    public void BindBuffersRange(BufferTargetARB target, UInt32 first, Buffer* buffers, IntPtr* offsets, ReadOnlySpan`1<UIntPtr> sizes);
    public void BindBuffersRange(BufferTargetARB target, UInt32 first, Buffer* buffers, ReadOnlySpan`1<IntPtr> offsets, UIntPtr* sizes);
    public void BindBuffersRange(BufferTargetARB target, UInt32 first, Buffer* buffers, ReadOnlySpan`1<IntPtr> offsets, ReadOnlySpan`1<UIntPtr> sizes);
    public void BindBuffersRange(BufferTargetARB target, UInt32 first, ReadOnlySpan`1<Buffer> buffers, IntPtr* offsets, UIntPtr* sizes);
    public void BindBuffersRange(BufferTargetARB target, UInt32 first, ReadOnlySpan`1<Buffer> buffers, IntPtr* offsets, ReadOnlySpan`1<UIntPtr> sizes);
    public void BindBuffersRange(BufferTargetARB target, UInt32 first, ReadOnlySpan`1<Buffer> buffers, ReadOnlySpan`1<IntPtr> offsets, UIntPtr* sizes);
    public void BindBuffersRange(BufferTargetARB target, UInt32 first, ReadOnlySpan`1<Buffer> buffers, ReadOnlySpan`1<IntPtr> offsets, ReadOnlySpan`1<UIntPtr> sizes);
    public void BindImageTextures(UInt32 first, ReadOnlySpan`1<UInt32> textures);
    public void BindImageTextures(UInt32 first, ReadOnlySpan`1<Texture> textures);
    public void BindSamplers(UInt32 first, ReadOnlySpan`1<UInt32> samplers);
    public void BindSamplers(UInt32 first, ReadOnlySpan`1<Sampler> samplers);
    public void BindTextures(UInt32 first, ReadOnlySpan`1<UInt32> textures);
    public void BindTextures(UInt32 first, ReadOnlySpan`1<Texture> textures);
    public void BindVertexBuffers(UInt32 first, UInt32* buffers, IntPtr* offsets, ReadOnlySpan`1<UInt32> strides);
    public void BindVertexBuffers(UInt32 first, UInt32* buffers, ReadOnlySpan`1<IntPtr> offsets, UInt32* strides);
    public void BindVertexBuffers(UInt32 first, UInt32* buffers, ReadOnlySpan`1<IntPtr> offsets, ReadOnlySpan`1<UInt32> strides);
    public void BindVertexBuffers(UInt32 first, ReadOnlySpan`1<UInt32> buffers, IntPtr* offsets, UInt32* strides);
    public void BindVertexBuffers(UInt32 first, ReadOnlySpan`1<UInt32> buffers, IntPtr* offsets, ReadOnlySpan`1<UInt32> strides);
    public void BindVertexBuffers(UInt32 first, ReadOnlySpan`1<UInt32> buffers, ReadOnlySpan`1<IntPtr> offsets, UInt32* strides);
    public void BindVertexBuffers(UInt32 first, ReadOnlySpan`1<UInt32> buffers, ReadOnlySpan`1<IntPtr> offsets, ReadOnlySpan`1<UInt32> strides);
    public void BindVertexBuffers(UInt32 first, Buffer* buffers, IntPtr* offsets, ReadOnlySpan`1<UInt32> strides);
    public void BindVertexBuffers(UInt32 first, Buffer* buffers, ReadOnlySpan`1<IntPtr> offsets, UInt32* strides);
    public void BindVertexBuffers(UInt32 first, Buffer* buffers, ReadOnlySpan`1<IntPtr> offsets, ReadOnlySpan`1<UInt32> strides);
    public void BindVertexBuffers(UInt32 first, ReadOnlySpan`1<Buffer> buffers, IntPtr* offsets, UInt32* strides);
    public void BindVertexBuffers(UInt32 first, ReadOnlySpan`1<Buffer> buffers, IntPtr* offsets, ReadOnlySpan`1<UInt32> strides);
    public void BindVertexBuffers(UInt32 first, ReadOnlySpan`1<Buffer> buffers, ReadOnlySpan`1<IntPtr> offsets, UInt32* strides);
    public void BindVertexBuffers(UInt32 first, ReadOnlySpan`1<Buffer> buffers, ReadOnlySpan`1<IntPtr> offsets, ReadOnlySpan`1<UInt32> strides);
    public void BufferStorage(GLEnum target, ReadOnlySpan`1<T0> data, UInt32 flags);
    public void BufferStorage(GLEnum target, ReadOnlySpan`1<T0> data, BufferStorageMask flags);
    public void BufferStorage(BufferStorageTarget target, ReadOnlySpan`1<T0> data, UInt32 flags);
    public void BufferStorage(BufferStorageTarget target, ReadOnlySpan`1<T0> data, BufferStorageMask flags);
    public void DebugMessageControl(GLEnum source, GLEnum type, GLEnum severity, ReadOnlySpan`1<UInt32> ids, bool enabled);
    public void DebugMessageControl(GLEnum source, GLEnum type, GLEnum severity, ReadOnlySpan`1<UInt32> ids, Boolean enabled);
    public void DebugMessageControl(GLEnum source, GLEnum type, DebugSeverity severity, ReadOnlySpan`1<UInt32> ids, bool enabled);
    public void DebugMessageControl(GLEnum source, GLEnum type, DebugSeverity severity, ReadOnlySpan`1<UInt32> ids, Boolean enabled);
    public void DebugMessageControl(GLEnum source, DebugType type, GLEnum severity, ReadOnlySpan`1<UInt32> ids, bool enabled);
    public void DebugMessageControl(GLEnum source, DebugType type, GLEnum severity, ReadOnlySpan`1<UInt32> ids, Boolean enabled);
    public void DebugMessageControl(GLEnum source, DebugType type, DebugSeverity severity, ReadOnlySpan`1<UInt32> ids, bool enabled);
    public void DebugMessageControl(GLEnum source, DebugType type, DebugSeverity severity, ReadOnlySpan`1<UInt32> ids, Boolean enabled);
    public void DebugMessageControl(DebugSource source, GLEnum type, GLEnum severity, ReadOnlySpan`1<UInt32> ids, bool enabled);
    public void DebugMessageControl(DebugSource source, GLEnum type, GLEnum severity, ReadOnlySpan`1<UInt32> ids, Boolean enabled);
    public void DebugMessageControl(DebugSource source, GLEnum type, DebugSeverity severity, ReadOnlySpan`1<UInt32> ids, bool enabled);
    public void DebugMessageControl(DebugSource source, GLEnum type, DebugSeverity severity, ReadOnlySpan`1<UInt32> ids, Boolean enabled);
    public void DebugMessageControl(DebugSource source, DebugType type, GLEnum severity, ReadOnlySpan`1<UInt32> ids, bool enabled);
    public void DebugMessageControl(DebugSource source, DebugType type, GLEnum severity, ReadOnlySpan`1<UInt32> ids, Boolean enabled);
    public void DebugMessageControl(DebugSource source, DebugType type, DebugSeverity severity, ReadOnlySpan`1<UInt32> ids, bool enabled);
    public void DebugMessageControl(DebugSource source, DebugType type, DebugSeverity severity, ReadOnlySpan`1<UInt32> ids, Boolean enabled);
    public UInt32 GetDebugMessageLog(UInt32 count, GLEnum* sources, GLEnum* types, UInt32* ids, GLEnum* severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 count, GLEnum* sources, GLEnum* types, UInt32* ids, GLEnum* severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, GLEnum* types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, GLEnum* types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, GLEnum* types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, GLEnum* types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, GLEnum* types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, GLEnum* types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, GLEnum* sources, GLEnum* types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, GLEnum* types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, GLEnum* types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, GLEnum* sources, GLEnum* types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, GLEnum* types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, GLEnum* types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, GLEnum* sources, GLEnum* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, GLEnum* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, GLEnum* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, GLEnum* sources, GLEnum* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, GLEnum* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, GLEnum* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, GLEnum* sources, Span`1<GLEnum> types, UInt32* ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, Span`1<GLEnum> types, UInt32* ids, GLEnum* severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, Span`1<GLEnum> types, UInt32* ids, GLEnum* severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, GLEnum* sources, Span`1<GLEnum> types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, Span`1<GLEnum> types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, Span`1<GLEnum> types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, GLEnum* sources, Span`1<GLEnum> types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, Span`1<GLEnum> types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, Span`1<GLEnum> types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, GLEnum* sources, Span`1<GLEnum> types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, Span`1<GLEnum> types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, Span`1<GLEnum> types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, GLEnum* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, GLEnum* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, GLEnum* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, GLEnum* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<GLEnum> sources, GLEnum* types, UInt32* ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, GLEnum* types, UInt32* ids, GLEnum* severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, GLEnum* types, UInt32* ids, GLEnum* severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<GLEnum> sources, GLEnum* types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, GLEnum* types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, GLEnum* types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<GLEnum> sources, GLEnum* types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, GLEnum* types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, GLEnum* types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<GLEnum> sources, GLEnum* types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, GLEnum* types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, GLEnum* types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<GLEnum> sources, GLEnum* types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, GLEnum* types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, GLEnum* types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<GLEnum> sources, GLEnum* types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, GLEnum* types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, GLEnum* types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<GLEnum> sources, GLEnum* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, GLEnum* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, GLEnum* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<GLEnum> sources, GLEnum* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, GLEnum* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, GLEnum* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<GLEnum> sources, Span`1<GLEnum> types, UInt32* ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, Span`1<GLEnum> types, UInt32* ids, GLEnum* severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, Span`1<GLEnum> types, UInt32* ids, GLEnum* severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<GLEnum> sources, Span`1<GLEnum> types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, Span`1<GLEnum> types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, Span`1<GLEnum> types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<GLEnum> sources, Span`1<GLEnum> types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, Span`1<GLEnum> types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, Span`1<GLEnum> types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<GLEnum> sources, Span`1<GLEnum> types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, Span`1<GLEnum> types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, Span`1<GLEnum> types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<GLEnum> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<GLEnum> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<GLEnum> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<GLEnum> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 count, GLEnum* sources, GLEnum* types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 count, GLEnum* sources, GLEnum* types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, GLEnum* types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, GLEnum* types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, GLEnum* types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, GLEnum* types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, GLEnum* types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, GLEnum* types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, GLEnum* sources, GLEnum* types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, GLEnum* types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, GLEnum* types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, GLEnum* sources, GLEnum* types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, GLEnum* types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, GLEnum* types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, GLEnum* sources, GLEnum* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, GLEnum* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, GLEnum* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, GLEnum* sources, GLEnum* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, GLEnum* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, GLEnum* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, GLEnum* sources, Span`1<GLEnum> types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, Span`1<GLEnum> types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, Span`1<GLEnum> types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, GLEnum* sources, Span`1<GLEnum> types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, Span`1<GLEnum> types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, Span`1<GLEnum> types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, GLEnum* sources, Span`1<GLEnum> types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, Span`1<GLEnum> types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, Span`1<GLEnum> types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, GLEnum* sources, Span`1<GLEnum> types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, Span`1<GLEnum> types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, Span`1<GLEnum> types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, GLEnum* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, GLEnum* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, GLEnum* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, GLEnum* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<GLEnum> sources, GLEnum* types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, GLEnum* types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, GLEnum* types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<GLEnum> sources, GLEnum* types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, GLEnum* types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, GLEnum* types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<GLEnum> sources, GLEnum* types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, GLEnum* types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, GLEnum* types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<GLEnum> sources, GLEnum* types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, GLEnum* types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, GLEnum* types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<GLEnum> sources, GLEnum* types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, GLEnum* types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, GLEnum* types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<GLEnum> sources, GLEnum* types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, GLEnum* types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, GLEnum* types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<GLEnum> sources, GLEnum* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, GLEnum* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, GLEnum* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<GLEnum> sources, GLEnum* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, GLEnum* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, GLEnum* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<GLEnum> sources, Span`1<GLEnum> types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, Span`1<GLEnum> types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, Span`1<GLEnum> types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<GLEnum> sources, Span`1<GLEnum> types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, Span`1<GLEnum> types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, Span`1<GLEnum> types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<GLEnum> sources, Span`1<GLEnum> types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, Span`1<GLEnum> types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, Span`1<GLEnum> types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<GLEnum> sources, Span`1<GLEnum> types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, Span`1<GLEnum> types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, Span`1<GLEnum> types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<GLEnum> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<GLEnum> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<GLEnum> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<GLEnum> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 count, GLEnum* sources, DebugType* types, UInt32* ids, GLEnum* severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 count, GLEnum* sources, DebugType* types, UInt32* ids, GLEnum* severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, DebugType* types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, DebugType* types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, DebugType* types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, DebugType* types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, DebugType* types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, DebugType* types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, GLEnum* sources, DebugType* types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, DebugType* types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, DebugType* types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, GLEnum* sources, DebugType* types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, DebugType* types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, DebugType* types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, GLEnum* sources, DebugType* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, DebugType* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, DebugType* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, GLEnum* sources, DebugType* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, DebugType* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, DebugType* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, GLEnum* sources, Span`1<DebugType> types, UInt32* ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, Span`1<DebugType> types, UInt32* ids, GLEnum* severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, Span`1<DebugType> types, UInt32* ids, GLEnum* severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, GLEnum* sources, Span`1<DebugType> types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, Span`1<DebugType> types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, Span`1<DebugType> types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, GLEnum* sources, Span`1<DebugType> types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, Span`1<DebugType> types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, Span`1<DebugType> types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, GLEnum* sources, Span`1<DebugType> types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, Span`1<DebugType> types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, Span`1<DebugType> types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, GLEnum* sources, Span`1<DebugType> types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, Span`1<DebugType> types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, Span`1<DebugType> types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, GLEnum* sources, Span`1<DebugType> types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, Span`1<DebugType> types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, Span`1<DebugType> types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, GLEnum* sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, GLEnum* sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<GLEnum> sources, DebugType* types, UInt32* ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, DebugType* types, UInt32* ids, GLEnum* severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, DebugType* types, UInt32* ids, GLEnum* severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<GLEnum> sources, DebugType* types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, DebugType* types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, DebugType* types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<GLEnum> sources, DebugType* types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, DebugType* types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, DebugType* types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<GLEnum> sources, DebugType* types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, DebugType* types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, DebugType* types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<GLEnum> sources, DebugType* types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, DebugType* types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, DebugType* types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<GLEnum> sources, DebugType* types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, DebugType* types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, DebugType* types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<GLEnum> sources, DebugType* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, DebugType* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, DebugType* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<GLEnum> sources, DebugType* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, DebugType* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, DebugType* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<GLEnum> sources, Span`1<DebugType> types, UInt32* ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, Span`1<DebugType> types, UInt32* ids, GLEnum* severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, Span`1<DebugType> types, UInt32* ids, GLEnum* severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<GLEnum> sources, Span`1<DebugType> types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, Span`1<DebugType> types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, Span`1<DebugType> types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<GLEnum> sources, Span`1<DebugType> types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, Span`1<DebugType> types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, Span`1<DebugType> types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<GLEnum> sources, Span`1<DebugType> types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, Span`1<DebugType> types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, Span`1<DebugType> types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<GLEnum> sources, Span`1<DebugType> types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, Span`1<DebugType> types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, Span`1<DebugType> types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<GLEnum> sources, Span`1<DebugType> types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, Span`1<DebugType> types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, Span`1<DebugType> types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<GLEnum> sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<GLEnum> sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 count, GLEnum* sources, DebugType* types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 count, GLEnum* sources, DebugType* types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, DebugType* types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, DebugType* types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, DebugType* types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, DebugType* types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, DebugType* types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, DebugType* types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, GLEnum* sources, DebugType* types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, DebugType* types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, DebugType* types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, GLEnum* sources, DebugType* types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, DebugType* types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, DebugType* types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, GLEnum* sources, DebugType* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, DebugType* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, DebugType* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, GLEnum* sources, DebugType* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, DebugType* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, DebugType* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, GLEnum* sources, Span`1<DebugType> types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, Span`1<DebugType> types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, Span`1<DebugType> types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, GLEnum* sources, Span`1<DebugType> types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, Span`1<DebugType> types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, Span`1<DebugType> types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, GLEnum* sources, Span`1<DebugType> types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, Span`1<DebugType> types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, Span`1<DebugType> types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, GLEnum* sources, Span`1<DebugType> types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, Span`1<DebugType> types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, Span`1<DebugType> types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, GLEnum* sources, Span`1<DebugType> types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, Span`1<DebugType> types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, Span`1<DebugType> types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, GLEnum* sources, Span`1<DebugType> types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, Span`1<DebugType> types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, Span`1<DebugType> types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, GLEnum* sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, GLEnum* sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(GLEnum* sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<GLEnum> sources, DebugType* types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, DebugType* types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, DebugType* types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<GLEnum> sources, DebugType* types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, DebugType* types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, DebugType* types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<GLEnum> sources, DebugType* types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, DebugType* types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, DebugType* types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<GLEnum> sources, DebugType* types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, DebugType* types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, DebugType* types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<GLEnum> sources, DebugType* types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, DebugType* types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, DebugType* types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<GLEnum> sources, DebugType* types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, DebugType* types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, DebugType* types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<GLEnum> sources, DebugType* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, DebugType* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, DebugType* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<GLEnum> sources, DebugType* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, DebugType* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, DebugType* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<GLEnum> sources, Span`1<DebugType> types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, Span`1<DebugType> types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, Span`1<DebugType> types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<GLEnum> sources, Span`1<DebugType> types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, Span`1<DebugType> types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, Span`1<DebugType> types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<GLEnum> sources, Span`1<DebugType> types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, Span`1<DebugType> types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, Span`1<DebugType> types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<GLEnum> sources, Span`1<DebugType> types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, Span`1<DebugType> types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, Span`1<DebugType> types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<GLEnum> sources, Span`1<DebugType> types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, Span`1<DebugType> types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, Span`1<DebugType> types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<GLEnum> sources, Span`1<DebugType> types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, Span`1<DebugType> types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, Span`1<DebugType> types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<GLEnum> sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<GLEnum> sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<GLEnum> sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 count, DebugSource* sources, GLEnum* types, UInt32* ids, GLEnum* severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 count, DebugSource* sources, GLEnum* types, UInt32* ids, GLEnum* severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, GLEnum* types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, GLEnum* types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, GLEnum* types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, GLEnum* types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, GLEnum* types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, GLEnum* types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, DebugSource* sources, GLEnum* types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, GLEnum* types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, GLEnum* types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, DebugSource* sources, GLEnum* types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, GLEnum* types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, GLEnum* types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, DebugSource* sources, GLEnum* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, GLEnum* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, GLEnum* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, DebugSource* sources, GLEnum* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, GLEnum* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, GLEnum* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, DebugSource* sources, Span`1<GLEnum> types, UInt32* ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, Span`1<GLEnum> types, UInt32* ids, GLEnum* severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, Span`1<GLEnum> types, UInt32* ids, GLEnum* severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, DebugSource* sources, Span`1<GLEnum> types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, Span`1<GLEnum> types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, Span`1<GLEnum> types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, DebugSource* sources, Span`1<GLEnum> types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, Span`1<GLEnum> types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, Span`1<GLEnum> types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, DebugSource* sources, Span`1<GLEnum> types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, Span`1<GLEnum> types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, Span`1<GLEnum> types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, DebugSource* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, DebugSource* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, DebugSource* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, DebugSource* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<DebugSource> sources, GLEnum* types, UInt32* ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, GLEnum* types, UInt32* ids, GLEnum* severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, GLEnum* types, UInt32* ids, GLEnum* severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<DebugSource> sources, GLEnum* types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, GLEnum* types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, GLEnum* types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<DebugSource> sources, GLEnum* types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, GLEnum* types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, GLEnum* types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<DebugSource> sources, GLEnum* types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, GLEnum* types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, GLEnum* types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<DebugSource> sources, GLEnum* types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, GLEnum* types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, GLEnum* types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<DebugSource> sources, GLEnum* types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, GLEnum* types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, GLEnum* types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<DebugSource> sources, GLEnum* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, GLEnum* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, GLEnum* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<DebugSource> sources, GLEnum* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, GLEnum* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, GLEnum* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<DebugSource> sources, Span`1<GLEnum> types, UInt32* ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, Span`1<GLEnum> types, UInt32* ids, GLEnum* severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, Span`1<GLEnum> types, UInt32* ids, GLEnum* severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<DebugSource> sources, Span`1<GLEnum> types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, Span`1<GLEnum> types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, Span`1<GLEnum> types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<DebugSource> sources, Span`1<GLEnum> types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, Span`1<GLEnum> types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, Span`1<GLEnum> types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<DebugSource> sources, Span`1<GLEnum> types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, Span`1<GLEnum> types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, Span`1<GLEnum> types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<DebugSource> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<DebugSource> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<DebugSource> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<DebugSource> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 count, DebugSource* sources, GLEnum* types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 count, DebugSource* sources, GLEnum* types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, GLEnum* types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, GLEnum* types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, GLEnum* types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, GLEnum* types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, GLEnum* types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, GLEnum* types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, DebugSource* sources, GLEnum* types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, GLEnum* types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, GLEnum* types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, DebugSource* sources, GLEnum* types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, GLEnum* types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, GLEnum* types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, DebugSource* sources, GLEnum* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, GLEnum* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, GLEnum* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, DebugSource* sources, GLEnum* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, GLEnum* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, GLEnum* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, DebugSource* sources, Span`1<GLEnum> types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, Span`1<GLEnum> types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, Span`1<GLEnum> types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, DebugSource* sources, Span`1<GLEnum> types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, Span`1<GLEnum> types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, Span`1<GLEnum> types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, DebugSource* sources, Span`1<GLEnum> types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, Span`1<GLEnum> types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, Span`1<GLEnum> types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, DebugSource* sources, Span`1<GLEnum> types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, Span`1<GLEnum> types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, Span`1<GLEnum> types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, DebugSource* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, DebugSource* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, DebugSource* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, DebugSource* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<DebugSource> sources, GLEnum* types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, GLEnum* types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, GLEnum* types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<DebugSource> sources, GLEnum* types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, GLEnum* types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, GLEnum* types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<DebugSource> sources, GLEnum* types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, GLEnum* types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, GLEnum* types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<DebugSource> sources, GLEnum* types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, GLEnum* types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, GLEnum* types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<DebugSource> sources, GLEnum* types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, GLEnum* types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, GLEnum* types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<DebugSource> sources, GLEnum* types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, GLEnum* types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, GLEnum* types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<DebugSource> sources, GLEnum* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, GLEnum* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, GLEnum* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<DebugSource> sources, GLEnum* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, GLEnum* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, GLEnum* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<DebugSource> sources, Span`1<GLEnum> types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, Span`1<GLEnum> types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, Span`1<GLEnum> types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<DebugSource> sources, Span`1<GLEnum> types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, Span`1<GLEnum> types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, Span`1<GLEnum> types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<DebugSource> sources, Span`1<GLEnum> types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, Span`1<GLEnum> types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, Span`1<GLEnum> types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<DebugSource> sources, Span`1<GLEnum> types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, Span`1<GLEnum> types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, Span`1<GLEnum> types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<DebugSource> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<DebugSource> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<DebugSource> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<DebugSource> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 count, DebugSource* sources, DebugType* types, UInt32* ids, GLEnum* severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 count, DebugSource* sources, DebugType* types, UInt32* ids, GLEnum* severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, DebugType* types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, DebugType* types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, DebugType* types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, DebugType* types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, DebugType* types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, DebugType* types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, DebugSource* sources, DebugType* types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, DebugType* types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, DebugType* types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, DebugSource* sources, DebugType* types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, DebugType* types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, DebugType* types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, DebugSource* sources, DebugType* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, DebugType* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, DebugType* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, DebugSource* sources, DebugType* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, DebugType* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, DebugType* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, DebugSource* sources, Span`1<DebugType> types, UInt32* ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, Span`1<DebugType> types, UInt32* ids, GLEnum* severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, Span`1<DebugType> types, UInt32* ids, GLEnum* severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, DebugSource* sources, Span`1<DebugType> types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, Span`1<DebugType> types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, Span`1<DebugType> types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, DebugSource* sources, Span`1<DebugType> types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, Span`1<DebugType> types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, Span`1<DebugType> types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, DebugSource* sources, Span`1<DebugType> types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, Span`1<DebugType> types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, Span`1<DebugType> types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, DebugSource* sources, Span`1<DebugType> types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, Span`1<DebugType> types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, Span`1<DebugType> types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, DebugSource* sources, Span`1<DebugType> types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, Span`1<DebugType> types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, Span`1<DebugType> types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, DebugSource* sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, DebugSource* sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<DebugSource> sources, DebugType* types, UInt32* ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, DebugType* types, UInt32* ids, GLEnum* severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, DebugType* types, UInt32* ids, GLEnum* severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<DebugSource> sources, DebugType* types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, DebugType* types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, DebugType* types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<DebugSource> sources, DebugType* types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, DebugType* types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, DebugType* types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<DebugSource> sources, DebugType* types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, DebugType* types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, DebugType* types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<DebugSource> sources, DebugType* types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, DebugType* types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, DebugType* types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<DebugSource> sources, DebugType* types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, DebugType* types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, DebugType* types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<DebugSource> sources, DebugType* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, DebugType* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, DebugType* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<DebugSource> sources, DebugType* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, DebugType* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, DebugType* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<DebugSource> sources, Span`1<DebugType> types, UInt32* ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, Span`1<DebugType> types, UInt32* ids, GLEnum* severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, Span`1<DebugType> types, UInt32* ids, GLEnum* severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<DebugSource> sources, Span`1<DebugType> types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, Span`1<DebugType> types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, Span`1<DebugType> types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<DebugSource> sources, Span`1<DebugType> types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, Span`1<DebugType> types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, Span`1<DebugType> types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<DebugSource> sources, Span`1<DebugType> types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, Span`1<DebugType> types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, Span`1<DebugType> types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<DebugSource> sources, Span`1<DebugType> types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, Span`1<DebugType> types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, Span`1<DebugType> types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<DebugSource> sources, Span`1<DebugType> types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, Span`1<DebugType> types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, Span`1<DebugType> types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<DebugSource> sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<DebugSource> sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 count, DebugSource* sources, DebugType* types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 count, DebugSource* sources, DebugType* types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, DebugType* types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, DebugType* types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, DebugType* types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, DebugType* types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, DebugType* types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, DebugType* types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, DebugSource* sources, DebugType* types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, DebugType* types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, DebugType* types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, DebugSource* sources, DebugType* types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, DebugType* types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, DebugType* types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, DebugSource* sources, DebugType* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, DebugType* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, DebugType* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, DebugSource* sources, DebugType* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, DebugType* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, DebugType* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, DebugSource* sources, Span`1<DebugType> types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, Span`1<DebugType> types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, Span`1<DebugType> types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, DebugSource* sources, Span`1<DebugType> types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, Span`1<DebugType> types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, Span`1<DebugType> types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, DebugSource* sources, Span`1<DebugType> types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, Span`1<DebugType> types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, Span`1<DebugType> types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, DebugSource* sources, Span`1<DebugType> types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, Span`1<DebugType> types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, Span`1<DebugType> types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, DebugSource* sources, Span`1<DebugType> types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, Span`1<DebugType> types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, Span`1<DebugType> types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, DebugSource* sources, Span`1<DebugType> types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, Span`1<DebugType> types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, Span`1<DebugType> types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, DebugSource* sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, DebugSource* sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(DebugSource* sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<DebugSource> sources, DebugType* types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, DebugType* types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, DebugType* types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<DebugSource> sources, DebugType* types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, DebugType* types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, DebugType* types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<DebugSource> sources, DebugType* types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, DebugType* types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, DebugType* types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<DebugSource> sources, DebugType* types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, DebugType* types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, DebugType* types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<DebugSource> sources, DebugType* types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, DebugType* types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, DebugType* types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<DebugSource> sources, DebugType* types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, DebugType* types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, DebugType* types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<DebugSource> sources, DebugType* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, DebugType* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, DebugType* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<DebugSource> sources, DebugType* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, DebugType* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, DebugType* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<DebugSource> sources, Span`1<DebugType> types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, Span`1<DebugType> types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, Span`1<DebugType> types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<DebugSource> sources, Span`1<DebugType> types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, Span`1<DebugType> types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, Span`1<DebugType> types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<DebugSource> sources, Span`1<DebugType> types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, Span`1<DebugType> types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, Span`1<DebugType> types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<DebugSource> sources, Span`1<DebugType> types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, Span`1<DebugType> types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, Span`1<DebugType> types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<DebugSource> sources, Span`1<DebugType> types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, Span`1<DebugType> types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, Span`1<DebugType> types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<DebugSource> sources, Span`1<DebugType> types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, Span`1<DebugType> types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, Span`1<DebugType> types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<DebugSource> sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<string> messageLog);
    public UInt32 GetDebugMessageLog(UInt32 bufSize, Span`1<DebugSource> sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Byte* messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    public UInt32 GetDebugMessageLog(Span`1<DebugSource> sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    public void GetInternalformat(GLEnum target, GLEnum internalformat, GLEnum pname, Span`1<long> params);
    public void GetInternalformat(GLEnum target, GLEnum internalformat, InternalFormatPName pname, Span`1<long> params);
    public void GetInternalformat(GLEnum target, InternalFormat internalformat, GLEnum pname, Span`1<long> params);
    public void GetInternalformat(GLEnum target, InternalFormat internalformat, InternalFormatPName pname, Span`1<long> params);
    public void GetInternalformat(TextureTarget target, GLEnum internalformat, GLEnum pname, Span`1<long> params);
    public void GetInternalformat(TextureTarget target, GLEnum internalformat, InternalFormatPName pname, Span`1<long> params);
    public void GetInternalformat(TextureTarget target, InternalFormat internalformat, GLEnum pname, Span`1<long> params);
    public void GetInternalformat(TextureTarget target, InternalFormat internalformat, InternalFormatPName pname, Span`1<long> params);
    public void GetObjectLabel(GLEnum identifier, UInt32 name, UInt32* length, Span`1<byte> label);
    public void GetObjectLabel(GLEnum identifier, UInt32 name, UInt32* length, Span`1<string> label);
    public void GetObjectLabel(GLEnum identifier, UInt32 name, UInt32& length, Span`1<byte> label);
    public void GetObjectLabel(GLEnum identifier, UInt32 name, UInt32& length, Span`1<string> label);
    public void GetObjectLabel(ObjectIdentifier identifier, UInt32 name, UInt32* length, Span`1<byte> label);
    public void GetObjectLabel(ObjectIdentifier identifier, UInt32 name, UInt32* length, Span`1<string> label);
    public void GetObjectLabel(ObjectIdentifier identifier, UInt32 name, UInt32& length, Span`1<byte> label);
    public void GetObjectLabel(ObjectIdentifier identifier, UInt32 name, UInt32& length, Span`1<string> label);
    public void GetObjectPtrLabel(Void* ptr, UInt32* length, Span`1<byte> label);
    public void GetObjectPtrLabel(Void* ptr, UInt32* length, Span`1<string> label);
    public void GetObjectPtrLabel(Void* ptr, UInt32& length, Span`1<byte> label);
    public void GetObjectPtrLabel(Void* ptr, UInt32& length, Span`1<string> label);
    public void GetObjectPtrLabel(T0& ptr, UInt32* length, Span`1<byte> label);
    public void GetObjectPtrLabel(T0& ptr, UInt32* length, Span`1<string> label);
    public void GetObjectPtrLabel(T0& ptr, UInt32& length, Span`1<byte> label);
    public void GetObjectPtrLabel(T0& ptr, UInt32& length, Span`1<string> label);
    public Void* GetPointer(GLEnum pname);
    public void GetProgramResource(UInt32 program, GLEnum programInterface, UInt32 index, UInt32 propCount, GLEnum* props, UInt32* length, Span`1<int> params);
    public void GetProgramResource(UInt32 program, GLEnum programInterface, UInt32 index, UInt32 propCount, GLEnum* props, UInt32& length, Span`1<int> params);
    public void GetProgramResource(UInt32 program, GLEnum programInterface, UInt32 index, ReadOnlySpan`1<GLEnum> props, UInt32 count, UInt32* length, Int32* params);
    public void GetProgramResource(UInt32 program, GLEnum programInterface, UInt32 index, ReadOnlySpan`1<GLEnum> props, UInt32* length, Span`1<int> params);
    public void GetProgramResource(UInt32 program, GLEnum programInterface, UInt32 index, ReadOnlySpan`1<GLEnum> props, UInt32 count, UInt32& length, Int32* params);
    public void GetProgramResource(UInt32 program, GLEnum programInterface, UInt32 index, ReadOnlySpan`1<GLEnum> props, UInt32& length, Span`1<int> params);
    public void GetProgramResource(UInt32 program, GLEnum programInterface, UInt32 index, UInt32 propCount, ProgramResourceProperty* props, UInt32* length, Span`1<int> params);
    public void GetProgramResource(UInt32 program, GLEnum programInterface, UInt32 index, UInt32 propCount, ProgramResourceProperty* props, UInt32& length, Span`1<int> params);
    public void GetProgramResource(UInt32 program, GLEnum programInterface, UInt32 index, ReadOnlySpan`1<ProgramResourceProperty> props, UInt32 count, UInt32* length, Int32* params);
    public void GetProgramResource(UInt32 program, GLEnum programInterface, UInt32 index, ReadOnlySpan`1<ProgramResourceProperty> props, UInt32* length, Span`1<int> params);
    public void GetProgramResource(UInt32 program, GLEnum programInterface, UInt32 index, ReadOnlySpan`1<ProgramResourceProperty> props, UInt32 count, UInt32& length, Int32* params);
    public void GetProgramResource(UInt32 program, GLEnum programInterface, UInt32 index, ReadOnlySpan`1<ProgramResourceProperty> props, UInt32& length, Span`1<int> params);
    public void GetProgramResource(UInt32 program, ProgramInterface programInterface, UInt32 index, UInt32 propCount, GLEnum* props, UInt32* length, Span`1<int> params);
    public void GetProgramResource(UInt32 program, ProgramInterface programInterface, UInt32 index, UInt32 propCount, GLEnum* props, UInt32& length, Span`1<int> params);
    public void GetProgramResource(UInt32 program, ProgramInterface programInterface, UInt32 index, ReadOnlySpan`1<GLEnum> props, UInt32 count, UInt32* length, Int32* params);
    public void GetProgramResource(UInt32 program, ProgramInterface programInterface, UInt32 index, ReadOnlySpan`1<GLEnum> props, UInt32* length, Span`1<int> params);
    public void GetProgramResource(UInt32 program, ProgramInterface programInterface, UInt32 index, ReadOnlySpan`1<GLEnum> props, UInt32 count, UInt32& length, Int32* params);
    public void GetProgramResource(UInt32 program, ProgramInterface programInterface, UInt32 index, ReadOnlySpan`1<GLEnum> props, UInt32& length, Span`1<int> params);
    public void GetProgramResource(UInt32 program, ProgramInterface programInterface, UInt32 index, UInt32 propCount, ProgramResourceProperty* props, UInt32* length, Span`1<int> params);
    public void GetProgramResource(UInt32 program, ProgramInterface programInterface, UInt32 index, UInt32 propCount, ProgramResourceProperty* props, UInt32& length, Span`1<int> params);
    public void GetProgramResource(UInt32 program, ProgramInterface programInterface, UInt32 index, ReadOnlySpan`1<ProgramResourceProperty> props, UInt32 count, UInt32* length, Int32* params);
    public void GetProgramResource(UInt32 program, ProgramInterface programInterface, UInt32 index, ReadOnlySpan`1<ProgramResourceProperty> props, UInt32* length, Span`1<int> params);
    public void GetProgramResource(UInt32 program, ProgramInterface programInterface, UInt32 index, ReadOnlySpan`1<ProgramResourceProperty> props, UInt32 count, UInt32& length, Int32* params);
    public void GetProgramResource(UInt32 program, ProgramInterface programInterface, UInt32 index, ReadOnlySpan`1<ProgramResourceProperty> props, UInt32& length, Span`1<int> params);
    public void GetProgramResourceName(UInt32 program, GLEnum programInterface, UInt32 index, UInt32* length, Span`1<byte> name);
    public void GetProgramResourceName(UInt32 program, GLEnum programInterface, UInt32 index, UInt32* length, Span`1<string> name);
    public void GetProgramResourceName(UInt32 program, GLEnum programInterface, UInt32 index, UInt32& length, Span`1<byte> name);
    public void GetProgramResourceName(UInt32 program, GLEnum programInterface, UInt32 index, UInt32& length, Span`1<string> name);
    public void GetProgramResourceName(UInt32 program, ProgramInterface programInterface, UInt32 index, UInt32* length, Span`1<byte> name);
    public void GetProgramResourceName(UInt32 program, ProgramInterface programInterface, UInt32 index, UInt32* length, Span`1<string> name);
    public void GetProgramResourceName(UInt32 program, ProgramInterface programInterface, UInt32 index, UInt32& length, Span`1<byte> name);
    public void GetProgramResourceName(UInt32 program, ProgramInterface programInterface, UInt32 index, UInt32& length, Span`1<string> name);
    public void InvalidateFramebuffer(GLEnum target, ReadOnlySpan`1<GLEnum> attachments);
    public void InvalidateFramebuffer(GLEnum target, ReadOnlySpan`1<InvalidateFramebufferAttachment> attachments);
    public void InvalidateFramebuffer(FramebufferTarget target, ReadOnlySpan`1<GLEnum> attachments);
    public void InvalidateFramebuffer(FramebufferTarget target, ReadOnlySpan`1<InvalidateFramebufferAttachment> attachments);
    public void InvalidateSubFramebuffer(GLEnum target, ReadOnlySpan`1<GLEnum> attachments, int x, int y, UInt32 width, UInt32 height);
    public void InvalidateSubFramebuffer(GLEnum target, ReadOnlySpan`1<InvalidateFramebufferAttachment> attachments, int x, int y, UInt32 width, UInt32 height);
    public void InvalidateSubFramebuffer(FramebufferTarget target, ReadOnlySpan`1<GLEnum> attachments, int x, int y, UInt32 width, UInt32 height);
    public void InvalidateSubFramebuffer(FramebufferTarget target, ReadOnlySpan`1<InvalidateFramebufferAttachment> attachments, int x, int y, UInt32 width, UInt32 height);
    public void DrawElementsInstancedBaseInstance(GLEnum mode, GLEnum type, ReadOnlySpan`1<T0> indices, UInt32 instancecount, UInt32 baseinstance);
    public void DrawElementsInstancedBaseInstance(GLEnum mode, PrimitiveType type, ReadOnlySpan`1<T0> indices, UInt32 instancecount, UInt32 baseinstance);
    public void DrawElementsInstancedBaseInstance(PrimitiveType mode, GLEnum type, ReadOnlySpan`1<T0> indices, UInt32 instancecount, UInt32 baseinstance);
    public void DrawElementsInstancedBaseInstance(PrimitiveType mode, PrimitiveType type, ReadOnlySpan`1<T0> indices, UInt32 instancecount, UInt32 baseinstance);
    public void DrawElementsInstancedBaseVertexBaseInstance(GLEnum mode, GLEnum type, ReadOnlySpan`1<T0> indices, UInt32 instancecount, int basevertex, UInt32 baseinstance);
    public void DrawElementsInstancedBaseVertexBaseInstance(GLEnum mode, DrawElementsType type, ReadOnlySpan`1<T0> indices, UInt32 instancecount, int basevertex, UInt32 baseinstance);
    public void DrawElementsInstancedBaseVertexBaseInstance(PrimitiveType mode, GLEnum type, ReadOnlySpan`1<T0> indices, UInt32 instancecount, int basevertex, UInt32 baseinstance);
    public void DrawElementsInstancedBaseVertexBaseInstance(PrimitiveType mode, DrawElementsType type, ReadOnlySpan`1<T0> indices, UInt32 instancecount, int basevertex, UInt32 baseinstance);
    public void GetInternalformat(GLEnum target, GLEnum internalformat, GLEnum pname, Span`1<int> params);
    public void GetInternalformat(GLEnum target, GLEnum internalformat, InternalFormatPName pname, Span`1<int> params);
    public void GetInternalformat(GLEnum target, InternalFormat internalformat, GLEnum pname, Span`1<int> params);
    public void GetInternalformat(GLEnum target, InternalFormat internalformat, InternalFormatPName pname, Span`1<int> params);
    public void GetInternalformat(TextureTarget target, GLEnum internalformat, GLEnum pname, Span`1<int> params);
    public void GetInternalformat(TextureTarget target, GLEnum internalformat, InternalFormatPName pname, Span`1<int> params);
    public void GetInternalformat(TextureTarget target, InternalFormat internalformat, GLEnum pname, Span`1<int> params);
    public void GetInternalformat(TextureTarget target, InternalFormat internalformat, InternalFormatPName pname, Span`1<int> params);
    public UInt32 CreateShaderProgram(GLEnum type, UInt32 count, String[] stringsSa);
    public UInt32 CreateShaderProgram(ShaderType type, UInt32 count, String[] stringsSa);
    public void DeleteProgramPipeline(UInt32 pipelines);
    public void DeleteProgramPipelines(ReadOnlySpan`1<UInt32> pipelines);
    public void DeleteProgramPipelines(ReadOnlySpan`1<ProgramPipeline> pipelines);
    public UInt32 GenProgramPipeline();
    public void GenProgramPipelines(Span`1<UInt32> pipelines);
    public void GenProgramPipelines(Span`1<ProgramPipeline> pipelines);
    public void GetProgramBinary(UInt32 program, UInt32* length, GLEnum* binaryFormat, Span`1<T0> binary);
    public void GetProgramBinary(UInt32 program, UInt32* length, GLEnum& binaryFormat, Span`1<T0> binary);
    public void GetProgramBinary(UInt32 program, UInt32& length, GLEnum* binaryFormat, Span`1<T0> binary);
    public void GetProgramBinary(UInt32 program, UInt32& length, GLEnum& binaryFormat, Span`1<T0> binary);
    public void GetProgramPipelineInfoLog(UInt32 pipeline, UInt32* length, Span`1<byte> infoLog);
    public void GetProgramPipelineInfoLog(UInt32 pipeline, UInt32* length, Span`1<string> infoLog);
    public void GetProgramPipelineInfoLog(UInt32 pipeline, UInt32& length, Span`1<byte> infoLog);
    public void GetProgramPipelineInfoLog(UInt32 pipeline, UInt32& length, Span`1<string> infoLog);
    public void ProgramBinary(UInt32 program, GLEnum binaryFormat, ReadOnlySpan`1<T0> binary);
    public void ProgramUniform1(UInt32 program, int location, ReadOnlySpan`1<int> value);
    public void ProgramUniform1(UInt32 program, int location, ReadOnlySpan`1<float> value);
    public void ProgramUniform1(UInt32 program, int location, ReadOnlySpan`1<double> value);
    public void ProgramUniform1(UInt32 program, int location, ReadOnlySpan`1<UInt32> value);
    public void ProgramUniform2(UInt32 program, int location, ReadOnlySpan`1<int> value);
    public void ProgramUniform2(UInt32 program, int location, ReadOnlySpan`1<float> value);
    public void ProgramUniform2(UInt32 program, int location, ReadOnlySpan`1<double> value);
    public void ProgramUniform2(UInt32 program, int location, ReadOnlySpan`1<UInt32> value);
    public void ProgramUniform3(UInt32 program, int location, ReadOnlySpan`1<int> value);
    public void ProgramUniform3(UInt32 program, int location, ReadOnlySpan`1<float> value);
    public void ProgramUniform3(UInt32 program, int location, ReadOnlySpan`1<double> value);
    public void ProgramUniform3(UInt32 program, int location, ReadOnlySpan`1<UInt32> value);
    public void ProgramUniform4(UInt32 program, int location, ReadOnlySpan`1<int> value);
    public void ProgramUniform4(UInt32 program, int location, ReadOnlySpan`1<float> value);
    public void ProgramUniform4(UInt32 program, int location, ReadOnlySpan`1<double> value);
    public void ProgramUniform4(UInt32 program, int location, ReadOnlySpan`1<UInt32> value);
    public void ProgramUniformMatrix2(UInt32 program, int location, bool transpose, ReadOnlySpan`1<float> value);
    public void ProgramUniformMatrix2(UInt32 program, int location, Boolean transpose, ReadOnlySpan`1<float> value);
    public void ProgramUniformMatrix2(UInt32 program, int location, bool transpose, ReadOnlySpan`1<double> value);
    public void ProgramUniformMatrix2(UInt32 program, int location, Boolean transpose, ReadOnlySpan`1<double> value);
    public void ProgramUniformMatrix2x3(UInt32 program, int location, bool transpose, ReadOnlySpan`1<float> value);
    public void ProgramUniformMatrix2x3(UInt32 program, int location, Boolean transpose, ReadOnlySpan`1<float> value);
    public void ProgramUniformMatrix2x3(UInt32 program, int location, bool transpose, ReadOnlySpan`1<double> value);
    public void ProgramUniformMatrix2x3(UInt32 program, int location, Boolean transpose, ReadOnlySpan`1<double> value);
    public void ProgramUniformMatrix2x4(UInt32 program, int location, bool transpose, ReadOnlySpan`1<float> value);
    public void ProgramUniformMatrix2x4(UInt32 program, int location, Boolean transpose, ReadOnlySpan`1<float> value);
    public void ProgramUniformMatrix2x4(UInt32 program, int location, bool transpose, ReadOnlySpan`1<double> value);
    public void ProgramUniformMatrix2x4(UInt32 program, int location, Boolean transpose, ReadOnlySpan`1<double> value);
    public void ProgramUniformMatrix3(UInt32 program, int location, bool transpose, ReadOnlySpan`1<float> value);
    public void ProgramUniformMatrix3(UInt32 program, int location, Boolean transpose, ReadOnlySpan`1<float> value);
    public void ProgramUniformMatrix3(UInt32 program, int location, bool transpose, ReadOnlySpan`1<double> value);
    public void ProgramUniformMatrix3(UInt32 program, int location, Boolean transpose, ReadOnlySpan`1<double> value);
    public void ProgramUniformMatrix3x2(UInt32 program, int location, bool transpose, ReadOnlySpan`1<float> value);
    public void ProgramUniformMatrix3x2(UInt32 program, int location, Boolean transpose, ReadOnlySpan`1<float> value);
    public void ProgramUniformMatrix3x2(UInt32 program, int location, bool transpose, ReadOnlySpan`1<double> value);
    public void ProgramUniformMatrix3x2(UInt32 program, int location, Boolean transpose, ReadOnlySpan`1<double> value);
    public void ProgramUniformMatrix3x4(UInt32 program, int location, bool transpose, ReadOnlySpan`1<float> value);
    public void ProgramUniformMatrix3x4(UInt32 program, int location, Boolean transpose, ReadOnlySpan`1<float> value);
    public void ProgramUniformMatrix3x4(UInt32 program, int location, bool transpose, ReadOnlySpan`1<double> value);
    public void ProgramUniformMatrix3x4(UInt32 program, int location, Boolean transpose, ReadOnlySpan`1<double> value);
    public void ProgramUniformMatrix4(UInt32 program, int location, bool transpose, ReadOnlySpan`1<float> value);
    public void ProgramUniformMatrix4(UInt32 program, int location, Boolean transpose, ReadOnlySpan`1<float> value);
    public void ProgramUniformMatrix4(UInt32 program, int location, bool transpose, ReadOnlySpan`1<double> value);
    public void ProgramUniformMatrix4(UInt32 program, int location, Boolean transpose, ReadOnlySpan`1<double> value);
    public void ProgramUniformMatrix4x2(UInt32 program, int location, bool transpose, ReadOnlySpan`1<float> value);
    public void ProgramUniformMatrix4x2(UInt32 program, int location, Boolean transpose, ReadOnlySpan`1<float> value);
    public void ProgramUniformMatrix4x2(UInt32 program, int location, bool transpose, ReadOnlySpan`1<double> value);
    public void ProgramUniformMatrix4x2(UInt32 program, int location, Boolean transpose, ReadOnlySpan`1<double> value);
    public void ProgramUniformMatrix4x3(UInt32 program, int location, bool transpose, ReadOnlySpan`1<float> value);
    public void ProgramUniformMatrix4x3(UInt32 program, int location, Boolean transpose, ReadOnlySpan`1<float> value);
    public void ProgramUniformMatrix4x3(UInt32 program, int location, bool transpose, ReadOnlySpan`1<double> value);
    public void ProgramUniformMatrix4x3(UInt32 program, int location, Boolean transpose, ReadOnlySpan`1<double> value);
    public void ShaderBinary(UInt32 count, UInt32* shaders, GLEnum binaryFormat, ReadOnlySpan`1<T0> binary);
    public void ShaderBinary(ReadOnlySpan`1<UInt32> shaders, GLEnum binaryFormat, Void* binary, UInt32 length);
    public void ShaderBinary(ReadOnlySpan`1<UInt32> shaders, GLEnum binaryFormat, ReadOnlySpan`1<T0> binary);
    public void ShaderBinary(UInt32 count, UInt32* shaders, ShaderBinaryFormat binaryFormat, ReadOnlySpan`1<T0> binary);
    public void ShaderBinary(ReadOnlySpan`1<UInt32> shaders, ShaderBinaryFormat binaryFormat, Void* binary, UInt32 length);
    public void ShaderBinary(ReadOnlySpan`1<UInt32> shaders, ShaderBinaryFormat binaryFormat, ReadOnlySpan`1<T0> binary);
    public void ShaderBinary(UInt32 count, Shader* shaders, GLEnum binaryFormat, ReadOnlySpan`1<T0> binary);
    public void ShaderBinary(ReadOnlySpan`1<Shader> shaders, GLEnum binaryFormat, Void* binary, UInt32 length);
    public void ShaderBinary(ReadOnlySpan`1<Shader> shaders, GLEnum binaryFormat, ReadOnlySpan`1<T0> binary);
    public void ShaderBinary(UInt32 count, Shader* shaders, ShaderBinaryFormat binaryFormat, ReadOnlySpan`1<T0> binary);
    public void ShaderBinary(ReadOnlySpan`1<Shader> shaders, ShaderBinaryFormat binaryFormat, Void* binary, UInt32 length);
    public void ShaderBinary(ReadOnlySpan`1<Shader> shaders, ShaderBinaryFormat binaryFormat, ReadOnlySpan`1<T0> binary);
    public void DeleteTransformFeedback(UInt32 ids);
    public void DeleteTransformFeedbacks(ReadOnlySpan`1<UInt32> ids);
    public void DeleteTransformFeedbacks(ReadOnlySpan`1<TransformFeedback> ids);
    public UInt32 GenTransformFeedback();
    public void GenTransformFeedbacks(Span`1<UInt32> ids);
    public void GenTransformFeedbacks(Span`1<TransformFeedback> ids);
    public void GetActiveSubroutineName(UInt32 program, GLEnum shadertype, UInt32 index, UInt32* length, Span`1<byte> name);
    public void GetActiveSubroutineName(UInt32 program, GLEnum shadertype, UInt32 index, UInt32* length, Span`1<string> name);
    public void GetActiveSubroutineName(UInt32 program, GLEnum shadertype, UInt32 index, UInt32& length, Span`1<byte> name);
    public void GetActiveSubroutineName(UInt32 program, GLEnum shadertype, UInt32 index, UInt32& length, Span`1<string> name);
    public void GetActiveSubroutineName(UInt32 program, ShaderType shadertype, UInt32 index, UInt32* length, Span`1<byte> name);
    public void GetActiveSubroutineName(UInt32 program, ShaderType shadertype, UInt32 index, UInt32* length, Span`1<string> name);
    public void GetActiveSubroutineName(UInt32 program, ShaderType shadertype, UInt32 index, UInt32& length, Span`1<byte> name);
    public void GetActiveSubroutineName(UInt32 program, ShaderType shadertype, UInt32 index, UInt32& length, Span`1<string> name);
    public void GetActiveSubroutineUniformName(UInt32 program, GLEnum shadertype, UInt32 index, UInt32* length, Span`1<byte> name);
    public void GetActiveSubroutineUniformName(UInt32 program, GLEnum shadertype, UInt32 index, UInt32* length, Span`1<string> name);
    public void GetActiveSubroutineUniformName(UInt32 program, GLEnum shadertype, UInt32 index, UInt32& length, Span`1<byte> name);
    public void GetActiveSubroutineUniformName(UInt32 program, GLEnum shadertype, UInt32 index, UInt32& length, Span`1<string> name);
    public void GetActiveSubroutineUniformName(UInt32 program, ShaderType shadertype, UInt32 index, UInt32* length, Span`1<byte> name);
    public void GetActiveSubroutineUniformName(UInt32 program, ShaderType shadertype, UInt32 index, UInt32* length, Span`1<string> name);
    public void GetActiveSubroutineUniformName(UInt32 program, ShaderType shadertype, UInt32 index, UInt32& length, Span`1<byte> name);
    public void GetActiveSubroutineUniformName(UInt32 program, ShaderType shadertype, UInt32 index, UInt32& length, Span`1<string> name);
    public void Uniform1(int location, ReadOnlySpan`1<double> value);
    public void Uniform2(int location, ReadOnlySpan`1<double> value);
    public void Uniform3(int location, ReadOnlySpan`1<double> value);
    public void Uniform4(int location, ReadOnlySpan`1<double> value);
    public void UniformMatrix2(int location, bool transpose, ReadOnlySpan`1<double> value);
    public void UniformMatrix2(int location, Boolean transpose, ReadOnlySpan`1<double> value);
    public void UniformMatrix2x3(int location, bool transpose, ReadOnlySpan`1<double> value);
    public void UniformMatrix2x3(int location, Boolean transpose, ReadOnlySpan`1<double> value);
    public void UniformMatrix2x4(int location, bool transpose, ReadOnlySpan`1<double> value);
    public void UniformMatrix2x4(int location, Boolean transpose, ReadOnlySpan`1<double> value);
    public void UniformMatrix3(int location, bool transpose, ReadOnlySpan`1<double> value);
    public void UniformMatrix3(int location, Boolean transpose, ReadOnlySpan`1<double> value);
    public void UniformMatrix3x2(int location, bool transpose, ReadOnlySpan`1<double> value);
    public void UniformMatrix3x2(int location, Boolean transpose, ReadOnlySpan`1<double> value);
    public void UniformMatrix3x4(int location, bool transpose, ReadOnlySpan`1<double> value);
    public void UniformMatrix3x4(int location, Boolean transpose, ReadOnlySpan`1<double> value);
    public void UniformMatrix4(int location, bool transpose, ReadOnlySpan`1<double> value);
    public void UniformMatrix4(int location, Boolean transpose, ReadOnlySpan`1<double> value);
    public void UniformMatrix4x2(int location, bool transpose, ReadOnlySpan`1<double> value);
    public void UniformMatrix4x2(int location, Boolean transpose, ReadOnlySpan`1<double> value);
    public void UniformMatrix4x3(int location, bool transpose, ReadOnlySpan`1<double> value);
    public void UniformMatrix4x3(int location, Boolean transpose, ReadOnlySpan`1<double> value);
    public void UniformSubroutines(GLEnum shadertype, ReadOnlySpan`1<UInt32> indices);
    public void UniformSubroutines(ShaderType shadertype, ReadOnlySpan`1<UInt32> indices);
    public void DeleteSampler(UInt32 samplers);
    public void DeleteSamplers(ReadOnlySpan`1<UInt32> samplers);
    public void DeleteSamplers(ReadOnlySpan`1<Sampler> samplers);
    public UInt32 GenSampler();
    public void GenSamplers(Span`1<UInt32> samplers);
    public void GenSamplers(Span`1<Sampler> samplers);
    public long GetInteger64(GLEnum pname);
    public void GetSync(IntPtr sync, GLEnum pname, UInt32* length, Span`1<int> values);
    public void GetSync(IntPtr sync, GLEnum pname, UInt32& length, Span`1<int> values);
    public void GetSync(IntPtr sync, SyncParameterName pname, UInt32* length, Span`1<int> values);
    public void GetSync(IntPtr sync, SyncParameterName pname, UInt32& length, Span`1<int> values);
    public void MultiDrawElementsBaseVertex(GLEnum mode, UInt32* count, GLEnum type, Void** indices, ReadOnlySpan`1<int> basevertex);
    public void MultiDrawElementsBaseVertex(GLEnum mode, UInt32* count, GLEnum type, Void*& indices, ReadOnlySpan`1<int> basevertex);
    public void MultiDrawElementsBaseVertex(GLEnum mode, ReadOnlySpan`1<UInt32> count, GLEnum type, Void** indices, Int32* basevertex);
    public void MultiDrawElementsBaseVertex(GLEnum mode, ReadOnlySpan`1<UInt32> count, GLEnum type, Void** indices, ReadOnlySpan`1<int> basevertex);
    public void MultiDrawElementsBaseVertex(GLEnum mode, ReadOnlySpan`1<UInt32> count, GLEnum type, Void*& indices, Int32* basevertex);
    public void MultiDrawElementsBaseVertex(GLEnum mode, ReadOnlySpan`1<UInt32> count, GLEnum type, Void*& indices, ReadOnlySpan`1<int> basevertex);
    public void MultiDrawElementsBaseVertex(GLEnum mode, UInt32* count, DrawElementsType type, Void** indices, ReadOnlySpan`1<int> basevertex);
    public void MultiDrawElementsBaseVertex(GLEnum mode, UInt32* count, DrawElementsType type, Void*& indices, ReadOnlySpan`1<int> basevertex);
    public void MultiDrawElementsBaseVertex(GLEnum mode, ReadOnlySpan`1<UInt32> count, DrawElementsType type, Void** indices, Int32* basevertex);
    public void MultiDrawElementsBaseVertex(GLEnum mode, ReadOnlySpan`1<UInt32> count, DrawElementsType type, Void** indices, ReadOnlySpan`1<int> basevertex);
    public void MultiDrawElementsBaseVertex(GLEnum mode, ReadOnlySpan`1<UInt32> count, DrawElementsType type, Void*& indices, Int32* basevertex);
    public void MultiDrawElementsBaseVertex(GLEnum mode, ReadOnlySpan`1<UInt32> count, DrawElementsType type, Void*& indices, ReadOnlySpan`1<int> basevertex);
    public void MultiDrawElementsBaseVertex(PrimitiveType mode, UInt32* count, GLEnum type, Void** indices, ReadOnlySpan`1<int> basevertex);
    public void MultiDrawElementsBaseVertex(PrimitiveType mode, UInt32* count, GLEnum type, Void*& indices, ReadOnlySpan`1<int> basevertex);
    public void MultiDrawElementsBaseVertex(PrimitiveType mode, ReadOnlySpan`1<UInt32> count, GLEnum type, Void** indices, Int32* basevertex);
    public void MultiDrawElementsBaseVertex(PrimitiveType mode, ReadOnlySpan`1<UInt32> count, GLEnum type, Void** indices, ReadOnlySpan`1<int> basevertex);
    public void MultiDrawElementsBaseVertex(PrimitiveType mode, ReadOnlySpan`1<UInt32> count, GLEnum type, Void*& indices, Int32* basevertex);
    public void MultiDrawElementsBaseVertex(PrimitiveType mode, ReadOnlySpan`1<UInt32> count, GLEnum type, Void*& indices, ReadOnlySpan`1<int> basevertex);
    public void MultiDrawElementsBaseVertex(PrimitiveType mode, UInt32* count, DrawElementsType type, Void** indices, ReadOnlySpan`1<int> basevertex);
    public void MultiDrawElementsBaseVertex(PrimitiveType mode, UInt32* count, DrawElementsType type, Void*& indices, ReadOnlySpan`1<int> basevertex);
    public void MultiDrawElementsBaseVertex(PrimitiveType mode, ReadOnlySpan`1<UInt32> count, DrawElementsType type, Void** indices, Int32* basevertex);
    public void MultiDrawElementsBaseVertex(PrimitiveType mode, ReadOnlySpan`1<UInt32> count, DrawElementsType type, Void** indices, ReadOnlySpan`1<int> basevertex);
    public void MultiDrawElementsBaseVertex(PrimitiveType mode, ReadOnlySpan`1<UInt32> count, DrawElementsType type, Void*& indices, Int32* basevertex);
    public void MultiDrawElementsBaseVertex(PrimitiveType mode, ReadOnlySpan`1<UInt32> count, DrawElementsType type, Void*& indices, ReadOnlySpan`1<int> basevertex);
    public void GetActiveUniformBlockName(UInt32 program, UInt32 uniformBlockIndex, UInt32* length, Span`1<byte> uniformBlockName);
    public void GetActiveUniformBlockName(UInt32 program, UInt32 uniformBlockIndex, UInt32* length, Span`1<string> uniformBlockName);
    public void GetActiveUniformBlockName(UInt32 program, UInt32 uniformBlockIndex, UInt32& length, Span`1<byte> uniformBlockName);
    public void GetActiveUniformBlockName(UInt32 program, UInt32 uniformBlockIndex, UInt32& length, Span`1<string> uniformBlockName);
    public void GetActiveUniformName(UInt32 program, UInt32 uniformIndex, UInt32* length, Span`1<byte> uniformName);
    public void GetActiveUniformName(UInt32 program, UInt32 uniformIndex, UInt32* length, Span`1<string> uniformName);
    public void GetActiveUniformName(UInt32 program, UInt32 uniformIndex, UInt32& length, Span`1<byte> uniformName);
    public void GetActiveUniformName(UInt32 program, UInt32 uniformIndex, UInt32& length, Span`1<string> uniformName);
    public void GetActiveUniforms(UInt32 program, ReadOnlySpan`1<UInt32> uniformIndices, GLEnum pname, Int32* params);
    public void GetActiveUniforms(UInt32 program, ReadOnlySpan`1<UInt32> uniformIndices, GLEnum pname, Int32& params);
    public void GetActiveUniforms(UInt32 program, ReadOnlySpan`1<UInt32> uniformIndices, UniformPName pname, Int32* params);
    public void GetActiveUniforms(UInt32 program, ReadOnlySpan`1<UInt32> uniformIndices, UniformPName pname, Int32& params);
    public void GetUniformIndices(UInt32 program, UInt32 uniformCount, String[] uniformNamesSa, UInt32* uniformIndices);
    public void GetUniformIndices(UInt32 program, UInt32 uniformCount, String[] uniformNamesSa, UInt32& uniformIndices);
    public void DeleteFramebuffer(UInt32 framebuffers);
    public void DeleteFramebuffers(ReadOnlySpan`1<UInt32> framebuffers);
    public void DeleteFramebuffers(ReadOnlySpan`1<Framebuffer> framebuffers);
    public void DeleteRenderbuffer(UInt32 renderbuffers);
    public void DeleteRenderbuffers(ReadOnlySpan`1<UInt32> renderbuffers);
    public void DeleteRenderbuffers(ReadOnlySpan`1<Renderbuffer> renderbuffers);
    public void DeleteVertexArray(UInt32 arrays);
    public void DeleteVertexArrays(ReadOnlySpan`1<UInt32> arrays);
    public void DeleteVertexArrays(ReadOnlySpan`1<VertexArray> arrays);
    public UInt32 GenFramebuffer();
    public void GenFramebuffers(Span`1<UInt32> framebuffers);
    public void GenFramebuffers(Span`1<Framebuffer> framebuffers);
    public UInt32 GenRenderbuffer();
    public void GenRenderbuffers(Span`1<UInt32> renderbuffers);
    public void GenRenderbuffers(Span`1<Renderbuffer> renderbuffers);
    public UInt32 GenVertexArray();
    public void GenVertexArrays(Span`1<UInt32> arrays);
    public void GenVertexArrays(Span`1<VertexArray> arrays);
    public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32* length, UInt32* size, GLEnum* type, Span`1<byte> name);
    public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32* length, UInt32* size, GLEnum* type, Span`1<string> name);
    public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32* length, UInt32* size, GLEnum& type, Span`1<byte> name);
    public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32* length, UInt32* size, GLEnum& type, Span`1<string> name);
    public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32* length, UInt32& size, GLEnum* type, Span`1<byte> name);
    public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32* length, UInt32& size, GLEnum* type, Span`1<string> name);
    public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32* length, UInt32& size, GLEnum& type, Span`1<byte> name);
    public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32* length, UInt32& size, GLEnum& type, Span`1<string> name);
    public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32& length, UInt32* size, GLEnum* type, Span`1<byte> name);
    public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32& length, UInt32* size, GLEnum* type, Span`1<string> name);
    public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32& length, UInt32* size, GLEnum& type, Span`1<byte> name);
    public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32& length, UInt32* size, GLEnum& type, Span`1<string> name);
    public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32& length, UInt32& size, GLEnum* type, Span`1<byte> name);
    public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32& length, UInt32& size, GLEnum* type, Span`1<string> name);
    public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32& length, UInt32& size, GLEnum& type, Span`1<byte> name);
    public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32& length, UInt32& size, GLEnum& type, Span`1<string> name);
    public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32* length, UInt32* size, AttributeType* type, Span`1<byte> name);
    public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32* length, UInt32* size, AttributeType* type, Span`1<string> name);
    public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32* length, UInt32* size, AttributeType& type, Span`1<byte> name);
    public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32* length, UInt32* size, AttributeType& type, Span`1<string> name);
    public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32* length, UInt32& size, AttributeType* type, Span`1<byte> name);
    public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32* length, UInt32& size, AttributeType* type, Span`1<string> name);
    public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32* length, UInt32& size, AttributeType& type, Span`1<byte> name);
    public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32* length, UInt32& size, AttributeType& type, Span`1<string> name);
    public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32& length, UInt32* size, AttributeType* type, Span`1<byte> name);
    public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32& length, UInt32* size, AttributeType* type, Span`1<string> name);
    public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32& length, UInt32* size, AttributeType& type, Span`1<byte> name);
    public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32& length, UInt32* size, AttributeType& type, Span`1<string> name);
    public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32& length, UInt32& size, AttributeType* type, Span`1<byte> name);
    public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32& length, UInt32& size, AttributeType* type, Span`1<string> name);
    public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32& length, UInt32& size, AttributeType& type, Span`1<byte> name);
    public void GetTransformFeedbackVarying(UInt32 program, UInt32 index, UInt32& length, UInt32& size, AttributeType& type, Span`1<string> name);
    public void TransformFeedbackVaryings(UInt32 program, UInt32 count, String[] varyingsSa, GLEnum bufferMode);
    public void TransformFeedbackVaryings(UInt32 program, UInt32 count, String[] varyingsSa, TransformFeedbackBufferMode bufferMode);
    public void Uniform1(int location, ReadOnlySpan`1<UInt32> value);
    public void Uniform2(int location, ReadOnlySpan`1<UInt32> value);
    public void Uniform3(int location, ReadOnlySpan`1<UInt32> value);
    public void Uniform4(int location, ReadOnlySpan`1<UInt32> value);
    public void UniformMatrix2x3(int location, bool transpose, ReadOnlySpan`1<float> value);
    public void UniformMatrix2x3(int location, Boolean transpose, ReadOnlySpan`1<float> value);
    public void UniformMatrix2x4(int location, bool transpose, ReadOnlySpan`1<float> value);
    public void UniformMatrix2x4(int location, Boolean transpose, ReadOnlySpan`1<float> value);
    public void UniformMatrix3x2(int location, bool transpose, ReadOnlySpan`1<float> value);
    public void UniformMatrix3x2(int location, Boolean transpose, ReadOnlySpan`1<float> value);
    public void UniformMatrix3x4(int location, bool transpose, ReadOnlySpan`1<float> value);
    public void UniformMatrix3x4(int location, Boolean transpose, ReadOnlySpan`1<float> value);
    public void UniformMatrix4x2(int location, bool transpose, ReadOnlySpan`1<float> value);
    public void UniformMatrix4x2(int location, Boolean transpose, ReadOnlySpan`1<float> value);
    public void UniformMatrix4x3(int location, bool transpose, ReadOnlySpan`1<float> value);
    public void UniformMatrix4x3(int location, Boolean transpose, ReadOnlySpan`1<float> value);
    public void DrawBuffers(ReadOnlySpan`1<GLEnum> bufs);
    public void DrawBuffers(ReadOnlySpan`1<DrawBufferMode> bufs);
    public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32* length, Int32* size, GLEnum* type, Span`1<byte> name);
    public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32* length, Int32* size, GLEnum* type, Span`1<string> name);
    public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32* length, Int32* size, GLEnum& type, Span`1<byte> name);
    public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32* length, Int32* size, GLEnum& type, Span`1<string> name);
    public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32* length, Int32& size, GLEnum* type, Span`1<byte> name);
    public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32* length, Int32& size, GLEnum* type, Span`1<string> name);
    public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32* length, Int32& size, GLEnum& type, Span`1<byte> name);
    public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32* length, Int32& size, GLEnum& type, Span`1<string> name);
    public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32& length, Int32* size, GLEnum* type, Span`1<byte> name);
    public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32& length, Int32* size, GLEnum* type, Span`1<string> name);
    public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32& length, Int32* size, GLEnum& type, Span`1<byte> name);
    public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32& length, Int32* size, GLEnum& type, Span`1<string> name);
    public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32& length, Int32& size, GLEnum* type, Span`1<byte> name);
    public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32& length, Int32& size, GLEnum* type, Span`1<string> name);
    public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32& length, Int32& size, GLEnum& type, Span`1<byte> name);
    public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32& length, Int32& size, GLEnum& type, Span`1<string> name);
    public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32* length, Int32* size, AttributeType* type, Span`1<byte> name);
    public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32* length, Int32* size, AttributeType* type, Span`1<string> name);
    public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32* length, Int32* size, AttributeType& type, Span`1<byte> name);
    public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32* length, Int32* size, AttributeType& type, Span`1<string> name);
    public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32* length, Int32& size, AttributeType* type, Span`1<byte> name);
    public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32* length, Int32& size, AttributeType* type, Span`1<string> name);
    public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32* length, Int32& size, AttributeType& type, Span`1<byte> name);
    public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32* length, Int32& size, AttributeType& type, Span`1<string> name);
    public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32& length, Int32* size, AttributeType* type, Span`1<byte> name);
    public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32& length, Int32* size, AttributeType* type, Span`1<string> name);
    public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32& length, Int32* size, AttributeType& type, Span`1<byte> name);
    public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32& length, Int32* size, AttributeType& type, Span`1<string> name);
    public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32& length, Int32& size, AttributeType* type, Span`1<byte> name);
    public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32& length, Int32& size, AttributeType* type, Span`1<string> name);
    public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32& length, Int32& size, AttributeType& type, Span`1<byte> name);
    public void GetActiveAttrib(UInt32 program, UInt32 index, UInt32& length, Int32& size, AttributeType& type, Span`1<string> name);
    public void GetActiveUniform(UInt32 program, UInt32 index, UInt32* length, Int32* size, GLEnum* type, Span`1<byte> name);
    public void GetActiveUniform(UInt32 program, UInt32 index, UInt32* length, Int32* size, GLEnum* type, Span`1<string> name);
    public void GetActiveUniform(UInt32 program, UInt32 index, UInt32* length, Int32* size, GLEnum& type, Span`1<byte> name);
    public void GetActiveUniform(UInt32 program, UInt32 index, UInt32* length, Int32* size, GLEnum& type, Span`1<string> name);
    public void GetActiveUniform(UInt32 program, UInt32 index, UInt32* length, Int32& size, GLEnum* type, Span`1<byte> name);
    public void GetActiveUniform(UInt32 program, UInt32 index, UInt32* length, Int32& size, GLEnum* type, Span`1<string> name);
    public void GetActiveUniform(UInt32 program, UInt32 index, UInt32* length, Int32& size, GLEnum& type, Span`1<byte> name);
    public void GetActiveUniform(UInt32 program, UInt32 index, UInt32* length, Int32& size, GLEnum& type, Span`1<string> name);
    public void GetActiveUniform(UInt32 program, UInt32 index, UInt32& length, Int32* size, GLEnum* type, Span`1<byte> name);
    public void GetActiveUniform(UInt32 program, UInt32 index, UInt32& length, Int32* size, GLEnum* type, Span`1<string> name);
    public void GetActiveUniform(UInt32 program, UInt32 index, UInt32& length, Int32* size, GLEnum& type, Span`1<byte> name);
    public void GetActiveUniform(UInt32 program, UInt32 index, UInt32& length, Int32* size, GLEnum& type, Span`1<string> name);
    public void GetActiveUniform(UInt32 program, UInt32 index, UInt32& length, Int32& size, GLEnum* type, Span`1<byte> name);
    public void GetActiveUniform(UInt32 program, UInt32 index, UInt32& length, Int32& size, GLEnum* type, Span`1<string> name);
    public void GetActiveUniform(UInt32 program, UInt32 index, UInt32& length, Int32& size, GLEnum& type, Span`1<byte> name);
    public void GetActiveUniform(UInt32 program, UInt32 index, UInt32& length, Int32& size, GLEnum& type, Span`1<string> name);
    public void GetActiveUniform(UInt32 program, UInt32 index, UInt32* length, Int32* size, UniformType* type, Span`1<byte> name);
    public void GetActiveUniform(UInt32 program, UInt32 index, UInt32* length, Int32* size, UniformType* type, Span`1<string> name);
    public void GetActiveUniform(UInt32 program, UInt32 index, UInt32* length, Int32* size, UniformType& type, Span`1<byte> name);
    public void GetActiveUniform(UInt32 program, UInt32 index, UInt32* length, Int32* size, UniformType& type, Span`1<string> name);
    public void GetActiveUniform(UInt32 program, UInt32 index, UInt32* length, Int32& size, UniformType* type, Span`1<byte> name);
    public void GetActiveUniform(UInt32 program, UInt32 index, UInt32* length, Int32& size, UniformType* type, Span`1<string> name);
    public void GetActiveUniform(UInt32 program, UInt32 index, UInt32* length, Int32& size, UniformType& type, Span`1<byte> name);
    public void GetActiveUniform(UInt32 program, UInt32 index, UInt32* length, Int32& size, UniformType& type, Span`1<string> name);
    public void GetActiveUniform(UInt32 program, UInt32 index, UInt32& length, Int32* size, UniformType* type, Span`1<byte> name);
    public void GetActiveUniform(UInt32 program, UInt32 index, UInt32& length, Int32* size, UniformType* type, Span`1<string> name);
    public void GetActiveUniform(UInt32 program, UInt32 index, UInt32& length, Int32* size, UniformType& type, Span`1<byte> name);
    public void GetActiveUniform(UInt32 program, UInt32 index, UInt32& length, Int32* size, UniformType& type, Span`1<string> name);
    public void GetActiveUniform(UInt32 program, UInt32 index, UInt32& length, Int32& size, UniformType* type, Span`1<byte> name);
    public void GetActiveUniform(UInt32 program, UInt32 index, UInt32& length, Int32& size, UniformType* type, Span`1<string> name);
    public void GetActiveUniform(UInt32 program, UInt32 index, UInt32& length, Int32& size, UniformType& type, Span`1<byte> name);
    public void GetActiveUniform(UInt32 program, UInt32 index, UInt32& length, Int32& size, UniformType& type, Span`1<string> name);
    public void GetAttachedShaders(UInt32 program, UInt32* count, Span`1<UInt32> shaders);
    public void GetAttachedShaders(UInt32 program, UInt32& count, Span`1<UInt32> shaders);
    public void GetAttachedShaders(UInt32 program, UInt32* count, Span`1<Shader> shaders);
    public void GetAttachedShaders(UInt32 program, UInt32& count, Span`1<Shader> shaders);
    public void GetProgramInfoLog(UInt32 program, UInt32* length, Span`1<byte> infoLog);
    public void GetProgramInfoLog(UInt32 program, UInt32* length, Span`1<string> infoLog);
    public void GetProgramInfoLog(UInt32 program, UInt32& length, Span`1<byte> infoLog);
    public void GetProgramInfoLog(UInt32 program, UInt32& length, Span`1<string> infoLog);
    public void GetShaderInfoLog(UInt32 shader, UInt32* length, Span`1<byte> infoLog);
    public void GetShaderInfoLog(UInt32 shader, UInt32* length, Span`1<string> infoLog);
    public void GetShaderInfoLog(UInt32 shader, UInt32& length, Span`1<byte> infoLog);
    public void GetShaderInfoLog(UInt32 shader, UInt32& length, Span`1<string> infoLog);
    public void GetShaderSource(UInt32 shader, UInt32* length, Span`1<byte> source);
    public void GetShaderSource(UInt32 shader, UInt32* length, Span`1<string> source);
    public void GetShaderSource(UInt32 shader, UInt32& length, Span`1<byte> source);
    public void GetShaderSource(UInt32 shader, UInt32& length, Span`1<string> source);
    public void ShaderSource(UInt32 shader, UInt32 count, String[] stringSa, Int32* length);
    public void ShaderSource(UInt32 shader, UInt32 count, String[] stringSa, Int32& length);
    public void ShaderSource(UInt32 shader, Byte** string, ReadOnlySpan`1<int> length);
    public void ShaderSource(UInt32 shader, Byte*& string, ReadOnlySpan`1<int> length);
    public void Uniform1(int location, ReadOnlySpan`1<float> value);
    public void Uniform1(int location, ReadOnlySpan`1<int> value);
    public void Uniform2(int location, ReadOnlySpan`1<float> value);
    public void Uniform2(int location, ReadOnlySpan`1<int> value);
    public void Uniform3(int location, ReadOnlySpan`1<float> value);
    public void Uniform3(int location, ReadOnlySpan`1<int> value);
    public void Uniform4(int location, ReadOnlySpan`1<float> value);
    public void Uniform4(int location, ReadOnlySpan`1<int> value);
    public void UniformMatrix2(int location, bool transpose, ReadOnlySpan`1<float> value);
    public void UniformMatrix2(int location, Boolean transpose, ReadOnlySpan`1<float> value);
    public void UniformMatrix3(int location, bool transpose, ReadOnlySpan`1<float> value);
    public void UniformMatrix3(int location, Boolean transpose, ReadOnlySpan`1<float> value);
    public void UniformMatrix4(int location, bool transpose, ReadOnlySpan`1<float> value);
    public void UniformMatrix4(int location, Boolean transpose, ReadOnlySpan`1<float> value);
    public void BufferData(GLEnum target, ReadOnlySpan`1<T0> data, GLEnum usage);
    public void BufferData(GLEnum target, ReadOnlySpan`1<T0> data, BufferUsageARB usage);
    public void BufferData(BufferTargetARB target, ReadOnlySpan`1<T0> data, GLEnum usage);
    public void BufferData(BufferTargetARB target, ReadOnlySpan`1<T0> data, BufferUsageARB usage);
    public void BufferSubData(GLEnum target, IntPtr offset, ReadOnlySpan`1<T0> data);
    public void BufferSubData(BufferTargetARB target, IntPtr offset, ReadOnlySpan`1<T0> data);
    public void DeleteBuffer(UInt32 buffers);
    public void DeleteBuffers(ReadOnlySpan`1<UInt32> buffers);
    public void DeleteBuffers(ReadOnlySpan`1<Buffer> buffers);
    public void DeleteQuery(UInt32 ids);
    public void DeleteQueries(ReadOnlySpan`1<UInt32> ids);
    public void DeleteQueries(ReadOnlySpan`1<Query> ids);
    public UInt32 GenBuffer();
    public void GenBuffers(Span`1<UInt32> buffers);
    public void GenBuffers(Span`1<Buffer> buffers);
    public UInt32 GenQuery();
    public void GenQueries(Span`1<UInt32> ids);
    public void GenQueries(Span`1<Query> ids);
    public void GetBufferSubData(GLEnum target, IntPtr offset, Span`1<T0> data);
    public void GetBufferSubData(BufferTargetARB target, IntPtr offset, Span`1<T0> data);
    public void MultiDrawArrays(GLEnum mode, Int32* first, ReadOnlySpan`1<UInt32> count);
    public void MultiDrawArrays(GLEnum mode, ReadOnlySpan`1<int> first, UInt32* count);
    public void MultiDrawArrays(GLEnum mode, ReadOnlySpan`1<int> first, ReadOnlySpan`1<UInt32> count);
    public void MultiDrawArrays(PrimitiveType mode, Int32* first, ReadOnlySpan`1<UInt32> count);
    public void MultiDrawArrays(PrimitiveType mode, ReadOnlySpan`1<int> first, UInt32* count);
    public void MultiDrawArrays(PrimitiveType mode, ReadOnlySpan`1<int> first, ReadOnlySpan`1<UInt32> count);
    public void MultiDrawElements(GLEnum mode, ReadOnlySpan`1<UInt32> count, GLEnum type, Void** indices);
    public void MultiDrawElements(GLEnum mode, ReadOnlySpan`1<UInt32> count, GLEnum type, Void*& indices);
    public void MultiDrawElements(GLEnum mode, ReadOnlySpan`1<UInt32> count, DrawElementsType type, Void** indices);
    public void MultiDrawElements(GLEnum mode, ReadOnlySpan`1<UInt32> count, DrawElementsType type, Void*& indices);
    public void MultiDrawElements(PrimitiveType mode, ReadOnlySpan`1<UInt32> count, GLEnum type, Void** indices);
    public void MultiDrawElements(PrimitiveType mode, ReadOnlySpan`1<UInt32> count, GLEnum type, Void*& indices);
    public void MultiDrawElements(PrimitiveType mode, ReadOnlySpan`1<UInt32> count, DrawElementsType type, Void** indices);
    public void MultiDrawElements(PrimitiveType mode, ReadOnlySpan`1<UInt32> count, DrawElementsType type, Void*& indices);
    public void CompressedTexImage1D(GLEnum target, int level, GLEnum internalformat, UInt32 width, int border, ReadOnlySpan`1<T0> data);
    public void CompressedTexImage1D(GLEnum target, int level, InternalFormat internalformat, UInt32 width, int border, ReadOnlySpan`1<T0> data);
    public void CompressedTexImage1D(TextureTarget target, int level, GLEnum internalformat, UInt32 width, int border, ReadOnlySpan`1<T0> data);
    public void CompressedTexImage1D(TextureTarget target, int level, InternalFormat internalformat, UInt32 width, int border, ReadOnlySpan`1<T0> data);
    public void CompressedTexImage2D(GLEnum target, int level, GLEnum internalformat, UInt32 width, UInt32 height, int border, ReadOnlySpan`1<T0> data);
    public void CompressedTexImage2D(GLEnum target, int level, InternalFormat internalformat, UInt32 width, UInt32 height, int border, ReadOnlySpan`1<T0> data);
    public void CompressedTexImage2D(TextureTarget target, int level, GLEnum internalformat, UInt32 width, UInt32 height, int border, ReadOnlySpan`1<T0> data);
    public void CompressedTexImage2D(TextureTarget target, int level, InternalFormat internalformat, UInt32 width, UInt32 height, int border, ReadOnlySpan`1<T0> data);
    public void CompressedTexImage3D(GLEnum target, int level, GLEnum internalformat, UInt32 width, UInt32 height, UInt32 depth, int border, ReadOnlySpan`1<T0> data);
    public void CompressedTexImage3D(GLEnum target, int level, InternalFormat internalformat, UInt32 width, UInt32 height, UInt32 depth, int border, ReadOnlySpan`1<T0> data);
    public void CompressedTexImage3D(TextureTarget target, int level, GLEnum internalformat, UInt32 width, UInt32 height, UInt32 depth, int border, ReadOnlySpan`1<T0> data);
    public void CompressedTexImage3D(TextureTarget target, int level, InternalFormat internalformat, UInt32 width, UInt32 height, UInt32 depth, int border, ReadOnlySpan`1<T0> data);
    public void CompressedTexSubImage1D(GLEnum target, int level, int xoffset, UInt32 width, GLEnum format, ReadOnlySpan`1<T0> data);
    public void CompressedTexSubImage1D(GLEnum target, int level, int xoffset, UInt32 width, InternalFormat format, ReadOnlySpan`1<T0> data);
    public void CompressedTexSubImage1D(TextureTarget target, int level, int xoffset, UInt32 width, GLEnum format, ReadOnlySpan`1<T0> data);
    public void CompressedTexSubImage1D(TextureTarget target, int level, int xoffset, UInt32 width, InternalFormat format, ReadOnlySpan`1<T0> data);
    public void CompressedTexSubImage2D(GLEnum target, int level, int xoffset, int yoffset, UInt32 width, UInt32 height, GLEnum format, ReadOnlySpan`1<T0> data);
    public void CompressedTexSubImage2D(GLEnum target, int level, int xoffset, int yoffset, UInt32 width, UInt32 height, InternalFormat format, ReadOnlySpan`1<T0> data);
    public void CompressedTexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, UInt32 width, UInt32 height, GLEnum format, ReadOnlySpan`1<T0> data);
    public void CompressedTexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, UInt32 width, UInt32 height, InternalFormat format, ReadOnlySpan`1<T0> data);
    public void CompressedTexSubImage3D(GLEnum target, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, GLEnum format, ReadOnlySpan`1<T0> data);
    public void CompressedTexSubImage3D(GLEnum target, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, InternalFormat format, ReadOnlySpan`1<T0> data);
    public void CompressedTexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, GLEnum format, ReadOnlySpan`1<T0> data);
    public void CompressedTexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, InternalFormat format, ReadOnlySpan`1<T0> data);
    public void DeleteTexture(UInt32 textures);
    public void DeleteTextures(ReadOnlySpan`1<UInt32> textures);
    public void DeleteTextures(ReadOnlySpan`1<Texture> textures);
    public UInt32 GenTexture();
    public void GenTextures(Span`1<UInt32> textures);
    public void GenTextures(Span`1<Texture> textures);
    public bool GetBoolean(GLEnum pname);
    public double GetDouble(GLEnum pname);
    public float GetFloat(GLEnum pname);
    public int GetInteger(GLEnum pname);
    protected virtual int CoreGcSlotCount();
    protected sealed virtual IVTable CreateVTable();
    public static INativeContext CreateDefaultContext(string n);
    [CompilerGeneratedAttribute]
private string <IsExtensionPresent>b__6_0(int x);
}
internal class Silk.NET.OpenGL.GLCoreLibraryNameContainer : SearchPathContainer {
    public string Linux { get; }
    public string MacOS { get; }
    public string Android { get; }
    public string IOS { get; }
    public string Windows64 { get; }
    public string Windows86 { get; }
    public virtual string get_Linux();
    public virtual string get_MacOS();
    public virtual string get_Android();
    public virtual string get_IOS();
    public virtual string get_Windows64();
    public virtual string get_Windows86();
}
[NativeNameAttribute("Name", "GLenum")]
public enum Silk.NET.OpenGL.GLEnum : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_DEPTH_BUFFER_BIT")]
public static GLEnum DepthBufferBit;
    [NativeNameAttribute("Name", "GL_STENCIL_BUFFER_BIT")]
public static GLEnum StencilBufferBit;
    [NativeNameAttribute("Name", "GL_COLOR_BUFFER_BIT")]
public static GLEnum ColorBufferBit;
    [NativeNameAttribute("Name", "GL_FALSE")]
public static GLEnum False;
    [NativeNameAttribute("Name", "GL_TRUE")]
public static GLEnum True;
    [NativeNameAttribute("Name", "GL_POINTS")]
public static GLEnum Points;
    [NativeNameAttribute("Name", "GL_LINES")]
public static GLEnum Lines;
    [NativeNameAttribute("Name", "GL_LINE_LOOP")]
public static GLEnum LineLoop;
    [NativeNameAttribute("Name", "GL_LINE_STRIP")]
public static GLEnum LineStrip;
    [NativeNameAttribute("Name", "GL_TRIANGLES")]
public static GLEnum Triangles;
    [NativeNameAttribute("Name", "GL_TRIANGLE_STRIP")]
public static GLEnum TriangleStrip;
    [NativeNameAttribute("Name", "GL_TRIANGLE_FAN")]
public static GLEnum TriangleFan;
    [NativeNameAttribute("Name", "GL_NEVER")]
public static GLEnum Never;
    [NativeNameAttribute("Name", "GL_LESS")]
public static GLEnum Less;
    [NativeNameAttribute("Name", "GL_EQUAL")]
public static GLEnum Equal;
    [NativeNameAttribute("Name", "GL_LEQUAL")]
public static GLEnum Lequal;
    [NativeNameAttribute("Name", "GL_GREATER")]
public static GLEnum Greater;
    [NativeNameAttribute("Name", "GL_NOTEQUAL")]
public static GLEnum Notequal;
    [NativeNameAttribute("Name", "GL_GEQUAL")]
public static GLEnum Gequal;
    [NativeNameAttribute("Name", "GL_ALWAYS")]
public static GLEnum Always;
    [NativeNameAttribute("Name", "GL_ZERO")]
public static GLEnum Zero;
    [NativeNameAttribute("Name", "GL_ONE")]
public static GLEnum One;
    [NativeNameAttribute("Name", "GL_SRC_COLOR")]
public static GLEnum SrcColor;
    [NativeNameAttribute("Name", "GL_ONE_MINUS_SRC_COLOR")]
public static GLEnum OneMinusSrcColor;
    [NativeNameAttribute("Name", "GL_SRC_ALPHA")]
public static GLEnum SrcAlpha;
    [NativeNameAttribute("Name", "GL_ONE_MINUS_SRC_ALPHA")]
public static GLEnum OneMinusSrcAlpha;
    [NativeNameAttribute("Name", "GL_DST_ALPHA")]
public static GLEnum DstAlpha;
    [NativeNameAttribute("Name", "GL_ONE_MINUS_DST_ALPHA")]
public static GLEnum OneMinusDstAlpha;
    [NativeNameAttribute("Name", "GL_DST_COLOR")]
public static GLEnum DstColor;
    [NativeNameAttribute("Name", "GL_ONE_MINUS_DST_COLOR")]
public static GLEnum OneMinusDstColor;
    [NativeNameAttribute("Name", "GL_SRC_ALPHA_SATURATE")]
public static GLEnum SrcAlphaSaturate;
    [NativeNameAttribute("Name", "GL_NONE")]
public static GLEnum None;
    [NativeNameAttribute("Name", "GL_FRONT_LEFT")]
public static GLEnum FrontLeft;
    [NativeNameAttribute("Name", "GL_FRONT_RIGHT")]
public static GLEnum FrontRight;
    [NativeNameAttribute("Name", "GL_BACK_LEFT")]
public static GLEnum BackLeft;
    [NativeNameAttribute("Name", "GL_BACK_RIGHT")]
public static GLEnum BackRight;
    [NativeNameAttribute("Name", "GL_FRONT")]
public static GLEnum Front;
    [NativeNameAttribute("Name", "GL_BACK")]
public static GLEnum Back;
    [NativeNameAttribute("Name", "GL_LEFT")]
public static GLEnum Left;
    [NativeNameAttribute("Name", "GL_RIGHT")]
public static GLEnum Right;
    [NativeNameAttribute("Name", "GL_FRONT_AND_BACK")]
public static GLEnum FrontAndBack;
    [NativeNameAttribute("Name", "GL_NO_ERROR")]
public static GLEnum NoError;
    [NativeNameAttribute("Name", "GL_INVALID_ENUM")]
public static GLEnum InvalidEnum;
    [NativeNameAttribute("Name", "GL_INVALID_VALUE")]
public static GLEnum InvalidValue;
    [NativeNameAttribute("Name", "GL_INVALID_OPERATION")]
public static GLEnum InvalidOperation;
    [NativeNameAttribute("Name", "GL_OUT_OF_MEMORY")]
public static GLEnum OutOfMemory;
    [NativeNameAttribute("Name", "GL_CW")]
public static GLEnum CW;
    [NativeNameAttribute("Name", "GL_CCW")]
public static GLEnum Ccw;
    [NativeNameAttribute("Name", "GL_POINT_SIZE")]
public static GLEnum PointSize;
    [NativeNameAttribute("Name", "GL_POINT_SIZE_RANGE")]
public static GLEnum PointSizeRange;
    [NativeNameAttribute("Name", "GL_POINT_SIZE_GRANULARITY")]
public static GLEnum PointSizeGranularity;
    [NativeNameAttribute("Name", "GL_LINE_SMOOTH")]
public static GLEnum LineSmooth;
    [NativeNameAttribute("Name", "GL_LINE_WIDTH")]
public static GLEnum LineWidth;
    [NativeNameAttribute("Name", "GL_LINE_WIDTH_RANGE")]
public static GLEnum LineWidthRange;
    [NativeNameAttribute("Name", "GL_LINE_WIDTH_GRANULARITY")]
public static GLEnum LineWidthGranularity;
    [NativeNameAttribute("Name", "GL_POLYGON_MODE")]
public static GLEnum PolygonMode;
    [NativeNameAttribute("Name", "GL_POLYGON_SMOOTH")]
public static GLEnum PolygonSmooth;
    [NativeNameAttribute("Name", "GL_CULL_FACE")]
public static GLEnum CullFace;
    [NativeNameAttribute("Name", "GL_CULL_FACE_MODE")]
public static GLEnum CullFaceMode;
    [NativeNameAttribute("Name", "GL_FRONT_FACE")]
public static GLEnum FrontFace;
    [NativeNameAttribute("Name", "GL_DEPTH_RANGE")]
public static GLEnum DepthRange;
    [NativeNameAttribute("Name", "GL_DEPTH_TEST")]
public static GLEnum DepthTest;
    [NativeNameAttribute("Name", "GL_DEPTH_WRITEMASK")]
public static GLEnum DepthWritemask;
    [NativeNameAttribute("Name", "GL_DEPTH_CLEAR_VALUE")]
public static GLEnum DepthClearValue;
    [NativeNameAttribute("Name", "GL_DEPTH_FUNC")]
public static GLEnum DepthFunc;
    [NativeNameAttribute("Name", "GL_STENCIL_TEST")]
public static GLEnum StencilTest;
    [NativeNameAttribute("Name", "GL_STENCIL_CLEAR_VALUE")]
public static GLEnum StencilClearValue;
    [NativeNameAttribute("Name", "GL_STENCIL_FUNC")]
public static GLEnum StencilFunc;
    [NativeNameAttribute("Name", "GL_STENCIL_VALUE_MASK")]
public static GLEnum StencilValueMask;
    [NativeNameAttribute("Name", "GL_STENCIL_FAIL")]
public static GLEnum StencilFail;
    [NativeNameAttribute("Name", "GL_STENCIL_PASS_DEPTH_FAIL")]
public static GLEnum StencilPassDepthFail;
    [NativeNameAttribute("Name", "GL_STENCIL_PASS_DEPTH_PASS")]
public static GLEnum StencilPassDepthPass;
    [NativeNameAttribute("Name", "GL_STENCIL_REF")]
public static GLEnum StencilRef;
    [NativeNameAttribute("Name", "GL_STENCIL_WRITEMASK")]
public static GLEnum StencilWritemask;
    [NativeNameAttribute("Name", "GL_VIEWPORT")]
public static GLEnum Viewport;
    [NativeNameAttribute("Name", "GL_DITHER")]
public static GLEnum Dither;
    [NativeNameAttribute("Name", "GL_BLEND_DST")]
public static GLEnum BlendDst;
    [NativeNameAttribute("Name", "GL_BLEND_SRC")]
public static GLEnum BlendSrc;
    [NativeNameAttribute("Name", "GL_BLEND")]
public static GLEnum Blend;
    [NativeNameAttribute("Name", "GL_LOGIC_OP_MODE")]
public static GLEnum LogicOpMode;
    [NativeNameAttribute("Name", "GL_DRAW_BUFFER")]
public static GLEnum DrawBuffer;
    [NativeNameAttribute("Name", "GL_READ_BUFFER")]
public static GLEnum ReadBuffer;
    [NativeNameAttribute("Name", "GL_SCISSOR_BOX")]
public static GLEnum ScissorBox;
    [NativeNameAttribute("Name", "GL_SCISSOR_TEST")]
public static GLEnum ScissorTest;
    [NativeNameAttribute("Name", "GL_COLOR_CLEAR_VALUE")]
public static GLEnum ColorClearValue;
    [NativeNameAttribute("Name", "GL_COLOR_WRITEMASK")]
public static GLEnum ColorWritemask;
    [NativeNameAttribute("Name", "GL_DOUBLEBUFFER")]
public static GLEnum Doublebuffer;
    [NativeNameAttribute("Name", "GL_STEREO")]
public static GLEnum Stereo;
    [NativeNameAttribute("Name", "GL_LINE_SMOOTH_HINT")]
public static GLEnum LineSmoothHint;
    [NativeNameAttribute("Name", "GL_POLYGON_SMOOTH_HINT")]
public static GLEnum PolygonSmoothHint;
    [NativeNameAttribute("Name", "GL_UNPACK_SWAP_BYTES")]
public static GLEnum UnpackSwapBytes;
    [NativeNameAttribute("Name", "GL_UNPACK_LSB_FIRST")]
public static GLEnum UnpackLsbFirst;
    [NativeNameAttribute("Name", "GL_UNPACK_ROW_LENGTH")]
public static GLEnum UnpackRowLength;
    [NativeNameAttribute("Name", "GL_UNPACK_SKIP_ROWS")]
public static GLEnum UnpackSkipRows;
    [NativeNameAttribute("Name", "GL_UNPACK_SKIP_PIXELS")]
public static GLEnum UnpackSkipPixels;
    [NativeNameAttribute("Name", "GL_UNPACK_ALIGNMENT")]
public static GLEnum UnpackAlignment;
    [NativeNameAttribute("Name", "GL_PACK_SWAP_BYTES")]
public static GLEnum PackSwapBytes;
    [NativeNameAttribute("Name", "GL_PACK_LSB_FIRST")]
public static GLEnum PackLsbFirst;
    [NativeNameAttribute("Name", "GL_PACK_ROW_LENGTH")]
public static GLEnum PackRowLength;
    [NativeNameAttribute("Name", "GL_PACK_SKIP_ROWS")]
public static GLEnum PackSkipRows;
    [NativeNameAttribute("Name", "GL_PACK_SKIP_PIXELS")]
public static GLEnum PackSkipPixels;
    [NativeNameAttribute("Name", "GL_PACK_ALIGNMENT")]
public static GLEnum PackAlignment;
    [NativeNameAttribute("Name", "GL_MAX_TEXTURE_SIZE")]
public static GLEnum MaxTextureSize;
    [NativeNameAttribute("Name", "GL_MAX_VIEWPORT_DIMS")]
public static GLEnum MaxViewportDims;
    [NativeNameAttribute("Name", "GL_SUBPIXEL_BITS")]
public static GLEnum SubpixelBits;
    [NativeNameAttribute("Name", "GL_TEXTURE_1D")]
public static GLEnum Texture1D;
    [NativeNameAttribute("Name", "GL_TEXTURE_2D")]
public static GLEnum Texture2D;
    [NativeNameAttribute("Name", "GL_TEXTURE_WIDTH")]
public static GLEnum TextureWidth;
    [NativeNameAttribute("Name", "GL_TEXTURE_HEIGHT")]
public static GLEnum TextureHeight;
    [NativeNameAttribute("Name", "GL_TEXTURE_BORDER_COLOR")]
public static GLEnum TextureBorderColor;
    [NativeNameAttribute("Name", "GL_DONT_CARE")]
public static GLEnum DontCare;
    [NativeNameAttribute("Name", "GL_FASTEST")]
public static GLEnum Fastest;
    [NativeNameAttribute("Name", "GL_NICEST")]
public static GLEnum Nicest;
    [NativeNameAttribute("Name", "GL_BYTE")]
public static GLEnum Byte;
    [NativeNameAttribute("Name", "GL_UNSIGNED_BYTE")]
public static GLEnum UnsignedByte;
    [NativeNameAttribute("Name", "GL_SHORT")]
public static GLEnum Short;
    [NativeNameAttribute("Name", "GL_UNSIGNED_SHORT")]
public static GLEnum UnsignedShort;
    [NativeNameAttribute("Name", "GL_INT")]
public static GLEnum Int;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT")]
public static GLEnum UnsignedInt;
    [NativeNameAttribute("Name", "GL_FLOAT")]
public static GLEnum Float;
    [NativeNameAttribute("Name", "GL_CLEAR")]
public static GLEnum Clear;
    [NativeNameAttribute("Name", "GL_AND")]
public static GLEnum And;
    [NativeNameAttribute("Name", "GL_AND_REVERSE")]
public static GLEnum AndReverse;
    [NativeNameAttribute("Name", "GL_COPY")]
public static GLEnum Copy;
    [NativeNameAttribute("Name", "GL_AND_INVERTED")]
public static GLEnum AndInverted;
    [NativeNameAttribute("Name", "GL_NOOP")]
public static GLEnum Noop;
    [NativeNameAttribute("Name", "GL_XOR")]
public static GLEnum Xor;
    [NativeNameAttribute("Name", "GL_OR")]
public static GLEnum Or;
    [NativeNameAttribute("Name", "GL_NOR")]
public static GLEnum Nor;
    [NativeNameAttribute("Name", "GL_EQUIV")]
public static GLEnum Equiv;
    [NativeNameAttribute("Name", "GL_INVERT")]
public static GLEnum Invert;
    [NativeNameAttribute("Name", "GL_OR_REVERSE")]
public static GLEnum OrReverse;
    [NativeNameAttribute("Name", "GL_COPY_INVERTED")]
public static GLEnum CopyInverted;
    [NativeNameAttribute("Name", "GL_OR_INVERTED")]
public static GLEnum OrInverted;
    [NativeNameAttribute("Name", "GL_NAND")]
public static GLEnum Nand;
    [NativeNameAttribute("Name", "GL_SET")]
public static GLEnum Set;
    [NativeNameAttribute("Name", "GL_TEXTURE")]
public static GLEnum Texture;
    [NativeNameAttribute("Name", "GL_COLOR")]
public static GLEnum Color;
    [NativeNameAttribute("Name", "GL_DEPTH")]
public static GLEnum Depth;
    [NativeNameAttribute("Name", "GL_STENCIL")]
public static GLEnum Stencil;
    [NativeNameAttribute("Name", "GL_STENCIL_INDEX")]
public static GLEnum StencilIndex;
    [NativeNameAttribute("Name", "GL_DEPTH_COMPONENT")]
public static GLEnum DepthComponent;
    [NativeNameAttribute("Name", "GL_RED")]
public static GLEnum Red;
    [NativeNameAttribute("Name", "GL_GREEN")]
public static GLEnum Green;
    [NativeNameAttribute("Name", "GL_BLUE")]
public static GLEnum Blue;
    [NativeNameAttribute("Name", "GL_ALPHA")]
public static GLEnum Alpha;
    [NativeNameAttribute("Name", "GL_RGB")]
public static GLEnum Rgb;
    [NativeNameAttribute("Name", "GL_RGBA")]
public static GLEnum Rgba;
    [NativeNameAttribute("Name", "GL_POINT")]
public static GLEnum Point;
    [NativeNameAttribute("Name", "GL_LINE")]
public static GLEnum Line;
    [NativeNameAttribute("Name", "GL_FILL")]
public static GLEnum Fill;
    [NativeNameAttribute("Name", "GL_KEEP")]
public static GLEnum Keep;
    [NativeNameAttribute("Name", "GL_REPLACE")]
public static GLEnum Replace;
    [NativeNameAttribute("Name", "GL_INCR")]
public static GLEnum Incr;
    [NativeNameAttribute("Name", "GL_DECR")]
public static GLEnum Decr;
    [NativeNameAttribute("Name", "GL_VENDOR")]
public static GLEnum Vendor;
    [NativeNameAttribute("Name", "GL_RENDERER")]
public static GLEnum Renderer;
    [NativeNameAttribute("Name", "GL_VERSION")]
public static GLEnum Version;
    [NativeNameAttribute("Name", "GL_EXTENSIONS")]
public static GLEnum Extensions;
    [NativeNameAttribute("Name", "GL_NEAREST")]
public static GLEnum Nearest;
    [NativeNameAttribute("Name", "GL_LINEAR")]
public static GLEnum Linear;
    [NativeNameAttribute("Name", "GL_NEAREST_MIPMAP_NEAREST")]
public static GLEnum NearestMipmapNearest;
    [NativeNameAttribute("Name", "GL_LINEAR_MIPMAP_NEAREST")]
public static GLEnum LinearMipmapNearest;
    [NativeNameAttribute("Name", "GL_NEAREST_MIPMAP_LINEAR")]
public static GLEnum NearestMipmapLinear;
    [NativeNameAttribute("Name", "GL_LINEAR_MIPMAP_LINEAR")]
public static GLEnum LinearMipmapLinear;
    [NativeNameAttribute("Name", "GL_TEXTURE_MAG_FILTER")]
public static GLEnum TextureMagFilter;
    [NativeNameAttribute("Name", "GL_TEXTURE_MIN_FILTER")]
public static GLEnum TextureMinFilter;
    [NativeNameAttribute("Name", "GL_TEXTURE_WRAP_S")]
public static GLEnum TextureWrapS;
    [NativeNameAttribute("Name", "GL_TEXTURE_WRAP_T")]
public static GLEnum TextureWrapT;
    [NativeNameAttribute("Name", "GL_REPEAT")]
public static GLEnum Repeat;
    [NativeNameAttribute("Name", "GL_COLOR_LOGIC_OP")]
public static GLEnum ColorLogicOp;
    [NativeNameAttribute("Name", "GL_POLYGON_OFFSET_UNITS")]
public static GLEnum PolygonOffsetUnits;
    [NativeNameAttribute("Name", "GL_POLYGON_OFFSET_POINT")]
public static GLEnum PolygonOffsetPoint;
    [NativeNameAttribute("Name", "GL_POLYGON_OFFSET_LINE")]
public static GLEnum PolygonOffsetLine;
    [NativeNameAttribute("Name", "GL_POLYGON_OFFSET_FILL")]
public static GLEnum PolygonOffsetFill;
    [NativeNameAttribute("Name", "GL_POLYGON_OFFSET_FACTOR")]
public static GLEnum PolygonOffsetFactor;
    [NativeNameAttribute("Name", "GL_TEXTURE_BINDING_1D")]
public static GLEnum TextureBinding1D;
    [NativeNameAttribute("Name", "GL_TEXTURE_BINDING_2D")]
public static GLEnum TextureBinding2D;
    [NativeNameAttribute("Name", "GL_TEXTURE_INTERNAL_FORMAT")]
public static GLEnum TextureInternalFormat;
    [NativeNameAttribute("Name", "GL_TEXTURE_RED_SIZE")]
public static GLEnum TextureRedSize;
    [NativeNameAttribute("Name", "GL_TEXTURE_GREEN_SIZE")]
public static GLEnum TextureGreenSize;
    [NativeNameAttribute("Name", "GL_TEXTURE_BLUE_SIZE")]
public static GLEnum TextureBlueSize;
    [NativeNameAttribute("Name", "GL_TEXTURE_ALPHA_SIZE")]
public static GLEnum TextureAlphaSize;
    [NativeNameAttribute("Name", "GL_DOUBLE")]
public static GLEnum Double;
    [NativeNameAttribute("Name", "GL_PROXY_TEXTURE_1D")]
public static GLEnum ProxyTexture1D;
    [NativeNameAttribute("Name", "GL_PROXY_TEXTURE_2D")]
public static GLEnum ProxyTexture2D;
    [NativeNameAttribute("Name", "GL_R3_G3_B2")]
public static GLEnum R3G3B2;
    [NativeNameAttribute("Name", "GL_RGB4")]
public static GLEnum Rgb4;
    [NativeNameAttribute("Name", "GL_RGB5")]
public static GLEnum Rgb5;
    [NativeNameAttribute("Name", "GL_RGB8")]
public static GLEnum Rgb8;
    [NativeNameAttribute("Name", "GL_RGB10")]
public static GLEnum Rgb10;
    [NativeNameAttribute("Name", "GL_RGB12")]
public static GLEnum Rgb12;
    [NativeNameAttribute("Name", "GL_RGB16")]
public static GLEnum Rgb16;
    [NativeNameAttribute("Name", "GL_RGBA2")]
public static GLEnum Rgba2;
    [NativeNameAttribute("Name", "GL_RGBA4")]
public static GLEnum Rgba4;
    [NativeNameAttribute("Name", "GL_RGB5_A1")]
public static GLEnum Rgb5A1;
    [NativeNameAttribute("Name", "GL_RGBA8")]
public static GLEnum Rgba8;
    [NativeNameAttribute("Name", "GL_RGB10_A2")]
public static GLEnum Rgb10A2;
    [NativeNameAttribute("Name", "GL_RGBA12")]
public static GLEnum Rgba12;
    [NativeNameAttribute("Name", "GL_RGBA16")]
public static GLEnum Rgba16;
    [NativeNameAttribute("Name", "GL_UNSIGNED_BYTE_3_3_2")]
public static GLEnum UnsignedByte332;
    [NativeNameAttribute("Name", "GL_UNSIGNED_SHORT_4_4_4_4")]
public static GLEnum UnsignedShort4444;
    [NativeNameAttribute("Name", "GL_UNSIGNED_SHORT_5_5_5_1")]
public static GLEnum UnsignedShort5551;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_8_8_8_8")]
public static GLEnum UnsignedInt8888;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_10_10_10_2")]
public static GLEnum UnsignedInt1010102;
    [NativeNameAttribute("Name", "GL_TEXTURE_BINDING_3D")]
public static GLEnum TextureBinding3D;
    [NativeNameAttribute("Name", "GL_PACK_SKIP_IMAGES")]
public static GLEnum PackSkipImages;
    [NativeNameAttribute("Name", "GL_PACK_IMAGE_HEIGHT")]
public static GLEnum PackImageHeight;
    [NativeNameAttribute("Name", "GL_UNPACK_SKIP_IMAGES")]
public static GLEnum UnpackSkipImages;
    [NativeNameAttribute("Name", "GL_UNPACK_IMAGE_HEIGHT")]
public static GLEnum UnpackImageHeight;
    [NativeNameAttribute("Name", "GL_TEXTURE_3D")]
public static GLEnum Texture3D;
    [NativeNameAttribute("Name", "GL_PROXY_TEXTURE_3D")]
public static GLEnum ProxyTexture3D;
    [NativeNameAttribute("Name", "GL_TEXTURE_DEPTH")]
public static GLEnum TextureDepth;
    [NativeNameAttribute("Name", "GL_TEXTURE_WRAP_R")]
public static GLEnum TextureWrapR;
    [NativeNameAttribute("Name", "GL_MAX_3D_TEXTURE_SIZE")]
public static GLEnum Max3DTextureSize;
    [NativeNameAttribute("Name", "GL_UNSIGNED_BYTE_2_3_3_REV")]
public static GLEnum UnsignedByte233Rev;
    [NativeNameAttribute("Name", "GL_UNSIGNED_SHORT_5_6_5")]
public static GLEnum UnsignedShort565;
    [NativeNameAttribute("Name", "GL_UNSIGNED_SHORT_5_6_5_REV")]
public static GLEnum UnsignedShort565Rev;
    [NativeNameAttribute("Name", "GL_UNSIGNED_SHORT_4_4_4_4_REV")]
public static GLEnum UnsignedShort4444Rev;
    [NativeNameAttribute("Name", "GL_UNSIGNED_SHORT_1_5_5_5_REV")]
public static GLEnum UnsignedShort1555Rev;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_8_8_8_8_REV")]
public static GLEnum UnsignedInt8888Rev;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_2_10_10_10_REV")]
public static GLEnum UnsignedInt2101010Rev;
    [NativeNameAttribute("Name", "GL_BGR")]
public static GLEnum Bgr;
    [NativeNameAttribute("Name", "GL_BGRA")]
public static GLEnum Bgra;
    [NativeNameAttribute("Name", "GL_MAX_ELEMENTS_VERTICES")]
public static GLEnum MaxElementsVertices;
    [NativeNameAttribute("Name", "GL_MAX_ELEMENTS_INDICES")]
public static GLEnum MaxElementsIndices;
    [NativeNameAttribute("Name", "GL_CLAMP_TO_EDGE")]
public static GLEnum ClampToEdge;
    [NativeNameAttribute("Name", "GL_TEXTURE_MIN_LOD")]
public static GLEnum TextureMinLod;
    [NativeNameAttribute("Name", "GL_TEXTURE_MAX_LOD")]
public static GLEnum TextureMaxLod;
    [NativeNameAttribute("Name", "GL_TEXTURE_BASE_LEVEL")]
public static GLEnum TextureBaseLevel;
    [NativeNameAttribute("Name", "GL_TEXTURE_MAX_LEVEL")]
public static GLEnum TextureMaxLevel;
    [NativeNameAttribute("Name", "GL_SMOOTH_POINT_SIZE_RANGE")]
public static GLEnum SmoothPointSizeRange;
    [NativeNameAttribute("Name", "GL_SMOOTH_POINT_SIZE_GRANULARITY")]
public static GLEnum SmoothPointSizeGranularity;
    [NativeNameAttribute("Name", "GL_SMOOTH_LINE_WIDTH_RANGE")]
public static GLEnum SmoothLineWidthRange;
    [NativeNameAttribute("Name", "GL_SMOOTH_LINE_WIDTH_GRANULARITY")]
public static GLEnum SmoothLineWidthGranularity;
    [NativeNameAttribute("Name", "GL_ALIASED_LINE_WIDTH_RANGE")]
public static GLEnum AliasedLineWidthRange;
    [NativeNameAttribute("Name", "GL_TEXTURE0")]
public static GLEnum Texture0;
    [NativeNameAttribute("Name", "GL_TEXTURE1")]
public static GLEnum Texture1;
    [NativeNameAttribute("Name", "GL_TEXTURE2")]
public static GLEnum Texture2;
    [NativeNameAttribute("Name", "GL_TEXTURE3")]
public static GLEnum Texture3;
    [NativeNameAttribute("Name", "GL_TEXTURE4")]
public static GLEnum Texture4;
    [NativeNameAttribute("Name", "GL_TEXTURE5")]
public static GLEnum Texture5;
    [NativeNameAttribute("Name", "GL_TEXTURE6")]
public static GLEnum Texture6;
    [NativeNameAttribute("Name", "GL_TEXTURE7")]
public static GLEnum Texture7;
    [NativeNameAttribute("Name", "GL_TEXTURE8")]
public static GLEnum Texture8;
    [NativeNameAttribute("Name", "GL_TEXTURE9")]
public static GLEnum Texture9;
    [NativeNameAttribute("Name", "GL_TEXTURE10")]
public static GLEnum Texture10;
    [NativeNameAttribute("Name", "GL_TEXTURE11")]
public static GLEnum Texture11;
    [NativeNameAttribute("Name", "GL_TEXTURE12")]
public static GLEnum Texture12;
    [NativeNameAttribute("Name", "GL_TEXTURE13")]
public static GLEnum Texture13;
    [NativeNameAttribute("Name", "GL_TEXTURE14")]
public static GLEnum Texture14;
    [NativeNameAttribute("Name", "GL_TEXTURE15")]
public static GLEnum Texture15;
    [NativeNameAttribute("Name", "GL_TEXTURE16")]
public static GLEnum Texture16;
    [NativeNameAttribute("Name", "GL_TEXTURE17")]
public static GLEnum Texture17;
    [NativeNameAttribute("Name", "GL_TEXTURE18")]
public static GLEnum Texture18;
    [NativeNameAttribute("Name", "GL_TEXTURE19")]
public static GLEnum Texture19;
    [NativeNameAttribute("Name", "GL_TEXTURE20")]
public static GLEnum Texture20;
    [NativeNameAttribute("Name", "GL_TEXTURE21")]
public static GLEnum Texture21;
    [NativeNameAttribute("Name", "GL_TEXTURE22")]
public static GLEnum Texture22;
    [NativeNameAttribute("Name", "GL_TEXTURE23")]
public static GLEnum Texture23;
    [NativeNameAttribute("Name", "GL_TEXTURE24")]
public static GLEnum Texture24;
    [NativeNameAttribute("Name", "GL_TEXTURE25")]
public static GLEnum Texture25;
    [NativeNameAttribute("Name", "GL_TEXTURE26")]
public static GLEnum Texture26;
    [NativeNameAttribute("Name", "GL_TEXTURE27")]
public static GLEnum Texture27;
    [NativeNameAttribute("Name", "GL_TEXTURE28")]
public static GLEnum Texture28;
    [NativeNameAttribute("Name", "GL_TEXTURE29")]
public static GLEnum Texture29;
    [NativeNameAttribute("Name", "GL_TEXTURE30")]
public static GLEnum Texture30;
    [NativeNameAttribute("Name", "GL_TEXTURE31")]
public static GLEnum Texture31;
    [NativeNameAttribute("Name", "GL_ACTIVE_TEXTURE")]
public static GLEnum ActiveTexture;
    [NativeNameAttribute("Name", "GL_MULTISAMPLE")]
public static GLEnum Multisample;
    [NativeNameAttribute("Name", "GL_SAMPLE_ALPHA_TO_COVERAGE")]
public static GLEnum SampleAlphaToCoverage;
    [NativeNameAttribute("Name", "GL_SAMPLE_ALPHA_TO_ONE")]
public static GLEnum SampleAlphaToOne;
    [NativeNameAttribute("Name", "GL_SAMPLE_COVERAGE")]
public static GLEnum SampleCoverage;
    [NativeNameAttribute("Name", "GL_SAMPLE_BUFFERS")]
public static GLEnum SampleBuffers;
    [NativeNameAttribute("Name", "GL_SAMPLES")]
public static GLEnum Samples;
    [NativeNameAttribute("Name", "GL_SAMPLE_COVERAGE_VALUE")]
public static GLEnum SampleCoverageValue;
    [NativeNameAttribute("Name", "GL_SAMPLE_COVERAGE_INVERT")]
public static GLEnum SampleCoverageInvert;
    [NativeNameAttribute("Name", "GL_TEXTURE_CUBE_MAP")]
public static GLEnum TextureCubeMap;
    [NativeNameAttribute("Name", "GL_TEXTURE_BINDING_CUBE_MAP")]
public static GLEnum TextureBindingCubeMap;
    [NativeNameAttribute("Name", "GL_TEXTURE_CUBE_MAP_POSITIVE_X")]
public static GLEnum TextureCubeMapPositiveX;
    [NativeNameAttribute("Name", "GL_TEXTURE_CUBE_MAP_NEGATIVE_X")]
public static GLEnum TextureCubeMapNegativeX;
    [NativeNameAttribute("Name", "GL_TEXTURE_CUBE_MAP_POSITIVE_Y")]
public static GLEnum TextureCubeMapPositiveY;
    [NativeNameAttribute("Name", "GL_TEXTURE_CUBE_MAP_NEGATIVE_Y")]
public static GLEnum TextureCubeMapNegativeY;
    [NativeNameAttribute("Name", "GL_TEXTURE_CUBE_MAP_POSITIVE_Z")]
public static GLEnum TextureCubeMapPositiveZ;
    [NativeNameAttribute("Name", "GL_TEXTURE_CUBE_MAP_NEGATIVE_Z")]
public static GLEnum TextureCubeMapNegativeZ;
    [NativeNameAttribute("Name", "GL_PROXY_TEXTURE_CUBE_MAP")]
public static GLEnum ProxyTextureCubeMap;
    [NativeNameAttribute("Name", "GL_MAX_CUBE_MAP_TEXTURE_SIZE")]
public static GLEnum MaxCubeMapTextureSize;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGB")]
public static GLEnum CompressedRgb;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA")]
public static GLEnum CompressedRgba;
    [NativeNameAttribute("Name", "GL_TEXTURE_COMPRESSION_HINT")]
public static GLEnum TextureCompressionHint;
    [NativeNameAttribute("Name", "GL_TEXTURE_COMPRESSED_IMAGE_SIZE")]
public static GLEnum TextureCompressedImageSize;
    [NativeNameAttribute("Name", "GL_TEXTURE_COMPRESSED")]
public static GLEnum TextureCompressed;
    [NativeNameAttribute("Name", "GL_NUM_COMPRESSED_TEXTURE_FORMATS")]
public static GLEnum NumCompressedTextureFormats;
    [NativeNameAttribute("Name", "GL_COMPRESSED_TEXTURE_FORMATS")]
public static GLEnum CompressedTextureFormats;
    [NativeNameAttribute("Name", "GL_CLAMP_TO_BORDER")]
public static GLEnum ClampToBorder;
    [NativeNameAttribute("Name", "GL_BLEND_DST_RGB")]
public static GLEnum BlendDstRgb;
    [NativeNameAttribute("Name", "GL_BLEND_SRC_RGB")]
public static GLEnum BlendSrcRgb;
    [NativeNameAttribute("Name", "GL_BLEND_DST_ALPHA")]
public static GLEnum BlendDstAlpha;
    [NativeNameAttribute("Name", "GL_BLEND_SRC_ALPHA")]
public static GLEnum BlendSrcAlpha;
    [NativeNameAttribute("Name", "GL_POINT_FADE_THRESHOLD_SIZE")]
public static GLEnum PointFadeThresholdSize;
    [NativeNameAttribute("Name", "GL_DEPTH_COMPONENT16")]
public static GLEnum DepthComponent16;
    [NativeNameAttribute("Name", "GL_DEPTH_COMPONENT24")]
public static GLEnum DepthComponent24;
    [NativeNameAttribute("Name", "GL_DEPTH_COMPONENT32")]
public static GLEnum DepthComponent32;
    [NativeNameAttribute("Name", "GL_MIRRORED_REPEAT")]
public static GLEnum MirroredRepeat;
    [NativeNameAttribute("Name", "GL_MAX_TEXTURE_LOD_BIAS")]
public static GLEnum MaxTextureLodBias;
    [NativeNameAttribute("Name", "GL_TEXTURE_LOD_BIAS")]
public static GLEnum TextureLodBias;
    [NativeNameAttribute("Name", "GL_INCR_WRAP")]
public static GLEnum IncrWrap;
    [NativeNameAttribute("Name", "GL_DECR_WRAP")]
public static GLEnum DecrWrap;
    [NativeNameAttribute("Name", "GL_TEXTURE_DEPTH_SIZE")]
public static GLEnum TextureDepthSize;
    [NativeNameAttribute("Name", "GL_TEXTURE_COMPARE_MODE")]
public static GLEnum TextureCompareMode;
    [NativeNameAttribute("Name", "GL_TEXTURE_COMPARE_FUNC")]
public static GLEnum TextureCompareFunc;
    [NativeNameAttribute("Name", "GL_BLEND_COLOR")]
public static GLEnum BlendColor;
    [NativeNameAttribute("Name", "GL_BLEND_EQUATION")]
public static GLEnum BlendEquation;
    [NativeNameAttribute("Name", "GL_CONSTANT_COLOR")]
public static GLEnum ConstantColor;
    [NativeNameAttribute("Name", "GL_ONE_MINUS_CONSTANT_COLOR")]
public static GLEnum OneMinusConstantColor;
    [NativeNameAttribute("Name", "GL_CONSTANT_ALPHA")]
public static GLEnum ConstantAlpha;
    [NativeNameAttribute("Name", "GL_ONE_MINUS_CONSTANT_ALPHA")]
public static GLEnum OneMinusConstantAlpha;
    [NativeNameAttribute("Name", "GL_FUNC_ADD")]
public static GLEnum FuncAdd;
    [NativeNameAttribute("Name", "GL_FUNC_REVERSE_SUBTRACT")]
public static GLEnum FuncReverseSubtract;
    [NativeNameAttribute("Name", "GL_FUNC_SUBTRACT")]
public static GLEnum FuncSubtract;
    [NativeNameAttribute("Name", "GL_MIN")]
public static GLEnum Min;
    [NativeNameAttribute("Name", "GL_MAX")]
public static GLEnum Max;
    [NativeNameAttribute("Name", "GL_BUFFER_SIZE")]
public static GLEnum BufferSize;
    [NativeNameAttribute("Name", "GL_BUFFER_USAGE")]
public static GLEnum BufferUsage;
    [NativeNameAttribute("Name", "GL_QUERY_COUNTER_BITS")]
public static GLEnum QueryCounterBits;
    [NativeNameAttribute("Name", "GL_CURRENT_QUERY")]
public static GLEnum CurrentQuery;
    [NativeNameAttribute("Name", "GL_QUERY_RESULT")]
public static GLEnum QueryResult;
    [NativeNameAttribute("Name", "GL_QUERY_RESULT_AVAILABLE")]
public static GLEnum QueryResultAvailable;
    [NativeNameAttribute("Name", "GL_ARRAY_BUFFER")]
public static GLEnum ArrayBuffer;
    [NativeNameAttribute("Name", "GL_ELEMENT_ARRAY_BUFFER")]
public static GLEnum ElementArrayBuffer;
    [NativeNameAttribute("Name", "GL_ARRAY_BUFFER_BINDING")]
public static GLEnum ArrayBufferBinding;
    [NativeNameAttribute("Name", "GL_ELEMENT_ARRAY_BUFFER_BINDING")]
public static GLEnum ElementArrayBufferBinding;
    [NativeNameAttribute("Name", "GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING")]
public static GLEnum VertexAttribArrayBufferBinding;
    [NativeNameAttribute("Name", "GL_READ_ONLY")]
public static GLEnum ReadOnly;
    [NativeNameAttribute("Name", "GL_WRITE_ONLY")]
public static GLEnum WriteOnly;
    [NativeNameAttribute("Name", "GL_READ_WRITE")]
public static GLEnum ReadWrite;
    [NativeNameAttribute("Name", "GL_BUFFER_ACCESS")]
public static GLEnum BufferAccess;
    [NativeNameAttribute("Name", "GL_BUFFER_MAPPED")]
public static GLEnum BufferMapped;
    [NativeNameAttribute("Name", "GL_BUFFER_MAP_POINTER")]
public static GLEnum BufferMapPointer;
    [NativeNameAttribute("Name", "GL_STREAM_DRAW")]
public static GLEnum StreamDraw;
    [NativeNameAttribute("Name", "GL_STREAM_READ")]
public static GLEnum StreamRead;
    [NativeNameAttribute("Name", "GL_STREAM_COPY")]
public static GLEnum StreamCopy;
    [NativeNameAttribute("Name", "GL_STATIC_DRAW")]
public static GLEnum StaticDraw;
    [NativeNameAttribute("Name", "GL_STATIC_READ")]
public static GLEnum StaticRead;
    [NativeNameAttribute("Name", "GL_STATIC_COPY")]
public static GLEnum StaticCopy;
    [NativeNameAttribute("Name", "GL_DYNAMIC_DRAW")]
public static GLEnum DynamicDraw;
    [NativeNameAttribute("Name", "GL_DYNAMIC_READ")]
public static GLEnum DynamicRead;
    [NativeNameAttribute("Name", "GL_DYNAMIC_COPY")]
public static GLEnum DynamicCopy;
    [NativeNameAttribute("Name", "GL_SAMPLES_PASSED")]
public static GLEnum SamplesPassed;
    [NativeNameAttribute("Name", "GL_SRC1_ALPHA")]
public static GLEnum Src1Alpha;
    [NativeNameAttribute("Name", "GL_BLEND_EQUATION_RGB")]
public static GLEnum BlendEquationRgb;
    [NativeNameAttribute("Name", "GL_VERTEX_ATTRIB_ARRAY_ENABLED")]
public static GLEnum VertexAttribArrayEnabled;
    [NativeNameAttribute("Name", "GL_VERTEX_ATTRIB_ARRAY_SIZE")]
public static GLEnum VertexAttribArraySize;
    [NativeNameAttribute("Name", "GL_VERTEX_ATTRIB_ARRAY_STRIDE")]
public static GLEnum VertexAttribArrayStride;
    [NativeNameAttribute("Name", "GL_VERTEX_ATTRIB_ARRAY_TYPE")]
public static GLEnum VertexAttribArrayType;
    [NativeNameAttribute("Name", "GL_CURRENT_VERTEX_ATTRIB")]
public static GLEnum CurrentVertexAttrib;
    [NativeNameAttribute("Name", "GL_VERTEX_PROGRAM_POINT_SIZE")]
public static GLEnum VertexProgramPointSize;
    [NativeNameAttribute("Name", "GL_VERTEX_ATTRIB_ARRAY_POINTER")]
public static GLEnum VertexAttribArrayPointer;
    [NativeNameAttribute("Name", "GL_STENCIL_BACK_FUNC")]
public static GLEnum StencilBackFunc;
    [NativeNameAttribute("Name", "GL_STENCIL_BACK_FAIL")]
public static GLEnum StencilBackFail;
    [NativeNameAttribute("Name", "GL_STENCIL_BACK_PASS_DEPTH_FAIL")]
public static GLEnum StencilBackPassDepthFail;
    [NativeNameAttribute("Name", "GL_STENCIL_BACK_PASS_DEPTH_PASS")]
public static GLEnum StencilBackPassDepthPass;
    [NativeNameAttribute("Name", "GL_MAX_DRAW_BUFFERS")]
public static GLEnum MaxDrawBuffers;
    [NativeNameAttribute("Name", "GL_DRAW_BUFFER0")]
public static GLEnum DrawBuffer0;
    [NativeNameAttribute("Name", "GL_DRAW_BUFFER1")]
public static GLEnum DrawBuffer1;
    [NativeNameAttribute("Name", "GL_DRAW_BUFFER2")]
public static GLEnum DrawBuffer2;
    [NativeNameAttribute("Name", "GL_DRAW_BUFFER3")]
public static GLEnum DrawBuffer3;
    [NativeNameAttribute("Name", "GL_DRAW_BUFFER4")]
public static GLEnum DrawBuffer4;
    [NativeNameAttribute("Name", "GL_DRAW_BUFFER5")]
public static GLEnum DrawBuffer5;
    [NativeNameAttribute("Name", "GL_DRAW_BUFFER6")]
public static GLEnum DrawBuffer6;
    [NativeNameAttribute("Name", "GL_DRAW_BUFFER7")]
public static GLEnum DrawBuffer7;
    [NativeNameAttribute("Name", "GL_DRAW_BUFFER8")]
public static GLEnum DrawBuffer8;
    [NativeNameAttribute("Name", "GL_DRAW_BUFFER9")]
public static GLEnum DrawBuffer9;
    [NativeNameAttribute("Name", "GL_DRAW_BUFFER10")]
public static GLEnum DrawBuffer10;
    [NativeNameAttribute("Name", "GL_DRAW_BUFFER11")]
public static GLEnum DrawBuffer11;
    [NativeNameAttribute("Name", "GL_DRAW_BUFFER12")]
public static GLEnum DrawBuffer12;
    [NativeNameAttribute("Name", "GL_DRAW_BUFFER13")]
public static GLEnum DrawBuffer13;
    [NativeNameAttribute("Name", "GL_DRAW_BUFFER14")]
public static GLEnum DrawBuffer14;
    [NativeNameAttribute("Name", "GL_DRAW_BUFFER15")]
public static GLEnum DrawBuffer15;
    [NativeNameAttribute("Name", "GL_BLEND_EQUATION_ALPHA")]
public static GLEnum BlendEquationAlpha;
    [NativeNameAttribute("Name", "GL_MAX_VERTEX_ATTRIBS")]
public static GLEnum MaxVertexAttribs;
    [NativeNameAttribute("Name", "GL_VERTEX_ATTRIB_ARRAY_NORMALIZED")]
public static GLEnum VertexAttribArrayNormalized;
    [NativeNameAttribute("Name", "GL_MAX_TEXTURE_IMAGE_UNITS")]
public static GLEnum MaxTextureImageUnits;
    [NativeNameAttribute("Name", "GL_FRAGMENT_SHADER")]
public static GLEnum FragmentShader;
    [NativeNameAttribute("Name", "GL_VERTEX_SHADER")]
public static GLEnum VertexShader;
    [NativeNameAttribute("Name", "GL_MAX_FRAGMENT_UNIFORM_COMPONENTS")]
public static GLEnum MaxFragmentUniformComponents;
    [NativeNameAttribute("Name", "GL_MAX_VERTEX_UNIFORM_COMPONENTS")]
public static GLEnum MaxVertexUniformComponents;
    [NativeNameAttribute("Name", "GL_MAX_VARYING_FLOATS")]
public static GLEnum MaxVaryingFloats;
    [NativeNameAttribute("Name", "GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS")]
public static GLEnum MaxVertexTextureImageUnits;
    [NativeNameAttribute("Name", "GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS")]
public static GLEnum MaxCombinedTextureImageUnits;
    [NativeNameAttribute("Name", "GL_SHADER_TYPE")]
public static GLEnum ShaderType;
    [NativeNameAttribute("Name", "GL_FLOAT_VEC2")]
public static GLEnum FloatVec2;
    [NativeNameAttribute("Name", "GL_FLOAT_VEC3")]
public static GLEnum FloatVec3;
    [NativeNameAttribute("Name", "GL_FLOAT_VEC4")]
public static GLEnum FloatVec4;
    [NativeNameAttribute("Name", "GL_INT_VEC2")]
public static GLEnum IntVec2;
    [NativeNameAttribute("Name", "GL_INT_VEC3")]
public static GLEnum IntVec3;
    [NativeNameAttribute("Name", "GL_INT_VEC4")]
public static GLEnum IntVec4;
    [NativeNameAttribute("Name", "GL_BOOL")]
public static GLEnum Bool;
    [NativeNameAttribute("Name", "GL_BOOL_VEC2")]
public static GLEnum BoolVec2;
    [NativeNameAttribute("Name", "GL_BOOL_VEC3")]
public static GLEnum BoolVec3;
    [NativeNameAttribute("Name", "GL_BOOL_VEC4")]
public static GLEnum BoolVec4;
    [NativeNameAttribute("Name", "GL_FLOAT_MAT2")]
public static GLEnum FloatMat2;
    [NativeNameAttribute("Name", "GL_FLOAT_MAT3")]
public static GLEnum FloatMat3;
    [NativeNameAttribute("Name", "GL_FLOAT_MAT4")]
public static GLEnum FloatMat4;
    [NativeNameAttribute("Name", "GL_SAMPLER_1D")]
public static GLEnum Sampler1D;
    [NativeNameAttribute("Name", "GL_SAMPLER_2D")]
public static GLEnum Sampler2D;
    [NativeNameAttribute("Name", "GL_SAMPLER_3D")]
public static GLEnum Sampler3D;
    [NativeNameAttribute("Name", "GL_SAMPLER_CUBE")]
public static GLEnum SamplerCube;
    [NativeNameAttribute("Name", "GL_SAMPLER_1D_SHADOW")]
public static GLEnum Sampler1DShadow;
    [NativeNameAttribute("Name", "GL_SAMPLER_2D_SHADOW")]
public static GLEnum Sampler2DShadow;
    [NativeNameAttribute("Name", "GL_DELETE_STATUS")]
public static GLEnum DeleteStatus;
    [NativeNameAttribute("Name", "GL_COMPILE_STATUS")]
public static GLEnum CompileStatus;
    [NativeNameAttribute("Name", "GL_LINK_STATUS")]
public static GLEnum LinkStatus;
    [NativeNameAttribute("Name", "GL_VALIDATE_STATUS")]
public static GLEnum ValidateStatus;
    [NativeNameAttribute("Name", "GL_INFO_LOG_LENGTH")]
public static GLEnum InfoLogLength;
    [NativeNameAttribute("Name", "GL_ATTACHED_SHADERS")]
public static GLEnum AttachedShaders;
    [NativeNameAttribute("Name", "GL_ACTIVE_UNIFORMS")]
public static GLEnum ActiveUniforms;
    [NativeNameAttribute("Name", "GL_ACTIVE_UNIFORM_MAX_LENGTH")]
public static GLEnum ActiveUniformMaxLength;
    [NativeNameAttribute("Name", "GL_SHADER_SOURCE_LENGTH")]
public static GLEnum ShaderSourceLength;
    [NativeNameAttribute("Name", "GL_ACTIVE_ATTRIBUTES")]
public static GLEnum ActiveAttributes;
    [NativeNameAttribute("Name", "GL_ACTIVE_ATTRIBUTE_MAX_LENGTH")]
public static GLEnum ActiveAttributeMaxLength;
    [NativeNameAttribute("Name", "GL_FRAGMENT_SHADER_DERIVATIVE_HINT")]
public static GLEnum FragmentShaderDerivativeHint;
    [NativeNameAttribute("Name", "GL_SHADING_LANGUAGE_VERSION")]
public static GLEnum ShadingLanguageVersion;
    [NativeNameAttribute("Name", "GL_CURRENT_PROGRAM")]
public static GLEnum CurrentProgram;
    [NativeNameAttribute("Name", "GL_POINT_SPRITE_COORD_ORIGIN")]
public static GLEnum PointSpriteCoordOrigin;
    [NativeNameAttribute("Name", "GL_LOWER_LEFT")]
public static GLEnum LowerLeft;
    [NativeNameAttribute("Name", "GL_UPPER_LEFT")]
public static GLEnum UpperLeft;
    [NativeNameAttribute("Name", "GL_STENCIL_BACK_REF")]
public static GLEnum StencilBackRef;
    [NativeNameAttribute("Name", "GL_STENCIL_BACK_VALUE_MASK")]
public static GLEnum StencilBackValueMask;
    [NativeNameAttribute("Name", "GL_STENCIL_BACK_WRITEMASK")]
public static GLEnum StencilBackWritemask;
    [NativeNameAttribute("Name", "GL_PIXEL_PACK_BUFFER")]
public static GLEnum PixelPackBuffer;
    [NativeNameAttribute("Name", "GL_PIXEL_UNPACK_BUFFER")]
public static GLEnum PixelUnpackBuffer;
    [NativeNameAttribute("Name", "GL_PIXEL_PACK_BUFFER_BINDING")]
public static GLEnum PixelPackBufferBinding;
    [NativeNameAttribute("Name", "GL_PIXEL_UNPACK_BUFFER_BINDING")]
public static GLEnum PixelUnpackBufferBinding;
    [NativeNameAttribute("Name", "GL_FLOAT_MAT2x3")]
public static GLEnum FloatMat2x3;
    [NativeNameAttribute("Name", "GL_FLOAT_MAT2x4")]
public static GLEnum FloatMat2x4;
    [NativeNameAttribute("Name", "GL_FLOAT_MAT3x2")]
public static GLEnum FloatMat3x2;
    [NativeNameAttribute("Name", "GL_FLOAT_MAT3x4")]
public static GLEnum FloatMat3x4;
    [NativeNameAttribute("Name", "GL_FLOAT_MAT4x2")]
public static GLEnum FloatMat4x2;
    [NativeNameAttribute("Name", "GL_FLOAT_MAT4x3")]
public static GLEnum FloatMat4x3;
    [NativeNameAttribute("Name", "GL_SRGB")]
public static GLEnum Srgb;
    [NativeNameAttribute("Name", "GL_SRGB8")]
public static GLEnum Srgb8;
    [NativeNameAttribute("Name", "GL_SRGB_ALPHA")]
public static GLEnum SrgbAlpha;
    [NativeNameAttribute("Name", "GL_SRGB8_ALPHA8")]
public static GLEnum Srgb8Alpha8;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB")]
public static GLEnum CompressedSrgb;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB_ALPHA")]
public static GLEnum CompressedSrgbAlpha;
    [NativeNameAttribute("Name", "GL_COMPARE_REF_TO_TEXTURE")]
public static GLEnum CompareRefToTexture;
    [NativeNameAttribute("Name", "GL_CLIP_DISTANCE0")]
public static GLEnum ClipDistance0;
    [NativeNameAttribute("Name", "GL_CLIP_DISTANCE1")]
public static GLEnum ClipDistance1;
    [NativeNameAttribute("Name", "GL_CLIP_DISTANCE2")]
public static GLEnum ClipDistance2;
    [NativeNameAttribute("Name", "GL_CLIP_DISTANCE3")]
public static GLEnum ClipDistance3;
    [NativeNameAttribute("Name", "GL_CLIP_DISTANCE4")]
public static GLEnum ClipDistance4;
    [NativeNameAttribute("Name", "GL_CLIP_DISTANCE5")]
public static GLEnum ClipDistance5;
    [NativeNameAttribute("Name", "GL_CLIP_DISTANCE6")]
public static GLEnum ClipDistance6;
    [NativeNameAttribute("Name", "GL_CLIP_DISTANCE7")]
public static GLEnum ClipDistance7;
    [NativeNameAttribute("Name", "GL_MAX_CLIP_DISTANCES")]
public static GLEnum MaxClipDistances;
    [NativeNameAttribute("Name", "GL_MAJOR_VERSION")]
public static GLEnum MajorVersion;
    [NativeNameAttribute("Name", "GL_MINOR_VERSION")]
public static GLEnum MinorVersion;
    [NativeNameAttribute("Name", "GL_NUM_EXTENSIONS")]
public static GLEnum NumExtensions;
    [NativeNameAttribute("Name", "GL_CONTEXT_FLAGS")]
public static GLEnum ContextFlags;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RED")]
public static GLEnum CompressedRed;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RG")]
public static GLEnum CompressedRG;
    [NativeNameAttribute("Name", "GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT")]
public static GLEnum ContextFlagForwardCompatibleBit;
    [NativeNameAttribute("Name", "GL_RGBA32F")]
public static GLEnum Rgba32f;
    [NativeNameAttribute("Name", "GL_RGB32F")]
public static GLEnum Rgb32f;
    [NativeNameAttribute("Name", "GL_RGBA16F")]
public static GLEnum Rgba16f;
    [NativeNameAttribute("Name", "GL_RGB16F")]
public static GLEnum Rgb16f;
    [NativeNameAttribute("Name", "GL_VERTEX_ATTRIB_ARRAY_INTEGER")]
public static GLEnum VertexAttribArrayInteger;
    [NativeNameAttribute("Name", "GL_MAX_ARRAY_TEXTURE_LAYERS")]
public static GLEnum MaxArrayTextureLayers;
    [NativeNameAttribute("Name", "GL_MIN_PROGRAM_TEXEL_OFFSET")]
public static GLEnum MinProgramTexelOffset;
    [NativeNameAttribute("Name", "GL_MAX_PROGRAM_TEXEL_OFFSET")]
public static GLEnum MaxProgramTexelOffset;
    [NativeNameAttribute("Name", "GL_CLAMP_READ_COLOR")]
public static GLEnum ClampReadColor;
    [NativeNameAttribute("Name", "GL_FIXED_ONLY")]
public static GLEnum FixedOnly;
    [NativeNameAttribute("Name", "GL_MAX_VARYING_COMPONENTS")]
public static GLEnum MaxVaryingComponents;
    [NativeNameAttribute("Name", "GL_TEXTURE_1D_ARRAY")]
public static GLEnum Texture1DArray;
    [NativeNameAttribute("Name", "GL_PROXY_TEXTURE_1D_ARRAY")]
public static GLEnum ProxyTexture1DArray;
    [NativeNameAttribute("Name", "GL_TEXTURE_2D_ARRAY")]
public static GLEnum Texture2DArray;
    [NativeNameAttribute("Name", "GL_PROXY_TEXTURE_2D_ARRAY")]
public static GLEnum ProxyTexture2DArray;
    [NativeNameAttribute("Name", "GL_TEXTURE_BINDING_1D_ARRAY")]
public static GLEnum TextureBinding1DArray;
    [NativeNameAttribute("Name", "GL_TEXTURE_BINDING_2D_ARRAY")]
public static GLEnum TextureBinding2DArray;
    [NativeNameAttribute("Name", "GL_R11F_G11F_B10F")]
public static GLEnum R11fG11fB10f;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_10F_11F_11F_REV")]
public static GLEnum UnsignedInt10f11f11fRev;
    [NativeNameAttribute("Name", "GL_RGB9_E5")]
public static GLEnum Rgb9E5;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_5_9_9_9_REV")]
public static GLEnum UnsignedInt5999Rev;
    [NativeNameAttribute("Name", "GL_TEXTURE_SHARED_SIZE")]
public static GLEnum TextureSharedSize;
    [NativeNameAttribute("Name", "GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH")]
public static GLEnum TransformFeedbackVaryingMaxLength;
    [NativeNameAttribute("Name", "GL_TRANSFORM_FEEDBACK_BUFFER_MODE")]
public static GLEnum TransformFeedbackBufferMode;
    [NativeNameAttribute("Name", "GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS")]
public static GLEnum MaxTransformFeedbackSeparateComponents;
    [NativeNameAttribute("Name", "GL_TRANSFORM_FEEDBACK_VARYINGS")]
public static GLEnum TransformFeedbackVaryings;
    [NativeNameAttribute("Name", "GL_TRANSFORM_FEEDBACK_BUFFER_START")]
public static GLEnum TransformFeedbackBufferStart;
    [NativeNameAttribute("Name", "GL_TRANSFORM_FEEDBACK_BUFFER_SIZE")]
public static GLEnum TransformFeedbackBufferSize;
    [NativeNameAttribute("Name", "GL_PRIMITIVES_GENERATED")]
public static GLEnum PrimitivesGenerated;
    [NativeNameAttribute("Name", "GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN")]
public static GLEnum TransformFeedbackPrimitivesWritten;
    [NativeNameAttribute("Name", "GL_RASTERIZER_DISCARD")]
public static GLEnum RasterizerDiscard;
    [NativeNameAttribute("Name", "GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS")]
public static GLEnum MaxTransformFeedbackInterleavedComponents;
    [NativeNameAttribute("Name", "GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS")]
public static GLEnum MaxTransformFeedbackSeparateAttribs;
    [NativeNameAttribute("Name", "GL_INTERLEAVED_ATTRIBS")]
public static GLEnum InterleavedAttribs;
    [NativeNameAttribute("Name", "GL_SEPARATE_ATTRIBS")]
public static GLEnum SeparateAttribs;
    [NativeNameAttribute("Name", "GL_TRANSFORM_FEEDBACK_BUFFER")]
public static GLEnum TransformFeedbackBuffer;
    [NativeNameAttribute("Name", "GL_TRANSFORM_FEEDBACK_BUFFER_BINDING")]
public static GLEnum TransformFeedbackBufferBinding;
    [NativeNameAttribute("Name", "GL_RGBA32UI")]
public static GLEnum Rgba32ui;
    [NativeNameAttribute("Name", "GL_RGB32UI")]
public static GLEnum Rgb32ui;
    [NativeNameAttribute("Name", "GL_RGBA16UI")]
public static GLEnum Rgba16ui;
    [NativeNameAttribute("Name", "GL_RGB16UI")]
public static GLEnum Rgb16ui;
    [NativeNameAttribute("Name", "GL_RGBA8UI")]
public static GLEnum Rgba8ui;
    [NativeNameAttribute("Name", "GL_RGB8UI")]
public static GLEnum Rgb8ui;
    [NativeNameAttribute("Name", "GL_RGBA32I")]
public static GLEnum Rgba32i;
    [NativeNameAttribute("Name", "GL_RGB32I")]
public static GLEnum Rgb32i;
    [NativeNameAttribute("Name", "GL_RGBA16I")]
public static GLEnum Rgba16i;
    [NativeNameAttribute("Name", "GL_RGB16I")]
public static GLEnum Rgb16i;
    [NativeNameAttribute("Name", "GL_RGBA8I")]
public static GLEnum Rgba8i;
    [NativeNameAttribute("Name", "GL_RGB8I")]
public static GLEnum Rgb8i;
    [NativeNameAttribute("Name", "GL_RED_INTEGER")]
public static GLEnum RedInteger;
    [NativeNameAttribute("Name", "GL_GREEN_INTEGER")]
public static GLEnum GreenInteger;
    [NativeNameAttribute("Name", "GL_BLUE_INTEGER")]
public static GLEnum BlueInteger;
    [NativeNameAttribute("Name", "GL_RGB_INTEGER")]
public static GLEnum RgbInteger;
    [NativeNameAttribute("Name", "GL_RGBA_INTEGER")]
public static GLEnum RgbaInteger;
    [NativeNameAttribute("Name", "GL_BGR_INTEGER")]
public static GLEnum BgrInteger;
    [NativeNameAttribute("Name", "GL_BGRA_INTEGER")]
public static GLEnum BgraInteger;
    [NativeNameAttribute("Name", "GL_SAMPLER_1D_ARRAY")]
public static GLEnum Sampler1DArray;
    [NativeNameAttribute("Name", "GL_SAMPLER_2D_ARRAY")]
public static GLEnum Sampler2DArray;
    [NativeNameAttribute("Name", "GL_SAMPLER_1D_ARRAY_SHADOW")]
public static GLEnum Sampler1DArrayShadow;
    [NativeNameAttribute("Name", "GL_SAMPLER_2D_ARRAY_SHADOW")]
public static GLEnum Sampler2DArrayShadow;
    [NativeNameAttribute("Name", "GL_SAMPLER_CUBE_SHADOW")]
public static GLEnum SamplerCubeShadow;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_VEC2")]
public static GLEnum UnsignedIntVec2;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_VEC3")]
public static GLEnum UnsignedIntVec3;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_VEC4")]
public static GLEnum UnsignedIntVec4;
    [NativeNameAttribute("Name", "GL_INT_SAMPLER_1D")]
public static GLEnum IntSampler1D;
    [NativeNameAttribute("Name", "GL_INT_SAMPLER_2D")]
public static GLEnum IntSampler2D;
    [NativeNameAttribute("Name", "GL_INT_SAMPLER_3D")]
public static GLEnum IntSampler3D;
    [NativeNameAttribute("Name", "GL_INT_SAMPLER_CUBE")]
public static GLEnum IntSamplerCube;
    [NativeNameAttribute("Name", "GL_INT_SAMPLER_1D_ARRAY")]
public static GLEnum IntSampler1DArray;
    [NativeNameAttribute("Name", "GL_INT_SAMPLER_2D_ARRAY")]
public static GLEnum IntSampler2DArray;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_SAMPLER_1D")]
public static GLEnum UnsignedIntSampler1D;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_SAMPLER_2D")]
public static GLEnum UnsignedIntSampler2D;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_SAMPLER_3D")]
public static GLEnum UnsignedIntSampler3D;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_SAMPLER_CUBE")]
public static GLEnum UnsignedIntSamplerCube;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_SAMPLER_1D_ARRAY")]
public static GLEnum UnsignedIntSampler1DArray;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_SAMPLER_2D_ARRAY")]
public static GLEnum UnsignedIntSampler2DArray;
    [NativeNameAttribute("Name", "GL_QUERY_WAIT")]
public static GLEnum QueryWait;
    [NativeNameAttribute("Name", "GL_QUERY_NO_WAIT")]
public static GLEnum QueryNoWait;
    [NativeNameAttribute("Name", "GL_QUERY_BY_REGION_WAIT")]
public static GLEnum QueryByRegionWait;
    [NativeNameAttribute("Name", "GL_QUERY_BY_REGION_NO_WAIT")]
public static GLEnum QueryByRegionNoWait;
    [NativeNameAttribute("Name", "GL_BUFFER_ACCESS_FLAGS")]
public static GLEnum BufferAccessFlags;
    [NativeNameAttribute("Name", "GL_BUFFER_MAP_LENGTH")]
public static GLEnum BufferMapLength;
    [NativeNameAttribute("Name", "GL_BUFFER_MAP_OFFSET")]
public static GLEnum BufferMapOffset;
    [NativeNameAttribute("Name", "GL_DEPTH_COMPONENT32F")]
public static GLEnum DepthComponent32f;
    [NativeNameAttribute("Name", "GL_DEPTH32F_STENCIL8")]
public static GLEnum Depth32fStencil8;
    [NativeNameAttribute("Name", "GL_FLOAT_32_UNSIGNED_INT_24_8_REV")]
public static GLEnum Float32UnsignedInt248Rev;
    [NativeNameAttribute("Name", "GL_INVALID_FRAMEBUFFER_OPERATION")]
public static GLEnum InvalidFramebufferOperation;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING")]
public static GLEnum FramebufferAttachmentColorEncoding;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE")]
public static GLEnum FramebufferAttachmentComponentType;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE")]
public static GLEnum FramebufferAttachmentRedSize;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE")]
public static GLEnum FramebufferAttachmentGreenSize;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE")]
public static GLEnum FramebufferAttachmentBlueSize;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE")]
public static GLEnum FramebufferAttachmentAlphaSize;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE")]
public static GLEnum FramebufferAttachmentDepthSize;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE")]
public static GLEnum FramebufferAttachmentStencilSize;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_DEFAULT")]
public static GLEnum FramebufferDefault;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_UNDEFINED")]
public static GLEnum FramebufferUndefined;
    [NativeNameAttribute("Name", "GL_DEPTH_STENCIL_ATTACHMENT")]
public static GLEnum DepthStencilAttachment;
    [NativeNameAttribute("Name", "GL_MAX_RENDERBUFFER_SIZE")]
public static GLEnum MaxRenderbufferSize;
    [NativeNameAttribute("Name", "GL_DEPTH_STENCIL")]
public static GLEnum DepthStencil;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_24_8")]
public static GLEnum UnsignedInt248;
    [NativeNameAttribute("Name", "GL_DEPTH24_STENCIL8")]
public static GLEnum Depth24Stencil8;
    [NativeNameAttribute("Name", "GL_TEXTURE_STENCIL_SIZE")]
public static GLEnum TextureStencilSize;
    [NativeNameAttribute("Name", "GL_TEXTURE_RED_TYPE")]
public static GLEnum TextureRedType;
    [NativeNameAttribute("Name", "GL_TEXTURE_GREEN_TYPE")]
public static GLEnum TextureGreenType;
    [NativeNameAttribute("Name", "GL_TEXTURE_BLUE_TYPE")]
public static GLEnum TextureBlueType;
    [NativeNameAttribute("Name", "GL_TEXTURE_ALPHA_TYPE")]
public static GLEnum TextureAlphaType;
    [NativeNameAttribute("Name", "GL_TEXTURE_DEPTH_TYPE")]
public static GLEnum TextureDepthType;
    [NativeNameAttribute("Name", "GL_UNSIGNED_NORMALIZED")]
public static GLEnum UnsignedNormalized;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_BINDING")]
public static GLEnum FramebufferBinding;
    [NativeNameAttribute("Name", "GL_DRAW_FRAMEBUFFER_BINDING")]
public static GLEnum DrawFramebufferBinding;
    [NativeNameAttribute("Name", "GL_RENDERBUFFER_BINDING")]
public static GLEnum RenderbufferBinding;
    [NativeNameAttribute("Name", "GL_READ_FRAMEBUFFER")]
public static GLEnum ReadFramebuffer;
    [NativeNameAttribute("Name", "GL_DRAW_FRAMEBUFFER")]
public static GLEnum DrawFramebuffer;
    [NativeNameAttribute("Name", "GL_READ_FRAMEBUFFER_BINDING")]
public static GLEnum ReadFramebufferBinding;
    [NativeNameAttribute("Name", "GL_RENDERBUFFER_SAMPLES")]
public static GLEnum RenderbufferSamples;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE")]
public static GLEnum FramebufferAttachmentObjectType;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME")]
public static GLEnum FramebufferAttachmentObjectName;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL")]
public static GLEnum FramebufferAttachmentTextureLevel;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE")]
public static GLEnum FramebufferAttachmentTextureCubeMapFace;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER")]
public static GLEnum FramebufferAttachmentTextureLayer;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_COMPLETE")]
public static GLEnum FramebufferComplete;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT")]
public static GLEnum FramebufferIncompleteAttachment;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT")]
public static GLEnum FramebufferIncompleteMissingAttachment;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER")]
public static GLEnum FramebufferIncompleteDrawBuffer;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER")]
public static GLEnum FramebufferIncompleteReadBuffer;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_UNSUPPORTED")]
public static GLEnum FramebufferUnsupported;
    [NativeNameAttribute("Name", "GL_MAX_COLOR_ATTACHMENTS")]
public static GLEnum MaxColorAttachments;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT0")]
public static GLEnum ColorAttachment0;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT1")]
public static GLEnum ColorAttachment1;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT2")]
public static GLEnum ColorAttachment2;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT3")]
public static GLEnum ColorAttachment3;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT4")]
public static GLEnum ColorAttachment4;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT5")]
public static GLEnum ColorAttachment5;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT6")]
public static GLEnum ColorAttachment6;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT7")]
public static GLEnum ColorAttachment7;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT8")]
public static GLEnum ColorAttachment8;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT9")]
public static GLEnum ColorAttachment9;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT10")]
public static GLEnum ColorAttachment10;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT11")]
public static GLEnum ColorAttachment11;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT12")]
public static GLEnum ColorAttachment12;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT13")]
public static GLEnum ColorAttachment13;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT14")]
public static GLEnum ColorAttachment14;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT15")]
public static GLEnum ColorAttachment15;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT16")]
public static GLEnum ColorAttachment16;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT17")]
public static GLEnum ColorAttachment17;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT18")]
public static GLEnum ColorAttachment18;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT19")]
public static GLEnum ColorAttachment19;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT20")]
public static GLEnum ColorAttachment20;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT21")]
public static GLEnum ColorAttachment21;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT22")]
public static GLEnum ColorAttachment22;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT23")]
public static GLEnum ColorAttachment23;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT24")]
public static GLEnum ColorAttachment24;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT25")]
public static GLEnum ColorAttachment25;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT26")]
public static GLEnum ColorAttachment26;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT27")]
public static GLEnum ColorAttachment27;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT28")]
public static GLEnum ColorAttachment28;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT29")]
public static GLEnum ColorAttachment29;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT30")]
public static GLEnum ColorAttachment30;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT31")]
public static GLEnum ColorAttachment31;
    [NativeNameAttribute("Name", "GL_DEPTH_ATTACHMENT")]
public static GLEnum DepthAttachment;
    [NativeNameAttribute("Name", "GL_STENCIL_ATTACHMENT")]
public static GLEnum StencilAttachment;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER")]
public static GLEnum Framebuffer;
    [NativeNameAttribute("Name", "GL_RENDERBUFFER")]
public static GLEnum Renderbuffer;
    [NativeNameAttribute("Name", "GL_RENDERBUFFER_WIDTH")]
public static GLEnum RenderbufferWidth;
    [NativeNameAttribute("Name", "GL_RENDERBUFFER_HEIGHT")]
public static GLEnum RenderbufferHeight;
    [NativeNameAttribute("Name", "GL_RENDERBUFFER_INTERNAL_FORMAT")]
public static GLEnum RenderbufferInternalFormat;
    [NativeNameAttribute("Name", "GL_STENCIL_INDEX1")]
public static GLEnum StencilIndex1;
    [NativeNameAttribute("Name", "GL_STENCIL_INDEX4")]
public static GLEnum StencilIndex4;
    [NativeNameAttribute("Name", "GL_STENCIL_INDEX8")]
public static GLEnum StencilIndex8;
    [NativeNameAttribute("Name", "GL_STENCIL_INDEX16")]
public static GLEnum StencilIndex16;
    [NativeNameAttribute("Name", "GL_RENDERBUFFER_RED_SIZE")]
public static GLEnum RenderbufferRedSize;
    [NativeNameAttribute("Name", "GL_RENDERBUFFER_GREEN_SIZE")]
public static GLEnum RenderbufferGreenSize;
    [NativeNameAttribute("Name", "GL_RENDERBUFFER_BLUE_SIZE")]
public static GLEnum RenderbufferBlueSize;
    [NativeNameAttribute("Name", "GL_RENDERBUFFER_ALPHA_SIZE")]
public static GLEnum RenderbufferAlphaSize;
    [NativeNameAttribute("Name", "GL_RENDERBUFFER_DEPTH_SIZE")]
public static GLEnum RenderbufferDepthSize;
    [NativeNameAttribute("Name", "GL_RENDERBUFFER_STENCIL_SIZE")]
public static GLEnum RenderbufferStencilSize;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE")]
public static GLEnum FramebufferIncompleteMultisample;
    [NativeNameAttribute("Name", "GL_MAX_SAMPLES")]
public static GLEnum MaxSamples;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_SRGB")]
public static GLEnum FramebufferSrgb;
    [NativeNameAttribute("Name", "GL_HALF_FLOAT")]
public static GLEnum HalfFloat;
    [NativeNameAttribute("Name", "GL_MAP_READ_BIT")]
public static GLEnum MapReadBit;
    [NativeNameAttribute("Name", "GL_MAP_WRITE_BIT")]
public static GLEnum MapWriteBit;
    [NativeNameAttribute("Name", "GL_MAP_INVALIDATE_RANGE_BIT")]
public static GLEnum MapInvalidateRangeBit;
    [NativeNameAttribute("Name", "GL_MAP_INVALIDATE_BUFFER_BIT")]
public static GLEnum MapInvalidateBufferBit;
    [NativeNameAttribute("Name", "GL_MAP_FLUSH_EXPLICIT_BIT")]
public static GLEnum MapFlushExplicitBit;
    [NativeNameAttribute("Name", "GL_MAP_UNSYNCHRONIZED_BIT")]
public static GLEnum MapUnsynchronizedBit;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RED_RGTC1")]
public static GLEnum CompressedRedRgtc1;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SIGNED_RED_RGTC1")]
public static GLEnum CompressedSignedRedRgtc1;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RG_RGTC2")]
public static GLEnum CompressedRGRgtc2;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SIGNED_RG_RGTC2")]
public static GLEnum CompressedSignedRGRgtc2;
    [NativeNameAttribute("Name", "GL_RG")]
public static GLEnum RG;
    [NativeNameAttribute("Name", "GL_RG_INTEGER")]
public static GLEnum RGInteger;
    [NativeNameAttribute("Name", "GL_R8")]
public static GLEnum R8;
    [NativeNameAttribute("Name", "GL_R16")]
public static GLEnum R16;
    [NativeNameAttribute("Name", "GL_RG8")]
public static GLEnum RG8;
    [NativeNameAttribute("Name", "GL_RG16")]
public static GLEnum RG16;
    [NativeNameAttribute("Name", "GL_R16F")]
public static GLEnum R16f;
    [NativeNameAttribute("Name", "GL_R32F")]
public static GLEnum R32f;
    [NativeNameAttribute("Name", "GL_RG16F")]
public static GLEnum RG16f;
    [NativeNameAttribute("Name", "GL_RG32F")]
public static GLEnum RG32f;
    [NativeNameAttribute("Name", "GL_R8I")]
public static GLEnum R8i;
    [NativeNameAttribute("Name", "GL_R8UI")]
public static GLEnum R8ui;
    [NativeNameAttribute("Name", "GL_R16I")]
public static GLEnum R16i;
    [NativeNameAttribute("Name", "GL_R16UI")]
public static GLEnum R16ui;
    [NativeNameAttribute("Name", "GL_R32I")]
public static GLEnum R32i;
    [NativeNameAttribute("Name", "GL_R32UI")]
public static GLEnum R32ui;
    [NativeNameAttribute("Name", "GL_RG8I")]
public static GLEnum RG8i;
    [NativeNameAttribute("Name", "GL_RG8UI")]
public static GLEnum RG8ui;
    [NativeNameAttribute("Name", "GL_RG16I")]
public static GLEnum RG16i;
    [NativeNameAttribute("Name", "GL_RG16UI")]
public static GLEnum RG16ui;
    [NativeNameAttribute("Name", "GL_RG32I")]
public static GLEnum RG32i;
    [NativeNameAttribute("Name", "GL_RG32UI")]
public static GLEnum RG32ui;
    [NativeNameAttribute("Name", "GL_VERTEX_ARRAY_BINDING")]
public static GLEnum VertexArrayBinding;
    [NativeNameAttribute("Name", "GL_SAMPLER_2D_RECT")]
public static GLEnum Sampler2DRect;
    [NativeNameAttribute("Name", "GL_SAMPLER_2D_RECT_SHADOW")]
public static GLEnum Sampler2DRectShadow;
    [NativeNameAttribute("Name", "GL_SAMPLER_BUFFER")]
public static GLEnum SamplerBuffer;
    [NativeNameAttribute("Name", "GL_INT_SAMPLER_2D_RECT")]
public static GLEnum IntSampler2DRect;
    [NativeNameAttribute("Name", "GL_INT_SAMPLER_BUFFER")]
public static GLEnum IntSamplerBuffer;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_SAMPLER_2D_RECT")]
public static GLEnum UnsignedIntSampler2DRect;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_SAMPLER_BUFFER")]
public static GLEnum UnsignedIntSamplerBuffer;
    [NativeNameAttribute("Name", "GL_TEXTURE_BUFFER")]
public static GLEnum TextureBuffer;
    [NativeNameAttribute("Name", "GL_MAX_TEXTURE_BUFFER_SIZE")]
public static GLEnum MaxTextureBufferSize;
    [NativeNameAttribute("Name", "GL_TEXTURE_BINDING_BUFFER")]
public static GLEnum TextureBindingBuffer;
    [NativeNameAttribute("Name", "GL_TEXTURE_BUFFER_DATA_STORE_BINDING")]
public static GLEnum TextureBufferDataStoreBinding;
    [NativeNameAttribute("Name", "GL_TEXTURE_RECTANGLE")]
public static GLEnum TextureRectangle;
    [NativeNameAttribute("Name", "GL_TEXTURE_BINDING_RECTANGLE")]
public static GLEnum TextureBindingRectangle;
    [NativeNameAttribute("Name", "GL_PROXY_TEXTURE_RECTANGLE")]
public static GLEnum ProxyTextureRectangle;
    [NativeNameAttribute("Name", "GL_MAX_RECTANGLE_TEXTURE_SIZE")]
public static GLEnum MaxRectangleTextureSize;
    [NativeNameAttribute("Name", "GL_R8_SNORM")]
public static GLEnum R8SNorm;
    [NativeNameAttribute("Name", "GL_RG8_SNORM")]
public static GLEnum RG8SNorm;
    [NativeNameAttribute("Name", "GL_RGB8_SNORM")]
public static GLEnum Rgb8SNorm;
    [NativeNameAttribute("Name", "GL_RGBA8_SNORM")]
public static GLEnum Rgba8SNorm;
    [NativeNameAttribute("Name", "GL_R16_SNORM")]
public static GLEnum R16SNorm;
    [NativeNameAttribute("Name", "GL_RG16_SNORM")]
public static GLEnum RG16SNorm;
    [NativeNameAttribute("Name", "GL_RGB16_SNORM")]
public static GLEnum Rgb16SNorm;
    [NativeNameAttribute("Name", "GL_RGBA16_SNORM")]
public static GLEnum Rgba16SNorm;
    [NativeNameAttribute("Name", "GL_SIGNED_NORMALIZED")]
public static GLEnum SignedNormalized;
    [NativeNameAttribute("Name", "GL_PRIMITIVE_RESTART")]
public static GLEnum PrimitiveRestart;
    [NativeNameAttribute("Name", "GL_PRIMITIVE_RESTART_INDEX")]
public static GLEnum PrimitiveRestartIndex;
    [NativeNameAttribute("Name", "GL_COPY_READ_BUFFER")]
public static GLEnum CopyReadBuffer;
    [NativeNameAttribute("Name", "GL_COPY_WRITE_BUFFER")]
public static GLEnum CopyWriteBuffer;
    [NativeNameAttribute("Name", "GL_UNIFORM_BUFFER")]
public static GLEnum UniformBuffer;
    [NativeNameAttribute("Name", "GL_UNIFORM_BUFFER_BINDING")]
public static GLEnum UniformBufferBinding;
    [NativeNameAttribute("Name", "GL_UNIFORM_BUFFER_START")]
public static GLEnum UniformBufferStart;
    [NativeNameAttribute("Name", "GL_UNIFORM_BUFFER_SIZE")]
public static GLEnum UniformBufferSize;
    [NativeNameAttribute("Name", "GL_MAX_VERTEX_UNIFORM_BLOCKS")]
public static GLEnum MaxVertexUniformBlocks;
    [NativeNameAttribute("Name", "GL_MAX_GEOMETRY_UNIFORM_BLOCKS")]
public static GLEnum MaxGeometryUniformBlocks;
    [NativeNameAttribute("Name", "GL_MAX_FRAGMENT_UNIFORM_BLOCKS")]
public static GLEnum MaxFragmentUniformBlocks;
    [NativeNameAttribute("Name", "GL_MAX_COMBINED_UNIFORM_BLOCKS")]
public static GLEnum MaxCombinedUniformBlocks;
    [NativeNameAttribute("Name", "GL_MAX_UNIFORM_BUFFER_BINDINGS")]
public static GLEnum MaxUniformBufferBindings;
    [NativeNameAttribute("Name", "GL_MAX_UNIFORM_BLOCK_SIZE")]
public static GLEnum MaxUniformBlockSize;
    [NativeNameAttribute("Name", "GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS")]
public static GLEnum MaxCombinedVertexUniformComponents;
    [NativeNameAttribute("Name", "GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS")]
public static GLEnum MaxCombinedGeometryUniformComponents;
    [NativeNameAttribute("Name", "GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS")]
public static GLEnum MaxCombinedFragmentUniformComponents;
    [NativeNameAttribute("Name", "GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT")]
public static GLEnum UniformBufferOffsetAlignment;
    [NativeNameAttribute("Name", "GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH")]
public static GLEnum ActiveUniformBlockMaxNameLength;
    [NativeNameAttribute("Name", "GL_ACTIVE_UNIFORM_BLOCKS")]
public static GLEnum ActiveUniformBlocks;
    [NativeNameAttribute("Name", "GL_UNIFORM_TYPE")]
public static GLEnum UniformType;
    [NativeNameAttribute("Name", "GL_UNIFORM_SIZE")]
public static GLEnum UniformSize;
    [NativeNameAttribute("Name", "GL_UNIFORM_NAME_LENGTH")]
public static GLEnum UniformNameLength;
    [NativeNameAttribute("Name", "GL_UNIFORM_BLOCK_INDEX")]
public static GLEnum UniformBlockIndex;
    [NativeNameAttribute("Name", "GL_UNIFORM_OFFSET")]
public static GLEnum UniformOffset;
    [NativeNameAttribute("Name", "GL_UNIFORM_ARRAY_STRIDE")]
public static GLEnum UniformArrayStride;
    [NativeNameAttribute("Name", "GL_UNIFORM_MATRIX_STRIDE")]
public static GLEnum UniformMatrixStride;
    [NativeNameAttribute("Name", "GL_UNIFORM_IS_ROW_MAJOR")]
public static GLEnum UniformIsRowMajor;
    [NativeNameAttribute("Name", "GL_UNIFORM_BLOCK_BINDING")]
public static GLEnum UniformBlockBinding;
    [NativeNameAttribute("Name", "GL_UNIFORM_BLOCK_DATA_SIZE")]
public static GLEnum UniformBlockDataSize;
    [NativeNameAttribute("Name", "GL_UNIFORM_BLOCK_NAME_LENGTH")]
public static GLEnum UniformBlockNameLength;
    [NativeNameAttribute("Name", "GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS")]
public static GLEnum UniformBlockActiveUniforms;
    [NativeNameAttribute("Name", "GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES")]
public static GLEnum UniformBlockActiveUniformIndices;
    [NativeNameAttribute("Name", "GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER")]
public static GLEnum UniformBlockReferencedByVertexShader;
    [NativeNameAttribute("Name", "GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER")]
public static GLEnum UniformBlockReferencedByGeometryShader;
    [NativeNameAttribute("Name", "GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER")]
public static GLEnum UniformBlockReferencedByFragmentShader;
    [NativeNameAttribute("Name", "GL_INVALID_INDEX")]
public static GLEnum InvalidIndex;
    [NativeNameAttribute("Name", "GL_CONTEXT_CORE_PROFILE_BIT")]
public static GLEnum ContextCoreProfileBit;
    [NativeNameAttribute("Name", "GL_CONTEXT_COMPATIBILITY_PROFILE_BIT")]
public static GLEnum ContextCompatibilityProfileBit;
    [NativeNameAttribute("Name", "GL_LINES_ADJACENCY")]
public static GLEnum LinesAdjacency;
    [NativeNameAttribute("Name", "GL_LINE_STRIP_ADJACENCY")]
public static GLEnum LineStripAdjacency;
    [NativeNameAttribute("Name", "GL_TRIANGLES_ADJACENCY")]
public static GLEnum TrianglesAdjacency;
    [NativeNameAttribute("Name", "GL_TRIANGLE_STRIP_ADJACENCY")]
public static GLEnum TriangleStripAdjacency;
    [NativeNameAttribute("Name", "GL_PROGRAM_POINT_SIZE")]
public static GLEnum ProgramPointSize;
    [NativeNameAttribute("Name", "GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS")]
public static GLEnum MaxGeometryTextureImageUnits;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_ATTACHMENT_LAYERED")]
public static GLEnum FramebufferAttachmentLayered;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS")]
public static GLEnum FramebufferIncompleteLayerTargets;
    [NativeNameAttribute("Name", "GL_GEOMETRY_SHADER")]
public static GLEnum GeometryShader;
    [NativeNameAttribute("Name", "GL_GEOMETRY_VERTICES_OUT")]
public static GLEnum GeometryVerticesOut;
    [NativeNameAttribute("Name", "GL_GEOMETRY_INPUT_TYPE")]
public static GLEnum GeometryInputType;
    [NativeNameAttribute("Name", "GL_GEOMETRY_OUTPUT_TYPE")]
public static GLEnum GeometryOutputType;
    [NativeNameAttribute("Name", "GL_MAX_GEOMETRY_UNIFORM_COMPONENTS")]
public static GLEnum MaxGeometryUniformComponents;
    [NativeNameAttribute("Name", "GL_MAX_GEOMETRY_OUTPUT_VERTICES")]
public static GLEnum MaxGeometryOutputVertices;
    [NativeNameAttribute("Name", "GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS")]
public static GLEnum MaxGeometryTotalOutputComponents;
    [NativeNameAttribute("Name", "GL_MAX_VERTEX_OUTPUT_COMPONENTS")]
public static GLEnum MaxVertexOutputComponents;
    [NativeNameAttribute("Name", "GL_MAX_GEOMETRY_INPUT_COMPONENTS")]
public static GLEnum MaxGeometryInputComponents;
    [NativeNameAttribute("Name", "GL_MAX_GEOMETRY_OUTPUT_COMPONENTS")]
public static GLEnum MaxGeometryOutputComponents;
    [NativeNameAttribute("Name", "GL_MAX_FRAGMENT_INPUT_COMPONENTS")]
public static GLEnum MaxFragmentInputComponents;
    [NativeNameAttribute("Name", "GL_CONTEXT_PROFILE_MASK")]
public static GLEnum ContextProfileMask;
    [NativeNameAttribute("Name", "GL_DEPTH_CLAMP")]
public static GLEnum DepthClamp;
    [NativeNameAttribute("Name", "GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION")]
public static GLEnum QuadsFollowProvokingVertexConvention;
    [NativeNameAttribute("Name", "GL_FIRST_VERTEX_CONVENTION")]
public static GLEnum FirstVertexConvention;
    [NativeNameAttribute("Name", "GL_LAST_VERTEX_CONVENTION")]
public static GLEnum LastVertexConvention;
    [NativeNameAttribute("Name", "GL_PROVOKING_VERTEX")]
public static GLEnum ProvokingVertex;
    [NativeNameAttribute("Name", "GL_TEXTURE_CUBE_MAP_SEAMLESS")]
public static GLEnum TextureCubeMapSeamless;
    [NativeNameAttribute("Name", "GL_MAX_SERVER_WAIT_TIMEOUT")]
public static GLEnum MaxServerWaitTimeout;
    [NativeNameAttribute("Name", "GL_OBJECT_TYPE")]
public static GLEnum ObjectType;
    [NativeNameAttribute("Name", "GL_SYNC_CONDITION")]
public static GLEnum SyncCondition;
    [NativeNameAttribute("Name", "GL_SYNC_STATUS")]
public static GLEnum SyncStatus;
    [NativeNameAttribute("Name", "GL_SYNC_FLAGS")]
public static GLEnum SyncFlags;
    [NativeNameAttribute("Name", "GL_SYNC_FENCE")]
public static GLEnum SyncFence;
    [NativeNameAttribute("Name", "GL_SYNC_GPU_COMMANDS_COMPLETE")]
public static GLEnum SyncGpuCommandsComplete;
    [NativeNameAttribute("Name", "GL_UNSIGNALED")]
public static GLEnum Unsignaled;
    [NativeNameAttribute("Name", "GL_SIGNALED")]
public static GLEnum Signaled;
    [NativeNameAttribute("Name", "GL_ALREADY_SIGNALED")]
public static GLEnum AlreadySignaled;
    [NativeNameAttribute("Name", "GL_TIMEOUT_EXPIRED")]
public static GLEnum TimeoutExpired;
    [NativeNameAttribute("Name", "GL_CONDITION_SATISFIED")]
public static GLEnum ConditionSatisfied;
    [NativeNameAttribute("Name", "GL_WAIT_FAILED")]
public static GLEnum WaitFailed;
    [NativeNameAttribute("Name", "GL_TIMEOUT_IGNORED")]
public static GLEnum TimeoutIgnored;
    [NativeNameAttribute("Name", "GL_SYNC_FLUSH_COMMANDS_BIT")]
public static GLEnum SyncFlushCommandsBit;
    [NativeNameAttribute("Name", "GL_SAMPLE_POSITION")]
public static GLEnum SamplePosition;
    [NativeNameAttribute("Name", "GL_SAMPLE_MASK")]
public static GLEnum SampleMask;
    [NativeNameAttribute("Name", "GL_SAMPLE_MASK_VALUE")]
public static GLEnum SampleMaskValue;
    [NativeNameAttribute("Name", "GL_MAX_SAMPLE_MASK_WORDS")]
public static GLEnum MaxSampleMaskWords;
    [NativeNameAttribute("Name", "GL_TEXTURE_2D_MULTISAMPLE")]
public static GLEnum Texture2DMultisample;
    [NativeNameAttribute("Name", "GL_PROXY_TEXTURE_2D_MULTISAMPLE")]
public static GLEnum ProxyTexture2DMultisample;
    [NativeNameAttribute("Name", "GL_TEXTURE_2D_MULTISAMPLE_ARRAY")]
public static GLEnum Texture2DMultisampleArray;
    [NativeNameAttribute("Name", "GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY")]
public static GLEnum ProxyTexture2DMultisampleArray;
    [NativeNameAttribute("Name", "GL_TEXTURE_BINDING_2D_MULTISAMPLE")]
public static GLEnum TextureBinding2DMultisample;
    [NativeNameAttribute("Name", "GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY")]
public static GLEnum TextureBinding2DMultisampleArray;
    [NativeNameAttribute("Name", "GL_TEXTURE_SAMPLES")]
public static GLEnum TextureSamples;
    [NativeNameAttribute("Name", "GL_TEXTURE_FIXED_SAMPLE_LOCATIONS")]
public static GLEnum TextureFixedSampleLocations;
    [NativeNameAttribute("Name", "GL_SAMPLER_2D_MULTISAMPLE")]
public static GLEnum Sampler2DMultisample;
    [NativeNameAttribute("Name", "GL_INT_SAMPLER_2D_MULTISAMPLE")]
public static GLEnum IntSampler2DMultisample;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE")]
public static GLEnum UnsignedIntSampler2DMultisample;
    [NativeNameAttribute("Name", "GL_SAMPLER_2D_MULTISAMPLE_ARRAY")]
public static GLEnum Sampler2DMultisampleArray;
    [NativeNameAttribute("Name", "GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY")]
public static GLEnum IntSampler2DMultisampleArray;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY")]
public static GLEnum UnsignedIntSampler2DMultisampleArray;
    [NativeNameAttribute("Name", "GL_MAX_COLOR_TEXTURE_SAMPLES")]
public static GLEnum MaxColorTextureSamples;
    [NativeNameAttribute("Name", "GL_MAX_DEPTH_TEXTURE_SAMPLES")]
public static GLEnum MaxDepthTextureSamples;
    [NativeNameAttribute("Name", "GL_MAX_INTEGER_SAMPLES")]
public static GLEnum MaxIntegerSamples;
    [NativeNameAttribute("Name", "GL_VERTEX_ATTRIB_ARRAY_DIVISOR")]
public static GLEnum VertexAttribArrayDivisor;
    [NativeNameAttribute("Name", "GL_SRC1_COLOR")]
public static GLEnum Src1Color;
    [NativeNameAttribute("Name", "GL_ONE_MINUS_SRC1_COLOR")]
public static GLEnum OneMinusSrc1Color;
    [NativeNameAttribute("Name", "GL_ONE_MINUS_SRC1_ALPHA")]
public static GLEnum OneMinusSrc1Alpha;
    [NativeNameAttribute("Name", "GL_MAX_DUAL_SOURCE_DRAW_BUFFERS")]
public static GLEnum MaxDualSourceDrawBuffers;
    [NativeNameAttribute("Name", "GL_ANY_SAMPLES_PASSED")]
public static GLEnum AnySamplesPassed;
    [NativeNameAttribute("Name", "GL_SAMPLER_BINDING")]
public static GLEnum SamplerBinding;
    [NativeNameAttribute("Name", "GL_RGB10_A2UI")]
public static GLEnum Rgb10A2ui;
    [NativeNameAttribute("Name", "GL_TEXTURE_SWIZZLE_R")]
public static GLEnum TextureSwizzleR;
    [NativeNameAttribute("Name", "GL_TEXTURE_SWIZZLE_G")]
public static GLEnum TextureSwizzleG;
    [NativeNameAttribute("Name", "GL_TEXTURE_SWIZZLE_B")]
public static GLEnum TextureSwizzleB;
    [NativeNameAttribute("Name", "GL_TEXTURE_SWIZZLE_A")]
public static GLEnum TextureSwizzleA;
    [NativeNameAttribute("Name", "GL_TEXTURE_SWIZZLE_RGBA")]
public static GLEnum TextureSwizzleRgba;
    [NativeNameAttribute("Name", "GL_TIME_ELAPSED")]
public static GLEnum TimeElapsed;
    [NativeNameAttribute("Name", "GL_TIMESTAMP")]
public static GLEnum Timestamp;
    [NativeNameAttribute("Name", "GL_INT_2_10_10_10_REV")]
public static GLEnum Int2101010Rev;
    [NativeNameAttribute("Name", "GL_SAMPLE_SHADING")]
public static GLEnum SampleShading;
    [NativeNameAttribute("Name", "GL_MIN_SAMPLE_SHADING_VALUE")]
public static GLEnum MinSampleShadingValue;
    [NativeNameAttribute("Name", "GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET")]
public static GLEnum MinProgramTextureGatherOffset;
    [NativeNameAttribute("Name", "GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET")]
public static GLEnum MaxProgramTextureGatherOffset;
    [NativeNameAttribute("Name", "GL_TEXTURE_CUBE_MAP_ARRAY")]
public static GLEnum TextureCubeMapArray;
    [NativeNameAttribute("Name", "GL_TEXTURE_BINDING_CUBE_MAP_ARRAY")]
public static GLEnum TextureBindingCubeMapArray;
    [NativeNameAttribute("Name", "GL_PROXY_TEXTURE_CUBE_MAP_ARRAY")]
public static GLEnum ProxyTextureCubeMapArray;
    [NativeNameAttribute("Name", "GL_SAMPLER_CUBE_MAP_ARRAY")]
public static GLEnum SamplerCubeMapArray;
    [NativeNameAttribute("Name", "GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW")]
public static GLEnum SamplerCubeMapArrayShadow;
    [NativeNameAttribute("Name", "GL_INT_SAMPLER_CUBE_MAP_ARRAY")]
public static GLEnum IntSamplerCubeMapArray;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY")]
public static GLEnum UnsignedIntSamplerCubeMapArray;
    [NativeNameAttribute("Name", "GL_DRAW_INDIRECT_BUFFER")]
public static GLEnum DrawIndirectBuffer;
    [NativeNameAttribute("Name", "GL_DRAW_INDIRECT_BUFFER_BINDING")]
public static GLEnum DrawIndirectBufferBinding;
    [NativeNameAttribute("Name", "GL_GEOMETRY_SHADER_INVOCATIONS")]
public static GLEnum GeometryShaderInvocations;
    [NativeNameAttribute("Name", "GL_MAX_GEOMETRY_SHADER_INVOCATIONS")]
public static GLEnum MaxGeometryShaderInvocations;
    [NativeNameAttribute("Name", "GL_MIN_FRAGMENT_INTERPOLATION_OFFSET")]
public static GLEnum MinFragmentInterpolationOffset;
    [NativeNameAttribute("Name", "GL_MAX_FRAGMENT_INTERPOLATION_OFFSET")]
public static GLEnum MaxFragmentInterpolationOffset;
    [NativeNameAttribute("Name", "GL_FRAGMENT_INTERPOLATION_OFFSET_BITS")]
public static GLEnum FragmentInterpolationOffsetBits;
    [NativeNameAttribute("Name", "GL_MAX_VERTEX_STREAMS")]
public static GLEnum MaxVertexStreams;
    [NativeNameAttribute("Name", "GL_DOUBLE_VEC2")]
public static GLEnum DoubleVec2;
    [NativeNameAttribute("Name", "GL_DOUBLE_VEC3")]
public static GLEnum DoubleVec3;
    [NativeNameAttribute("Name", "GL_DOUBLE_VEC4")]
public static GLEnum DoubleVec4;
    [NativeNameAttribute("Name", "GL_DOUBLE_MAT2")]
public static GLEnum DoubleMat2;
    [NativeNameAttribute("Name", "GL_DOUBLE_MAT3")]
public static GLEnum DoubleMat3;
    [NativeNameAttribute("Name", "GL_DOUBLE_MAT4")]
public static GLEnum DoubleMat4;
    [NativeNameAttribute("Name", "GL_DOUBLE_MAT2x3")]
public static GLEnum DoubleMat2x3;
    [NativeNameAttribute("Name", "GL_DOUBLE_MAT2x4")]
public static GLEnum DoubleMat2x4;
    [NativeNameAttribute("Name", "GL_DOUBLE_MAT3x2")]
public static GLEnum DoubleMat3x2;
    [NativeNameAttribute("Name", "GL_DOUBLE_MAT3x4")]
public static GLEnum DoubleMat3x4;
    [NativeNameAttribute("Name", "GL_DOUBLE_MAT4x2")]
public static GLEnum DoubleMat4x2;
    [NativeNameAttribute("Name", "GL_DOUBLE_MAT4x3")]
public static GLEnum DoubleMat4x3;
    [NativeNameAttribute("Name", "GL_ACTIVE_SUBROUTINES")]
public static GLEnum ActiveSubroutines;
    [NativeNameAttribute("Name", "GL_ACTIVE_SUBROUTINE_UNIFORMS")]
public static GLEnum ActiveSubroutineUniforms;
    [NativeNameAttribute("Name", "GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS")]
public static GLEnum ActiveSubroutineUniformLocations;
    [NativeNameAttribute("Name", "GL_ACTIVE_SUBROUTINE_MAX_LENGTH")]
public static GLEnum ActiveSubroutineMaxLength;
    [NativeNameAttribute("Name", "GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH")]
public static GLEnum ActiveSubroutineUniformMaxLength;
    [NativeNameAttribute("Name", "GL_MAX_SUBROUTINES")]
public static GLEnum MaxSubroutines;
    [NativeNameAttribute("Name", "GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS")]
public static GLEnum MaxSubroutineUniformLocations;
    [NativeNameAttribute("Name", "GL_NUM_COMPATIBLE_SUBROUTINES")]
public static GLEnum NumCompatibleSubroutines;
    [NativeNameAttribute("Name", "GL_COMPATIBLE_SUBROUTINES")]
public static GLEnum CompatibleSubroutines;
    [NativeNameAttribute("Name", "GL_PATCHES")]
public static GLEnum Patches;
    [NativeNameAttribute("Name", "GL_PATCH_VERTICES")]
public static GLEnum PatchVertices;
    [NativeNameAttribute("Name", "GL_PATCH_DEFAULT_INNER_LEVEL")]
public static GLEnum PatchDefaultInnerLevel;
    [NativeNameAttribute("Name", "GL_PATCH_DEFAULT_OUTER_LEVEL")]
public static GLEnum PatchDefaultOuterLevel;
    [NativeNameAttribute("Name", "GL_TESS_CONTROL_OUTPUT_VERTICES")]
public static GLEnum TessControlOutputVertices;
    [NativeNameAttribute("Name", "GL_TESS_GEN_MODE")]
public static GLEnum TessGenMode;
    [NativeNameAttribute("Name", "GL_TESS_GEN_SPACING")]
public static GLEnum TessGenSpacing;
    [NativeNameAttribute("Name", "GL_TESS_GEN_VERTEX_ORDER")]
public static GLEnum TessGenVertexOrder;
    [NativeNameAttribute("Name", "GL_TESS_GEN_POINT_MODE")]
public static GLEnum TessGenPointMode;
    [NativeNameAttribute("Name", "GL_ISOLINES")]
public static GLEnum Isolines;
    [NativeNameAttribute("Name", "GL_QUADS")]
public static GLEnum Quads;
    [NativeNameAttribute("Name", "GL_FRACTIONAL_ODD")]
public static GLEnum FractionalOdd;
    [NativeNameAttribute("Name", "GL_FRACTIONAL_EVEN")]
public static GLEnum FractionalEven;
    [NativeNameAttribute("Name", "GL_MAX_PATCH_VERTICES")]
public static GLEnum MaxPatchVertices;
    [NativeNameAttribute("Name", "GL_MAX_TESS_GEN_LEVEL")]
public static GLEnum MaxTessGenLevel;
    [NativeNameAttribute("Name", "GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS")]
public static GLEnum MaxTessControlUniformComponents;
    [NativeNameAttribute("Name", "GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS")]
public static GLEnum MaxTessEvaluationUniformComponents;
    [NativeNameAttribute("Name", "GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS")]
public static GLEnum MaxTessControlTextureImageUnits;
    [NativeNameAttribute("Name", "GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS")]
public static GLEnum MaxTessEvaluationTextureImageUnits;
    [NativeNameAttribute("Name", "GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS")]
public static GLEnum MaxTessControlOutputComponents;
    [NativeNameAttribute("Name", "GL_MAX_TESS_PATCH_COMPONENTS")]
public static GLEnum MaxTessPatchComponents;
    [NativeNameAttribute("Name", "GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS")]
public static GLEnum MaxTessControlTotalOutputComponents;
    [NativeNameAttribute("Name", "GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS")]
public static GLEnum MaxTessEvaluationOutputComponents;
    [NativeNameAttribute("Name", "GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS")]
public static GLEnum MaxTessControlUniformBlocks;
    [NativeNameAttribute("Name", "GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS")]
public static GLEnum MaxTessEvaluationUniformBlocks;
    [NativeNameAttribute("Name", "GL_MAX_TESS_CONTROL_INPUT_COMPONENTS")]
public static GLEnum MaxTessControlInputComponents;
    [NativeNameAttribute("Name", "GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS")]
public static GLEnum MaxTessEvaluationInputComponents;
    [NativeNameAttribute("Name", "GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS")]
public static GLEnum MaxCombinedTessControlUniformComponents;
    [NativeNameAttribute("Name", "GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS")]
public static GLEnum MaxCombinedTessEvaluationUniformComponents;
    [NativeNameAttribute("Name", "GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER")]
public static GLEnum UniformBlockReferencedByTessControlShader;
    [NativeNameAttribute("Name", "GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER")]
public static GLEnum UniformBlockReferencedByTessEvaluationShader;
    [NativeNameAttribute("Name", "GL_TESS_EVALUATION_SHADER")]
public static GLEnum TessEvaluationShader;
    [NativeNameAttribute("Name", "GL_TESS_CONTROL_SHADER")]
public static GLEnum TessControlShader;
    [NativeNameAttribute("Name", "GL_TRANSFORM_FEEDBACK")]
public static GLEnum TransformFeedback;
    [NativeNameAttribute("Name", "GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED")]
public static GLEnum TransformFeedbackBufferPaused;
    [NativeNameAttribute("Name", "GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE")]
public static GLEnum TransformFeedbackBufferActive;
    [NativeNameAttribute("Name", "GL_TRANSFORM_FEEDBACK_BINDING")]
public static GLEnum TransformFeedbackBinding;
    [NativeNameAttribute("Name", "GL_MAX_TRANSFORM_FEEDBACK_BUFFERS")]
public static GLEnum MaxTransformFeedbackBuffers;
    [NativeNameAttribute("Name", "GL_FIXED")]
public static GLEnum Fixed;
    [NativeNameAttribute("Name", "GL_IMPLEMENTATION_COLOR_READ_TYPE")]
public static GLEnum ImplementationColorReadType;
    [NativeNameAttribute("Name", "GL_IMPLEMENTATION_COLOR_READ_FORMAT")]
public static GLEnum ImplementationColorReadFormat;
    [NativeNameAttribute("Name", "GL_LOW_FLOAT")]
public static GLEnum LowFloat;
    [NativeNameAttribute("Name", "GL_MEDIUM_FLOAT")]
public static GLEnum MediumFloat;
    [NativeNameAttribute("Name", "GL_HIGH_FLOAT")]
public static GLEnum HighFloat;
    [NativeNameAttribute("Name", "GL_LOW_INT")]
public static GLEnum LowInt;
    [NativeNameAttribute("Name", "GL_MEDIUM_INT")]
public static GLEnum MediumInt;
    [NativeNameAttribute("Name", "GL_HIGH_INT")]
public static GLEnum HighInt;
    [NativeNameAttribute("Name", "GL_SHADER_COMPILER")]
public static GLEnum ShaderCompiler;
    [NativeNameAttribute("Name", "GL_SHADER_BINARY_FORMATS")]
public static GLEnum ShaderBinaryFormats;
    [NativeNameAttribute("Name", "GL_NUM_SHADER_BINARY_FORMATS")]
public static GLEnum NumShaderBinaryFormats;
    [NativeNameAttribute("Name", "GL_MAX_VERTEX_UNIFORM_VECTORS")]
public static GLEnum MaxVertexUniformVectors;
    [NativeNameAttribute("Name", "GL_MAX_VARYING_VECTORS")]
public static GLEnum MaxVaryingVectors;
    [NativeNameAttribute("Name", "GL_MAX_FRAGMENT_UNIFORM_VECTORS")]
public static GLEnum MaxFragmentUniformVectors;
    [NativeNameAttribute("Name", "GL_RGB565")]
public static GLEnum Rgb565;
    [NativeNameAttribute("Name", "GL_PROGRAM_BINARY_RETRIEVABLE_HINT")]
public static GLEnum ProgramBinaryRetrievableHint;
    [NativeNameAttribute("Name", "GL_PROGRAM_BINARY_LENGTH")]
public static GLEnum ProgramBinaryLength;
    [NativeNameAttribute("Name", "GL_NUM_PROGRAM_BINARY_FORMATS")]
public static GLEnum NumProgramBinaryFormats;
    [NativeNameAttribute("Name", "GL_PROGRAM_BINARY_FORMATS")]
public static GLEnum ProgramBinaryFormats;
    [NativeNameAttribute("Name", "GL_VERTEX_SHADER_BIT")]
public static GLEnum VertexShaderBit;
    [NativeNameAttribute("Name", "GL_FRAGMENT_SHADER_BIT")]
public static GLEnum FragmentShaderBit;
    [NativeNameAttribute("Name", "GL_GEOMETRY_SHADER_BIT")]
public static GLEnum GeometryShaderBit;
    [NativeNameAttribute("Name", "GL_TESS_CONTROL_SHADER_BIT")]
public static GLEnum TessControlShaderBit;
    [NativeNameAttribute("Name", "GL_TESS_EVALUATION_SHADER_BIT")]
public static GLEnum TessEvaluationShaderBit;
    [NativeNameAttribute("Name", "GL_ALL_SHADER_BITS")]
public static GLEnum AllShaderBits;
    [NativeNameAttribute("Name", "GL_PROGRAM_SEPARABLE")]
public static GLEnum ProgramSeparable;
    [NativeNameAttribute("Name", "GL_ACTIVE_PROGRAM")]
public static GLEnum ActiveProgram;
    [NativeNameAttribute("Name", "GL_PROGRAM_PIPELINE_BINDING")]
public static GLEnum ProgramPipelineBinding;
    [NativeNameAttribute("Name", "GL_MAX_VIEWPORTS")]
public static GLEnum MaxViewports;
    [NativeNameAttribute("Name", "GL_VIEWPORT_SUBPIXEL_BITS")]
public static GLEnum ViewportSubpixelBits;
    [NativeNameAttribute("Name", "GL_VIEWPORT_BOUNDS_RANGE")]
public static GLEnum ViewportBoundsRange;
    [NativeNameAttribute("Name", "GL_LAYER_PROVOKING_VERTEX")]
public static GLEnum LayerProvokingVertex;
    [NativeNameAttribute("Name", "GL_VIEWPORT_INDEX_PROVOKING_VERTEX")]
public static GLEnum ViewportIndexProvokingVertex;
    [NativeNameAttribute("Name", "GL_UNDEFINED_VERTEX")]
public static GLEnum UndefinedVertex;
    [NativeNameAttribute("Name", "GL_COPY_READ_BUFFER_BINDING")]
public static GLEnum CopyReadBufferBinding;
    [NativeNameAttribute("Name", "GL_COPY_WRITE_BUFFER_BINDING")]
public static GLEnum CopyWriteBufferBinding;
    [NativeNameAttribute("Name", "GL_TRANSFORM_FEEDBACK_ACTIVE")]
public static GLEnum TransformFeedbackActive;
    [NativeNameAttribute("Name", "GL_TRANSFORM_FEEDBACK_PAUSED")]
public static GLEnum TransformFeedbackPaused;
    [NativeNameAttribute("Name", "GL_UNPACK_COMPRESSED_BLOCK_WIDTH")]
public static GLEnum UnpackCompressedBlockWidth;
    [NativeNameAttribute("Name", "GL_UNPACK_COMPRESSED_BLOCK_HEIGHT")]
public static GLEnum UnpackCompressedBlockHeight;
    [NativeNameAttribute("Name", "GL_UNPACK_COMPRESSED_BLOCK_DEPTH")]
public static GLEnum UnpackCompressedBlockDepth;
    [NativeNameAttribute("Name", "GL_UNPACK_COMPRESSED_BLOCK_SIZE")]
public static GLEnum UnpackCompressedBlockSize;
    [NativeNameAttribute("Name", "GL_PACK_COMPRESSED_BLOCK_WIDTH")]
public static GLEnum PackCompressedBlockWidth;
    [NativeNameAttribute("Name", "GL_PACK_COMPRESSED_BLOCK_HEIGHT")]
public static GLEnum PackCompressedBlockHeight;
    [NativeNameAttribute("Name", "GL_PACK_COMPRESSED_BLOCK_DEPTH")]
public static GLEnum PackCompressedBlockDepth;
    [NativeNameAttribute("Name", "GL_PACK_COMPRESSED_BLOCK_SIZE")]
public static GLEnum PackCompressedBlockSize;
    [NativeNameAttribute("Name", "GL_NUM_SAMPLE_COUNTS")]
public static GLEnum NumSampleCounts;
    [NativeNameAttribute("Name", "GL_MIN_MAP_BUFFER_ALIGNMENT")]
public static GLEnum MinMapBufferAlignment;
    [NativeNameAttribute("Name", "GL_ATOMIC_COUNTER_BUFFER")]
public static GLEnum AtomicCounterBuffer;
    [NativeNameAttribute("Name", "GL_ATOMIC_COUNTER_BUFFER_BINDING")]
public static GLEnum AtomicCounterBufferBinding;
    [NativeNameAttribute("Name", "GL_ATOMIC_COUNTER_BUFFER_START")]
public static GLEnum AtomicCounterBufferStart;
    [NativeNameAttribute("Name", "GL_ATOMIC_COUNTER_BUFFER_SIZE")]
public static GLEnum AtomicCounterBufferSize;
    [NativeNameAttribute("Name", "GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE")]
public static GLEnum AtomicCounterBufferDataSize;
    [NativeNameAttribute("Name", "GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS")]
public static GLEnum AtomicCounterBufferActiveAtomicCounters;
    [NativeNameAttribute("Name", "GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES")]
public static GLEnum AtomicCounterBufferActiveAtomicCounterIndices;
    [NativeNameAttribute("Name", "GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER")]
public static GLEnum AtomicCounterBufferReferencedByVertexShader;
    [NativeNameAttribute("Name", "GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER")]
public static GLEnum AtomicCounterBufferReferencedByTessControlShader;
    [NativeNameAttribute("Name", "GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER")]
public static GLEnum AtomicCounterBufferReferencedByTessEvaluationShader;
    [NativeNameAttribute("Name", "GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER")]
public static GLEnum AtomicCounterBufferReferencedByGeometryShader;
    [NativeNameAttribute("Name", "GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER")]
public static GLEnum AtomicCounterBufferReferencedByFragmentShader;
    [NativeNameAttribute("Name", "GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS")]
public static GLEnum MaxVertexAtomicCounterBuffers;
    [NativeNameAttribute("Name", "GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS")]
public static GLEnum MaxTessControlAtomicCounterBuffers;
    [NativeNameAttribute("Name", "GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS")]
public static GLEnum MaxTessEvaluationAtomicCounterBuffers;
    [NativeNameAttribute("Name", "GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS")]
public static GLEnum MaxGeometryAtomicCounterBuffers;
    [NativeNameAttribute("Name", "GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS")]
public static GLEnum MaxFragmentAtomicCounterBuffers;
    [NativeNameAttribute("Name", "GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS")]
public static GLEnum MaxCombinedAtomicCounterBuffers;
    [NativeNameAttribute("Name", "GL_MAX_VERTEX_ATOMIC_COUNTERS")]
public static GLEnum MaxVertexAtomicCounters;
    [NativeNameAttribute("Name", "GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS")]
public static GLEnum MaxTessControlAtomicCounters;
    [NativeNameAttribute("Name", "GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS")]
public static GLEnum MaxTessEvaluationAtomicCounters;
    [NativeNameAttribute("Name", "GL_MAX_GEOMETRY_ATOMIC_COUNTERS")]
public static GLEnum MaxGeometryAtomicCounters;
    [NativeNameAttribute("Name", "GL_MAX_FRAGMENT_ATOMIC_COUNTERS")]
public static GLEnum MaxFragmentAtomicCounters;
    [NativeNameAttribute("Name", "GL_MAX_COMBINED_ATOMIC_COUNTERS")]
public static GLEnum MaxCombinedAtomicCounters;
    [NativeNameAttribute("Name", "GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE")]
public static GLEnum MaxAtomicCounterBufferSize;
    [NativeNameAttribute("Name", "GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS")]
public static GLEnum MaxAtomicCounterBufferBindings;
    [NativeNameAttribute("Name", "GL_ACTIVE_ATOMIC_COUNTER_BUFFERS")]
public static GLEnum ActiveAtomicCounterBuffers;
    [NativeNameAttribute("Name", "GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX")]
public static GLEnum UniformAtomicCounterBufferIndex;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_ATOMIC_COUNTER")]
public static GLEnum UnsignedIntAtomicCounter;
    [NativeNameAttribute("Name", "GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT")]
public static GLEnum VertexAttribArrayBarrierBit;
    [NativeNameAttribute("Name", "GL_ELEMENT_ARRAY_BARRIER_BIT")]
public static GLEnum ElementArrayBarrierBit;
    [NativeNameAttribute("Name", "GL_UNIFORM_BARRIER_BIT")]
public static GLEnum UniformBarrierBit;
    [NativeNameAttribute("Name", "GL_TEXTURE_FETCH_BARRIER_BIT")]
public static GLEnum TextureFetchBarrierBit;
    [NativeNameAttribute("Name", "GL_SHADER_IMAGE_ACCESS_BARRIER_BIT")]
public static GLEnum ShaderImageAccessBarrierBit;
    [NativeNameAttribute("Name", "GL_COMMAND_BARRIER_BIT")]
public static GLEnum CommandBarrierBit;
    [NativeNameAttribute("Name", "GL_PIXEL_BUFFER_BARRIER_BIT")]
public static GLEnum PixelBufferBarrierBit;
    [NativeNameAttribute("Name", "GL_TEXTURE_UPDATE_BARRIER_BIT")]
public static GLEnum TextureUpdateBarrierBit;
    [NativeNameAttribute("Name", "GL_BUFFER_UPDATE_BARRIER_BIT")]
public static GLEnum BufferUpdateBarrierBit;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_BARRIER_BIT")]
public static GLEnum FramebufferBarrierBit;
    [NativeNameAttribute("Name", "GL_TRANSFORM_FEEDBACK_BARRIER_BIT")]
public static GLEnum TransformFeedbackBarrierBit;
    [NativeNameAttribute("Name", "GL_ATOMIC_COUNTER_BARRIER_BIT")]
public static GLEnum AtomicCounterBarrierBit;
    [NativeNameAttribute("Name", "GL_ALL_BARRIER_BITS")]
public static GLEnum AllBarrierBits;
    [NativeNameAttribute("Name", "GL_MAX_IMAGE_UNITS")]
public static GLEnum MaxImageUnits;
    [NativeNameAttribute("Name", "GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS")]
public static GLEnum MaxCombinedImageUnitsAndFragmentOutputs;
    [NativeNameAttribute("Name", "GL_IMAGE_BINDING_NAME")]
public static GLEnum ImageBindingName;
    [NativeNameAttribute("Name", "GL_IMAGE_BINDING_LEVEL")]
public static GLEnum ImageBindingLevel;
    [NativeNameAttribute("Name", "GL_IMAGE_BINDING_LAYERED")]
public static GLEnum ImageBindingLayered;
    [NativeNameAttribute("Name", "GL_IMAGE_BINDING_LAYER")]
public static GLEnum ImageBindingLayer;
    [NativeNameAttribute("Name", "GL_IMAGE_BINDING_ACCESS")]
public static GLEnum ImageBindingAccess;
    [NativeNameAttribute("Name", "GL_IMAGE_1D")]
public static GLEnum Image1D;
    [NativeNameAttribute("Name", "GL_IMAGE_2D")]
public static GLEnum Image2D;
    [NativeNameAttribute("Name", "GL_IMAGE_3D")]
public static GLEnum Image3D;
    [NativeNameAttribute("Name", "GL_IMAGE_2D_RECT")]
public static GLEnum Image2DRect;
    [NativeNameAttribute("Name", "GL_IMAGE_CUBE")]
public static GLEnum ImageCube;
    [NativeNameAttribute("Name", "GL_IMAGE_BUFFER")]
public static GLEnum ImageBuffer;
    [NativeNameAttribute("Name", "GL_IMAGE_1D_ARRAY")]
public static GLEnum Image1DArray;
    [NativeNameAttribute("Name", "GL_IMAGE_2D_ARRAY")]
public static GLEnum Image2DArray;
    [NativeNameAttribute("Name", "GL_IMAGE_CUBE_MAP_ARRAY")]
public static GLEnum ImageCubeMapArray;
    [NativeNameAttribute("Name", "GL_IMAGE_2D_MULTISAMPLE")]
public static GLEnum Image2DMultisample;
    [NativeNameAttribute("Name", "GL_IMAGE_2D_MULTISAMPLE_ARRAY")]
public static GLEnum Image2DMultisampleArray;
    [NativeNameAttribute("Name", "GL_INT_IMAGE_1D")]
public static GLEnum IntImage1D;
    [NativeNameAttribute("Name", "GL_INT_IMAGE_2D")]
public static GLEnum IntImage2D;
    [NativeNameAttribute("Name", "GL_INT_IMAGE_3D")]
public static GLEnum IntImage3D;
    [NativeNameAttribute("Name", "GL_INT_IMAGE_2D_RECT")]
public static GLEnum IntImage2DRect;
    [NativeNameAttribute("Name", "GL_INT_IMAGE_CUBE")]
public static GLEnum IntImageCube;
    [NativeNameAttribute("Name", "GL_INT_IMAGE_BUFFER")]
public static GLEnum IntImageBuffer;
    [NativeNameAttribute("Name", "GL_INT_IMAGE_1D_ARRAY")]
public static GLEnum IntImage1DArray;
    [NativeNameAttribute("Name", "GL_INT_IMAGE_2D_ARRAY")]
public static GLEnum IntImage2DArray;
    [NativeNameAttribute("Name", "GL_INT_IMAGE_CUBE_MAP_ARRAY")]
public static GLEnum IntImageCubeMapArray;
    [NativeNameAttribute("Name", "GL_INT_IMAGE_2D_MULTISAMPLE")]
public static GLEnum IntImage2DMultisample;
    [NativeNameAttribute("Name", "GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY")]
public static GLEnum IntImage2DMultisampleArray;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_IMAGE_1D")]
public static GLEnum UnsignedIntImage1D;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_IMAGE_2D")]
public static GLEnum UnsignedIntImage2D;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_IMAGE_3D")]
public static GLEnum UnsignedIntImage3D;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_IMAGE_2D_RECT")]
public static GLEnum UnsignedIntImage2DRect;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_IMAGE_CUBE")]
public static GLEnum UnsignedIntImageCube;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_IMAGE_BUFFER")]
public static GLEnum UnsignedIntImageBuffer;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_IMAGE_1D_ARRAY")]
public static GLEnum UnsignedIntImage1DArray;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_IMAGE_2D_ARRAY")]
public static GLEnum UnsignedIntImage2DArray;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY")]
public static GLEnum UnsignedIntImageCubeMapArray;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE")]
public static GLEnum UnsignedIntImage2DMultisample;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY")]
public static GLEnum UnsignedIntImage2DMultisampleArray;
    [NativeNameAttribute("Name", "GL_MAX_IMAGE_SAMPLES")]
public static GLEnum MaxImageSamples;
    [NativeNameAttribute("Name", "GL_IMAGE_BINDING_FORMAT")]
public static GLEnum ImageBindingFormat;
    [NativeNameAttribute("Name", "GL_IMAGE_FORMAT_COMPATIBILITY_TYPE")]
public static GLEnum ImageFormatCompatibilityType;
    [NativeNameAttribute("Name", "GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE")]
public static GLEnum ImageFormatCompatibilityBySize;
    [NativeNameAttribute("Name", "GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS")]
public static GLEnum ImageFormatCompatibilityByClass;
    [NativeNameAttribute("Name", "GL_MAX_VERTEX_IMAGE_UNIFORMS")]
public static GLEnum MaxVertexImageUniforms;
    [NativeNameAttribute("Name", "GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS")]
public static GLEnum MaxTessControlImageUniforms;
    [NativeNameAttribute("Name", "GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS")]
public static GLEnum MaxTessEvaluationImageUniforms;
    [NativeNameAttribute("Name", "GL_MAX_GEOMETRY_IMAGE_UNIFORMS")]
public static GLEnum MaxGeometryImageUniforms;
    [NativeNameAttribute("Name", "GL_MAX_FRAGMENT_IMAGE_UNIFORMS")]
public static GLEnum MaxFragmentImageUniforms;
    [NativeNameAttribute("Name", "GL_MAX_COMBINED_IMAGE_UNIFORMS")]
public static GLEnum MaxCombinedImageUniforms;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_BPTC_UNORM")]
public static GLEnum CompressedRgbaBptcUnorm;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM")]
public static GLEnum CompressedSrgbAlphaBptcUnorm;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT")]
public static GLEnum CompressedRgbBptcSignedFloat;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT")]
public static GLEnum CompressedRgbBptcUnsignedFloat;
    [NativeNameAttribute("Name", "GL_TEXTURE_IMMUTABLE_FORMAT")]
public static GLEnum TextureImmutableFormat;
    [NativeNameAttribute("Name", "GL_NUM_SHADING_LANGUAGE_VERSIONS")]
public static GLEnum NumShadingLanguageVersions;
    [NativeNameAttribute("Name", "GL_VERTEX_ATTRIB_ARRAY_LONG")]
public static GLEnum VertexAttribArrayLong;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGB8_ETC2")]
public static GLEnum CompressedRgb8Etc2;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ETC2")]
public static GLEnum CompressedSrgb8Etc2;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2")]
public static GLEnum CompressedRgb8PunchthroughAlpha1Etc2;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2")]
public static GLEnum CompressedSrgb8PunchthroughAlpha1Etc2;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA8_ETC2_EAC")]
public static GLEnum CompressedRgba8Etc2Eac;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC")]
public static GLEnum CompressedSrgb8Alpha8Etc2Eac;
    [NativeNameAttribute("Name", "GL_COMPRESSED_R11_EAC")]
public static GLEnum CompressedR11Eac;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SIGNED_R11_EAC")]
public static GLEnum CompressedSignedR11Eac;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RG11_EAC")]
public static GLEnum CompressedRG11Eac;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SIGNED_RG11_EAC")]
public static GLEnum CompressedSignedRG11Eac;
    [NativeNameAttribute("Name", "GL_PRIMITIVE_RESTART_FIXED_INDEX")]
public static GLEnum PrimitiveRestartFixedIndex;
    [NativeNameAttribute("Name", "GL_ANY_SAMPLES_PASSED_CONSERVATIVE")]
public static GLEnum AnySamplesPassedConservative;
    [NativeNameAttribute("Name", "GL_MAX_ELEMENT_INDEX")]
public static GLEnum MaxElementIndex;
    [NativeNameAttribute("Name", "GL_COMPUTE_SHADER")]
public static GLEnum ComputeShader;
    [NativeNameAttribute("Name", "GL_MAX_COMPUTE_UNIFORM_BLOCKS")]
public static GLEnum MaxComputeUniformBlocks;
    [NativeNameAttribute("Name", "GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS")]
public static GLEnum MaxComputeTextureImageUnits;
    [NativeNameAttribute("Name", "GL_MAX_COMPUTE_IMAGE_UNIFORMS")]
public static GLEnum MaxComputeImageUniforms;
    [NativeNameAttribute("Name", "GL_MAX_COMPUTE_SHARED_MEMORY_SIZE")]
public static GLEnum MaxComputeSharedMemorySize;
    [NativeNameAttribute("Name", "GL_MAX_COMPUTE_UNIFORM_COMPONENTS")]
public static GLEnum MaxComputeUniformComponents;
    [NativeNameAttribute("Name", "GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS")]
public static GLEnum MaxComputeAtomicCounterBuffers;
    [NativeNameAttribute("Name", "GL_MAX_COMPUTE_ATOMIC_COUNTERS")]
public static GLEnum MaxComputeAtomicCounters;
    [NativeNameAttribute("Name", "GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS")]
public static GLEnum MaxCombinedComputeUniformComponents;
    [NativeNameAttribute("Name", "GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS")]
public static GLEnum MaxComputeWorkGroupInvocations;
    [NativeNameAttribute("Name", "GL_MAX_COMPUTE_WORK_GROUP_COUNT")]
public static GLEnum MaxComputeWorkGroupCount;
    [NativeNameAttribute("Name", "GL_MAX_COMPUTE_WORK_GROUP_SIZE")]
public static GLEnum MaxComputeWorkGroupSize;
    [NativeNameAttribute("Name", "GL_COMPUTE_WORK_GROUP_SIZE")]
public static GLEnum ComputeWorkGroupSize;
    [NativeNameAttribute("Name", "GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER")]
public static GLEnum UniformBlockReferencedByComputeShader;
    [NativeNameAttribute("Name", "GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER")]
public static GLEnum AtomicCounterBufferReferencedByComputeShader;
    [NativeNameAttribute("Name", "GL_DISPATCH_INDIRECT_BUFFER")]
public static GLEnum DispatchIndirectBuffer;
    [NativeNameAttribute("Name", "GL_DISPATCH_INDIRECT_BUFFER_BINDING")]
public static GLEnum DispatchIndirectBufferBinding;
    [NativeNameAttribute("Name", "GL_COMPUTE_SHADER_BIT")]
public static GLEnum ComputeShaderBit;
    [NativeNameAttribute("Name", "GL_DEBUG_OUTPUT_SYNCHRONOUS")]
public static GLEnum DebugOutputSynchronous;
    [NativeNameAttribute("Name", "GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH")]
public static GLEnum DebugNextLoggedMessageLength;
    [NativeNameAttribute("Name", "GL_DEBUG_CALLBACK_FUNCTION")]
public static GLEnum DebugCallbackFunction;
    [NativeNameAttribute("Name", "GL_DEBUG_CALLBACK_USER_PARAM")]
public static GLEnum DebugCallbackUserParam;
    [NativeNameAttribute("Name", "GL_DEBUG_SOURCE_API")]
public static GLEnum DebugSourceApi;
    [NativeNameAttribute("Name", "GL_DEBUG_SOURCE_WINDOW_SYSTEM")]
public static GLEnum DebugSourceWindowSystem;
    [NativeNameAttribute("Name", "GL_DEBUG_SOURCE_SHADER_COMPILER")]
public static GLEnum DebugSourceShaderCompiler;
    [NativeNameAttribute("Name", "GL_DEBUG_SOURCE_THIRD_PARTY")]
public static GLEnum DebugSourceThirdParty;
    [NativeNameAttribute("Name", "GL_DEBUG_SOURCE_APPLICATION")]
public static GLEnum DebugSourceApplication;
    [NativeNameAttribute("Name", "GL_DEBUG_SOURCE_OTHER")]
public static GLEnum DebugSourceOther;
    [NativeNameAttribute("Name", "GL_DEBUG_TYPE_ERROR")]
public static GLEnum DebugTypeError;
    [NativeNameAttribute("Name", "GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR")]
public static GLEnum DebugTypeDeprecatedBehavior;
    [NativeNameAttribute("Name", "GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR")]
public static GLEnum DebugTypeUndefinedBehavior;
    [NativeNameAttribute("Name", "GL_DEBUG_TYPE_PORTABILITY")]
public static GLEnum DebugTypePortability;
    [NativeNameAttribute("Name", "GL_DEBUG_TYPE_PERFORMANCE")]
public static GLEnum DebugTypePerformance;
    [NativeNameAttribute("Name", "GL_DEBUG_TYPE_OTHER")]
public static GLEnum DebugTypeOther;
    [NativeNameAttribute("Name", "GL_MAX_DEBUG_MESSAGE_LENGTH")]
public static GLEnum MaxDebugMessageLength;
    [NativeNameAttribute("Name", "GL_MAX_DEBUG_LOGGED_MESSAGES")]
public static GLEnum MaxDebugLoggedMessages;
    [NativeNameAttribute("Name", "GL_DEBUG_LOGGED_MESSAGES")]
public static GLEnum DebugLoggedMessages;
    [NativeNameAttribute("Name", "GL_DEBUG_SEVERITY_HIGH")]
public static GLEnum DebugSeverityHigh;
    [NativeNameAttribute("Name", "GL_DEBUG_SEVERITY_MEDIUM")]
public static GLEnum DebugSeverityMedium;
    [NativeNameAttribute("Name", "GL_DEBUG_SEVERITY_LOW")]
public static GLEnum DebugSeverityLow;
    [NativeNameAttribute("Name", "GL_DEBUG_TYPE_MARKER")]
public static GLEnum DebugTypeMarker;
    [NativeNameAttribute("Name", "GL_DEBUG_TYPE_PUSH_GROUP")]
public static GLEnum DebugTypePushGroup;
    [NativeNameAttribute("Name", "GL_DEBUG_TYPE_POP_GROUP")]
public static GLEnum DebugTypePopGroup;
    [NativeNameAttribute("Name", "GL_DEBUG_SEVERITY_NOTIFICATION")]
public static GLEnum DebugSeverityNotification;
    [NativeNameAttribute("Name", "GL_MAX_DEBUG_GROUP_STACK_DEPTH")]
public static GLEnum MaxDebugGroupStackDepth;
    [NativeNameAttribute("Name", "GL_DEBUG_GROUP_STACK_DEPTH")]
public static GLEnum DebugGroupStackDepth;
    [NativeNameAttribute("Name", "GL_BUFFER")]
public static GLEnum Buffer;
    [NativeNameAttribute("Name", "GL_SHADER")]
public static GLEnum Shader;
    [NativeNameAttribute("Name", "GL_PROGRAM")]
public static GLEnum Program;
    [NativeNameAttribute("Name", "GL_VERTEX_ARRAY")]
public static GLEnum VertexArray;
    [NativeNameAttribute("Name", "GL_QUERY")]
public static GLEnum Query;
    [NativeNameAttribute("Name", "GL_PROGRAM_PIPELINE")]
public static GLEnum ProgramPipeline;
    [NativeNameAttribute("Name", "GL_SAMPLER")]
public static GLEnum Sampler;
    [NativeNameAttribute("Name", "GL_MAX_LABEL_LENGTH")]
public static GLEnum MaxLabelLength;
    [NativeNameAttribute("Name", "GL_DEBUG_OUTPUT")]
public static GLEnum DebugOutput;
    [NativeNameAttribute("Name", "GL_CONTEXT_FLAG_DEBUG_BIT")]
public static GLEnum ContextFlagDebugBit;
    [NativeNameAttribute("Name", "GL_MAX_UNIFORM_LOCATIONS")]
public static GLEnum MaxUniformLocations;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_DEFAULT_WIDTH")]
public static GLEnum FramebufferDefaultWidth;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_DEFAULT_HEIGHT")]
public static GLEnum FramebufferDefaultHeight;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_DEFAULT_LAYERS")]
public static GLEnum FramebufferDefaultLayers;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_DEFAULT_SAMPLES")]
public static GLEnum FramebufferDefaultSamples;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS")]
public static GLEnum FramebufferDefaultFixedSampleLocations;
    [NativeNameAttribute("Name", "GL_MAX_FRAMEBUFFER_WIDTH")]
public static GLEnum MaxFramebufferWidth;
    [NativeNameAttribute("Name", "GL_MAX_FRAMEBUFFER_HEIGHT")]
public static GLEnum MaxFramebufferHeight;
    [NativeNameAttribute("Name", "GL_MAX_FRAMEBUFFER_LAYERS")]
public static GLEnum MaxFramebufferLayers;
    [NativeNameAttribute("Name", "GL_MAX_FRAMEBUFFER_SAMPLES")]
public static GLEnum MaxFramebufferSamples;
    [NativeNameAttribute("Name", "GL_INTERNALFORMAT_SUPPORTED")]
public static GLEnum InternalformatSupported;
    [NativeNameAttribute("Name", "GL_INTERNALFORMAT_PREFERRED")]
public static GLEnum InternalformatPreferred;
    [NativeNameAttribute("Name", "GL_INTERNALFORMAT_RED_SIZE")]
public static GLEnum InternalformatRedSize;
    [NativeNameAttribute("Name", "GL_INTERNALFORMAT_GREEN_SIZE")]
public static GLEnum InternalformatGreenSize;
    [NativeNameAttribute("Name", "GL_INTERNALFORMAT_BLUE_SIZE")]
public static GLEnum InternalformatBlueSize;
    [NativeNameAttribute("Name", "GL_INTERNALFORMAT_ALPHA_SIZE")]
public static GLEnum InternalformatAlphaSize;
    [NativeNameAttribute("Name", "GL_INTERNALFORMAT_DEPTH_SIZE")]
public static GLEnum InternalformatDepthSize;
    [NativeNameAttribute("Name", "GL_INTERNALFORMAT_STENCIL_SIZE")]
public static GLEnum InternalformatStencilSize;
    [NativeNameAttribute("Name", "GL_INTERNALFORMAT_SHARED_SIZE")]
public static GLEnum InternalformatSharedSize;
    [NativeNameAttribute("Name", "GL_INTERNALFORMAT_RED_TYPE")]
public static GLEnum InternalformatRedType;
    [NativeNameAttribute("Name", "GL_INTERNALFORMAT_GREEN_TYPE")]
public static GLEnum InternalformatGreenType;
    [NativeNameAttribute("Name", "GL_INTERNALFORMAT_BLUE_TYPE")]
public static GLEnum InternalformatBlueType;
    [NativeNameAttribute("Name", "GL_INTERNALFORMAT_ALPHA_TYPE")]
public static GLEnum InternalformatAlphaType;
    [NativeNameAttribute("Name", "GL_INTERNALFORMAT_DEPTH_TYPE")]
public static GLEnum InternalformatDepthType;
    [NativeNameAttribute("Name", "GL_INTERNALFORMAT_STENCIL_TYPE")]
public static GLEnum InternalformatStencilType;
    [NativeNameAttribute("Name", "GL_MAX_WIDTH")]
public static GLEnum MaxWidth;
    [NativeNameAttribute("Name", "GL_MAX_HEIGHT")]
public static GLEnum MaxHeight;
    [NativeNameAttribute("Name", "GL_MAX_DEPTH")]
public static GLEnum MaxDepth;
    [NativeNameAttribute("Name", "GL_MAX_LAYERS")]
public static GLEnum MaxLayers;
    [NativeNameAttribute("Name", "GL_MAX_COMBINED_DIMENSIONS")]
public static GLEnum MaxCombinedDimensions;
    [NativeNameAttribute("Name", "GL_COLOR_COMPONENTS")]
public static GLEnum ColorComponents;
    [NativeNameAttribute("Name", "GL_DEPTH_COMPONENTS")]
public static GLEnum DepthComponents;
    [NativeNameAttribute("Name", "GL_STENCIL_COMPONENTS")]
public static GLEnum StencilComponents;
    [NativeNameAttribute("Name", "GL_COLOR_RENDERABLE")]
public static GLEnum ColorRenderable;
    [NativeNameAttribute("Name", "GL_DEPTH_RENDERABLE")]
public static GLEnum DepthRenderable;
    [NativeNameAttribute("Name", "GL_STENCIL_RENDERABLE")]
public static GLEnum StencilRenderable;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_RENDERABLE")]
public static GLEnum FramebufferRenderable;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_RENDERABLE_LAYERED")]
public static GLEnum FramebufferRenderableLayered;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_BLEND")]
public static GLEnum FramebufferBlend;
    [NativeNameAttribute("Name", "GL_READ_PIXELS")]
public static GLEnum ReadPixels;
    [NativeNameAttribute("Name", "GL_READ_PIXELS_FORMAT")]
public static GLEnum ReadPixelsFormat;
    [NativeNameAttribute("Name", "GL_READ_PIXELS_TYPE")]
public static GLEnum ReadPixelsType;
    [NativeNameAttribute("Name", "GL_TEXTURE_IMAGE_FORMAT")]
public static GLEnum TextureImageFormat;
    [NativeNameAttribute("Name", "GL_TEXTURE_IMAGE_TYPE")]
public static GLEnum TextureImageType;
    [NativeNameAttribute("Name", "GL_GET_TEXTURE_IMAGE_FORMAT")]
public static GLEnum GetTextureImageFormat;
    [NativeNameAttribute("Name", "GL_GET_TEXTURE_IMAGE_TYPE")]
public static GLEnum GetTextureImageType;
    [NativeNameAttribute("Name", "GL_MIPMAP")]
public static GLEnum Mipmap;
    [NativeNameAttribute("Name", "GL_MANUAL_GENERATE_MIPMAP")]
public static GLEnum ManualGenerateMipmap;
    [NativeNameAttribute("Name", "GL_AUTO_GENERATE_MIPMAP")]
public static GLEnum AutoGenerateMipmap;
    [NativeNameAttribute("Name", "GL_COLOR_ENCODING")]
public static GLEnum ColorEncoding;
    [NativeNameAttribute("Name", "GL_SRGB_READ")]
public static GLEnum SrgbRead;
    [NativeNameAttribute("Name", "GL_SRGB_WRITE")]
public static GLEnum SrgbWrite;
    [NativeNameAttribute("Name", "GL_FILTER")]
public static GLEnum Filter;
    [NativeNameAttribute("Name", "GL_VERTEX_TEXTURE")]
public static GLEnum VertexTexture;
    [NativeNameAttribute("Name", "GL_TESS_CONTROL_TEXTURE")]
public static GLEnum TessControlTexture;
    [NativeNameAttribute("Name", "GL_TESS_EVALUATION_TEXTURE")]
public static GLEnum TessEvaluationTexture;
    [NativeNameAttribute("Name", "GL_GEOMETRY_TEXTURE")]
public static GLEnum GeometryTexture;
    [NativeNameAttribute("Name", "GL_FRAGMENT_TEXTURE")]
public static GLEnum FragmentTexture;
    [NativeNameAttribute("Name", "GL_COMPUTE_TEXTURE")]
public static GLEnum ComputeTexture;
    [NativeNameAttribute("Name", "GL_TEXTURE_SHADOW")]
public static GLEnum TextureShadow;
    [NativeNameAttribute("Name", "GL_TEXTURE_GATHER")]
public static GLEnum TextureGather;
    [NativeNameAttribute("Name", "GL_TEXTURE_GATHER_SHADOW")]
public static GLEnum TextureGatherShadow;
    [NativeNameAttribute("Name", "GL_SHADER_IMAGE_LOAD")]
public static GLEnum ShaderImageLoad;
    [NativeNameAttribute("Name", "GL_SHADER_IMAGE_STORE")]
public static GLEnum ShaderImageStore;
    [NativeNameAttribute("Name", "GL_SHADER_IMAGE_ATOMIC")]
public static GLEnum ShaderImageAtomic;
    [NativeNameAttribute("Name", "GL_IMAGE_TEXEL_SIZE")]
public static GLEnum ImageTexelSize;
    [NativeNameAttribute("Name", "GL_IMAGE_COMPATIBILITY_CLASS")]
public static GLEnum ImageCompatibilityClass;
    [NativeNameAttribute("Name", "GL_IMAGE_PIXEL_FORMAT")]
public static GLEnum ImagePixelFormat;
    [NativeNameAttribute("Name", "GL_IMAGE_PIXEL_TYPE")]
public static GLEnum ImagePixelType;
    [NativeNameAttribute("Name", "GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST")]
public static GLEnum SimultaneousTextureAndDepthTest;
    [NativeNameAttribute("Name", "GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST")]
public static GLEnum SimultaneousTextureAndStencilTest;
    [NativeNameAttribute("Name", "GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE")]
public static GLEnum SimultaneousTextureAndDepthWrite;
    [NativeNameAttribute("Name", "GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE")]
public static GLEnum SimultaneousTextureAndStencilWrite;
    [NativeNameAttribute("Name", "GL_TEXTURE_COMPRESSED_BLOCK_WIDTH")]
public static GLEnum TextureCompressedBlockWidth;
    [NativeNameAttribute("Name", "GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT")]
public static GLEnum TextureCompressedBlockHeight;
    [NativeNameAttribute("Name", "GL_TEXTURE_COMPRESSED_BLOCK_SIZE")]
public static GLEnum TextureCompressedBlockSize;
    [NativeNameAttribute("Name", "GL_CLEAR_BUFFER")]
public static GLEnum ClearBuffer;
    [NativeNameAttribute("Name", "GL_TEXTURE_VIEW")]
public static GLEnum TextureView;
    [NativeNameAttribute("Name", "GL_VIEW_COMPATIBILITY_CLASS")]
public static GLEnum ViewCompatibilityClass;
    [NativeNameAttribute("Name", "GL_FULL_SUPPORT")]
public static GLEnum FullSupport;
    [NativeNameAttribute("Name", "GL_CAVEAT_SUPPORT")]
public static GLEnum CaveatSupport;
    [NativeNameAttribute("Name", "GL_IMAGE_CLASS_4_X_32")]
public static GLEnum ImageClass4X32;
    [NativeNameAttribute("Name", "GL_IMAGE_CLASS_2_X_32")]
public static GLEnum ImageClass2X32;
    [NativeNameAttribute("Name", "GL_IMAGE_CLASS_1_X_32")]
public static GLEnum ImageClass1X32;
    [NativeNameAttribute("Name", "GL_IMAGE_CLASS_4_X_16")]
public static GLEnum ImageClass4X16;
    [NativeNameAttribute("Name", "GL_IMAGE_CLASS_2_X_16")]
public static GLEnum ImageClass2X16;
    [NativeNameAttribute("Name", "GL_IMAGE_CLASS_1_X_16")]
public static GLEnum ImageClass1X16;
    [NativeNameAttribute("Name", "GL_IMAGE_CLASS_4_X_8")]
public static GLEnum ImageClass4X8;
    [NativeNameAttribute("Name", "GL_IMAGE_CLASS_2_X_8")]
public static GLEnum ImageClass2X8;
    [NativeNameAttribute("Name", "GL_IMAGE_CLASS_1_X_8")]
public static GLEnum ImageClass1X8;
    [NativeNameAttribute("Name", "GL_IMAGE_CLASS_11_11_10")]
public static GLEnum ImageClass111110;
    [NativeNameAttribute("Name", "GL_IMAGE_CLASS_10_10_10_2")]
public static GLEnum ImageClass1010102;
    [NativeNameAttribute("Name", "GL_VIEW_CLASS_128_BITS")]
public static GLEnum ViewClass128Bits;
    [NativeNameAttribute("Name", "GL_VIEW_CLASS_96_BITS")]
public static GLEnum ViewClass96Bits;
    [NativeNameAttribute("Name", "GL_VIEW_CLASS_64_BITS")]
public static GLEnum ViewClass64Bits;
    [NativeNameAttribute("Name", "GL_VIEW_CLASS_48_BITS")]
public static GLEnum ViewClass48Bits;
    [NativeNameAttribute("Name", "GL_VIEW_CLASS_32_BITS")]
public static GLEnum ViewClass32Bits;
    [NativeNameAttribute("Name", "GL_VIEW_CLASS_24_BITS")]
public static GLEnum ViewClass24Bits;
    [NativeNameAttribute("Name", "GL_VIEW_CLASS_16_BITS")]
public static GLEnum ViewClass16Bits;
    [NativeNameAttribute("Name", "GL_VIEW_CLASS_8_BITS")]
public static GLEnum ViewClass8Bits;
    [NativeNameAttribute("Name", "GL_VIEW_CLASS_S3TC_DXT1_RGB")]
public static GLEnum ViewClassS3TCDxt1Rgb;
    [NativeNameAttribute("Name", "GL_VIEW_CLASS_S3TC_DXT1_RGBA")]
public static GLEnum ViewClassS3TCDxt1Rgba;
    [NativeNameAttribute("Name", "GL_VIEW_CLASS_S3TC_DXT3_RGBA")]
public static GLEnum ViewClassS3TCDxt3Rgba;
    [NativeNameAttribute("Name", "GL_VIEW_CLASS_S3TC_DXT5_RGBA")]
public static GLEnum ViewClassS3TCDxt5Rgba;
    [NativeNameAttribute("Name", "GL_VIEW_CLASS_RGTC1_RED")]
public static GLEnum ViewClassRgtc1Red;
    [NativeNameAttribute("Name", "GL_VIEW_CLASS_RGTC2_RG")]
public static GLEnum ViewClassRgtc2RG;
    [NativeNameAttribute("Name", "GL_VIEW_CLASS_BPTC_UNORM")]
public static GLEnum ViewClassBptcUnorm;
    [NativeNameAttribute("Name", "GL_VIEW_CLASS_BPTC_FLOAT")]
public static GLEnum ViewClassBptcFloat;
    [NativeNameAttribute("Name", "GL_UNIFORM")]
public static GLEnum Uniform;
    [NativeNameAttribute("Name", "GL_UNIFORM_BLOCK")]
public static GLEnum UniformBlock;
    [NativeNameAttribute("Name", "GL_PROGRAM_INPUT")]
public static GLEnum ProgramInput;
    [NativeNameAttribute("Name", "GL_PROGRAM_OUTPUT")]
public static GLEnum ProgramOutput;
    [NativeNameAttribute("Name", "GL_BUFFER_VARIABLE")]
public static GLEnum BufferVariable;
    [NativeNameAttribute("Name", "GL_SHADER_STORAGE_BLOCK")]
public static GLEnum ShaderStorageBlock;
    [NativeNameAttribute("Name", "GL_VERTEX_SUBROUTINE")]
public static GLEnum VertexSubroutine;
    [NativeNameAttribute("Name", "GL_TESS_CONTROL_SUBROUTINE")]
public static GLEnum TessControlSubroutine;
    [NativeNameAttribute("Name", "GL_TESS_EVALUATION_SUBROUTINE")]
public static GLEnum TessEvaluationSubroutine;
    [NativeNameAttribute("Name", "GL_GEOMETRY_SUBROUTINE")]
public static GLEnum GeometrySubroutine;
    [NativeNameAttribute("Name", "GL_FRAGMENT_SUBROUTINE")]
public static GLEnum FragmentSubroutine;
    [NativeNameAttribute("Name", "GL_COMPUTE_SUBROUTINE")]
public static GLEnum ComputeSubroutine;
    [NativeNameAttribute("Name", "GL_VERTEX_SUBROUTINE_UNIFORM")]
public static GLEnum VertexSubroutineUniform;
    [NativeNameAttribute("Name", "GL_TESS_CONTROL_SUBROUTINE_UNIFORM")]
public static GLEnum TessControlSubroutineUniform;
    [NativeNameAttribute("Name", "GL_TESS_EVALUATION_SUBROUTINE_UNIFORM")]
public static GLEnum TessEvaluationSubroutineUniform;
    [NativeNameAttribute("Name", "GL_GEOMETRY_SUBROUTINE_UNIFORM")]
public static GLEnum GeometrySubroutineUniform;
    [NativeNameAttribute("Name", "GL_FRAGMENT_SUBROUTINE_UNIFORM")]
public static GLEnum FragmentSubroutineUniform;
    [NativeNameAttribute("Name", "GL_COMPUTE_SUBROUTINE_UNIFORM")]
public static GLEnum ComputeSubroutineUniform;
    [NativeNameAttribute("Name", "GL_TRANSFORM_FEEDBACK_VARYING")]
public static GLEnum TransformFeedbackVarying;
    [NativeNameAttribute("Name", "GL_ACTIVE_RESOURCES")]
public static GLEnum ActiveResources;
    [NativeNameAttribute("Name", "GL_MAX_NAME_LENGTH")]
public static GLEnum MaxNameLength;
    [NativeNameAttribute("Name", "GL_MAX_NUM_ACTIVE_VARIABLES")]
public static GLEnum MaxNumActiveVariables;
    [NativeNameAttribute("Name", "GL_MAX_NUM_COMPATIBLE_SUBROUTINES")]
public static GLEnum MaxNumCompatibleSubroutines;
    [NativeNameAttribute("Name", "GL_NAME_LENGTH")]
public static GLEnum NameLength;
    [NativeNameAttribute("Name", "GL_TYPE")]
public static GLEnum Type;
    [NativeNameAttribute("Name", "GL_ARRAY_SIZE")]
public static GLEnum ArraySize;
    [NativeNameAttribute("Name", "GL_OFFSET")]
public static GLEnum Offset;
    [NativeNameAttribute("Name", "GL_BLOCK_INDEX")]
public static GLEnum BlockIndex;
    [NativeNameAttribute("Name", "GL_ARRAY_STRIDE")]
public static GLEnum ArrayStride;
    [NativeNameAttribute("Name", "GL_MATRIX_STRIDE")]
public static GLEnum MatrixStride;
    [NativeNameAttribute("Name", "GL_IS_ROW_MAJOR")]
public static GLEnum IsRowMajor;
    [NativeNameAttribute("Name", "GL_ATOMIC_COUNTER_BUFFER_INDEX")]
public static GLEnum AtomicCounterBufferIndex;
    [NativeNameAttribute("Name", "GL_BUFFER_BINDING")]
public static GLEnum BufferBinding;
    [NativeNameAttribute("Name", "GL_BUFFER_DATA_SIZE")]
public static GLEnum BufferDataSize;
    [NativeNameAttribute("Name", "GL_NUM_ACTIVE_VARIABLES")]
public static GLEnum NumActiveVariables;
    [NativeNameAttribute("Name", "GL_ACTIVE_VARIABLES")]
public static GLEnum ActiveVariables;
    [NativeNameAttribute("Name", "GL_REFERENCED_BY_VERTEX_SHADER")]
public static GLEnum ReferencedByVertexShader;
    [NativeNameAttribute("Name", "GL_REFERENCED_BY_TESS_CONTROL_SHADER")]
public static GLEnum ReferencedByTessControlShader;
    [NativeNameAttribute("Name", "GL_REFERENCED_BY_TESS_EVALUATION_SHADER")]
public static GLEnum ReferencedByTessEvaluationShader;
    [NativeNameAttribute("Name", "GL_REFERENCED_BY_GEOMETRY_SHADER")]
public static GLEnum ReferencedByGeometryShader;
    [NativeNameAttribute("Name", "GL_REFERENCED_BY_FRAGMENT_SHADER")]
public static GLEnum ReferencedByFragmentShader;
    [NativeNameAttribute("Name", "GL_REFERENCED_BY_COMPUTE_SHADER")]
public static GLEnum ReferencedByComputeShader;
    [NativeNameAttribute("Name", "GL_TOP_LEVEL_ARRAY_SIZE")]
public static GLEnum TopLevelArraySize;
    [NativeNameAttribute("Name", "GL_TOP_LEVEL_ARRAY_STRIDE")]
public static GLEnum TopLevelArrayStride;
    [NativeNameAttribute("Name", "GL_LOCATION")]
public static GLEnum Location;
    [NativeNameAttribute("Name", "GL_LOCATION_INDEX")]
public static GLEnum LocationIndex;
    [NativeNameAttribute("Name", "GL_IS_PER_PATCH")]
public static GLEnum IsPerPatch;
    [NativeNameAttribute("Name", "GL_SHADER_STORAGE_BUFFER")]
public static GLEnum ShaderStorageBuffer;
    [NativeNameAttribute("Name", "GL_SHADER_STORAGE_BUFFER_BINDING")]
public static GLEnum ShaderStorageBufferBinding;
    [NativeNameAttribute("Name", "GL_SHADER_STORAGE_BUFFER_START")]
public static GLEnum ShaderStorageBufferStart;
    [NativeNameAttribute("Name", "GL_SHADER_STORAGE_BUFFER_SIZE")]
public static GLEnum ShaderStorageBufferSize;
    [NativeNameAttribute("Name", "GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS")]
public static GLEnum MaxVertexShaderStorageBlocks;
    [NativeNameAttribute("Name", "GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS")]
public static GLEnum MaxGeometryShaderStorageBlocks;
    [NativeNameAttribute("Name", "GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS")]
public static GLEnum MaxTessControlShaderStorageBlocks;
    [NativeNameAttribute("Name", "GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS")]
public static GLEnum MaxTessEvaluationShaderStorageBlocks;
    [NativeNameAttribute("Name", "GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS")]
public static GLEnum MaxFragmentShaderStorageBlocks;
    [NativeNameAttribute("Name", "GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS")]
public static GLEnum MaxComputeShaderStorageBlocks;
    [NativeNameAttribute("Name", "GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS")]
public static GLEnum MaxCombinedShaderStorageBlocks;
    [NativeNameAttribute("Name", "GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS")]
public static GLEnum MaxShaderStorageBufferBindings;
    [NativeNameAttribute("Name", "GL_MAX_SHADER_STORAGE_BLOCK_SIZE")]
public static GLEnum MaxShaderStorageBlockSize;
    [NativeNameAttribute("Name", "GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT")]
public static GLEnum ShaderStorageBufferOffsetAlignment;
    [NativeNameAttribute("Name", "GL_SHADER_STORAGE_BARRIER_BIT")]
public static GLEnum ShaderStorageBarrierBit;
    [NativeNameAttribute("Name", "GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES")]
public static GLEnum MaxCombinedShaderOutputResources;
    [NativeNameAttribute("Name", "GL_DEPTH_STENCIL_TEXTURE_MODE")]
public static GLEnum DepthStencilTextureMode;
    [NativeNameAttribute("Name", "GL_TEXTURE_BUFFER_OFFSET")]
public static GLEnum TextureBufferOffset;
    [NativeNameAttribute("Name", "GL_TEXTURE_BUFFER_SIZE")]
public static GLEnum TextureBufferSize;
    [NativeNameAttribute("Name", "GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT")]
public static GLEnum TextureBufferOffsetAlignment;
    [NativeNameAttribute("Name", "GL_TEXTURE_VIEW_MIN_LEVEL")]
public static GLEnum TextureViewMinLevel;
    [NativeNameAttribute("Name", "GL_TEXTURE_VIEW_NUM_LEVELS")]
public static GLEnum TextureViewNumLevels;
    [NativeNameAttribute("Name", "GL_TEXTURE_VIEW_MIN_LAYER")]
public static GLEnum TextureViewMinLayer;
    [NativeNameAttribute("Name", "GL_TEXTURE_VIEW_NUM_LAYERS")]
public static GLEnum TextureViewNumLayers;
    [NativeNameAttribute("Name", "GL_TEXTURE_IMMUTABLE_LEVELS")]
public static GLEnum TextureImmutableLevels;
    [NativeNameAttribute("Name", "GL_VERTEX_ATTRIB_BINDING")]
public static GLEnum VertexAttribBinding;
    [NativeNameAttribute("Name", "GL_VERTEX_ATTRIB_RELATIVE_OFFSET")]
public static GLEnum VertexAttribRelativeOffset;
    [NativeNameAttribute("Name", "GL_VERTEX_BINDING_DIVISOR")]
public static GLEnum VertexBindingDivisor;
    [NativeNameAttribute("Name", "GL_VERTEX_BINDING_OFFSET")]
public static GLEnum VertexBindingOffset;
    [NativeNameAttribute("Name", "GL_VERTEX_BINDING_STRIDE")]
public static GLEnum VertexBindingStride;
    [NativeNameAttribute("Name", "GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET")]
public static GLEnum MaxVertexAttribRelativeOffset;
    [NativeNameAttribute("Name", "GL_MAX_VERTEX_ATTRIB_BINDINGS")]
public static GLEnum MaxVertexAttribBindings;
    [NativeNameAttribute("Name", "GL_VERTEX_BINDING_BUFFER")]
public static GLEnum VertexBindingBuffer;
    [NativeNameAttribute("Name", "GL_DISPLAY_LIST")]
public static GLEnum DisplayList;
    [NativeNameAttribute("Name", "GL_STACK_UNDERFLOW")]
public static GLEnum StackUnderflow;
    [NativeNameAttribute("Name", "GL_STACK_OVERFLOW")]
public static GLEnum StackOverflow;
    [NativeNameAttribute("Name", "GL_MAX_VERTEX_ATTRIB_STRIDE")]
public static GLEnum MaxVertexAttribStride;
    [NativeNameAttribute("Name", "GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED")]
public static GLEnum PrimitiveRestartForPatchesSupported;
    [NativeNameAttribute("Name", "GL_TEXTURE_BUFFER_BINDING")]
public static GLEnum TextureBufferBinding;
    [NativeNameAttribute("Name", "GL_MAP_PERSISTENT_BIT")]
public static GLEnum MapPersistentBit;
    [NativeNameAttribute("Name", "GL_MAP_COHERENT_BIT")]
public static GLEnum MapCoherentBit;
    [NativeNameAttribute("Name", "GL_DYNAMIC_STORAGE_BIT")]
public static GLEnum DynamicStorageBit;
    [NativeNameAttribute("Name", "GL_CLIENT_STORAGE_BIT")]
public static GLEnum ClientStorageBit;
    [NativeNameAttribute("Name", "GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT")]
public static GLEnum ClientMappedBufferBarrierBit;
    [NativeNameAttribute("Name", "GL_BUFFER_IMMUTABLE_STORAGE")]
public static GLEnum BufferImmutableStorage;
    [NativeNameAttribute("Name", "GL_BUFFER_STORAGE_FLAGS")]
public static GLEnum BufferStorageFlags;
    [NativeNameAttribute("Name", "GL_CLEAR_TEXTURE")]
public static GLEnum ClearTexture;
    [NativeNameAttribute("Name", "GL_LOCATION_COMPONENT")]
public static GLEnum LocationComponent;
    [NativeNameAttribute("Name", "GL_TRANSFORM_FEEDBACK_BUFFER_INDEX")]
public static GLEnum TransformFeedbackBufferIndex;
    [NativeNameAttribute("Name", "GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE")]
public static GLEnum TransformFeedbackBufferStride;
    [NativeNameAttribute("Name", "GL_QUERY_BUFFER")]
public static GLEnum QueryBuffer;
    [NativeNameAttribute("Name", "GL_QUERY_BUFFER_BARRIER_BIT")]
public static GLEnum QueryBufferBarrierBit;
    [NativeNameAttribute("Name", "GL_QUERY_BUFFER_BINDING")]
public static GLEnum QueryBufferBinding;
    [NativeNameAttribute("Name", "GL_QUERY_RESULT_NO_WAIT")]
public static GLEnum QueryResultNoWait;
    [NativeNameAttribute("Name", "GL_MIRROR_CLAMP_TO_EDGE")]
public static GLEnum MirrorClampToEdge;
    [NativeNameAttribute("Name", "GL_CONTEXT_LOST")]
public static GLEnum ContextLost;
    [NativeNameAttribute("Name", "GL_NEGATIVE_ONE_TO_ONE")]
public static GLEnum NegativeOneToOne;
    [NativeNameAttribute("Name", "GL_ZERO_TO_ONE")]
public static GLEnum ZeroToOne;
    [NativeNameAttribute("Name", "GL_CLIP_ORIGIN")]
public static GLEnum ClipOrigin;
    [NativeNameAttribute("Name", "GL_CLIP_DEPTH_MODE")]
public static GLEnum ClipDepthMode;
    [NativeNameAttribute("Name", "GL_QUERY_WAIT_INVERTED")]
public static GLEnum QueryWaitInverted;
    [NativeNameAttribute("Name", "GL_QUERY_NO_WAIT_INVERTED")]
public static GLEnum QueryNoWaitInverted;
    [NativeNameAttribute("Name", "GL_QUERY_BY_REGION_WAIT_INVERTED")]
public static GLEnum QueryByRegionWaitInverted;
    [NativeNameAttribute("Name", "GL_QUERY_BY_REGION_NO_WAIT_INVERTED")]
public static GLEnum QueryByRegionNoWaitInverted;
    [NativeNameAttribute("Name", "GL_MAX_CULL_DISTANCES")]
public static GLEnum MaxCullDistances;
    [NativeNameAttribute("Name", "GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES")]
public static GLEnum MaxCombinedClipAndCullDistances;
    [NativeNameAttribute("Name", "GL_TEXTURE_TARGET")]
public static GLEnum TextureTarget;
    [NativeNameAttribute("Name", "GL_QUERY_TARGET")]
public static GLEnum QueryTarget;
    [NativeNameAttribute("Name", "GL_GUILTY_CONTEXT_RESET")]
public static GLEnum GuiltyContextReset;
    [NativeNameAttribute("Name", "GL_INNOCENT_CONTEXT_RESET")]
public static GLEnum InnocentContextReset;
    [NativeNameAttribute("Name", "GL_UNKNOWN_CONTEXT_RESET")]
public static GLEnum UnknownContextReset;
    [NativeNameAttribute("Name", "GL_RESET_NOTIFICATION_STRATEGY")]
public static GLEnum ResetNotificationStrategy;
    [NativeNameAttribute("Name", "GL_LOSE_CONTEXT_ON_RESET")]
public static GLEnum LoseContextOnReset;
    [NativeNameAttribute("Name", "GL_NO_RESET_NOTIFICATION")]
public static GLEnum NoResetNotification;
    [NativeNameAttribute("Name", "GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT")]
public static GLEnum ContextFlagRobustAccessBit;
    [NativeNameAttribute("Name", "GL_COLOR_TABLE")]
public static GLEnum ColorTable;
    [NativeNameAttribute("Name", "GL_POST_CONVOLUTION_COLOR_TABLE")]
public static GLEnum PostConvolutionColorTable;
    [NativeNameAttribute("Name", "GL_POST_COLOR_MATRIX_COLOR_TABLE")]
public static GLEnum PostColorMatrixColorTable;
    [NativeNameAttribute("Name", "GL_PROXY_COLOR_TABLE")]
public static GLEnum ProxyColorTable;
    [NativeNameAttribute("Name", "GL_PROXY_POST_CONVOLUTION_COLOR_TABLE")]
public static GLEnum ProxyPostConvolutionColorTable;
    [NativeNameAttribute("Name", "GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE")]
public static GLEnum ProxyPostColorMatrixColorTable;
    [NativeNameAttribute("Name", "GL_CONVOLUTION_1D")]
public static GLEnum Convolution1D;
    [NativeNameAttribute("Name", "GL_CONVOLUTION_2D")]
public static GLEnum Convolution2D;
    [NativeNameAttribute("Name", "GL_SEPARABLE_2D")]
public static GLEnum Separable2D;
    [NativeNameAttribute("Name", "GL_HISTOGRAM")]
public static GLEnum Histogram;
    [NativeNameAttribute("Name", "GL_PROXY_HISTOGRAM")]
public static GLEnum ProxyHistogram;
    [NativeNameAttribute("Name", "GL_MINMAX")]
public static GLEnum Minmax;
    [NativeNameAttribute("Name", "GL_CONTEXT_RELEASE_BEHAVIOR")]
public static GLEnum ContextReleaseBehavior;
    [NativeNameAttribute("Name", "GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH")]
public static GLEnum ContextReleaseBehaviorFlush;
    [NativeNameAttribute("Name", "GL_SHADER_BINARY_FORMAT_SPIR_V")]
public static GLEnum ShaderBinaryFormatSpirV;
    [NativeNameAttribute("Name", "GL_SPIR_V_BINARY")]
public static GLEnum SpirVBinary;
    [NativeNameAttribute("Name", "GL_PARAMETER_BUFFER")]
public static GLEnum ParameterBuffer;
    [NativeNameAttribute("Name", "GL_PARAMETER_BUFFER_BINDING")]
public static GLEnum ParameterBufferBinding;
    [NativeNameAttribute("Name", "GL_CONTEXT_FLAG_NO_ERROR_BIT")]
public static GLEnum ContextFlagNoErrorBit;
    [NativeNameAttribute("Name", "GL_VERTICES_SUBMITTED")]
public static GLEnum VerticesSubmitted;
    [NativeNameAttribute("Name", "GL_PRIMITIVES_SUBMITTED")]
public static GLEnum PrimitivesSubmitted;
    [NativeNameAttribute("Name", "GL_VERTEX_SHADER_INVOCATIONS")]
public static GLEnum VertexShaderInvocations;
    [NativeNameAttribute("Name", "GL_TESS_CONTROL_SHADER_PATCHES")]
public static GLEnum TessControlShaderPatches;
    [NativeNameAttribute("Name", "GL_TESS_EVALUATION_SHADER_INVOCATIONS")]
public static GLEnum TessEvaluationShaderInvocations;
    [NativeNameAttribute("Name", "GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED")]
public static GLEnum GeometryShaderPrimitivesEmitted;
    [NativeNameAttribute("Name", "GL_FRAGMENT_SHADER_INVOCATIONS")]
public static GLEnum FragmentShaderInvocations;
    [NativeNameAttribute("Name", "GL_COMPUTE_SHADER_INVOCATIONS")]
public static GLEnum ComputeShaderInvocations;
    [NativeNameAttribute("Name", "GL_CLIPPING_INPUT_PRIMITIVES")]
public static GLEnum ClippingInputPrimitives;
    [NativeNameAttribute("Name", "GL_CLIPPING_OUTPUT_PRIMITIVES")]
public static GLEnum ClippingOutputPrimitives;
    [NativeNameAttribute("Name", "GL_POLYGON_OFFSET_CLAMP")]
public static GLEnum PolygonOffsetClamp;
    [NativeNameAttribute("Name", "GL_SPIR_V_EXTENSIONS")]
public static GLEnum SpirVExtensions;
    [NativeNameAttribute("Name", "GL_NUM_SPIR_V_EXTENSIONS")]
public static GLEnum NumSpirVExtensions;
    [NativeNameAttribute("Name", "GL_TEXTURE_MAX_ANISOTROPY")]
public static GLEnum TextureMaxAnisotropy;
    [NativeNameAttribute("Name", "GL_MAX_TEXTURE_MAX_ANISOTROPY")]
public static GLEnum MaxTextureMaxAnisotropy;
    [NativeNameAttribute("Name", "GL_TRANSFORM_FEEDBACK_OVERFLOW")]
public static GLEnum TransformFeedbackOverflow;
    [NativeNameAttribute("Name", "GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW")]
public static GLEnum TransformFeedbackStreamOverflow;
}
[ExtensionAttribute]
public static class Silk.NET.OpenGL.GLOverloads : object {
    [ExtensionAttribute]
public static void MultiDrawArraysIndirectCount(GL thisApi, GLEnum mode, ReadOnlySpan`1<T0> indirect, IntPtr drawcount, UInt32 maxdrawcount, UInt32 stride);
    [ExtensionAttribute]
public static void MultiDrawArraysIndirectCount(GL thisApi, PrimitiveType mode, ReadOnlySpan`1<T0> indirect, IntPtr drawcount, UInt32 maxdrawcount, UInt32 stride);
    [ExtensionAttribute]
public static void MultiDrawElementsIndirectCount(GL thisApi, GLEnum mode, GLEnum type, ReadOnlySpan`1<T0> indirect, IntPtr drawcount, UInt32 maxdrawcount, UInt32 stride);
    [ExtensionAttribute]
public static void MultiDrawElementsIndirectCount(GL thisApi, GLEnum mode, DrawElementsType type, ReadOnlySpan`1<T0> indirect, IntPtr drawcount, UInt32 maxdrawcount, UInt32 stride);
    [ExtensionAttribute]
public static void MultiDrawElementsIndirectCount(GL thisApi, PrimitiveType mode, GLEnum type, ReadOnlySpan`1<T0> indirect, IntPtr drawcount, UInt32 maxdrawcount, UInt32 stride);
    [ExtensionAttribute]
public static void MultiDrawElementsIndirectCount(GL thisApi, PrimitiveType mode, DrawElementsType type, ReadOnlySpan`1<T0> indirect, IntPtr drawcount, UInt32 maxdrawcount, UInt32 stride);
    [ExtensionAttribute]
public static void SpecializeShader(GL thisApi, UInt32 shader, Byte* pEntryPoint, UInt32 numSpecializationConstants, UInt32* pConstantIndex, ReadOnlySpan`1<UInt32> pConstantValue);
    [ExtensionAttribute]
public static void SpecializeShader(GL thisApi, UInt32 shader, Byte* pEntryPoint, UInt32 numSpecializationConstants, ReadOnlySpan`1<UInt32> pConstantIndex, UInt32* pConstantValue);
    [ExtensionAttribute]
public static void SpecializeShader(GL thisApi, UInt32 shader, Byte* pEntryPoint, UInt32 numSpecializationConstants, ReadOnlySpan`1<UInt32> pConstantIndex, ReadOnlySpan`1<UInt32> pConstantValue);
    [ExtensionAttribute]
public static void SpecializeShader(GL thisApi, UInt32 shader, ReadOnlySpan`1<byte> pEntryPoint, UInt32 numSpecializationConstants, UInt32* pConstantIndex, UInt32* pConstantValue);
    [ExtensionAttribute]
public static void SpecializeShader(GL thisApi, UInt32 shader, ReadOnlySpan`1<byte> pEntryPoint, UInt32 numSpecializationConstants, UInt32* pConstantIndex, ReadOnlySpan`1<UInt32> pConstantValue);
    [ExtensionAttribute]
public static void SpecializeShader(GL thisApi, UInt32 shader, ReadOnlySpan`1<byte> pEntryPoint, UInt32 numSpecializationConstants, ReadOnlySpan`1<UInt32> pConstantIndex, UInt32* pConstantValue);
    [ExtensionAttribute]
public static void SpecializeShader(GL thisApi, UInt32 shader, ReadOnlySpan`1<byte> pEntryPoint, UInt32 numSpecializationConstants, ReadOnlySpan`1<UInt32> pConstantIndex, ReadOnlySpan`1<UInt32> pConstantValue);
    [ExtensionAttribute]
public static void SpecializeShader(GL thisApi, UInt32 shader, string pEntryPoint, UInt32 numSpecializationConstants, UInt32* pConstantIndex, ReadOnlySpan`1<UInt32> pConstantValue);
    [ExtensionAttribute]
public static void SpecializeShader(GL thisApi, UInt32 shader, string pEntryPoint, UInt32 numSpecializationConstants, ReadOnlySpan`1<UInt32> pConstantIndex, UInt32* pConstantValue);
    [ExtensionAttribute]
public static void SpecializeShader(GL thisApi, UInt32 shader, string pEntryPoint, UInt32 numSpecializationConstants, ReadOnlySpan`1<UInt32> pConstantIndex, ReadOnlySpan`1<UInt32> pConstantValue);
    [ExtensionAttribute]
public static void ClearNamedBufferData(GL thisApi, UInt32 buffer, GLEnum internalformat, GLEnum format, GLEnum type, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void ClearNamedBufferData(GL thisApi, UInt32 buffer, GLEnum internalformat, GLEnum format, PixelType type, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void ClearNamedBufferData(GL thisApi, UInt32 buffer, GLEnum internalformat, PixelFormat format, GLEnum type, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void ClearNamedBufferData(GL thisApi, UInt32 buffer, GLEnum internalformat, PixelFormat format, PixelType type, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void ClearNamedBufferData(GL thisApi, UInt32 buffer, SizedInternalFormat internalformat, GLEnum format, GLEnum type, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void ClearNamedBufferData(GL thisApi, UInt32 buffer, SizedInternalFormat internalformat, GLEnum format, PixelType type, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void ClearNamedBufferData(GL thisApi, UInt32 buffer, SizedInternalFormat internalformat, PixelFormat format, GLEnum type, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void ClearNamedBufferData(GL thisApi, UInt32 buffer, SizedInternalFormat internalformat, PixelFormat format, PixelType type, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void ClearNamedBufferSubData(GL thisApi, UInt32 buffer, GLEnum internalformat, IntPtr offset, UIntPtr size, GLEnum format, GLEnum type, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void ClearNamedBufferSubData(GL thisApi, UInt32 buffer, GLEnum internalformat, IntPtr offset, UIntPtr size, GLEnum format, PixelType type, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void ClearNamedBufferSubData(GL thisApi, UInt32 buffer, GLEnum internalformat, IntPtr offset, UIntPtr size, PixelFormat format, GLEnum type, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void ClearNamedBufferSubData(GL thisApi, UInt32 buffer, GLEnum internalformat, IntPtr offset, UIntPtr size, PixelFormat format, PixelType type, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void ClearNamedBufferSubData(GL thisApi, UInt32 buffer, SizedInternalFormat internalformat, IntPtr offset, UIntPtr size, GLEnum format, GLEnum type, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void ClearNamedBufferSubData(GL thisApi, UInt32 buffer, SizedInternalFormat internalformat, IntPtr offset, UIntPtr size, GLEnum format, PixelType type, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void ClearNamedBufferSubData(GL thisApi, UInt32 buffer, SizedInternalFormat internalformat, IntPtr offset, UIntPtr size, PixelFormat format, GLEnum type, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void ClearNamedBufferSubData(GL thisApi, UInt32 buffer, SizedInternalFormat internalformat, IntPtr offset, UIntPtr size, PixelFormat format, PixelType type, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void ClearNamedFramebuffer(GL thisApi, UInt32 framebuffer, GLEnum buffer, int drawbuffer, ReadOnlySpan`1<int> value);
    [ExtensionAttribute]
public static void ClearNamedFramebuffer(GL thisApi, UInt32 framebuffer, BufferKind buffer, int drawbuffer, ReadOnlySpan`1<int> value);
    [ExtensionAttribute]
public static void ClearNamedFramebuffer(GL thisApi, UInt32 framebuffer, GLEnum buffer, int drawbuffer, ReadOnlySpan`1<UInt32> value);
    [ExtensionAttribute]
public static void ClearNamedFramebuffer(GL thisApi, UInt32 framebuffer, BufferKind buffer, int drawbuffer, ReadOnlySpan`1<UInt32> value);
    [ExtensionAttribute]
public static void ClearNamedFramebuffer(GL thisApi, UInt32 framebuffer, GLEnum buffer, int drawbuffer, ReadOnlySpan`1<float> value);
    [ExtensionAttribute]
public static void ClearNamedFramebuffer(GL thisApi, UInt32 framebuffer, BufferKind buffer, int drawbuffer, ReadOnlySpan`1<float> value);
    [ExtensionAttribute]
public static void CompressedTextureSubImage1D(GL thisApi, UInt32 texture, int level, int xoffset, UInt32 width, GLEnum format, UInt32 imageSize, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void CompressedTextureSubImage1D(GL thisApi, UInt32 texture, int level, int xoffset, UInt32 width, InternalFormat format, UInt32 imageSize, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void CompressedTextureSubImage2D(GL thisApi, UInt32 texture, int level, int xoffset, int yoffset, UInt32 width, UInt32 height, GLEnum format, UInt32 imageSize, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void CompressedTextureSubImage2D(GL thisApi, UInt32 texture, int level, int xoffset, int yoffset, UInt32 width, UInt32 height, InternalFormat format, UInt32 imageSize, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void CompressedTextureSubImage3D(GL thisApi, UInt32 texture, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, GLEnum format, UInt32 imageSize, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void CompressedTextureSubImage3D(GL thisApi, UInt32 texture, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, InternalFormat format, UInt32 imageSize, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void CreateBuffers(GL thisApi, UInt32 n, Span`1<UInt32> buffers);
    [ExtensionAttribute]
public static void CreateBuffers(GL thisApi, UInt32 n, Span`1<Buffer> buffers);
    [ExtensionAttribute]
public static void CreateFramebuffers(GL thisApi, UInt32 n, Span`1<UInt32> framebuffers);
    [ExtensionAttribute]
public static void CreateFramebuffers(GL thisApi, UInt32 n, Span`1<Framebuffer> framebuffers);
    [ExtensionAttribute]
public static void CreateProgramPipelines(GL thisApi, UInt32 n, Span`1<UInt32> pipelines);
    [ExtensionAttribute]
public static void CreateProgramPipelines(GL thisApi, UInt32 n, Span`1<ProgramPipeline> pipelines);
    [ExtensionAttribute]
public static void CreateQueries(GL thisApi, GLEnum target, UInt32 n, Span`1<UInt32> ids);
    [ExtensionAttribute]
public static void CreateQueries(GL thisApi, GLEnum target, UInt32 n, Span`1<Query> ids);
    [ExtensionAttribute]
public static void CreateQueries(GL thisApi, QueryTarget target, UInt32 n, Span`1<UInt32> ids);
    [ExtensionAttribute]
public static void CreateQueries(GL thisApi, QueryTarget target, UInt32 n, Span`1<Query> ids);
    [ExtensionAttribute]
public static void CreateRenderbuffers(GL thisApi, UInt32 n, Span`1<UInt32> renderbuffers);
    [ExtensionAttribute]
public static void CreateRenderbuffers(GL thisApi, UInt32 n, Span`1<Renderbuffer> renderbuffers);
    [ExtensionAttribute]
public static void CreateSamplers(GL thisApi, UInt32 n, Span`1<UInt32> samplers);
    [ExtensionAttribute]
public static void CreateSamplers(GL thisApi, UInt32 n, Span`1<Sampler> samplers);
    [ExtensionAttribute]
public static void CreateTextures(GL thisApi, GLEnum target, UInt32 n, Span`1<UInt32> textures);
    [ExtensionAttribute]
public static void CreateTextures(GL thisApi, GLEnum target, UInt32 n, Span`1<Texture> textures);
    [ExtensionAttribute]
public static void CreateTextures(GL thisApi, TextureTarget target, UInt32 n, Span`1<UInt32> textures);
    [ExtensionAttribute]
public static void CreateTextures(GL thisApi, TextureTarget target, UInt32 n, Span`1<Texture> textures);
    [ExtensionAttribute]
public static void CreateTransformFeedbacks(GL thisApi, UInt32 n, Span`1<UInt32> ids);
    [ExtensionAttribute]
public static void CreateTransformFeedbacks(GL thisApi, UInt32 n, Span`1<TransformFeedback> ids);
    [ExtensionAttribute]
public static void CreateVertexArrays(GL thisApi, UInt32 n, Span`1<UInt32> arrays);
    [ExtensionAttribute]
public static void CreateVertexArrays(GL thisApi, UInt32 n, Span`1<VertexArray> arrays);
    [ExtensionAttribute]
public static void GetCompressedTextureImage(GL thisApi, UInt32 texture, int level, UInt32 bufSize, Span`1<T0> pixels);
    [ExtensionAttribute]
public static void GetCompressedTextureSubImage(GL thisApi, UInt32 texture, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, UInt32 bufSize, Span`1<T0> pixels);
    [ExtensionAttribute]
public static void GetNamedBufferParameter(GL thisApi, UInt32 buffer, GLEnum pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetNamedBufferParameter(GL thisApi, UInt32 buffer, BufferPNameARB pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetNamedBufferParameter(GL thisApi, UInt32 buffer, GLEnum pname, Span`1<long> params);
    [ExtensionAttribute]
public static void GetNamedBufferParameter(GL thisApi, UInt32 buffer, BufferPNameARB pname, Span`1<long> params);
    [ExtensionAttribute]
public static void GetNamedBufferSubData(GL thisApi, UInt32 buffer, IntPtr offset, UIntPtr size, Span`1<T0> data);
    [ExtensionAttribute]
public static void GetNamedFramebufferAttachmentParameter(GL thisApi, UInt32 framebuffer, GLEnum attachment, GLEnum pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetNamedFramebufferAttachmentParameter(GL thisApi, UInt32 framebuffer, GLEnum attachment, FramebufferAttachmentParameterName pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetNamedFramebufferAttachmentParameter(GL thisApi, UInt32 framebuffer, FramebufferAttachment attachment, GLEnum pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetNamedFramebufferAttachmentParameter(GL thisApi, UInt32 framebuffer, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetNamedFramebufferParameter(GL thisApi, UInt32 framebuffer, GLEnum pname, Span`1<int> param);
    [ExtensionAttribute]
public static void GetNamedFramebufferParameter(GL thisApi, UInt32 framebuffer, GetFramebufferParameter pname, Span`1<int> param);
    [ExtensionAttribute]
public static void GetNamedRenderbufferParameter(GL thisApi, UInt32 renderbuffer, GLEnum pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetNamedRenderbufferParameter(GL thisApi, UInt32 renderbuffer, RenderbufferParameterName pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetnColorTable(GL thisApi, GLEnum target, GLEnum format, GLEnum type, UInt32 bufSize, Span`1<T0> table);
    [ExtensionAttribute]
public static void GetnColorTable(GL thisApi, GLEnum target, GLEnum format, PixelType type, UInt32 bufSize, Span`1<T0> table);
    [ExtensionAttribute]
public static void GetnColorTable(GL thisApi, GLEnum target, PixelFormat format, GLEnum type, UInt32 bufSize, Span`1<T0> table);
    [ExtensionAttribute]
public static void GetnColorTable(GL thisApi, GLEnum target, PixelFormat format, PixelType type, UInt32 bufSize, Span`1<T0> table);
    [ExtensionAttribute]
public static void GetnColorTable(GL thisApi, ColorTableTarget target, GLEnum format, GLEnum type, UInt32 bufSize, Span`1<T0> table);
    [ExtensionAttribute]
public static void GetnColorTable(GL thisApi, ColorTableTarget target, GLEnum format, PixelType type, UInt32 bufSize, Span`1<T0> table);
    [ExtensionAttribute]
public static void GetnColorTable(GL thisApi, ColorTableTarget target, PixelFormat format, GLEnum type, UInt32 bufSize, Span`1<T0> table);
    [ExtensionAttribute]
public static void GetnColorTable(GL thisApi, ColorTableTarget target, PixelFormat format, PixelType type, UInt32 bufSize, Span`1<T0> table);
    [ExtensionAttribute]
public static void GetnCompressedTexImage(GL thisApi, GLEnum target, int lod, UInt32 bufSize, Span`1<T0> pixels);
    [ExtensionAttribute]
public static void GetnCompressedTexImage(GL thisApi, TextureTarget target, int lod, UInt32 bufSize, Span`1<T0> pixels);
    [ExtensionAttribute]
public static void GetnConvolutionFilter(GL thisApi, GLEnum target, GLEnum format, GLEnum type, UInt32 bufSize, Span`1<T0> image);
    [ExtensionAttribute]
public static void GetnConvolutionFilter(GL thisApi, GLEnum target, GLEnum format, PixelType type, UInt32 bufSize, Span`1<T0> image);
    [ExtensionAttribute]
public static void GetnConvolutionFilter(GL thisApi, GLEnum target, PixelFormat format, GLEnum type, UInt32 bufSize, Span`1<T0> image);
    [ExtensionAttribute]
public static void GetnConvolutionFilter(GL thisApi, GLEnum target, PixelFormat format, PixelType type, UInt32 bufSize, Span`1<T0> image);
    [ExtensionAttribute]
public static void GetnConvolutionFilter(GL thisApi, ConvolutionTarget target, GLEnum format, GLEnum type, UInt32 bufSize, Span`1<T0> image);
    [ExtensionAttribute]
public static void GetnConvolutionFilter(GL thisApi, ConvolutionTarget target, GLEnum format, PixelType type, UInt32 bufSize, Span`1<T0> image);
    [ExtensionAttribute]
public static void GetnConvolutionFilter(GL thisApi, ConvolutionTarget target, PixelFormat format, GLEnum type, UInt32 bufSize, Span`1<T0> image);
    [ExtensionAttribute]
public static void GetnConvolutionFilter(GL thisApi, ConvolutionTarget target, PixelFormat format, PixelType type, UInt32 bufSize, Span`1<T0> image);
    [ExtensionAttribute]
public static void GetnHistogram(GL thisApi, GLEnum target, bool reset, GLEnum format, GLEnum type, UInt32 bufSize, Span`1<T0> values);
    [ExtensionAttribute]
public static void GetnHistogram(GL thisApi, GLEnum target, bool reset, GLEnum format, PixelType type, UInt32 bufSize, Span`1<T0> values);
    [ExtensionAttribute]
public static void GetnHistogram(GL thisApi, GLEnum target, bool reset, PixelFormat format, GLEnum type, UInt32 bufSize, Span`1<T0> values);
    [ExtensionAttribute]
public static void GetnHistogram(GL thisApi, GLEnum target, bool reset, PixelFormat format, PixelType type, UInt32 bufSize, Span`1<T0> values);
    [ExtensionAttribute]
public static void GetnHistogram(GL thisApi, GLEnum target, Boolean reset, GLEnum format, GLEnum type, UInt32 bufSize, Span`1<T0> values);
    [ExtensionAttribute]
public static void GetnHistogram(GL thisApi, GLEnum target, Boolean reset, GLEnum format, PixelType type, UInt32 bufSize, Span`1<T0> values);
    [ExtensionAttribute]
public static void GetnHistogram(GL thisApi, GLEnum target, Boolean reset, PixelFormat format, GLEnum type, UInt32 bufSize, Span`1<T0> values);
    [ExtensionAttribute]
public static void GetnHistogram(GL thisApi, GLEnum target, Boolean reset, PixelFormat format, PixelType type, UInt32 bufSize, Span`1<T0> values);
    [ExtensionAttribute]
public static void GetnHistogram(GL thisApi, HistogramTarget target, bool reset, GLEnum format, GLEnum type, UInt32 bufSize, Span`1<T0> values);
    [ExtensionAttribute]
public static void GetnHistogram(GL thisApi, HistogramTarget target, bool reset, GLEnum format, PixelType type, UInt32 bufSize, Span`1<T0> values);
    [ExtensionAttribute]
public static void GetnHistogram(GL thisApi, HistogramTarget target, bool reset, PixelFormat format, GLEnum type, UInt32 bufSize, Span`1<T0> values);
    [ExtensionAttribute]
public static void GetnHistogram(GL thisApi, HistogramTarget target, bool reset, PixelFormat format, PixelType type, UInt32 bufSize, Span`1<T0> values);
    [ExtensionAttribute]
public static void GetnHistogram(GL thisApi, HistogramTarget target, Boolean reset, GLEnum format, GLEnum type, UInt32 bufSize, Span`1<T0> values);
    [ExtensionAttribute]
public static void GetnHistogram(GL thisApi, HistogramTarget target, Boolean reset, GLEnum format, PixelType type, UInt32 bufSize, Span`1<T0> values);
    [ExtensionAttribute]
public static void GetnHistogram(GL thisApi, HistogramTarget target, Boolean reset, PixelFormat format, GLEnum type, UInt32 bufSize, Span`1<T0> values);
    [ExtensionAttribute]
public static void GetnHistogram(GL thisApi, HistogramTarget target, Boolean reset, PixelFormat format, PixelType type, UInt32 bufSize, Span`1<T0> values);
    [ExtensionAttribute]
public static void GetnMap(GL thisApi, GLEnum target, GLEnum query, UInt32 bufSize, Span`1<double> v);
    [ExtensionAttribute]
public static void GetnMap(GL thisApi, GLEnum target, MapQuery query, UInt32 bufSize, Span`1<double> v);
    [ExtensionAttribute]
public static void GetnMap(GL thisApi, MapTarget target, GLEnum query, UInt32 bufSize, Span`1<double> v);
    [ExtensionAttribute]
public static void GetnMap(GL thisApi, MapTarget target, MapQuery query, UInt32 bufSize, Span`1<double> v);
    [ExtensionAttribute]
public static void GetnMap(GL thisApi, GLEnum target, GLEnum query, UInt32 bufSize, Span`1<float> v);
    [ExtensionAttribute]
public static void GetnMap(GL thisApi, GLEnum target, MapQuery query, UInt32 bufSize, Span`1<float> v);
    [ExtensionAttribute]
public static void GetnMap(GL thisApi, MapTarget target, GLEnum query, UInt32 bufSize, Span`1<float> v);
    [ExtensionAttribute]
public static void GetnMap(GL thisApi, MapTarget target, MapQuery query, UInt32 bufSize, Span`1<float> v);
    [ExtensionAttribute]
public static void GetnMap(GL thisApi, GLEnum target, GLEnum query, UInt32 bufSize, Span`1<int> v);
    [ExtensionAttribute]
public static void GetnMap(GL thisApi, GLEnum target, MapQuery query, UInt32 bufSize, Span`1<int> v);
    [ExtensionAttribute]
public static void GetnMap(GL thisApi, MapTarget target, GLEnum query, UInt32 bufSize, Span`1<int> v);
    [ExtensionAttribute]
public static void GetnMap(GL thisApi, MapTarget target, MapQuery query, UInt32 bufSize, Span`1<int> v);
    [ExtensionAttribute]
public static void GetnMinmax(GL thisApi, GLEnum target, bool reset, GLEnum format, GLEnum type, UInt32 bufSize, Span`1<T0> values);
    [ExtensionAttribute]
public static void GetnMinmax(GL thisApi, GLEnum target, bool reset, GLEnum format, PixelType type, UInt32 bufSize, Span`1<T0> values);
    [ExtensionAttribute]
public static void GetnMinmax(GL thisApi, GLEnum target, bool reset, PixelFormat format, GLEnum type, UInt32 bufSize, Span`1<T0> values);
    [ExtensionAttribute]
public static void GetnMinmax(GL thisApi, GLEnum target, bool reset, PixelFormat format, PixelType type, UInt32 bufSize, Span`1<T0> values);
    [ExtensionAttribute]
public static void GetnMinmax(GL thisApi, GLEnum target, Boolean reset, GLEnum format, GLEnum type, UInt32 bufSize, Span`1<T0> values);
    [ExtensionAttribute]
public static void GetnMinmax(GL thisApi, GLEnum target, Boolean reset, GLEnum format, PixelType type, UInt32 bufSize, Span`1<T0> values);
    [ExtensionAttribute]
public static void GetnMinmax(GL thisApi, GLEnum target, Boolean reset, PixelFormat format, GLEnum type, UInt32 bufSize, Span`1<T0> values);
    [ExtensionAttribute]
public static void GetnMinmax(GL thisApi, GLEnum target, Boolean reset, PixelFormat format, PixelType type, UInt32 bufSize, Span`1<T0> values);
    [ExtensionAttribute]
public static void GetnMinmax(GL thisApi, MinmaxTarget target, bool reset, GLEnum format, GLEnum type, UInt32 bufSize, Span`1<T0> values);
    [ExtensionAttribute]
public static void GetnMinmax(GL thisApi, MinmaxTarget target, bool reset, GLEnum format, PixelType type, UInt32 bufSize, Span`1<T0> values);
    [ExtensionAttribute]
public static void GetnMinmax(GL thisApi, MinmaxTarget target, bool reset, PixelFormat format, GLEnum type, UInt32 bufSize, Span`1<T0> values);
    [ExtensionAttribute]
public static void GetnMinmax(GL thisApi, MinmaxTarget target, bool reset, PixelFormat format, PixelType type, UInt32 bufSize, Span`1<T0> values);
    [ExtensionAttribute]
public static void GetnMinmax(GL thisApi, MinmaxTarget target, Boolean reset, GLEnum format, GLEnum type, UInt32 bufSize, Span`1<T0> values);
    [ExtensionAttribute]
public static void GetnMinmax(GL thisApi, MinmaxTarget target, Boolean reset, GLEnum format, PixelType type, UInt32 bufSize, Span`1<T0> values);
    [ExtensionAttribute]
public static void GetnMinmax(GL thisApi, MinmaxTarget target, Boolean reset, PixelFormat format, GLEnum type, UInt32 bufSize, Span`1<T0> values);
    [ExtensionAttribute]
public static void GetnMinmax(GL thisApi, MinmaxTarget target, Boolean reset, PixelFormat format, PixelType type, UInt32 bufSize, Span`1<T0> values);
    [ExtensionAttribute]
public static void GetnPixelMap(GL thisApi, GLEnum map, UInt32 bufSize, Span`1<float> values);
    [ExtensionAttribute]
public static void GetnPixelMap(GL thisApi, PixelMap map, UInt32 bufSize, Span`1<float> values);
    [ExtensionAttribute]
public static void GetnPixelMap(GL thisApi, GLEnum map, UInt32 bufSize, Span`1<UInt32> values);
    [ExtensionAttribute]
public static void GetnPixelMap(GL thisApi, PixelMap map, UInt32 bufSize, Span`1<UInt32> values);
    [ExtensionAttribute]
public static void GetnPixelMap(GL thisApi, GLEnum map, UInt32 bufSize, Span`1<ushort> values);
    [ExtensionAttribute]
public static void GetnPixelMap(GL thisApi, PixelMap map, UInt32 bufSize, Span`1<ushort> values);
    [ExtensionAttribute]
public static void GetnPolygonStipple(GL thisApi, UInt32 bufSize, Span`1<byte> pattern);
    [ExtensionAttribute]
public static void GetnPolygonStipple(GL thisApi, UInt32 bufSize, Span`1<string> pattern);
    [ExtensionAttribute]
public static void GetnSeparableFilter(GL thisApi, GLEnum target, GLEnum format, GLEnum type, UInt32 rowBufSize, Void* row, UInt32 columnBufSize, Void* column, Span`1<T0> span);
    [ExtensionAttribute]
public static void GetnSeparableFilter(GL thisApi, GLEnum target, GLEnum format, GLEnum type, UInt32 rowBufSize, Void* row, UInt32 columnBufSize, Span`1<T0> column, Void* span);
    [ExtensionAttribute]
public static void GetnSeparableFilter(GL thisApi, GLEnum target, GLEnum format, GLEnum type, UInt32 rowBufSize, Void* row, UInt32 columnBufSize, Span`1<T0> column, Span`1<T1> span);
    [ExtensionAttribute]
public static void GetnSeparableFilter(GL thisApi, GLEnum target, GLEnum format, GLEnum type, UInt32 rowBufSize, Span`1<T0> row, UInt32 columnBufSize, Void* column, Void* span);
    [ExtensionAttribute]
public static void GetnSeparableFilter(GL thisApi, GLEnum target, GLEnum format, GLEnum type, UInt32 rowBufSize, Span`1<T0> row, UInt32 columnBufSize, Void* column, Span`1<T1> span);
    [ExtensionAttribute]
public static void GetnSeparableFilter(GL thisApi, GLEnum target, GLEnum format, GLEnum type, UInt32 rowBufSize, Span`1<T0> row, UInt32 columnBufSize, Span`1<T1> column, Void* span);
    [ExtensionAttribute]
public static void GetnSeparableFilter(GL thisApi, GLEnum target, GLEnum format, GLEnum type, UInt32 rowBufSize, Span`1<T0> row, UInt32 columnBufSize, Span`1<T1> column, Span`1<T2> span);
    [ExtensionAttribute]
public static void GetnSeparableFilter(GL thisApi, GLEnum target, GLEnum format, PixelType type, UInt32 rowBufSize, Void* row, UInt32 columnBufSize, Void* column, Span`1<T0> span);
    [ExtensionAttribute]
public static void GetnSeparableFilter(GL thisApi, GLEnum target, GLEnum format, PixelType type, UInt32 rowBufSize, Void* row, UInt32 columnBufSize, Span`1<T0> column, Void* span);
    [ExtensionAttribute]
public static void GetnSeparableFilter(GL thisApi, GLEnum target, GLEnum format, PixelType type, UInt32 rowBufSize, Void* row, UInt32 columnBufSize, Span`1<T0> column, Span`1<T1> span);
    [ExtensionAttribute]
public static void GetnSeparableFilter(GL thisApi, GLEnum target, GLEnum format, PixelType type, UInt32 rowBufSize, Span`1<T0> row, UInt32 columnBufSize, Void* column, Void* span);
    [ExtensionAttribute]
public static void GetnSeparableFilter(GL thisApi, GLEnum target, GLEnum format, PixelType type, UInt32 rowBufSize, Span`1<T0> row, UInt32 columnBufSize, Void* column, Span`1<T1> span);
    [ExtensionAttribute]
public static void GetnSeparableFilter(GL thisApi, GLEnum target, GLEnum format, PixelType type, UInt32 rowBufSize, Span`1<T0> row, UInt32 columnBufSize, Span`1<T1> column, Void* span);
    [ExtensionAttribute]
public static void GetnSeparableFilter(GL thisApi, GLEnum target, GLEnum format, PixelType type, UInt32 rowBufSize, Span`1<T0> row, UInt32 columnBufSize, Span`1<T1> column, Span`1<T2> span);
    [ExtensionAttribute]
public static void GetnSeparableFilter(GL thisApi, GLEnum target, PixelFormat format, GLEnum type, UInt32 rowBufSize, Void* row, UInt32 columnBufSize, Void* column, Span`1<T0> span);
    [ExtensionAttribute]
public static void GetnSeparableFilter(GL thisApi, GLEnum target, PixelFormat format, GLEnum type, UInt32 rowBufSize, Void* row, UInt32 columnBufSize, Span`1<T0> column, Void* span);
    [ExtensionAttribute]
public static void GetnSeparableFilter(GL thisApi, GLEnum target, PixelFormat format, GLEnum type, UInt32 rowBufSize, Void* row, UInt32 columnBufSize, Span`1<T0> column, Span`1<T1> span);
    [ExtensionAttribute]
public static void GetnSeparableFilter(GL thisApi, GLEnum target, PixelFormat format, GLEnum type, UInt32 rowBufSize, Span`1<T0> row, UInt32 columnBufSize, Void* column, Void* span);
    [ExtensionAttribute]
public static void GetnSeparableFilter(GL thisApi, GLEnum target, PixelFormat format, GLEnum type, UInt32 rowBufSize, Span`1<T0> row, UInt32 columnBufSize, Void* column, Span`1<T1> span);
    [ExtensionAttribute]
public static void GetnSeparableFilter(GL thisApi, GLEnum target, PixelFormat format, GLEnum type, UInt32 rowBufSize, Span`1<T0> row, UInt32 columnBufSize, Span`1<T1> column, Void* span);
    [ExtensionAttribute]
public static void GetnSeparableFilter(GL thisApi, GLEnum target, PixelFormat format, GLEnum type, UInt32 rowBufSize, Span`1<T0> row, UInt32 columnBufSize, Span`1<T1> column, Span`1<T2> span);
    [ExtensionAttribute]
public static void GetnSeparableFilter(GL thisApi, GLEnum target, PixelFormat format, PixelType type, UInt32 rowBufSize, Void* row, UInt32 columnBufSize, Void* column, Span`1<T0> span);
    [ExtensionAttribute]
public static void GetnSeparableFilter(GL thisApi, GLEnum target, PixelFormat format, PixelType type, UInt32 rowBufSize, Void* row, UInt32 columnBufSize, Span`1<T0> column, Void* span);
    [ExtensionAttribute]
public static void GetnSeparableFilter(GL thisApi, GLEnum target, PixelFormat format, PixelType type, UInt32 rowBufSize, Void* row, UInt32 columnBufSize, Span`1<T0> column, Span`1<T1> span);
    [ExtensionAttribute]
public static void GetnSeparableFilter(GL thisApi, GLEnum target, PixelFormat format, PixelType type, UInt32 rowBufSize, Span`1<T0> row, UInt32 columnBufSize, Void* column, Void* span);
    [ExtensionAttribute]
public static void GetnSeparableFilter(GL thisApi, GLEnum target, PixelFormat format, PixelType type, UInt32 rowBufSize, Span`1<T0> row, UInt32 columnBufSize, Void* column, Span`1<T1> span);
    [ExtensionAttribute]
public static void GetnSeparableFilter(GL thisApi, GLEnum target, PixelFormat format, PixelType type, UInt32 rowBufSize, Span`1<T0> row, UInt32 columnBufSize, Span`1<T1> column, Void* span);
    [ExtensionAttribute]
public static void GetnSeparableFilter(GL thisApi, GLEnum target, PixelFormat format, PixelType type, UInt32 rowBufSize, Span`1<T0> row, UInt32 columnBufSize, Span`1<T1> column, Span`1<T2> span);
    [ExtensionAttribute]
public static void GetnSeparableFilter(GL thisApi, SeparableTarget target, GLEnum format, GLEnum type, UInt32 rowBufSize, Void* row, UInt32 columnBufSize, Void* column, Span`1<T0> span);
    [ExtensionAttribute]
public static void GetnSeparableFilter(GL thisApi, SeparableTarget target, GLEnum format, GLEnum type, UInt32 rowBufSize, Void* row, UInt32 columnBufSize, Span`1<T0> column, Void* span);
    [ExtensionAttribute]
public static void GetnSeparableFilter(GL thisApi, SeparableTarget target, GLEnum format, GLEnum type, UInt32 rowBufSize, Void* row, UInt32 columnBufSize, Span`1<T0> column, Span`1<T1> span);
    [ExtensionAttribute]
public static void GetnSeparableFilter(GL thisApi, SeparableTarget target, GLEnum format, GLEnum type, UInt32 rowBufSize, Span`1<T0> row, UInt32 columnBufSize, Void* column, Void* span);
    [ExtensionAttribute]
public static void GetnSeparableFilter(GL thisApi, SeparableTarget target, GLEnum format, GLEnum type, UInt32 rowBufSize, Span`1<T0> row, UInt32 columnBufSize, Void* column, Span`1<T1> span);
    [ExtensionAttribute]
public static void GetnSeparableFilter(GL thisApi, SeparableTarget target, GLEnum format, GLEnum type, UInt32 rowBufSize, Span`1<T0> row, UInt32 columnBufSize, Span`1<T1> column, Void* span);
    [ExtensionAttribute]
public static void GetnSeparableFilter(GL thisApi, SeparableTarget target, GLEnum format, GLEnum type, UInt32 rowBufSize, Span`1<T0> row, UInt32 columnBufSize, Span`1<T1> column, Span`1<T2> span);
    [ExtensionAttribute]
public static void GetnSeparableFilter(GL thisApi, SeparableTarget target, GLEnum format, PixelType type, UInt32 rowBufSize, Void* row, UInt32 columnBufSize, Void* column, Span`1<T0> span);
    [ExtensionAttribute]
public static void GetnSeparableFilter(GL thisApi, SeparableTarget target, GLEnum format, PixelType type, UInt32 rowBufSize, Void* row, UInt32 columnBufSize, Span`1<T0> column, Void* span);
    [ExtensionAttribute]
public static void GetnSeparableFilter(GL thisApi, SeparableTarget target, GLEnum format, PixelType type, UInt32 rowBufSize, Void* row, UInt32 columnBufSize, Span`1<T0> column, Span`1<T1> span);
    [ExtensionAttribute]
public static void GetnSeparableFilter(GL thisApi, SeparableTarget target, GLEnum format, PixelType type, UInt32 rowBufSize, Span`1<T0> row, UInt32 columnBufSize, Void* column, Void* span);
    [ExtensionAttribute]
public static void GetnSeparableFilter(GL thisApi, SeparableTarget target, GLEnum format, PixelType type, UInt32 rowBufSize, Span`1<T0> row, UInt32 columnBufSize, Void* column, Span`1<T1> span);
    [ExtensionAttribute]
public static void GetnSeparableFilter(GL thisApi, SeparableTarget target, GLEnum format, PixelType type, UInt32 rowBufSize, Span`1<T0> row, UInt32 columnBufSize, Span`1<T1> column, Void* span);
    [ExtensionAttribute]
public static void GetnSeparableFilter(GL thisApi, SeparableTarget target, GLEnum format, PixelType type, UInt32 rowBufSize, Span`1<T0> row, UInt32 columnBufSize, Span`1<T1> column, Span`1<T2> span);
    [ExtensionAttribute]
public static void GetnSeparableFilter(GL thisApi, SeparableTarget target, PixelFormat format, GLEnum type, UInt32 rowBufSize, Void* row, UInt32 columnBufSize, Void* column, Span`1<T0> span);
    [ExtensionAttribute]
public static void GetnSeparableFilter(GL thisApi, SeparableTarget target, PixelFormat format, GLEnum type, UInt32 rowBufSize, Void* row, UInt32 columnBufSize, Span`1<T0> column, Void* span);
    [ExtensionAttribute]
public static void GetnSeparableFilter(GL thisApi, SeparableTarget target, PixelFormat format, GLEnum type, UInt32 rowBufSize, Void* row, UInt32 columnBufSize, Span`1<T0> column, Span`1<T1> span);
    [ExtensionAttribute]
public static void GetnSeparableFilter(GL thisApi, SeparableTarget target, PixelFormat format, GLEnum type, UInt32 rowBufSize, Span`1<T0> row, UInt32 columnBufSize, Void* column, Void* span);
    [ExtensionAttribute]
public static void GetnSeparableFilter(GL thisApi, SeparableTarget target, PixelFormat format, GLEnum type, UInt32 rowBufSize, Span`1<T0> row, UInt32 columnBufSize, Void* column, Span`1<T1> span);
    [ExtensionAttribute]
public static void GetnSeparableFilter(GL thisApi, SeparableTarget target, PixelFormat format, GLEnum type, UInt32 rowBufSize, Span`1<T0> row, UInt32 columnBufSize, Span`1<T1> column, Void* span);
    [ExtensionAttribute]
public static void GetnSeparableFilter(GL thisApi, SeparableTarget target, PixelFormat format, GLEnum type, UInt32 rowBufSize, Span`1<T0> row, UInt32 columnBufSize, Span`1<T1> column, Span`1<T2> span);
    [ExtensionAttribute]
public static void GetnSeparableFilter(GL thisApi, SeparableTarget target, PixelFormat format, PixelType type, UInt32 rowBufSize, Void* row, UInt32 columnBufSize, Void* column, Span`1<T0> span);
    [ExtensionAttribute]
public static void GetnSeparableFilter(GL thisApi, SeparableTarget target, PixelFormat format, PixelType type, UInt32 rowBufSize, Void* row, UInt32 columnBufSize, Span`1<T0> column, Void* span);
    [ExtensionAttribute]
public static void GetnSeparableFilter(GL thisApi, SeparableTarget target, PixelFormat format, PixelType type, UInt32 rowBufSize, Void* row, UInt32 columnBufSize, Span`1<T0> column, Span`1<T1> span);
    [ExtensionAttribute]
public static void GetnSeparableFilter(GL thisApi, SeparableTarget target, PixelFormat format, PixelType type, UInt32 rowBufSize, Span`1<T0> row, UInt32 columnBufSize, Void* column, Void* span);
    [ExtensionAttribute]
public static void GetnSeparableFilter(GL thisApi, SeparableTarget target, PixelFormat format, PixelType type, UInt32 rowBufSize, Span`1<T0> row, UInt32 columnBufSize, Void* column, Span`1<T1> span);
    [ExtensionAttribute]
public static void GetnSeparableFilter(GL thisApi, SeparableTarget target, PixelFormat format, PixelType type, UInt32 rowBufSize, Span`1<T0> row, UInt32 columnBufSize, Span`1<T1> column, Void* span);
    [ExtensionAttribute]
public static void GetnSeparableFilter(GL thisApi, SeparableTarget target, PixelFormat format, PixelType type, UInt32 rowBufSize, Span`1<T0> row, UInt32 columnBufSize, Span`1<T1> column, Span`1<T2> span);
    [ExtensionAttribute]
public static void GetnTexImage(GL thisApi, GLEnum target, int level, GLEnum format, GLEnum type, UInt32 bufSize, Span`1<T0> pixels);
    [ExtensionAttribute]
public static void GetnTexImage(GL thisApi, GLEnum target, int level, GLEnum format, PixelType type, UInt32 bufSize, Span`1<T0> pixels);
    [ExtensionAttribute]
public static void GetnTexImage(GL thisApi, GLEnum target, int level, PixelFormat format, GLEnum type, UInt32 bufSize, Span`1<T0> pixels);
    [ExtensionAttribute]
public static void GetnTexImage(GL thisApi, GLEnum target, int level, PixelFormat format, PixelType type, UInt32 bufSize, Span`1<T0> pixels);
    [ExtensionAttribute]
public static void GetnTexImage(GL thisApi, TextureTarget target, int level, GLEnum format, GLEnum type, UInt32 bufSize, Span`1<T0> pixels);
    [ExtensionAttribute]
public static void GetnTexImage(GL thisApi, TextureTarget target, int level, GLEnum format, PixelType type, UInt32 bufSize, Span`1<T0> pixels);
    [ExtensionAttribute]
public static void GetnTexImage(GL thisApi, TextureTarget target, int level, PixelFormat format, GLEnum type, UInt32 bufSize, Span`1<T0> pixels);
    [ExtensionAttribute]
public static void GetnTexImage(GL thisApi, TextureTarget target, int level, PixelFormat format, PixelType type, UInt32 bufSize, Span`1<T0> pixels);
    [ExtensionAttribute]
public static void GetnUniform(GL thisApi, UInt32 program, int location, UInt32 bufSize, Span`1<double> params);
    [ExtensionAttribute]
public static void GetnUniform(GL thisApi, UInt32 program, int location, UInt32 bufSize, Span`1<float> params);
    [ExtensionAttribute]
public static void GetnUniform(GL thisApi, UInt32 program, int location, UInt32 bufSize, Span`1<int> params);
    [ExtensionAttribute]
public static void GetnUniform(GL thisApi, UInt32 program, int location, UInt32 bufSize, Span`1<UInt32> params);
    [ExtensionAttribute]
public static void GetTextureImage(GL thisApi, UInt32 texture, int level, GLEnum format, GLEnum type, UInt32 bufSize, Span`1<T0> pixels);
    [ExtensionAttribute]
public static void GetTextureImage(GL thisApi, UInt32 texture, int level, GLEnum format, PixelType type, UInt32 bufSize, Span`1<T0> pixels);
    [ExtensionAttribute]
public static void GetTextureImage(GL thisApi, UInt32 texture, int level, PixelFormat format, GLEnum type, UInt32 bufSize, Span`1<T0> pixels);
    [ExtensionAttribute]
public static void GetTextureImage(GL thisApi, UInt32 texture, int level, PixelFormat format, PixelType type, UInt32 bufSize, Span`1<T0> pixels);
    [ExtensionAttribute]
public static void GetTextureLevelParameter(GL thisApi, UInt32 texture, int level, GLEnum pname, Span`1<float> params);
    [ExtensionAttribute]
public static void GetTextureLevelParameter(GL thisApi, UInt32 texture, int level, GetTextureParameter pname, Span`1<float> params);
    [ExtensionAttribute]
public static void GetTextureLevelParameter(GL thisApi, UInt32 texture, int level, GLEnum pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetTextureLevelParameter(GL thisApi, UInt32 texture, int level, GetTextureParameter pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetTextureParameter(GL thisApi, UInt32 texture, GLEnum pname, Span`1<float> params);
    [ExtensionAttribute]
public static void GetTextureParameter(GL thisApi, UInt32 texture, GetTextureParameter pname, Span`1<float> params);
    [ExtensionAttribute]
public static void GetTextureParameter(GL thisApi, UInt32 texture, GLEnum pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetTextureParameter(GL thisApi, UInt32 texture, GetTextureParameter pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetTextureParameterI(GL thisApi, UInt32 texture, GLEnum pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetTextureParameterI(GL thisApi, UInt32 texture, GetTextureParameter pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetTextureParameterI(GL thisApi, UInt32 texture, GLEnum pname, Span`1<UInt32> params);
    [ExtensionAttribute]
public static void GetTextureParameterI(GL thisApi, UInt32 texture, GetTextureParameter pname, Span`1<UInt32> params);
    [ExtensionAttribute]
public static void GetTextureSubImage(GL thisApi, UInt32 texture, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, GLEnum format, GLEnum type, UInt32 bufSize, Span`1<T0> pixels);
    [ExtensionAttribute]
public static void GetTextureSubImage(GL thisApi, UInt32 texture, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, GLEnum format, PixelType type, UInt32 bufSize, Span`1<T0> pixels);
    [ExtensionAttribute]
public static void GetTextureSubImage(GL thisApi, UInt32 texture, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, PixelFormat format, GLEnum type, UInt32 bufSize, Span`1<T0> pixels);
    [ExtensionAttribute]
public static void GetTextureSubImage(GL thisApi, UInt32 texture, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, PixelFormat format, PixelType type, UInt32 bufSize, Span`1<T0> pixels);
    [ExtensionAttribute]
public static void GetTransformFeedback(GL thisApi, UInt32 xfb, GLEnum pname, Span`1<int> param);
    [ExtensionAttribute]
public static void GetTransformFeedback(GL thisApi, UInt32 xfb, TransformFeedbackPName pname, Span`1<int> param);
    [ExtensionAttribute]
public static void GetTransformFeedback(GL thisApi, UInt32 xfb, GLEnum pname, UInt32 index, Span`1<int> param);
    [ExtensionAttribute]
public static void GetTransformFeedback(GL thisApi, UInt32 xfb, TransformFeedbackPName pname, UInt32 index, Span`1<int> param);
    [ExtensionAttribute]
public static void GetTransformFeedbacki64(GL thisApi, UInt32 xfb, GLEnum pname, UInt32 index, Span`1<long> param);
    [ExtensionAttribute]
public static void GetTransformFeedbacki64(GL thisApi, UInt32 xfb, TransformFeedbackPName pname, UInt32 index, Span`1<long> param);
    [ExtensionAttribute]
public static void GetVertexArray(GL thisApi, UInt32 vaobj, GLEnum pname, Span`1<int> param);
    [ExtensionAttribute]
public static void GetVertexArray(GL thisApi, UInt32 vaobj, VertexArrayPName pname, Span`1<int> param);
    [ExtensionAttribute]
public static void GetVertexArrayIndexed(GL thisApi, UInt32 vaobj, UInt32 index, GLEnum pname, Span`1<int> param);
    [ExtensionAttribute]
public static void GetVertexArrayIndexed(GL thisApi, UInt32 vaobj, UInt32 index, VertexArrayPName pname, Span`1<int> param);
    [ExtensionAttribute]
public static void GetVertexArrayIndexed64(GL thisApi, UInt32 vaobj, UInt32 index, GLEnum pname, Span`1<long> param);
    [ExtensionAttribute]
public static void GetVertexArrayIndexed64(GL thisApi, UInt32 vaobj, UInt32 index, VertexArrayPName pname, Span`1<long> param);
    [ExtensionAttribute]
public static void InvalidateNamedFramebufferData(GL thisApi, UInt32 framebuffer, UInt32 numAttachments, ReadOnlySpan`1<GLEnum> attachments);
    [ExtensionAttribute]
public static void InvalidateNamedFramebufferData(GL thisApi, UInt32 framebuffer, UInt32 numAttachments, ReadOnlySpan`1<FramebufferAttachment> attachments);
    [ExtensionAttribute]
public static void InvalidateNamedFramebufferSubData(GL thisApi, UInt32 framebuffer, UInt32 numAttachments, ReadOnlySpan`1<GLEnum> attachments, int x, int y, UInt32 width, UInt32 height);
    [ExtensionAttribute]
public static void InvalidateNamedFramebufferSubData(GL thisApi, UInt32 framebuffer, UInt32 numAttachments, ReadOnlySpan`1<FramebufferAttachment> attachments, int x, int y, UInt32 width, UInt32 height);
    [ExtensionAttribute]
public static void NamedBufferData(GL thisApi, UInt32 buffer, UIntPtr size, ReadOnlySpan`1<T0> data, GLEnum usage);
    [ExtensionAttribute]
public static void NamedBufferData(GL thisApi, UInt32 buffer, UIntPtr size, ReadOnlySpan`1<T0> data, VertexBufferObjectUsage usage);
    [ExtensionAttribute]
public static void NamedBufferStorage(GL thisApi, UInt32 buffer, UIntPtr size, ReadOnlySpan`1<T0> data, UInt32 flags);
    [ExtensionAttribute]
public static void NamedBufferStorage(GL thisApi, UInt32 buffer, UIntPtr size, ReadOnlySpan`1<T0> data, BufferStorageMask flags);
    [ExtensionAttribute]
public static void NamedBufferSubData(GL thisApi, UInt32 buffer, IntPtr offset, UIntPtr size, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void NamedFramebufferDrawBuffers(GL thisApi, UInt32 framebuffer, UInt32 n, ReadOnlySpan`1<GLEnum> bufs);
    [ExtensionAttribute]
public static void NamedFramebufferDrawBuffers(GL thisApi, UInt32 framebuffer, UInt32 n, ReadOnlySpan`1<ColorBuffer> bufs);
    [ExtensionAttribute]
public static void ReadnPixels(GL thisApi, int x, int y, UInt32 width, UInt32 height, GLEnum format, GLEnum type, UInt32 bufSize, Span`1<T0> data);
    [ExtensionAttribute]
public static void ReadnPixels(GL thisApi, int x, int y, UInt32 width, UInt32 height, GLEnum format, PixelType type, UInt32 bufSize, Span`1<T0> data);
    [ExtensionAttribute]
public static void ReadnPixels(GL thisApi, int x, int y, UInt32 width, UInt32 height, PixelFormat format, GLEnum type, UInt32 bufSize, Span`1<T0> data);
    [ExtensionAttribute]
public static void ReadnPixels(GL thisApi, int x, int y, UInt32 width, UInt32 height, PixelFormat format, PixelType type, UInt32 bufSize, Span`1<T0> data);
    [ExtensionAttribute]
public static void TextureParameter(GL thisApi, UInt32 texture, GLEnum pname, ReadOnlySpan`1<float> param);
    [ExtensionAttribute]
public static void TextureParameter(GL thisApi, UInt32 texture, TextureParameterName pname, ReadOnlySpan`1<float> param);
    [ExtensionAttribute]
public static void TextureParameter(GL thisApi, UInt32 texture, GLEnum pname, ReadOnlySpan`1<int> param);
    [ExtensionAttribute]
public static void TextureParameter(GL thisApi, UInt32 texture, TextureParameterName pname, ReadOnlySpan`1<int> param);
    [ExtensionAttribute]
public static void TextureParameterI(GL thisApi, UInt32 texture, GLEnum pname, ReadOnlySpan`1<int> params);
    [ExtensionAttribute]
public static void TextureParameterI(GL thisApi, UInt32 texture, TextureParameterName pname, ReadOnlySpan`1<int> params);
    [ExtensionAttribute]
public static void TextureParameterI(GL thisApi, UInt32 texture, GLEnum pname, ReadOnlySpan`1<UInt32> params);
    [ExtensionAttribute]
public static void TextureParameterI(GL thisApi, UInt32 texture, TextureParameterName pname, ReadOnlySpan`1<UInt32> params);
    [ExtensionAttribute]
public static void TextureSubImage1D(GL thisApi, UInt32 texture, int level, int xoffset, UInt32 width, GLEnum format, GLEnum type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TextureSubImage1D(GL thisApi, UInt32 texture, int level, int xoffset, UInt32 width, GLEnum format, PixelType type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TextureSubImage1D(GL thisApi, UInt32 texture, int level, int xoffset, UInt32 width, PixelFormat format, GLEnum type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TextureSubImage1D(GL thisApi, UInt32 texture, int level, int xoffset, UInt32 width, PixelFormat format, PixelType type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TextureSubImage2D(GL thisApi, UInt32 texture, int level, int xoffset, int yoffset, UInt32 width, UInt32 height, GLEnum format, GLEnum type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TextureSubImage2D(GL thisApi, UInt32 texture, int level, int xoffset, int yoffset, UInt32 width, UInt32 height, GLEnum format, PixelType type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TextureSubImage2D(GL thisApi, UInt32 texture, int level, int xoffset, int yoffset, UInt32 width, UInt32 height, PixelFormat format, GLEnum type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TextureSubImage2D(GL thisApi, UInt32 texture, int level, int xoffset, int yoffset, UInt32 width, UInt32 height, PixelFormat format, PixelType type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TextureSubImage3D(GL thisApi, UInt32 texture, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, GLEnum format, GLEnum type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TextureSubImage3D(GL thisApi, UInt32 texture, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, GLEnum format, PixelType type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TextureSubImage3D(GL thisApi, UInt32 texture, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, PixelFormat format, GLEnum type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TextureSubImage3D(GL thisApi, UInt32 texture, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, PixelFormat format, PixelType type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void VertexArrayVertexBuffers(GL thisApi, UInt32 vaobj, UInt32 first, UInt32 count, UInt32* buffers, IntPtr* offsets, ReadOnlySpan`1<UInt32> strides);
    [ExtensionAttribute]
public static void VertexArrayVertexBuffers(GL thisApi, UInt32 vaobj, UInt32 first, UInt32 count, UInt32* buffers, ReadOnlySpan`1<IntPtr> offsets, UInt32* strides);
    [ExtensionAttribute]
public static void VertexArrayVertexBuffers(GL thisApi, UInt32 vaobj, UInt32 first, UInt32 count, UInt32* buffers, ReadOnlySpan`1<IntPtr> offsets, ReadOnlySpan`1<UInt32> strides);
    [ExtensionAttribute]
public static void VertexArrayVertexBuffers(GL thisApi, UInt32 vaobj, UInt32 first, UInt32 count, ReadOnlySpan`1<UInt32> buffers, IntPtr* offsets, UInt32* strides);
    [ExtensionAttribute]
public static void VertexArrayVertexBuffers(GL thisApi, UInt32 vaobj, UInt32 first, UInt32 count, ReadOnlySpan`1<UInt32> buffers, IntPtr* offsets, ReadOnlySpan`1<UInt32> strides);
    [ExtensionAttribute]
public static void VertexArrayVertexBuffers(GL thisApi, UInt32 vaobj, UInt32 first, UInt32 count, ReadOnlySpan`1<UInt32> buffers, ReadOnlySpan`1<IntPtr> offsets, UInt32* strides);
    [ExtensionAttribute]
public static void VertexArrayVertexBuffers(GL thisApi, UInt32 vaobj, UInt32 first, UInt32 count, ReadOnlySpan`1<UInt32> buffers, ReadOnlySpan`1<IntPtr> offsets, ReadOnlySpan`1<UInt32> strides);
    [ExtensionAttribute]
public static void VertexArrayVertexBuffers(GL thisApi, UInt32 vaobj, UInt32 first, UInt32 count, Buffer* buffers, IntPtr* offsets, ReadOnlySpan`1<UInt32> strides);
    [ExtensionAttribute]
public static void VertexArrayVertexBuffers(GL thisApi, UInt32 vaobj, UInt32 first, UInt32 count, Buffer* buffers, ReadOnlySpan`1<IntPtr> offsets, UInt32* strides);
    [ExtensionAttribute]
public static void VertexArrayVertexBuffers(GL thisApi, UInt32 vaobj, UInt32 first, UInt32 count, Buffer* buffers, ReadOnlySpan`1<IntPtr> offsets, ReadOnlySpan`1<UInt32> strides);
    [ExtensionAttribute]
public static void VertexArrayVertexBuffers(GL thisApi, UInt32 vaobj, UInt32 first, UInt32 count, ReadOnlySpan`1<Buffer> buffers, IntPtr* offsets, UInt32* strides);
    [ExtensionAttribute]
public static void VertexArrayVertexBuffers(GL thisApi, UInt32 vaobj, UInt32 first, UInt32 count, ReadOnlySpan`1<Buffer> buffers, IntPtr* offsets, ReadOnlySpan`1<UInt32> strides);
    [ExtensionAttribute]
public static void VertexArrayVertexBuffers(GL thisApi, UInt32 vaobj, UInt32 first, UInt32 count, ReadOnlySpan`1<Buffer> buffers, ReadOnlySpan`1<IntPtr> offsets, UInt32* strides);
    [ExtensionAttribute]
public static void VertexArrayVertexBuffers(GL thisApi, UInt32 vaobj, UInt32 first, UInt32 count, ReadOnlySpan`1<Buffer> buffers, ReadOnlySpan`1<IntPtr> offsets, ReadOnlySpan`1<UInt32> strides);
    [ExtensionAttribute]
public static void BindBuffersBase(GL thisApi, GLEnum target, UInt32 first, UInt32 count, ReadOnlySpan`1<UInt32> buffers);
    [ExtensionAttribute]
public static void BindBuffersBase(GL thisApi, GLEnum target, UInt32 first, UInt32 count, ReadOnlySpan`1<Buffer> buffers);
    [ExtensionAttribute]
public static void BindBuffersBase(GL thisApi, BufferTargetARB target, UInt32 first, UInt32 count, ReadOnlySpan`1<UInt32> buffers);
    [ExtensionAttribute]
public static void BindBuffersBase(GL thisApi, BufferTargetARB target, UInt32 first, UInt32 count, ReadOnlySpan`1<Buffer> buffers);
    [ExtensionAttribute]
public static void BindBuffersRange(GL thisApi, GLEnum target, UInt32 first, UInt32 count, UInt32* buffers, IntPtr* offsets, ReadOnlySpan`1<UIntPtr> sizes);
    [ExtensionAttribute]
public static void BindBuffersRange(GL thisApi, GLEnum target, UInt32 first, UInt32 count, UInt32* buffers, ReadOnlySpan`1<IntPtr> offsets, UIntPtr* sizes);
    [ExtensionAttribute]
public static void BindBuffersRange(GL thisApi, GLEnum target, UInt32 first, UInt32 count, UInt32* buffers, ReadOnlySpan`1<IntPtr> offsets, ReadOnlySpan`1<UIntPtr> sizes);
    [ExtensionAttribute]
public static void BindBuffersRange(GL thisApi, GLEnum target, UInt32 first, UInt32 count, ReadOnlySpan`1<UInt32> buffers, IntPtr* offsets, UIntPtr* sizes);
    [ExtensionAttribute]
public static void BindBuffersRange(GL thisApi, GLEnum target, UInt32 first, UInt32 count, ReadOnlySpan`1<UInt32> buffers, IntPtr* offsets, ReadOnlySpan`1<UIntPtr> sizes);
    [ExtensionAttribute]
public static void BindBuffersRange(GL thisApi, GLEnum target, UInt32 first, UInt32 count, ReadOnlySpan`1<UInt32> buffers, ReadOnlySpan`1<IntPtr> offsets, UIntPtr* sizes);
    [ExtensionAttribute]
public static void BindBuffersRange(GL thisApi, GLEnum target, UInt32 first, UInt32 count, ReadOnlySpan`1<UInt32> buffers, ReadOnlySpan`1<IntPtr> offsets, ReadOnlySpan`1<UIntPtr> sizes);
    [ExtensionAttribute]
public static void BindBuffersRange(GL thisApi, GLEnum target, UInt32 first, UInt32 count, Buffer* buffers, IntPtr* offsets, ReadOnlySpan`1<UIntPtr> sizes);
    [ExtensionAttribute]
public static void BindBuffersRange(GL thisApi, GLEnum target, UInt32 first, UInt32 count, Buffer* buffers, ReadOnlySpan`1<IntPtr> offsets, UIntPtr* sizes);
    [ExtensionAttribute]
public static void BindBuffersRange(GL thisApi, GLEnum target, UInt32 first, UInt32 count, Buffer* buffers, ReadOnlySpan`1<IntPtr> offsets, ReadOnlySpan`1<UIntPtr> sizes);
    [ExtensionAttribute]
public static void BindBuffersRange(GL thisApi, GLEnum target, UInt32 first, UInt32 count, ReadOnlySpan`1<Buffer> buffers, IntPtr* offsets, UIntPtr* sizes);
    [ExtensionAttribute]
public static void BindBuffersRange(GL thisApi, GLEnum target, UInt32 first, UInt32 count, ReadOnlySpan`1<Buffer> buffers, IntPtr* offsets, ReadOnlySpan`1<UIntPtr> sizes);
    [ExtensionAttribute]
public static void BindBuffersRange(GL thisApi, GLEnum target, UInt32 first, UInt32 count, ReadOnlySpan`1<Buffer> buffers, ReadOnlySpan`1<IntPtr> offsets, UIntPtr* sizes);
    [ExtensionAttribute]
public static void BindBuffersRange(GL thisApi, GLEnum target, UInt32 first, UInt32 count, ReadOnlySpan`1<Buffer> buffers, ReadOnlySpan`1<IntPtr> offsets, ReadOnlySpan`1<UIntPtr> sizes);
    [ExtensionAttribute]
public static void BindBuffersRange(GL thisApi, BufferTargetARB target, UInt32 first, UInt32 count, UInt32* buffers, IntPtr* offsets, ReadOnlySpan`1<UIntPtr> sizes);
    [ExtensionAttribute]
public static void BindBuffersRange(GL thisApi, BufferTargetARB target, UInt32 first, UInt32 count, UInt32* buffers, ReadOnlySpan`1<IntPtr> offsets, UIntPtr* sizes);
    [ExtensionAttribute]
public static void BindBuffersRange(GL thisApi, BufferTargetARB target, UInt32 first, UInt32 count, UInt32* buffers, ReadOnlySpan`1<IntPtr> offsets, ReadOnlySpan`1<UIntPtr> sizes);
    [ExtensionAttribute]
public static void BindBuffersRange(GL thisApi, BufferTargetARB target, UInt32 first, UInt32 count, ReadOnlySpan`1<UInt32> buffers, IntPtr* offsets, UIntPtr* sizes);
    [ExtensionAttribute]
public static void BindBuffersRange(GL thisApi, BufferTargetARB target, UInt32 first, UInt32 count, ReadOnlySpan`1<UInt32> buffers, IntPtr* offsets, ReadOnlySpan`1<UIntPtr> sizes);
    [ExtensionAttribute]
public static void BindBuffersRange(GL thisApi, BufferTargetARB target, UInt32 first, UInt32 count, ReadOnlySpan`1<UInt32> buffers, ReadOnlySpan`1<IntPtr> offsets, UIntPtr* sizes);
    [ExtensionAttribute]
public static void BindBuffersRange(GL thisApi, BufferTargetARB target, UInt32 first, UInt32 count, ReadOnlySpan`1<UInt32> buffers, ReadOnlySpan`1<IntPtr> offsets, ReadOnlySpan`1<UIntPtr> sizes);
    [ExtensionAttribute]
public static void BindBuffersRange(GL thisApi, BufferTargetARB target, UInt32 first, UInt32 count, Buffer* buffers, IntPtr* offsets, ReadOnlySpan`1<UIntPtr> sizes);
    [ExtensionAttribute]
public static void BindBuffersRange(GL thisApi, BufferTargetARB target, UInt32 first, UInt32 count, Buffer* buffers, ReadOnlySpan`1<IntPtr> offsets, UIntPtr* sizes);
    [ExtensionAttribute]
public static void BindBuffersRange(GL thisApi, BufferTargetARB target, UInt32 first, UInt32 count, Buffer* buffers, ReadOnlySpan`1<IntPtr> offsets, ReadOnlySpan`1<UIntPtr> sizes);
    [ExtensionAttribute]
public static void BindBuffersRange(GL thisApi, BufferTargetARB target, UInt32 first, UInt32 count, ReadOnlySpan`1<Buffer> buffers, IntPtr* offsets, UIntPtr* sizes);
    [ExtensionAttribute]
public static void BindBuffersRange(GL thisApi, BufferTargetARB target, UInt32 first, UInt32 count, ReadOnlySpan`1<Buffer> buffers, IntPtr* offsets, ReadOnlySpan`1<UIntPtr> sizes);
    [ExtensionAttribute]
public static void BindBuffersRange(GL thisApi, BufferTargetARB target, UInt32 first, UInt32 count, ReadOnlySpan`1<Buffer> buffers, ReadOnlySpan`1<IntPtr> offsets, UIntPtr* sizes);
    [ExtensionAttribute]
public static void BindBuffersRange(GL thisApi, BufferTargetARB target, UInt32 first, UInt32 count, ReadOnlySpan`1<Buffer> buffers, ReadOnlySpan`1<IntPtr> offsets, ReadOnlySpan`1<UIntPtr> sizes);
    [ExtensionAttribute]
public static void BindImageTextures(GL thisApi, UInt32 first, UInt32 count, ReadOnlySpan`1<UInt32> textures);
    [ExtensionAttribute]
public static void BindImageTextures(GL thisApi, UInt32 first, UInt32 count, ReadOnlySpan`1<Texture> textures);
    [ExtensionAttribute]
public static void BindSamplers(GL thisApi, UInt32 first, UInt32 count, ReadOnlySpan`1<UInt32> samplers);
    [ExtensionAttribute]
public static void BindSamplers(GL thisApi, UInt32 first, UInt32 count, ReadOnlySpan`1<Sampler> samplers);
    [ExtensionAttribute]
public static void BindTextures(GL thisApi, UInt32 first, UInt32 count, ReadOnlySpan`1<UInt32> textures);
    [ExtensionAttribute]
public static void BindTextures(GL thisApi, UInt32 first, UInt32 count, ReadOnlySpan`1<Texture> textures);
    [ExtensionAttribute]
public static void BindVertexBuffers(GL thisApi, UInt32 first, UInt32 count, UInt32* buffers, IntPtr* offsets, ReadOnlySpan`1<UInt32> strides);
    [ExtensionAttribute]
public static void BindVertexBuffers(GL thisApi, UInt32 first, UInt32 count, UInt32* buffers, ReadOnlySpan`1<IntPtr> offsets, UInt32* strides);
    [ExtensionAttribute]
public static void BindVertexBuffers(GL thisApi, UInt32 first, UInt32 count, UInt32* buffers, ReadOnlySpan`1<IntPtr> offsets, ReadOnlySpan`1<UInt32> strides);
    [ExtensionAttribute]
public static void BindVertexBuffers(GL thisApi, UInt32 first, UInt32 count, ReadOnlySpan`1<UInt32> buffers, IntPtr* offsets, UInt32* strides);
    [ExtensionAttribute]
public static void BindVertexBuffers(GL thisApi, UInt32 first, UInt32 count, ReadOnlySpan`1<UInt32> buffers, IntPtr* offsets, ReadOnlySpan`1<UInt32> strides);
    [ExtensionAttribute]
public static void BindVertexBuffers(GL thisApi, UInt32 first, UInt32 count, ReadOnlySpan`1<UInt32> buffers, ReadOnlySpan`1<IntPtr> offsets, UInt32* strides);
    [ExtensionAttribute]
public static void BindVertexBuffers(GL thisApi, UInt32 first, UInt32 count, ReadOnlySpan`1<UInt32> buffers, ReadOnlySpan`1<IntPtr> offsets, ReadOnlySpan`1<UInt32> strides);
    [ExtensionAttribute]
public static void BindVertexBuffers(GL thisApi, UInt32 first, UInt32 count, Buffer* buffers, IntPtr* offsets, ReadOnlySpan`1<UInt32> strides);
    [ExtensionAttribute]
public static void BindVertexBuffers(GL thisApi, UInt32 first, UInt32 count, Buffer* buffers, ReadOnlySpan`1<IntPtr> offsets, UInt32* strides);
    [ExtensionAttribute]
public static void BindVertexBuffers(GL thisApi, UInt32 first, UInt32 count, Buffer* buffers, ReadOnlySpan`1<IntPtr> offsets, ReadOnlySpan`1<UInt32> strides);
    [ExtensionAttribute]
public static void BindVertexBuffers(GL thisApi, UInt32 first, UInt32 count, ReadOnlySpan`1<Buffer> buffers, IntPtr* offsets, UInt32* strides);
    [ExtensionAttribute]
public static void BindVertexBuffers(GL thisApi, UInt32 first, UInt32 count, ReadOnlySpan`1<Buffer> buffers, IntPtr* offsets, ReadOnlySpan`1<UInt32> strides);
    [ExtensionAttribute]
public static void BindVertexBuffers(GL thisApi, UInt32 first, UInt32 count, ReadOnlySpan`1<Buffer> buffers, ReadOnlySpan`1<IntPtr> offsets, UInt32* strides);
    [ExtensionAttribute]
public static void BindVertexBuffers(GL thisApi, UInt32 first, UInt32 count, ReadOnlySpan`1<Buffer> buffers, ReadOnlySpan`1<IntPtr> offsets, ReadOnlySpan`1<UInt32> strides);
    [ExtensionAttribute]
public static void BufferStorage(GL thisApi, GLEnum target, UIntPtr size, ReadOnlySpan`1<T0> data, UInt32 flags);
    [ExtensionAttribute]
public static void BufferStorage(GL thisApi, GLEnum target, UIntPtr size, ReadOnlySpan`1<T0> data, BufferStorageMask flags);
    [ExtensionAttribute]
public static void BufferStorage(GL thisApi, BufferStorageTarget target, UIntPtr size, ReadOnlySpan`1<T0> data, UInt32 flags);
    [ExtensionAttribute]
public static void BufferStorage(GL thisApi, BufferStorageTarget target, UIntPtr size, ReadOnlySpan`1<T0> data, BufferStorageMask flags);
    [ExtensionAttribute]
public static void ClearTexImage(GL thisApi, UInt32 texture, int level, GLEnum format, GLEnum type, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void ClearTexImage(GL thisApi, UInt32 texture, int level, GLEnum format, PixelType type, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void ClearTexImage(GL thisApi, UInt32 texture, int level, PixelFormat format, GLEnum type, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void ClearTexImage(GL thisApi, UInt32 texture, int level, PixelFormat format, PixelType type, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void ClearTexSubImage(GL thisApi, UInt32 texture, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, GLEnum format, GLEnum type, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void ClearTexSubImage(GL thisApi, UInt32 texture, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, GLEnum format, PixelType type, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void ClearTexSubImage(GL thisApi, UInt32 texture, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, PixelFormat format, GLEnum type, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void ClearTexSubImage(GL thisApi, UInt32 texture, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, PixelFormat format, PixelType type, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void ClearBufferData(GL thisApi, GLEnum target, GLEnum internalformat, GLEnum format, GLEnum type, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void ClearBufferData(GL thisApi, GLEnum target, GLEnum internalformat, GLEnum format, PixelType type, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void ClearBufferData(GL thisApi, GLEnum target, GLEnum internalformat, PixelFormat format, GLEnum type, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void ClearBufferData(GL thisApi, GLEnum target, GLEnum internalformat, PixelFormat format, PixelType type, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void ClearBufferData(GL thisApi, GLEnum target, SizedInternalFormat internalformat, GLEnum format, GLEnum type, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void ClearBufferData(GL thisApi, GLEnum target, SizedInternalFormat internalformat, GLEnum format, PixelType type, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void ClearBufferData(GL thisApi, GLEnum target, SizedInternalFormat internalformat, PixelFormat format, GLEnum type, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void ClearBufferData(GL thisApi, GLEnum target, SizedInternalFormat internalformat, PixelFormat format, PixelType type, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void ClearBufferData(GL thisApi, BufferStorageTarget target, GLEnum internalformat, GLEnum format, GLEnum type, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void ClearBufferData(GL thisApi, BufferStorageTarget target, GLEnum internalformat, GLEnum format, PixelType type, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void ClearBufferData(GL thisApi, BufferStorageTarget target, GLEnum internalformat, PixelFormat format, GLEnum type, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void ClearBufferData(GL thisApi, BufferStorageTarget target, GLEnum internalformat, PixelFormat format, PixelType type, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void ClearBufferData(GL thisApi, BufferStorageTarget target, SizedInternalFormat internalformat, GLEnum format, GLEnum type, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void ClearBufferData(GL thisApi, BufferStorageTarget target, SizedInternalFormat internalformat, GLEnum format, PixelType type, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void ClearBufferData(GL thisApi, BufferStorageTarget target, SizedInternalFormat internalformat, PixelFormat format, GLEnum type, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void ClearBufferData(GL thisApi, BufferStorageTarget target, SizedInternalFormat internalformat, PixelFormat format, PixelType type, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void ClearBufferSubData(GL thisApi, GLEnum target, GLEnum internalformat, IntPtr offset, UIntPtr size, GLEnum format, GLEnum type, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void ClearBufferSubData(GL thisApi, GLEnum target, GLEnum internalformat, IntPtr offset, UIntPtr size, GLEnum format, PixelType type, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void ClearBufferSubData(GL thisApi, GLEnum target, GLEnum internalformat, IntPtr offset, UIntPtr size, PixelFormat format, GLEnum type, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void ClearBufferSubData(GL thisApi, GLEnum target, GLEnum internalformat, IntPtr offset, UIntPtr size, PixelFormat format, PixelType type, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void ClearBufferSubData(GL thisApi, GLEnum target, SizedInternalFormat internalformat, IntPtr offset, UIntPtr size, GLEnum format, GLEnum type, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void ClearBufferSubData(GL thisApi, GLEnum target, SizedInternalFormat internalformat, IntPtr offset, UIntPtr size, GLEnum format, PixelType type, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void ClearBufferSubData(GL thisApi, GLEnum target, SizedInternalFormat internalformat, IntPtr offset, UIntPtr size, PixelFormat format, GLEnum type, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void ClearBufferSubData(GL thisApi, GLEnum target, SizedInternalFormat internalformat, IntPtr offset, UIntPtr size, PixelFormat format, PixelType type, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void ClearBufferSubData(GL thisApi, BufferTargetARB target, GLEnum internalformat, IntPtr offset, UIntPtr size, GLEnum format, GLEnum type, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void ClearBufferSubData(GL thisApi, BufferTargetARB target, GLEnum internalformat, IntPtr offset, UIntPtr size, GLEnum format, PixelType type, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void ClearBufferSubData(GL thisApi, BufferTargetARB target, GLEnum internalformat, IntPtr offset, UIntPtr size, PixelFormat format, GLEnum type, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void ClearBufferSubData(GL thisApi, BufferTargetARB target, GLEnum internalformat, IntPtr offset, UIntPtr size, PixelFormat format, PixelType type, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void ClearBufferSubData(GL thisApi, BufferTargetARB target, SizedInternalFormat internalformat, IntPtr offset, UIntPtr size, GLEnum format, GLEnum type, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void ClearBufferSubData(GL thisApi, BufferTargetARB target, SizedInternalFormat internalformat, IntPtr offset, UIntPtr size, GLEnum format, PixelType type, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void ClearBufferSubData(GL thisApi, BufferTargetARB target, SizedInternalFormat internalformat, IntPtr offset, UIntPtr size, PixelFormat format, GLEnum type, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void ClearBufferSubData(GL thisApi, BufferTargetARB target, SizedInternalFormat internalformat, IntPtr offset, UIntPtr size, PixelFormat format, PixelType type, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void DebugMessageCallback(GL thisApi, DebugProc callback, ReadOnlySpan`1<T0> userParam);
    [ExtensionAttribute]
public static void DebugMessageControl(GL thisApi, GLEnum source, GLEnum type, GLEnum severity, UInt32 count, ReadOnlySpan`1<UInt32> ids, bool enabled);
    [ExtensionAttribute]
public static void DebugMessageControl(GL thisApi, GLEnum source, GLEnum type, GLEnum severity, UInt32 count, ReadOnlySpan`1<UInt32> ids, Boolean enabled);
    [ExtensionAttribute]
public static void DebugMessageControl(GL thisApi, GLEnum source, GLEnum type, DebugSeverity severity, UInt32 count, ReadOnlySpan`1<UInt32> ids, bool enabled);
    [ExtensionAttribute]
public static void DebugMessageControl(GL thisApi, GLEnum source, GLEnum type, DebugSeverity severity, UInt32 count, ReadOnlySpan`1<UInt32> ids, Boolean enabled);
    [ExtensionAttribute]
public static void DebugMessageControl(GL thisApi, GLEnum source, DebugType type, GLEnum severity, UInt32 count, ReadOnlySpan`1<UInt32> ids, bool enabled);
    [ExtensionAttribute]
public static void DebugMessageControl(GL thisApi, GLEnum source, DebugType type, GLEnum severity, UInt32 count, ReadOnlySpan`1<UInt32> ids, Boolean enabled);
    [ExtensionAttribute]
public static void DebugMessageControl(GL thisApi, GLEnum source, DebugType type, DebugSeverity severity, UInt32 count, ReadOnlySpan`1<UInt32> ids, bool enabled);
    [ExtensionAttribute]
public static void DebugMessageControl(GL thisApi, GLEnum source, DebugType type, DebugSeverity severity, UInt32 count, ReadOnlySpan`1<UInt32> ids, Boolean enabled);
    [ExtensionAttribute]
public static void DebugMessageControl(GL thisApi, DebugSource source, GLEnum type, GLEnum severity, UInt32 count, ReadOnlySpan`1<UInt32> ids, bool enabled);
    [ExtensionAttribute]
public static void DebugMessageControl(GL thisApi, DebugSource source, GLEnum type, GLEnum severity, UInt32 count, ReadOnlySpan`1<UInt32> ids, Boolean enabled);
    [ExtensionAttribute]
public static void DebugMessageControl(GL thisApi, DebugSource source, GLEnum type, DebugSeverity severity, UInt32 count, ReadOnlySpan`1<UInt32> ids, bool enabled);
    [ExtensionAttribute]
public static void DebugMessageControl(GL thisApi, DebugSource source, GLEnum type, DebugSeverity severity, UInt32 count, ReadOnlySpan`1<UInt32> ids, Boolean enabled);
    [ExtensionAttribute]
public static void DebugMessageControl(GL thisApi, DebugSource source, DebugType type, GLEnum severity, UInt32 count, ReadOnlySpan`1<UInt32> ids, bool enabled);
    [ExtensionAttribute]
public static void DebugMessageControl(GL thisApi, DebugSource source, DebugType type, GLEnum severity, UInt32 count, ReadOnlySpan`1<UInt32> ids, Boolean enabled);
    [ExtensionAttribute]
public static void DebugMessageControl(GL thisApi, DebugSource source, DebugType type, DebugSeverity severity, UInt32 count, ReadOnlySpan`1<UInt32> ids, bool enabled);
    [ExtensionAttribute]
public static void DebugMessageControl(GL thisApi, DebugSource source, DebugType type, DebugSeverity severity, UInt32 count, ReadOnlySpan`1<UInt32> ids, Boolean enabled);
    [ExtensionAttribute]
public static void DebugMessageInsert(GL thisApi, GLEnum source, GLEnum type, UInt32 id, GLEnum severity, UInt32 length, ReadOnlySpan`1<byte> buf);
    [ExtensionAttribute]
public static void DebugMessageInsert(GL thisApi, GLEnum source, GLEnum type, UInt32 id, DebugSeverity severity, UInt32 length, ReadOnlySpan`1<byte> buf);
    [ExtensionAttribute]
public static void DebugMessageInsert(GL thisApi, GLEnum source, DebugType type, UInt32 id, GLEnum severity, UInt32 length, ReadOnlySpan`1<byte> buf);
    [ExtensionAttribute]
public static void DebugMessageInsert(GL thisApi, GLEnum source, DebugType type, UInt32 id, DebugSeverity severity, UInt32 length, ReadOnlySpan`1<byte> buf);
    [ExtensionAttribute]
public static void DebugMessageInsert(GL thisApi, DebugSource source, GLEnum type, UInt32 id, GLEnum severity, UInt32 length, ReadOnlySpan`1<byte> buf);
    [ExtensionAttribute]
public static void DebugMessageInsert(GL thisApi, DebugSource source, GLEnum type, UInt32 id, DebugSeverity severity, UInt32 length, ReadOnlySpan`1<byte> buf);
    [ExtensionAttribute]
public static void DebugMessageInsert(GL thisApi, DebugSource source, DebugType type, UInt32 id, GLEnum severity, UInt32 length, ReadOnlySpan`1<byte> buf);
    [ExtensionAttribute]
public static void DebugMessageInsert(GL thisApi, DebugSource source, DebugType type, UInt32 id, DebugSeverity severity, UInt32 length, ReadOnlySpan`1<byte> buf);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32* ids, GLEnum* severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32* ids, GLEnum* severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<GLEnum> types, UInt32* ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<GLEnum> types, UInt32* ids, GLEnum* severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<GLEnum> types, UInt32* ids, GLEnum* severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<GLEnum> types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<GLEnum> types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<GLEnum> types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<GLEnum> types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<GLEnum> types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<GLEnum> types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<GLEnum> types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<GLEnum> types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<GLEnum> types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, GLEnum* types, UInt32* ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, GLEnum* types, UInt32* ids, GLEnum* severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, GLEnum* types, UInt32* ids, GLEnum* severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, GLEnum* types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, GLEnum* types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, GLEnum* types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, GLEnum* types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, GLEnum* types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, GLEnum* types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, GLEnum* types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, GLEnum* types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, GLEnum* types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, GLEnum* types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, GLEnum* types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, GLEnum* types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, GLEnum* types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, GLEnum* types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, GLEnum* types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, GLEnum* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, GLEnum* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, GLEnum* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, GLEnum* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, GLEnum* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, GLEnum* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<GLEnum> types, UInt32* ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<GLEnum> types, UInt32* ids, GLEnum* severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<GLEnum> types, UInt32* ids, GLEnum* severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<GLEnum> types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<GLEnum> types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<GLEnum> types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<GLEnum> types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<GLEnum> types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<GLEnum> types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<GLEnum> types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<GLEnum> types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<GLEnum> types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, GLEnum* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<GLEnum> types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<GLEnum> types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<GLEnum> types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<GLEnum> types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<GLEnum> types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<GLEnum> types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<GLEnum> types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<GLEnum> types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<GLEnum> types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<GLEnum> types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<GLEnum> types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<GLEnum> types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, GLEnum* types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, GLEnum* types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, GLEnum* types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, GLEnum* types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, GLEnum* types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, GLEnum* types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, GLEnum* types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, GLEnum* types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, GLEnum* types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, GLEnum* types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, GLEnum* types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, GLEnum* types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, GLEnum* types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, GLEnum* types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, GLEnum* types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, GLEnum* types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, GLEnum* types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, GLEnum* types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, GLEnum* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, GLEnum* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, GLEnum* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, GLEnum* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, GLEnum* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, GLEnum* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<GLEnum> types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<GLEnum> types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<GLEnum> types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<GLEnum> types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<GLEnum> types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<GLEnum> types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<GLEnum> types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<GLEnum> types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<GLEnum> types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<GLEnum> types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<GLEnum> types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<GLEnum> types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32* ids, GLEnum* severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32* ids, GLEnum* severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<DebugType> types, UInt32* ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<DebugType> types, UInt32* ids, GLEnum* severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<DebugType> types, UInt32* ids, GLEnum* severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<DebugType> types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<DebugType> types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<DebugType> types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<DebugType> types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<DebugType> types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<DebugType> types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<DebugType> types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<DebugType> types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<DebugType> types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<DebugType> types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<DebugType> types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<DebugType> types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<DebugType> types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<DebugType> types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<DebugType> types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, DebugType* types, UInt32* ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, DebugType* types, UInt32* ids, GLEnum* severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, DebugType* types, UInt32* ids, GLEnum* severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, DebugType* types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, DebugType* types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, DebugType* types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, DebugType* types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, DebugType* types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, DebugType* types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, DebugType* types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, DebugType* types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, DebugType* types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, DebugType* types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, DebugType* types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, DebugType* types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, DebugType* types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, DebugType* types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, DebugType* types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, DebugType* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, DebugType* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, DebugType* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, DebugType* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, DebugType* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, DebugType* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<DebugType> types, UInt32* ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<DebugType> types, UInt32* ids, GLEnum* severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<DebugType> types, UInt32* ids, GLEnum* severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<DebugType> types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<DebugType> types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<DebugType> types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<DebugType> types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<DebugType> types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<DebugType> types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<DebugType> types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<DebugType> types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<DebugType> types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<DebugType> types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<DebugType> types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<DebugType> types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<DebugType> types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<DebugType> types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<DebugType> types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, DebugType* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<DebugType> types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<DebugType> types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<DebugType> types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<DebugType> types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<DebugType> types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<DebugType> types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<DebugType> types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<DebugType> types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<DebugType> types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<DebugType> types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<DebugType> types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<DebugType> types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<DebugType> types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<DebugType> types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<DebugType> types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<DebugType> types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<DebugType> types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<DebugType> types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, GLEnum* sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, DebugType* types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, DebugType* types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, DebugType* types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, DebugType* types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, DebugType* types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, DebugType* types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, DebugType* types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, DebugType* types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, DebugType* types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, DebugType* types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, DebugType* types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, DebugType* types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, DebugType* types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, DebugType* types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, DebugType* types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, DebugType* types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, DebugType* types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, DebugType* types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, DebugType* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, DebugType* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, DebugType* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, DebugType* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, DebugType* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, DebugType* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<DebugType> types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<DebugType> types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<DebugType> types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<DebugType> types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<DebugType> types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<DebugType> types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<DebugType> types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<DebugType> types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<DebugType> types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<DebugType> types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<DebugType> types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<DebugType> types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<DebugType> types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<DebugType> types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<DebugType> types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<DebugType> types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<DebugType> types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<DebugType> types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<GLEnum> sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32* ids, GLEnum* severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32* ids, GLEnum* severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<GLEnum> types, UInt32* ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<GLEnum> types, UInt32* ids, GLEnum* severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<GLEnum> types, UInt32* ids, GLEnum* severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<GLEnum> types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<GLEnum> types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<GLEnum> types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<GLEnum> types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<GLEnum> types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<GLEnum> types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<GLEnum> types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<GLEnum> types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<GLEnum> types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, GLEnum* types, UInt32* ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, GLEnum* types, UInt32* ids, GLEnum* severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, GLEnum* types, UInt32* ids, GLEnum* severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, GLEnum* types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, GLEnum* types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, GLEnum* types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, GLEnum* types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, GLEnum* types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, GLEnum* types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, GLEnum* types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, GLEnum* types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, GLEnum* types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, GLEnum* types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, GLEnum* types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, GLEnum* types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, GLEnum* types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, GLEnum* types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, GLEnum* types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, GLEnum* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, GLEnum* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, GLEnum* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, GLEnum* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, GLEnum* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, GLEnum* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<GLEnum> types, UInt32* ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<GLEnum> types, UInt32* ids, GLEnum* severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<GLEnum> types, UInt32* ids, GLEnum* severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<GLEnum> types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<GLEnum> types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<GLEnum> types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<GLEnum> types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<GLEnum> types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<GLEnum> types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<GLEnum> types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<GLEnum> types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<GLEnum> types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, GLEnum* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<GLEnum> types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<GLEnum> types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<GLEnum> types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<GLEnum> types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<GLEnum> types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<GLEnum> types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<GLEnum> types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<GLEnum> types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<GLEnum> types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<GLEnum> types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<GLEnum> types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<GLEnum> types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, GLEnum* types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, GLEnum* types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, GLEnum* types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, GLEnum* types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, GLEnum* types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, GLEnum* types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, GLEnum* types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, GLEnum* types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, GLEnum* types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, GLEnum* types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, GLEnum* types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, GLEnum* types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, GLEnum* types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, GLEnum* types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, GLEnum* types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, GLEnum* types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, GLEnum* types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, GLEnum* types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, GLEnum* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, GLEnum* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, GLEnum* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, GLEnum* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, GLEnum* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, GLEnum* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<GLEnum> types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<GLEnum> types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<GLEnum> types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<GLEnum> types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<GLEnum> types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<GLEnum> types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<GLEnum> types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<GLEnum> types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<GLEnum> types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<GLEnum> types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<GLEnum> types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<GLEnum> types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<GLEnum> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32* ids, GLEnum* severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32* ids, GLEnum* severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<DebugType> types, UInt32* ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<DebugType> types, UInt32* ids, GLEnum* severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<DebugType> types, UInt32* ids, GLEnum* severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<DebugType> types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<DebugType> types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<DebugType> types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<DebugType> types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<DebugType> types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<DebugType> types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<DebugType> types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<DebugType> types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<DebugType> types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<DebugType> types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<DebugType> types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<DebugType> types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<DebugType> types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<DebugType> types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<DebugType> types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, DebugType* types, UInt32* ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, DebugType* types, UInt32* ids, GLEnum* severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, DebugType* types, UInt32* ids, GLEnum* severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, DebugType* types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, DebugType* types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, DebugType* types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, DebugType* types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, DebugType* types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, DebugType* types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, DebugType* types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, DebugType* types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, DebugType* types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, DebugType* types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, DebugType* types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, DebugType* types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, DebugType* types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, DebugType* types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, DebugType* types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, DebugType* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, DebugType* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, DebugType* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, DebugType* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, DebugType* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, DebugType* types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<DebugType> types, UInt32* ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<DebugType> types, UInt32* ids, GLEnum* severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<DebugType> types, UInt32* ids, GLEnum* severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<DebugType> types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<DebugType> types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<DebugType> types, UInt32* ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<DebugType> types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<DebugType> types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<DebugType> types, UInt32* ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<DebugType> types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<DebugType> types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<DebugType> types, UInt32* ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<DebugType> types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<DebugType> types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<DebugType> types, Span`1<UInt32> ids, GLEnum* severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<DebugType> types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<DebugType> types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<DebugType> types, Span`1<UInt32> ids, GLEnum* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<GLEnum> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, DebugType* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<DebugType> types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<DebugType> types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<DebugType> types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<DebugType> types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<DebugType> types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<DebugType> types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<DebugType> types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<DebugType> types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<DebugType> types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<DebugType> types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<DebugType> types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<DebugType> types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<DebugType> types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<DebugType> types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<DebugType> types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<DebugType> types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<DebugType> types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<DebugType> types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, DebugSource* sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, DebugType* types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, DebugType* types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, DebugType* types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, DebugType* types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, DebugType* types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, DebugType* types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, DebugType* types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, DebugType* types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, DebugType* types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, DebugType* types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, DebugType* types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, DebugType* types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, DebugType* types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, DebugType* types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, DebugType* types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, DebugType* types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, DebugType* types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, DebugType* types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, DebugType* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, DebugType* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, DebugType* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, DebugType* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, DebugType* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, DebugType* types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<DebugType> types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<DebugType> types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<DebugType> types, UInt32* ids, DebugSeverity* severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<DebugType> types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<DebugType> types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<DebugType> types, UInt32* ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<DebugType> types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<DebugType> types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<DebugType> types, UInt32* ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<DebugType> types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<DebugType> types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<DebugType> types, UInt32* ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<DebugType> types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<DebugType> types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<DebugType> types, Span`1<UInt32> ids, DebugSeverity* severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<DebugType> types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<DebugType> types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<DebugType> types, Span`1<UInt32> ids, DebugSeverity* severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, UInt32* lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Byte* messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<byte> messageLog);
    [ExtensionAttribute]
public static UInt32 GetDebugMessageLog(GL thisApi, UInt32 count, UInt32 bufSize, Span`1<DebugSource> sources, Span`1<DebugType> types, Span`1<UInt32> ids, Span`1<DebugSeverity> severities, Span`1<UInt32> lengths, Span`1<string> messageLog);
    [ExtensionAttribute]
public static void GetFramebufferParameter(GL thisApi, GLEnum target, GLEnum pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetFramebufferParameter(GL thisApi, GLEnum target, FramebufferAttachmentParameterName pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetFramebufferParameter(GL thisApi, FramebufferTarget target, GLEnum pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetFramebufferParameter(GL thisApi, FramebufferTarget target, FramebufferAttachmentParameterName pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetInternalformat(GL thisApi, GLEnum target, GLEnum internalformat, GLEnum pname, UInt32 count, Span`1<long> params);
    [ExtensionAttribute]
public static void GetInternalformat(GL thisApi, GLEnum target, GLEnum internalformat, InternalFormatPName pname, UInt32 count, Span`1<long> params);
    [ExtensionAttribute]
public static void GetInternalformat(GL thisApi, GLEnum target, InternalFormat internalformat, GLEnum pname, UInt32 count, Span`1<long> params);
    [ExtensionAttribute]
public static void GetInternalformat(GL thisApi, GLEnum target, InternalFormat internalformat, InternalFormatPName pname, UInt32 count, Span`1<long> params);
    [ExtensionAttribute]
public static void GetInternalformat(GL thisApi, TextureTarget target, GLEnum internalformat, GLEnum pname, UInt32 count, Span`1<long> params);
    [ExtensionAttribute]
public static void GetInternalformat(GL thisApi, TextureTarget target, GLEnum internalformat, InternalFormatPName pname, UInt32 count, Span`1<long> params);
    [ExtensionAttribute]
public static void GetInternalformat(GL thisApi, TextureTarget target, InternalFormat internalformat, GLEnum pname, UInt32 count, Span`1<long> params);
    [ExtensionAttribute]
public static void GetInternalformat(GL thisApi, TextureTarget target, InternalFormat internalformat, InternalFormatPName pname, UInt32 count, Span`1<long> params);
    [ExtensionAttribute]
public static void GetObjectLabel(GL thisApi, GLEnum identifier, UInt32 name, UInt32 bufSize, UInt32* length, Span`1<byte> label);
    [ExtensionAttribute]
public static void GetObjectLabel(GL thisApi, GLEnum identifier, UInt32 name, UInt32 bufSize, UInt32* length, Span`1<string> label);
    [ExtensionAttribute]
public static void GetObjectLabel(GL thisApi, GLEnum identifier, UInt32 name, UInt32 bufSize, Span`1<UInt32> length, Byte* label);
    [ExtensionAttribute]
public static void GetObjectLabel(GL thisApi, GLEnum identifier, UInt32 name, UInt32 bufSize, Span`1<UInt32> length, Span`1<byte> label);
    [ExtensionAttribute]
public static void GetObjectLabel(GL thisApi, GLEnum identifier, UInt32 name, UInt32 bufSize, Span`1<UInt32> length, Span`1<string> label);
    [ExtensionAttribute]
public static void GetObjectLabel(GL thisApi, ObjectIdentifier identifier, UInt32 name, UInt32 bufSize, UInt32* length, Span`1<byte> label);
    [ExtensionAttribute]
public static void GetObjectLabel(GL thisApi, ObjectIdentifier identifier, UInt32 name, UInt32 bufSize, UInt32* length, Span`1<string> label);
    [ExtensionAttribute]
public static void GetObjectLabel(GL thisApi, ObjectIdentifier identifier, UInt32 name, UInt32 bufSize, Span`1<UInt32> length, Byte* label);
    [ExtensionAttribute]
public static void GetObjectLabel(GL thisApi, ObjectIdentifier identifier, UInt32 name, UInt32 bufSize, Span`1<UInt32> length, Span`1<byte> label);
    [ExtensionAttribute]
public static void GetObjectLabel(GL thisApi, ObjectIdentifier identifier, UInt32 name, UInt32 bufSize, Span`1<UInt32> length, Span`1<string> label);
    [ExtensionAttribute]
public static void GetObjectPtrLabel(GL thisApi, Void* ptr, UInt32 bufSize, UInt32* length, Span`1<byte> label);
    [ExtensionAttribute]
public static void GetObjectPtrLabel(GL thisApi, Void* ptr, UInt32 bufSize, UInt32* length, Span`1<string> label);
    [ExtensionAttribute]
public static void GetObjectPtrLabel(GL thisApi, Void* ptr, UInt32 bufSize, Span`1<UInt32> length, Byte* label);
    [ExtensionAttribute]
public static void GetObjectPtrLabel(GL thisApi, Void* ptr, UInt32 bufSize, Span`1<UInt32> length, Span`1<byte> label);
    [ExtensionAttribute]
public static void GetObjectPtrLabel(GL thisApi, Void* ptr, UInt32 bufSize, Span`1<UInt32> length, Span`1<string> label);
    [ExtensionAttribute]
public static void GetObjectPtrLabel(GL thisApi, ReadOnlySpan`1<T0> ptr, UInt32 bufSize, UInt32* length, Byte* label);
    [ExtensionAttribute]
public static void GetObjectPtrLabel(GL thisApi, ReadOnlySpan`1<T0> ptr, UInt32 bufSize, UInt32* length, Span`1<byte> label);
    [ExtensionAttribute]
public static void GetObjectPtrLabel(GL thisApi, ReadOnlySpan`1<T0> ptr, UInt32 bufSize, UInt32* length, Span`1<string> label);
    [ExtensionAttribute]
public static void GetObjectPtrLabel(GL thisApi, ReadOnlySpan`1<T0> ptr, UInt32 bufSize, Span`1<UInt32> length, Byte* label);
    [ExtensionAttribute]
public static void GetObjectPtrLabel(GL thisApi, ReadOnlySpan`1<T0> ptr, UInt32 bufSize, Span`1<UInt32> length, Span`1<byte> label);
    [ExtensionAttribute]
public static void GetObjectPtrLabel(GL thisApi, ReadOnlySpan`1<T0> ptr, UInt32 bufSize, Span`1<UInt32> length, Span`1<string> label);
    [ExtensionAttribute]
public static void GetProgramInterface(GL thisApi, UInt32 program, GLEnum programInterface, GLEnum pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetProgramInterface(GL thisApi, UInt32 program, GLEnum programInterface, ProgramInterfacePName pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetProgramInterface(GL thisApi, UInt32 program, ProgramInterface programInterface, GLEnum pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetProgramInterface(GL thisApi, UInt32 program, ProgramInterface programInterface, ProgramInterfacePName pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetProgramResource(GL thisApi, UInt32 program, GLEnum programInterface, UInt32 index, UInt32 propCount, GLEnum* props, UInt32 count, UInt32* length, Span`1<int> params);
    [ExtensionAttribute]
public static void GetProgramResource(GL thisApi, UInt32 program, GLEnum programInterface, UInt32 index, UInt32 propCount, GLEnum* props, UInt32 count, Span`1<UInt32> length, Int32* params);
    [ExtensionAttribute]
public static void GetProgramResource(GL thisApi, UInt32 program, GLEnum programInterface, UInt32 index, UInt32 propCount, GLEnum* props, UInt32 count, Span`1<UInt32> length, Span`1<int> params);
    [ExtensionAttribute]
public static void GetProgramResource(GL thisApi, UInt32 program, GLEnum programInterface, UInt32 index, UInt32 propCount, ReadOnlySpan`1<GLEnum> props, UInt32 count, UInt32* length, Int32* params);
    [ExtensionAttribute]
public static void GetProgramResource(GL thisApi, UInt32 program, GLEnum programInterface, UInt32 index, UInt32 propCount, ReadOnlySpan`1<GLEnum> props, UInt32 count, UInt32* length, Span`1<int> params);
    [ExtensionAttribute]
public static void GetProgramResource(GL thisApi, UInt32 program, GLEnum programInterface, UInt32 index, UInt32 propCount, ReadOnlySpan`1<GLEnum> props, UInt32 count, Span`1<UInt32> length, Int32* params);
    [ExtensionAttribute]
public static void GetProgramResource(GL thisApi, UInt32 program, GLEnum programInterface, UInt32 index, UInt32 propCount, ReadOnlySpan`1<GLEnum> props, UInt32 count, Span`1<UInt32> length, Span`1<int> params);
    [ExtensionAttribute]
public static void GetProgramResource(GL thisApi, UInt32 program, GLEnum programInterface, UInt32 index, UInt32 propCount, ProgramResourceProperty* props, UInt32 count, UInt32* length, Span`1<int> params);
    [ExtensionAttribute]
public static void GetProgramResource(GL thisApi, UInt32 program, GLEnum programInterface, UInt32 index, UInt32 propCount, ProgramResourceProperty* props, UInt32 count, Span`1<UInt32> length, Int32* params);
    [ExtensionAttribute]
public static void GetProgramResource(GL thisApi, UInt32 program, GLEnum programInterface, UInt32 index, UInt32 propCount, ProgramResourceProperty* props, UInt32 count, Span`1<UInt32> length, Span`1<int> params);
    [ExtensionAttribute]
public static void GetProgramResource(GL thisApi, UInt32 program, GLEnum programInterface, UInt32 index, UInt32 propCount, ReadOnlySpan`1<ProgramResourceProperty> props, UInt32 count, UInt32* length, Int32* params);
    [ExtensionAttribute]
public static void GetProgramResource(GL thisApi, UInt32 program, GLEnum programInterface, UInt32 index, UInt32 propCount, ReadOnlySpan`1<ProgramResourceProperty> props, UInt32 count, UInt32* length, Span`1<int> params);
    [ExtensionAttribute]
public static void GetProgramResource(GL thisApi, UInt32 program, GLEnum programInterface, UInt32 index, UInt32 propCount, ReadOnlySpan`1<ProgramResourceProperty> props, UInt32 count, Span`1<UInt32> length, Int32* params);
    [ExtensionAttribute]
public static void GetProgramResource(GL thisApi, UInt32 program, GLEnum programInterface, UInt32 index, UInt32 propCount, ReadOnlySpan`1<ProgramResourceProperty> props, UInt32 count, Span`1<UInt32> length, Span`1<int> params);
    [ExtensionAttribute]
public static void GetProgramResource(GL thisApi, UInt32 program, ProgramInterface programInterface, UInt32 index, UInt32 propCount, GLEnum* props, UInt32 count, UInt32* length, Span`1<int> params);
    [ExtensionAttribute]
public static void GetProgramResource(GL thisApi, UInt32 program, ProgramInterface programInterface, UInt32 index, UInt32 propCount, GLEnum* props, UInt32 count, Span`1<UInt32> length, Int32* params);
    [ExtensionAttribute]
public static void GetProgramResource(GL thisApi, UInt32 program, ProgramInterface programInterface, UInt32 index, UInt32 propCount, GLEnum* props, UInt32 count, Span`1<UInt32> length, Span`1<int> params);
    [ExtensionAttribute]
public static void GetProgramResource(GL thisApi, UInt32 program, ProgramInterface programInterface, UInt32 index, UInt32 propCount, ReadOnlySpan`1<GLEnum> props, UInt32 count, UInt32* length, Int32* params);
    [ExtensionAttribute]
public static void GetProgramResource(GL thisApi, UInt32 program, ProgramInterface programInterface, UInt32 index, UInt32 propCount, ReadOnlySpan`1<GLEnum> props, UInt32 count, UInt32* length, Span`1<int> params);
    [ExtensionAttribute]
public static void GetProgramResource(GL thisApi, UInt32 program, ProgramInterface programInterface, UInt32 index, UInt32 propCount, ReadOnlySpan`1<GLEnum> props, UInt32 count, Span`1<UInt32> length, Int32* params);
    [ExtensionAttribute]
public static void GetProgramResource(GL thisApi, UInt32 program, ProgramInterface programInterface, UInt32 index, UInt32 propCount, ReadOnlySpan`1<GLEnum> props, UInt32 count, Span`1<UInt32> length, Span`1<int> params);
    [ExtensionAttribute]
public static void GetProgramResource(GL thisApi, UInt32 program, ProgramInterface programInterface, UInt32 index, UInt32 propCount, ProgramResourceProperty* props, UInt32 count, UInt32* length, Span`1<int> params);
    [ExtensionAttribute]
public static void GetProgramResource(GL thisApi, UInt32 program, ProgramInterface programInterface, UInt32 index, UInt32 propCount, ProgramResourceProperty* props, UInt32 count, Span`1<UInt32> length, Int32* params);
    [ExtensionAttribute]
public static void GetProgramResource(GL thisApi, UInt32 program, ProgramInterface programInterface, UInt32 index, UInt32 propCount, ProgramResourceProperty* props, UInt32 count, Span`1<UInt32> length, Span`1<int> params);
    [ExtensionAttribute]
public static void GetProgramResource(GL thisApi, UInt32 program, ProgramInterface programInterface, UInt32 index, UInt32 propCount, ReadOnlySpan`1<ProgramResourceProperty> props, UInt32 count, UInt32* length, Int32* params);
    [ExtensionAttribute]
public static void GetProgramResource(GL thisApi, UInt32 program, ProgramInterface programInterface, UInt32 index, UInt32 propCount, ReadOnlySpan`1<ProgramResourceProperty> props, UInt32 count, UInt32* length, Span`1<int> params);
    [ExtensionAttribute]
public static void GetProgramResource(GL thisApi, UInt32 program, ProgramInterface programInterface, UInt32 index, UInt32 propCount, ReadOnlySpan`1<ProgramResourceProperty> props, UInt32 count, Span`1<UInt32> length, Int32* params);
    [ExtensionAttribute]
public static void GetProgramResource(GL thisApi, UInt32 program, ProgramInterface programInterface, UInt32 index, UInt32 propCount, ReadOnlySpan`1<ProgramResourceProperty> props, UInt32 count, Span`1<UInt32> length, Span`1<int> params);
    [ExtensionAttribute]
public static UInt32 GetProgramResourceIndex(GL thisApi, UInt32 program, GLEnum programInterface, ReadOnlySpan`1<byte> name);
    [ExtensionAttribute]
public static UInt32 GetProgramResourceIndex(GL thisApi, UInt32 program, ProgramInterface programInterface, ReadOnlySpan`1<byte> name);
    [ExtensionAttribute]
public static int GetProgramResourceLocation(GL thisApi, UInt32 program, GLEnum programInterface, ReadOnlySpan`1<byte> name);
    [ExtensionAttribute]
public static int GetProgramResourceLocation(GL thisApi, UInt32 program, ProgramInterface programInterface, ReadOnlySpan`1<byte> name);
    [ExtensionAttribute]
public static int GetProgramResourceLocationIndex(GL thisApi, UInt32 program, GLEnum programInterface, ReadOnlySpan`1<byte> name);
    [ExtensionAttribute]
public static int GetProgramResourceLocationIndex(GL thisApi, UInt32 program, ProgramInterface programInterface, ReadOnlySpan`1<byte> name);
    [ExtensionAttribute]
public static void GetProgramResourceName(GL thisApi, UInt32 program, GLEnum programInterface, UInt32 index, UInt32 bufSize, UInt32* length, Span`1<byte> name);
    [ExtensionAttribute]
public static void GetProgramResourceName(GL thisApi, UInt32 program, GLEnum programInterface, UInt32 index, UInt32 bufSize, UInt32* length, Span`1<string> name);
    [ExtensionAttribute]
public static void GetProgramResourceName(GL thisApi, UInt32 program, GLEnum programInterface, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Byte* name);
    [ExtensionAttribute]
public static void GetProgramResourceName(GL thisApi, UInt32 program, GLEnum programInterface, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Span`1<byte> name);
    [ExtensionAttribute]
public static void GetProgramResourceName(GL thisApi, UInt32 program, GLEnum programInterface, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Span`1<string> name);
    [ExtensionAttribute]
public static void GetProgramResourceName(GL thisApi, UInt32 program, ProgramInterface programInterface, UInt32 index, UInt32 bufSize, UInt32* length, Span`1<byte> name);
    [ExtensionAttribute]
public static void GetProgramResourceName(GL thisApi, UInt32 program, ProgramInterface programInterface, UInt32 index, UInt32 bufSize, UInt32* length, Span`1<string> name);
    [ExtensionAttribute]
public static void GetProgramResourceName(GL thisApi, UInt32 program, ProgramInterface programInterface, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Byte* name);
    [ExtensionAttribute]
public static void GetProgramResourceName(GL thisApi, UInt32 program, ProgramInterface programInterface, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Span`1<byte> name);
    [ExtensionAttribute]
public static void GetProgramResourceName(GL thisApi, UInt32 program, ProgramInterface programInterface, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Span`1<string> name);
    [ExtensionAttribute]
public static void InvalidateFramebuffer(GL thisApi, GLEnum target, UInt32 numAttachments, ReadOnlySpan`1<GLEnum> attachments);
    [ExtensionAttribute]
public static void InvalidateFramebuffer(GL thisApi, GLEnum target, UInt32 numAttachments, ReadOnlySpan`1<InvalidateFramebufferAttachment> attachments);
    [ExtensionAttribute]
public static void InvalidateFramebuffer(GL thisApi, FramebufferTarget target, UInt32 numAttachments, ReadOnlySpan`1<GLEnum> attachments);
    [ExtensionAttribute]
public static void InvalidateFramebuffer(GL thisApi, FramebufferTarget target, UInt32 numAttachments, ReadOnlySpan`1<InvalidateFramebufferAttachment> attachments);
    [ExtensionAttribute]
public static void InvalidateSubFramebuffer(GL thisApi, GLEnum target, UInt32 numAttachments, ReadOnlySpan`1<GLEnum> attachments, int x, int y, UInt32 width, UInt32 height);
    [ExtensionAttribute]
public static void InvalidateSubFramebuffer(GL thisApi, GLEnum target, UInt32 numAttachments, ReadOnlySpan`1<InvalidateFramebufferAttachment> attachments, int x, int y, UInt32 width, UInt32 height);
    [ExtensionAttribute]
public static void InvalidateSubFramebuffer(GL thisApi, FramebufferTarget target, UInt32 numAttachments, ReadOnlySpan`1<GLEnum> attachments, int x, int y, UInt32 width, UInt32 height);
    [ExtensionAttribute]
public static void InvalidateSubFramebuffer(GL thisApi, FramebufferTarget target, UInt32 numAttachments, ReadOnlySpan`1<InvalidateFramebufferAttachment> attachments, int x, int y, UInt32 width, UInt32 height);
    [ExtensionAttribute]
public static void MultiDrawArraysIndirect(GL thisApi, GLEnum mode, ReadOnlySpan`1<T0> indirect, UInt32 drawcount, UInt32 stride);
    [ExtensionAttribute]
public static void MultiDrawArraysIndirect(GL thisApi, PrimitiveType mode, ReadOnlySpan`1<T0> indirect, UInt32 drawcount, UInt32 stride);
    [ExtensionAttribute]
public static void MultiDrawElementsIndirect(GL thisApi, GLEnum mode, GLEnum type, ReadOnlySpan`1<T0> indirect, UInt32 drawcount, UInt32 stride);
    [ExtensionAttribute]
public static void MultiDrawElementsIndirect(GL thisApi, GLEnum mode, DrawElementsType type, ReadOnlySpan`1<T0> indirect, UInt32 drawcount, UInt32 stride);
    [ExtensionAttribute]
public static void MultiDrawElementsIndirect(GL thisApi, PrimitiveType mode, GLEnum type, ReadOnlySpan`1<T0> indirect, UInt32 drawcount, UInt32 stride);
    [ExtensionAttribute]
public static void MultiDrawElementsIndirect(GL thisApi, PrimitiveType mode, DrawElementsType type, ReadOnlySpan`1<T0> indirect, UInt32 drawcount, UInt32 stride);
    [ExtensionAttribute]
public static void ObjectLabel(GL thisApi, GLEnum identifier, UInt32 name, UInt32 length, ReadOnlySpan`1<byte> label);
    [ExtensionAttribute]
public static void ObjectLabel(GL thisApi, ObjectIdentifier identifier, UInt32 name, UInt32 length, ReadOnlySpan`1<byte> label);
    [ExtensionAttribute]
public static void ObjectPtrLabel(GL thisApi, Void* ptr, UInt32 length, ReadOnlySpan`1<byte> label);
    [ExtensionAttribute]
public static void ObjectPtrLabel(GL thisApi, ReadOnlySpan`1<T0> ptr, UInt32 length, Byte* label);
    [ExtensionAttribute]
public static void ObjectPtrLabel(GL thisApi, ReadOnlySpan`1<T0> ptr, UInt32 length, ReadOnlySpan`1<byte> label);
    [ExtensionAttribute]
public static void ObjectPtrLabel(GL thisApi, ReadOnlySpan`1<T0> ptr, UInt32 length, string label);
    [ExtensionAttribute]
public static void PushDebugGroup(GL thisApi, GLEnum source, UInt32 id, UInt32 length, ReadOnlySpan`1<byte> message);
    [ExtensionAttribute]
public static void PushDebugGroup(GL thisApi, DebugSource source, UInt32 id, UInt32 length, ReadOnlySpan`1<byte> message);
    [ExtensionAttribute]
public static void DrawElementsInstancedBaseInstance(GL thisApi, GLEnum mode, UInt32 count, GLEnum type, ReadOnlySpan`1<T0> indices, UInt32 instancecount, UInt32 baseinstance);
    [ExtensionAttribute]
public static void DrawElementsInstancedBaseInstance(GL thisApi, GLEnum mode, UInt32 count, PrimitiveType type, ReadOnlySpan`1<T0> indices, UInt32 instancecount, UInt32 baseinstance);
    [ExtensionAttribute]
public static void DrawElementsInstancedBaseInstance(GL thisApi, PrimitiveType mode, UInt32 count, GLEnum type, ReadOnlySpan`1<T0> indices, UInt32 instancecount, UInt32 baseinstance);
    [ExtensionAttribute]
public static void DrawElementsInstancedBaseInstance(GL thisApi, PrimitiveType mode, UInt32 count, PrimitiveType type, ReadOnlySpan`1<T0> indices, UInt32 instancecount, UInt32 baseinstance);
    [ExtensionAttribute]
public static void DrawElementsInstancedBaseVertexBaseInstance(GL thisApi, GLEnum mode, UInt32 count, GLEnum type, ReadOnlySpan`1<T0> indices, UInt32 instancecount, int basevertex, UInt32 baseinstance);
    [ExtensionAttribute]
public static void DrawElementsInstancedBaseVertexBaseInstance(GL thisApi, GLEnum mode, UInt32 count, DrawElementsType type, ReadOnlySpan`1<T0> indices, UInt32 instancecount, int basevertex, UInt32 baseinstance);
    [ExtensionAttribute]
public static void DrawElementsInstancedBaseVertexBaseInstance(GL thisApi, PrimitiveType mode, UInt32 count, GLEnum type, ReadOnlySpan`1<T0> indices, UInt32 instancecount, int basevertex, UInt32 baseinstance);
    [ExtensionAttribute]
public static void DrawElementsInstancedBaseVertexBaseInstance(GL thisApi, PrimitiveType mode, UInt32 count, DrawElementsType type, ReadOnlySpan`1<T0> indices, UInt32 instancecount, int basevertex, UInt32 baseinstance);
    [ExtensionAttribute]
public static void GetActiveAtomicCounterBuffer(GL thisApi, UInt32 program, UInt32 bufferIndex, GLEnum pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetActiveAtomicCounterBuffer(GL thisApi, UInt32 program, UInt32 bufferIndex, AtomicCounterBufferPName pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetInternalformat(GL thisApi, GLEnum target, GLEnum internalformat, GLEnum pname, UInt32 count, Span`1<int> params);
    [ExtensionAttribute]
public static void GetInternalformat(GL thisApi, GLEnum target, GLEnum internalformat, InternalFormatPName pname, UInt32 count, Span`1<int> params);
    [ExtensionAttribute]
public static void GetInternalformat(GL thisApi, GLEnum target, InternalFormat internalformat, GLEnum pname, UInt32 count, Span`1<int> params);
    [ExtensionAttribute]
public static void GetInternalformat(GL thisApi, GLEnum target, InternalFormat internalformat, InternalFormatPName pname, UInt32 count, Span`1<int> params);
    [ExtensionAttribute]
public static void GetInternalformat(GL thisApi, TextureTarget target, GLEnum internalformat, GLEnum pname, UInt32 count, Span`1<int> params);
    [ExtensionAttribute]
public static void GetInternalformat(GL thisApi, TextureTarget target, GLEnum internalformat, InternalFormatPName pname, UInt32 count, Span`1<int> params);
    [ExtensionAttribute]
public static void GetInternalformat(GL thisApi, TextureTarget target, InternalFormat internalformat, GLEnum pname, UInt32 count, Span`1<int> params);
    [ExtensionAttribute]
public static void GetInternalformat(GL thisApi, TextureTarget target, InternalFormat internalformat, InternalFormatPName pname, UInt32 count, Span`1<int> params);
    [ExtensionAttribute]
public static void DeleteProgramPipelines(GL thisApi, UInt32 n, ReadOnlySpan`1<UInt32> pipelines);
    [ExtensionAttribute]
public static void DeleteProgramPipelines(GL thisApi, UInt32 n, ReadOnlySpan`1<ProgramPipeline> pipelines);
    [ExtensionAttribute]
public static void DepthRangeArray(GL thisApi, UInt32 first, UInt32 count, ReadOnlySpan`1<double> v);
    [ExtensionAttribute]
public static void GenProgramPipelines(GL thisApi, UInt32 n, Span`1<UInt32> pipelines);
    [ExtensionAttribute]
public static void GenProgramPipelines(GL thisApi, UInt32 n, Span`1<ProgramPipeline> pipelines);
    [ExtensionAttribute]
public static void GetDouble(GL thisApi, GLEnum target, UInt32 index, Span`1<double> data);
    [ExtensionAttribute]
public static void GetDouble(GL thisApi, GetPName target, UInt32 index, Span`1<double> data);
    [ExtensionAttribute]
public static void GetFloat(GL thisApi, GLEnum target, UInt32 index, Span`1<float> data);
    [ExtensionAttribute]
public static void GetFloat(GL thisApi, GetPName target, UInt32 index, Span`1<float> data);
    [ExtensionAttribute]
public static void GetProgramBinary(GL thisApi, UInt32 program, UInt32 bufSize, UInt32* length, GLEnum* binaryFormat, Span`1<T0> binary);
    [ExtensionAttribute]
public static void GetProgramBinary(GL thisApi, UInt32 program, UInt32 bufSize, UInt32* length, Span`1<GLEnum> binaryFormat, Void* binary);
    [ExtensionAttribute]
public static void GetProgramBinary(GL thisApi, UInt32 program, UInt32 bufSize, UInt32* length, Span`1<GLEnum> binaryFormat, Span`1<T0> binary);
    [ExtensionAttribute]
public static void GetProgramBinary(GL thisApi, UInt32 program, UInt32 bufSize, Span`1<UInt32> length, GLEnum* binaryFormat, Void* binary);
    [ExtensionAttribute]
public static void GetProgramBinary(GL thisApi, UInt32 program, UInt32 bufSize, Span`1<UInt32> length, GLEnum* binaryFormat, Span`1<T0> binary);
    [ExtensionAttribute]
public static void GetProgramBinary(GL thisApi, UInt32 program, UInt32 bufSize, Span`1<UInt32> length, Span`1<GLEnum> binaryFormat, Void* binary);
    [ExtensionAttribute]
public static void GetProgramBinary(GL thisApi, UInt32 program, UInt32 bufSize, Span`1<UInt32> length, Span`1<GLEnum> binaryFormat, Span`1<T0> binary);
    [ExtensionAttribute]
public static void GetProgramPipeline(GL thisApi, UInt32 pipeline, GLEnum pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetProgramPipeline(GL thisApi, UInt32 pipeline, PipelineParameterName pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetProgramPipelineInfoLog(GL thisApi, UInt32 pipeline, UInt32 bufSize, UInt32* length, Span`1<byte> infoLog);
    [ExtensionAttribute]
public static void GetProgramPipelineInfoLog(GL thisApi, UInt32 pipeline, UInt32 bufSize, UInt32* length, Span`1<string> infoLog);
    [ExtensionAttribute]
public static void GetProgramPipelineInfoLog(GL thisApi, UInt32 pipeline, UInt32 bufSize, Span`1<UInt32> length, Byte* infoLog);
    [ExtensionAttribute]
public static void GetProgramPipelineInfoLog(GL thisApi, UInt32 pipeline, UInt32 bufSize, Span`1<UInt32> length, Span`1<byte> infoLog);
    [ExtensionAttribute]
public static void GetProgramPipelineInfoLog(GL thisApi, UInt32 pipeline, UInt32 bufSize, Span`1<UInt32> length, Span`1<string> infoLog);
    [ExtensionAttribute]
public static void GetShaderPrecisionFormat(GL thisApi, GLEnum shadertype, GLEnum precisiontype, Int32* range, Span`1<int> precision);
    [ExtensionAttribute]
public static void GetShaderPrecisionFormat(GL thisApi, GLEnum shadertype, GLEnum precisiontype, Span`1<int> range, Int32* precision);
    [ExtensionAttribute]
public static void GetShaderPrecisionFormat(GL thisApi, GLEnum shadertype, GLEnum precisiontype, Span`1<int> range, Span`1<int> precision);
    [ExtensionAttribute]
public static void GetShaderPrecisionFormat(GL thisApi, GLEnum shadertype, PrecisionType precisiontype, Int32* range, Span`1<int> precision);
    [ExtensionAttribute]
public static void GetShaderPrecisionFormat(GL thisApi, GLEnum shadertype, PrecisionType precisiontype, Span`1<int> range, Int32* precision);
    [ExtensionAttribute]
public static void GetShaderPrecisionFormat(GL thisApi, GLEnum shadertype, PrecisionType precisiontype, Span`1<int> range, Span`1<int> precision);
    [ExtensionAttribute]
public static void GetShaderPrecisionFormat(GL thisApi, ShaderType shadertype, GLEnum precisiontype, Int32* range, Span`1<int> precision);
    [ExtensionAttribute]
public static void GetShaderPrecisionFormat(GL thisApi, ShaderType shadertype, GLEnum precisiontype, Span`1<int> range, Int32* precision);
    [ExtensionAttribute]
public static void GetShaderPrecisionFormat(GL thisApi, ShaderType shadertype, GLEnum precisiontype, Span`1<int> range, Span`1<int> precision);
    [ExtensionAttribute]
public static void GetShaderPrecisionFormat(GL thisApi, ShaderType shadertype, PrecisionType precisiontype, Int32* range, Span`1<int> precision);
    [ExtensionAttribute]
public static void GetShaderPrecisionFormat(GL thisApi, ShaderType shadertype, PrecisionType precisiontype, Span`1<int> range, Int32* precision);
    [ExtensionAttribute]
public static void GetShaderPrecisionFormat(GL thisApi, ShaderType shadertype, PrecisionType precisiontype, Span`1<int> range, Span`1<int> precision);
    [ExtensionAttribute]
public static void GetVertexAttribL(GL thisApi, UInt32 index, GLEnum pname, Span`1<double> params);
    [ExtensionAttribute]
public static void GetVertexAttribL(GL thisApi, UInt32 index, VertexAttribEnum pname, Span`1<double> params);
    [ExtensionAttribute]
public static void ProgramBinary(GL thisApi, UInt32 program, GLEnum binaryFormat, ReadOnlySpan`1<T0> binary, UInt32 length);
    [ExtensionAttribute]
public static void ProgramUniform1(GL thisApi, UInt32 program, int location, UInt32 count, ReadOnlySpan`1<int> value);
    [ExtensionAttribute]
public static void ProgramUniform1(GL thisApi, UInt32 program, int location, UInt32 count, ReadOnlySpan`1<float> value);
    [ExtensionAttribute]
public static void ProgramUniform1(GL thisApi, UInt32 program, int location, UInt32 count, ReadOnlySpan`1<double> value);
    [ExtensionAttribute]
public static void ProgramUniform1(GL thisApi, UInt32 program, int location, UInt32 count, ReadOnlySpan`1<UInt32> value);
    [ExtensionAttribute]
public static void ProgramUniform2(GL thisApi, UInt32 program, int location, UInt32 count, ReadOnlySpan`1<int> value);
    [ExtensionAttribute]
public static void ProgramUniform2(GL thisApi, UInt32 program, int location, UInt32 count, ReadOnlySpan`1<float> value);
    [ExtensionAttribute]
public static void ProgramUniform2(GL thisApi, UInt32 program, int location, UInt32 count, ReadOnlySpan`1<double> value);
    [ExtensionAttribute]
public static void ProgramUniform2(GL thisApi, UInt32 program, int location, UInt32 count, ReadOnlySpan`1<UInt32> value);
    [ExtensionAttribute]
public static void ProgramUniform3(GL thisApi, UInt32 program, int location, UInt32 count, ReadOnlySpan`1<int> value);
    [ExtensionAttribute]
public static void ProgramUniform3(GL thisApi, UInt32 program, int location, UInt32 count, ReadOnlySpan`1<float> value);
    [ExtensionAttribute]
public static void ProgramUniform3(GL thisApi, UInt32 program, int location, UInt32 count, ReadOnlySpan`1<double> value);
    [ExtensionAttribute]
public static void ProgramUniform3(GL thisApi, UInt32 program, int location, UInt32 count, ReadOnlySpan`1<UInt32> value);
    [ExtensionAttribute]
public static void ProgramUniform4(GL thisApi, UInt32 program, int location, UInt32 count, ReadOnlySpan`1<int> value);
    [ExtensionAttribute]
public static void ProgramUniform4(GL thisApi, UInt32 program, int location, UInt32 count, ReadOnlySpan`1<float> value);
    [ExtensionAttribute]
public static void ProgramUniform4(GL thisApi, UInt32 program, int location, UInt32 count, ReadOnlySpan`1<double> value);
    [ExtensionAttribute]
public static void ProgramUniform4(GL thisApi, UInt32 program, int location, UInt32 count, ReadOnlySpan`1<UInt32> value);
    [ExtensionAttribute]
public static void ProgramUniformMatrix2(GL thisApi, UInt32 program, int location, UInt32 count, bool transpose, ReadOnlySpan`1<float> value);
    [ExtensionAttribute]
public static void ProgramUniformMatrix2(GL thisApi, UInt32 program, int location, UInt32 count, Boolean transpose, ReadOnlySpan`1<float> value);
    [ExtensionAttribute]
public static void ProgramUniformMatrix2(GL thisApi, UInt32 program, int location, UInt32 count, bool transpose, ReadOnlySpan`1<double> value);
    [ExtensionAttribute]
public static void ProgramUniformMatrix2(GL thisApi, UInt32 program, int location, UInt32 count, Boolean transpose, ReadOnlySpan`1<double> value);
    [ExtensionAttribute]
public static void ProgramUniformMatrix2x3(GL thisApi, UInt32 program, int location, UInt32 count, bool transpose, ReadOnlySpan`1<float> value);
    [ExtensionAttribute]
public static void ProgramUniformMatrix2x3(GL thisApi, UInt32 program, int location, UInt32 count, Boolean transpose, ReadOnlySpan`1<float> value);
    [ExtensionAttribute]
public static void ProgramUniformMatrix2x3(GL thisApi, UInt32 program, int location, UInt32 count, bool transpose, ReadOnlySpan`1<double> value);
    [ExtensionAttribute]
public static void ProgramUniformMatrix2x3(GL thisApi, UInt32 program, int location, UInt32 count, Boolean transpose, ReadOnlySpan`1<double> value);
    [ExtensionAttribute]
public static void ProgramUniformMatrix2x4(GL thisApi, UInt32 program, int location, UInt32 count, bool transpose, ReadOnlySpan`1<float> value);
    [ExtensionAttribute]
public static void ProgramUniformMatrix2x4(GL thisApi, UInt32 program, int location, UInt32 count, Boolean transpose, ReadOnlySpan`1<float> value);
    [ExtensionAttribute]
public static void ProgramUniformMatrix2x4(GL thisApi, UInt32 program, int location, UInt32 count, bool transpose, ReadOnlySpan`1<double> value);
    [ExtensionAttribute]
public static void ProgramUniformMatrix2x4(GL thisApi, UInt32 program, int location, UInt32 count, Boolean transpose, ReadOnlySpan`1<double> value);
    [ExtensionAttribute]
public static void ProgramUniformMatrix3(GL thisApi, UInt32 program, int location, UInt32 count, bool transpose, ReadOnlySpan`1<float> value);
    [ExtensionAttribute]
public static void ProgramUniformMatrix3(GL thisApi, UInt32 program, int location, UInt32 count, Boolean transpose, ReadOnlySpan`1<float> value);
    [ExtensionAttribute]
public static void ProgramUniformMatrix3(GL thisApi, UInt32 program, int location, UInt32 count, bool transpose, ReadOnlySpan`1<double> value);
    [ExtensionAttribute]
public static void ProgramUniformMatrix3(GL thisApi, UInt32 program, int location, UInt32 count, Boolean transpose, ReadOnlySpan`1<double> value);
    [ExtensionAttribute]
public static void ProgramUniformMatrix3x2(GL thisApi, UInt32 program, int location, UInt32 count, bool transpose, ReadOnlySpan`1<float> value);
    [ExtensionAttribute]
public static void ProgramUniformMatrix3x2(GL thisApi, UInt32 program, int location, UInt32 count, Boolean transpose, ReadOnlySpan`1<float> value);
    [ExtensionAttribute]
public static void ProgramUniformMatrix3x2(GL thisApi, UInt32 program, int location, UInt32 count, bool transpose, ReadOnlySpan`1<double> value);
    [ExtensionAttribute]
public static void ProgramUniformMatrix3x2(GL thisApi, UInt32 program, int location, UInt32 count, Boolean transpose, ReadOnlySpan`1<double> value);
    [ExtensionAttribute]
public static void ProgramUniformMatrix3x4(GL thisApi, UInt32 program, int location, UInt32 count, bool transpose, ReadOnlySpan`1<float> value);
    [ExtensionAttribute]
public static void ProgramUniformMatrix3x4(GL thisApi, UInt32 program, int location, UInt32 count, Boolean transpose, ReadOnlySpan`1<float> value);
    [ExtensionAttribute]
public static void ProgramUniformMatrix3x4(GL thisApi, UInt32 program, int location, UInt32 count, bool transpose, ReadOnlySpan`1<double> value);
    [ExtensionAttribute]
public static void ProgramUniformMatrix3x4(GL thisApi, UInt32 program, int location, UInt32 count, Boolean transpose, ReadOnlySpan`1<double> value);
    [ExtensionAttribute]
public static void ProgramUniformMatrix4(GL thisApi, UInt32 program, int location, UInt32 count, bool transpose, ReadOnlySpan`1<float> value);
    [ExtensionAttribute]
public static void ProgramUniformMatrix4(GL thisApi, UInt32 program, int location, UInt32 count, Boolean transpose, ReadOnlySpan`1<float> value);
    [ExtensionAttribute]
public static void ProgramUniformMatrix4(GL thisApi, UInt32 program, int location, UInt32 count, bool transpose, ReadOnlySpan`1<double> value);
    [ExtensionAttribute]
public static void ProgramUniformMatrix4(GL thisApi, UInt32 program, int location, UInt32 count, Boolean transpose, ReadOnlySpan`1<double> value);
    [ExtensionAttribute]
public static void ProgramUniformMatrix4x2(GL thisApi, UInt32 program, int location, UInt32 count, bool transpose, ReadOnlySpan`1<float> value);
    [ExtensionAttribute]
public static void ProgramUniformMatrix4x2(GL thisApi, UInt32 program, int location, UInt32 count, Boolean transpose, ReadOnlySpan`1<float> value);
    [ExtensionAttribute]
public static void ProgramUniformMatrix4x2(GL thisApi, UInt32 program, int location, UInt32 count, bool transpose, ReadOnlySpan`1<double> value);
    [ExtensionAttribute]
public static void ProgramUniformMatrix4x2(GL thisApi, UInt32 program, int location, UInt32 count, Boolean transpose, ReadOnlySpan`1<double> value);
    [ExtensionAttribute]
public static void ProgramUniformMatrix4x3(GL thisApi, UInt32 program, int location, UInt32 count, bool transpose, ReadOnlySpan`1<float> value);
    [ExtensionAttribute]
public static void ProgramUniformMatrix4x3(GL thisApi, UInt32 program, int location, UInt32 count, Boolean transpose, ReadOnlySpan`1<float> value);
    [ExtensionAttribute]
public static void ProgramUniformMatrix4x3(GL thisApi, UInt32 program, int location, UInt32 count, bool transpose, ReadOnlySpan`1<double> value);
    [ExtensionAttribute]
public static void ProgramUniformMatrix4x3(GL thisApi, UInt32 program, int location, UInt32 count, Boolean transpose, ReadOnlySpan`1<double> value);
    [ExtensionAttribute]
public static void ScissorArray(GL thisApi, UInt32 first, UInt32 count, ReadOnlySpan`1<int> v);
    [ExtensionAttribute]
public static void ScissorIndexed(GL thisApi, UInt32 index, ReadOnlySpan`1<int> v);
    [ExtensionAttribute]
public static void ShaderBinary(GL thisApi, UInt32 count, UInt32* shaders, GLEnum binaryFormat, ReadOnlySpan`1<T0> binary, UInt32 length);
    [ExtensionAttribute]
public static void ShaderBinary(GL thisApi, UInt32 count, ReadOnlySpan`1<UInt32> shaders, GLEnum binaryFormat, Void* binary, UInt32 length);
    [ExtensionAttribute]
public static void ShaderBinary(GL thisApi, UInt32 count, ReadOnlySpan`1<UInt32> shaders, GLEnum binaryFormat, ReadOnlySpan`1<T0> binary, UInt32 length);
    [ExtensionAttribute]
public static void ShaderBinary(GL thisApi, UInt32 count, UInt32* shaders, ShaderBinaryFormat binaryFormat, ReadOnlySpan`1<T0> binary, UInt32 length);
    [ExtensionAttribute]
public static void ShaderBinary(GL thisApi, UInt32 count, ReadOnlySpan`1<UInt32> shaders, ShaderBinaryFormat binaryFormat, Void* binary, UInt32 length);
    [ExtensionAttribute]
public static void ShaderBinary(GL thisApi, UInt32 count, ReadOnlySpan`1<UInt32> shaders, ShaderBinaryFormat binaryFormat, ReadOnlySpan`1<T0> binary, UInt32 length);
    [ExtensionAttribute]
public static void ShaderBinary(GL thisApi, UInt32 count, Shader* shaders, GLEnum binaryFormat, ReadOnlySpan`1<T0> binary, UInt32 length);
    [ExtensionAttribute]
public static void ShaderBinary(GL thisApi, UInt32 count, ReadOnlySpan`1<Shader> shaders, GLEnum binaryFormat, Void* binary, UInt32 length);
    [ExtensionAttribute]
public static void ShaderBinary(GL thisApi, UInt32 count, ReadOnlySpan`1<Shader> shaders, GLEnum binaryFormat, ReadOnlySpan`1<T0> binary, UInt32 length);
    [ExtensionAttribute]
public static void ShaderBinary(GL thisApi, UInt32 count, Shader* shaders, ShaderBinaryFormat binaryFormat, ReadOnlySpan`1<T0> binary, UInt32 length);
    [ExtensionAttribute]
public static void ShaderBinary(GL thisApi, UInt32 count, ReadOnlySpan`1<Shader> shaders, ShaderBinaryFormat binaryFormat, Void* binary, UInt32 length);
    [ExtensionAttribute]
public static void ShaderBinary(GL thisApi, UInt32 count, ReadOnlySpan`1<Shader> shaders, ShaderBinaryFormat binaryFormat, ReadOnlySpan`1<T0> binary, UInt32 length);
    [ExtensionAttribute]
public static void VertexAttribL1(GL thisApi, UInt32 index, ReadOnlySpan`1<double> v);
    [ExtensionAttribute]
public static void VertexAttribL2(GL thisApi, UInt32 index, ReadOnlySpan`1<double> v);
    [ExtensionAttribute]
public static void VertexAttribL3(GL thisApi, UInt32 index, ReadOnlySpan`1<double> v);
    [ExtensionAttribute]
public static void VertexAttribL4(GL thisApi, UInt32 index, ReadOnlySpan`1<double> v);
    [ExtensionAttribute]
public static void ViewportArray(GL thisApi, UInt32 first, UInt32 count, ReadOnlySpan`1<float> v);
    [ExtensionAttribute]
public static void ViewportIndexed(GL thisApi, UInt32 index, ReadOnlySpan`1<float> v);
    [ExtensionAttribute]
public static void DeleteTransformFeedbacks(GL thisApi, UInt32 n, ReadOnlySpan`1<UInt32> ids);
    [ExtensionAttribute]
public static void DeleteTransformFeedbacks(GL thisApi, UInt32 n, ReadOnlySpan`1<TransformFeedback> ids);
    [ExtensionAttribute]
public static void DrawArraysIndirect(GL thisApi, GLEnum mode, ReadOnlySpan`1<T0> indirect);
    [ExtensionAttribute]
public static void DrawArraysIndirect(GL thisApi, PrimitiveType mode, ReadOnlySpan`1<T0> indirect);
    [ExtensionAttribute]
public static void DrawElementsIndirect(GL thisApi, GLEnum mode, GLEnum type, ReadOnlySpan`1<T0> indirect);
    [ExtensionAttribute]
public static void DrawElementsIndirect(GL thisApi, GLEnum mode, DrawElementsType type, ReadOnlySpan`1<T0> indirect);
    [ExtensionAttribute]
public static void DrawElementsIndirect(GL thisApi, PrimitiveType mode, GLEnum type, ReadOnlySpan`1<T0> indirect);
    [ExtensionAttribute]
public static void DrawElementsIndirect(GL thisApi, PrimitiveType mode, DrawElementsType type, ReadOnlySpan`1<T0> indirect);
    [ExtensionAttribute]
public static void GenTransformFeedbacks(GL thisApi, UInt32 n, Span`1<UInt32> ids);
    [ExtensionAttribute]
public static void GenTransformFeedbacks(GL thisApi, UInt32 n, Span`1<TransformFeedback> ids);
    [ExtensionAttribute]
public static void GetActiveSubroutineName(GL thisApi, UInt32 program, GLEnum shadertype, UInt32 index, UInt32 bufSize, UInt32* length, Span`1<byte> name);
    [ExtensionAttribute]
public static void GetActiveSubroutineName(GL thisApi, UInt32 program, GLEnum shadertype, UInt32 index, UInt32 bufSize, UInt32* length, Span`1<string> name);
    [ExtensionAttribute]
public static void GetActiveSubroutineName(GL thisApi, UInt32 program, GLEnum shadertype, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Byte* name);
    [ExtensionAttribute]
public static void GetActiveSubroutineName(GL thisApi, UInt32 program, GLEnum shadertype, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Span`1<byte> name);
    [ExtensionAttribute]
public static void GetActiveSubroutineName(GL thisApi, UInt32 program, GLEnum shadertype, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Span`1<string> name);
    [ExtensionAttribute]
public static void GetActiveSubroutineName(GL thisApi, UInt32 program, ShaderType shadertype, UInt32 index, UInt32 bufSize, UInt32* length, Span`1<byte> name);
    [ExtensionAttribute]
public static void GetActiveSubroutineName(GL thisApi, UInt32 program, ShaderType shadertype, UInt32 index, UInt32 bufSize, UInt32* length, Span`1<string> name);
    [ExtensionAttribute]
public static void GetActiveSubroutineName(GL thisApi, UInt32 program, ShaderType shadertype, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Byte* name);
    [ExtensionAttribute]
public static void GetActiveSubroutineName(GL thisApi, UInt32 program, ShaderType shadertype, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Span`1<byte> name);
    [ExtensionAttribute]
public static void GetActiveSubroutineName(GL thisApi, UInt32 program, ShaderType shadertype, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Span`1<string> name);
    [ExtensionAttribute]
public static void GetActiveSubroutineUniform(GL thisApi, UInt32 program, GLEnum shadertype, UInt32 index, GLEnum pname, Span`1<int> values);
    [ExtensionAttribute]
public static void GetActiveSubroutineUniform(GL thisApi, UInt32 program, GLEnum shadertype, UInt32 index, SubroutineParameterName pname, Span`1<int> values);
    [ExtensionAttribute]
public static void GetActiveSubroutineUniform(GL thisApi, UInt32 program, ShaderType shadertype, UInt32 index, GLEnum pname, Span`1<int> values);
    [ExtensionAttribute]
public static void GetActiveSubroutineUniform(GL thisApi, UInt32 program, ShaderType shadertype, UInt32 index, SubroutineParameterName pname, Span`1<int> values);
    [ExtensionAttribute]
public static void GetActiveSubroutineUniformName(GL thisApi, UInt32 program, GLEnum shadertype, UInt32 index, UInt32 bufSize, UInt32* length, Span`1<byte> name);
    [ExtensionAttribute]
public static void GetActiveSubroutineUniformName(GL thisApi, UInt32 program, GLEnum shadertype, UInt32 index, UInt32 bufSize, UInt32* length, Span`1<string> name);
    [ExtensionAttribute]
public static void GetActiveSubroutineUniformName(GL thisApi, UInt32 program, GLEnum shadertype, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Byte* name);
    [ExtensionAttribute]
public static void GetActiveSubroutineUniformName(GL thisApi, UInt32 program, GLEnum shadertype, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Span`1<byte> name);
    [ExtensionAttribute]
public static void GetActiveSubroutineUniformName(GL thisApi, UInt32 program, GLEnum shadertype, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Span`1<string> name);
    [ExtensionAttribute]
public static void GetActiveSubroutineUniformName(GL thisApi, UInt32 program, ShaderType shadertype, UInt32 index, UInt32 bufSize, UInt32* length, Span`1<byte> name);
    [ExtensionAttribute]
public static void GetActiveSubroutineUniformName(GL thisApi, UInt32 program, ShaderType shadertype, UInt32 index, UInt32 bufSize, UInt32* length, Span`1<string> name);
    [ExtensionAttribute]
public static void GetActiveSubroutineUniformName(GL thisApi, UInt32 program, ShaderType shadertype, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Byte* name);
    [ExtensionAttribute]
public static void GetActiveSubroutineUniformName(GL thisApi, UInt32 program, ShaderType shadertype, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Span`1<byte> name);
    [ExtensionAttribute]
public static void GetActiveSubroutineUniformName(GL thisApi, UInt32 program, ShaderType shadertype, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Span`1<string> name);
    [ExtensionAttribute]
public static void GetProgramStage(GL thisApi, UInt32 program, GLEnum shadertype, GLEnum pname, Span`1<int> values);
    [ExtensionAttribute]
public static void GetProgramStage(GL thisApi, UInt32 program, GLEnum shadertype, ProgramStagePName pname, Span`1<int> values);
    [ExtensionAttribute]
public static void GetProgramStage(GL thisApi, UInt32 program, ShaderType shadertype, GLEnum pname, Span`1<int> values);
    [ExtensionAttribute]
public static void GetProgramStage(GL thisApi, UInt32 program, ShaderType shadertype, ProgramStagePName pname, Span`1<int> values);
    [ExtensionAttribute]
public static void GetQueryIndexed(GL thisApi, GLEnum target, UInt32 index, GLEnum pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetQueryIndexed(GL thisApi, GLEnum target, UInt32 index, QueryParameterName pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetQueryIndexed(GL thisApi, QueryTarget target, UInt32 index, GLEnum pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetQueryIndexed(GL thisApi, QueryTarget target, UInt32 index, QueryParameterName pname, Span`1<int> params);
    [ExtensionAttribute]
public static UInt32 GetSubroutineIndex(GL thisApi, UInt32 program, GLEnum shadertype, ReadOnlySpan`1<byte> name);
    [ExtensionAttribute]
public static UInt32 GetSubroutineIndex(GL thisApi, UInt32 program, ShaderType shadertype, ReadOnlySpan`1<byte> name);
    [ExtensionAttribute]
public static int GetSubroutineUniformLocation(GL thisApi, UInt32 program, GLEnum shadertype, ReadOnlySpan`1<byte> name);
    [ExtensionAttribute]
public static int GetSubroutineUniformLocation(GL thisApi, UInt32 program, ShaderType shadertype, ReadOnlySpan`1<byte> name);
    [ExtensionAttribute]
public static void GetUniform(GL thisApi, UInt32 program, int location, Span`1<double> params);
    [ExtensionAttribute]
public static void GetUniformSubroutine(GL thisApi, GLEnum shadertype, int location, Span`1<UInt32> params);
    [ExtensionAttribute]
public static void GetUniformSubroutine(GL thisApi, ShaderType shadertype, int location, Span`1<UInt32> params);
    [ExtensionAttribute]
public static void PatchParameter(GL thisApi, GLEnum pname, ReadOnlySpan`1<float> values);
    [ExtensionAttribute]
public static void PatchParameter(GL thisApi, PatchParameterName pname, ReadOnlySpan`1<float> values);
    [ExtensionAttribute]
public static void Uniform1(GL thisApi, int location, UInt32 count, ReadOnlySpan`1<double> value);
    [ExtensionAttribute]
public static void Uniform2(GL thisApi, int location, UInt32 count, ReadOnlySpan`1<double> value);
    [ExtensionAttribute]
public static void Uniform3(GL thisApi, int location, UInt32 count, ReadOnlySpan`1<double> value);
    [ExtensionAttribute]
public static void Uniform4(GL thisApi, int location, UInt32 count, ReadOnlySpan`1<double> value);
    [ExtensionAttribute]
public static void UniformMatrix2(GL thisApi, int location, UInt32 count, bool transpose, ReadOnlySpan`1<double> value);
    [ExtensionAttribute]
public static void UniformMatrix2(GL thisApi, int location, UInt32 count, Boolean transpose, ReadOnlySpan`1<double> value);
    [ExtensionAttribute]
public static void UniformMatrix2x3(GL thisApi, int location, UInt32 count, bool transpose, ReadOnlySpan`1<double> value);
    [ExtensionAttribute]
public static void UniformMatrix2x3(GL thisApi, int location, UInt32 count, Boolean transpose, ReadOnlySpan`1<double> value);
    [ExtensionAttribute]
public static void UniformMatrix2x4(GL thisApi, int location, UInt32 count, bool transpose, ReadOnlySpan`1<double> value);
    [ExtensionAttribute]
public static void UniformMatrix2x4(GL thisApi, int location, UInt32 count, Boolean transpose, ReadOnlySpan`1<double> value);
    [ExtensionAttribute]
public static void UniformMatrix3(GL thisApi, int location, UInt32 count, bool transpose, ReadOnlySpan`1<double> value);
    [ExtensionAttribute]
public static void UniformMatrix3(GL thisApi, int location, UInt32 count, Boolean transpose, ReadOnlySpan`1<double> value);
    [ExtensionAttribute]
public static void UniformMatrix3x2(GL thisApi, int location, UInt32 count, bool transpose, ReadOnlySpan`1<double> value);
    [ExtensionAttribute]
public static void UniformMatrix3x2(GL thisApi, int location, UInt32 count, Boolean transpose, ReadOnlySpan`1<double> value);
    [ExtensionAttribute]
public static void UniformMatrix3x4(GL thisApi, int location, UInt32 count, bool transpose, ReadOnlySpan`1<double> value);
    [ExtensionAttribute]
public static void UniformMatrix3x4(GL thisApi, int location, UInt32 count, Boolean transpose, ReadOnlySpan`1<double> value);
    [ExtensionAttribute]
public static void UniformMatrix4(GL thisApi, int location, UInt32 count, bool transpose, ReadOnlySpan`1<double> value);
    [ExtensionAttribute]
public static void UniformMatrix4(GL thisApi, int location, UInt32 count, Boolean transpose, ReadOnlySpan`1<double> value);
    [ExtensionAttribute]
public static void UniformMatrix4x2(GL thisApi, int location, UInt32 count, bool transpose, ReadOnlySpan`1<double> value);
    [ExtensionAttribute]
public static void UniformMatrix4x2(GL thisApi, int location, UInt32 count, Boolean transpose, ReadOnlySpan`1<double> value);
    [ExtensionAttribute]
public static void UniformMatrix4x3(GL thisApi, int location, UInt32 count, bool transpose, ReadOnlySpan`1<double> value);
    [ExtensionAttribute]
public static void UniformMatrix4x3(GL thisApi, int location, UInt32 count, Boolean transpose, ReadOnlySpan`1<double> value);
    [ExtensionAttribute]
public static void UniformSubroutines(GL thisApi, GLEnum shadertype, UInt32 count, ReadOnlySpan`1<UInt32> indices);
    [ExtensionAttribute]
public static void UniformSubroutines(GL thisApi, ShaderType shadertype, UInt32 count, ReadOnlySpan`1<UInt32> indices);
    [ExtensionAttribute]
public static void BindFragDataLocationIndexed(GL thisApi, UInt32 program, UInt32 colorNumber, UInt32 index, ReadOnlySpan`1<byte> name);
    [ExtensionAttribute]
public static void ColorP3(GL thisApi, GLEnum type, ReadOnlySpan`1<UInt32> color);
    [ExtensionAttribute]
public static void ColorP3(GL thisApi, ColorPointerType type, ReadOnlySpan`1<UInt32> color);
    [ExtensionAttribute]
public static void ColorP4(GL thisApi, GLEnum type, ReadOnlySpan`1<UInt32> color);
    [ExtensionAttribute]
public static void ColorP4(GL thisApi, ColorPointerType type, ReadOnlySpan`1<UInt32> color);
    [ExtensionAttribute]
public static void DeleteSamplers(GL thisApi, UInt32 count, ReadOnlySpan`1<UInt32> samplers);
    [ExtensionAttribute]
public static void DeleteSamplers(GL thisApi, UInt32 count, ReadOnlySpan`1<Sampler> samplers);
    [ExtensionAttribute]
public static void GenSamplers(GL thisApi, UInt32 count, Span`1<UInt32> samplers);
    [ExtensionAttribute]
public static void GenSamplers(GL thisApi, UInt32 count, Span`1<Sampler> samplers);
    [ExtensionAttribute]
public static int GetFragDataIndex(GL thisApi, UInt32 program, ReadOnlySpan`1<byte> name);
    [ExtensionAttribute]
public static void GetQueryObject(GL thisApi, UInt32 id, GLEnum pname, Span`1<long> params);
    [ExtensionAttribute]
public static void GetQueryObject(GL thisApi, UInt32 id, QueryObjectParameterName pname, Span`1<long> params);
    [ExtensionAttribute]
public static void GetQueryObject(GL thisApi, UInt32 id, GLEnum pname, Span`1<ulong> params);
    [ExtensionAttribute]
public static void GetQueryObject(GL thisApi, UInt32 id, QueryObjectParameterName pname, Span`1<ulong> params);
    [ExtensionAttribute]
public static void GetSamplerParameter(GL thisApi, UInt32 sampler, GLEnum pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetSamplerParameter(GL thisApi, UInt32 sampler, SamplerParameterI pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetSamplerParameter(GL thisApi, UInt32 sampler, GLEnum pname, Span`1<float> params);
    [ExtensionAttribute]
public static void GetSamplerParameter(GL thisApi, UInt32 sampler, SamplerParameterF pname, Span`1<float> params);
    [ExtensionAttribute]
public static void GetSamplerParameterI(GL thisApi, UInt32 sampler, GLEnum pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetSamplerParameterI(GL thisApi, UInt32 sampler, SamplerParameterI pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetSamplerParameterI(GL thisApi, UInt32 sampler, GLEnum pname, Span`1<UInt32> params);
    [ExtensionAttribute]
public static void GetSamplerParameterI(GL thisApi, UInt32 sampler, SamplerParameterI pname, Span`1<UInt32> params);
    [ExtensionAttribute]
public static void MultiTexCoordP1(GL thisApi, GLEnum texture, GLEnum type, ReadOnlySpan`1<UInt32> coords);
    [ExtensionAttribute]
public static void MultiTexCoordP1(GL thisApi, GLEnum texture, TexCoordPointerType type, ReadOnlySpan`1<UInt32> coords);
    [ExtensionAttribute]
public static void MultiTexCoordP1(GL thisApi, TextureUnit texture, GLEnum type, ReadOnlySpan`1<UInt32> coords);
    [ExtensionAttribute]
public static void MultiTexCoordP1(GL thisApi, TextureUnit texture, TexCoordPointerType type, ReadOnlySpan`1<UInt32> coords);
    [ExtensionAttribute]
public static void MultiTexCoordP2(GL thisApi, GLEnum texture, GLEnum type, ReadOnlySpan`1<UInt32> coords);
    [ExtensionAttribute]
public static void MultiTexCoordP2(GL thisApi, GLEnum texture, TexCoordPointerType type, ReadOnlySpan`1<UInt32> coords);
    [ExtensionAttribute]
public static void MultiTexCoordP2(GL thisApi, TextureUnit texture, GLEnum type, ReadOnlySpan`1<UInt32> coords);
    [ExtensionAttribute]
public static void MultiTexCoordP2(GL thisApi, TextureUnit texture, TexCoordPointerType type, ReadOnlySpan`1<UInt32> coords);
    [ExtensionAttribute]
public static void MultiTexCoordP3(GL thisApi, GLEnum texture, GLEnum type, ReadOnlySpan`1<UInt32> coords);
    [ExtensionAttribute]
public static void MultiTexCoordP3(GL thisApi, GLEnum texture, TexCoordPointerType type, ReadOnlySpan`1<UInt32> coords);
    [ExtensionAttribute]
public static void MultiTexCoordP3(GL thisApi, TextureUnit texture, GLEnum type, ReadOnlySpan`1<UInt32> coords);
    [ExtensionAttribute]
public static void MultiTexCoordP3(GL thisApi, TextureUnit texture, TexCoordPointerType type, ReadOnlySpan`1<UInt32> coords);
    [ExtensionAttribute]
public static void MultiTexCoordP4(GL thisApi, GLEnum texture, GLEnum type, ReadOnlySpan`1<UInt32> coords);
    [ExtensionAttribute]
public static void MultiTexCoordP4(GL thisApi, GLEnum texture, TexCoordPointerType type, ReadOnlySpan`1<UInt32> coords);
    [ExtensionAttribute]
public static void MultiTexCoordP4(GL thisApi, TextureUnit texture, GLEnum type, ReadOnlySpan`1<UInt32> coords);
    [ExtensionAttribute]
public static void MultiTexCoordP4(GL thisApi, TextureUnit texture, TexCoordPointerType type, ReadOnlySpan`1<UInt32> coords);
    [ExtensionAttribute]
public static void NormalP3(GL thisApi, GLEnum type, ReadOnlySpan`1<UInt32> coords);
    [ExtensionAttribute]
public static void NormalP3(GL thisApi, NormalPointerType type, ReadOnlySpan`1<UInt32> coords);
    [ExtensionAttribute]
public static void SamplerParameter(GL thisApi, UInt32 sampler, GLEnum pname, ReadOnlySpan`1<int> param);
    [ExtensionAttribute]
public static void SamplerParameter(GL thisApi, UInt32 sampler, SamplerParameterI pname, ReadOnlySpan`1<int> param);
    [ExtensionAttribute]
public static void SamplerParameter(GL thisApi, UInt32 sampler, GLEnum pname, ReadOnlySpan`1<float> param);
    [ExtensionAttribute]
public static void SamplerParameter(GL thisApi, UInt32 sampler, SamplerParameterF pname, ReadOnlySpan`1<float> param);
    [ExtensionAttribute]
public static void SamplerParameterI(GL thisApi, UInt32 sampler, GLEnum pname, ReadOnlySpan`1<int> param);
    [ExtensionAttribute]
public static void SamplerParameterI(GL thisApi, UInt32 sampler, SamplerParameterI pname, ReadOnlySpan`1<int> param);
    [ExtensionAttribute]
public static void SamplerParameterI(GL thisApi, UInt32 sampler, GLEnum pname, ReadOnlySpan`1<UInt32> param);
    [ExtensionAttribute]
public static void SamplerParameterI(GL thisApi, UInt32 sampler, SamplerParameterI pname, ReadOnlySpan`1<UInt32> param);
    [ExtensionAttribute]
public static void SecondaryColorP3(GL thisApi, GLEnum type, ReadOnlySpan`1<UInt32> color);
    [ExtensionAttribute]
public static void SecondaryColorP3(GL thisApi, ColorPointerType type, ReadOnlySpan`1<UInt32> color);
    [ExtensionAttribute]
public static void TexCoordP1(GL thisApi, GLEnum type, ReadOnlySpan`1<UInt32> coords);
    [ExtensionAttribute]
public static void TexCoordP1(GL thisApi, TexCoordPointerType type, ReadOnlySpan`1<UInt32> coords);
    [ExtensionAttribute]
public static void TexCoordP2(GL thisApi, GLEnum type, ReadOnlySpan`1<UInt32> coords);
    [ExtensionAttribute]
public static void TexCoordP2(GL thisApi, TexCoordPointerType type, ReadOnlySpan`1<UInt32> coords);
    [ExtensionAttribute]
public static void TexCoordP3(GL thisApi, GLEnum type, ReadOnlySpan`1<UInt32> coords);
    [ExtensionAttribute]
public static void TexCoordP3(GL thisApi, TexCoordPointerType type, ReadOnlySpan`1<UInt32> coords);
    [ExtensionAttribute]
public static void TexCoordP4(GL thisApi, GLEnum type, ReadOnlySpan`1<UInt32> coords);
    [ExtensionAttribute]
public static void TexCoordP4(GL thisApi, TexCoordPointerType type, ReadOnlySpan`1<UInt32> coords);
    [ExtensionAttribute]
public static void VertexAttribP1(GL thisApi, UInt32 index, GLEnum type, bool normalized, ReadOnlySpan`1<UInt32> value);
    [ExtensionAttribute]
public static void VertexAttribP1(GL thisApi, UInt32 index, GLEnum type, Boolean normalized, ReadOnlySpan`1<UInt32> value);
    [ExtensionAttribute]
public static void VertexAttribP1(GL thisApi, UInt32 index, VertexAttribPointerType type, bool normalized, ReadOnlySpan`1<UInt32> value);
    [ExtensionAttribute]
public static void VertexAttribP1(GL thisApi, UInt32 index, VertexAttribPointerType type, Boolean normalized, ReadOnlySpan`1<UInt32> value);
    [ExtensionAttribute]
public static void VertexAttribP2(GL thisApi, UInt32 index, GLEnum type, bool normalized, ReadOnlySpan`1<UInt32> value);
    [ExtensionAttribute]
public static void VertexAttribP2(GL thisApi, UInt32 index, GLEnum type, Boolean normalized, ReadOnlySpan`1<UInt32> value);
    [ExtensionAttribute]
public static void VertexAttribP2(GL thisApi, UInt32 index, VertexAttribPointerType type, bool normalized, ReadOnlySpan`1<UInt32> value);
    [ExtensionAttribute]
public static void VertexAttribP2(GL thisApi, UInt32 index, VertexAttribPointerType type, Boolean normalized, ReadOnlySpan`1<UInt32> value);
    [ExtensionAttribute]
public static void VertexAttribP3(GL thisApi, UInt32 index, GLEnum type, bool normalized, ReadOnlySpan`1<UInt32> value);
    [ExtensionAttribute]
public static void VertexAttribP3(GL thisApi, UInt32 index, GLEnum type, Boolean normalized, ReadOnlySpan`1<UInt32> value);
    [ExtensionAttribute]
public static void VertexAttribP3(GL thisApi, UInt32 index, VertexAttribPointerType type, bool normalized, ReadOnlySpan`1<UInt32> value);
    [ExtensionAttribute]
public static void VertexAttribP3(GL thisApi, UInt32 index, VertexAttribPointerType type, Boolean normalized, ReadOnlySpan`1<UInt32> value);
    [ExtensionAttribute]
public static void VertexAttribP4(GL thisApi, UInt32 index, GLEnum type, bool normalized, ReadOnlySpan`1<UInt32> value);
    [ExtensionAttribute]
public static void VertexAttribP4(GL thisApi, UInt32 index, GLEnum type, Boolean normalized, ReadOnlySpan`1<UInt32> value);
    [ExtensionAttribute]
public static void VertexAttribP4(GL thisApi, UInt32 index, VertexAttribPointerType type, bool normalized, ReadOnlySpan`1<UInt32> value);
    [ExtensionAttribute]
public static void VertexAttribP4(GL thisApi, UInt32 index, VertexAttribPointerType type, Boolean normalized, ReadOnlySpan`1<UInt32> value);
    [ExtensionAttribute]
public static void VertexP2(GL thisApi, GLEnum type, ReadOnlySpan`1<UInt32> value);
    [ExtensionAttribute]
public static void VertexP2(GL thisApi, VertexPointerType type, ReadOnlySpan`1<UInt32> value);
    [ExtensionAttribute]
public static void VertexP3(GL thisApi, GLEnum type, ReadOnlySpan`1<UInt32> value);
    [ExtensionAttribute]
public static void VertexP3(GL thisApi, VertexPointerType type, ReadOnlySpan`1<UInt32> value);
    [ExtensionAttribute]
public static void VertexP4(GL thisApi, GLEnum type, ReadOnlySpan`1<UInt32> value);
    [ExtensionAttribute]
public static void VertexP4(GL thisApi, VertexPointerType type, ReadOnlySpan`1<UInt32> value);
    [ExtensionAttribute]
public static void DrawElementsBaseVertex(GL thisApi, GLEnum mode, UInt32 count, GLEnum type, ReadOnlySpan`1<T0> indices, int basevertex);
    [ExtensionAttribute]
public static void DrawElementsBaseVertex(GL thisApi, GLEnum mode, UInt32 count, DrawElementsType type, ReadOnlySpan`1<T0> indices, int basevertex);
    [ExtensionAttribute]
public static void DrawElementsBaseVertex(GL thisApi, PrimitiveType mode, UInt32 count, GLEnum type, ReadOnlySpan`1<T0> indices, int basevertex);
    [ExtensionAttribute]
public static void DrawElementsBaseVertex(GL thisApi, PrimitiveType mode, UInt32 count, DrawElementsType type, ReadOnlySpan`1<T0> indices, int basevertex);
    [ExtensionAttribute]
public static void DrawElementsInstancedBaseVertex(GL thisApi, GLEnum mode, UInt32 count, GLEnum type, ReadOnlySpan`1<T0> indices, UInt32 instancecount, int basevertex);
    [ExtensionAttribute]
public static void DrawElementsInstancedBaseVertex(GL thisApi, GLEnum mode, UInt32 count, DrawElementsType type, ReadOnlySpan`1<T0> indices, UInt32 instancecount, int basevertex);
    [ExtensionAttribute]
public static void DrawElementsInstancedBaseVertex(GL thisApi, PrimitiveType mode, UInt32 count, GLEnum type, ReadOnlySpan`1<T0> indices, UInt32 instancecount, int basevertex);
    [ExtensionAttribute]
public static void DrawElementsInstancedBaseVertex(GL thisApi, PrimitiveType mode, UInt32 count, DrawElementsType type, ReadOnlySpan`1<T0> indices, UInt32 instancecount, int basevertex);
    [ExtensionAttribute]
public static void DrawRangeElementsBaseVertex(GL thisApi, GLEnum mode, UInt32 start, UInt32 end, UInt32 count, GLEnum type, ReadOnlySpan`1<T0> indices, int basevertex);
    [ExtensionAttribute]
public static void DrawRangeElementsBaseVertex(GL thisApi, GLEnum mode, UInt32 start, UInt32 end, UInt32 count, DrawElementsType type, ReadOnlySpan`1<T0> indices, int basevertex);
    [ExtensionAttribute]
public static void DrawRangeElementsBaseVertex(GL thisApi, PrimitiveType mode, UInt32 start, UInt32 end, UInt32 count, GLEnum type, ReadOnlySpan`1<T0> indices, int basevertex);
    [ExtensionAttribute]
public static void DrawRangeElementsBaseVertex(GL thisApi, PrimitiveType mode, UInt32 start, UInt32 end, UInt32 count, DrawElementsType type, ReadOnlySpan`1<T0> indices, int basevertex);
    [ExtensionAttribute]
public static void GetBufferParameter(GL thisApi, GLEnum target, GLEnum pname, Span`1<long> params);
    [ExtensionAttribute]
public static void GetBufferParameter(GL thisApi, GLEnum target, BufferPNameARB pname, Span`1<long> params);
    [ExtensionAttribute]
public static void GetBufferParameter(GL thisApi, BufferTargetARB target, GLEnum pname, Span`1<long> params);
    [ExtensionAttribute]
public static void GetBufferParameter(GL thisApi, BufferTargetARB target, BufferPNameARB pname, Span`1<long> params);
    [ExtensionAttribute]
public static void GetInteger64(GL thisApi, GLEnum pname, Span`1<long> data);
    [ExtensionAttribute]
public static void GetInteger64(GL thisApi, GetPName pname, Span`1<long> data);
    [ExtensionAttribute]
public static void GetInteger64(GL thisApi, GLEnum target, UInt32 index, Span`1<long> data);
    [ExtensionAttribute]
public static void GetInteger64(GL thisApi, GetPName target, UInt32 index, Span`1<long> data);
    [ExtensionAttribute]
public static void GetMultisample(GL thisApi, GLEnum pname, UInt32 index, Span`1<float> val);
    [ExtensionAttribute]
public static void GetMultisample(GL thisApi, GetMultisamplePNameNV pname, UInt32 index, Span`1<float> val);
    [ExtensionAttribute]
public static void GetSync(GL thisApi, IntPtr sync, GLEnum pname, UInt32 count, UInt32* length, Span`1<int> values);
    [ExtensionAttribute]
public static void GetSync(GL thisApi, IntPtr sync, GLEnum pname, UInt32 count, Span`1<UInt32> length, Int32* values);
    [ExtensionAttribute]
public static void GetSync(GL thisApi, IntPtr sync, GLEnum pname, UInt32 count, Span`1<UInt32> length, Span`1<int> values);
    [ExtensionAttribute]
public static void GetSync(GL thisApi, IntPtr sync, SyncParameterName pname, UInt32 count, UInt32* length, Span`1<int> values);
    [ExtensionAttribute]
public static void GetSync(GL thisApi, IntPtr sync, SyncParameterName pname, UInt32 count, Span`1<UInt32> length, Int32* values);
    [ExtensionAttribute]
public static void GetSync(GL thisApi, IntPtr sync, SyncParameterName pname, UInt32 count, Span`1<UInt32> length, Span`1<int> values);
    [ExtensionAttribute]
public static void MultiDrawElementsBaseVertex(GL thisApi, GLEnum mode, UInt32* count, GLEnum type, Void** indices, UInt32 drawcount, ReadOnlySpan`1<int> basevertex);
    [ExtensionAttribute]
public static void MultiDrawElementsBaseVertex(GL thisApi, GLEnum mode, UInt32* count, GLEnum type, Void*& indices, UInt32 drawcount, ReadOnlySpan`1<int> basevertex);
    [ExtensionAttribute]
public static void MultiDrawElementsBaseVertex(GL thisApi, GLEnum mode, ReadOnlySpan`1<UInt32> count, GLEnum type, Void** indices, UInt32 drawcount, Int32* basevertex);
    [ExtensionAttribute]
public static void MultiDrawElementsBaseVertex(GL thisApi, GLEnum mode, ReadOnlySpan`1<UInt32> count, GLEnum type, Void** indices, UInt32 drawcount, ReadOnlySpan`1<int> basevertex);
    [ExtensionAttribute]
public static void MultiDrawElementsBaseVertex(GL thisApi, GLEnum mode, ReadOnlySpan`1<UInt32> count, GLEnum type, Void*& indices, UInt32 drawcount, Int32* basevertex);
    [ExtensionAttribute]
public static void MultiDrawElementsBaseVertex(GL thisApi, GLEnum mode, ReadOnlySpan`1<UInt32> count, GLEnum type, Void*& indices, UInt32 drawcount, ReadOnlySpan`1<int> basevertex);
    [ExtensionAttribute]
public static void MultiDrawElementsBaseVertex(GL thisApi, GLEnum mode, UInt32* count, DrawElementsType type, Void** indices, UInt32 drawcount, ReadOnlySpan`1<int> basevertex);
    [ExtensionAttribute]
public static void MultiDrawElementsBaseVertex(GL thisApi, GLEnum mode, UInt32* count, DrawElementsType type, Void*& indices, UInt32 drawcount, ReadOnlySpan`1<int> basevertex);
    [ExtensionAttribute]
public static void MultiDrawElementsBaseVertex(GL thisApi, GLEnum mode, ReadOnlySpan`1<UInt32> count, DrawElementsType type, Void** indices, UInt32 drawcount, Int32* basevertex);
    [ExtensionAttribute]
public static void MultiDrawElementsBaseVertex(GL thisApi, GLEnum mode, ReadOnlySpan`1<UInt32> count, DrawElementsType type, Void** indices, UInt32 drawcount, ReadOnlySpan`1<int> basevertex);
    [ExtensionAttribute]
public static void MultiDrawElementsBaseVertex(GL thisApi, GLEnum mode, ReadOnlySpan`1<UInt32> count, DrawElementsType type, Void*& indices, UInt32 drawcount, Int32* basevertex);
    [ExtensionAttribute]
public static void MultiDrawElementsBaseVertex(GL thisApi, GLEnum mode, ReadOnlySpan`1<UInt32> count, DrawElementsType type, Void*& indices, UInt32 drawcount, ReadOnlySpan`1<int> basevertex);
    [ExtensionAttribute]
public static void MultiDrawElementsBaseVertex(GL thisApi, PrimitiveType mode, UInt32* count, GLEnum type, Void** indices, UInt32 drawcount, ReadOnlySpan`1<int> basevertex);
    [ExtensionAttribute]
public static void MultiDrawElementsBaseVertex(GL thisApi, PrimitiveType mode, UInt32* count, GLEnum type, Void*& indices, UInt32 drawcount, ReadOnlySpan`1<int> basevertex);
    [ExtensionAttribute]
public static void MultiDrawElementsBaseVertex(GL thisApi, PrimitiveType mode, ReadOnlySpan`1<UInt32> count, GLEnum type, Void** indices, UInt32 drawcount, Int32* basevertex);
    [ExtensionAttribute]
public static void MultiDrawElementsBaseVertex(GL thisApi, PrimitiveType mode, ReadOnlySpan`1<UInt32> count, GLEnum type, Void** indices, UInt32 drawcount, ReadOnlySpan`1<int> basevertex);
    [ExtensionAttribute]
public static void MultiDrawElementsBaseVertex(GL thisApi, PrimitiveType mode, ReadOnlySpan`1<UInt32> count, GLEnum type, Void*& indices, UInt32 drawcount, Int32* basevertex);
    [ExtensionAttribute]
public static void MultiDrawElementsBaseVertex(GL thisApi, PrimitiveType mode, ReadOnlySpan`1<UInt32> count, GLEnum type, Void*& indices, UInt32 drawcount, ReadOnlySpan`1<int> basevertex);
    [ExtensionAttribute]
public static void MultiDrawElementsBaseVertex(GL thisApi, PrimitiveType mode, UInt32* count, DrawElementsType type, Void** indices, UInt32 drawcount, ReadOnlySpan`1<int> basevertex);
    [ExtensionAttribute]
public static void MultiDrawElementsBaseVertex(GL thisApi, PrimitiveType mode, UInt32* count, DrawElementsType type, Void*& indices, UInt32 drawcount, ReadOnlySpan`1<int> basevertex);
    [ExtensionAttribute]
public static void MultiDrawElementsBaseVertex(GL thisApi, PrimitiveType mode, ReadOnlySpan`1<UInt32> count, DrawElementsType type, Void** indices, UInt32 drawcount, Int32* basevertex);
    [ExtensionAttribute]
public static void MultiDrawElementsBaseVertex(GL thisApi, PrimitiveType mode, ReadOnlySpan`1<UInt32> count, DrawElementsType type, Void** indices, UInt32 drawcount, ReadOnlySpan`1<int> basevertex);
    [ExtensionAttribute]
public static void MultiDrawElementsBaseVertex(GL thisApi, PrimitiveType mode, ReadOnlySpan`1<UInt32> count, DrawElementsType type, Void*& indices, UInt32 drawcount, Int32* basevertex);
    [ExtensionAttribute]
public static void MultiDrawElementsBaseVertex(GL thisApi, PrimitiveType mode, ReadOnlySpan`1<UInt32> count, DrawElementsType type, Void*& indices, UInt32 drawcount, ReadOnlySpan`1<int> basevertex);
    [ExtensionAttribute]
public static void DrawElementsInstanced(GL thisApi, GLEnum mode, UInt32 count, GLEnum type, ReadOnlySpan`1<T0> indices, UInt32 instancecount);
    [ExtensionAttribute]
public static void DrawElementsInstanced(GL thisApi, GLEnum mode, UInt32 count, DrawElementsType type, ReadOnlySpan`1<T0> indices, UInt32 instancecount);
    [ExtensionAttribute]
public static void DrawElementsInstanced(GL thisApi, PrimitiveType mode, UInt32 count, GLEnum type, ReadOnlySpan`1<T0> indices, UInt32 instancecount);
    [ExtensionAttribute]
public static void DrawElementsInstanced(GL thisApi, PrimitiveType mode, UInt32 count, DrawElementsType type, ReadOnlySpan`1<T0> indices, UInt32 instancecount);
    [ExtensionAttribute]
public static void GetActiveUniformBlock(GL thisApi, UInt32 program, UInt32 uniformBlockIndex, GLEnum pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetActiveUniformBlock(GL thisApi, UInt32 program, UInt32 uniformBlockIndex, UniformBlockPName pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetActiveUniformBlockName(GL thisApi, UInt32 program, UInt32 uniformBlockIndex, UInt32 bufSize, UInt32* length, Span`1<byte> uniformBlockName);
    [ExtensionAttribute]
public static void GetActiveUniformBlockName(GL thisApi, UInt32 program, UInt32 uniformBlockIndex, UInt32 bufSize, UInt32* length, Span`1<string> uniformBlockName);
    [ExtensionAttribute]
public static void GetActiveUniformBlockName(GL thisApi, UInt32 program, UInt32 uniformBlockIndex, UInt32 bufSize, Span`1<UInt32> length, Byte* uniformBlockName);
    [ExtensionAttribute]
public static void GetActiveUniformBlockName(GL thisApi, UInt32 program, UInt32 uniformBlockIndex, UInt32 bufSize, Span`1<UInt32> length, Span`1<byte> uniformBlockName);
    [ExtensionAttribute]
public static void GetActiveUniformBlockName(GL thisApi, UInt32 program, UInt32 uniformBlockIndex, UInt32 bufSize, Span`1<UInt32> length, Span`1<string> uniformBlockName);
    [ExtensionAttribute]
public static void GetActiveUniformName(GL thisApi, UInt32 program, UInt32 uniformIndex, UInt32 bufSize, UInt32* length, Span`1<byte> uniformName);
    [ExtensionAttribute]
public static void GetActiveUniformName(GL thisApi, UInt32 program, UInt32 uniformIndex, UInt32 bufSize, UInt32* length, Span`1<string> uniformName);
    [ExtensionAttribute]
public static void GetActiveUniformName(GL thisApi, UInt32 program, UInt32 uniformIndex, UInt32 bufSize, Span`1<UInt32> length, Byte* uniformName);
    [ExtensionAttribute]
public static void GetActiveUniformName(GL thisApi, UInt32 program, UInt32 uniformIndex, UInt32 bufSize, Span`1<UInt32> length, Span`1<byte> uniformName);
    [ExtensionAttribute]
public static void GetActiveUniformName(GL thisApi, UInt32 program, UInt32 uniformIndex, UInt32 bufSize, Span`1<UInt32> length, Span`1<string> uniformName);
    [ExtensionAttribute]
public static void GetActiveUniforms(GL thisApi, UInt32 program, UInt32 uniformCount, UInt32* uniformIndices, GLEnum pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetActiveUniforms(GL thisApi, UInt32 program, UInt32 uniformCount, ReadOnlySpan`1<UInt32> uniformIndices, GLEnum pname, Int32* params);
    [ExtensionAttribute]
public static void GetActiveUniforms(GL thisApi, UInt32 program, UInt32 uniformCount, ReadOnlySpan`1<UInt32> uniformIndices, GLEnum pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetActiveUniforms(GL thisApi, UInt32 program, UInt32 uniformCount, UInt32* uniformIndices, UniformPName pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetActiveUniforms(GL thisApi, UInt32 program, UInt32 uniformCount, ReadOnlySpan`1<UInt32> uniformIndices, UniformPName pname, Int32* params);
    [ExtensionAttribute]
public static void GetActiveUniforms(GL thisApi, UInt32 program, UInt32 uniformCount, ReadOnlySpan`1<UInt32> uniformIndices, UniformPName pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetInteger(GL thisApi, GLEnum target, UInt32 index, Span`1<int> data);
    [ExtensionAttribute]
public static void GetInteger(GL thisApi, GetPName target, UInt32 index, Span`1<int> data);
    [ExtensionAttribute]
public static UInt32 GetUniformBlockIndex(GL thisApi, UInt32 program, ReadOnlySpan`1<byte> uniformBlockName);
    [ExtensionAttribute]
public static void GetUniformIndices(GL thisApi, UInt32 program, UInt32 uniformCount, Byte** uniformNames, Span`1<UInt32> uniformIndices);
    [ExtensionAttribute]
public static void GetUniformIndices(GL thisApi, UInt32 program, UInt32 uniformCount, Byte*& uniformNames, Span`1<UInt32> uniformIndices);
    [ExtensionAttribute]
public static void BindFragDataLocation(GL thisApi, UInt32 program, UInt32 color, ReadOnlySpan`1<byte> name);
    [ExtensionAttribute]
public static void ClearBuffer(GL thisApi, GLEnum buffer, int drawbuffer, ReadOnlySpan`1<int> value);
    [ExtensionAttribute]
public static void ClearBuffer(GL thisApi, BufferKind buffer, int drawbuffer, ReadOnlySpan`1<int> value);
    [ExtensionAttribute]
public static void ClearBuffer(GL thisApi, GLEnum buffer, int drawbuffer, ReadOnlySpan`1<UInt32> value);
    [ExtensionAttribute]
public static void ClearBuffer(GL thisApi, BufferKind buffer, int drawbuffer, ReadOnlySpan`1<UInt32> value);
    [ExtensionAttribute]
public static void ClearBuffer(GL thisApi, GLEnum buffer, int drawbuffer, ReadOnlySpan`1<float> value);
    [ExtensionAttribute]
public static void ClearBuffer(GL thisApi, BufferKind buffer, int drawbuffer, ReadOnlySpan`1<float> value);
    [ExtensionAttribute]
public static void DeleteFramebuffers(GL thisApi, UInt32 n, ReadOnlySpan`1<UInt32> framebuffers);
    [ExtensionAttribute]
public static void DeleteFramebuffers(GL thisApi, UInt32 n, ReadOnlySpan`1<Framebuffer> framebuffers);
    [ExtensionAttribute]
public static void DeleteRenderbuffers(GL thisApi, UInt32 n, ReadOnlySpan`1<UInt32> renderbuffers);
    [ExtensionAttribute]
public static void DeleteRenderbuffers(GL thisApi, UInt32 n, ReadOnlySpan`1<Renderbuffer> renderbuffers);
    [ExtensionAttribute]
public static void DeleteVertexArrays(GL thisApi, UInt32 n, ReadOnlySpan`1<UInt32> arrays);
    [ExtensionAttribute]
public static void DeleteVertexArrays(GL thisApi, UInt32 n, ReadOnlySpan`1<VertexArray> arrays);
    [ExtensionAttribute]
public static void GenFramebuffers(GL thisApi, UInt32 n, Span`1<UInt32> framebuffers);
    [ExtensionAttribute]
public static void GenFramebuffers(GL thisApi, UInt32 n, Span`1<Framebuffer> framebuffers);
    [ExtensionAttribute]
public static void GenRenderbuffers(GL thisApi, UInt32 n, Span`1<UInt32> renderbuffers);
    [ExtensionAttribute]
public static void GenRenderbuffers(GL thisApi, UInt32 n, Span`1<Renderbuffer> renderbuffers);
    [ExtensionAttribute]
public static void GenVertexArrays(GL thisApi, UInt32 n, Span`1<UInt32> arrays);
    [ExtensionAttribute]
public static void GenVertexArrays(GL thisApi, UInt32 n, Span`1<VertexArray> arrays);
    [ExtensionAttribute]
public static void GetBoolean(GL thisApi, GLEnum target, UInt32 index, Span`1<bool> data);
    [ExtensionAttribute]
public static void GetBoolean(GL thisApi, GLEnum target, UInt32 index, Span`1<Boolean> data);
    [ExtensionAttribute]
public static void GetBoolean(GL thisApi, BufferTargetARB target, UInt32 index, Span`1<bool> data);
    [ExtensionAttribute]
public static void GetBoolean(GL thisApi, BufferTargetARB target, UInt32 index, Span`1<Boolean> data);
    [ExtensionAttribute]
public static int GetFragDataLocation(GL thisApi, UInt32 program, ReadOnlySpan`1<byte> name);
    [ExtensionAttribute]
public static void GetFramebufferAttachmentParameter(GL thisApi, GLEnum target, GLEnum attachment, GLEnum pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetFramebufferAttachmentParameter(GL thisApi, GLEnum target, GLEnum attachment, FramebufferAttachmentParameterName pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetFramebufferAttachmentParameter(GL thisApi, GLEnum target, FramebufferAttachment attachment, GLEnum pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetFramebufferAttachmentParameter(GL thisApi, GLEnum target, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetFramebufferAttachmentParameter(GL thisApi, FramebufferTarget target, GLEnum attachment, GLEnum pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetFramebufferAttachmentParameter(GL thisApi, FramebufferTarget target, GLEnum attachment, FramebufferAttachmentParameterName pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetFramebufferAttachmentParameter(GL thisApi, FramebufferTarget target, FramebufferAttachment attachment, GLEnum pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetFramebufferAttachmentParameter(GL thisApi, FramebufferTarget target, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetRenderbufferParameter(GL thisApi, GLEnum target, GLEnum pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetRenderbufferParameter(GL thisApi, GLEnum target, RenderbufferParameterName pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetRenderbufferParameter(GL thisApi, RenderbufferTarget target, GLEnum pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetRenderbufferParameter(GL thisApi, RenderbufferTarget target, RenderbufferParameterName pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetTexParameterI(GL thisApi, GLEnum target, GLEnum pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetTexParameterI(GL thisApi, GLEnum target, GetTextureParameter pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetTexParameterI(GL thisApi, TextureTarget target, GLEnum pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetTexParameterI(GL thisApi, TextureTarget target, GetTextureParameter pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetTexParameterI(GL thisApi, GLEnum target, GLEnum pname, Span`1<UInt32> params);
    [ExtensionAttribute]
public static void GetTexParameterI(GL thisApi, GLEnum target, GetTextureParameter pname, Span`1<UInt32> params);
    [ExtensionAttribute]
public static void GetTexParameterI(GL thisApi, TextureTarget target, GLEnum pname, Span`1<UInt32> params);
    [ExtensionAttribute]
public static void GetTexParameterI(GL thisApi, TextureTarget target, GetTextureParameter pname, Span`1<UInt32> params);
    [ExtensionAttribute]
public static void GetTransformFeedbackVarying(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, UInt32* size, GLEnum* type, Span`1<byte> name);
    [ExtensionAttribute]
public static void GetTransformFeedbackVarying(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, UInt32* size, GLEnum* type, Span`1<string> name);
    [ExtensionAttribute]
public static void GetTransformFeedbackVarying(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, UInt32* size, Span`1<GLEnum> type, Byte* name);
    [ExtensionAttribute]
public static void GetTransformFeedbackVarying(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, UInt32* size, Span`1<GLEnum> type, Span`1<byte> name);
    [ExtensionAttribute]
public static void GetTransformFeedbackVarying(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, UInt32* size, Span`1<GLEnum> type, Span`1<string> name);
    [ExtensionAttribute]
public static void GetTransformFeedbackVarying(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Span`1<UInt32> size, GLEnum* type, Byte* name);
    [ExtensionAttribute]
public static void GetTransformFeedbackVarying(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Span`1<UInt32> size, GLEnum* type, Span`1<byte> name);
    [ExtensionAttribute]
public static void GetTransformFeedbackVarying(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Span`1<UInt32> size, GLEnum* type, Span`1<string> name);
    [ExtensionAttribute]
public static void GetTransformFeedbackVarying(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Span`1<UInt32> size, Span`1<GLEnum> type, Byte* name);
    [ExtensionAttribute]
public static void GetTransformFeedbackVarying(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Span`1<UInt32> size, Span`1<GLEnum> type, Span`1<byte> name);
    [ExtensionAttribute]
public static void GetTransformFeedbackVarying(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Span`1<UInt32> size, Span`1<GLEnum> type, Span`1<string> name);
    [ExtensionAttribute]
public static void GetTransformFeedbackVarying(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, UInt32* size, GLEnum* type, Byte* name);
    [ExtensionAttribute]
public static void GetTransformFeedbackVarying(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, UInt32* size, GLEnum* type, Span`1<byte> name);
    [ExtensionAttribute]
public static void GetTransformFeedbackVarying(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, UInt32* size, GLEnum* type, Span`1<string> name);
    [ExtensionAttribute]
public static void GetTransformFeedbackVarying(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, UInt32* size, Span`1<GLEnum> type, Byte* name);
    [ExtensionAttribute]
public static void GetTransformFeedbackVarying(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, UInt32* size, Span`1<GLEnum> type, Span`1<byte> name);
    [ExtensionAttribute]
public static void GetTransformFeedbackVarying(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, UInt32* size, Span`1<GLEnum> type, Span`1<string> name);
    [ExtensionAttribute]
public static void GetTransformFeedbackVarying(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Span`1<UInt32> size, GLEnum* type, Byte* name);
    [ExtensionAttribute]
public static void GetTransformFeedbackVarying(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Span`1<UInt32> size, GLEnum* type, Span`1<byte> name);
    [ExtensionAttribute]
public static void GetTransformFeedbackVarying(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Span`1<UInt32> size, GLEnum* type, Span`1<string> name);
    [ExtensionAttribute]
public static void GetTransformFeedbackVarying(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Span`1<UInt32> size, Span`1<GLEnum> type, Byte* name);
    [ExtensionAttribute]
public static void GetTransformFeedbackVarying(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Span`1<UInt32> size, Span`1<GLEnum> type, Span`1<byte> name);
    [ExtensionAttribute]
public static void GetTransformFeedbackVarying(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Span`1<UInt32> size, Span`1<GLEnum> type, Span`1<string> name);
    [ExtensionAttribute]
public static void GetTransformFeedbackVarying(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, UInt32* size, AttributeType* type, Span`1<byte> name);
    [ExtensionAttribute]
public static void GetTransformFeedbackVarying(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, UInt32* size, AttributeType* type, Span`1<string> name);
    [ExtensionAttribute]
public static void GetTransformFeedbackVarying(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, UInt32* size, Span`1<AttributeType> type, Byte* name);
    [ExtensionAttribute]
public static void GetTransformFeedbackVarying(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, UInt32* size, Span`1<AttributeType> type, Span`1<byte> name);
    [ExtensionAttribute]
public static void GetTransformFeedbackVarying(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, UInt32* size, Span`1<AttributeType> type, Span`1<string> name);
    [ExtensionAttribute]
public static void GetTransformFeedbackVarying(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Span`1<UInt32> size, AttributeType* type, Byte* name);
    [ExtensionAttribute]
public static void GetTransformFeedbackVarying(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Span`1<UInt32> size, AttributeType* type, Span`1<byte> name);
    [ExtensionAttribute]
public static void GetTransformFeedbackVarying(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Span`1<UInt32> size, AttributeType* type, Span`1<string> name);
    [ExtensionAttribute]
public static void GetTransformFeedbackVarying(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Span`1<UInt32> size, Span`1<AttributeType> type, Byte* name);
    [ExtensionAttribute]
public static void GetTransformFeedbackVarying(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Span`1<UInt32> size, Span`1<AttributeType> type, Span`1<byte> name);
    [ExtensionAttribute]
public static void GetTransformFeedbackVarying(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Span`1<UInt32> size, Span`1<AttributeType> type, Span`1<string> name);
    [ExtensionAttribute]
public static void GetTransformFeedbackVarying(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, UInt32* size, AttributeType* type, Byte* name);
    [ExtensionAttribute]
public static void GetTransformFeedbackVarying(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, UInt32* size, AttributeType* type, Span`1<byte> name);
    [ExtensionAttribute]
public static void GetTransformFeedbackVarying(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, UInt32* size, AttributeType* type, Span`1<string> name);
    [ExtensionAttribute]
public static void GetTransformFeedbackVarying(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, UInt32* size, Span`1<AttributeType> type, Byte* name);
    [ExtensionAttribute]
public static void GetTransformFeedbackVarying(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, UInt32* size, Span`1<AttributeType> type, Span`1<byte> name);
    [ExtensionAttribute]
public static void GetTransformFeedbackVarying(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, UInt32* size, Span`1<AttributeType> type, Span`1<string> name);
    [ExtensionAttribute]
public static void GetTransformFeedbackVarying(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Span`1<UInt32> size, AttributeType* type, Byte* name);
    [ExtensionAttribute]
public static void GetTransformFeedbackVarying(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Span`1<UInt32> size, AttributeType* type, Span`1<byte> name);
    [ExtensionAttribute]
public static void GetTransformFeedbackVarying(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Span`1<UInt32> size, AttributeType* type, Span`1<string> name);
    [ExtensionAttribute]
public static void GetTransformFeedbackVarying(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Span`1<UInt32> size, Span`1<AttributeType> type, Byte* name);
    [ExtensionAttribute]
public static void GetTransformFeedbackVarying(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Span`1<UInt32> size, Span`1<AttributeType> type, Span`1<byte> name);
    [ExtensionAttribute]
public static void GetTransformFeedbackVarying(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Span`1<UInt32> size, Span`1<AttributeType> type, Span`1<string> name);
    [ExtensionAttribute]
public static void GetUniform(GL thisApi, UInt32 program, int location, Span`1<UInt32> params);
    [ExtensionAttribute]
public static void GetVertexAttribI(GL thisApi, UInt32 index, GLEnum pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetVertexAttribI(GL thisApi, UInt32 index, VertexAttribEnum pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetVertexAttribI(GL thisApi, UInt32 index, GLEnum pname, Span`1<UInt32> params);
    [ExtensionAttribute]
public static void GetVertexAttribI(GL thisApi, UInt32 index, VertexAttribEnum pname, Span`1<UInt32> params);
    [ExtensionAttribute]
public static void TexParameterI(GL thisApi, GLEnum target, GLEnum pname, ReadOnlySpan`1<int> params);
    [ExtensionAttribute]
public static void TexParameterI(GL thisApi, GLEnum target, TextureParameterName pname, ReadOnlySpan`1<int> params);
    [ExtensionAttribute]
public static void TexParameterI(GL thisApi, TextureTarget target, GLEnum pname, ReadOnlySpan`1<int> params);
    [ExtensionAttribute]
public static void TexParameterI(GL thisApi, TextureTarget target, TextureParameterName pname, ReadOnlySpan`1<int> params);
    [ExtensionAttribute]
public static void TexParameterI(GL thisApi, GLEnum target, GLEnum pname, ReadOnlySpan`1<UInt32> params);
    [ExtensionAttribute]
public static void TexParameterI(GL thisApi, GLEnum target, TextureParameterName pname, ReadOnlySpan`1<UInt32> params);
    [ExtensionAttribute]
public static void TexParameterI(GL thisApi, TextureTarget target, GLEnum pname, ReadOnlySpan`1<UInt32> params);
    [ExtensionAttribute]
public static void TexParameterI(GL thisApi, TextureTarget target, TextureParameterName pname, ReadOnlySpan`1<UInt32> params);
    [ExtensionAttribute]
public static void Uniform1(GL thisApi, int location, UInt32 count, ReadOnlySpan`1<UInt32> value);
    [ExtensionAttribute]
public static void Uniform2(GL thisApi, int location, UInt32 count, ReadOnlySpan`1<UInt32> value);
    [ExtensionAttribute]
public static void Uniform3(GL thisApi, int location, UInt32 count, ReadOnlySpan`1<UInt32> value);
    [ExtensionAttribute]
public static void Uniform4(GL thisApi, int location, UInt32 count, ReadOnlySpan`1<UInt32> value);
    [ExtensionAttribute]
public static void VertexAttribI1(GL thisApi, UInt32 index, ReadOnlySpan`1<int> v);
    [ExtensionAttribute]
public static void VertexAttribI1(GL thisApi, UInt32 index, ReadOnlySpan`1<UInt32> v);
    [ExtensionAttribute]
public static void VertexAttribI2(GL thisApi, UInt32 index, ReadOnlySpan`1<int> v);
    [ExtensionAttribute]
public static void VertexAttribI2(GL thisApi, UInt32 index, ReadOnlySpan`1<UInt32> v);
    [ExtensionAttribute]
public static void VertexAttribI3(GL thisApi, UInt32 index, ReadOnlySpan`1<int> v);
    [ExtensionAttribute]
public static void VertexAttribI3(GL thisApi, UInt32 index, ReadOnlySpan`1<UInt32> v);
    [ExtensionAttribute]
public static void VertexAttribI4(GL thisApi, UInt32 index, ReadOnlySpan`1<int> v);
    [ExtensionAttribute]
public static void VertexAttribI4(GL thisApi, UInt32 index, ReadOnlySpan`1<UInt32> v);
    [ExtensionAttribute]
public static void VertexAttribI4(GL thisApi, UInt32 index, ReadOnlySpan`1<sbyte> v);
    [ExtensionAttribute]
public static void VertexAttribI4(GL thisApi, UInt32 index, ReadOnlySpan`1<short> v);
    [ExtensionAttribute]
public static void VertexAttribI4(GL thisApi, UInt32 index, ReadOnlySpan`1<byte> v);
    [ExtensionAttribute]
public static void VertexAttribI4(GL thisApi, UInt32 index, ReadOnlySpan`1<ushort> v);
    [ExtensionAttribute]
public static void UniformMatrix2x3(GL thisApi, int location, UInt32 count, bool transpose, ReadOnlySpan`1<float> value);
    [ExtensionAttribute]
public static void UniformMatrix2x3(GL thisApi, int location, UInt32 count, Boolean transpose, ReadOnlySpan`1<float> value);
    [ExtensionAttribute]
public static void UniformMatrix2x4(GL thisApi, int location, UInt32 count, bool transpose, ReadOnlySpan`1<float> value);
    [ExtensionAttribute]
public static void UniformMatrix2x4(GL thisApi, int location, UInt32 count, Boolean transpose, ReadOnlySpan`1<float> value);
    [ExtensionAttribute]
public static void UniformMatrix3x2(GL thisApi, int location, UInt32 count, bool transpose, ReadOnlySpan`1<float> value);
    [ExtensionAttribute]
public static void UniformMatrix3x2(GL thisApi, int location, UInt32 count, Boolean transpose, ReadOnlySpan`1<float> value);
    [ExtensionAttribute]
public static void UniformMatrix3x4(GL thisApi, int location, UInt32 count, bool transpose, ReadOnlySpan`1<float> value);
    [ExtensionAttribute]
public static void UniformMatrix3x4(GL thisApi, int location, UInt32 count, Boolean transpose, ReadOnlySpan`1<float> value);
    [ExtensionAttribute]
public static void UniformMatrix4x2(GL thisApi, int location, UInt32 count, bool transpose, ReadOnlySpan`1<float> value);
    [ExtensionAttribute]
public static void UniformMatrix4x2(GL thisApi, int location, UInt32 count, Boolean transpose, ReadOnlySpan`1<float> value);
    [ExtensionAttribute]
public static void UniformMatrix4x3(GL thisApi, int location, UInt32 count, bool transpose, ReadOnlySpan`1<float> value);
    [ExtensionAttribute]
public static void UniformMatrix4x3(GL thisApi, int location, UInt32 count, Boolean transpose, ReadOnlySpan`1<float> value);
    [ExtensionAttribute]
public static void BindAttribLocation(GL thisApi, UInt32 program, UInt32 index, ReadOnlySpan`1<byte> name);
    [ExtensionAttribute]
public static void DrawBuffers(GL thisApi, UInt32 n, ReadOnlySpan`1<GLEnum> bufs);
    [ExtensionAttribute]
public static void DrawBuffers(GL thisApi, UInt32 n, ReadOnlySpan`1<DrawBufferMode> bufs);
    [ExtensionAttribute]
public static void GetActiveAttrib(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Int32* size, GLEnum* type, Span`1<byte> name);
    [ExtensionAttribute]
public static void GetActiveAttrib(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Int32* size, GLEnum* type, Span`1<string> name);
    [ExtensionAttribute]
public static void GetActiveAttrib(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Int32* size, Span`1<GLEnum> type, Byte* name);
    [ExtensionAttribute]
public static void GetActiveAttrib(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Int32* size, Span`1<GLEnum> type, Span`1<byte> name);
    [ExtensionAttribute]
public static void GetActiveAttrib(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Int32* size, Span`1<GLEnum> type, Span`1<string> name);
    [ExtensionAttribute]
public static void GetActiveAttrib(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Span`1<int> size, GLEnum* type, Byte* name);
    [ExtensionAttribute]
public static void GetActiveAttrib(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Span`1<int> size, GLEnum* type, Span`1<byte> name);
    [ExtensionAttribute]
public static void GetActiveAttrib(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Span`1<int> size, GLEnum* type, Span`1<string> name);
    [ExtensionAttribute]
public static void GetActiveAttrib(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Span`1<int> size, Span`1<GLEnum> type, Byte* name);
    [ExtensionAttribute]
public static void GetActiveAttrib(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Span`1<int> size, Span`1<GLEnum> type, Span`1<byte> name);
    [ExtensionAttribute]
public static void GetActiveAttrib(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Span`1<int> size, Span`1<GLEnum> type, Span`1<string> name);
    [ExtensionAttribute]
public static void GetActiveAttrib(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Int32* size, GLEnum* type, Byte* name);
    [ExtensionAttribute]
public static void GetActiveAttrib(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Int32* size, GLEnum* type, Span`1<byte> name);
    [ExtensionAttribute]
public static void GetActiveAttrib(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Int32* size, GLEnum* type, Span`1<string> name);
    [ExtensionAttribute]
public static void GetActiveAttrib(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Int32* size, Span`1<GLEnum> type, Byte* name);
    [ExtensionAttribute]
public static void GetActiveAttrib(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Int32* size, Span`1<GLEnum> type, Span`1<byte> name);
    [ExtensionAttribute]
public static void GetActiveAttrib(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Int32* size, Span`1<GLEnum> type, Span`1<string> name);
    [ExtensionAttribute]
public static void GetActiveAttrib(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Span`1<int> size, GLEnum* type, Byte* name);
    [ExtensionAttribute]
public static void GetActiveAttrib(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Span`1<int> size, GLEnum* type, Span`1<byte> name);
    [ExtensionAttribute]
public static void GetActiveAttrib(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Span`1<int> size, GLEnum* type, Span`1<string> name);
    [ExtensionAttribute]
public static void GetActiveAttrib(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Span`1<int> size, Span`1<GLEnum> type, Byte* name);
    [ExtensionAttribute]
public static void GetActiveAttrib(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Span`1<int> size, Span`1<GLEnum> type, Span`1<byte> name);
    [ExtensionAttribute]
public static void GetActiveAttrib(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Span`1<int> size, Span`1<GLEnum> type, Span`1<string> name);
    [ExtensionAttribute]
public static void GetActiveAttrib(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Int32* size, AttributeType* type, Span`1<byte> name);
    [ExtensionAttribute]
public static void GetActiveAttrib(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Int32* size, AttributeType* type, Span`1<string> name);
    [ExtensionAttribute]
public static void GetActiveAttrib(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Int32* size, Span`1<AttributeType> type, Byte* name);
    [ExtensionAttribute]
public static void GetActiveAttrib(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Int32* size, Span`1<AttributeType> type, Span`1<byte> name);
    [ExtensionAttribute]
public static void GetActiveAttrib(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Int32* size, Span`1<AttributeType> type, Span`1<string> name);
    [ExtensionAttribute]
public static void GetActiveAttrib(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Span`1<int> size, AttributeType* type, Byte* name);
    [ExtensionAttribute]
public static void GetActiveAttrib(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Span`1<int> size, AttributeType* type, Span`1<byte> name);
    [ExtensionAttribute]
public static void GetActiveAttrib(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Span`1<int> size, AttributeType* type, Span`1<string> name);
    [ExtensionAttribute]
public static void GetActiveAttrib(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Span`1<int> size, Span`1<AttributeType> type, Byte* name);
    [ExtensionAttribute]
public static void GetActiveAttrib(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Span`1<int> size, Span`1<AttributeType> type, Span`1<byte> name);
    [ExtensionAttribute]
public static void GetActiveAttrib(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Span`1<int> size, Span`1<AttributeType> type, Span`1<string> name);
    [ExtensionAttribute]
public static void GetActiveAttrib(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Int32* size, AttributeType* type, Byte* name);
    [ExtensionAttribute]
public static void GetActiveAttrib(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Int32* size, AttributeType* type, Span`1<byte> name);
    [ExtensionAttribute]
public static void GetActiveAttrib(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Int32* size, AttributeType* type, Span`1<string> name);
    [ExtensionAttribute]
public static void GetActiveAttrib(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Int32* size, Span`1<AttributeType> type, Byte* name);
    [ExtensionAttribute]
public static void GetActiveAttrib(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Int32* size, Span`1<AttributeType> type, Span`1<byte> name);
    [ExtensionAttribute]
public static void GetActiveAttrib(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Int32* size, Span`1<AttributeType> type, Span`1<string> name);
    [ExtensionAttribute]
public static void GetActiveAttrib(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Span`1<int> size, AttributeType* type, Byte* name);
    [ExtensionAttribute]
public static void GetActiveAttrib(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Span`1<int> size, AttributeType* type, Span`1<byte> name);
    [ExtensionAttribute]
public static void GetActiveAttrib(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Span`1<int> size, AttributeType* type, Span`1<string> name);
    [ExtensionAttribute]
public static void GetActiveAttrib(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Span`1<int> size, Span`1<AttributeType> type, Byte* name);
    [ExtensionAttribute]
public static void GetActiveAttrib(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Span`1<int> size, Span`1<AttributeType> type, Span`1<byte> name);
    [ExtensionAttribute]
public static void GetActiveAttrib(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Span`1<int> size, Span`1<AttributeType> type, Span`1<string> name);
    [ExtensionAttribute]
public static void GetActiveUniform(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Int32* size, GLEnum* type, Span`1<byte> name);
    [ExtensionAttribute]
public static void GetActiveUniform(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Int32* size, GLEnum* type, Span`1<string> name);
    [ExtensionAttribute]
public static void GetActiveUniform(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Int32* size, Span`1<GLEnum> type, Byte* name);
    [ExtensionAttribute]
public static void GetActiveUniform(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Int32* size, Span`1<GLEnum> type, Span`1<byte> name);
    [ExtensionAttribute]
public static void GetActiveUniform(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Int32* size, Span`1<GLEnum> type, Span`1<string> name);
    [ExtensionAttribute]
public static void GetActiveUniform(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Span`1<int> size, GLEnum* type, Byte* name);
    [ExtensionAttribute]
public static void GetActiveUniform(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Span`1<int> size, GLEnum* type, Span`1<byte> name);
    [ExtensionAttribute]
public static void GetActiveUniform(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Span`1<int> size, GLEnum* type, Span`1<string> name);
    [ExtensionAttribute]
public static void GetActiveUniform(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Span`1<int> size, Span`1<GLEnum> type, Byte* name);
    [ExtensionAttribute]
public static void GetActiveUniform(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Span`1<int> size, Span`1<GLEnum> type, Span`1<byte> name);
    [ExtensionAttribute]
public static void GetActiveUniform(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Span`1<int> size, Span`1<GLEnum> type, Span`1<string> name);
    [ExtensionAttribute]
public static void GetActiveUniform(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Int32* size, GLEnum* type, Byte* name);
    [ExtensionAttribute]
public static void GetActiveUniform(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Int32* size, GLEnum* type, Span`1<byte> name);
    [ExtensionAttribute]
public static void GetActiveUniform(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Int32* size, GLEnum* type, Span`1<string> name);
    [ExtensionAttribute]
public static void GetActiveUniform(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Int32* size, Span`1<GLEnum> type, Byte* name);
    [ExtensionAttribute]
public static void GetActiveUniform(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Int32* size, Span`1<GLEnum> type, Span`1<byte> name);
    [ExtensionAttribute]
public static void GetActiveUniform(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Int32* size, Span`1<GLEnum> type, Span`1<string> name);
    [ExtensionAttribute]
public static void GetActiveUniform(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Span`1<int> size, GLEnum* type, Byte* name);
    [ExtensionAttribute]
public static void GetActiveUniform(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Span`1<int> size, GLEnum* type, Span`1<byte> name);
    [ExtensionAttribute]
public static void GetActiveUniform(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Span`1<int> size, GLEnum* type, Span`1<string> name);
    [ExtensionAttribute]
public static void GetActiveUniform(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Span`1<int> size, Span`1<GLEnum> type, Byte* name);
    [ExtensionAttribute]
public static void GetActiveUniform(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Span`1<int> size, Span`1<GLEnum> type, Span`1<byte> name);
    [ExtensionAttribute]
public static void GetActiveUniform(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Span`1<int> size, Span`1<GLEnum> type, Span`1<string> name);
    [ExtensionAttribute]
public static void GetActiveUniform(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Int32* size, UniformType* type, Span`1<byte> name);
    [ExtensionAttribute]
public static void GetActiveUniform(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Int32* size, UniformType* type, Span`1<string> name);
    [ExtensionAttribute]
public static void GetActiveUniform(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Int32* size, Span`1<UniformType> type, Byte* name);
    [ExtensionAttribute]
public static void GetActiveUniform(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Int32* size, Span`1<UniformType> type, Span`1<byte> name);
    [ExtensionAttribute]
public static void GetActiveUniform(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Int32* size, Span`1<UniformType> type, Span`1<string> name);
    [ExtensionAttribute]
public static void GetActiveUniform(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Span`1<int> size, UniformType* type, Byte* name);
    [ExtensionAttribute]
public static void GetActiveUniform(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Span`1<int> size, UniformType* type, Span`1<byte> name);
    [ExtensionAttribute]
public static void GetActiveUniform(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Span`1<int> size, UniformType* type, Span`1<string> name);
    [ExtensionAttribute]
public static void GetActiveUniform(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Span`1<int> size, Span`1<UniformType> type, Byte* name);
    [ExtensionAttribute]
public static void GetActiveUniform(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Span`1<int> size, Span`1<UniformType> type, Span`1<byte> name);
    [ExtensionAttribute]
public static void GetActiveUniform(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, UInt32* length, Span`1<int> size, Span`1<UniformType> type, Span`1<string> name);
    [ExtensionAttribute]
public static void GetActiveUniform(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Int32* size, UniformType* type, Byte* name);
    [ExtensionAttribute]
public static void GetActiveUniform(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Int32* size, UniformType* type, Span`1<byte> name);
    [ExtensionAttribute]
public static void GetActiveUniform(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Int32* size, UniformType* type, Span`1<string> name);
    [ExtensionAttribute]
public static void GetActiveUniform(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Int32* size, Span`1<UniformType> type, Byte* name);
    [ExtensionAttribute]
public static void GetActiveUniform(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Int32* size, Span`1<UniformType> type, Span`1<byte> name);
    [ExtensionAttribute]
public static void GetActiveUniform(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Int32* size, Span`1<UniformType> type, Span`1<string> name);
    [ExtensionAttribute]
public static void GetActiveUniform(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Span`1<int> size, UniformType* type, Byte* name);
    [ExtensionAttribute]
public static void GetActiveUniform(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Span`1<int> size, UniformType* type, Span`1<byte> name);
    [ExtensionAttribute]
public static void GetActiveUniform(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Span`1<int> size, UniformType* type, Span`1<string> name);
    [ExtensionAttribute]
public static void GetActiveUniform(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Span`1<int> size, Span`1<UniformType> type, Byte* name);
    [ExtensionAttribute]
public static void GetActiveUniform(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Span`1<int> size, Span`1<UniformType> type, Span`1<byte> name);
    [ExtensionAttribute]
public static void GetActiveUniform(GL thisApi, UInt32 program, UInt32 index, UInt32 bufSize, Span`1<UInt32> length, Span`1<int> size, Span`1<UniformType> type, Span`1<string> name);
    [ExtensionAttribute]
public static void GetAttachedShaders(GL thisApi, UInt32 program, UInt32 maxCount, UInt32* count, Span`1<UInt32> shaders);
    [ExtensionAttribute]
public static void GetAttachedShaders(GL thisApi, UInt32 program, UInt32 maxCount, Span`1<UInt32> count, UInt32* shaders);
    [ExtensionAttribute]
public static void GetAttachedShaders(GL thisApi, UInt32 program, UInt32 maxCount, Span`1<UInt32> count, Span`1<UInt32> shaders);
    [ExtensionAttribute]
public static void GetAttachedShaders(GL thisApi, UInt32 program, UInt32 maxCount, UInt32* count, Span`1<Shader> shaders);
    [ExtensionAttribute]
public static void GetAttachedShaders(GL thisApi, UInt32 program, UInt32 maxCount, Span`1<UInt32> count, Shader* shaders);
    [ExtensionAttribute]
public static void GetAttachedShaders(GL thisApi, UInt32 program, UInt32 maxCount, Span`1<UInt32> count, Span`1<Shader> shaders);
    [ExtensionAttribute]
public static int GetAttribLocation(GL thisApi, UInt32 program, ReadOnlySpan`1<byte> name);
    [ExtensionAttribute]
public static void GetProgram(GL thisApi, UInt32 program, GLEnum pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetProgram(GL thisApi, UInt32 program, ProgramPropertyARB pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetProgramInfoLog(GL thisApi, UInt32 program, UInt32 bufSize, UInt32* length, Span`1<byte> infoLog);
    [ExtensionAttribute]
public static void GetProgramInfoLog(GL thisApi, UInt32 program, UInt32 bufSize, UInt32* length, Span`1<string> infoLog);
    [ExtensionAttribute]
public static void GetProgramInfoLog(GL thisApi, UInt32 program, UInt32 bufSize, Span`1<UInt32> length, Byte* infoLog);
    [ExtensionAttribute]
public static void GetProgramInfoLog(GL thisApi, UInt32 program, UInt32 bufSize, Span`1<UInt32> length, Span`1<byte> infoLog);
    [ExtensionAttribute]
public static void GetProgramInfoLog(GL thisApi, UInt32 program, UInt32 bufSize, Span`1<UInt32> length, Span`1<string> infoLog);
    [ExtensionAttribute]
public static void GetShader(GL thisApi, UInt32 shader, GLEnum pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetShader(GL thisApi, UInt32 shader, ShaderParameterName pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetShaderInfoLog(GL thisApi, UInt32 shader, UInt32 bufSize, UInt32* length, Span`1<byte> infoLog);
    [ExtensionAttribute]
public static void GetShaderInfoLog(GL thisApi, UInt32 shader, UInt32 bufSize, UInt32* length, Span`1<string> infoLog);
    [ExtensionAttribute]
public static void GetShaderInfoLog(GL thisApi, UInt32 shader, UInt32 bufSize, Span`1<UInt32> length, Byte* infoLog);
    [ExtensionAttribute]
public static void GetShaderInfoLog(GL thisApi, UInt32 shader, UInt32 bufSize, Span`1<UInt32> length, Span`1<byte> infoLog);
    [ExtensionAttribute]
public static void GetShaderInfoLog(GL thisApi, UInt32 shader, UInt32 bufSize, Span`1<UInt32> length, Span`1<string> infoLog);
    [ExtensionAttribute]
public static void GetShaderSource(GL thisApi, UInt32 shader, UInt32 bufSize, UInt32* length, Span`1<byte> source);
    [ExtensionAttribute]
public static void GetShaderSource(GL thisApi, UInt32 shader, UInt32 bufSize, UInt32* length, Span`1<string> source);
    [ExtensionAttribute]
public static void GetShaderSource(GL thisApi, UInt32 shader, UInt32 bufSize, Span`1<UInt32> length, Byte* source);
    [ExtensionAttribute]
public static void GetShaderSource(GL thisApi, UInt32 shader, UInt32 bufSize, Span`1<UInt32> length, Span`1<byte> source);
    [ExtensionAttribute]
public static void GetShaderSource(GL thisApi, UInt32 shader, UInt32 bufSize, Span`1<UInt32> length, Span`1<string> source);
    [ExtensionAttribute]
public static void GetUniform(GL thisApi, UInt32 program, int location, Span`1<float> params);
    [ExtensionAttribute]
public static void GetUniform(GL thisApi, UInt32 program, int location, Span`1<int> params);
    [ExtensionAttribute]
public static int GetUniformLocation(GL thisApi, UInt32 program, ReadOnlySpan`1<byte> name);
    [ExtensionAttribute]
public static void GetVertexAttrib(GL thisApi, UInt32 index, GLEnum pname, Span`1<double> params);
    [ExtensionAttribute]
public static void GetVertexAttrib(GL thisApi, UInt32 index, VertexAttribPropertyARB pname, Span`1<double> params);
    [ExtensionAttribute]
public static void GetVertexAttrib(GL thisApi, UInt32 index, GLEnum pname, Span`1<float> params);
    [ExtensionAttribute]
public static void GetVertexAttrib(GL thisApi, UInt32 index, VertexAttribPropertyARB pname, Span`1<float> params);
    [ExtensionAttribute]
public static void GetVertexAttrib(GL thisApi, UInt32 index, GLEnum pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetVertexAttrib(GL thisApi, UInt32 index, VertexAttribPropertyARB pname, Span`1<int> params);
    [ExtensionAttribute]
public static void ShaderSource(GL thisApi, UInt32 shader, UInt32 count, Byte** string, ReadOnlySpan`1<int> length);
    [ExtensionAttribute]
public static void ShaderSource(GL thisApi, UInt32 shader, UInt32 count, Byte*& string, ReadOnlySpan`1<int> length);
    [ExtensionAttribute]
public static void Uniform1(GL thisApi, int location, UInt32 count, ReadOnlySpan`1<float> value);
    [ExtensionAttribute]
public static void Uniform1(GL thisApi, int location, UInt32 count, ReadOnlySpan`1<int> value);
    [ExtensionAttribute]
public static void Uniform2(GL thisApi, int location, UInt32 count, ReadOnlySpan`1<float> value);
    [ExtensionAttribute]
public static void Uniform2(GL thisApi, int location, UInt32 count, ReadOnlySpan`1<int> value);
    [ExtensionAttribute]
public static void Uniform3(GL thisApi, int location, UInt32 count, ReadOnlySpan`1<float> value);
    [ExtensionAttribute]
public static void Uniform3(GL thisApi, int location, UInt32 count, ReadOnlySpan`1<int> value);
    [ExtensionAttribute]
public static void Uniform4(GL thisApi, int location, UInt32 count, ReadOnlySpan`1<float> value);
    [ExtensionAttribute]
public static void Uniform4(GL thisApi, int location, UInt32 count, ReadOnlySpan`1<int> value);
    [ExtensionAttribute]
public static void UniformMatrix2(GL thisApi, int location, UInt32 count, bool transpose, ReadOnlySpan`1<float> value);
    [ExtensionAttribute]
public static void UniformMatrix2(GL thisApi, int location, UInt32 count, Boolean transpose, ReadOnlySpan`1<float> value);
    [ExtensionAttribute]
public static void UniformMatrix3(GL thisApi, int location, UInt32 count, bool transpose, ReadOnlySpan`1<float> value);
    [ExtensionAttribute]
public static void UniformMatrix3(GL thisApi, int location, UInt32 count, Boolean transpose, ReadOnlySpan`1<float> value);
    [ExtensionAttribute]
public static void UniformMatrix4(GL thisApi, int location, UInt32 count, bool transpose, ReadOnlySpan`1<float> value);
    [ExtensionAttribute]
public static void UniformMatrix4(GL thisApi, int location, UInt32 count, Boolean transpose, ReadOnlySpan`1<float> value);
    [ExtensionAttribute]
public static void VertexAttrib1(GL thisApi, UInt32 index, ReadOnlySpan`1<double> v);
    [ExtensionAttribute]
public static void VertexAttrib1(GL thisApi, UInt32 index, ReadOnlySpan`1<float> v);
    [ExtensionAttribute]
public static void VertexAttrib1(GL thisApi, UInt32 index, ReadOnlySpan`1<short> v);
    [ExtensionAttribute]
public static void VertexAttrib2(GL thisApi, UInt32 index, ReadOnlySpan`1<double> v);
    [ExtensionAttribute]
public static void VertexAttrib2(GL thisApi, UInt32 index, ReadOnlySpan`1<float> v);
    [ExtensionAttribute]
public static void VertexAttrib2(GL thisApi, UInt32 index, ReadOnlySpan`1<short> v);
    [ExtensionAttribute]
public static void VertexAttrib3(GL thisApi, UInt32 index, ReadOnlySpan`1<double> v);
    [ExtensionAttribute]
public static void VertexAttrib3(GL thisApi, UInt32 index, ReadOnlySpan`1<float> v);
    [ExtensionAttribute]
public static void VertexAttrib3(GL thisApi, UInt32 index, ReadOnlySpan`1<short> v);
    [ExtensionAttribute]
public static void VertexAttrib4(GL thisApi, UInt32 index, ReadOnlySpan`1<sbyte> v);
    [ExtensionAttribute]
public static void VertexAttrib4(GL thisApi, UInt32 index, ReadOnlySpan`1<double> v);
    [ExtensionAttribute]
public static void VertexAttrib4(GL thisApi, UInt32 index, ReadOnlySpan`1<float> v);
    [ExtensionAttribute]
public static void VertexAttrib4(GL thisApi, UInt32 index, ReadOnlySpan`1<int> v);
    [ExtensionAttribute]
public static void VertexAttrib4(GL thisApi, UInt32 index, ReadOnlySpan`1<short> v);
    [ExtensionAttribute]
public static void VertexAttrib4(GL thisApi, UInt32 index, ReadOnlySpan`1<byte> v);
    [ExtensionAttribute]
public static void VertexAttrib4(GL thisApi, UInt32 index, ReadOnlySpan`1<UInt32> v);
    [ExtensionAttribute]
public static void VertexAttrib4(GL thisApi, UInt32 index, ReadOnlySpan`1<ushort> v);
    [ExtensionAttribute]
public static void VertexAttrib4N(GL thisApi, UInt32 index, ReadOnlySpan`1<sbyte> v);
    [ExtensionAttribute]
public static void VertexAttrib4N(GL thisApi, UInt32 index, ReadOnlySpan`1<int> v);
    [ExtensionAttribute]
public static void VertexAttrib4N(GL thisApi, UInt32 index, ReadOnlySpan`1<short> v);
    [ExtensionAttribute]
public static void VertexAttrib4N(GL thisApi, UInt32 index, ReadOnlySpan`1<byte> v);
    [ExtensionAttribute]
public static void VertexAttrib4N(GL thisApi, UInt32 index, ReadOnlySpan`1<UInt32> v);
    [ExtensionAttribute]
public static void VertexAttrib4N(GL thisApi, UInt32 index, ReadOnlySpan`1<ushort> v);
    [ExtensionAttribute]
public static void BufferData(GL thisApi, GLEnum target, UIntPtr size, ReadOnlySpan`1<T0> data, GLEnum usage);
    [ExtensionAttribute]
public static void BufferData(GL thisApi, GLEnum target, UIntPtr size, ReadOnlySpan`1<T0> data, BufferUsageARB usage);
    [ExtensionAttribute]
public static void BufferData(GL thisApi, BufferTargetARB target, UIntPtr size, ReadOnlySpan`1<T0> data, GLEnum usage);
    [ExtensionAttribute]
public static void BufferData(GL thisApi, BufferTargetARB target, UIntPtr size, ReadOnlySpan`1<T0> data, BufferUsageARB usage);
    [ExtensionAttribute]
public static void BufferSubData(GL thisApi, GLEnum target, IntPtr offset, UIntPtr size, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void BufferSubData(GL thisApi, BufferTargetARB target, IntPtr offset, UIntPtr size, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void DeleteBuffers(GL thisApi, UInt32 n, ReadOnlySpan`1<UInt32> buffers);
    [ExtensionAttribute]
public static void DeleteBuffers(GL thisApi, UInt32 n, ReadOnlySpan`1<Buffer> buffers);
    [ExtensionAttribute]
public static void DeleteQueries(GL thisApi, UInt32 n, ReadOnlySpan`1<UInt32> ids);
    [ExtensionAttribute]
public static void DeleteQueries(GL thisApi, UInt32 n, ReadOnlySpan`1<Query> ids);
    [ExtensionAttribute]
public static void GenBuffers(GL thisApi, UInt32 n, Span`1<UInt32> buffers);
    [ExtensionAttribute]
public static void GenBuffers(GL thisApi, UInt32 n, Span`1<Buffer> buffers);
    [ExtensionAttribute]
public static void GenQueries(GL thisApi, UInt32 n, Span`1<UInt32> ids);
    [ExtensionAttribute]
public static void GenQueries(GL thisApi, UInt32 n, Span`1<Query> ids);
    [ExtensionAttribute]
public static void GetBufferParameter(GL thisApi, GLEnum target, GLEnum pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetBufferParameter(GL thisApi, GLEnum target, BufferPNameARB pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetBufferParameter(GL thisApi, BufferTargetARB target, GLEnum pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetBufferParameter(GL thisApi, BufferTargetARB target, BufferPNameARB pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetBufferSubData(GL thisApi, GLEnum target, IntPtr offset, UIntPtr size, Span`1<T0> data);
    [ExtensionAttribute]
public static void GetBufferSubData(GL thisApi, BufferTargetARB target, IntPtr offset, UIntPtr size, Span`1<T0> data);
    [ExtensionAttribute]
public static void GetQuery(GL thisApi, GLEnum target, GLEnum pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetQuery(GL thisApi, GLEnum target, QueryParameterName pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetQuery(GL thisApi, QueryTarget target, GLEnum pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetQuery(GL thisApi, QueryTarget target, QueryParameterName pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetQueryObject(GL thisApi, UInt32 id, GLEnum pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetQueryObject(GL thisApi, UInt32 id, QueryObjectParameterName pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetQueryObject(GL thisApi, UInt32 id, GLEnum pname, Span`1<UInt32> params);
    [ExtensionAttribute]
public static void GetQueryObject(GL thisApi, UInt32 id, QueryObjectParameterName pname, Span`1<UInt32> params);
    [ExtensionAttribute]
public static void MultiDrawArrays(GL thisApi, GLEnum mode, Int32* first, ReadOnlySpan`1<UInt32> count, UInt32 drawcount);
    [ExtensionAttribute]
public static void MultiDrawArrays(GL thisApi, GLEnum mode, ReadOnlySpan`1<int> first, UInt32* count, UInt32 drawcount);
    [ExtensionAttribute]
public static void MultiDrawArrays(GL thisApi, GLEnum mode, ReadOnlySpan`1<int> first, ReadOnlySpan`1<UInt32> count, UInt32 drawcount);
    [ExtensionAttribute]
public static void MultiDrawArrays(GL thisApi, PrimitiveType mode, Int32* first, ReadOnlySpan`1<UInt32> count, UInt32 drawcount);
    [ExtensionAttribute]
public static void MultiDrawArrays(GL thisApi, PrimitiveType mode, ReadOnlySpan`1<int> first, UInt32* count, UInt32 drawcount);
    [ExtensionAttribute]
public static void MultiDrawArrays(GL thisApi, PrimitiveType mode, ReadOnlySpan`1<int> first, ReadOnlySpan`1<UInt32> count, UInt32 drawcount);
    [ExtensionAttribute]
public static void MultiDrawElements(GL thisApi, GLEnum mode, ReadOnlySpan`1<UInt32> count, GLEnum type, Void** indices, UInt32 drawcount);
    [ExtensionAttribute]
public static void MultiDrawElements(GL thisApi, GLEnum mode, ReadOnlySpan`1<UInt32> count, GLEnum type, Void*& indices, UInt32 drawcount);
    [ExtensionAttribute]
public static void MultiDrawElements(GL thisApi, GLEnum mode, ReadOnlySpan`1<UInt32> count, DrawElementsType type, Void** indices, UInt32 drawcount);
    [ExtensionAttribute]
public static void MultiDrawElements(GL thisApi, GLEnum mode, ReadOnlySpan`1<UInt32> count, DrawElementsType type, Void*& indices, UInt32 drawcount);
    [ExtensionAttribute]
public static void MultiDrawElements(GL thisApi, PrimitiveType mode, ReadOnlySpan`1<UInt32> count, GLEnum type, Void** indices, UInt32 drawcount);
    [ExtensionAttribute]
public static void MultiDrawElements(GL thisApi, PrimitiveType mode, ReadOnlySpan`1<UInt32> count, GLEnum type, Void*& indices, UInt32 drawcount);
    [ExtensionAttribute]
public static void MultiDrawElements(GL thisApi, PrimitiveType mode, ReadOnlySpan`1<UInt32> count, DrawElementsType type, Void** indices, UInt32 drawcount);
    [ExtensionAttribute]
public static void MultiDrawElements(GL thisApi, PrimitiveType mode, ReadOnlySpan`1<UInt32> count, DrawElementsType type, Void*& indices, UInt32 drawcount);
    [ExtensionAttribute]
public static void PointParameter(GL thisApi, GLEnum pname, ReadOnlySpan`1<float> params);
    [ExtensionAttribute]
public static void PointParameter(GL thisApi, PointParameterNameARB pname, ReadOnlySpan`1<float> params);
    [ExtensionAttribute]
public static void PointParameter(GL thisApi, GLEnum pname, ReadOnlySpan`1<int> params);
    [ExtensionAttribute]
public static void PointParameter(GL thisApi, PointParameterNameARB pname, ReadOnlySpan`1<int> params);
    [ExtensionAttribute]
public static void CompressedTexImage1D(GL thisApi, GLEnum target, int level, GLEnum internalformat, UInt32 width, int border, UInt32 imageSize, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void CompressedTexImage1D(GL thisApi, GLEnum target, int level, InternalFormat internalformat, UInt32 width, int border, UInt32 imageSize, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void CompressedTexImage1D(GL thisApi, TextureTarget target, int level, GLEnum internalformat, UInt32 width, int border, UInt32 imageSize, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void CompressedTexImage1D(GL thisApi, TextureTarget target, int level, InternalFormat internalformat, UInt32 width, int border, UInt32 imageSize, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void CompressedTexImage2D(GL thisApi, GLEnum target, int level, GLEnum internalformat, UInt32 width, UInt32 height, int border, UInt32 imageSize, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void CompressedTexImage2D(GL thisApi, GLEnum target, int level, InternalFormat internalformat, UInt32 width, UInt32 height, int border, UInt32 imageSize, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void CompressedTexImage2D(GL thisApi, TextureTarget target, int level, GLEnum internalformat, UInt32 width, UInt32 height, int border, UInt32 imageSize, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void CompressedTexImage2D(GL thisApi, TextureTarget target, int level, InternalFormat internalformat, UInt32 width, UInt32 height, int border, UInt32 imageSize, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void CompressedTexImage3D(GL thisApi, GLEnum target, int level, GLEnum internalformat, UInt32 width, UInt32 height, UInt32 depth, int border, UInt32 imageSize, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void CompressedTexImage3D(GL thisApi, GLEnum target, int level, InternalFormat internalformat, UInt32 width, UInt32 height, UInt32 depth, int border, UInt32 imageSize, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void CompressedTexImage3D(GL thisApi, TextureTarget target, int level, GLEnum internalformat, UInt32 width, UInt32 height, UInt32 depth, int border, UInt32 imageSize, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void CompressedTexImage3D(GL thisApi, TextureTarget target, int level, InternalFormat internalformat, UInt32 width, UInt32 height, UInt32 depth, int border, UInt32 imageSize, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void CompressedTexSubImage1D(GL thisApi, GLEnum target, int level, int xoffset, UInt32 width, GLEnum format, UInt32 imageSize, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void CompressedTexSubImage1D(GL thisApi, GLEnum target, int level, int xoffset, UInt32 width, InternalFormat format, UInt32 imageSize, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void CompressedTexSubImage1D(GL thisApi, TextureTarget target, int level, int xoffset, UInt32 width, GLEnum format, UInt32 imageSize, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void CompressedTexSubImage1D(GL thisApi, TextureTarget target, int level, int xoffset, UInt32 width, InternalFormat format, UInt32 imageSize, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void CompressedTexSubImage2D(GL thisApi, GLEnum target, int level, int xoffset, int yoffset, UInt32 width, UInt32 height, GLEnum format, UInt32 imageSize, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void CompressedTexSubImage2D(GL thisApi, GLEnum target, int level, int xoffset, int yoffset, UInt32 width, UInt32 height, InternalFormat format, UInt32 imageSize, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void CompressedTexSubImage2D(GL thisApi, TextureTarget target, int level, int xoffset, int yoffset, UInt32 width, UInt32 height, GLEnum format, UInt32 imageSize, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void CompressedTexSubImage2D(GL thisApi, TextureTarget target, int level, int xoffset, int yoffset, UInt32 width, UInt32 height, InternalFormat format, UInt32 imageSize, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void CompressedTexSubImage3D(GL thisApi, GLEnum target, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, GLEnum format, UInt32 imageSize, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void CompressedTexSubImage3D(GL thisApi, GLEnum target, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, InternalFormat format, UInt32 imageSize, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void CompressedTexSubImage3D(GL thisApi, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, GLEnum format, UInt32 imageSize, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void CompressedTexSubImage3D(GL thisApi, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, InternalFormat format, UInt32 imageSize, ReadOnlySpan`1<T0> data);
    [ExtensionAttribute]
public static void GetCompressedTexImage(GL thisApi, GLEnum target, int level, Span`1<T0> img);
    [ExtensionAttribute]
public static void GetCompressedTexImage(GL thisApi, TextureTarget target, int level, Span`1<T0> img);
    [ExtensionAttribute]
public static void DrawRangeElements(GL thisApi, GLEnum mode, UInt32 start, UInt32 end, UInt32 count, GLEnum type, ReadOnlySpan`1<T0> indices);
    [ExtensionAttribute]
public static void DrawRangeElements(GL thisApi, GLEnum mode, UInt32 start, UInt32 end, UInt32 count, DrawElementsType type, ReadOnlySpan`1<T0> indices);
    [ExtensionAttribute]
public static void DrawRangeElements(GL thisApi, PrimitiveType mode, UInt32 start, UInt32 end, UInt32 count, GLEnum type, ReadOnlySpan`1<T0> indices);
    [ExtensionAttribute]
public static void DrawRangeElements(GL thisApi, PrimitiveType mode, UInt32 start, UInt32 end, UInt32 count, DrawElementsType type, ReadOnlySpan`1<T0> indices);
    [ExtensionAttribute]
public static void TexImage3D(GL thisApi, GLEnum target, int level, int internalformat, UInt32 width, UInt32 height, UInt32 depth, int border, GLEnum format, GLEnum type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexImage3D(GL thisApi, GLEnum target, int level, int internalformat, UInt32 width, UInt32 height, UInt32 depth, int border, GLEnum format, PixelType type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexImage3D(GL thisApi, GLEnum target, int level, int internalformat, UInt32 width, UInt32 height, UInt32 depth, int border, PixelFormat format, GLEnum type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexImage3D(GL thisApi, GLEnum target, int level, int internalformat, UInt32 width, UInt32 height, UInt32 depth, int border, PixelFormat format, PixelType type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexImage3D(GL thisApi, GLEnum target, int level, InternalFormat internalformat, UInt32 width, UInt32 height, UInt32 depth, int border, GLEnum format, GLEnum type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexImage3D(GL thisApi, GLEnum target, int level, InternalFormat internalformat, UInt32 width, UInt32 height, UInt32 depth, int border, GLEnum format, PixelType type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexImage3D(GL thisApi, GLEnum target, int level, InternalFormat internalformat, UInt32 width, UInt32 height, UInt32 depth, int border, PixelFormat format, GLEnum type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexImage3D(GL thisApi, GLEnum target, int level, InternalFormat internalformat, UInt32 width, UInt32 height, UInt32 depth, int border, PixelFormat format, PixelType type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexImage3D(GL thisApi, TextureTarget target, int level, int internalformat, UInt32 width, UInt32 height, UInt32 depth, int border, GLEnum format, GLEnum type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexImage3D(GL thisApi, TextureTarget target, int level, int internalformat, UInt32 width, UInt32 height, UInt32 depth, int border, GLEnum format, PixelType type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexImage3D(GL thisApi, TextureTarget target, int level, int internalformat, UInt32 width, UInt32 height, UInt32 depth, int border, PixelFormat format, GLEnum type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexImage3D(GL thisApi, TextureTarget target, int level, int internalformat, UInt32 width, UInt32 height, UInt32 depth, int border, PixelFormat format, PixelType type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexImage3D(GL thisApi, TextureTarget target, int level, InternalFormat internalformat, UInt32 width, UInt32 height, UInt32 depth, int border, GLEnum format, GLEnum type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexImage3D(GL thisApi, TextureTarget target, int level, InternalFormat internalformat, UInt32 width, UInt32 height, UInt32 depth, int border, GLEnum format, PixelType type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexImage3D(GL thisApi, TextureTarget target, int level, InternalFormat internalformat, UInt32 width, UInt32 height, UInt32 depth, int border, PixelFormat format, GLEnum type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexImage3D(GL thisApi, TextureTarget target, int level, InternalFormat internalformat, UInt32 width, UInt32 height, UInt32 depth, int border, PixelFormat format, PixelType type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexSubImage3D(GL thisApi, GLEnum target, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, GLEnum format, GLEnum type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexSubImage3D(GL thisApi, GLEnum target, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, GLEnum format, PixelType type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexSubImage3D(GL thisApi, GLEnum target, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, PixelFormat format, GLEnum type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexSubImage3D(GL thisApi, GLEnum target, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, PixelFormat format, PixelType type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexSubImage3D(GL thisApi, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, GLEnum format, GLEnum type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexSubImage3D(GL thisApi, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, GLEnum format, PixelType type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexSubImage3D(GL thisApi, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, PixelFormat format, GLEnum type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexSubImage3D(GL thisApi, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, UInt32 width, UInt32 height, UInt32 depth, PixelFormat format, PixelType type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void DeleteTextures(GL thisApi, UInt32 n, ReadOnlySpan`1<UInt32> textures);
    [ExtensionAttribute]
public static void DeleteTextures(GL thisApi, UInt32 n, ReadOnlySpan`1<Texture> textures);
    [ExtensionAttribute]
public static void DrawElements(GL thisApi, GLEnum mode, UInt32 count, GLEnum type, ReadOnlySpan`1<T0> indices);
    [ExtensionAttribute]
public static void DrawElements(GL thisApi, GLEnum mode, UInt32 count, DrawElementsType type, ReadOnlySpan`1<T0> indices);
    [ExtensionAttribute]
public static void DrawElements(GL thisApi, PrimitiveType mode, UInt32 count, GLEnum type, ReadOnlySpan`1<T0> indices);
    [ExtensionAttribute]
public static void DrawElements(GL thisApi, PrimitiveType mode, UInt32 count, DrawElementsType type, ReadOnlySpan`1<T0> indices);
    [ExtensionAttribute]
public static void GenTextures(GL thisApi, UInt32 n, Span`1<UInt32> textures);
    [ExtensionAttribute]
public static void GenTextures(GL thisApi, UInt32 n, Span`1<Texture> textures);
    [ExtensionAttribute]
public static void TexSubImage1D(GL thisApi, GLEnum target, int level, int xoffset, UInt32 width, GLEnum format, GLEnum type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexSubImage1D(GL thisApi, GLEnum target, int level, int xoffset, UInt32 width, GLEnum format, PixelType type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexSubImage1D(GL thisApi, GLEnum target, int level, int xoffset, UInt32 width, PixelFormat format, GLEnum type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexSubImage1D(GL thisApi, GLEnum target, int level, int xoffset, UInt32 width, PixelFormat format, PixelType type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexSubImage1D(GL thisApi, TextureTarget target, int level, int xoffset, UInt32 width, GLEnum format, GLEnum type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexSubImage1D(GL thisApi, TextureTarget target, int level, int xoffset, UInt32 width, GLEnum format, PixelType type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexSubImage1D(GL thisApi, TextureTarget target, int level, int xoffset, UInt32 width, PixelFormat format, GLEnum type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexSubImage1D(GL thisApi, TextureTarget target, int level, int xoffset, UInt32 width, PixelFormat format, PixelType type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexSubImage2D(GL thisApi, GLEnum target, int level, int xoffset, int yoffset, UInt32 width, UInt32 height, GLEnum format, GLEnum type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexSubImage2D(GL thisApi, GLEnum target, int level, int xoffset, int yoffset, UInt32 width, UInt32 height, GLEnum format, PixelType type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexSubImage2D(GL thisApi, GLEnum target, int level, int xoffset, int yoffset, UInt32 width, UInt32 height, PixelFormat format, GLEnum type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexSubImage2D(GL thisApi, GLEnum target, int level, int xoffset, int yoffset, UInt32 width, UInt32 height, PixelFormat format, PixelType type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexSubImage2D(GL thisApi, TextureTarget target, int level, int xoffset, int yoffset, UInt32 width, UInt32 height, GLEnum format, GLEnum type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexSubImage2D(GL thisApi, TextureTarget target, int level, int xoffset, int yoffset, UInt32 width, UInt32 height, GLEnum format, PixelType type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexSubImage2D(GL thisApi, TextureTarget target, int level, int xoffset, int yoffset, UInt32 width, UInt32 height, PixelFormat format, GLEnum type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexSubImage2D(GL thisApi, TextureTarget target, int level, int xoffset, int yoffset, UInt32 width, UInt32 height, PixelFormat format, PixelType type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void GetBoolean(GL thisApi, GLEnum pname, Span`1<bool> data);
    [ExtensionAttribute]
public static void GetBoolean(GL thisApi, GLEnum pname, Span`1<Boolean> data);
    [ExtensionAttribute]
public static void GetBoolean(GL thisApi, GetPName pname, Span`1<bool> data);
    [ExtensionAttribute]
public static void GetBoolean(GL thisApi, GetPName pname, Span`1<Boolean> data);
    [ExtensionAttribute]
public static void GetDouble(GL thisApi, GLEnum pname, Span`1<double> data);
    [ExtensionAttribute]
public static void GetDouble(GL thisApi, GetPName pname, Span`1<double> data);
    [ExtensionAttribute]
public static void GetFloat(GL thisApi, GLEnum pname, Span`1<float> data);
    [ExtensionAttribute]
public static void GetFloat(GL thisApi, GetPName pname, Span`1<float> data);
    [ExtensionAttribute]
public static void GetInteger(GL thisApi, GLEnum pname, Span`1<int> data);
    [ExtensionAttribute]
public static void GetInteger(GL thisApi, GetPName pname, Span`1<int> data);
    [ExtensionAttribute]
public static void GetTexImage(GL thisApi, GLEnum target, int level, GLEnum format, GLEnum type, Span`1<T0> pixels);
    [ExtensionAttribute]
public static void GetTexImage(GL thisApi, GLEnum target, int level, GLEnum format, PixelType type, Span`1<T0> pixels);
    [ExtensionAttribute]
public static void GetTexImage(GL thisApi, GLEnum target, int level, PixelFormat format, GLEnum type, Span`1<T0> pixels);
    [ExtensionAttribute]
public static void GetTexImage(GL thisApi, GLEnum target, int level, PixelFormat format, PixelType type, Span`1<T0> pixels);
    [ExtensionAttribute]
public static void GetTexImage(GL thisApi, TextureTarget target, int level, GLEnum format, GLEnum type, Span`1<T0> pixels);
    [ExtensionAttribute]
public static void GetTexImage(GL thisApi, TextureTarget target, int level, GLEnum format, PixelType type, Span`1<T0> pixels);
    [ExtensionAttribute]
public static void GetTexImage(GL thisApi, TextureTarget target, int level, PixelFormat format, GLEnum type, Span`1<T0> pixels);
    [ExtensionAttribute]
public static void GetTexImage(GL thisApi, TextureTarget target, int level, PixelFormat format, PixelType type, Span`1<T0> pixels);
    [ExtensionAttribute]
public static void GetTexLevelParameter(GL thisApi, GLEnum target, int level, GLEnum pname, Span`1<float> params);
    [ExtensionAttribute]
public static void GetTexLevelParameter(GL thisApi, GLEnum target, int level, GetTextureParameter pname, Span`1<float> params);
    [ExtensionAttribute]
public static void GetTexLevelParameter(GL thisApi, TextureTarget target, int level, GLEnum pname, Span`1<float> params);
    [ExtensionAttribute]
public static void GetTexLevelParameter(GL thisApi, TextureTarget target, int level, GetTextureParameter pname, Span`1<float> params);
    [ExtensionAttribute]
public static void GetTexLevelParameter(GL thisApi, GLEnum target, int level, GLEnum pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetTexLevelParameter(GL thisApi, GLEnum target, int level, GetTextureParameter pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetTexLevelParameter(GL thisApi, TextureTarget target, int level, GLEnum pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetTexLevelParameter(GL thisApi, TextureTarget target, int level, GetTextureParameter pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetTexParameter(GL thisApi, GLEnum target, GLEnum pname, Span`1<float> params);
    [ExtensionAttribute]
public static void GetTexParameter(GL thisApi, GLEnum target, GetTextureParameter pname, Span`1<float> params);
    [ExtensionAttribute]
public static void GetTexParameter(GL thisApi, TextureTarget target, GLEnum pname, Span`1<float> params);
    [ExtensionAttribute]
public static void GetTexParameter(GL thisApi, TextureTarget target, GetTextureParameter pname, Span`1<float> params);
    [ExtensionAttribute]
public static void GetTexParameter(GL thisApi, GLEnum target, GLEnum pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetTexParameter(GL thisApi, GLEnum target, GetTextureParameter pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetTexParameter(GL thisApi, TextureTarget target, GLEnum pname, Span`1<int> params);
    [ExtensionAttribute]
public static void GetTexParameter(GL thisApi, TextureTarget target, GetTextureParameter pname, Span`1<int> params);
    [ExtensionAttribute]
public static void ReadPixels(GL thisApi, int x, int y, UInt32 width, UInt32 height, GLEnum format, GLEnum type, Span`1<T0> pixels);
    [ExtensionAttribute]
public static void ReadPixels(GL thisApi, int x, int y, UInt32 width, UInt32 height, GLEnum format, PixelType type, Span`1<T0> pixels);
    [ExtensionAttribute]
public static void ReadPixels(GL thisApi, int x, int y, UInt32 width, UInt32 height, PixelFormat format, GLEnum type, Span`1<T0> pixels);
    [ExtensionAttribute]
public static void ReadPixels(GL thisApi, int x, int y, UInt32 width, UInt32 height, PixelFormat format, PixelType type, Span`1<T0> pixels);
    [ExtensionAttribute]
public static void TexImage1D(GL thisApi, GLEnum target, int level, int internalformat, UInt32 width, int border, GLEnum format, GLEnum type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexImage1D(GL thisApi, GLEnum target, int level, int internalformat, UInt32 width, int border, GLEnum format, PixelType type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexImage1D(GL thisApi, GLEnum target, int level, int internalformat, UInt32 width, int border, PixelFormat format, GLEnum type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexImage1D(GL thisApi, GLEnum target, int level, int internalformat, UInt32 width, int border, PixelFormat format, PixelType type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexImage1D(GL thisApi, GLEnum target, int level, InternalFormat internalformat, UInt32 width, int border, GLEnum format, GLEnum type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexImage1D(GL thisApi, GLEnum target, int level, InternalFormat internalformat, UInt32 width, int border, GLEnum format, PixelType type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexImage1D(GL thisApi, GLEnum target, int level, InternalFormat internalformat, UInt32 width, int border, PixelFormat format, GLEnum type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexImage1D(GL thisApi, GLEnum target, int level, InternalFormat internalformat, UInt32 width, int border, PixelFormat format, PixelType type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexImage1D(GL thisApi, TextureTarget target, int level, int internalformat, UInt32 width, int border, GLEnum format, GLEnum type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexImage1D(GL thisApi, TextureTarget target, int level, int internalformat, UInt32 width, int border, GLEnum format, PixelType type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexImage1D(GL thisApi, TextureTarget target, int level, int internalformat, UInt32 width, int border, PixelFormat format, GLEnum type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexImage1D(GL thisApi, TextureTarget target, int level, int internalformat, UInt32 width, int border, PixelFormat format, PixelType type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexImage1D(GL thisApi, TextureTarget target, int level, InternalFormat internalformat, UInt32 width, int border, GLEnum format, GLEnum type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexImage1D(GL thisApi, TextureTarget target, int level, InternalFormat internalformat, UInt32 width, int border, GLEnum format, PixelType type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexImage1D(GL thisApi, TextureTarget target, int level, InternalFormat internalformat, UInt32 width, int border, PixelFormat format, GLEnum type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexImage1D(GL thisApi, TextureTarget target, int level, InternalFormat internalformat, UInt32 width, int border, PixelFormat format, PixelType type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexImage2D(GL thisApi, GLEnum target, int level, int internalformat, UInt32 width, UInt32 height, int border, GLEnum format, GLEnum type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexImage2D(GL thisApi, GLEnum target, int level, int internalformat, UInt32 width, UInt32 height, int border, GLEnum format, PixelType type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexImage2D(GL thisApi, GLEnum target, int level, int internalformat, UInt32 width, UInt32 height, int border, PixelFormat format, GLEnum type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexImage2D(GL thisApi, GLEnum target, int level, int internalformat, UInt32 width, UInt32 height, int border, PixelFormat format, PixelType type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexImage2D(GL thisApi, GLEnum target, int level, InternalFormat internalformat, UInt32 width, UInt32 height, int border, GLEnum format, GLEnum type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexImage2D(GL thisApi, GLEnum target, int level, InternalFormat internalformat, UInt32 width, UInt32 height, int border, GLEnum format, PixelType type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexImage2D(GL thisApi, GLEnum target, int level, InternalFormat internalformat, UInt32 width, UInt32 height, int border, PixelFormat format, GLEnum type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexImage2D(GL thisApi, GLEnum target, int level, InternalFormat internalformat, UInt32 width, UInt32 height, int border, PixelFormat format, PixelType type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexImage2D(GL thisApi, TextureTarget target, int level, int internalformat, UInt32 width, UInt32 height, int border, GLEnum format, GLEnum type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexImage2D(GL thisApi, TextureTarget target, int level, int internalformat, UInt32 width, UInt32 height, int border, GLEnum format, PixelType type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexImage2D(GL thisApi, TextureTarget target, int level, int internalformat, UInt32 width, UInt32 height, int border, PixelFormat format, GLEnum type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexImage2D(GL thisApi, TextureTarget target, int level, int internalformat, UInt32 width, UInt32 height, int border, PixelFormat format, PixelType type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexImage2D(GL thisApi, TextureTarget target, int level, InternalFormat internalformat, UInt32 width, UInt32 height, int border, GLEnum format, GLEnum type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexImage2D(GL thisApi, TextureTarget target, int level, InternalFormat internalformat, UInt32 width, UInt32 height, int border, GLEnum format, PixelType type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexImage2D(GL thisApi, TextureTarget target, int level, InternalFormat internalformat, UInt32 width, UInt32 height, int border, PixelFormat format, GLEnum type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexImage2D(GL thisApi, TextureTarget target, int level, InternalFormat internalformat, UInt32 width, UInt32 height, int border, PixelFormat format, PixelType type, ReadOnlySpan`1<T0> pixels);
    [ExtensionAttribute]
public static void TexParameter(GL thisApi, GLEnum target, GLEnum pname, ReadOnlySpan`1<float> params);
    [ExtensionAttribute]
public static void TexParameter(GL thisApi, GLEnum target, TextureParameterName pname, ReadOnlySpan`1<float> params);
    [ExtensionAttribute]
public static void TexParameter(GL thisApi, TextureTarget target, GLEnum pname, ReadOnlySpan`1<float> params);
    [ExtensionAttribute]
public static void TexParameter(GL thisApi, TextureTarget target, TextureParameterName pname, ReadOnlySpan`1<float> params);
    [ExtensionAttribute]
public static void TexParameter(GL thisApi, GLEnum target, GLEnum pname, ReadOnlySpan`1<int> params);
    [ExtensionAttribute]
public static void TexParameter(GL thisApi, GLEnum target, TextureParameterName pname, ReadOnlySpan`1<int> params);
    [ExtensionAttribute]
public static void TexParameter(GL thisApi, TextureTarget target, GLEnum pname, ReadOnlySpan`1<int> params);
    [ExtensionAttribute]
public static void TexParameter(GL thisApi, TextureTarget target, TextureParameterName pname, ReadOnlySpan`1<int> params);
}
[NativeNameAttribute("Name", "GlslTypeToken")]
public enum Silk.NET.OpenGL.GlslTypeToken : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_INT")]
public static GlslTypeToken Int;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT")]
public static GlslTypeToken UnsignedInt;
    [NativeNameAttribute("Name", "GL_FLOAT")]
public static GlslTypeToken Float;
    [NativeNameAttribute("Name", "GL_DOUBLE")]
public static GlslTypeToken Double;
    [NativeNameAttribute("Name", "GL_FLOAT_VEC2")]
public static GlslTypeToken FloatVec2;
    [NativeNameAttribute("Name", "GL_FLOAT_VEC3")]
public static GlslTypeToken FloatVec3;
    [NativeNameAttribute("Name", "GL_FLOAT_VEC4")]
public static GlslTypeToken FloatVec4;
    [NativeNameAttribute("Name", "GL_INT_VEC2")]
public static GlslTypeToken IntVec2;
    [NativeNameAttribute("Name", "GL_INT_VEC3")]
public static GlslTypeToken IntVec3;
    [NativeNameAttribute("Name", "GL_INT_VEC4")]
public static GlslTypeToken IntVec4;
    [NativeNameAttribute("Name", "GL_BOOL")]
public static GlslTypeToken Bool;
    [NativeNameAttribute("Name", "GL_BOOL_VEC2")]
public static GlslTypeToken BoolVec2;
    [NativeNameAttribute("Name", "GL_BOOL_VEC3")]
public static GlslTypeToken BoolVec3;
    [NativeNameAttribute("Name", "GL_BOOL_VEC4")]
public static GlslTypeToken BoolVec4;
    [NativeNameAttribute("Name", "GL_FLOAT_MAT2")]
public static GlslTypeToken FloatMat2;
    [NativeNameAttribute("Name", "GL_FLOAT_MAT3")]
public static GlslTypeToken FloatMat3;
    [NativeNameAttribute("Name", "GL_FLOAT_MAT4")]
public static GlslTypeToken FloatMat4;
    [NativeNameAttribute("Name", "GL_SAMPLER_1D")]
public static GlslTypeToken Sampler1D;
    [NativeNameAttribute("Name", "GL_SAMPLER_2D")]
public static GlslTypeToken Sampler2D;
    [NativeNameAttribute("Name", "GL_SAMPLER_3D")]
public static GlslTypeToken Sampler3D;
    [NativeNameAttribute("Name", "GL_SAMPLER_CUBE")]
public static GlslTypeToken SamplerCube;
    [NativeNameAttribute("Name", "GL_SAMPLER_1D_SHADOW")]
public static GlslTypeToken Sampler1DShadow;
    [NativeNameAttribute("Name", "GL_SAMPLER_2D_SHADOW")]
public static GlslTypeToken Sampler2DShadow;
    [NativeNameAttribute("Name", "GL_SAMPLER_2D_RECT")]
public static GlslTypeToken Sampler2DRect;
    [NativeNameAttribute("Name", "GL_SAMPLER_2D_RECT_SHADOW")]
public static GlslTypeToken Sampler2DRectShadow;
    [NativeNameAttribute("Name", "GL_FLOAT_MAT2x3")]
public static GlslTypeToken FloatMat2x3;
    [NativeNameAttribute("Name", "GL_FLOAT_MAT2x4")]
public static GlslTypeToken FloatMat2x4;
    [NativeNameAttribute("Name", "GL_FLOAT_MAT3x2")]
public static GlslTypeToken FloatMat3x2;
    [NativeNameAttribute("Name", "GL_FLOAT_MAT3x4")]
public static GlslTypeToken FloatMat3x4;
    [NativeNameAttribute("Name", "GL_FLOAT_MAT4x2")]
public static GlslTypeToken FloatMat4x2;
    [NativeNameAttribute("Name", "GL_FLOAT_MAT4x3")]
public static GlslTypeToken FloatMat4x3;
    [NativeNameAttribute("Name", "GL_SAMPLER_1D_ARRAY")]
public static GlslTypeToken Sampler1DArray;
    [NativeNameAttribute("Name", "GL_SAMPLER_2D_ARRAY")]
public static GlslTypeToken Sampler2DArray;
    [NativeNameAttribute("Name", "GL_SAMPLER_BUFFER")]
public static GlslTypeToken SamplerBuffer;
    [NativeNameAttribute("Name", "GL_SAMPLER_1D_ARRAY_SHADOW")]
public static GlslTypeToken Sampler1DArrayShadow;
    [NativeNameAttribute("Name", "GL_SAMPLER_2D_ARRAY_SHADOW")]
public static GlslTypeToken Sampler2DArrayShadow;
    [NativeNameAttribute("Name", "GL_SAMPLER_CUBE_SHADOW")]
public static GlslTypeToken SamplerCubeShadow;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_VEC2")]
public static GlslTypeToken UnsignedIntVec2;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_VEC3")]
public static GlslTypeToken UnsignedIntVec3;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_VEC4")]
public static GlslTypeToken UnsignedIntVec4;
    [NativeNameAttribute("Name", "GL_INT_SAMPLER_1D")]
public static GlslTypeToken IntSampler1D;
    [NativeNameAttribute("Name", "GL_INT_SAMPLER_2D")]
public static GlslTypeToken IntSampler2D;
    [NativeNameAttribute("Name", "GL_INT_SAMPLER_3D")]
public static GlslTypeToken IntSampler3D;
    [NativeNameAttribute("Name", "GL_INT_SAMPLER_CUBE")]
public static GlslTypeToken IntSamplerCube;
    [NativeNameAttribute("Name", "GL_INT_SAMPLER_2D_RECT")]
public static GlslTypeToken IntSampler2DRect;
    [NativeNameAttribute("Name", "GL_INT_SAMPLER_1D_ARRAY")]
public static GlslTypeToken IntSampler1DArray;
    [NativeNameAttribute("Name", "GL_INT_SAMPLER_2D_ARRAY")]
public static GlslTypeToken IntSampler2DArray;
    [NativeNameAttribute("Name", "GL_INT_SAMPLER_BUFFER")]
public static GlslTypeToken IntSamplerBuffer;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_SAMPLER_1D")]
public static GlslTypeToken UnsignedIntSampler1D;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_SAMPLER_2D")]
public static GlslTypeToken UnsignedIntSampler2D;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_SAMPLER_3D")]
public static GlslTypeToken UnsignedIntSampler3D;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_SAMPLER_CUBE")]
public static GlslTypeToken UnsignedIntSamplerCube;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_SAMPLER_2D_RECT")]
public static GlslTypeToken UnsignedIntSampler2DRect;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_SAMPLER_1D_ARRAY")]
public static GlslTypeToken UnsignedIntSampler1DArray;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_SAMPLER_2D_ARRAY")]
public static GlslTypeToken UnsignedIntSampler2DArray;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_SAMPLER_BUFFER")]
public static GlslTypeToken UnsignedIntSamplerBuffer;
    [NativeNameAttribute("Name", "GL_DOUBLE_MAT2")]
public static GlslTypeToken DoubleMat2;
    [NativeNameAttribute("Name", "GL_DOUBLE_MAT3")]
public static GlslTypeToken DoubleMat3;
    [NativeNameAttribute("Name", "GL_DOUBLE_MAT4")]
public static GlslTypeToken DoubleMat4;
    [NativeNameAttribute("Name", "GL_DOUBLE_VEC2")]
public static GlslTypeToken DoubleVec2;
    [NativeNameAttribute("Name", "GL_DOUBLE_VEC3")]
public static GlslTypeToken DoubleVec3;
    [NativeNameAttribute("Name", "GL_DOUBLE_VEC4")]
public static GlslTypeToken DoubleVec4;
    [NativeNameAttribute("Name", "GL_SAMPLER_CUBE_MAP_ARRAY")]
public static GlslTypeToken SamplerCubeMapArray;
    [NativeNameAttribute("Name", "GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW")]
public static GlslTypeToken SamplerCubeMapArrayShadow;
    [NativeNameAttribute("Name", "GL_INT_SAMPLER_CUBE_MAP_ARRAY")]
public static GlslTypeToken IntSamplerCubeMapArray;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY")]
public static GlslTypeToken UnsignedIntSamplerCubeMapArray;
    [NativeNameAttribute("Name", "GL_IMAGE_1D")]
public static GlslTypeToken Image1D;
    [NativeNameAttribute("Name", "GL_IMAGE_2D")]
public static GlslTypeToken Image2D;
    [NativeNameAttribute("Name", "GL_IMAGE_3D")]
public static GlslTypeToken Image3D;
    [NativeNameAttribute("Name", "GL_IMAGE_2D_RECT")]
public static GlslTypeToken Image2DRect;
    [NativeNameAttribute("Name", "GL_IMAGE_CUBE")]
public static GlslTypeToken ImageCube;
    [NativeNameAttribute("Name", "GL_IMAGE_BUFFER")]
public static GlslTypeToken ImageBuffer;
    [NativeNameAttribute("Name", "GL_IMAGE_1D_ARRAY")]
public static GlslTypeToken Image1DArray;
    [NativeNameAttribute("Name", "GL_IMAGE_2D_ARRAY")]
public static GlslTypeToken Image2DArray;
    [NativeNameAttribute("Name", "GL_IMAGE_CUBE_MAP_ARRAY")]
public static GlslTypeToken ImageCubeMapArray;
    [NativeNameAttribute("Name", "GL_IMAGE_2D_MULTISAMPLE")]
public static GlslTypeToken Image2DMultisample;
    [NativeNameAttribute("Name", "GL_IMAGE_2D_MULTISAMPLE_ARRAY")]
public static GlslTypeToken Image2DMultisampleArray;
    [NativeNameAttribute("Name", "GL_INT_IMAGE_1D")]
public static GlslTypeToken IntImage1D;
    [NativeNameAttribute("Name", "GL_INT_IMAGE_2D")]
public static GlslTypeToken IntImage2D;
    [NativeNameAttribute("Name", "GL_INT_IMAGE_3D")]
public static GlslTypeToken IntImage3D;
    [NativeNameAttribute("Name", "GL_INT_IMAGE_2D_RECT")]
public static GlslTypeToken IntImage2DRect;
    [NativeNameAttribute("Name", "GL_INT_IMAGE_CUBE")]
public static GlslTypeToken IntImageCube;
    [NativeNameAttribute("Name", "GL_INT_IMAGE_BUFFER")]
public static GlslTypeToken IntImageBuffer;
    [NativeNameAttribute("Name", "GL_INT_IMAGE_1D_ARRAY")]
public static GlslTypeToken IntImage1DArray;
    [NativeNameAttribute("Name", "GL_INT_IMAGE_2D_ARRAY")]
public static GlslTypeToken IntImage2DArray;
    [NativeNameAttribute("Name", "GL_INT_IMAGE_CUBE_MAP_ARRAY")]
public static GlslTypeToken IntImageCubeMapArray;
    [NativeNameAttribute("Name", "GL_INT_IMAGE_2D_MULTISAMPLE")]
public static GlslTypeToken IntImage2DMultisample;
    [NativeNameAttribute("Name", "GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY")]
public static GlslTypeToken IntImage2DMultisampleArray;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_IMAGE_1D")]
public static GlslTypeToken UnsignedIntImage1D;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_IMAGE_2D")]
public static GlslTypeToken UnsignedIntImage2D;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_IMAGE_3D")]
public static GlslTypeToken UnsignedIntImage3D;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_IMAGE_2D_RECT")]
public static GlslTypeToken UnsignedIntImage2DRect;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_IMAGE_CUBE")]
public static GlslTypeToken UnsignedIntImageCube;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_IMAGE_BUFFER")]
public static GlslTypeToken UnsignedIntImageBuffer;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_IMAGE_1D_ARRAY")]
public static GlslTypeToken UnsignedIntImage1DArray;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_IMAGE_2D_ARRAY")]
public static GlslTypeToken UnsignedIntImage2DArray;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY")]
public static GlslTypeToken UnsignedIntImageCubeMapArray;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE")]
public static GlslTypeToken UnsignedIntImage2DMultisample;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY")]
public static GlslTypeToken UnsignedIntImage2DMultisampleArray;
    [NativeNameAttribute("Name", "GL_SAMPLER_2D_MULTISAMPLE")]
public static GlslTypeToken Sampler2DMultisample;
    [NativeNameAttribute("Name", "GL_INT_SAMPLER_2D_MULTISAMPLE")]
public static GlslTypeToken IntSampler2DMultisample;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE")]
public static GlslTypeToken UnsignedIntSampler2DMultisample;
    [NativeNameAttribute("Name", "GL_SAMPLER_2D_MULTISAMPLE_ARRAY")]
public static GlslTypeToken Sampler2DMultisampleArray;
    [NativeNameAttribute("Name", "GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY")]
public static GlslTypeToken IntSampler2DMultisampleArray;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY")]
public static GlslTypeToken UnsignedIntSampler2DMultisampleArray;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_ATOMIC_COUNTER")]
public static GlslTypeToken UnsignedIntAtomicCounter;
}
[NativeNameAttribute("Name", "GraphicsResetStatus")]
public enum Silk.NET.OpenGL.GraphicsResetStatus : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_NO_ERROR")]
public static GraphicsResetStatus NoError;
    [NativeNameAttribute("Name", "GL_GUILTY_CONTEXT_RESET")]
public static GraphicsResetStatus GuiltyContextReset;
    [NativeNameAttribute("Name", "GL_INNOCENT_CONTEXT_RESET")]
public static GraphicsResetStatus InnocentContextReset;
    [NativeNameAttribute("Name", "GL_UNKNOWN_CONTEXT_RESET")]
public static GraphicsResetStatus UnknownContextReset;
}
[NativeNameAttribute("Name", "HintMode")]
public enum Silk.NET.OpenGL.HintMode : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_DONT_CARE")]
public static HintMode DontCare;
    [NativeNameAttribute("Name", "GL_FASTEST")]
public static HintMode Fastest;
    [NativeNameAttribute("Name", "GL_NICEST")]
public static HintMode Nicest;
}
[NativeNameAttribute("Name", "HintTarget")]
public enum Silk.NET.OpenGL.HintTarget : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_LINE_SMOOTH_HINT")]
public static HintTarget LineSmoothHint;
    [NativeNameAttribute("Name", "GL_POLYGON_SMOOTH_HINT")]
public static HintTarget PolygonSmoothHint;
    [NativeNameAttribute("Name", "GL_PACK_CMYK_HINT_EXT")]
public static HintTarget PackCmykHintExt;
    [NativeNameAttribute("Name", "GL_UNPACK_CMYK_HINT_EXT")]
public static HintTarget UnpackCmykHintExt;
    [NativeNameAttribute("Name", "GL_PHONG_HINT_WIN")]
public static HintTarget PhongHintWin;
    [NativeNameAttribute("Name", "GL_CLIP_VOLUME_CLIPPING_HINT_EXT")]
public static HintTarget ClipVolumeClippingHintExt;
    [NativeNameAttribute("Name", "GL_TEXTURE_MULTI_BUFFER_HINT_SGIX")]
public static HintTarget TextureMultiBufferHintSgix;
    [NativeNameAttribute("Name", "GL_GENERATE_MIPMAP_HINT_SGIS")]
public static HintTarget GenerateMipmapHintSgis;
    [NativeNameAttribute("Name", "GL_PROGRAM_BINARY_RETRIEVABLE_HINT")]
public static HintTarget ProgramBinaryRetrievableHint;
    [NativeNameAttribute("Name", "GL_CONVOLUTION_HINT_SGIX")]
public static HintTarget ConvolutionHintSgix;
    [NativeNameAttribute("Name", "GL_SCALEBIAS_HINT_SGIX")]
public static HintTarget ScalebiasHintSgix;
    [NativeNameAttribute("Name", "GL_LINE_QUALITY_HINT_SGIX")]
public static HintTarget LineQualityHintSgix;
    [NativeNameAttribute("Name", "GL_VERTEX_PRECLIP_SGIX")]
public static HintTarget VertexPreclipSgix;
    [NativeNameAttribute("Name", "GL_VERTEX_PRECLIP_HINT_SGIX")]
public static HintTarget VertexPreclipHintSgix;
    [NativeNameAttribute("Name", "GL_TEXTURE_COMPRESSION_HINT")]
public static HintTarget TextureCompressionHint;
    [NativeNameAttribute("Name", "GL_TEXTURE_COMPRESSION_HINT_ARB")]
public static HintTarget TextureCompressionHintArb;
    [NativeNameAttribute("Name", "GL_VERTEX_ARRAY_STORAGE_HINT_APPLE")]
public static HintTarget VertexArrayStorageHintApple;
    [NativeNameAttribute("Name", "GL_MULTISAMPLE_FILTER_HINT_NV")]
public static HintTarget MultisampleFilterHintNV;
    [NativeNameAttribute("Name", "GL_TRANSFORM_HINT_APPLE")]
public static HintTarget TransformHintApple;
    [NativeNameAttribute("Name", "GL_TEXTURE_STORAGE_HINT_APPLE")]
public static HintTarget TextureStorageHintApple;
    [NativeNameAttribute("Name", "GL_FRAGMENT_SHADER_DERIVATIVE_HINT")]
public static HintTarget FragmentShaderDerivativeHint;
    [NativeNameAttribute("Name", "GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB")]
public static HintTarget FragmentShaderDerivativeHintArb;
    [NativeNameAttribute("Name", "GL_FRAGMENT_SHADER_DERIVATIVE_HINT_OES")]
public static HintTarget FragmentShaderDerivativeHintOes;
    [NativeNameAttribute("Name", "GL_BINNING_CONTROL_HINT_QCOM")]
public static HintTarget BinningControlHintQCom;
    [NativeNameAttribute("Name", "GL_PREFER_DOUBLEBUFFER_HINT_PGI")]
public static HintTarget PreferDoublebufferHintPgi;
    [NativeNameAttribute("Name", "GL_CONSERVE_MEMORY_HINT_PGI")]
public static HintTarget ConserveMemoryHintPgi;
    [NativeNameAttribute("Name", "GL_RECLAIM_MEMORY_HINT_PGI")]
public static HintTarget ReclaimMemoryHintPgi;
    [NativeNameAttribute("Name", "GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI")]
public static HintTarget NativeGraphicsBeginHintPgi;
    [NativeNameAttribute("Name", "GL_NATIVE_GRAPHICS_END_HINT_PGI")]
public static HintTarget NativeGraphicsEndHintPgi;
    [NativeNameAttribute("Name", "GL_ALWAYS_FAST_HINT_PGI")]
public static HintTarget AlwaysFastHintPgi;
    [NativeNameAttribute("Name", "GL_ALWAYS_SOFT_HINT_PGI")]
public static HintTarget AlwaysSoftHintPgi;
    [NativeNameAttribute("Name", "GL_ALLOW_DRAW_OBJ_HINT_PGI")]
public static HintTarget AllowDrawObjHintPgi;
    [NativeNameAttribute("Name", "GL_ALLOW_DRAW_WIN_HINT_PGI")]
public static HintTarget AllowDrawWinHintPgi;
    [NativeNameAttribute("Name", "GL_ALLOW_DRAW_FRG_HINT_PGI")]
public static HintTarget AllowDrawFrgHintPgi;
    [NativeNameAttribute("Name", "GL_ALLOW_DRAW_MEM_HINT_PGI")]
public static HintTarget AllowDrawMemHintPgi;
    [NativeNameAttribute("Name", "GL_STRICT_DEPTHFUNC_HINT_PGI")]
public static HintTarget StrictDepthfuncHintPgi;
    [NativeNameAttribute("Name", "GL_STRICT_LIGHTING_HINT_PGI")]
public static HintTarget StrictLightingHintPgi;
    [NativeNameAttribute("Name", "GL_STRICT_SCISSOR_HINT_PGI")]
public static HintTarget StrictScissorHintPgi;
    [NativeNameAttribute("Name", "GL_FULL_STIPPLE_HINT_PGI")]
public static HintTarget FullStippleHintPgi;
    [NativeNameAttribute("Name", "GL_CLIP_NEAR_HINT_PGI")]
public static HintTarget ClipNearHintPgi;
    [NativeNameAttribute("Name", "GL_CLIP_FAR_HINT_PGI")]
public static HintTarget ClipFarHintPgi;
    [NativeNameAttribute("Name", "GL_WIDE_LINE_HINT_PGI")]
public static HintTarget WideLineHintPgi;
    [NativeNameAttribute("Name", "GL_BACK_NORMALS_HINT_PGI")]
public static HintTarget BackNormalsHintPgi;
    [NativeNameAttribute("Name", "GL_VERTEX_DATA_HINT_PGI")]
public static HintTarget VertexDataHintPgi;
    [NativeNameAttribute("Name", "GL_VERTEX_CONSISTENT_HINT_PGI")]
public static HintTarget VertexConsistentHintPgi;
    [NativeNameAttribute("Name", "GL_MATERIAL_SIDE_HINT_PGI")]
public static HintTarget MaterialSideHintPgi;
    [NativeNameAttribute("Name", "GL_MAX_VERTEX_HINT_PGI")]
public static HintTarget MaxVertexHintPgi;
}
[NativeNameAttribute("Name", "HintTargetPGI")]
public enum Silk.NET.OpenGL.HintTargetPGI : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_VERTEX_DATA_HINT_PGI")]
public static HintTargetPGI VertexDataHintPgi;
    [NativeNameAttribute("Name", "GL_VERTEX_CONSISTENT_HINT_PGI")]
public static HintTargetPGI VertexConsistentHintPgi;
    [NativeNameAttribute("Name", "GL_MATERIAL_SIDE_HINT_PGI")]
public static HintTargetPGI MaterialSideHintPgi;
    [NativeNameAttribute("Name", "GL_MAX_VERTEX_HINT_PGI")]
public static HintTargetPGI MaxVertexHintPgi;
}
[NativeNameAttribute("Name", "HistogramTarget")]
public enum Silk.NET.OpenGL.HistogramTarget : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_HISTOGRAM")]
public static HistogramTarget Histogram;
    [NativeNameAttribute("Name", "GL_PROXY_HISTOGRAM")]
public static HistogramTarget ProxyHistogram;
}
[NativeNameAttribute("Name", "HistogramTargetEXT")]
public enum Silk.NET.OpenGL.HistogramTargetEXT : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_HISTOGRAM")]
public static HistogramTargetEXT Histogram;
    [NativeNameAttribute("Name", "GL_HISTOGRAM_EXT")]
public static HistogramTargetEXT HistogramExt;
    [NativeNameAttribute("Name", "GL_PROXY_HISTOGRAM")]
public static HistogramTargetEXT ProxyHistogram;
    [NativeNameAttribute("Name", "GL_PROXY_HISTOGRAM_EXT")]
public static HistogramTargetEXT ProxyHistogramExt;
}
[NativeNameAttribute("Name", "ImageTransformPNameHP")]
public enum Silk.NET.OpenGL.ImageTransformPNameHP : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_IMAGE_SCALE_X_HP")]
public static ImageTransformPNameHP ImageScaleXHP;
    [NativeNameAttribute("Name", "GL_IMAGE_SCALE_Y_HP")]
public static ImageTransformPNameHP ImageScaleYHP;
    [NativeNameAttribute("Name", "GL_IMAGE_TRANSLATE_X_HP")]
public static ImageTransformPNameHP ImageTranslateXHP;
    [NativeNameAttribute("Name", "GL_IMAGE_TRANSLATE_Y_HP")]
public static ImageTransformPNameHP ImageTranslateYHP;
    [NativeNameAttribute("Name", "GL_IMAGE_ROTATE_ANGLE_HP")]
public static ImageTransformPNameHP ImageRotateAngleHP;
    [NativeNameAttribute("Name", "GL_IMAGE_ROTATE_ORIGIN_X_HP")]
public static ImageTransformPNameHP ImageRotateOriginXHP;
    [NativeNameAttribute("Name", "GL_IMAGE_ROTATE_ORIGIN_Y_HP")]
public static ImageTransformPNameHP ImageRotateOriginYHP;
    [NativeNameAttribute("Name", "GL_IMAGE_MAG_FILTER_HP")]
public static ImageTransformPNameHP ImageMagFilterHP;
    [NativeNameAttribute("Name", "GL_IMAGE_MIN_FILTER_HP")]
public static ImageTransformPNameHP ImageMinFilterHP;
    [NativeNameAttribute("Name", "GL_IMAGE_CUBIC_WEIGHT_HP")]
public static ImageTransformPNameHP ImageCubicWeightHP;
}
[NativeNameAttribute("Name", "ImageTransformTargetHP")]
public enum Silk.NET.OpenGL.ImageTransformTargetHP : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_IMAGE_TRANSFORM_2D_HP")]
public static ImageTransformTargetHP ImageTransform2DHP;
}
[NativeNameAttribute("Name", "IndexFunctionEXT")]
public enum Silk.NET.OpenGL.IndexFunctionEXT : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_NEVER")]
public static IndexFunctionEXT Never;
    [NativeNameAttribute("Name", "GL_LESS")]
public static IndexFunctionEXT Less;
    [NativeNameAttribute("Name", "GL_EQUAL")]
public static IndexFunctionEXT Equal;
    [NativeNameAttribute("Name", "GL_LEQUAL")]
public static IndexFunctionEXT Lequal;
    [NativeNameAttribute("Name", "GL_GREATER")]
public static IndexFunctionEXT Greater;
    [NativeNameAttribute("Name", "GL_NOTEQUAL")]
public static IndexFunctionEXT Notequal;
    [NativeNameAttribute("Name", "GL_GEQUAL")]
public static IndexFunctionEXT Gequal;
    [NativeNameAttribute("Name", "GL_ALWAYS")]
public static IndexFunctionEXT Always;
}
[NativeNameAttribute("Name", "IndexMaterialParameterEXT")]
public enum Silk.NET.OpenGL.IndexMaterialParameterEXT : Enum {
    public int value__;
}
[NativeNameAttribute("Name", "IndexPointerType")]
public enum Silk.NET.OpenGL.IndexPointerType : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_SHORT")]
public static IndexPointerType Short;
    [NativeNameAttribute("Name", "GL_INT")]
public static IndexPointerType Int;
    [NativeNameAttribute("Name", "GL_FLOAT")]
public static IndexPointerType Float;
    [NativeNameAttribute("Name", "GL_DOUBLE")]
public static IndexPointerType Double;
}
[NativeNameAttribute("Name", "InterleavedArrayFormat")]
public enum Silk.NET.OpenGL.InterleavedArrayFormat : Enum {
    public int value__;
}
[NativeNameAttribute("Name", "InternalFormat")]
public enum Silk.NET.OpenGL.InternalFormat : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_STENCIL_INDEX")]
public static InternalFormat StencilIndex;
    [NativeNameAttribute("Name", "GL_STENCIL_INDEX_OES")]
public static InternalFormat StencilIndexOes;
    [NativeNameAttribute("Name", "GL_DEPTH_COMPONENT")]
public static InternalFormat DepthComponent;
    [NativeNameAttribute("Name", "GL_RED")]
public static InternalFormat Red;
    [NativeNameAttribute("Name", "GL_RED_EXT")]
public static InternalFormat RedExt;
    [NativeNameAttribute("Name", "GL_RGB")]
public static InternalFormat Rgb;
    [NativeNameAttribute("Name", "GL_RGBA")]
public static InternalFormat Rgba;
    [NativeNameAttribute("Name", "GL_R3_G3_B2")]
public static InternalFormat R3G3B2;
    [NativeNameAttribute("Name", "GL_ALPHA4_EXT")]
public static InternalFormat Alpha4Ext;
    [NativeNameAttribute("Name", "GL_ALPHA8_EXT")]
public static InternalFormat Alpha8Ext;
    [NativeNameAttribute("Name", "GL_ALPHA8_OES")]
public static InternalFormat Alpha8Oes;
    [NativeNameAttribute("Name", "GL_ALPHA12_EXT")]
public static InternalFormat Alpha12Ext;
    [NativeNameAttribute("Name", "GL_ALPHA16_EXT")]
public static InternalFormat Alpha16Ext;
    [NativeNameAttribute("Name", "GL_LUMINANCE4_EXT")]
public static InternalFormat Luminance4Ext;
    [NativeNameAttribute("Name", "GL_LUMINANCE8_EXT")]
public static InternalFormat Luminance8Ext;
    [NativeNameAttribute("Name", "GL_LUMINANCE8_OES")]
public static InternalFormat Luminance8Oes;
    [NativeNameAttribute("Name", "GL_LUMINANCE12_EXT")]
public static InternalFormat Luminance12Ext;
    [NativeNameAttribute("Name", "GL_LUMINANCE16_EXT")]
public static InternalFormat Luminance16Ext;
    [NativeNameAttribute("Name", "GL_LUMINANCE4_ALPHA4_EXT")]
public static InternalFormat Luminance4Alpha4Ext;
    [NativeNameAttribute("Name", "GL_LUMINANCE4_ALPHA4_OES")]
public static InternalFormat Luminance4Alpha4Oes;
    [NativeNameAttribute("Name", "GL_LUMINANCE6_ALPHA2_EXT")]
public static InternalFormat Luminance6Alpha2Ext;
    [NativeNameAttribute("Name", "GL_LUMINANCE8_ALPHA8_EXT")]
public static InternalFormat Luminance8Alpha8Ext;
    [NativeNameAttribute("Name", "GL_LUMINANCE8_ALPHA8_OES")]
public static InternalFormat Luminance8Alpha8Oes;
    [NativeNameAttribute("Name", "GL_LUMINANCE12_ALPHA4_EXT")]
public static InternalFormat Luminance12Alpha4Ext;
    [NativeNameAttribute("Name", "GL_LUMINANCE12_ALPHA12_EXT")]
public static InternalFormat Luminance12Alpha12Ext;
    [NativeNameAttribute("Name", "GL_LUMINANCE16_ALPHA16_EXT")]
public static InternalFormat Luminance16Alpha16Ext;
    [NativeNameAttribute("Name", "GL_INTENSITY4_EXT")]
public static InternalFormat Intensity4Ext;
    [NativeNameAttribute("Name", "GL_INTENSITY8_EXT")]
public static InternalFormat Intensity8Ext;
    [NativeNameAttribute("Name", "GL_INTENSITY12_EXT")]
public static InternalFormat Intensity12Ext;
    [NativeNameAttribute("Name", "GL_INTENSITY16_EXT")]
public static InternalFormat Intensity16Ext;
    [NativeNameAttribute("Name", "GL_RGB2_EXT")]
public static InternalFormat Rgb2Ext;
    [NativeNameAttribute("Name", "GL_RGB4")]
public static InternalFormat Rgb4;
    [NativeNameAttribute("Name", "GL_RGB4_EXT")]
public static InternalFormat Rgb4Ext;
    [NativeNameAttribute("Name", "GL_RGB5")]
public static InternalFormat Rgb5;
    [NativeNameAttribute("Name", "GL_RGB5_EXT")]
public static InternalFormat Rgb5Ext;
    [NativeNameAttribute("Name", "GL_RGB8")]
public static InternalFormat Rgb8;
    [NativeNameAttribute("Name", "GL_RGB8_EXT")]
public static InternalFormat Rgb8Ext;
    [NativeNameAttribute("Name", "GL_RGB8_OES")]
public static InternalFormat Rgb8Oes;
    [NativeNameAttribute("Name", "GL_RGB10")]
public static InternalFormat Rgb10;
    [NativeNameAttribute("Name", "GL_RGB10_EXT")]
public static InternalFormat Rgb10Ext;
    [NativeNameAttribute("Name", "GL_RGB12")]
public static InternalFormat Rgb12;
    [NativeNameAttribute("Name", "GL_RGB12_EXT")]
public static InternalFormat Rgb12Ext;
    [NativeNameAttribute("Name", "GL_RGB16")]
public static InternalFormat Rgb16;
    [NativeNameAttribute("Name", "GL_RGB16_EXT")]
public static InternalFormat Rgb16Ext;
    [NativeNameAttribute("Name", "GL_RGBA2")]
public static InternalFormat Rgba2;
    [NativeNameAttribute("Name", "GL_RGBA2_EXT")]
public static InternalFormat Rgba2Ext;
    [NativeNameAttribute("Name", "GL_RGBA4")]
public static InternalFormat Rgba4;
    [NativeNameAttribute("Name", "GL_RGBA4_EXT")]
public static InternalFormat Rgba4Ext;
    [NativeNameAttribute("Name", "GL_RGBA4_OES")]
public static InternalFormat Rgba4Oes;
    [NativeNameAttribute("Name", "GL_RGB5_A1")]
public static InternalFormat Rgb5A1;
    [NativeNameAttribute("Name", "GL_RGB5_A1_EXT")]
public static InternalFormat Rgb5A1Ext;
    [NativeNameAttribute("Name", "GL_RGB5_A1_OES")]
public static InternalFormat Rgb5A1Oes;
    [NativeNameAttribute("Name", "GL_RGBA8")]
public static InternalFormat Rgba8;
    [NativeNameAttribute("Name", "GL_RGBA8_EXT")]
public static InternalFormat Rgba8Ext;
    [NativeNameAttribute("Name", "GL_RGBA8_OES")]
public static InternalFormat Rgba8Oes;
    [NativeNameAttribute("Name", "GL_RGB10_A2")]
public static InternalFormat Rgb10A2;
    [NativeNameAttribute("Name", "GL_RGB10_A2_EXT")]
public static InternalFormat Rgb10A2Ext;
    [NativeNameAttribute("Name", "GL_RGBA12")]
public static InternalFormat Rgba12;
    [NativeNameAttribute("Name", "GL_RGBA12_EXT")]
public static InternalFormat Rgba12Ext;
    [NativeNameAttribute("Name", "GL_RGBA16")]
public static InternalFormat Rgba16;
    [NativeNameAttribute("Name", "GL_RGBA16_EXT")]
public static InternalFormat Rgba16Ext;
    [NativeNameAttribute("Name", "GL_DUAL_ALPHA4_SGIS")]
public static InternalFormat DualAlpha4Sgis;
    [NativeNameAttribute("Name", "GL_DUAL_ALPHA8_SGIS")]
public static InternalFormat DualAlpha8Sgis;
    [NativeNameAttribute("Name", "GL_DUAL_ALPHA12_SGIS")]
public static InternalFormat DualAlpha12Sgis;
    [NativeNameAttribute("Name", "GL_DUAL_ALPHA16_SGIS")]
public static InternalFormat DualAlpha16Sgis;
    [NativeNameAttribute("Name", "GL_DUAL_LUMINANCE4_SGIS")]
public static InternalFormat DualLuminance4Sgis;
    [NativeNameAttribute("Name", "GL_DUAL_LUMINANCE8_SGIS")]
public static InternalFormat DualLuminance8Sgis;
    [NativeNameAttribute("Name", "GL_DUAL_LUMINANCE12_SGIS")]
public static InternalFormat DualLuminance12Sgis;
    [NativeNameAttribute("Name", "GL_DUAL_LUMINANCE16_SGIS")]
public static InternalFormat DualLuminance16Sgis;
    [NativeNameAttribute("Name", "GL_DUAL_INTENSITY4_SGIS")]
public static InternalFormat DualIntensity4Sgis;
    [NativeNameAttribute("Name", "GL_DUAL_INTENSITY8_SGIS")]
public static InternalFormat DualIntensity8Sgis;
    [NativeNameAttribute("Name", "GL_DUAL_INTENSITY12_SGIS")]
public static InternalFormat DualIntensity12Sgis;
    [NativeNameAttribute("Name", "GL_DUAL_INTENSITY16_SGIS")]
public static InternalFormat DualIntensity16Sgis;
    [NativeNameAttribute("Name", "GL_DUAL_LUMINANCE_ALPHA4_SGIS")]
public static InternalFormat DualLuminanceAlpha4Sgis;
    [NativeNameAttribute("Name", "GL_DUAL_LUMINANCE_ALPHA8_SGIS")]
public static InternalFormat DualLuminanceAlpha8Sgis;
    [NativeNameAttribute("Name", "GL_QUAD_ALPHA4_SGIS")]
public static InternalFormat QuadAlpha4Sgis;
    [NativeNameAttribute("Name", "GL_QUAD_ALPHA8_SGIS")]
public static InternalFormat QuadAlpha8Sgis;
    [NativeNameAttribute("Name", "GL_QUAD_LUMINANCE4_SGIS")]
public static InternalFormat QuadLuminance4Sgis;
    [NativeNameAttribute("Name", "GL_QUAD_LUMINANCE8_SGIS")]
public static InternalFormat QuadLuminance8Sgis;
    [NativeNameAttribute("Name", "GL_QUAD_INTENSITY4_SGIS")]
public static InternalFormat QuadIntensity4Sgis;
    [NativeNameAttribute("Name", "GL_QUAD_INTENSITY8_SGIS")]
public static InternalFormat QuadIntensity8Sgis;
    [NativeNameAttribute("Name", "GL_DEPTH_COMPONENT16")]
public static InternalFormat DepthComponent16;
    [NativeNameAttribute("Name", "GL_DEPTH_COMPONENT16_ARB")]
public static InternalFormat DepthComponent16Arb;
    [NativeNameAttribute("Name", "GL_DEPTH_COMPONENT16_OES")]
public static InternalFormat DepthComponent16Oes;
    [NativeNameAttribute("Name", "GL_DEPTH_COMPONENT16_SGIX")]
public static InternalFormat DepthComponent16Sgix;
    [NativeNameAttribute("Name", "GL_DEPTH_COMPONENT24")]
public static InternalFormat DepthComponent24;
    [NativeNameAttribute("Name", "GL_DEPTH_COMPONENT24_ARB")]
public static InternalFormat DepthComponent24Arb;
    [NativeNameAttribute("Name", "GL_DEPTH_COMPONENT24_OES")]
public static InternalFormat DepthComponent24Oes;
    [NativeNameAttribute("Name", "GL_DEPTH_COMPONENT24_SGIX")]
public static InternalFormat DepthComponent24Sgix;
    [NativeNameAttribute("Name", "GL_DEPTH_COMPONENT32")]
public static InternalFormat DepthComponent32;
    [NativeNameAttribute("Name", "GL_DEPTH_COMPONENT32_ARB")]
public static InternalFormat DepthComponent32Arb;
    [NativeNameAttribute("Name", "GL_DEPTH_COMPONENT32_OES")]
public static InternalFormat DepthComponent32Oes;
    [NativeNameAttribute("Name", "GL_DEPTH_COMPONENT32_SGIX")]
public static InternalFormat DepthComponent32Sgix;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RED")]
public static InternalFormat CompressedRed;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RG")]
public static InternalFormat CompressedRG;
    [NativeNameAttribute("Name", "GL_RG")]
public static InternalFormat RG;
    [NativeNameAttribute("Name", "GL_R8")]
public static InternalFormat R8;
    [NativeNameAttribute("Name", "GL_R8_EXT")]
public static InternalFormat R8Ext;
    [NativeNameAttribute("Name", "GL_R16")]
public static InternalFormat R16;
    [NativeNameAttribute("Name", "GL_R16_EXT")]
public static InternalFormat R16Ext;
    [NativeNameAttribute("Name", "GL_RG8")]
public static InternalFormat RG8;
    [NativeNameAttribute("Name", "GL_RG8_EXT")]
public static InternalFormat RG8Ext;
    [NativeNameAttribute("Name", "GL_RG16")]
public static InternalFormat RG16;
    [NativeNameAttribute("Name", "GL_RG16_EXT")]
public static InternalFormat RG16Ext;
    [NativeNameAttribute("Name", "GL_R16F")]
public static InternalFormat R16f;
    [NativeNameAttribute("Name", "GL_R16F_EXT")]
public static InternalFormat R16fExt;
    [NativeNameAttribute("Name", "GL_R32F")]
public static InternalFormat R32f;
    [NativeNameAttribute("Name", "GL_R32F_EXT")]
public static InternalFormat R32fExt;
    [NativeNameAttribute("Name", "GL_RG16F")]
public static InternalFormat RG16f;
    [NativeNameAttribute("Name", "GL_RG16F_EXT")]
public static InternalFormat RG16fExt;
    [NativeNameAttribute("Name", "GL_RG32F")]
public static InternalFormat RG32f;
    [NativeNameAttribute("Name", "GL_RG32F_EXT")]
public static InternalFormat RG32fExt;
    [NativeNameAttribute("Name", "GL_R8I")]
public static InternalFormat R8i;
    [NativeNameAttribute("Name", "GL_R8UI")]
public static InternalFormat R8ui;
    [NativeNameAttribute("Name", "GL_R16I")]
public static InternalFormat R16i;
    [NativeNameAttribute("Name", "GL_R16UI")]
public static InternalFormat R16ui;
    [NativeNameAttribute("Name", "GL_R32I")]
public static InternalFormat R32i;
    [NativeNameAttribute("Name", "GL_R32UI")]
public static InternalFormat R32ui;
    [NativeNameAttribute("Name", "GL_RG8I")]
public static InternalFormat RG8i;
    [NativeNameAttribute("Name", "GL_RG8UI")]
public static InternalFormat RG8ui;
    [NativeNameAttribute("Name", "GL_RG16I")]
public static InternalFormat RG16i;
    [NativeNameAttribute("Name", "GL_RG16UI")]
public static InternalFormat RG16ui;
    [NativeNameAttribute("Name", "GL_RG32I")]
public static InternalFormat RG32i;
    [NativeNameAttribute("Name", "GL_RG32UI")]
public static InternalFormat RG32ui;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGB_S3TC_DXT1_EXT")]
public static InternalFormat CompressedRgbS3TCDxt1Ext;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_S3TC_DXT1_EXT")]
public static InternalFormat CompressedRgbaS3TCDxt1Ext;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE")]
public static InternalFormat CompressedRgbaS3TCDxt3Angle;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_S3TC_DXT3_EXT")]
public static InternalFormat CompressedRgbaS3TCDxt3Ext;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE")]
public static InternalFormat CompressedRgbaS3TCDxt5Angle;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_S3TC_DXT5_EXT")]
public static InternalFormat CompressedRgbaS3TCDxt5Ext;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGB")]
public static InternalFormat CompressedRgb;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA")]
public static InternalFormat CompressedRgba;
    [NativeNameAttribute("Name", "GL_DEPTH_STENCIL")]
public static InternalFormat DepthStencil;
    [NativeNameAttribute("Name", "GL_DEPTH_STENCIL_EXT")]
public static InternalFormat DepthStencilExt;
    [NativeNameAttribute("Name", "GL_DEPTH_STENCIL_NV")]
public static InternalFormat DepthStencilNV;
    [NativeNameAttribute("Name", "GL_DEPTH_STENCIL_OES")]
public static InternalFormat DepthStencilOes;
    [NativeNameAttribute("Name", "GL_DEPTH_STENCIL_MESA")]
public static InternalFormat DepthStencilMesa;
    [NativeNameAttribute("Name", "GL_RGBA32F")]
public static InternalFormat Rgba32f;
    [NativeNameAttribute("Name", "GL_RGBA32F_ARB")]
public static InternalFormat Rgba32fArb;
    [NativeNameAttribute("Name", "GL_RGBA32F_EXT")]
public static InternalFormat Rgba32fExt;
    [NativeNameAttribute("Name", "GL_RGB32F")]
public static InternalFormat Rgb32f;
    [NativeNameAttribute("Name", "GL_RGB32F_ARB")]
public static InternalFormat Rgb32fArb;
    [NativeNameAttribute("Name", "GL_RGB32F_EXT")]
public static InternalFormat Rgb32fExt;
    [NativeNameAttribute("Name", "GL_RGBA16F")]
public static InternalFormat Rgba16f;
    [NativeNameAttribute("Name", "GL_RGBA16F_ARB")]
public static InternalFormat Rgba16fArb;
    [NativeNameAttribute("Name", "GL_RGBA16F_EXT")]
public static InternalFormat Rgba16fExt;
    [NativeNameAttribute("Name", "GL_RGB16F")]
public static InternalFormat Rgb16f;
    [NativeNameAttribute("Name", "GL_RGB16F_ARB")]
public static InternalFormat Rgb16fArb;
    [NativeNameAttribute("Name", "GL_RGB16F_EXT")]
public static InternalFormat Rgb16fExt;
    [NativeNameAttribute("Name", "GL_DEPTH24_STENCIL8")]
public static InternalFormat Depth24Stencil8;
    [NativeNameAttribute("Name", "GL_DEPTH24_STENCIL8_EXT")]
public static InternalFormat Depth24Stencil8Ext;
    [NativeNameAttribute("Name", "GL_DEPTH24_STENCIL8_OES")]
public static InternalFormat Depth24Stencil8Oes;
    [NativeNameAttribute("Name", "GL_R11F_G11F_B10F")]
public static InternalFormat R11fG11fB10f;
    [NativeNameAttribute("Name", "GL_R11F_G11F_B10F_APPLE")]
public static InternalFormat R11fG11fB10fApple;
    [NativeNameAttribute("Name", "GL_R11F_G11F_B10F_EXT")]
public static InternalFormat R11fG11fB10fExt;
    [NativeNameAttribute("Name", "GL_RGB9_E5")]
public static InternalFormat Rgb9E5;
    [NativeNameAttribute("Name", "GL_RGB9_E5_APPLE")]
public static InternalFormat Rgb9E5Apple;
    [NativeNameAttribute("Name", "GL_RGB9_E5_EXT")]
public static InternalFormat Rgb9E5Ext;
    [NativeNameAttribute("Name", "GL_SRGB")]
public static InternalFormat Srgb;
    [NativeNameAttribute("Name", "GL_SRGB_EXT")]
public static InternalFormat SrgbExt;
    [NativeNameAttribute("Name", "GL_SRGB8")]
public static InternalFormat Srgb8;
    [NativeNameAttribute("Name", "GL_SRGB8_EXT")]
public static InternalFormat Srgb8Ext;
    [NativeNameAttribute("Name", "GL_SRGB8_NV")]
public static InternalFormat Srgb8NV;
    [NativeNameAttribute("Name", "GL_SRGB_ALPHA")]
public static InternalFormat SrgbAlpha;
    [NativeNameAttribute("Name", "GL_SRGB_ALPHA_EXT")]
public static InternalFormat SrgbAlphaExt;
    [NativeNameAttribute("Name", "GL_SRGB8_ALPHA8")]
public static InternalFormat Srgb8Alpha8;
    [NativeNameAttribute("Name", "GL_SRGB8_ALPHA8_EXT")]
public static InternalFormat Srgb8Alpha8Ext;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB")]
public static InternalFormat CompressedSrgb;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB_ALPHA")]
public static InternalFormat CompressedSrgbAlpha;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB_S3TC_DXT1_EXT")]
public static InternalFormat CompressedSrgbS3TCDxt1Ext;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB_S3TC_DXT1_NV")]
public static InternalFormat CompressedSrgbS3TCDxt1NV;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT")]
public static InternalFormat CompressedSrgbAlphaS3TCDxt1Ext;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_NV")]
public static InternalFormat CompressedSrgbAlphaS3TCDxt1NV;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT")]
public static InternalFormat CompressedSrgbAlphaS3TCDxt3Ext;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_NV")]
public static InternalFormat CompressedSrgbAlphaS3TCDxt3NV;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT")]
public static InternalFormat CompressedSrgbAlphaS3TCDxt5Ext;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_NV")]
public static InternalFormat CompressedSrgbAlphaS3TCDxt5NV;
    [NativeNameAttribute("Name", "GL_DEPTH_COMPONENT32F")]
public static InternalFormat DepthComponent32f;
    [NativeNameAttribute("Name", "GL_DEPTH32F_STENCIL8")]
public static InternalFormat Depth32fStencil8;
    [NativeNameAttribute("Name", "GL_STENCIL_INDEX1")]
public static InternalFormat StencilIndex1;
    [NativeNameAttribute("Name", "GL_STENCIL_INDEX1_EXT")]
public static InternalFormat StencilIndex1Ext;
    [NativeNameAttribute("Name", "GL_STENCIL_INDEX1_OES")]
public static InternalFormat StencilIndex1Oes;
    [NativeNameAttribute("Name", "GL_STENCIL_INDEX4")]
public static InternalFormat StencilIndex4;
    [NativeNameAttribute("Name", "GL_STENCIL_INDEX4_EXT")]
public static InternalFormat StencilIndex4Ext;
    [NativeNameAttribute("Name", "GL_STENCIL_INDEX4_OES")]
public static InternalFormat StencilIndex4Oes;
    [NativeNameAttribute("Name", "GL_STENCIL_INDEX8")]
public static InternalFormat StencilIndex8;
    [NativeNameAttribute("Name", "GL_STENCIL_INDEX8_EXT")]
public static InternalFormat StencilIndex8Ext;
    [NativeNameAttribute("Name", "GL_STENCIL_INDEX8_OES")]
public static InternalFormat StencilIndex8Oes;
    [NativeNameAttribute("Name", "GL_STENCIL_INDEX16")]
public static InternalFormat StencilIndex16;
    [NativeNameAttribute("Name", "GL_STENCIL_INDEX16_EXT")]
public static InternalFormat StencilIndex16Ext;
    [NativeNameAttribute("Name", "GL_RGB565_OES")]
public static InternalFormat Rgb565Oes;
    [NativeNameAttribute("Name", "GL_RGB565")]
public static InternalFormat Rgb565;
    [NativeNameAttribute("Name", "GL_ETC1_RGB8_OES")]
public static InternalFormat Etc1Rgb8Oes;
    [NativeNameAttribute("Name", "GL_RGBA32UI")]
public static InternalFormat Rgba32ui;
    [NativeNameAttribute("Name", "GL_RGBA32UI_EXT")]
public static InternalFormat Rgba32uiExt;
    [NativeNameAttribute("Name", "GL_RGB32UI")]
public static InternalFormat Rgb32ui;
    [NativeNameAttribute("Name", "GL_RGB32UI_EXT")]
public static InternalFormat Rgb32uiExt;
    [NativeNameAttribute("Name", "GL_ALPHA32UI_EXT")]
public static InternalFormat Alpha32uiExt;
    [NativeNameAttribute("Name", "GL_INTENSITY32UI_EXT")]
public static InternalFormat Intensity32uiExt;
    [NativeNameAttribute("Name", "GL_LUMINANCE32UI_EXT")]
public static InternalFormat Luminance32uiExt;
    [NativeNameAttribute("Name", "GL_LUMINANCE_ALPHA32UI_EXT")]
public static InternalFormat LuminanceAlpha32uiExt;
    [NativeNameAttribute("Name", "GL_RGBA16UI")]
public static InternalFormat Rgba16ui;
    [NativeNameAttribute("Name", "GL_RGBA16UI_EXT")]
public static InternalFormat Rgba16uiExt;
    [NativeNameAttribute("Name", "GL_RGB16UI")]
public static InternalFormat Rgb16ui;
    [NativeNameAttribute("Name", "GL_RGB16UI_EXT")]
public static InternalFormat Rgb16uiExt;
    [NativeNameAttribute("Name", "GL_ALPHA16UI_EXT")]
public static InternalFormat Alpha16uiExt;
    [NativeNameAttribute("Name", "GL_INTENSITY16UI_EXT")]
public static InternalFormat Intensity16uiExt;
    [NativeNameAttribute("Name", "GL_LUMINANCE16UI_EXT")]
public static InternalFormat Luminance16uiExt;
    [NativeNameAttribute("Name", "GL_LUMINANCE_ALPHA16UI_EXT")]
public static InternalFormat LuminanceAlpha16uiExt;
    [NativeNameAttribute("Name", "GL_RGBA8UI")]
public static InternalFormat Rgba8ui;
    [NativeNameAttribute("Name", "GL_RGBA8UI_EXT")]
public static InternalFormat Rgba8uiExt;
    [NativeNameAttribute("Name", "GL_RGB8UI")]
public static InternalFormat Rgb8ui;
    [NativeNameAttribute("Name", "GL_RGB8UI_EXT")]
public static InternalFormat Rgb8uiExt;
    [NativeNameAttribute("Name", "GL_ALPHA8UI_EXT")]
public static InternalFormat Alpha8uiExt;
    [NativeNameAttribute("Name", "GL_INTENSITY8UI_EXT")]
public static InternalFormat Intensity8uiExt;
    [NativeNameAttribute("Name", "GL_LUMINANCE8UI_EXT")]
public static InternalFormat Luminance8uiExt;
    [NativeNameAttribute("Name", "GL_LUMINANCE_ALPHA8UI_EXT")]
public static InternalFormat LuminanceAlpha8uiExt;
    [NativeNameAttribute("Name", "GL_RGBA32I")]
public static InternalFormat Rgba32i;
    [NativeNameAttribute("Name", "GL_RGBA32I_EXT")]
public static InternalFormat Rgba32iExt;
    [NativeNameAttribute("Name", "GL_RGB32I")]
public static InternalFormat Rgb32i;
    [NativeNameAttribute("Name", "GL_RGB32I_EXT")]
public static InternalFormat Rgb32iExt;
    [NativeNameAttribute("Name", "GL_ALPHA32I_EXT")]
public static InternalFormat Alpha32iExt;
    [NativeNameAttribute("Name", "GL_INTENSITY32I_EXT")]
public static InternalFormat Intensity32iExt;
    [NativeNameAttribute("Name", "GL_LUMINANCE32I_EXT")]
public static InternalFormat Luminance32iExt;
    [NativeNameAttribute("Name", "GL_LUMINANCE_ALPHA32I_EXT")]
public static InternalFormat LuminanceAlpha32iExt;
    [NativeNameAttribute("Name", "GL_RGBA16I")]
public static InternalFormat Rgba16i;
    [NativeNameAttribute("Name", "GL_RGBA16I_EXT")]
public static InternalFormat Rgba16iExt;
    [NativeNameAttribute("Name", "GL_RGB16I")]
public static InternalFormat Rgb16i;
    [NativeNameAttribute("Name", "GL_RGB16I_EXT")]
public static InternalFormat Rgb16iExt;
    [NativeNameAttribute("Name", "GL_ALPHA16I_EXT")]
public static InternalFormat Alpha16iExt;
    [NativeNameAttribute("Name", "GL_INTENSITY16I_EXT")]
public static InternalFormat Intensity16iExt;
    [NativeNameAttribute("Name", "GL_LUMINANCE16I_EXT")]
public static InternalFormat Luminance16iExt;
    [NativeNameAttribute("Name", "GL_LUMINANCE_ALPHA16I_EXT")]
public static InternalFormat LuminanceAlpha16iExt;
    [NativeNameAttribute("Name", "GL_RGBA8I")]
public static InternalFormat Rgba8i;
    [NativeNameAttribute("Name", "GL_RGBA8I_EXT")]
public static InternalFormat Rgba8iExt;
    [NativeNameAttribute("Name", "GL_RGB8I")]
public static InternalFormat Rgb8i;
    [NativeNameAttribute("Name", "GL_RGB8I_EXT")]
public static InternalFormat Rgb8iExt;
    [NativeNameAttribute("Name", "GL_ALPHA8I_EXT")]
public static InternalFormat Alpha8iExt;
    [NativeNameAttribute("Name", "GL_INTENSITY8I_EXT")]
public static InternalFormat Intensity8iExt;
    [NativeNameAttribute("Name", "GL_LUMINANCE8I_EXT")]
public static InternalFormat Luminance8iExt;
    [NativeNameAttribute("Name", "GL_LUMINANCE_ALPHA8I_EXT")]
public static InternalFormat LuminanceAlpha8iExt;
    [NativeNameAttribute("Name", "GL_DEPTH_COMPONENT32F_NV")]
public static InternalFormat DepthComponent32fNV;
    [NativeNameAttribute("Name", "GL_DEPTH32F_STENCIL8_NV")]
public static InternalFormat Depth32fStencil8NV;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RED_RGTC1")]
public static InternalFormat CompressedRedRgtc1;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RED_RGTC1_EXT")]
public static InternalFormat CompressedRedRgtc1Ext;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SIGNED_RED_RGTC1")]
public static InternalFormat CompressedSignedRedRgtc1;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SIGNED_RED_RGTC1_EXT")]
public static InternalFormat CompressedSignedRedRgtc1Ext;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RED_GREEN_RGTC2_EXT")]
public static InternalFormat CompressedRedGreenRgtc2Ext;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RG_RGTC2")]
public static InternalFormat CompressedRGRgtc2;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT")]
public static InternalFormat CompressedSignedRedGreenRgtc2Ext;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SIGNED_RG_RGTC2")]
public static InternalFormat CompressedSignedRGRgtc2;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_BPTC_UNORM")]
public static InternalFormat CompressedRgbaBptcUnorm;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_BPTC_UNORM_ARB")]
public static InternalFormat CompressedRgbaBptcUnormArb;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_BPTC_UNORM_EXT")]
public static InternalFormat CompressedRgbaBptcUnormExt;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM")]
public static InternalFormat CompressedSrgbAlphaBptcUnorm;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB")]
public static InternalFormat CompressedSrgbAlphaBptcUnormArb;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT")]
public static InternalFormat CompressedSrgbAlphaBptcUnormExt;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT")]
public static InternalFormat CompressedRgbBptcSignedFloat;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB")]
public static InternalFormat CompressedRgbBptcSignedFloatArb;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT")]
public static InternalFormat CompressedRgbBptcSignedFloatExt;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT")]
public static InternalFormat CompressedRgbBptcUnsignedFloat;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB")]
public static InternalFormat CompressedRgbBptcUnsignedFloatArb;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT")]
public static InternalFormat CompressedRgbBptcUnsignedFloatExt;
    [NativeNameAttribute("Name", "GL_R8_SNORM")]
public static InternalFormat R8SNorm;
    [NativeNameAttribute("Name", "GL_RG8_SNORM")]
public static InternalFormat RG8SNorm;
    [NativeNameAttribute("Name", "GL_RGB8_SNORM")]
public static InternalFormat Rgb8SNorm;
    [NativeNameAttribute("Name", "GL_RGBA8_SNORM")]
public static InternalFormat Rgba8SNorm;
    [NativeNameAttribute("Name", "GL_R16_SNORM")]
public static InternalFormat R16SNorm;
    [NativeNameAttribute("Name", "GL_R16_SNORM_EXT")]
public static InternalFormat R16SNormExt;
    [NativeNameAttribute("Name", "GL_RG16_SNORM")]
public static InternalFormat RG16SNorm;
    [NativeNameAttribute("Name", "GL_RG16_SNORM_EXT")]
public static InternalFormat RG16SNormExt;
    [NativeNameAttribute("Name", "GL_RGB16_SNORM")]
public static InternalFormat Rgb16SNorm;
    [NativeNameAttribute("Name", "GL_RGB16_SNORM_EXT")]
public static InternalFormat Rgb16SNormExt;
    [NativeNameAttribute("Name", "GL_RGBA16_SNORM")]
public static InternalFormat Rgba16SNorm;
    [NativeNameAttribute("Name", "GL_RGBA16_SNORM_EXT")]
public static InternalFormat Rgba16SNormExt;
    [NativeNameAttribute("Name", "GL_SR8_EXT")]
public static InternalFormat SR8Ext;
    [NativeNameAttribute("Name", "GL_SRG8_EXT")]
public static InternalFormat Srg8Ext;
    [NativeNameAttribute("Name", "GL_RGB10_A2UI")]
public static InternalFormat Rgb10A2ui;
    [NativeNameAttribute("Name", "GL_COMPRESSED_R11_EAC")]
public static InternalFormat CompressedR11Eac;
    [NativeNameAttribute("Name", "GL_COMPRESSED_R11_EAC_OES")]
public static InternalFormat CompressedR11EacOes;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SIGNED_R11_EAC")]
public static InternalFormat CompressedSignedR11Eac;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SIGNED_R11_EAC_OES")]
public static InternalFormat CompressedSignedR11EacOes;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RG11_EAC")]
public static InternalFormat CompressedRG11Eac;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RG11_EAC_OES")]
public static InternalFormat CompressedRG11EacOes;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SIGNED_RG11_EAC")]
public static InternalFormat CompressedSignedRG11Eac;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SIGNED_RG11_EAC_OES")]
public static InternalFormat CompressedSignedRG11EacOes;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGB8_ETC2")]
public static InternalFormat CompressedRgb8Etc2;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGB8_ETC2_OES")]
public static InternalFormat CompressedRgb8Etc2Oes;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ETC2")]
public static InternalFormat CompressedSrgb8Etc2;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ETC2_OES")]
public static InternalFormat CompressedSrgb8Etc2Oes;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2")]
public static InternalFormat CompressedRgb8PunchthroughAlpha1Etc2;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2_OES")]
public static InternalFormat CompressedRgb8PunchthroughAlpha1Etc2Oes;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2")]
public static InternalFormat CompressedSrgb8PunchthroughAlpha1Etc2;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2_OES")]
public static InternalFormat CompressedSrgb8PunchthroughAlpha1Etc2Oes;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA8_ETC2_EAC")]
public static InternalFormat CompressedRgba8Etc2Eac;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA8_ETC2_EAC_OES")]
public static InternalFormat CompressedRgba8Etc2EacOes;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC")]
public static InternalFormat CompressedSrgb8Alpha8Etc2Eac;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC_OES")]
public static InternalFormat CompressedSrgb8Alpha8Etc2EacOes;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_4x4")]
public static InternalFormat CompressedRgbaAstc4x4;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_4x4_KHR")]
public static InternalFormat CompressedRgbaAstc4x4Khr;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_5x4")]
public static InternalFormat CompressedRgbaAstc5x4;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_5x4_KHR")]
public static InternalFormat CompressedRgbaAstc5x4Khr;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_5x5")]
public static InternalFormat CompressedRgbaAstc5x5;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_5x5_KHR")]
public static InternalFormat CompressedRgbaAstc5x5Khr;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_6x5")]
public static InternalFormat CompressedRgbaAstc6x5;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_6x5_KHR")]
public static InternalFormat CompressedRgbaAstc6x5Khr;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_6x6")]
public static InternalFormat CompressedRgbaAstc6x6;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_6x6_KHR")]
public static InternalFormat CompressedRgbaAstc6x6Khr;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_8x5")]
public static InternalFormat CompressedRgbaAstc8x5;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_8x5_KHR")]
public static InternalFormat CompressedRgbaAstc8x5Khr;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_8x6")]
public static InternalFormat CompressedRgbaAstc8x6;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_8x6_KHR")]
public static InternalFormat CompressedRgbaAstc8x6Khr;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_8x8")]
public static InternalFormat CompressedRgbaAstc8x8;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_8x8_KHR")]
public static InternalFormat CompressedRgbaAstc8x8Khr;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_10x5")]
public static InternalFormat CompressedRgbaAstc10x5;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_10x5_KHR")]
public static InternalFormat CompressedRgbaAstc10x5Khr;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_10x6")]
public static InternalFormat CompressedRgbaAstc10x6;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_10x6_KHR")]
public static InternalFormat CompressedRgbaAstc10x6Khr;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_10x8")]
public static InternalFormat CompressedRgbaAstc10x8;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_10x8_KHR")]
public static InternalFormat CompressedRgbaAstc10x8Khr;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_10x10")]
public static InternalFormat CompressedRgbaAstc10x10;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_10x10_KHR")]
public static InternalFormat CompressedRgbaAstc10x10Khr;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_12x10")]
public static InternalFormat CompressedRgbaAstc12x10;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_12x10_KHR")]
public static InternalFormat CompressedRgbaAstc12x10Khr;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_12x12")]
public static InternalFormat CompressedRgbaAstc12x12;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_12x12_KHR")]
public static InternalFormat CompressedRgbaAstc12x12Khr;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_3x3x3_OES")]
public static InternalFormat CompressedRgbaAstc3x3x3Oes;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_4x3x3_OES")]
public static InternalFormat CompressedRgbaAstc4x3x3Oes;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_4x4x3_OES")]
public static InternalFormat CompressedRgbaAstc4x4x3Oes;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_4x4x4_OES")]
public static InternalFormat CompressedRgbaAstc4x4x4Oes;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_5x4x4_OES")]
public static InternalFormat CompressedRgbaAstc5x4x4Oes;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_5x5x4_OES")]
public static InternalFormat CompressedRgbaAstc5x5x4Oes;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_5x5x5_OES")]
public static InternalFormat CompressedRgbaAstc5x5x5Oes;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_6x5x5_OES")]
public static InternalFormat CompressedRgbaAstc6x5x5Oes;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_6x6x5_OES")]
public static InternalFormat CompressedRgbaAstc6x6x5Oes;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_6x6x6_OES")]
public static InternalFormat CompressedRgbaAstc6x6x6Oes;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4")]
public static InternalFormat CompressedSrgb8Alpha8Astc4x4;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR")]
public static InternalFormat CompressedSrgb8Alpha8Astc4x4Khr;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4")]
public static InternalFormat CompressedSrgb8Alpha8Astc5x4;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR")]
public static InternalFormat CompressedSrgb8Alpha8Astc5x4Khr;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5")]
public static InternalFormat CompressedSrgb8Alpha8Astc5x5;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR")]
public static InternalFormat CompressedSrgb8Alpha8Astc5x5Khr;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5")]
public static InternalFormat CompressedSrgb8Alpha8Astc6x5;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR")]
public static InternalFormat CompressedSrgb8Alpha8Astc6x5Khr;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6")]
public static InternalFormat CompressedSrgb8Alpha8Astc6x6;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR")]
public static InternalFormat CompressedSrgb8Alpha8Astc6x6Khr;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5")]
public static InternalFormat CompressedSrgb8Alpha8Astc8x5;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR")]
public static InternalFormat CompressedSrgb8Alpha8Astc8x5Khr;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6")]
public static InternalFormat CompressedSrgb8Alpha8Astc8x6;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR")]
public static InternalFormat CompressedSrgb8Alpha8Astc8x6Khr;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8")]
public static InternalFormat CompressedSrgb8Alpha8Astc8x8;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR")]
public static InternalFormat CompressedSrgb8Alpha8Astc8x8Khr;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5")]
public static InternalFormat CompressedSrgb8Alpha8Astc10x5;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR")]
public static InternalFormat CompressedSrgb8Alpha8Astc10x5Khr;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6")]
public static InternalFormat CompressedSrgb8Alpha8Astc10x6;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR")]
public static InternalFormat CompressedSrgb8Alpha8Astc10x6Khr;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8")]
public static InternalFormat CompressedSrgb8Alpha8Astc10x8;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR")]
public static InternalFormat CompressedSrgb8Alpha8Astc10x8Khr;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10")]
public static InternalFormat CompressedSrgb8Alpha8Astc10x10;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR")]
public static InternalFormat CompressedSrgb8Alpha8Astc10x10Khr;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10")]
public static InternalFormat CompressedSrgb8Alpha8Astc12x10;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR")]
public static InternalFormat CompressedSrgb8Alpha8Astc12x10Khr;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12")]
public static InternalFormat CompressedSrgb8Alpha8Astc12x12;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR")]
public static InternalFormat CompressedSrgb8Alpha8Astc12x12Khr;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_3x3x3_OES")]
public static InternalFormat CompressedSrgb8Alpha8Astc3x3x3Oes;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x3x3_OES")]
public static InternalFormat CompressedSrgb8Alpha8Astc4x3x3Oes;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x3_OES")]
public static InternalFormat CompressedSrgb8Alpha8Astc4x4x3Oes;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x4_OES")]
public static InternalFormat CompressedSrgb8Alpha8Astc4x4x4Oes;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4x4_OES")]
public static InternalFormat CompressedSrgb8Alpha8Astc5x4x4Oes;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x4_OES")]
public static InternalFormat CompressedSrgb8Alpha8Astc5x5x4Oes;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x5_OES")]
public static InternalFormat CompressedSrgb8Alpha8Astc5x5x5Oes;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5x5_OES")]
public static InternalFormat CompressedSrgb8Alpha8Astc6x5x5Oes;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x5_OES")]
public static InternalFormat CompressedSrgb8Alpha8Astc6x6x5Oes;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x6_OES")]
public static InternalFormat CompressedSrgb8Alpha8Astc6x6x6Oes;
}
[NativeNameAttribute("Name", "InternalFormatPName")]
public enum Silk.NET.OpenGL.InternalFormatPName : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_SAMPLES")]
public static InternalFormatPName Samples;
    [NativeNameAttribute("Name", "GL_INTERNALFORMAT_SUPPORTED")]
public static InternalFormatPName InternalformatSupported;
    [NativeNameAttribute("Name", "GL_INTERNALFORMAT_PREFERRED")]
public static InternalFormatPName InternalformatPreferred;
    [NativeNameAttribute("Name", "GL_INTERNALFORMAT_RED_SIZE")]
public static InternalFormatPName InternalformatRedSize;
    [NativeNameAttribute("Name", "GL_INTERNALFORMAT_GREEN_SIZE")]
public static InternalFormatPName InternalformatGreenSize;
    [NativeNameAttribute("Name", "GL_INTERNALFORMAT_BLUE_SIZE")]
public static InternalFormatPName InternalformatBlueSize;
    [NativeNameAttribute("Name", "GL_INTERNALFORMAT_ALPHA_SIZE")]
public static InternalFormatPName InternalformatAlphaSize;
    [NativeNameAttribute("Name", "GL_INTERNALFORMAT_DEPTH_SIZE")]
public static InternalFormatPName InternalformatDepthSize;
    [NativeNameAttribute("Name", "GL_INTERNALFORMAT_STENCIL_SIZE")]
public static InternalFormatPName InternalformatStencilSize;
    [NativeNameAttribute("Name", "GL_INTERNALFORMAT_SHARED_SIZE")]
public static InternalFormatPName InternalformatSharedSize;
    [NativeNameAttribute("Name", "GL_INTERNALFORMAT_RED_TYPE")]
public static InternalFormatPName InternalformatRedType;
    [NativeNameAttribute("Name", "GL_INTERNALFORMAT_GREEN_TYPE")]
public static InternalFormatPName InternalformatGreenType;
    [NativeNameAttribute("Name", "GL_INTERNALFORMAT_BLUE_TYPE")]
public static InternalFormatPName InternalformatBlueType;
    [NativeNameAttribute("Name", "GL_INTERNALFORMAT_ALPHA_TYPE")]
public static InternalFormatPName InternalformatAlphaType;
    [NativeNameAttribute("Name", "GL_INTERNALFORMAT_DEPTH_TYPE")]
public static InternalFormatPName InternalformatDepthType;
    [NativeNameAttribute("Name", "GL_INTERNALFORMAT_STENCIL_TYPE")]
public static InternalFormatPName InternalformatStencilType;
    [NativeNameAttribute("Name", "GL_MAX_WIDTH")]
public static InternalFormatPName MaxWidth;
    [NativeNameAttribute("Name", "GL_MAX_HEIGHT")]
public static InternalFormatPName MaxHeight;
    [NativeNameAttribute("Name", "GL_MAX_DEPTH")]
public static InternalFormatPName MaxDepth;
    [NativeNameAttribute("Name", "GL_MAX_LAYERS")]
public static InternalFormatPName MaxLayers;
    [NativeNameAttribute("Name", "GL_COLOR_COMPONENTS")]
public static InternalFormatPName ColorComponents;
    [NativeNameAttribute("Name", "GL_COLOR_RENDERABLE")]
public static InternalFormatPName ColorRenderable;
    [NativeNameAttribute("Name", "GL_DEPTH_RENDERABLE")]
public static InternalFormatPName DepthRenderable;
    [NativeNameAttribute("Name", "GL_STENCIL_RENDERABLE")]
public static InternalFormatPName StencilRenderable;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_RENDERABLE")]
public static InternalFormatPName FramebufferRenderable;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_RENDERABLE_LAYERED")]
public static InternalFormatPName FramebufferRenderableLayered;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_BLEND")]
public static InternalFormatPName FramebufferBlend;
    [NativeNameAttribute("Name", "GL_READ_PIXELS")]
public static InternalFormatPName ReadPixels;
    [NativeNameAttribute("Name", "GL_READ_PIXELS_FORMAT")]
public static InternalFormatPName ReadPixelsFormat;
    [NativeNameAttribute("Name", "GL_READ_PIXELS_TYPE")]
public static InternalFormatPName ReadPixelsType;
    [NativeNameAttribute("Name", "GL_TEXTURE_IMAGE_FORMAT")]
public static InternalFormatPName TextureImageFormat;
    [NativeNameAttribute("Name", "GL_TEXTURE_IMAGE_TYPE")]
public static InternalFormatPName TextureImageType;
    [NativeNameAttribute("Name", "GL_GET_TEXTURE_IMAGE_FORMAT")]
public static InternalFormatPName GetTextureImageFormat;
    [NativeNameAttribute("Name", "GL_GET_TEXTURE_IMAGE_TYPE")]
public static InternalFormatPName GetTextureImageType;
    [NativeNameAttribute("Name", "GL_MIPMAP")]
public static InternalFormatPName Mipmap;
    [NativeNameAttribute("Name", "GL_AUTO_GENERATE_MIPMAP")]
public static InternalFormatPName AutoGenerateMipmap;
    [NativeNameAttribute("Name", "GL_COLOR_ENCODING")]
public static InternalFormatPName ColorEncoding;
    [NativeNameAttribute("Name", "GL_SRGB_READ")]
public static InternalFormatPName SrgbRead;
    [NativeNameAttribute("Name", "GL_SRGB_WRITE")]
public static InternalFormatPName SrgbWrite;
    [NativeNameAttribute("Name", "GL_FILTER")]
public static InternalFormatPName Filter;
    [NativeNameAttribute("Name", "GL_VERTEX_TEXTURE")]
public static InternalFormatPName VertexTexture;
    [NativeNameAttribute("Name", "GL_TESS_CONTROL_TEXTURE")]
public static InternalFormatPName TessControlTexture;
    [NativeNameAttribute("Name", "GL_TESS_EVALUATION_TEXTURE")]
public static InternalFormatPName TessEvaluationTexture;
    [NativeNameAttribute("Name", "GL_GEOMETRY_TEXTURE")]
public static InternalFormatPName GeometryTexture;
    [NativeNameAttribute("Name", "GL_FRAGMENT_TEXTURE")]
public static InternalFormatPName FragmentTexture;
    [NativeNameAttribute("Name", "GL_COMPUTE_TEXTURE")]
public static InternalFormatPName ComputeTexture;
    [NativeNameAttribute("Name", "GL_TEXTURE_SHADOW")]
public static InternalFormatPName TextureShadow;
    [NativeNameAttribute("Name", "GL_TEXTURE_GATHER")]
public static InternalFormatPName TextureGather;
    [NativeNameAttribute("Name", "GL_TEXTURE_GATHER_SHADOW")]
public static InternalFormatPName TextureGatherShadow;
    [NativeNameAttribute("Name", "GL_SHADER_IMAGE_LOAD")]
public static InternalFormatPName ShaderImageLoad;
    [NativeNameAttribute("Name", "GL_SHADER_IMAGE_STORE")]
public static InternalFormatPName ShaderImageStore;
    [NativeNameAttribute("Name", "GL_SHADER_IMAGE_ATOMIC")]
public static InternalFormatPName ShaderImageAtomic;
    [NativeNameAttribute("Name", "GL_IMAGE_TEXEL_SIZE")]
public static InternalFormatPName ImageTexelSize;
    [NativeNameAttribute("Name", "GL_IMAGE_COMPATIBILITY_CLASS")]
public static InternalFormatPName ImageCompatibilityClass;
    [NativeNameAttribute("Name", "GL_IMAGE_PIXEL_FORMAT")]
public static InternalFormatPName ImagePixelFormat;
    [NativeNameAttribute("Name", "GL_IMAGE_PIXEL_TYPE")]
public static InternalFormatPName ImagePixelType;
    [NativeNameAttribute("Name", "GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST")]
public static InternalFormatPName SimultaneousTextureAndDepthTest;
    [NativeNameAttribute("Name", "GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST")]
public static InternalFormatPName SimultaneousTextureAndStencilTest;
    [NativeNameAttribute("Name", "GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE")]
public static InternalFormatPName SimultaneousTextureAndDepthWrite;
    [NativeNameAttribute("Name", "GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE")]
public static InternalFormatPName SimultaneousTextureAndStencilWrite;
    [NativeNameAttribute("Name", "GL_TEXTURE_COMPRESSED_BLOCK_WIDTH")]
public static InternalFormatPName TextureCompressedBlockWidth;
    [NativeNameAttribute("Name", "GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT")]
public static InternalFormatPName TextureCompressedBlockHeight;
    [NativeNameAttribute("Name", "GL_TEXTURE_COMPRESSED_BLOCK_SIZE")]
public static InternalFormatPName TextureCompressedBlockSize;
    [NativeNameAttribute("Name", "GL_CLEAR_BUFFER")]
public static InternalFormatPName ClearBuffer;
    [NativeNameAttribute("Name", "GL_TEXTURE_VIEW")]
public static InternalFormatPName TextureView;
    [NativeNameAttribute("Name", "GL_VIEW_COMPATIBILITY_CLASS")]
public static InternalFormatPName ViewCompatibilityClass;
    [NativeNameAttribute("Name", "GL_TEXTURE_COMPRESSED")]
public static InternalFormatPName TextureCompressed;
    [NativeNameAttribute("Name", "GL_NUM_SURFACE_COMPRESSION_FIXED_RATES_EXT")]
public static InternalFormatPName NumSurfaceCompressionFixedRatesExt;
    [NativeNameAttribute("Name", "GL_IMAGE_FORMAT_COMPATIBILITY_TYPE")]
public static InternalFormatPName ImageFormatCompatibilityType;
    [NativeNameAttribute("Name", "GL_CLEAR_TEXTURE")]
public static InternalFormatPName ClearTexture;
    [NativeNameAttribute("Name", "GL_NUM_SAMPLE_COUNTS")]
public static InternalFormatPName NumSampleCounts;
}
[NativeNameAttribute("Name", "InvalidateFramebufferAttachment")]
public enum Silk.NET.OpenGL.InvalidateFramebufferAttachment : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_COLOR")]
public static InvalidateFramebufferAttachment Color;
    [NativeNameAttribute("Name", "GL_DEPTH")]
public static InvalidateFramebufferAttachment Depth;
    [NativeNameAttribute("Name", "GL_STENCIL")]
public static InvalidateFramebufferAttachment Stencil;
    [NativeNameAttribute("Name", "GL_DEPTH_STENCIL_ATTACHMENT")]
public static InvalidateFramebufferAttachment DepthStencilAttachment;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT0")]
public static InvalidateFramebufferAttachment ColorAttachment0;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT0_EXT")]
public static InvalidateFramebufferAttachment ColorAttachment0Ext;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT0_NV")]
public static InvalidateFramebufferAttachment ColorAttachment0NV;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT0_OES")]
public static InvalidateFramebufferAttachment ColorAttachment0Oes;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT1")]
public static InvalidateFramebufferAttachment ColorAttachment1;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT1_EXT")]
public static InvalidateFramebufferAttachment ColorAttachment1Ext;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT1_NV")]
public static InvalidateFramebufferAttachment ColorAttachment1NV;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT2")]
public static InvalidateFramebufferAttachment ColorAttachment2;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT2_EXT")]
public static InvalidateFramebufferAttachment ColorAttachment2Ext;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT2_NV")]
public static InvalidateFramebufferAttachment ColorAttachment2NV;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT3")]
public static InvalidateFramebufferAttachment ColorAttachment3;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT3_EXT")]
public static InvalidateFramebufferAttachment ColorAttachment3Ext;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT3_NV")]
public static InvalidateFramebufferAttachment ColorAttachment3NV;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT4")]
public static InvalidateFramebufferAttachment ColorAttachment4;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT4_EXT")]
public static InvalidateFramebufferAttachment ColorAttachment4Ext;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT4_NV")]
public static InvalidateFramebufferAttachment ColorAttachment4NV;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT5")]
public static InvalidateFramebufferAttachment ColorAttachment5;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT5_EXT")]
public static InvalidateFramebufferAttachment ColorAttachment5Ext;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT5_NV")]
public static InvalidateFramebufferAttachment ColorAttachment5NV;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT6")]
public static InvalidateFramebufferAttachment ColorAttachment6;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT6_EXT")]
public static InvalidateFramebufferAttachment ColorAttachment6Ext;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT6_NV")]
public static InvalidateFramebufferAttachment ColorAttachment6NV;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT7")]
public static InvalidateFramebufferAttachment ColorAttachment7;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT7_EXT")]
public static InvalidateFramebufferAttachment ColorAttachment7Ext;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT7_NV")]
public static InvalidateFramebufferAttachment ColorAttachment7NV;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT8")]
public static InvalidateFramebufferAttachment ColorAttachment8;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT8_EXT")]
public static InvalidateFramebufferAttachment ColorAttachment8Ext;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT8_NV")]
public static InvalidateFramebufferAttachment ColorAttachment8NV;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT9")]
public static InvalidateFramebufferAttachment ColorAttachment9;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT9_EXT")]
public static InvalidateFramebufferAttachment ColorAttachment9Ext;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT9_NV")]
public static InvalidateFramebufferAttachment ColorAttachment9NV;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT10")]
public static InvalidateFramebufferAttachment ColorAttachment10;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT10_EXT")]
public static InvalidateFramebufferAttachment ColorAttachment10Ext;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT10_NV")]
public static InvalidateFramebufferAttachment ColorAttachment10NV;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT11")]
public static InvalidateFramebufferAttachment ColorAttachment11;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT11_EXT")]
public static InvalidateFramebufferAttachment ColorAttachment11Ext;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT11_NV")]
public static InvalidateFramebufferAttachment ColorAttachment11NV;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT12")]
public static InvalidateFramebufferAttachment ColorAttachment12;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT12_EXT")]
public static InvalidateFramebufferAttachment ColorAttachment12Ext;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT12_NV")]
public static InvalidateFramebufferAttachment ColorAttachment12NV;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT13")]
public static InvalidateFramebufferAttachment ColorAttachment13;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT13_EXT")]
public static InvalidateFramebufferAttachment ColorAttachment13Ext;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT13_NV")]
public static InvalidateFramebufferAttachment ColorAttachment13NV;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT14")]
public static InvalidateFramebufferAttachment ColorAttachment14;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT14_EXT")]
public static InvalidateFramebufferAttachment ColorAttachment14Ext;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT14_NV")]
public static InvalidateFramebufferAttachment ColorAttachment14NV;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT15")]
public static InvalidateFramebufferAttachment ColorAttachment15;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT15_EXT")]
public static InvalidateFramebufferAttachment ColorAttachment15Ext;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT15_NV")]
public static InvalidateFramebufferAttachment ColorAttachment15NV;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT16")]
public static InvalidateFramebufferAttachment ColorAttachment16;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT17")]
public static InvalidateFramebufferAttachment ColorAttachment17;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT18")]
public static InvalidateFramebufferAttachment ColorAttachment18;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT19")]
public static InvalidateFramebufferAttachment ColorAttachment19;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT20")]
public static InvalidateFramebufferAttachment ColorAttachment20;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT21")]
public static InvalidateFramebufferAttachment ColorAttachment21;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT22")]
public static InvalidateFramebufferAttachment ColorAttachment22;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT23")]
public static InvalidateFramebufferAttachment ColorAttachment23;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT24")]
public static InvalidateFramebufferAttachment ColorAttachment24;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT25")]
public static InvalidateFramebufferAttachment ColorAttachment25;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT26")]
public static InvalidateFramebufferAttachment ColorAttachment26;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT27")]
public static InvalidateFramebufferAttachment ColorAttachment27;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT28")]
public static InvalidateFramebufferAttachment ColorAttachment28;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT29")]
public static InvalidateFramebufferAttachment ColorAttachment29;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT30")]
public static InvalidateFramebufferAttachment ColorAttachment30;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT31")]
public static InvalidateFramebufferAttachment ColorAttachment31;
    [NativeNameAttribute("Name", "GL_DEPTH_ATTACHMENT")]
public static InvalidateFramebufferAttachment DepthAttachment;
    [NativeNameAttribute("Name", "GL_DEPTH_ATTACHMENT_EXT")]
public static InvalidateFramebufferAttachment DepthAttachmentExt;
    [NativeNameAttribute("Name", "GL_DEPTH_ATTACHMENT_OES")]
public static InvalidateFramebufferAttachment DepthAttachmentOes;
    [NativeNameAttribute("Name", "GL_STENCIL_ATTACHMENT_EXT")]
public static InvalidateFramebufferAttachment StencilAttachmentExt;
    [NativeNameAttribute("Name", "GL_STENCIL_ATTACHMENT_OES")]
public static InvalidateFramebufferAttachment StencilAttachmentOes;
}
[NativeNameAttribute("Name", "LightEnvModeSGIX")]
public enum Silk.NET.OpenGL.LightEnvModeSGIX : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_REPLACE")]
public static LightEnvModeSGIX Replace;
}
[NativeNameAttribute("Name", "LightEnvParameterSGIX")]
public enum Silk.NET.OpenGL.LightEnvParameterSGIX : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_LIGHT_ENV_MODE_SGIX")]
public static LightEnvParameterSGIX LightEnvModeSgix;
}
[NativeNameAttribute("Name", "LightModelColorControl")]
public enum Silk.NET.OpenGL.LightModelColorControl : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_SINGLE_COLOR_EXT")]
public static LightModelColorControl SingleColorExt;
    [NativeNameAttribute("Name", "GL_SEPARATE_SPECULAR_COLOR_EXT")]
public static LightModelColorControl SeparateSpecularColorExt;
}
[NativeNameAttribute("Name", "LightModelParameter")]
public enum Silk.NET.OpenGL.LightModelParameter : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_LIGHT_MODEL_COLOR_CONTROL_EXT")]
public static LightModelParameter LightModelColorControlExt;
}
[NativeNameAttribute("Name", "LightName")]
public enum Silk.NET.OpenGL.LightName : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_FRAGMENT_LIGHT0_SGIX")]
public static LightName FragmentLight0Sgix;
    [NativeNameAttribute("Name", "GL_FRAGMENT_LIGHT1_SGIX")]
public static LightName FragmentLight1Sgix;
    [NativeNameAttribute("Name", "GL_FRAGMENT_LIGHT2_SGIX")]
public static LightName FragmentLight2Sgix;
    [NativeNameAttribute("Name", "GL_FRAGMENT_LIGHT3_SGIX")]
public static LightName FragmentLight3Sgix;
    [NativeNameAttribute("Name", "GL_FRAGMENT_LIGHT4_SGIX")]
public static LightName FragmentLight4Sgix;
    [NativeNameAttribute("Name", "GL_FRAGMENT_LIGHT5_SGIX")]
public static LightName FragmentLight5Sgix;
    [NativeNameAttribute("Name", "GL_FRAGMENT_LIGHT6_SGIX")]
public static LightName FragmentLight6Sgix;
    [NativeNameAttribute("Name", "GL_FRAGMENT_LIGHT7_SGIX")]
public static LightName FragmentLight7Sgix;
}
[NativeNameAttribute("Name", "LightParameter")]
public enum Silk.NET.OpenGL.LightParameter : Enum {
    public int value__;
}
[NativeNameAttribute("Name", "LightTextureModeEXT")]
public enum Silk.NET.OpenGL.LightTextureModeEXT : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_FRAGMENT_MATERIAL_EXT")]
public static LightTextureModeEXT FragmentMaterialExt;
    [NativeNameAttribute("Name", "GL_FRAGMENT_NORMAL_EXT")]
public static LightTextureModeEXT FragmentNormalExt;
    [NativeNameAttribute("Name", "GL_FRAGMENT_COLOR_EXT")]
public static LightTextureModeEXT FragmentColorExt;
    [NativeNameAttribute("Name", "GL_FRAGMENT_DEPTH_EXT")]
public static LightTextureModeEXT FragmentDepthExt;
}
[NativeNameAttribute("Name", "LightTexturePNameEXT")]
public enum Silk.NET.OpenGL.LightTexturePNameEXT : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_ATTENUATION_EXT")]
public static LightTexturePNameEXT AttenuationExt;
    [NativeNameAttribute("Name", "GL_SHADOW_ATTENUATION_EXT")]
public static LightTexturePNameEXT ShadowAttenuationExt;
}
[NativeNameAttribute("Name", "ListMode")]
public enum Silk.NET.OpenGL.ListMode : Enum {
    public int value__;
}
[NativeNameAttribute("Name", "ListNameType")]
public enum Silk.NET.OpenGL.ListNameType : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_BYTE")]
public static ListNameType Byte;
    [NativeNameAttribute("Name", "GL_UNSIGNED_BYTE")]
public static ListNameType UnsignedByte;
    [NativeNameAttribute("Name", "GL_SHORT")]
public static ListNameType Short;
    [NativeNameAttribute("Name", "GL_UNSIGNED_SHORT")]
public static ListNameType UnsignedShort;
    [NativeNameAttribute("Name", "GL_INT")]
public static ListNameType Int;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT")]
public static ListNameType UnsignedInt;
    [NativeNameAttribute("Name", "GL_FLOAT")]
public static ListNameType Float;
}
[NativeNameAttribute("Name", "ListParameterName")]
public enum Silk.NET.OpenGL.ListParameterName : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_LIST_PRIORITY_SGIX")]
public static ListParameterName ListPrioritySgix;
}
[NativeNameAttribute("Name", "LogicOp")]
public enum Silk.NET.OpenGL.LogicOp : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_CLEAR")]
public static LogicOp Clear;
    [NativeNameAttribute("Name", "GL_AND")]
public static LogicOp And;
    [NativeNameAttribute("Name", "GL_AND_REVERSE")]
public static LogicOp AndReverse;
    [NativeNameAttribute("Name", "GL_COPY")]
public static LogicOp Copy;
    [NativeNameAttribute("Name", "GL_AND_INVERTED")]
public static LogicOp AndInverted;
    [NativeNameAttribute("Name", "GL_NOOP")]
public static LogicOp Noop;
    [NativeNameAttribute("Name", "GL_XOR")]
public static LogicOp Xor;
    [NativeNameAttribute("Name", "GL_OR")]
public static LogicOp Or;
    [NativeNameAttribute("Name", "GL_NOR")]
public static LogicOp Nor;
    [NativeNameAttribute("Name", "GL_EQUIV")]
public static LogicOp Equiv;
    [NativeNameAttribute("Name", "GL_INVERT")]
public static LogicOp Invert;
    [NativeNameAttribute("Name", "GL_OR_REVERSE")]
public static LogicOp OrReverse;
    [NativeNameAttribute("Name", "GL_COPY_INVERTED")]
public static LogicOp CopyInverted;
    [NativeNameAttribute("Name", "GL_OR_INVERTED")]
public static LogicOp OrInverted;
    [NativeNameAttribute("Name", "GL_NAND")]
public static LogicOp Nand;
    [NativeNameAttribute("Name", "GL_SET")]
public static LogicOp Set;
}
[NativeNameAttribute("Name", "MapAttribParameterNV")]
public enum Silk.NET.OpenGL.MapAttribParameterNV : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_MAP_ATTRIB_U_ORDER_NV")]
public static MapAttribParameterNV MapAttribUOrderNV;
    [NativeNameAttribute("Name", "GL_MAP_ATTRIB_V_ORDER_NV")]
public static MapAttribParameterNV MapAttribVOrderNV;
}
[NativeNameAttribute("Name", "MapBufferAccessMask")]
public enum Silk.NET.OpenGL.MapBufferAccessMask : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_MAP_READ_BIT")]
public static MapBufferAccessMask MapReadBit;
    [NativeNameAttribute("Name", "GL_MAP_READ_BIT_EXT")]
public static MapBufferAccessMask MapReadBitExt;
    [NativeNameAttribute("Name", "GL_MAP_WRITE_BIT")]
public static MapBufferAccessMask MapWriteBit;
    [NativeNameAttribute("Name", "GL_MAP_WRITE_BIT_EXT")]
public static MapBufferAccessMask MapWriteBitExt;
    [NativeNameAttribute("Name", "GL_MAP_INVALIDATE_RANGE_BIT")]
public static MapBufferAccessMask MapInvalidateRangeBit;
    [NativeNameAttribute("Name", "GL_MAP_INVALIDATE_RANGE_BIT_EXT")]
public static MapBufferAccessMask MapInvalidateRangeBitExt;
    [NativeNameAttribute("Name", "GL_MAP_INVALIDATE_BUFFER_BIT")]
public static MapBufferAccessMask MapInvalidateBufferBit;
    [NativeNameAttribute("Name", "GL_MAP_INVALIDATE_BUFFER_BIT_EXT")]
public static MapBufferAccessMask MapInvalidateBufferBitExt;
    [NativeNameAttribute("Name", "GL_MAP_FLUSH_EXPLICIT_BIT")]
public static MapBufferAccessMask MapFlushExplicitBit;
    [NativeNameAttribute("Name", "GL_MAP_FLUSH_EXPLICIT_BIT_EXT")]
public static MapBufferAccessMask MapFlushExplicitBitExt;
    [NativeNameAttribute("Name", "GL_MAP_UNSYNCHRONIZED_BIT")]
public static MapBufferAccessMask MapUnsynchronizedBit;
    [NativeNameAttribute("Name", "GL_MAP_UNSYNCHRONIZED_BIT_EXT")]
public static MapBufferAccessMask MapUnsynchronizedBitExt;
    [NativeNameAttribute("Name", "GL_MAP_PERSISTENT_BIT")]
public static MapBufferAccessMask MapPersistentBit;
    [NativeNameAttribute("Name", "GL_MAP_PERSISTENT_BIT_EXT")]
public static MapBufferAccessMask MapPersistentBitExt;
    [NativeNameAttribute("Name", "GL_MAP_COHERENT_BIT")]
public static MapBufferAccessMask MapCoherentBit;
    [NativeNameAttribute("Name", "GL_MAP_COHERENT_BIT_EXT")]
public static MapBufferAccessMask MapCoherentBitExt;
}
[NativeNameAttribute("Name", "MapParameterNV")]
public enum Silk.NET.OpenGL.MapParameterNV : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_MAP_TESSELLATION_NV")]
public static MapParameterNV MapTessellationNV;
}
[NativeNameAttribute("Name", "MapQuery")]
public enum Silk.NET.OpenGL.MapQuery : Enum {
    public int value__;
}
[NativeNameAttribute("Name", "MapTarget")]
public enum Silk.NET.OpenGL.MapTarget : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_GEOMETRY_DEFORMATION_SGIX")]
public static MapTarget GeometryDeformationSgix;
    [NativeNameAttribute("Name", "GL_TEXTURE_DEFORMATION_SGIX")]
public static MapTarget TextureDeformationSgix;
}
[NativeNameAttribute("Name", "MapTextureFormatINTEL")]
public enum Silk.NET.OpenGL.MapTextureFormatINTEL : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_LAYOUT_DEFAULT_INTEL")]
public static MapTextureFormatINTEL LayoutDefaultIntel;
    [NativeNameAttribute("Name", "GL_LAYOUT_LINEAR_INTEL")]
public static MapTextureFormatINTEL LayoutLinearIntel;
    [NativeNameAttribute("Name", "GL_LAYOUT_LINEAR_CPU_CACHED_INTEL")]
public static MapTextureFormatINTEL LayoutLinearCpuCachedIntel;
}
[NativeNameAttribute("Name", "MapTypeNV")]
public enum Silk.NET.OpenGL.MapTypeNV : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_FLOAT")]
public static MapTypeNV Float;
    [NativeNameAttribute("Name", "GL_DOUBLE")]
public static MapTypeNV Double;
}
[NativeNameAttribute("Name", "MaterialFace")]
public enum Silk.NET.OpenGL.MaterialFace : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_FRONT")]
public static MaterialFace Front;
    [NativeNameAttribute("Name", "GL_BACK")]
public static MaterialFace Back;
    [NativeNameAttribute("Name", "GL_FRONT_AND_BACK")]
public static MaterialFace FrontAndBack;
}
[NativeNameAttribute("Name", "MaterialParameter")]
public enum Silk.NET.OpenGL.MaterialParameter : Enum {
    public int value__;
}
[NativeNameAttribute("Name", "MatrixIndexPointerTypeARB")]
public enum Silk.NET.OpenGL.MatrixIndexPointerTypeARB : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_UNSIGNED_BYTE")]
public static MatrixIndexPointerTypeARB UnsignedByte;
    [NativeNameAttribute("Name", "GL_UNSIGNED_SHORT")]
public static MatrixIndexPointerTypeARB UnsignedShort;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT")]
public static MatrixIndexPointerTypeARB UnsignedInt;
}
[NativeNameAttribute("Name", "MatrixMode")]
public enum Silk.NET.OpenGL.MatrixMode : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_MODELVIEW0_EXT")]
public static MatrixMode Modelview0Ext;
    [NativeNameAttribute("Name", "GL_TEXTURE")]
public static MatrixMode Texture;
}
[NativeNameAttribute("Name", "MemoryBarrierMask")]
public enum Silk.NET.OpenGL.MemoryBarrierMask : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT")]
public static MemoryBarrierMask VertexAttribArrayBarrierBit;
    [NativeNameAttribute("Name", "GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT")]
public static MemoryBarrierMask VertexAttribArrayBarrierBitExt;
    [NativeNameAttribute("Name", "GL_ELEMENT_ARRAY_BARRIER_BIT")]
public static MemoryBarrierMask ElementArrayBarrierBit;
    [NativeNameAttribute("Name", "GL_ELEMENT_ARRAY_BARRIER_BIT_EXT")]
public static MemoryBarrierMask ElementArrayBarrierBitExt;
    [NativeNameAttribute("Name", "GL_UNIFORM_BARRIER_BIT")]
public static MemoryBarrierMask UniformBarrierBit;
    [NativeNameAttribute("Name", "GL_UNIFORM_BARRIER_BIT_EXT")]
public static MemoryBarrierMask UniformBarrierBitExt;
    [NativeNameAttribute("Name", "GL_TEXTURE_FETCH_BARRIER_BIT")]
public static MemoryBarrierMask TextureFetchBarrierBit;
    [NativeNameAttribute("Name", "GL_TEXTURE_FETCH_BARRIER_BIT_EXT")]
public static MemoryBarrierMask TextureFetchBarrierBitExt;
    [NativeNameAttribute("Name", "GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV")]
public static MemoryBarrierMask ShaderGlobalAccessBarrierBitNV;
    [NativeNameAttribute("Name", "GL_SHADER_IMAGE_ACCESS_BARRIER_BIT")]
public static MemoryBarrierMask ShaderImageAccessBarrierBit;
    [NativeNameAttribute("Name", "GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT")]
public static MemoryBarrierMask ShaderImageAccessBarrierBitExt;
    [NativeNameAttribute("Name", "GL_COMMAND_BARRIER_BIT")]
public static MemoryBarrierMask CommandBarrierBit;
    [NativeNameAttribute("Name", "GL_COMMAND_BARRIER_BIT_EXT")]
public static MemoryBarrierMask CommandBarrierBitExt;
    [NativeNameAttribute("Name", "GL_PIXEL_BUFFER_BARRIER_BIT")]
public static MemoryBarrierMask PixelBufferBarrierBit;
    [NativeNameAttribute("Name", "GL_PIXEL_BUFFER_BARRIER_BIT_EXT")]
public static MemoryBarrierMask PixelBufferBarrierBitExt;
    [NativeNameAttribute("Name", "GL_TEXTURE_UPDATE_BARRIER_BIT")]
public static MemoryBarrierMask TextureUpdateBarrierBit;
    [NativeNameAttribute("Name", "GL_TEXTURE_UPDATE_BARRIER_BIT_EXT")]
public static MemoryBarrierMask TextureUpdateBarrierBitExt;
    [NativeNameAttribute("Name", "GL_BUFFER_UPDATE_BARRIER_BIT")]
public static MemoryBarrierMask BufferUpdateBarrierBit;
    [NativeNameAttribute("Name", "GL_BUFFER_UPDATE_BARRIER_BIT_EXT")]
public static MemoryBarrierMask BufferUpdateBarrierBitExt;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_BARRIER_BIT")]
public static MemoryBarrierMask FramebufferBarrierBit;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER_BARRIER_BIT_EXT")]
public static MemoryBarrierMask FramebufferBarrierBitExt;
    [NativeNameAttribute("Name", "GL_TRANSFORM_FEEDBACK_BARRIER_BIT")]
public static MemoryBarrierMask TransformFeedbackBarrierBit;
    [NativeNameAttribute("Name", "GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT")]
public static MemoryBarrierMask TransformFeedbackBarrierBitExt;
    [NativeNameAttribute("Name", "GL_ATOMIC_COUNTER_BARRIER_BIT")]
public static MemoryBarrierMask AtomicCounterBarrierBit;
    [NativeNameAttribute("Name", "GL_ATOMIC_COUNTER_BARRIER_BIT_EXT")]
public static MemoryBarrierMask AtomicCounterBarrierBitExt;
    [NativeNameAttribute("Name", "GL_SHADER_STORAGE_BARRIER_BIT")]
public static MemoryBarrierMask ShaderStorageBarrierBit;
    [NativeNameAttribute("Name", "GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT")]
public static MemoryBarrierMask ClientMappedBufferBarrierBit;
    [NativeNameAttribute("Name", "GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT_EXT")]
public static MemoryBarrierMask ClientMappedBufferBarrierBitExt;
    [NativeNameAttribute("Name", "GL_QUERY_BUFFER_BARRIER_BIT")]
public static MemoryBarrierMask QueryBufferBarrierBit;
    [NativeNameAttribute("Name", "GL_ALL_BARRIER_BITS")]
public static MemoryBarrierMask AllBarrierBits;
    [NativeNameAttribute("Name", "GL_ALL_BARRIER_BITS_EXT")]
public static MemoryBarrierMask AllBarrierBitsExt;
}
[NativeNameAttribute("Name", "MemoryObjectParameterName")]
public enum Silk.NET.OpenGL.MemoryObjectParameterName : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_DEDICATED_MEMORY_OBJECT_EXT")]
public static MemoryObjectParameterName DedicatedMemoryObjectExt;
    [NativeNameAttribute("Name", "GL_PROTECTED_MEMORY_OBJECT_EXT")]
public static MemoryObjectParameterName ProtectedMemoryObjectExt;
}
[NativeNameAttribute("Name", "MeshMode1")]
public enum Silk.NET.OpenGL.MeshMode1 : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_POINT")]
public static MeshMode1 Point;
    [NativeNameAttribute("Name", "GL_LINE")]
public static MeshMode1 Line;
}
[NativeNameAttribute("Name", "MeshMode2")]
public enum Silk.NET.OpenGL.MeshMode2 : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_POINT")]
public static MeshMode2 Point;
    [NativeNameAttribute("Name", "GL_LINE")]
public static MeshMode2 Line;
    [NativeNameAttribute("Name", "GL_FILL")]
public static MeshMode2 Fill;
}
[NativeNameAttribute("Name", "MinmaxTarget")]
public enum Silk.NET.OpenGL.MinmaxTarget : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_MINMAX")]
public static MinmaxTarget Minmax;
}
[NativeNameAttribute("Name", "MinmaxTargetEXT")]
public enum Silk.NET.OpenGL.MinmaxTargetEXT : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_MINMAX")]
public static MinmaxTargetEXT Minmax;
    [NativeNameAttribute("Name", "GL_MINMAX_EXT")]
public static MinmaxTargetEXT MinmaxExt;
}
[NativeNameAttribute("Name", "NormalPointerType")]
public enum Silk.NET.OpenGL.NormalPointerType : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_BYTE")]
public static NormalPointerType Byte;
    [NativeNameAttribute("Name", "GL_SHORT")]
public static NormalPointerType Short;
    [NativeNameAttribute("Name", "GL_INT")]
public static NormalPointerType Int;
    [NativeNameAttribute("Name", "GL_FLOAT")]
public static NormalPointerType Float;
    [NativeNameAttribute("Name", "GL_DOUBLE")]
public static NormalPointerType Double;
}
[NativeNameAttribute("Name", "ObjectIdentifier")]
public enum Silk.NET.OpenGL.ObjectIdentifier : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_TEXTURE")]
public static ObjectIdentifier Texture;
    [NativeNameAttribute("Name", "GL_VERTEX_ARRAY")]
public static ObjectIdentifier VertexArray;
    [NativeNameAttribute("Name", "GL_BUFFER")]
public static ObjectIdentifier Buffer;
    [NativeNameAttribute("Name", "GL_SHADER")]
public static ObjectIdentifier Shader;
    [NativeNameAttribute("Name", "GL_PROGRAM")]
public static ObjectIdentifier Program;
    [NativeNameAttribute("Name", "GL_QUERY")]
public static ObjectIdentifier Query;
    [NativeNameAttribute("Name", "GL_PROGRAM_PIPELINE")]
public static ObjectIdentifier ProgramPipeline;
    [NativeNameAttribute("Name", "GL_SAMPLER")]
public static ObjectIdentifier Sampler;
    [NativeNameAttribute("Name", "GL_FRAMEBUFFER")]
public static ObjectIdentifier Framebuffer;
    [NativeNameAttribute("Name", "GL_RENDERBUFFER")]
public static ObjectIdentifier Renderbuffer;
    [NativeNameAttribute("Name", "GL_TRANSFORM_FEEDBACK")]
public static ObjectIdentifier TransformFeedback;
}
[NativeNameAttribute("Name", "ObjectTypeAPPLE")]
public enum Silk.NET.OpenGL.ObjectTypeAPPLE : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_DRAW_PIXELS_APPLE")]
public static ObjectTypeAPPLE DrawPixelsApple;
    [NativeNameAttribute("Name", "GL_FENCE_APPLE")]
public static ObjectTypeAPPLE FenceApple;
}
[NativeNameAttribute("Name", "OcclusionQueryEventMaskAMD")]
public enum Silk.NET.OpenGL.OcclusionQueryEventMaskAMD : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD")]
public static OcclusionQueryEventMaskAMD QueryDepthPassEventBitAmd;
    [NativeNameAttribute("Name", "GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD")]
public static OcclusionQueryEventMaskAMD QueryDepthFailEventBitAmd;
    [NativeNameAttribute("Name", "GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD")]
public static OcclusionQueryEventMaskAMD QueryStencilFailEventBitAmd;
    [NativeNameAttribute("Name", "GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD")]
public static OcclusionQueryEventMaskAMD QueryDepthBoundsFailEventBitAmd;
    [NativeNameAttribute("Name", "GL_QUERY_ALL_EVENT_BITS_AMD")]
public static OcclusionQueryEventMaskAMD QueryAllEventBitsAmd;
}
[NativeNameAttribute("Name", "OcclusionQueryParameterNameNV")]
public enum Silk.NET.OpenGL.OcclusionQueryParameterNameNV : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_PIXEL_COUNT_NV")]
public static OcclusionQueryParameterNameNV PixelCountNV;
    [NativeNameAttribute("Name", "GL_PIXEL_COUNT_AVAILABLE_NV")]
public static OcclusionQueryParameterNameNV PixelCountAvailableNV;
}
[NativeNameAttribute("Name", "ParameterRangeEXT")]
public enum Silk.NET.OpenGL.ParameterRangeEXT : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_NORMALIZED_RANGE_EXT")]
public static ParameterRangeEXT NormalizedRangeExt;
    [NativeNameAttribute("Name", "GL_FULL_RANGE_EXT")]
public static ParameterRangeEXT FullRangeExt;
}
[NativeNameAttribute("Name", "PatchParameterName")]
public enum Silk.NET.OpenGL.PatchParameterName : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_PATCH_VERTICES")]
public static PatchParameterName PatchVertices;
    [NativeNameAttribute("Name", "GL_PATCH_DEFAULT_INNER_LEVEL")]
public static PatchParameterName PatchDefaultInnerLevel;
    [NativeNameAttribute("Name", "GL_PATCH_DEFAULT_OUTER_LEVEL")]
public static PatchParameterName PatchDefaultOuterLevel;
}
[NativeNameAttribute("Name", "PathColor")]
public enum Silk.NET.OpenGL.PathColor : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_PRIMARY_COLOR_NV")]
public static PathColor PrimaryColorNV;
    [NativeNameAttribute("Name", "GL_SECONDARY_COLOR_NV")]
public static PathColor SecondaryColorNV;
}
[NativeNameAttribute("Name", "PathColorFormat")]
public enum Silk.NET.OpenGL.PathColorFormat : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_NONE")]
public static PathColorFormat None;
    [NativeNameAttribute("Name", "GL_ALPHA")]
public static PathColorFormat Alpha;
    [NativeNameAttribute("Name", "GL_RGB")]
public static PathColorFormat Rgb;
    [NativeNameAttribute("Name", "GL_RGBA")]
public static PathColorFormat Rgba;
}
[NativeNameAttribute("Name", "PathCoordType")]
public enum Silk.NET.OpenGL.PathCoordType : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_CLOSE_PATH_NV")]
public static PathCoordType ClosePathNV;
    [NativeNameAttribute("Name", "GL_MOVE_TO_NV")]
public static PathCoordType MoveToNV;
    [NativeNameAttribute("Name", "GL_RELATIVE_MOVE_TO_NV")]
public static PathCoordType RelativeMoveToNV;
    [NativeNameAttribute("Name", "GL_LINE_TO_NV")]
public static PathCoordType LineToNV;
    [NativeNameAttribute("Name", "GL_RELATIVE_LINE_TO_NV")]
public static PathCoordType RelativeLineToNV;
    [NativeNameAttribute("Name", "GL_HORIZONTAL_LINE_TO_NV")]
public static PathCoordType HorizontalLineToNV;
    [NativeNameAttribute("Name", "GL_RELATIVE_HORIZONTAL_LINE_TO_NV")]
public static PathCoordType RelativeHorizontalLineToNV;
    [NativeNameAttribute("Name", "GL_VERTICAL_LINE_TO_NV")]
public static PathCoordType VerticalLineToNV;
    [NativeNameAttribute("Name", "GL_RELATIVE_VERTICAL_LINE_TO_NV")]
public static PathCoordType RelativeVerticalLineToNV;
    [NativeNameAttribute("Name", "GL_QUADRATIC_CURVE_TO_NV")]
public static PathCoordType QuadraticCurveToNV;
    [NativeNameAttribute("Name", "GL_RELATIVE_QUADRATIC_CURVE_TO_NV")]
public static PathCoordType RelativeQuadraticCurveToNV;
    [NativeNameAttribute("Name", "GL_CUBIC_CURVE_TO_NV")]
public static PathCoordType CubicCurveToNV;
    [NativeNameAttribute("Name", "GL_RELATIVE_CUBIC_CURVE_TO_NV")]
public static PathCoordType RelativeCubicCurveToNV;
    [NativeNameAttribute("Name", "GL_SMOOTH_QUADRATIC_CURVE_TO_NV")]
public static PathCoordType SmoothQuadraticCurveToNV;
    [NativeNameAttribute("Name", "GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV")]
public static PathCoordType RelativeSmoothQuadraticCurveToNV;
    [NativeNameAttribute("Name", "GL_SMOOTH_CUBIC_CURVE_TO_NV")]
public static PathCoordType SmoothCubicCurveToNV;
    [NativeNameAttribute("Name", "GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV")]
public static PathCoordType RelativeSmoothCubicCurveToNV;
    [NativeNameAttribute("Name", "GL_SMALL_CCW_ARC_TO_NV")]
public static PathCoordType SmallCcwArcToNV;
    [NativeNameAttribute("Name", "GL_RELATIVE_SMALL_CCW_ARC_TO_NV")]
public static PathCoordType RelativeSmallCcwArcToNV;
    [NativeNameAttribute("Name", "GL_SMALL_CW_ARC_TO_NV")]
public static PathCoordType SmallCWArcToNV;
    [NativeNameAttribute("Name", "GL_RELATIVE_SMALL_CW_ARC_TO_NV")]
public static PathCoordType RelativeSmallCWArcToNV;
    [NativeNameAttribute("Name", "GL_LARGE_CCW_ARC_TO_NV")]
public static PathCoordType LargeCcwArcToNV;
    [NativeNameAttribute("Name", "GL_RELATIVE_LARGE_CCW_ARC_TO_NV")]
public static PathCoordType RelativeLargeCcwArcToNV;
    [NativeNameAttribute("Name", "GL_LARGE_CW_ARC_TO_NV")]
public static PathCoordType LargeCWArcToNV;
    [NativeNameAttribute("Name", "GL_RELATIVE_LARGE_CW_ARC_TO_NV")]
public static PathCoordType RelativeLargeCWArcToNV;
    [NativeNameAttribute("Name", "GL_CONIC_CURVE_TO_NV")]
public static PathCoordType ConicCurveToNV;
    [NativeNameAttribute("Name", "GL_RELATIVE_CONIC_CURVE_TO_NV")]
public static PathCoordType RelativeConicCurveToNV;
    [NativeNameAttribute("Name", "GL_ROUNDED_RECT_NV")]
public static PathCoordType RoundedRectNV;
    [NativeNameAttribute("Name", "GL_RELATIVE_ROUNDED_RECT_NV")]
public static PathCoordType RelativeRoundedRectNV;
    [NativeNameAttribute("Name", "GL_ROUNDED_RECT2_NV")]
public static PathCoordType RoundedRect2NV;
    [NativeNameAttribute("Name", "GL_RELATIVE_ROUNDED_RECT2_NV")]
public static PathCoordType RelativeRoundedRect2NV;
    [NativeNameAttribute("Name", "GL_ROUNDED_RECT4_NV")]
public static PathCoordType RoundedRect4NV;
    [NativeNameAttribute("Name", "GL_RELATIVE_ROUNDED_RECT4_NV")]
public static PathCoordType RelativeRoundedRect4NV;
    [NativeNameAttribute("Name", "GL_ROUNDED_RECT8_NV")]
public static PathCoordType RoundedRect8NV;
    [NativeNameAttribute("Name", "GL_RELATIVE_ROUNDED_RECT8_NV")]
public static PathCoordType RelativeRoundedRect8NV;
    [NativeNameAttribute("Name", "GL_RESTART_PATH_NV")]
public static PathCoordType RestartPathNV;
    [NativeNameAttribute("Name", "GL_DUP_FIRST_CUBIC_CURVE_TO_NV")]
public static PathCoordType DupFirstCubicCurveToNV;
    [NativeNameAttribute("Name", "GL_DUP_LAST_CUBIC_CURVE_TO_NV")]
public static PathCoordType DupLastCubicCurveToNV;
    [NativeNameAttribute("Name", "GL_RECT_NV")]
public static PathCoordType RectNV;
    [NativeNameAttribute("Name", "GL_RELATIVE_RECT_NV")]
public static PathCoordType RelativeRectNV;
    [NativeNameAttribute("Name", "GL_CIRCULAR_CCW_ARC_TO_NV")]
public static PathCoordType CircularCcwArcToNV;
    [NativeNameAttribute("Name", "GL_CIRCULAR_CW_ARC_TO_NV")]
public static PathCoordType CircularCWArcToNV;
    [NativeNameAttribute("Name", "GL_CIRCULAR_TANGENT_ARC_TO_NV")]
public static PathCoordType CircularTangentArcToNV;
    [NativeNameAttribute("Name", "GL_ARC_TO_NV")]
public static PathCoordType ArcToNV;
    [NativeNameAttribute("Name", "GL_RELATIVE_ARC_TO_NV")]
public static PathCoordType RelativeArcToNV;
}
[NativeNameAttribute("Name", "PathCoverMode")]
public enum Silk.NET.OpenGL.PathCoverMode : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_PATH_FILL_COVER_MODE_NV")]
public static PathCoverMode PathFillCoverModeNV;
    [NativeNameAttribute("Name", "GL_CONVEX_HULL_NV")]
public static PathCoverMode ConvexHullNV;
    [NativeNameAttribute("Name", "GL_BOUNDING_BOX_NV")]
public static PathCoverMode BoundingBoxNV;
    [NativeNameAttribute("Name", "GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV")]
public static PathCoverMode BoundingBoxOfBoundingBoxesNV;
}
[NativeNameAttribute("Name", "PathElementType")]
public enum Silk.NET.OpenGL.PathElementType : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_UTF8_NV")]
public static PathElementType Utf8NV;
    [NativeNameAttribute("Name", "GL_UTF16_NV")]
public static PathElementType Utf16NV;
}
[NativeNameAttribute("Name", "PathFillMode")]
public enum Silk.NET.OpenGL.PathFillMode : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_INVERT")]
public static PathFillMode Invert;
    [NativeNameAttribute("Name", "GL_PATH_FILL_MODE_NV")]
public static PathFillMode PathFillModeNV;
    [NativeNameAttribute("Name", "GL_COUNT_UP_NV")]
public static PathFillMode CountUpNV;
    [NativeNameAttribute("Name", "GL_COUNT_DOWN_NV")]
public static PathFillMode CountDownNV;
}
[NativeNameAttribute("Name", "PathFontStyle")]
public enum Silk.NET.OpenGL.PathFontStyle : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_BOLD_BIT_NV")]
public static PathFontStyle BoldBitNV;
    [NativeNameAttribute("Name", "GL_ITALIC_BIT_NV")]
public static PathFontStyle ItalicBitNV;
    [NativeNameAttribute("Name", "GL_NONE")]
public static PathFontStyle None;
}
[NativeNameAttribute("Name", "PathFontTarget")]
public enum Silk.NET.OpenGL.PathFontTarget : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_STANDARD_FONT_NAME_NV")]
public static PathFontTarget StandardFontNameNV;
    [NativeNameAttribute("Name", "GL_SYSTEM_FONT_NAME_NV")]
public static PathFontTarget SystemFontNameNV;
    [NativeNameAttribute("Name", "GL_FILE_NAME_NV")]
public static PathFontTarget FileNameNV;
}
[NativeNameAttribute("Name", "PathGenMode")]
public enum Silk.NET.OpenGL.PathGenMode : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_NONE")]
public static PathGenMode None;
    [NativeNameAttribute("Name", "GL_PATH_OBJECT_BOUNDING_BOX_NV")]
public static PathGenMode PathObjectBoundingBoxNV;
}
[NativeNameAttribute("Name", "PathHandleMissingGlyphs")]
public enum Silk.NET.OpenGL.PathHandleMissingGlyphs : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_SKIP_MISSING_GLYPH_NV")]
public static PathHandleMissingGlyphs SkipMissingGlyphNV;
    [NativeNameAttribute("Name", "GL_USE_MISSING_GLYPH_NV")]
public static PathHandleMissingGlyphs UseMissingGlyphNV;
}
[NativeNameAttribute("Name", "PathListMode")]
public enum Silk.NET.OpenGL.PathListMode : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_ACCUM_ADJACENT_PAIRS_NV")]
public static PathListMode AccumAdjacentPairsNV;
    [NativeNameAttribute("Name", "GL_ADJACENT_PAIRS_NV")]
public static PathListMode AdjacentPairsNV;
    [NativeNameAttribute("Name", "GL_FIRST_TO_REST_NV")]
public static PathListMode FirstToRestNV;
}
[NativeNameAttribute("Name", "PathMetricMask")]
public enum Silk.NET.OpenGL.PathMetricMask : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_GLYPH_WIDTH_BIT_NV")]
public static PathMetricMask GlyphWidthBitNV;
    [NativeNameAttribute("Name", "GL_GLYPH_HEIGHT_BIT_NV")]
public static PathMetricMask GlyphHeightBitNV;
    [NativeNameAttribute("Name", "GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV")]
public static PathMetricMask GlyphHorizontalBearingXBitNV;
    [NativeNameAttribute("Name", "GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV")]
public static PathMetricMask GlyphHorizontalBearingYBitNV;
    [NativeNameAttribute("Name", "GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV")]
public static PathMetricMask GlyphHorizontalBearingAdvanceBitNV;
    [NativeNameAttribute("Name", "GL_GLYPH_VERTICAL_BEARING_X_BIT_NV")]
public static PathMetricMask GlyphVerticalBearingXBitNV;
    [NativeNameAttribute("Name", "GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV")]
public static PathMetricMask GlyphVerticalBearingYBitNV;
    [NativeNameAttribute("Name", "GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV")]
public static PathMetricMask GlyphVerticalBearingAdvanceBitNV;
    [NativeNameAttribute("Name", "GL_GLYPH_HAS_KERNING_BIT_NV")]
public static PathMetricMask GlyphHasKerningBitNV;
    [NativeNameAttribute("Name", "GL_FONT_X_MIN_BOUNDS_BIT_NV")]
public static PathMetricMask FontXMinBoundsBitNV;
    [NativeNameAttribute("Name", "GL_FONT_Y_MIN_BOUNDS_BIT_NV")]
public static PathMetricMask FontYMinBoundsBitNV;
    [NativeNameAttribute("Name", "GL_FONT_X_MAX_BOUNDS_BIT_NV")]
public static PathMetricMask FontXMaxBoundsBitNV;
    [NativeNameAttribute("Name", "GL_FONT_Y_MAX_BOUNDS_BIT_NV")]
public static PathMetricMask FontYMaxBoundsBitNV;
    [NativeNameAttribute("Name", "GL_FONT_UNITS_PER_EM_BIT_NV")]
public static PathMetricMask FontUnitsPerEMBitNV;
    [NativeNameAttribute("Name", "GL_FONT_ASCENDER_BIT_NV")]
public static PathMetricMask FontAscenderBitNV;
    [NativeNameAttribute("Name", "GL_FONT_DESCENDER_BIT_NV")]
public static PathMetricMask FontDescenderBitNV;
    [NativeNameAttribute("Name", "GL_FONT_HEIGHT_BIT_NV")]
public static PathMetricMask FontHeightBitNV;
    [NativeNameAttribute("Name", "GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV")]
public static PathMetricMask FontMaxAdvanceWidthBitNV;
    [NativeNameAttribute("Name", "GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV")]
public static PathMetricMask FontMaxAdvanceHeightBitNV;
    [NativeNameAttribute("Name", "GL_FONT_UNDERLINE_POSITION_BIT_NV")]
public static PathMetricMask FontUnderlinePositionBitNV;
    [NativeNameAttribute("Name", "GL_FONT_UNDERLINE_THICKNESS_BIT_NV")]
public static PathMetricMask FontUnderlineThicknessBitNV;
    [NativeNameAttribute("Name", "GL_FONT_HAS_KERNING_BIT_NV")]
public static PathMetricMask FontHasKerningBitNV;
    [NativeNameAttribute("Name", "GL_FONT_NUM_GLYPH_INDICES_BIT_NV")]
public static PathMetricMask FontNumGlyphIndicesBitNV;
}
[NativeNameAttribute("Name", "PathParameter")]
public enum Silk.NET.OpenGL.PathParameter : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_PATH_STROKE_WIDTH_NV")]
public static PathParameter PathStrokeWidthNV;
    [NativeNameAttribute("Name", "GL_PATH_END_CAPS_NV")]
public static PathParameter PathEndCapsNV;
    [NativeNameAttribute("Name", "GL_PATH_INITIAL_END_CAP_NV")]
public static PathParameter PathInitialEndCapNV;
    [NativeNameAttribute("Name", "GL_PATH_TERMINAL_END_CAP_NV")]
public static PathParameter PathTerminalEndCapNV;
    [NativeNameAttribute("Name", "GL_PATH_JOIN_STYLE_NV")]
public static PathParameter PathJoinStyleNV;
    [NativeNameAttribute("Name", "GL_PATH_MITER_LIMIT_NV")]
public static PathParameter PathMiterLimitNV;
    [NativeNameAttribute("Name", "GL_PATH_DASH_CAPS_NV")]
public static PathParameter PathDashCapsNV;
    [NativeNameAttribute("Name", "GL_PATH_INITIAL_DASH_CAP_NV")]
public static PathParameter PathInitialDashCapNV;
    [NativeNameAttribute("Name", "GL_PATH_TERMINAL_DASH_CAP_NV")]
public static PathParameter PathTerminalDashCapNV;
    [NativeNameAttribute("Name", "GL_PATH_DASH_OFFSET_NV")]
public static PathParameter PathDashOffsetNV;
    [NativeNameAttribute("Name", "GL_PATH_CLIENT_LENGTH_NV")]
public static PathParameter PathClientLengthNV;
    [NativeNameAttribute("Name", "GL_PATH_FILL_MODE_NV")]
public static PathParameter PathFillModeNV;
    [NativeNameAttribute("Name", "GL_PATH_FILL_MASK_NV")]
public static PathParameter PathFillMaskNV;
    [NativeNameAttribute("Name", "GL_PATH_FILL_COVER_MODE_NV")]
public static PathParameter PathFillCoverModeNV;
    [NativeNameAttribute("Name", "GL_PATH_STROKE_COVER_MODE_NV")]
public static PathParameter PathStrokeCoverModeNV;
    [NativeNameAttribute("Name", "GL_PATH_STROKE_MASK_NV")]
public static PathParameter PathStrokeMaskNV;
    [NativeNameAttribute("Name", "GL_PATH_OBJECT_BOUNDING_BOX_NV")]
public static PathParameter PathObjectBoundingBoxNV;
    [NativeNameAttribute("Name", "GL_PATH_COMMAND_COUNT_NV")]
public static PathParameter PathCommandCountNV;
    [NativeNameAttribute("Name", "GL_PATH_COORD_COUNT_NV")]
public static PathParameter PathCoordCountNV;
    [NativeNameAttribute("Name", "GL_PATH_DASH_ARRAY_COUNT_NV")]
public static PathParameter PathDashArrayCountNV;
    [NativeNameAttribute("Name", "GL_PATH_COMPUTED_LENGTH_NV")]
public static PathParameter PathComputedLengthNV;
    [NativeNameAttribute("Name", "GL_PATH_FILL_BOUNDING_BOX_NV")]
public static PathParameter PathFillBoundingBoxNV;
    [NativeNameAttribute("Name", "GL_PATH_STROKE_BOUNDING_BOX_NV")]
public static PathParameter PathStrokeBoundingBoxNV;
    [NativeNameAttribute("Name", "GL_PATH_DASH_OFFSET_RESET_NV")]
public static PathParameter PathDashOffsetResetNV;
}
[NativeNameAttribute("Name", "PathStringFormat")]
public enum Silk.NET.OpenGL.PathStringFormat : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_PATH_FORMAT_SVG_NV")]
public static PathStringFormat PathFormatSvgNV;
    [NativeNameAttribute("Name", "GL_PATH_FORMAT_PS_NV")]
public static PathStringFormat PathFormatPSNV;
}
[NativeNameAttribute("Name", "PathTransformType")]
public enum Silk.NET.OpenGL.PathTransformType : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_NONE")]
public static PathTransformType None;
    [NativeNameAttribute("Name", "GL_TRANSLATE_X_NV")]
public static PathTransformType TranslateXNV;
    [NativeNameAttribute("Name", "GL_TRANSLATE_Y_NV")]
public static PathTransformType TranslateYNV;
    [NativeNameAttribute("Name", "GL_TRANSLATE_2D_NV")]
public static PathTransformType Translate2DNV;
    [NativeNameAttribute("Name", "GL_TRANSLATE_3D_NV")]
public static PathTransformType Translate3DNV;
    [NativeNameAttribute("Name", "GL_AFFINE_2D_NV")]
public static PathTransformType Affine2DNV;
    [NativeNameAttribute("Name", "GL_AFFINE_3D_NV")]
public static PathTransformType Affine3DNV;
    [NativeNameAttribute("Name", "GL_TRANSPOSE_AFFINE_2D_NV")]
public static PathTransformType TransposeAffine2DNV;
    [NativeNameAttribute("Name", "GL_TRANSPOSE_AFFINE_3D_NV")]
public static PathTransformType TransposeAffine3DNV;
}
[NativeNameAttribute("Name", "PerformanceQueryCapsMaskINTEL")]
public enum Silk.NET.OpenGL.PerformanceQueryCapsMaskINTEL : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_PERFQUERY_SINGLE_CONTEXT_INTEL")]
public static PerformanceQueryCapsMaskINTEL PerfquerySingleContextIntel;
    [NativeNameAttribute("Name", "GL_PERFQUERY_GLOBAL_CONTEXT_INTEL")]
public static PerformanceQueryCapsMaskINTEL PerfqueryGlobalContextIntel;
}
[NativeNameAttribute("Name", "PipelineParameterName")]
public enum Silk.NET.OpenGL.PipelineParameterName : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_ACTIVE_PROGRAM")]
public static PipelineParameterName ActiveProgram;
    [NativeNameAttribute("Name", "GL_FRAGMENT_SHADER")]
public static PipelineParameterName FragmentShader;
    [NativeNameAttribute("Name", "GL_VERTEX_SHADER")]
public static PipelineParameterName VertexShader;
    [NativeNameAttribute("Name", "GL_INFO_LOG_LENGTH")]
public static PipelineParameterName InfoLogLength;
    [NativeNameAttribute("Name", "GL_GEOMETRY_SHADER")]
public static PipelineParameterName GeometryShader;
    [NativeNameAttribute("Name", "GL_TESS_EVALUATION_SHADER")]
public static PipelineParameterName TessEvaluationShader;
    [NativeNameAttribute("Name", "GL_TESS_CONTROL_SHADER")]
public static PipelineParameterName TessControlShader;
}
[NativeNameAttribute("Name", "PixelCopyType")]
public enum Silk.NET.OpenGL.PixelCopyType : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_COLOR")]
public static PixelCopyType Color;
    [NativeNameAttribute("Name", "GL_COLOR_EXT")]
public static PixelCopyType ColorExt;
    [NativeNameAttribute("Name", "GL_DEPTH")]
public static PixelCopyType Depth;
    [NativeNameAttribute("Name", "GL_DEPTH_EXT")]
public static PixelCopyType DepthExt;
    [NativeNameAttribute("Name", "GL_STENCIL")]
public static PixelCopyType Stencil;
    [NativeNameAttribute("Name", "GL_STENCIL_EXT")]
public static PixelCopyType StencilExt;
}
[NativeNameAttribute("Name", "PixelDataRangeTargetNV")]
public enum Silk.NET.OpenGL.PixelDataRangeTargetNV : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_WRITE_PIXEL_DATA_RANGE_NV")]
public static PixelDataRangeTargetNV WritePixelDataRangeNV;
    [NativeNameAttribute("Name", "GL_READ_PIXEL_DATA_RANGE_NV")]
public static PixelDataRangeTargetNV ReadPixelDataRangeNV;
}
[NativeNameAttribute("Name", "PixelFormat")]
public enum Silk.NET.OpenGL.PixelFormat : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_UNSIGNED_SHORT")]
public static PixelFormat UnsignedShort;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT")]
public static PixelFormat UnsignedInt;
    [NativeNameAttribute("Name", "GL_STENCIL_INDEX")]
public static PixelFormat StencilIndex;
    [NativeNameAttribute("Name", "GL_DEPTH_COMPONENT")]
public static PixelFormat DepthComponent;
    [NativeNameAttribute("Name", "GL_RED")]
public static PixelFormat Red;
    [NativeNameAttribute("Name", "GL_RED_EXT")]
public static PixelFormat RedExt;
    [NativeNameAttribute("Name", "GL_GREEN")]
public static PixelFormat Green;
    [NativeNameAttribute("Name", "GL_BLUE")]
public static PixelFormat Blue;
    [NativeNameAttribute("Name", "GL_ALPHA")]
public static PixelFormat Alpha;
    [NativeNameAttribute("Name", "GL_RGB")]
public static PixelFormat Rgb;
    [NativeNameAttribute("Name", "GL_RGBA")]
public static PixelFormat Rgba;
    [NativeNameAttribute("Name", "GL_ABGR_EXT")]
public static PixelFormat AbgrExt;
    [NativeNameAttribute("Name", "GL_CMYK_EXT")]
public static PixelFormat CmykExt;
    [NativeNameAttribute("Name", "GL_CMYKA_EXT")]
public static PixelFormat CmykaExt;
    [NativeNameAttribute("Name", "GL_BGR")]
public static PixelFormat Bgr;
    [NativeNameAttribute("Name", "GL_BGRA")]
public static PixelFormat Bgra;
    [NativeNameAttribute("Name", "GL_YCRCB_422_SGIX")]
public static PixelFormat Ycrcb422Sgix;
    [NativeNameAttribute("Name", "GL_YCRCB_444_SGIX")]
public static PixelFormat Ycrcb444Sgix;
    [NativeNameAttribute("Name", "GL_RG")]
public static PixelFormat RG;
    [NativeNameAttribute("Name", "GL_RG_INTEGER")]
public static PixelFormat RGInteger;
    [NativeNameAttribute("Name", "GL_DEPTH_STENCIL")]
public static PixelFormat DepthStencil;
    [NativeNameAttribute("Name", "GL_RED_INTEGER")]
public static PixelFormat RedInteger;
    [NativeNameAttribute("Name", "GL_GREEN_INTEGER")]
public static PixelFormat GreenInteger;
    [NativeNameAttribute("Name", "GL_BLUE_INTEGER")]
public static PixelFormat BlueInteger;
    [NativeNameAttribute("Name", "GL_RGB_INTEGER")]
public static PixelFormat RgbInteger;
    [NativeNameAttribute("Name", "GL_RGBA_INTEGER")]
public static PixelFormat RgbaInteger;
    [NativeNameAttribute("Name", "GL_BGR_INTEGER")]
public static PixelFormat BgrInteger;
    [NativeNameAttribute("Name", "GL_BGRA_INTEGER")]
public static PixelFormat BgraInteger;
}
[NativeNameAttribute("Name", "PixelMap")]
public enum Silk.NET.OpenGL.PixelMap : Enum {
    public int value__;
}
[NativeNameAttribute("Name", "PixelStoreParameter")]
public enum Silk.NET.OpenGL.PixelStoreParameter : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_UNPACK_SWAP_BYTES")]
public static PixelStoreParameter UnpackSwapBytes;
    [NativeNameAttribute("Name", "GL_UNPACK_LSB_FIRST")]
public static PixelStoreParameter UnpackLsbFirst;
    [NativeNameAttribute("Name", "GL_UNPACK_ROW_LENGTH")]
public static PixelStoreParameter UnpackRowLength;
    [NativeNameAttribute("Name", "GL_UNPACK_ROW_LENGTH_EXT")]
public static PixelStoreParameter UnpackRowLengthExt;
    [NativeNameAttribute("Name", "GL_UNPACK_SKIP_ROWS")]
public static PixelStoreParameter UnpackSkipRows;
    [NativeNameAttribute("Name", "GL_UNPACK_SKIP_ROWS_EXT")]
public static PixelStoreParameter UnpackSkipRowsExt;
    [NativeNameAttribute("Name", "GL_UNPACK_SKIP_PIXELS")]
public static PixelStoreParameter UnpackSkipPixels;
    [NativeNameAttribute("Name", "GL_UNPACK_SKIP_PIXELS_EXT")]
public static PixelStoreParameter UnpackSkipPixelsExt;
    [NativeNameAttribute("Name", "GL_UNPACK_ALIGNMENT")]
public static PixelStoreParameter UnpackAlignment;
    [NativeNameAttribute("Name", "GL_PACK_SWAP_BYTES")]
public static PixelStoreParameter PackSwapBytes;
    [NativeNameAttribute("Name", "GL_PACK_LSB_FIRST")]
public static PixelStoreParameter PackLsbFirst;
    [NativeNameAttribute("Name", "GL_PACK_ROW_LENGTH")]
public static PixelStoreParameter PackRowLength;
    [NativeNameAttribute("Name", "GL_PACK_SKIP_ROWS")]
public static PixelStoreParameter PackSkipRows;
    [NativeNameAttribute("Name", "GL_PACK_SKIP_PIXELS")]
public static PixelStoreParameter PackSkipPixels;
    [NativeNameAttribute("Name", "GL_PACK_ALIGNMENT")]
public static PixelStoreParameter PackAlignment;
    [NativeNameAttribute("Name", "GL_PACK_SKIP_IMAGES")]
public static PixelStoreParameter PackSkipImages;
    [NativeNameAttribute("Name", "GL_PACK_SKIP_IMAGES_EXT")]
public static PixelStoreParameter PackSkipImagesExt;
    [NativeNameAttribute("Name", "GL_PACK_IMAGE_HEIGHT")]
public static PixelStoreParameter PackImageHeight;
    [NativeNameAttribute("Name", "GL_PACK_IMAGE_HEIGHT_EXT")]
public static PixelStoreParameter PackImageHeightExt;
    [NativeNameAttribute("Name", "GL_UNPACK_SKIP_IMAGES")]
public static PixelStoreParameter UnpackSkipImages;
    [NativeNameAttribute("Name", "GL_UNPACK_SKIP_IMAGES_EXT")]
public static PixelStoreParameter UnpackSkipImagesExt;
    [NativeNameAttribute("Name", "GL_UNPACK_IMAGE_HEIGHT")]
public static PixelStoreParameter UnpackImageHeight;
    [NativeNameAttribute("Name", "GL_UNPACK_IMAGE_HEIGHT_EXT")]
public static PixelStoreParameter UnpackImageHeightExt;
    [NativeNameAttribute("Name", "GL_PACK_SKIP_VOLUMES_SGIS")]
public static PixelStoreParameter PackSkipVolumesSgis;
    [NativeNameAttribute("Name", "GL_PACK_IMAGE_DEPTH_SGIS")]
public static PixelStoreParameter PackImageDepthSgis;
    [NativeNameAttribute("Name", "GL_UNPACK_SKIP_VOLUMES_SGIS")]
public static PixelStoreParameter UnpackSkipVolumesSgis;
    [NativeNameAttribute("Name", "GL_UNPACK_IMAGE_DEPTH_SGIS")]
public static PixelStoreParameter UnpackImageDepthSgis;
    [NativeNameAttribute("Name", "GL_PIXEL_TILE_WIDTH_SGIX")]
public static PixelStoreParameter PixelTileWidthSgix;
    [NativeNameAttribute("Name", "GL_PIXEL_TILE_HEIGHT_SGIX")]
public static PixelStoreParameter PixelTileHeightSgix;
    [NativeNameAttribute("Name", "GL_PIXEL_TILE_GRID_WIDTH_SGIX")]
public static PixelStoreParameter PixelTileGridWidthSgix;
    [NativeNameAttribute("Name", "GL_PIXEL_TILE_GRID_HEIGHT_SGIX")]
public static PixelStoreParameter PixelTileGridHeightSgix;
    [NativeNameAttribute("Name", "GL_PIXEL_TILE_GRID_DEPTH_SGIX")]
public static PixelStoreParameter PixelTileGridDepthSgix;
    [NativeNameAttribute("Name", "GL_PIXEL_TILE_CACHE_SIZE_SGIX")]
public static PixelStoreParameter PixelTileCacheSizeSgix;
    [NativeNameAttribute("Name", "GL_PACK_RESAMPLE_SGIX")]
public static PixelStoreParameter PackResampleSgix;
    [NativeNameAttribute("Name", "GL_UNPACK_RESAMPLE_SGIX")]
public static PixelStoreParameter UnpackResampleSgix;
    [NativeNameAttribute("Name", "GL_PACK_SUBSAMPLE_RATE_SGIX")]
public static PixelStoreParameter PackSubsampleRateSgix;
    [NativeNameAttribute("Name", "GL_UNPACK_SUBSAMPLE_RATE_SGIX")]
public static PixelStoreParameter UnpackSubsampleRateSgix;
    [NativeNameAttribute("Name", "GL_PACK_RESAMPLE_OML")]
public static PixelStoreParameter PackResampleOml;
    [NativeNameAttribute("Name", "GL_UNPACK_RESAMPLE_OML")]
public static PixelStoreParameter UnpackResampleOml;
}
[NativeNameAttribute("Name", "PixelStoreResampleMode")]
public enum Silk.NET.OpenGL.PixelStoreResampleMode : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_RESAMPLE_DECIMATE_SGIX")]
public static PixelStoreResampleMode ResampleDecimateSgix;
    [NativeNameAttribute("Name", "GL_RESAMPLE_REPLICATE_SGIX")]
public static PixelStoreResampleMode ResampleReplicateSgix;
    [NativeNameAttribute("Name", "GL_RESAMPLE_ZERO_FILL_SGIX")]
public static PixelStoreResampleMode ResampleZeroFillSgix;
}
[NativeNameAttribute("Name", "PixelStoreSubsampleRate")]
public enum Silk.NET.OpenGL.PixelStoreSubsampleRate : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_PIXEL_SUBSAMPLE_4444_SGIX")]
public static PixelStoreSubsampleRate PixelSubsample4444Sgix;
    [NativeNameAttribute("Name", "GL_PIXEL_SUBSAMPLE_2424_SGIX")]
public static PixelStoreSubsampleRate PixelSubsample2424Sgix;
    [NativeNameAttribute("Name", "GL_PIXEL_SUBSAMPLE_4242_SGIX")]
public static PixelStoreSubsampleRate PixelSubsample4242Sgix;
}
[NativeNameAttribute("Name", "PixelTexGenMode")]
public enum Silk.NET.OpenGL.PixelTexGenMode : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_NONE")]
public static PixelTexGenMode None;
    [NativeNameAttribute("Name", "GL_RGB")]
public static PixelTexGenMode Rgb;
    [NativeNameAttribute("Name", "GL_RGBA")]
public static PixelTexGenMode Rgba;
    [NativeNameAttribute("Name", "GL_PIXEL_TEX_GEN_ALPHA_REPLACE_SGIX")]
public static PixelTexGenMode PixelTexGenAlphaReplaceSgix;
    [NativeNameAttribute("Name", "GL_PIXEL_TEX_GEN_ALPHA_NO_REPLACE_SGIX")]
public static PixelTexGenMode PixelTexGenAlphaNoReplaceSgix;
    [NativeNameAttribute("Name", "GL_PIXEL_TEX_GEN_ALPHA_LS_SGIX")]
public static PixelTexGenMode PixelTexGenAlphaLSSgix;
    [NativeNameAttribute("Name", "GL_PIXEL_TEX_GEN_ALPHA_MS_SGIX")]
public static PixelTexGenMode PixelTexGenAlphaMSSgix;
}
[NativeNameAttribute("Name", "PixelTexGenModeSGIX")]
public enum Silk.NET.OpenGL.PixelTexGenModeSGIX : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_PIXEL_TEX_GEN_Q_CEILING_SGIX")]
public static PixelTexGenModeSGIX PixelTexGenQCeilingSgix;
    [NativeNameAttribute("Name", "GL_PIXEL_TEX_GEN_Q_ROUND_SGIX")]
public static PixelTexGenModeSGIX PixelTexGenQRoundSgix;
    [NativeNameAttribute("Name", "GL_PIXEL_TEX_GEN_Q_FLOOR_SGIX")]
public static PixelTexGenModeSGIX PixelTexGenQFloorSgix;
    [NativeNameAttribute("Name", "GL_PIXEL_TEX_GEN_ALPHA_LS_SGIX")]
public static PixelTexGenModeSGIX PixelTexGenAlphaLSSgix;
    [NativeNameAttribute("Name", "GL_PIXEL_TEX_GEN_ALPHA_MS_SGIX")]
public static PixelTexGenModeSGIX PixelTexGenAlphaMSSgix;
}
[NativeNameAttribute("Name", "PixelTexGenParameterNameSGIS")]
public enum Silk.NET.OpenGL.PixelTexGenParameterNameSGIS : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS")]
public static PixelTexGenParameterNameSGIS PixelFragmentRgbSourceSgis;
    [NativeNameAttribute("Name", "GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS")]
public static PixelTexGenParameterNameSGIS PixelFragmentAlphaSourceSgis;
}
[NativeNameAttribute("Name", "PixelTransferParameter")]
public enum Silk.NET.OpenGL.PixelTransferParameter : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_POST_CONVOLUTION_RED_SCALE")]
public static PixelTransferParameter PostConvolutionRedScale;
    [NativeNameAttribute("Name", "GL_POST_CONVOLUTION_RED_SCALE_EXT")]
public static PixelTransferParameter PostConvolutionRedScaleExt;
    [NativeNameAttribute("Name", "GL_POST_CONVOLUTION_GREEN_SCALE")]
public static PixelTransferParameter PostConvolutionGreenScale;
    [NativeNameAttribute("Name", "GL_POST_CONVOLUTION_GREEN_SCALE_EXT")]
public static PixelTransferParameter PostConvolutionGreenScaleExt;
    [NativeNameAttribute("Name", "GL_POST_CONVOLUTION_BLUE_SCALE")]
public static PixelTransferParameter PostConvolutionBlueScale;
    [NativeNameAttribute("Name", "GL_POST_CONVOLUTION_BLUE_SCALE_EXT")]
public static PixelTransferParameter PostConvolutionBlueScaleExt;
    [NativeNameAttribute("Name", "GL_POST_CONVOLUTION_ALPHA_SCALE")]
public static PixelTransferParameter PostConvolutionAlphaScale;
    [NativeNameAttribute("Name", "GL_POST_CONVOLUTION_ALPHA_SCALE_EXT")]
public static PixelTransferParameter PostConvolutionAlphaScaleExt;
    [NativeNameAttribute("Name", "GL_POST_CONVOLUTION_RED_BIAS")]
public static PixelTransferParameter PostConvolutionRedBias;
    [NativeNameAttribute("Name", "GL_POST_CONVOLUTION_RED_BIAS_EXT")]
public static PixelTransferParameter PostConvolutionRedBiasExt;
    [NativeNameAttribute("Name", "GL_POST_CONVOLUTION_GREEN_BIAS")]
public static PixelTransferParameter PostConvolutionGreenBias;
    [NativeNameAttribute("Name", "GL_POST_CONVOLUTION_GREEN_BIAS_EXT")]
public static PixelTransferParameter PostConvolutionGreenBiasExt;
    [NativeNameAttribute("Name", "GL_POST_CONVOLUTION_BLUE_BIAS")]
public static PixelTransferParameter PostConvolutionBlueBias;
    [NativeNameAttribute("Name", "GL_POST_CONVOLUTION_BLUE_BIAS_EXT")]
public static PixelTransferParameter PostConvolutionBlueBiasExt;
    [NativeNameAttribute("Name", "GL_POST_CONVOLUTION_ALPHA_BIAS")]
public static PixelTransferParameter PostConvolutionAlphaBias;
    [NativeNameAttribute("Name", "GL_POST_CONVOLUTION_ALPHA_BIAS_EXT")]
public static PixelTransferParameter PostConvolutionAlphaBiasExt;
    [NativeNameAttribute("Name", "GL_POST_COLOR_MATRIX_RED_SCALE")]
public static PixelTransferParameter PostColorMatrixRedScale;
    [NativeNameAttribute("Name", "GL_POST_COLOR_MATRIX_RED_SCALE_SGI")]
public static PixelTransferParameter PostColorMatrixRedScaleSgi;
    [NativeNameAttribute("Name", "GL_POST_COLOR_MATRIX_GREEN_SCALE")]
public static PixelTransferParameter PostColorMatrixGreenScale;
    [NativeNameAttribute("Name", "GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI")]
public static PixelTransferParameter PostColorMatrixGreenScaleSgi;
    [NativeNameAttribute("Name", "GL_POST_COLOR_MATRIX_BLUE_SCALE")]
public static PixelTransferParameter PostColorMatrixBlueScale;
    [NativeNameAttribute("Name", "GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI")]
public static PixelTransferParameter PostColorMatrixBlueScaleSgi;
    [NativeNameAttribute("Name", "GL_POST_COLOR_MATRIX_ALPHA_SCALE")]
public static PixelTransferParameter PostColorMatrixAlphaScale;
    [NativeNameAttribute("Name", "GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI")]
public static PixelTransferParameter PostColorMatrixAlphaScaleSgi;
    [NativeNameAttribute("Name", "GL_POST_COLOR_MATRIX_RED_BIAS")]
public static PixelTransferParameter PostColorMatrixRedBias;
    [NativeNameAttribute("Name", "GL_POST_COLOR_MATRIX_RED_BIAS_SGI")]
public static PixelTransferParameter PostColorMatrixRedBiasSgi;
    [NativeNameAttribute("Name", "GL_POST_COLOR_MATRIX_GREEN_BIAS")]
public static PixelTransferParameter PostColorMatrixGreenBias;
    [NativeNameAttribute("Name", "GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI")]
public static PixelTransferParameter PostColorMatrixGreenBiasSgi;
    [NativeNameAttribute("Name", "GL_POST_COLOR_MATRIX_BLUE_BIAS")]
public static PixelTransferParameter PostColorMatrixBlueBias;
    [NativeNameAttribute("Name", "GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI")]
public static PixelTransferParameter PostColorMatrixBlueBiasSgi;
    [NativeNameAttribute("Name", "GL_POST_COLOR_MATRIX_ALPHA_BIAS")]
public static PixelTransferParameter PostColorMatrixAlphaBias;
    [NativeNameAttribute("Name", "GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI")]
public static PixelTransferParameter PostColorMatrixAlphaBiasSgi;
}
[NativeNameAttribute("Name", "PixelTransformPNameEXT")]
public enum Silk.NET.OpenGL.PixelTransformPNameEXT : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_PIXEL_MAG_FILTER_EXT")]
public static PixelTransformPNameEXT PixelMagFilterExt;
    [NativeNameAttribute("Name", "GL_PIXEL_MIN_FILTER_EXT")]
public static PixelTransformPNameEXT PixelMinFilterExt;
    [NativeNameAttribute("Name", "GL_PIXEL_CUBIC_WEIGHT_EXT")]
public static PixelTransformPNameEXT PixelCubicWeightExt;
}
[NativeNameAttribute("Name", "PixelTransformTargetEXT")]
public enum Silk.NET.OpenGL.PixelTransformTargetEXT : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_PIXEL_TRANSFORM_2D_EXT")]
public static PixelTransformTargetEXT PixelTransform2DExt;
}
[NativeNameAttribute("Name", "PixelType")]
public enum Silk.NET.OpenGL.PixelType : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_BYTE")]
public static PixelType Byte;
    [NativeNameAttribute("Name", "GL_UNSIGNED_BYTE")]
public static PixelType UnsignedByte;
    [NativeNameAttribute("Name", "GL_SHORT")]
public static PixelType Short;
    [NativeNameAttribute("Name", "GL_UNSIGNED_SHORT")]
public static PixelType UnsignedShort;
    [NativeNameAttribute("Name", "GL_INT")]
public static PixelType Int;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT")]
public static PixelType UnsignedInt;
    [NativeNameAttribute("Name", "GL_FLOAT")]
public static PixelType Float;
    [NativeNameAttribute("Name", "GL_UNSIGNED_BYTE_3_3_2")]
public static PixelType UnsignedByte332;
    [NativeNameAttribute("Name", "GL_UNSIGNED_BYTE_3_3_2_EXT")]
public static PixelType UnsignedByte332Ext;
    [NativeNameAttribute("Name", "GL_UNSIGNED_SHORT_4_4_4_4")]
public static PixelType UnsignedShort4444;
    [NativeNameAttribute("Name", "GL_UNSIGNED_SHORT_4_4_4_4_EXT")]
public static PixelType UnsignedShort4444Ext;
    [NativeNameAttribute("Name", "GL_UNSIGNED_SHORT_5_5_5_1")]
public static PixelType UnsignedShort5551;
    [NativeNameAttribute("Name", "GL_UNSIGNED_SHORT_5_5_5_1_EXT")]
public static PixelType UnsignedShort5551Ext;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_8_8_8_8")]
public static PixelType UnsignedInt8888;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_8_8_8_8_EXT")]
public static PixelType UnsignedInt8888Ext;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_10_10_10_2")]
public static PixelType UnsignedInt1010102;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_10_10_10_2_EXT")]
public static PixelType UnsignedInt1010102Ext;
}
[NativeNameAttribute("Name", "PNTrianglesPNameATI")]
public enum Silk.NET.OpenGL.PNTrianglesPNameATI : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_PN_TRIANGLES_POINT_MODE_ATI")]
public static PNTrianglesPNameATI PNTrianglesPointModeAti;
    [NativeNameAttribute("Name", "GL_PN_TRIANGLES_NORMAL_MODE_ATI")]
public static PNTrianglesPNameATI PNTrianglesNormalModeAti;
    [NativeNameAttribute("Name", "GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI")]
public static PNTrianglesPNameATI PNTrianglesTesselationLevelAti;
}
[NativeNameAttribute("Name", "PointParameterNameARB")]
public enum Silk.NET.OpenGL.PointParameterNameARB : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_POINT_SIZE_MIN_EXT")]
public static PointParameterNameARB PointSizeMinExt;
    [NativeNameAttribute("Name", "GL_POINT_SIZE_MAX_EXT")]
public static PointParameterNameARB PointSizeMaxExt;
    [NativeNameAttribute("Name", "GL_POINT_FADE_THRESHOLD_SIZE")]
public static PointParameterNameARB PointFadeThresholdSize;
    [NativeNameAttribute("Name", "GL_POINT_FADE_THRESHOLD_SIZE_EXT")]
public static PointParameterNameARB PointFadeThresholdSizeExt;
}
[NativeNameAttribute("Name", "PointParameterNameSGIS")]
public enum Silk.NET.OpenGL.PointParameterNameSGIS : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_POINT_SIZE_MIN_ARB")]
public static PointParameterNameSGIS PointSizeMinArb;
    [NativeNameAttribute("Name", "GL_POINT_SIZE_MIN_EXT")]
public static PointParameterNameSGIS PointSizeMinExt;
    [NativeNameAttribute("Name", "GL_POINT_SIZE_MIN_SGIS")]
public static PointParameterNameSGIS PointSizeMinSgis;
    [NativeNameAttribute("Name", "GL_POINT_SIZE_MAX_ARB")]
public static PointParameterNameSGIS PointSizeMaxArb;
    [NativeNameAttribute("Name", "GL_POINT_SIZE_MAX_EXT")]
public static PointParameterNameSGIS PointSizeMaxExt;
    [NativeNameAttribute("Name", "GL_POINT_SIZE_MAX_SGIS")]
public static PointParameterNameSGIS PointSizeMaxSgis;
    [NativeNameAttribute("Name", "GL_POINT_FADE_THRESHOLD_SIZE")]
public static PointParameterNameSGIS PointFadeThresholdSize;
    [NativeNameAttribute("Name", "GL_POINT_FADE_THRESHOLD_SIZE_ARB")]
public static PointParameterNameSGIS PointFadeThresholdSizeArb;
    [NativeNameAttribute("Name", "GL_POINT_FADE_THRESHOLD_SIZE_EXT")]
public static PointParameterNameSGIS PointFadeThresholdSizeExt;
    [NativeNameAttribute("Name", "GL_POINT_FADE_THRESHOLD_SIZE_SGIS")]
public static PointParameterNameSGIS PointFadeThresholdSizeSgis;
    [NativeNameAttribute("Name", "GL_DISTANCE_ATTENUATION_EXT")]
public static PointParameterNameSGIS DistanceAttenuationExt;
    [NativeNameAttribute("Name", "GL_DISTANCE_ATTENUATION_SGIS")]
public static PointParameterNameSGIS DistanceAttenuationSgis;
    [NativeNameAttribute("Name", "GL_POINT_DISTANCE_ATTENUATION_ARB")]
public static PointParameterNameSGIS PointDistanceAttenuationArb;
}
[NativeNameAttribute("Name", "PolygonMode")]
public enum Silk.NET.OpenGL.PolygonMode : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_POINT")]
public static PolygonMode Point;
    [NativeNameAttribute("Name", "GL_LINE")]
public static PolygonMode Line;
    [NativeNameAttribute("Name", "GL_FILL")]
public static PolygonMode Fill;
}
[NativeNameAttribute("Name", "PrecisionType")]
public enum Silk.NET.OpenGL.PrecisionType : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_LOW_FLOAT")]
public static PrecisionType LowFloat;
    [NativeNameAttribute("Name", "GL_MEDIUM_FLOAT")]
public static PrecisionType MediumFloat;
    [NativeNameAttribute("Name", "GL_HIGH_FLOAT")]
public static PrecisionType HighFloat;
    [NativeNameAttribute("Name", "GL_LOW_INT")]
public static PrecisionType LowInt;
    [NativeNameAttribute("Name", "GL_MEDIUM_INT")]
public static PrecisionType MediumInt;
    [NativeNameAttribute("Name", "GL_HIGH_INT")]
public static PrecisionType HighInt;
}
[NativeNameAttribute("Name", "PreserveModeATI")]
public enum Silk.NET.OpenGL.PreserveModeATI : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_PRESERVE_ATI")]
public static PreserveModeATI PreserveAti;
    [NativeNameAttribute("Name", "GL_DISCARD_ATI")]
public static PreserveModeATI DiscardAti;
}
[NativeNameAttribute("Name", "PrimitiveType")]
public enum Silk.NET.OpenGL.PrimitiveType : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_POINTS")]
public static PrimitiveType Points;
    [NativeNameAttribute("Name", "GL_LINES")]
public static PrimitiveType Lines;
    [NativeNameAttribute("Name", "GL_LINE_LOOP")]
public static PrimitiveType LineLoop;
    [NativeNameAttribute("Name", "GL_LINE_STRIP")]
public static PrimitiveType LineStrip;
    [NativeNameAttribute("Name", "GL_TRIANGLES")]
public static PrimitiveType Triangles;
    [NativeNameAttribute("Name", "GL_TRIANGLE_STRIP")]
public static PrimitiveType TriangleStrip;
    [NativeNameAttribute("Name", "GL_TRIANGLE_FAN")]
public static PrimitiveType TriangleFan;
    [NativeNameAttribute("Name", "GL_QUADS")]
public static PrimitiveType Quads;
    [NativeNameAttribute("Name", "GL_QUADS_EXT")]
public static PrimitiveType QuadsExt;
    [NativeNameAttribute("Name", "GL_LINES_ADJACENCY")]
public static PrimitiveType LinesAdjacency;
    [NativeNameAttribute("Name", "GL_LINES_ADJACENCY_ARB")]
public static PrimitiveType LinesAdjacencyArb;
    [NativeNameAttribute("Name", "GL_LINES_ADJACENCY_EXT")]
public static PrimitiveType LinesAdjacencyExt;
    [NativeNameAttribute("Name", "GL_LINE_STRIP_ADJACENCY")]
public static PrimitiveType LineStripAdjacency;
    [NativeNameAttribute("Name", "GL_LINE_STRIP_ADJACENCY_ARB")]
public static PrimitiveType LineStripAdjacencyArb;
    [NativeNameAttribute("Name", "GL_LINE_STRIP_ADJACENCY_EXT")]
public static PrimitiveType LineStripAdjacencyExt;
    [NativeNameAttribute("Name", "GL_TRIANGLES_ADJACENCY")]
public static PrimitiveType TrianglesAdjacency;
    [NativeNameAttribute("Name", "GL_TRIANGLES_ADJACENCY_ARB")]
public static PrimitiveType TrianglesAdjacencyArb;
    [NativeNameAttribute("Name", "GL_TRIANGLES_ADJACENCY_EXT")]
public static PrimitiveType TrianglesAdjacencyExt;
    [NativeNameAttribute("Name", "GL_TRIANGLE_STRIP_ADJACENCY")]
public static PrimitiveType TriangleStripAdjacency;
    [NativeNameAttribute("Name", "GL_TRIANGLE_STRIP_ADJACENCY_ARB")]
public static PrimitiveType TriangleStripAdjacencyArb;
    [NativeNameAttribute("Name", "GL_TRIANGLE_STRIP_ADJACENCY_EXT")]
public static PrimitiveType TriangleStripAdjacencyExt;
    [NativeNameAttribute("Name", "GL_PATCHES")]
public static PrimitiveType Patches;
    [NativeNameAttribute("Name", "GL_PATCHES_EXT")]
public static PrimitiveType PatchesExt;
}
[NativeNameAttribute("Name", "program")]
public class Silk.NET.OpenGL.Program : ValueType {
    [NativeNameAttribute("Type", "")]
[NativeNameAttribute("Type.Name", "")]
[NativeNameAttribute("Name", "")]
public UInt32 Handle;
    public Program(Nullable`1<UInt32> handle);
}
[NativeNameAttribute("Name", "ProgramFormat")]
public enum Silk.NET.OpenGL.ProgramFormat : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_PROGRAM_FORMAT_ASCII_ARB")]
public static ProgramFormat ProgramFormatAsciiArb;
}
[NativeNameAttribute("Name", "ProgramInterface")]
public enum Silk.NET.OpenGL.ProgramInterface : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_TRANSFORM_FEEDBACK_BUFFER")]
public static ProgramInterface TransformFeedbackBuffer;
    [NativeNameAttribute("Name", "GL_UNIFORM")]
public static ProgramInterface Uniform;
    [NativeNameAttribute("Name", "GL_UNIFORM_BLOCK")]
public static ProgramInterface UniformBlock;
    [NativeNameAttribute("Name", "GL_PROGRAM_INPUT")]
public static ProgramInterface ProgramInput;
    [NativeNameAttribute("Name", "GL_PROGRAM_OUTPUT")]
public static ProgramInterface ProgramOutput;
    [NativeNameAttribute("Name", "GL_BUFFER_VARIABLE")]
public static ProgramInterface BufferVariable;
    [NativeNameAttribute("Name", "GL_SHADER_STORAGE_BLOCK")]
public static ProgramInterface ShaderStorageBlock;
    [NativeNameAttribute("Name", "GL_VERTEX_SUBROUTINE")]
public static ProgramInterface VertexSubroutine;
    [NativeNameAttribute("Name", "GL_TESS_CONTROL_SUBROUTINE")]
public static ProgramInterface TessControlSubroutine;
    [NativeNameAttribute("Name", "GL_TESS_EVALUATION_SUBROUTINE")]
public static ProgramInterface TessEvaluationSubroutine;
    [NativeNameAttribute("Name", "GL_GEOMETRY_SUBROUTINE")]
public static ProgramInterface GeometrySubroutine;
    [NativeNameAttribute("Name", "GL_FRAGMENT_SUBROUTINE")]
public static ProgramInterface FragmentSubroutine;
    [NativeNameAttribute("Name", "GL_COMPUTE_SUBROUTINE")]
public static ProgramInterface ComputeSubroutine;
    [NativeNameAttribute("Name", "GL_VERTEX_SUBROUTINE_UNIFORM")]
public static ProgramInterface VertexSubroutineUniform;
    [NativeNameAttribute("Name", "GL_TESS_CONTROL_SUBROUTINE_UNIFORM")]
public static ProgramInterface TessControlSubroutineUniform;
    [NativeNameAttribute("Name", "GL_TESS_EVALUATION_SUBROUTINE_UNIFORM")]
public static ProgramInterface TessEvaluationSubroutineUniform;
    [NativeNameAttribute("Name", "GL_GEOMETRY_SUBROUTINE_UNIFORM")]
public static ProgramInterface GeometrySubroutineUniform;
    [NativeNameAttribute("Name", "GL_FRAGMENT_SUBROUTINE_UNIFORM")]
public static ProgramInterface FragmentSubroutineUniform;
    [NativeNameAttribute("Name", "GL_COMPUTE_SUBROUTINE_UNIFORM")]
public static ProgramInterface ComputeSubroutineUniform;
    [NativeNameAttribute("Name", "GL_TRANSFORM_FEEDBACK_VARYING")]
public static ProgramInterface TransformFeedbackVarying;
}
[NativeNameAttribute("Name", "ProgramInterfacePName")]
public enum Silk.NET.OpenGL.ProgramInterfacePName : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_ACTIVE_RESOURCES")]
public static ProgramInterfacePName ActiveResources;
    [NativeNameAttribute("Name", "GL_MAX_NAME_LENGTH")]
public static ProgramInterfacePName MaxNameLength;
    [NativeNameAttribute("Name", "GL_MAX_NUM_ACTIVE_VARIABLES")]
public static ProgramInterfacePName MaxNumActiveVariables;
    [NativeNameAttribute("Name", "GL_MAX_NUM_COMPATIBLE_SUBROUTINES")]
public static ProgramInterfacePName MaxNumCompatibleSubroutines;
}
[NativeNameAttribute("Name", "ProgramParameterPName")]
public enum Silk.NET.OpenGL.ProgramParameterPName : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_PROGRAM_BINARY_RETRIEVABLE_HINT")]
public static ProgramParameterPName ProgramBinaryRetrievableHint;
    [NativeNameAttribute("Name", "GL_PROGRAM_SEPARABLE")]
public static ProgramParameterPName ProgramSeparable;
}
[NativeNameAttribute("Name", "program pipeline")]
public class Silk.NET.OpenGL.ProgramPipeline : ValueType {
    [NativeNameAttribute("Type", "")]
[NativeNameAttribute("Type.Name", "")]
[NativeNameAttribute("Name", "")]
public UInt32 Handle;
    public ProgramPipeline(Nullable`1<UInt32> handle);
}
[NativeNameAttribute("Name", "ProgramPropertyARB")]
public enum Silk.NET.OpenGL.ProgramPropertyARB : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_COMPUTE_WORK_GROUP_SIZE")]
public static ProgramPropertyARB ComputeWorkGroupSize;
    [NativeNameAttribute("Name", "GL_PROGRAM_BINARY_LENGTH")]
public static ProgramPropertyARB ProgramBinaryLength;
    [NativeNameAttribute("Name", "GL_GEOMETRY_VERTICES_OUT")]
public static ProgramPropertyARB GeometryVerticesOut;
    [NativeNameAttribute("Name", "GL_GEOMETRY_INPUT_TYPE")]
public static ProgramPropertyARB GeometryInputType;
    [NativeNameAttribute("Name", "GL_GEOMETRY_OUTPUT_TYPE")]
public static ProgramPropertyARB GeometryOutputType;
    [NativeNameAttribute("Name", "GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH")]
public static ProgramPropertyARB ActiveUniformBlockMaxNameLength;
    [NativeNameAttribute("Name", "GL_ACTIVE_UNIFORM_BLOCKS")]
public static ProgramPropertyARB ActiveUniformBlocks;
    [NativeNameAttribute("Name", "GL_DELETE_STATUS")]
public static ProgramPropertyARB DeleteStatus;
    [NativeNameAttribute("Name", "GL_LINK_STATUS")]
public static ProgramPropertyARB LinkStatus;
    [NativeNameAttribute("Name", "GL_VALIDATE_STATUS")]
public static ProgramPropertyARB ValidateStatus;
    [NativeNameAttribute("Name", "GL_INFO_LOG_LENGTH")]
public static ProgramPropertyARB InfoLogLength;
    [NativeNameAttribute("Name", "GL_ATTACHED_SHADERS")]
public static ProgramPropertyARB AttachedShaders;
    [NativeNameAttribute("Name", "GL_ACTIVE_UNIFORMS")]
public static ProgramPropertyARB ActiveUniforms;
    [NativeNameAttribute("Name", "GL_ACTIVE_UNIFORM_MAX_LENGTH")]
public static ProgramPropertyARB ActiveUniformMaxLength;
    [NativeNameAttribute("Name", "GL_ACTIVE_ATTRIBUTES")]
public static ProgramPropertyARB ActiveAttributes;
    [NativeNameAttribute("Name", "GL_ACTIVE_ATTRIBUTE_MAX_LENGTH")]
public static ProgramPropertyARB ActiveAttributeMaxLength;
    [NativeNameAttribute("Name", "GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH")]
public static ProgramPropertyARB TransformFeedbackVaryingMaxLength;
    [NativeNameAttribute("Name", "GL_TRANSFORM_FEEDBACK_BUFFER_MODE")]
public static ProgramPropertyARB TransformFeedbackBufferMode;
    [NativeNameAttribute("Name", "GL_TRANSFORM_FEEDBACK_VARYINGS")]
public static ProgramPropertyARB TransformFeedbackVaryings;
    [NativeNameAttribute("Name", "GL_ACTIVE_ATOMIC_COUNTER_BUFFERS")]
public static ProgramPropertyARB ActiveAtomicCounterBuffers;
}
[NativeNameAttribute("Name", "ProgramResourceProperty")]
public enum Silk.NET.OpenGL.ProgramResourceProperty : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_NUM_COMPATIBLE_SUBROUTINES")]
public static ProgramResourceProperty NumCompatibleSubroutines;
    [NativeNameAttribute("Name", "GL_COMPATIBLE_SUBROUTINES")]
public static ProgramResourceProperty CompatibleSubroutines;
    [NativeNameAttribute("Name", "GL_UNIFORM")]
public static ProgramResourceProperty Uniform;
    [NativeNameAttribute("Name", "GL_IS_PER_PATCH")]
public static ProgramResourceProperty IsPerPatch;
    [NativeNameAttribute("Name", "GL_NAME_LENGTH")]
public static ProgramResourceProperty NameLength;
    [NativeNameAttribute("Name", "GL_TYPE")]
public static ProgramResourceProperty Type;
    [NativeNameAttribute("Name", "GL_ARRAY_SIZE")]
public static ProgramResourceProperty ArraySize;
    [NativeNameAttribute("Name", "GL_OFFSET")]
public static ProgramResourceProperty Offset;
    [NativeNameAttribute("Name", "GL_BLOCK_INDEX")]
public static ProgramResourceProperty BlockIndex;
    [NativeNameAttribute("Name", "GL_ARRAY_STRIDE")]
public static ProgramResourceProperty ArrayStride;
    [NativeNameAttribute("Name", "GL_MATRIX_STRIDE")]
public static ProgramResourceProperty MatrixStride;
    [NativeNameAttribute("Name", "GL_IS_ROW_MAJOR")]
public static ProgramResourceProperty IsRowMajor;
    [NativeNameAttribute("Name", "GL_ATOMIC_COUNTER_BUFFER_INDEX")]
public static ProgramResourceProperty AtomicCounterBufferIndex;
    [NativeNameAttribute("Name", "GL_BUFFER_BINDING")]
public static ProgramResourceProperty BufferBinding;
    [NativeNameAttribute("Name", "GL_BUFFER_DATA_SIZE")]
public static ProgramResourceProperty BufferDataSize;
    [NativeNameAttribute("Name", "GL_NUM_ACTIVE_VARIABLES")]
public static ProgramResourceProperty NumActiveVariables;
    [NativeNameAttribute("Name", "GL_ACTIVE_VARIABLES")]
public static ProgramResourceProperty ActiveVariables;
    [NativeNameAttribute("Name", "GL_REFERENCED_BY_VERTEX_SHADER")]
public static ProgramResourceProperty ReferencedByVertexShader;
    [NativeNameAttribute("Name", "GL_REFERENCED_BY_TESS_CONTROL_SHADER")]
public static ProgramResourceProperty ReferencedByTessControlShader;
    [NativeNameAttribute("Name", "GL_REFERENCED_BY_TESS_EVALUATION_SHADER")]
public static ProgramResourceProperty ReferencedByTessEvaluationShader;
    [NativeNameAttribute("Name", "GL_REFERENCED_BY_GEOMETRY_SHADER")]
public static ProgramResourceProperty ReferencedByGeometryShader;
    [NativeNameAttribute("Name", "GL_REFERENCED_BY_FRAGMENT_SHADER")]
public static ProgramResourceProperty ReferencedByFragmentShader;
    [NativeNameAttribute("Name", "GL_REFERENCED_BY_COMPUTE_SHADER")]
public static ProgramResourceProperty ReferencedByComputeShader;
    [NativeNameAttribute("Name", "GL_TOP_LEVEL_ARRAY_SIZE")]
public static ProgramResourceProperty TopLevelArraySize;
    [NativeNameAttribute("Name", "GL_TOP_LEVEL_ARRAY_STRIDE")]
public static ProgramResourceProperty TopLevelArrayStride;
    [NativeNameAttribute("Name", "GL_LOCATION")]
public static ProgramResourceProperty Location;
    [NativeNameAttribute("Name", "GL_LOCATION_INDEX")]
public static ProgramResourceProperty LocationIndex;
    [NativeNameAttribute("Name", "GL_LOCATION_COMPONENT")]
public static ProgramResourceProperty LocationComponent;
    [NativeNameAttribute("Name", "GL_TRANSFORM_FEEDBACK_BUFFER_INDEX")]
public static ProgramResourceProperty TransformFeedbackBufferIndex;
    [NativeNameAttribute("Name", "GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE")]
public static ProgramResourceProperty TransformFeedbackBufferStride;
}
[NativeNameAttribute("Name", "ProgramStagePName")]
public enum Silk.NET.OpenGL.ProgramStagePName : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_ACTIVE_SUBROUTINES")]
public static ProgramStagePName ActiveSubroutines;
    [NativeNameAttribute("Name", "GL_ACTIVE_SUBROUTINE_UNIFORMS")]
public static ProgramStagePName ActiveSubroutineUniforms;
    [NativeNameAttribute("Name", "GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS")]
public static ProgramStagePName ActiveSubroutineUniformLocations;
    [NativeNameAttribute("Name", "GL_ACTIVE_SUBROUTINE_MAX_LENGTH")]
public static ProgramStagePName ActiveSubroutineMaxLength;
    [NativeNameAttribute("Name", "GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH")]
public static ProgramStagePName ActiveSubroutineUniformMaxLength;
}
[NativeNameAttribute("Name", "ProgramStringProperty")]
public enum Silk.NET.OpenGL.ProgramStringProperty : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_PROGRAM_STRING_ARB")]
public static ProgramStringProperty ProgramStringArb;
}
[NativeNameAttribute("Name", "ProgramTarget")]
public enum Silk.NET.OpenGL.ProgramTarget : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_TEXT_FRAGMENT_SHADER_ATI")]
public static ProgramTarget TextFragmentShaderAti;
    [NativeNameAttribute("Name", "GL_VERTEX_PROGRAM_ARB")]
public static ProgramTarget VertexProgramArb;
    [NativeNameAttribute("Name", "GL_FRAGMENT_PROGRAM_ARB")]
public static ProgramTarget FragmentProgramArb;
    [NativeNameAttribute("Name", "GL_TESS_CONTROL_PROGRAM_NV")]
public static ProgramTarget TessControlProgramNV;
    [NativeNameAttribute("Name", "GL_TESS_EVALUATION_PROGRAM_NV")]
public static ProgramTarget TessEvaluationProgramNV;
    [NativeNameAttribute("Name", "GL_GEOMETRY_PROGRAM_NV")]
public static ProgramTarget GeometryProgramNV;
    [NativeNameAttribute("Name", "GL_COMPUTE_PROGRAM_NV")]
public static ProgramTarget ComputeProgramNV;
}
[NativeNameAttribute("Name", "query")]
public class Silk.NET.OpenGL.Query : ValueType {
    [NativeNameAttribute("Type", "")]
[NativeNameAttribute("Type.Name", "")]
[NativeNameAttribute("Name", "")]
public UInt32 Handle;
    public Query(Nullable`1<UInt32> handle);
}
[NativeNameAttribute("Name", "QueryCounterTarget")]
public enum Silk.NET.OpenGL.QueryCounterTarget : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_TIMESTAMP")]
public static QueryCounterTarget Timestamp;
}
[NativeNameAttribute("Name", "QueryObjectParameterName")]
public enum Silk.NET.OpenGL.QueryObjectParameterName : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_QUERY_TARGET")]
public static QueryObjectParameterName QueryTarget;
    [NativeNameAttribute("Name", "GL_QUERY_RESULT")]
public static QueryObjectParameterName QueryResult;
    [NativeNameAttribute("Name", "GL_QUERY_RESULT_AVAILABLE")]
public static QueryObjectParameterName QueryResultAvailable;
    [NativeNameAttribute("Name", "GL_QUERY_RESULT_NO_WAIT")]
public static QueryObjectParameterName QueryResultNoWait;
}
[NativeNameAttribute("Name", "QueryParameterName")]
public enum Silk.NET.OpenGL.QueryParameterName : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_QUERY_COUNTER_BITS")]
public static QueryParameterName QueryCounterBits;
    [NativeNameAttribute("Name", "GL_CURRENT_QUERY")]
public static QueryParameterName CurrentQuery;
}
[NativeNameAttribute("Name", "QueryTarget")]
public enum Silk.NET.OpenGL.QueryTarget : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_TRANSFORM_FEEDBACK_OVERFLOW")]
public static QueryTarget TransformFeedbackOverflow;
    [NativeNameAttribute("Name", "GL_VERTICES_SUBMITTED")]
public static QueryTarget VerticesSubmitted;
    [NativeNameAttribute("Name", "GL_PRIMITIVES_SUBMITTED")]
public static QueryTarget PrimitivesSubmitted;
    [NativeNameAttribute("Name", "GL_VERTEX_SHADER_INVOCATIONS")]
public static QueryTarget VertexShaderInvocations;
    [NativeNameAttribute("Name", "GL_TIME_ELAPSED")]
public static QueryTarget TimeElapsed;
    [NativeNameAttribute("Name", "GL_SAMPLES_PASSED")]
public static QueryTarget SamplesPassed;
    [NativeNameAttribute("Name", "GL_ANY_SAMPLES_PASSED")]
public static QueryTarget AnySamplesPassed;
    [NativeNameAttribute("Name", "GL_PRIMITIVES_GENERATED")]
public static QueryTarget PrimitivesGenerated;
    [NativeNameAttribute("Name", "GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN")]
public static QueryTarget TransformFeedbackPrimitivesWritten;
    [NativeNameAttribute("Name", "GL_ANY_SAMPLES_PASSED_CONSERVATIVE")]
public static QueryTarget AnySamplesPassedConservative;
}
[NativeNameAttribute("Name", "ReadBufferMode")]
public enum Silk.NET.OpenGL.ReadBufferMode : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_NONE")]
public static ReadBufferMode None;
    [NativeNameAttribute("Name", "GL_NONE_OES")]
public static ReadBufferMode NoneOes;
    [NativeNameAttribute("Name", "GL_FRONT_LEFT")]
public static ReadBufferMode FrontLeft;
    [NativeNameAttribute("Name", "GL_FRONT_RIGHT")]
public static ReadBufferMode FrontRight;
    [NativeNameAttribute("Name", "GL_BACK_LEFT")]
public static ReadBufferMode BackLeft;
    [NativeNameAttribute("Name", "GL_BACK_RIGHT")]
public static ReadBufferMode BackRight;
    [NativeNameAttribute("Name", "GL_FRONT")]
public static ReadBufferMode Front;
    [NativeNameAttribute("Name", "GL_BACK")]
public static ReadBufferMode Back;
    [NativeNameAttribute("Name", "GL_LEFT")]
public static ReadBufferMode Left;
    [NativeNameAttribute("Name", "GL_RIGHT")]
public static ReadBufferMode Right;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT0")]
public static ReadBufferMode ColorAttachment0;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT1")]
public static ReadBufferMode ColorAttachment1;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT2")]
public static ReadBufferMode ColorAttachment2;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT3")]
public static ReadBufferMode ColorAttachment3;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT4")]
public static ReadBufferMode ColorAttachment4;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT5")]
public static ReadBufferMode ColorAttachment5;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT6")]
public static ReadBufferMode ColorAttachment6;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT7")]
public static ReadBufferMode ColorAttachment7;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT8")]
public static ReadBufferMode ColorAttachment8;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT9")]
public static ReadBufferMode ColorAttachment9;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT10")]
public static ReadBufferMode ColorAttachment10;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT11")]
public static ReadBufferMode ColorAttachment11;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT12")]
public static ReadBufferMode ColorAttachment12;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT13")]
public static ReadBufferMode ColorAttachment13;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT14")]
public static ReadBufferMode ColorAttachment14;
    [NativeNameAttribute("Name", "GL_COLOR_ATTACHMENT15")]
public static ReadBufferMode ColorAttachment15;
}
[NativeNameAttribute("Name", "RegisterCombinerPname")]
public enum Silk.NET.OpenGL.RegisterCombinerPname : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_COMBINE_ARB")]
public static RegisterCombinerPname CombineArb;
    [NativeNameAttribute("Name", "GL_COMBINE_EXT")]
public static RegisterCombinerPname CombineExt;
    [NativeNameAttribute("Name", "GL_COMBINE_RGB_ARB")]
public static RegisterCombinerPname CombineRgbArb;
    [NativeNameAttribute("Name", "GL_COMBINE_RGB_EXT")]
public static RegisterCombinerPname CombineRgbExt;
    [NativeNameAttribute("Name", "GL_COMBINE_ALPHA_ARB")]
public static RegisterCombinerPname CombineAlphaArb;
    [NativeNameAttribute("Name", "GL_COMBINE_ALPHA_EXT")]
public static RegisterCombinerPname CombineAlphaExt;
    [NativeNameAttribute("Name", "GL_RGB_SCALE_ARB")]
public static RegisterCombinerPname RgbScaleArb;
    [NativeNameAttribute("Name", "GL_RGB_SCALE_EXT")]
public static RegisterCombinerPname RgbScaleExt;
    [NativeNameAttribute("Name", "GL_ADD_SIGNED_ARB")]
public static RegisterCombinerPname AddSignedArb;
    [NativeNameAttribute("Name", "GL_ADD_SIGNED_EXT")]
public static RegisterCombinerPname AddSignedExt;
    [NativeNameAttribute("Name", "GL_INTERPOLATE_ARB")]
public static RegisterCombinerPname InterpolateArb;
    [NativeNameAttribute("Name", "GL_INTERPOLATE_EXT")]
public static RegisterCombinerPname InterpolateExt;
    [NativeNameAttribute("Name", "GL_CONSTANT_ARB")]
public static RegisterCombinerPname ConstantArb;
    [NativeNameAttribute("Name", "GL_CONSTANT_EXT")]
public static RegisterCombinerPname ConstantExt;
    [NativeNameAttribute("Name", "GL_CONSTANT_NV")]
public static RegisterCombinerPname ConstantNV;
    [NativeNameAttribute("Name", "GL_PRIMARY_COLOR_ARB")]
public static RegisterCombinerPname PrimaryColorArb;
    [NativeNameAttribute("Name", "GL_PRIMARY_COLOR_EXT")]
public static RegisterCombinerPname PrimaryColorExt;
    [NativeNameAttribute("Name", "GL_PREVIOUS_ARB")]
public static RegisterCombinerPname PreviousArb;
    [NativeNameAttribute("Name", "GL_PREVIOUS_EXT")]
public static RegisterCombinerPname PreviousExt;
    [NativeNameAttribute("Name", "GL_SOURCE0_RGB_ARB")]
public static RegisterCombinerPname Source0RgbArb;
    [NativeNameAttribute("Name", "GL_SOURCE0_RGB_EXT")]
public static RegisterCombinerPname Source0RgbExt;
    [NativeNameAttribute("Name", "GL_SOURCE1_RGB_ARB")]
public static RegisterCombinerPname Source1RgbArb;
    [NativeNameAttribute("Name", "GL_SOURCE1_RGB_EXT")]
public static RegisterCombinerPname Source1RgbExt;
    [NativeNameAttribute("Name", "GL_SOURCE2_RGB_ARB")]
public static RegisterCombinerPname Source2RgbArb;
    [NativeNameAttribute("Name", "GL_SOURCE2_RGB_EXT")]
public static RegisterCombinerPname Source2RgbExt;
    [NativeNameAttribute("Name", "GL_SOURCE3_RGB_NV")]
public static RegisterCombinerPname Source3RgbNV;
    [NativeNameAttribute("Name", "GL_SOURCE0_ALPHA_ARB")]
public static RegisterCombinerPname Source0AlphaArb;
    [NativeNameAttribute("Name", "GL_SOURCE0_ALPHA_EXT")]
public static RegisterCombinerPname Source0AlphaExt;
    [NativeNameAttribute("Name", "GL_SOURCE1_ALPHA_ARB")]
public static RegisterCombinerPname Source1AlphaArb;
    [NativeNameAttribute("Name", "GL_SOURCE1_ALPHA_EXT")]
public static RegisterCombinerPname Source1AlphaExt;
    [NativeNameAttribute("Name", "GL_SRC1_ALPHA")]
public static RegisterCombinerPname Src1Alpha;
    [NativeNameAttribute("Name", "GL_SRC1_ALPHA_EXT")]
public static RegisterCombinerPname Src1AlphaExt;
    [NativeNameAttribute("Name", "GL_SOURCE2_ALPHA_ARB")]
public static RegisterCombinerPname Source2AlphaArb;
    [NativeNameAttribute("Name", "GL_SOURCE2_ALPHA_EXT")]
public static RegisterCombinerPname Source2AlphaExt;
    [NativeNameAttribute("Name", "GL_SOURCE3_ALPHA_NV")]
public static RegisterCombinerPname Source3AlphaNV;
    [NativeNameAttribute("Name", "GL_OPERAND0_RGB_ARB")]
public static RegisterCombinerPname Operand0RgbArb;
    [NativeNameAttribute("Name", "GL_OPERAND0_RGB_EXT")]
public static RegisterCombinerPname Operand0RgbExt;
    [NativeNameAttribute("Name", "GL_OPERAND1_RGB_ARB")]
public static RegisterCombinerPname Operand1RgbArb;
    [NativeNameAttribute("Name", "GL_OPERAND1_RGB_EXT")]
public static RegisterCombinerPname Operand1RgbExt;
    [NativeNameAttribute("Name", "GL_OPERAND2_RGB_ARB")]
public static RegisterCombinerPname Operand2RgbArb;
    [NativeNameAttribute("Name", "GL_OPERAND2_RGB_EXT")]
public static RegisterCombinerPname Operand2RgbExt;
    [NativeNameAttribute("Name", "GL_OPERAND3_RGB_NV")]
public static RegisterCombinerPname Operand3RgbNV;
    [NativeNameAttribute("Name", "GL_OPERAND0_ALPHA_ARB")]
public static RegisterCombinerPname Operand0AlphaArb;
    [NativeNameAttribute("Name", "GL_OPERAND0_ALPHA_EXT")]
public static RegisterCombinerPname Operand0AlphaExt;
    [NativeNameAttribute("Name", "GL_OPERAND1_ALPHA_ARB")]
public static RegisterCombinerPname Operand1AlphaArb;
    [NativeNameAttribute("Name", "GL_OPERAND1_ALPHA_EXT")]
public static RegisterCombinerPname Operand1AlphaExt;
    [NativeNameAttribute("Name", "GL_OPERAND2_ALPHA_ARB")]
public static RegisterCombinerPname Operand2AlphaArb;
    [NativeNameAttribute("Name", "GL_OPERAND2_ALPHA_EXT")]
public static RegisterCombinerPname Operand2AlphaExt;
    [NativeNameAttribute("Name", "GL_OPERAND3_ALPHA_NV")]
public static RegisterCombinerPname Operand3AlphaNV;
}
[NativeNameAttribute("Name", "renderbuffer")]
public class Silk.NET.OpenGL.Renderbuffer : ValueType {
    [NativeNameAttribute("Type", "")]
[NativeNameAttribute("Type.Name", "")]
[NativeNameAttribute("Name", "")]
public UInt32 Handle;
    public Renderbuffer(Nullable`1<UInt32> handle);
}
[NativeNameAttribute("Name", "RenderbufferParameterName")]
public enum Silk.NET.OpenGL.RenderbufferParameterName : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_RENDERBUFFER_COVERAGE_SAMPLES_NV")]
public static RenderbufferParameterName RenderbufferCoverageSamplesNV;
    [NativeNameAttribute("Name", "GL_RENDERBUFFER_SAMPLES")]
public static RenderbufferParameterName RenderbufferSamples;
    [NativeNameAttribute("Name", "GL_RENDERBUFFER_SAMPLES_ANGLE")]
public static RenderbufferParameterName RenderbufferSamplesAngle;
    [NativeNameAttribute("Name", "GL_RENDERBUFFER_SAMPLES_APPLE")]
public static RenderbufferParameterName RenderbufferSamplesApple;
    [NativeNameAttribute("Name", "GL_RENDERBUFFER_SAMPLES_EXT")]
public static RenderbufferParameterName RenderbufferSamplesExt;
    [NativeNameAttribute("Name", "GL_RENDERBUFFER_SAMPLES_NV")]
public static RenderbufferParameterName RenderbufferSamplesNV;
    [NativeNameAttribute("Name", "GL_RENDERBUFFER_WIDTH")]
public static RenderbufferParameterName RenderbufferWidth;
    [NativeNameAttribute("Name", "GL_RENDERBUFFER_WIDTH_EXT")]
public static RenderbufferParameterName RenderbufferWidthExt;
    [NativeNameAttribute("Name", "GL_RENDERBUFFER_WIDTH_OES")]
public static RenderbufferParameterName RenderbufferWidthOes;
    [NativeNameAttribute("Name", "GL_RENDERBUFFER_HEIGHT")]
public static RenderbufferParameterName RenderbufferHeight;
    [NativeNameAttribute("Name", "GL_RENDERBUFFER_HEIGHT_EXT")]
public static RenderbufferParameterName RenderbufferHeightExt;
    [NativeNameAttribute("Name", "GL_RENDERBUFFER_HEIGHT_OES")]
public static RenderbufferParameterName RenderbufferHeightOes;
    [NativeNameAttribute("Name", "GL_RENDERBUFFER_INTERNAL_FORMAT")]
public static RenderbufferParameterName RenderbufferInternalFormat;
    [NativeNameAttribute("Name", "GL_RENDERBUFFER_INTERNAL_FORMAT_EXT")]
public static RenderbufferParameterName RenderbufferInternalFormatExt;
    [NativeNameAttribute("Name", "GL_RENDERBUFFER_INTERNAL_FORMAT_OES")]
public static RenderbufferParameterName RenderbufferInternalFormatOes;
    [NativeNameAttribute("Name", "GL_RENDERBUFFER_RED_SIZE")]
public static RenderbufferParameterName RenderbufferRedSize;
    [NativeNameAttribute("Name", "GL_RENDERBUFFER_RED_SIZE_EXT")]
public static RenderbufferParameterName RenderbufferRedSizeExt;
    [NativeNameAttribute("Name", "GL_RENDERBUFFER_RED_SIZE_OES")]
public static RenderbufferParameterName RenderbufferRedSizeOes;
    [NativeNameAttribute("Name", "GL_RENDERBUFFER_GREEN_SIZE")]
public static RenderbufferParameterName RenderbufferGreenSize;
    [NativeNameAttribute("Name", "GL_RENDERBUFFER_GREEN_SIZE_EXT")]
public static RenderbufferParameterName RenderbufferGreenSizeExt;
    [NativeNameAttribute("Name", "GL_RENDERBUFFER_GREEN_SIZE_OES")]
public static RenderbufferParameterName RenderbufferGreenSizeOes;
    [NativeNameAttribute("Name", "GL_RENDERBUFFER_BLUE_SIZE")]
public static RenderbufferParameterName RenderbufferBlueSize;
    [NativeNameAttribute("Name", "GL_RENDERBUFFER_BLUE_SIZE_EXT")]
public static RenderbufferParameterName RenderbufferBlueSizeExt;
    [NativeNameAttribute("Name", "GL_RENDERBUFFER_BLUE_SIZE_OES")]
public static RenderbufferParameterName RenderbufferBlueSizeOes;
    [NativeNameAttribute("Name", "GL_RENDERBUFFER_ALPHA_SIZE")]
public static RenderbufferParameterName RenderbufferAlphaSize;
    [NativeNameAttribute("Name", "GL_RENDERBUFFER_ALPHA_SIZE_EXT")]
public static RenderbufferParameterName RenderbufferAlphaSizeExt;
    [NativeNameAttribute("Name", "GL_RENDERBUFFER_ALPHA_SIZE_OES")]
public static RenderbufferParameterName RenderbufferAlphaSizeOes;
    [NativeNameAttribute("Name", "GL_RENDERBUFFER_DEPTH_SIZE")]
public static RenderbufferParameterName RenderbufferDepthSize;
    [NativeNameAttribute("Name", "GL_RENDERBUFFER_DEPTH_SIZE_EXT")]
public static RenderbufferParameterName RenderbufferDepthSizeExt;
    [NativeNameAttribute("Name", "GL_RENDERBUFFER_DEPTH_SIZE_OES")]
public static RenderbufferParameterName RenderbufferDepthSizeOes;
    [NativeNameAttribute("Name", "GL_RENDERBUFFER_STENCIL_SIZE")]
public static RenderbufferParameterName RenderbufferStencilSize;
    [NativeNameAttribute("Name", "GL_RENDERBUFFER_STENCIL_SIZE_EXT")]
public static RenderbufferParameterName RenderbufferStencilSizeExt;
    [NativeNameAttribute("Name", "GL_RENDERBUFFER_STENCIL_SIZE_OES")]
public static RenderbufferParameterName RenderbufferStencilSizeOes;
    [NativeNameAttribute("Name", "GL_RENDERBUFFER_COLOR_SAMPLES_NV")]
public static RenderbufferParameterName RenderbufferColorSamplesNV;
    [NativeNameAttribute("Name", "GL_RENDERBUFFER_SAMPLES_IMG")]
public static RenderbufferParameterName RenderbufferSamplesImg;
    [NativeNameAttribute("Name", "GL_RENDERBUFFER_STORAGE_SAMPLES_AMD")]
public static RenderbufferParameterName RenderbufferStorageSamplesAmd;
}
[NativeNameAttribute("Name", "RenderbufferTarget")]
public enum Silk.NET.OpenGL.RenderbufferTarget : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_RENDERBUFFER")]
public static RenderbufferTarget Renderbuffer;
    [NativeNameAttribute("Name", "GL_RENDERBUFFER_OES")]
public static RenderbufferTarget RenderbufferOes;
}
[NativeNameAttribute("Name", "RenderingMode")]
public enum Silk.NET.OpenGL.RenderingMode : Enum {
    public int value__;
}
[NativeNameAttribute("Name", "ReplacementCodeTypeSUN")]
public enum Silk.NET.OpenGL.ReplacementCodeTypeSUN : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_UNSIGNED_BYTE")]
public static ReplacementCodeTypeSUN UnsignedByte;
    [NativeNameAttribute("Name", "GL_UNSIGNED_SHORT")]
public static ReplacementCodeTypeSUN UnsignedShort;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT")]
public static ReplacementCodeTypeSUN UnsignedInt;
}
[NativeNameAttribute("Name", "SamplePatternEXT")]
public enum Silk.NET.OpenGL.SamplePatternEXT : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_1PASS_EXT")]
public static SamplePatternEXT Gl1PassExt;
    [NativeNameAttribute("Name", "GL_2PASS_0_EXT")]
public static SamplePatternEXT Gl2Pass0Ext;
    [NativeNameAttribute("Name", "GL_2PASS_1_EXT")]
public static SamplePatternEXT Gl2Pass1Ext;
    [NativeNameAttribute("Name", "GL_4PASS_0_EXT")]
public static SamplePatternEXT Gl4Pass0Ext;
    [NativeNameAttribute("Name", "GL_4PASS_1_EXT")]
public static SamplePatternEXT Gl4Pass1Ext;
    [NativeNameAttribute("Name", "GL_4PASS_2_EXT")]
public static SamplePatternEXT Gl4Pass2Ext;
    [NativeNameAttribute("Name", "GL_4PASS_3_EXT")]
public static SamplePatternEXT Gl4Pass3Ext;
}
[NativeNameAttribute("Name", "SamplePatternSGIS")]
public enum Silk.NET.OpenGL.SamplePatternSGIS : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_1PASS_EXT")]
public static SamplePatternSGIS Gl1PassExt;
    [NativeNameAttribute("Name", "GL_1PASS_SGIS")]
public static SamplePatternSGIS Gl1PassSgis;
    [NativeNameAttribute("Name", "GL_2PASS_0_EXT")]
public static SamplePatternSGIS Gl2Pass0Ext;
    [NativeNameAttribute("Name", "GL_2PASS_0_SGIS")]
public static SamplePatternSGIS Gl2Pass0Sgis;
    [NativeNameAttribute("Name", "GL_2PASS_1_EXT")]
public static SamplePatternSGIS Gl2Pass1Ext;
    [NativeNameAttribute("Name", "GL_2PASS_1_SGIS")]
public static SamplePatternSGIS Gl2Pass1Sgis;
    [NativeNameAttribute("Name", "GL_4PASS_0_EXT")]
public static SamplePatternSGIS Gl4Pass0Ext;
    [NativeNameAttribute("Name", "GL_4PASS_0_SGIS")]
public static SamplePatternSGIS Gl4Pass0Sgis;
    [NativeNameAttribute("Name", "GL_4PASS_1_EXT")]
public static SamplePatternSGIS Gl4Pass1Ext;
    [NativeNameAttribute("Name", "GL_4PASS_1_SGIS")]
public static SamplePatternSGIS Gl4Pass1Sgis;
    [NativeNameAttribute("Name", "GL_4PASS_2_EXT")]
public static SamplePatternSGIS Gl4Pass2Ext;
    [NativeNameAttribute("Name", "GL_4PASS_2_SGIS")]
public static SamplePatternSGIS Gl4Pass2Sgis;
    [NativeNameAttribute("Name", "GL_4PASS_3_EXT")]
public static SamplePatternSGIS Gl4Pass3Ext;
    [NativeNameAttribute("Name", "GL_4PASS_3_SGIS")]
public static SamplePatternSGIS Gl4Pass3Sgis;
}
[NativeNameAttribute("Name", "sampler")]
public class Silk.NET.OpenGL.Sampler : ValueType {
    [NativeNameAttribute("Type", "")]
[NativeNameAttribute("Type.Name", "")]
[NativeNameAttribute("Name", "")]
public UInt32 Handle;
    public Sampler(Nullable`1<UInt32> handle);
}
[NativeNameAttribute("Name", "SamplerParameterF")]
public enum Silk.NET.OpenGL.SamplerParameterF : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_TEXTURE_BORDER_COLOR")]
public static SamplerParameterF TextureBorderColor;
    [NativeNameAttribute("Name", "GL_TEXTURE_MIN_LOD")]
public static SamplerParameterF TextureMinLod;
    [NativeNameAttribute("Name", "GL_TEXTURE_MAX_LOD")]
public static SamplerParameterF TextureMaxLod;
    [NativeNameAttribute("Name", "GL_TEXTURE_MAX_ANISOTROPY")]
public static SamplerParameterF TextureMaxAnisotropy;
    [NativeNameAttribute("Name", "GL_TEXTURE_LOD_BIAS")]
public static SamplerParameterF TextureLodBias;
    [NativeNameAttribute("Name", "GL_TEXTURE_UNNORMALIZED_COORDINATES_ARM")]
public static SamplerParameterF TextureUnnormalizedCoordinatesArm;
}
[NativeNameAttribute("Name", "SamplerParameterI")]
public enum Silk.NET.OpenGL.SamplerParameterI : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_TEXTURE_MAG_FILTER")]
public static SamplerParameterI TextureMagFilter;
    [NativeNameAttribute("Name", "GL_TEXTURE_MIN_FILTER")]
public static SamplerParameterI TextureMinFilter;
    [NativeNameAttribute("Name", "GL_TEXTURE_WRAP_S")]
public static SamplerParameterI TextureWrapS;
    [NativeNameAttribute("Name", "GL_TEXTURE_WRAP_T")]
public static SamplerParameterI TextureWrapT;
    [NativeNameAttribute("Name", "GL_TEXTURE_WRAP_R")]
public static SamplerParameterI TextureWrapR;
    [NativeNameAttribute("Name", "GL_TEXTURE_COMPARE_MODE")]
public static SamplerParameterI TextureCompareMode;
    [NativeNameAttribute("Name", "GL_TEXTURE_COMPARE_FUNC")]
public static SamplerParameterI TextureCompareFunc;
    [NativeNameAttribute("Name", "GL_TEXTURE_UNNORMALIZED_COORDINATES_ARM")]
public static SamplerParameterI TextureUnnormalizedCoordinatesArm;
}
[NativeNameAttribute("Name", "ScalarType")]
public enum Silk.NET.OpenGL.ScalarType : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_UNSIGNED_BYTE")]
public static ScalarType UnsignedByte;
    [NativeNameAttribute("Name", "GL_UNSIGNED_SHORT")]
public static ScalarType UnsignedShort;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT")]
public static ScalarType UnsignedInt;
}
[NativeNameAttribute("Name", "SecondaryColorPointerTypeIBM")]
public enum Silk.NET.OpenGL.SecondaryColorPointerTypeIBM : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_SHORT")]
public static SecondaryColorPointerTypeIBM Short;
    [NativeNameAttribute("Name", "GL_INT")]
public static SecondaryColorPointerTypeIBM Int;
    [NativeNameAttribute("Name", "GL_FLOAT")]
public static SecondaryColorPointerTypeIBM Float;
    [NativeNameAttribute("Name", "GL_DOUBLE")]
public static SecondaryColorPointerTypeIBM Double;
}
[NativeNameAttribute("Name", "SemaphoreParameterName")]
public enum Silk.NET.OpenGL.SemaphoreParameterName : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_D3D12_FENCE_VALUE_EXT")]
public static SemaphoreParameterName D3D12FenceValueExt;
    [NativeNameAttribute("Name", "GL_TIMELINE_SEMAPHORE_VALUE_NV")]
public static SemaphoreParameterName TimelineSemaphoreValueNV;
    [NativeNameAttribute("Name", "GL_SEMAPHORE_TYPE_NV")]
public static SemaphoreParameterName SemaphoreTypeNV;
    [NativeNameAttribute("Name", "GL_SEMAPHORE_TYPE_BINARY_NV")]
public static SemaphoreParameterName SemaphoreTypeBinaryNV;
    [NativeNameAttribute("Name", "GL_SEMAPHORE_TYPE_TIMELINE_NV")]
public static SemaphoreParameterName SemaphoreTypeTimelineNV;
}
[NativeNameAttribute("Name", "SeparableTarget")]
public enum Silk.NET.OpenGL.SeparableTarget : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_SEPARABLE_2D")]
public static SeparableTarget Separable2D;
}
[NativeNameAttribute("Name", "SeparableTargetEXT")]
public enum Silk.NET.OpenGL.SeparableTargetEXT : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_SEPARABLE_2D")]
public static SeparableTargetEXT Separable2D;
    [NativeNameAttribute("Name", "GL_SEPARABLE_2D_EXT")]
public static SeparableTargetEXT Separable2DExt;
}
[NativeNameAttribute("Name", "shader")]
public class Silk.NET.OpenGL.Shader : ValueType {
    [NativeNameAttribute("Type", "")]
[NativeNameAttribute("Type.Name", "")]
[NativeNameAttribute("Name", "")]
public UInt32 Handle;
    public Shader(Nullable`1<UInt32> handle);
}
[NativeNameAttribute("Name", "ShaderBinaryFormat")]
public enum Silk.NET.OpenGL.ShaderBinaryFormat : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_SGX_BINARY_IMG")]
public static ShaderBinaryFormat SgxBinaryImg;
    [NativeNameAttribute("Name", "GL_MALI_SHADER_BINARY_ARM")]
public static ShaderBinaryFormat MaliShaderBinaryArm;
    [NativeNameAttribute("Name", "GL_SHADER_BINARY_VIV")]
public static ShaderBinaryFormat ShaderBinaryViv;
    [NativeNameAttribute("Name", "GL_SHADER_BINARY_DMP")]
public static ShaderBinaryFormat ShaderBinaryDmp;
    [NativeNameAttribute("Name", "GL_GCCSO_SHADER_BINARY_FJ")]
public static ShaderBinaryFormat GccsoShaderBinaryFJ;
    [NativeNameAttribute("Name", "GL_SHADER_BINARY_FORMAT_SPIR_V")]
public static ShaderBinaryFormat ShaderBinaryFormatSpirV;
}
[NativeNameAttribute("Name", "ShaderParameterName")]
public enum Silk.NET.OpenGL.ShaderParameterName : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_SHADER_TYPE")]
public static ShaderParameterName ShaderType;
    [NativeNameAttribute("Name", "GL_DELETE_STATUS")]
public static ShaderParameterName DeleteStatus;
    [NativeNameAttribute("Name", "GL_COMPILE_STATUS")]
public static ShaderParameterName CompileStatus;
    [NativeNameAttribute("Name", "GL_INFO_LOG_LENGTH")]
public static ShaderParameterName InfoLogLength;
    [NativeNameAttribute("Name", "GL_SHADER_SOURCE_LENGTH")]
public static ShaderParameterName ShaderSourceLength;
}
[NativeNameAttribute("Name", "ShaderType")]
public enum Silk.NET.OpenGL.ShaderType : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_FRAGMENT_SHADER")]
public static ShaderType FragmentShader;
    [NativeNameAttribute("Name", "GL_FRAGMENT_SHADER_ARB")]
public static ShaderType FragmentShaderArb;
    [NativeNameAttribute("Name", "GL_VERTEX_SHADER")]
public static ShaderType VertexShader;
    [NativeNameAttribute("Name", "GL_VERTEX_SHADER_ARB")]
public static ShaderType VertexShaderArb;
    [NativeNameAttribute("Name", "GL_GEOMETRY_SHADER")]
public static ShaderType GeometryShader;
    [NativeNameAttribute("Name", "GL_TESS_EVALUATION_SHADER")]
public static ShaderType TessEvaluationShader;
    [NativeNameAttribute("Name", "GL_TESS_CONTROL_SHADER")]
public static ShaderType TessControlShader;
    [NativeNameAttribute("Name", "GL_COMPUTE_SHADER")]
public static ShaderType ComputeShader;
}
[NativeNameAttribute("Name", "ShadingModel")]
public enum Silk.NET.OpenGL.ShadingModel : Enum {
    public int value__;
}
[NativeNameAttribute("Name", "ShadingRateQCOM")]
public enum Silk.NET.OpenGL.ShadingRateQCOM : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_SHADING_RATE_1X1_PIXELS_QCOM")]
public static ShadingRateQCOM ShadingRate1X1PixelsQCom;
    [NativeNameAttribute("Name", "GL_SHADING_RATE_1X2_PIXELS_QCOM")]
public static ShadingRateQCOM ShadingRate1X2PixelsQCom;
    [NativeNameAttribute("Name", "GL_SHADING_RATE_2X1_PIXELS_QCOM")]
public static ShadingRateQCOM ShadingRate2X1PixelsQCom;
    [NativeNameAttribute("Name", "GL_SHADING_RATE_2X2_PIXELS_QCOM")]
public static ShadingRateQCOM ShadingRate2X2PixelsQCom;
    [NativeNameAttribute("Name", "GL_SHADING_RATE_1X4_PIXELS_QCOM")]
public static ShadingRateQCOM ShadingRate1X4PixelsQCom;
    [NativeNameAttribute("Name", "GL_SHADING_RATE_4X1_PIXELS_QCOM")]
public static ShadingRateQCOM ShadingRate4X1PixelsQCom;
    [NativeNameAttribute("Name", "GL_SHADING_RATE_4X2_PIXELS_QCOM")]
public static ShadingRateQCOM ShadingRate4X2PixelsQCom;
    [NativeNameAttribute("Name", "GL_SHADING_RATE_2X4_PIXELS_QCOM")]
public static ShadingRateQCOM ShadingRate2X4PixelsQCom;
    [NativeNameAttribute("Name", "GL_SHADING_RATE_4X4_PIXELS_QCOM")]
public static ShadingRateQCOM ShadingRate4X4PixelsQCom;
}
[NativeNameAttribute("Name", "SizedInternalFormat")]
public enum Silk.NET.OpenGL.SizedInternalFormat : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_R3_G3_B2")]
public static SizedInternalFormat R3G3B2;
    [NativeNameAttribute("Name", "GL_ALPHA4_EXT")]
public static SizedInternalFormat Alpha4Ext;
    [NativeNameAttribute("Name", "GL_ALPHA8_EXT")]
public static SizedInternalFormat Alpha8Ext;
    [NativeNameAttribute("Name", "GL_ALPHA8_OES")]
public static SizedInternalFormat Alpha8Oes;
    [NativeNameAttribute("Name", "GL_ALPHA12_EXT")]
public static SizedInternalFormat Alpha12Ext;
    [NativeNameAttribute("Name", "GL_ALPHA16_EXT")]
public static SizedInternalFormat Alpha16Ext;
    [NativeNameAttribute("Name", "GL_LUMINANCE4_EXT")]
public static SizedInternalFormat Luminance4Ext;
    [NativeNameAttribute("Name", "GL_LUMINANCE8_EXT")]
public static SizedInternalFormat Luminance8Ext;
    [NativeNameAttribute("Name", "GL_LUMINANCE8_OES")]
public static SizedInternalFormat Luminance8Oes;
    [NativeNameAttribute("Name", "GL_LUMINANCE12_EXT")]
public static SizedInternalFormat Luminance12Ext;
    [NativeNameAttribute("Name", "GL_LUMINANCE16_EXT")]
public static SizedInternalFormat Luminance16Ext;
    [NativeNameAttribute("Name", "GL_LUMINANCE4_ALPHA4_EXT")]
public static SizedInternalFormat Luminance4Alpha4Ext;
    [NativeNameAttribute("Name", "GL_LUMINANCE4_ALPHA4_OES")]
public static SizedInternalFormat Luminance4Alpha4Oes;
    [NativeNameAttribute("Name", "GL_LUMINANCE6_ALPHA2_EXT")]
public static SizedInternalFormat Luminance6Alpha2Ext;
    [NativeNameAttribute("Name", "GL_LUMINANCE8_ALPHA8_EXT")]
public static SizedInternalFormat Luminance8Alpha8Ext;
    [NativeNameAttribute("Name", "GL_LUMINANCE8_ALPHA8_OES")]
public static SizedInternalFormat Luminance8Alpha8Oes;
    [NativeNameAttribute("Name", "GL_LUMINANCE12_ALPHA4_EXT")]
public static SizedInternalFormat Luminance12Alpha4Ext;
    [NativeNameAttribute("Name", "GL_LUMINANCE12_ALPHA12_EXT")]
public static SizedInternalFormat Luminance12Alpha12Ext;
    [NativeNameAttribute("Name", "GL_LUMINANCE16_ALPHA16_EXT")]
public static SizedInternalFormat Luminance16Alpha16Ext;
    [NativeNameAttribute("Name", "GL_INTENSITY4_EXT")]
public static SizedInternalFormat Intensity4Ext;
    [NativeNameAttribute("Name", "GL_INTENSITY8_EXT")]
public static SizedInternalFormat Intensity8Ext;
    [NativeNameAttribute("Name", "GL_INTENSITY12_EXT")]
public static SizedInternalFormat Intensity12Ext;
    [NativeNameAttribute("Name", "GL_INTENSITY16_EXT")]
public static SizedInternalFormat Intensity16Ext;
    [NativeNameAttribute("Name", "GL_RGB2_EXT")]
public static SizedInternalFormat Rgb2Ext;
    [NativeNameAttribute("Name", "GL_RGB4")]
public static SizedInternalFormat Rgb4;
    [NativeNameAttribute("Name", "GL_RGB4_EXT")]
public static SizedInternalFormat Rgb4Ext;
    [NativeNameAttribute("Name", "GL_RGB5")]
public static SizedInternalFormat Rgb5;
    [NativeNameAttribute("Name", "GL_RGB5_EXT")]
public static SizedInternalFormat Rgb5Ext;
    [NativeNameAttribute("Name", "GL_RGB8")]
public static SizedInternalFormat Rgb8;
    [NativeNameAttribute("Name", "GL_RGB8_EXT")]
public static SizedInternalFormat Rgb8Ext;
    [NativeNameAttribute("Name", "GL_RGB8_OES")]
public static SizedInternalFormat Rgb8Oes;
    [NativeNameAttribute("Name", "GL_RGB10")]
public static SizedInternalFormat Rgb10;
    [NativeNameAttribute("Name", "GL_RGB10_EXT")]
public static SizedInternalFormat Rgb10Ext;
    [NativeNameAttribute("Name", "GL_RGB12")]
public static SizedInternalFormat Rgb12;
    [NativeNameAttribute("Name", "GL_RGB12_EXT")]
public static SizedInternalFormat Rgb12Ext;
    [NativeNameAttribute("Name", "GL_RGB16")]
public static SizedInternalFormat Rgb16;
    [NativeNameAttribute("Name", "GL_RGB16_EXT")]
public static SizedInternalFormat Rgb16Ext;
    [NativeNameAttribute("Name", "GL_RGBA2")]
public static SizedInternalFormat Rgba2;
    [NativeNameAttribute("Name", "GL_RGBA2_EXT")]
public static SizedInternalFormat Rgba2Ext;
    [NativeNameAttribute("Name", "GL_RGBA4")]
public static SizedInternalFormat Rgba4;
    [NativeNameAttribute("Name", "GL_RGBA4_EXT")]
public static SizedInternalFormat Rgba4Ext;
    [NativeNameAttribute("Name", "GL_RGBA4_OES")]
public static SizedInternalFormat Rgba4Oes;
    [NativeNameAttribute("Name", "GL_RGB5_A1")]
public static SizedInternalFormat Rgb5A1;
    [NativeNameAttribute("Name", "GL_RGB5_A1_EXT")]
public static SizedInternalFormat Rgb5A1Ext;
    [NativeNameAttribute("Name", "GL_RGB5_A1_OES")]
public static SizedInternalFormat Rgb5A1Oes;
    [NativeNameAttribute("Name", "GL_RGBA8")]
public static SizedInternalFormat Rgba8;
    [NativeNameAttribute("Name", "GL_RGBA8_EXT")]
public static SizedInternalFormat Rgba8Ext;
    [NativeNameAttribute("Name", "GL_RGBA8_OES")]
public static SizedInternalFormat Rgba8Oes;
    [NativeNameAttribute("Name", "GL_RGB10_A2")]
public static SizedInternalFormat Rgb10A2;
    [NativeNameAttribute("Name", "GL_RGB10_A2_EXT")]
public static SizedInternalFormat Rgb10A2Ext;
    [NativeNameAttribute("Name", "GL_RGBA12")]
public static SizedInternalFormat Rgba12;
    [NativeNameAttribute("Name", "GL_RGBA12_EXT")]
public static SizedInternalFormat Rgba12Ext;
    [NativeNameAttribute("Name", "GL_RGBA16")]
public static SizedInternalFormat Rgba16;
    [NativeNameAttribute("Name", "GL_RGBA16_EXT")]
public static SizedInternalFormat Rgba16Ext;
    [NativeNameAttribute("Name", "GL_DEPTH_COMPONENT16")]
public static SizedInternalFormat DepthComponent16;
    [NativeNameAttribute("Name", "GL_DEPTH_COMPONENT16_ARB")]
public static SizedInternalFormat DepthComponent16Arb;
    [NativeNameAttribute("Name", "GL_DEPTH_COMPONENT16_OES")]
public static SizedInternalFormat DepthComponent16Oes;
    [NativeNameAttribute("Name", "GL_DEPTH_COMPONENT16_SGIX")]
public static SizedInternalFormat DepthComponent16Sgix;
    [NativeNameAttribute("Name", "GL_DEPTH_COMPONENT24")]
public static SizedInternalFormat DepthComponent24;
    [NativeNameAttribute("Name", "GL_DEPTH_COMPONENT24_ARB")]
public static SizedInternalFormat DepthComponent24Arb;
    [NativeNameAttribute("Name", "GL_DEPTH_COMPONENT24_OES")]
public static SizedInternalFormat DepthComponent24Oes;
    [NativeNameAttribute("Name", "GL_DEPTH_COMPONENT24_SGIX")]
public static SizedInternalFormat DepthComponent24Sgix;
    [NativeNameAttribute("Name", "GL_DEPTH_COMPONENT32")]
public static SizedInternalFormat DepthComponent32;
    [NativeNameAttribute("Name", "GL_DEPTH_COMPONENT32_ARB")]
public static SizedInternalFormat DepthComponent32Arb;
    [NativeNameAttribute("Name", "GL_DEPTH_COMPONENT32_OES")]
public static SizedInternalFormat DepthComponent32Oes;
    [NativeNameAttribute("Name", "GL_DEPTH_COMPONENT32_SGIX")]
public static SizedInternalFormat DepthComponent32Sgix;
    [NativeNameAttribute("Name", "GL_R8")]
public static SizedInternalFormat R8;
    [NativeNameAttribute("Name", "GL_R8_EXT")]
public static SizedInternalFormat R8Ext;
    [NativeNameAttribute("Name", "GL_R16")]
public static SizedInternalFormat R16;
    [NativeNameAttribute("Name", "GL_R16_EXT")]
public static SizedInternalFormat R16Ext;
    [NativeNameAttribute("Name", "GL_RG8")]
public static SizedInternalFormat RG8;
    [NativeNameAttribute("Name", "GL_RG8_EXT")]
public static SizedInternalFormat RG8Ext;
    [NativeNameAttribute("Name", "GL_RG16")]
public static SizedInternalFormat RG16;
    [NativeNameAttribute("Name", "GL_RG16_EXT")]
public static SizedInternalFormat RG16Ext;
    [NativeNameAttribute("Name", "GL_R16F")]
public static SizedInternalFormat R16f;
    [NativeNameAttribute("Name", "GL_R16F_EXT")]
public static SizedInternalFormat R16fExt;
    [NativeNameAttribute("Name", "GL_R32F")]
public static SizedInternalFormat R32f;
    [NativeNameAttribute("Name", "GL_R32F_EXT")]
public static SizedInternalFormat R32fExt;
    [NativeNameAttribute("Name", "GL_RG16F")]
public static SizedInternalFormat RG16f;
    [NativeNameAttribute("Name", "GL_RG16F_EXT")]
public static SizedInternalFormat RG16fExt;
    [NativeNameAttribute("Name", "GL_RG32F")]
public static SizedInternalFormat RG32f;
    [NativeNameAttribute("Name", "GL_RG32F_EXT")]
public static SizedInternalFormat RG32fExt;
    [NativeNameAttribute("Name", "GL_R8I")]
public static SizedInternalFormat R8i;
    [NativeNameAttribute("Name", "GL_R8UI")]
public static SizedInternalFormat R8ui;
    [NativeNameAttribute("Name", "GL_R16I")]
public static SizedInternalFormat R16i;
    [NativeNameAttribute("Name", "GL_R16UI")]
public static SizedInternalFormat R16ui;
    [NativeNameAttribute("Name", "GL_R32I")]
public static SizedInternalFormat R32i;
    [NativeNameAttribute("Name", "GL_R32UI")]
public static SizedInternalFormat R32ui;
    [NativeNameAttribute("Name", "GL_RG8I")]
public static SizedInternalFormat RG8i;
    [NativeNameAttribute("Name", "GL_RG8UI")]
public static SizedInternalFormat RG8ui;
    [NativeNameAttribute("Name", "GL_RG16I")]
public static SizedInternalFormat RG16i;
    [NativeNameAttribute("Name", "GL_RG16UI")]
public static SizedInternalFormat RG16ui;
    [NativeNameAttribute("Name", "GL_RG32I")]
public static SizedInternalFormat RG32i;
    [NativeNameAttribute("Name", "GL_RG32UI")]
public static SizedInternalFormat RG32ui;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGB_S3TC_DXT1_EXT")]
public static SizedInternalFormat CompressedRgbS3TCDxt1Ext;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_S3TC_DXT1_EXT")]
public static SizedInternalFormat CompressedRgbaS3TCDxt1Ext;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE")]
public static SizedInternalFormat CompressedRgbaS3TCDxt3Angle;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_S3TC_DXT3_EXT")]
public static SizedInternalFormat CompressedRgbaS3TCDxt3Ext;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE")]
public static SizedInternalFormat CompressedRgbaS3TCDxt5Angle;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_S3TC_DXT5_EXT")]
public static SizedInternalFormat CompressedRgbaS3TCDxt5Ext;
    [NativeNameAttribute("Name", "GL_RGBA32F")]
public static SizedInternalFormat Rgba32f;
    [NativeNameAttribute("Name", "GL_RGBA32F_ARB")]
public static SizedInternalFormat Rgba32fArb;
    [NativeNameAttribute("Name", "GL_RGBA32F_EXT")]
public static SizedInternalFormat Rgba32fExt;
    [NativeNameAttribute("Name", "GL_RGB32F")]
public static SizedInternalFormat Rgb32f;
    [NativeNameAttribute("Name", "GL_RGB32F_ARB")]
public static SizedInternalFormat Rgb32fArb;
    [NativeNameAttribute("Name", "GL_RGB32F_EXT")]
public static SizedInternalFormat Rgb32fExt;
    [NativeNameAttribute("Name", "GL_RGBA16F")]
public static SizedInternalFormat Rgba16f;
    [NativeNameAttribute("Name", "GL_RGBA16F_ARB")]
public static SizedInternalFormat Rgba16fArb;
    [NativeNameAttribute("Name", "GL_RGBA16F_EXT")]
public static SizedInternalFormat Rgba16fExt;
    [NativeNameAttribute("Name", "GL_RGB16F")]
public static SizedInternalFormat Rgb16f;
    [NativeNameAttribute("Name", "GL_RGB16F_ARB")]
public static SizedInternalFormat Rgb16fArb;
    [NativeNameAttribute("Name", "GL_RGB16F_EXT")]
public static SizedInternalFormat Rgb16fExt;
    [NativeNameAttribute("Name", "GL_DEPTH24_STENCIL8")]
public static SizedInternalFormat Depth24Stencil8;
    [NativeNameAttribute("Name", "GL_DEPTH24_STENCIL8_EXT")]
public static SizedInternalFormat Depth24Stencil8Ext;
    [NativeNameAttribute("Name", "GL_DEPTH24_STENCIL8_OES")]
public static SizedInternalFormat Depth24Stencil8Oes;
    [NativeNameAttribute("Name", "GL_R11F_G11F_B10F")]
public static SizedInternalFormat R11fG11fB10f;
    [NativeNameAttribute("Name", "GL_R11F_G11F_B10F_APPLE")]
public static SizedInternalFormat R11fG11fB10fApple;
    [NativeNameAttribute("Name", "GL_R11F_G11F_B10F_EXT")]
public static SizedInternalFormat R11fG11fB10fExt;
    [NativeNameAttribute("Name", "GL_RGB9_E5")]
public static SizedInternalFormat Rgb9E5;
    [NativeNameAttribute("Name", "GL_RGB9_E5_APPLE")]
public static SizedInternalFormat Rgb9E5Apple;
    [NativeNameAttribute("Name", "GL_RGB9_E5_EXT")]
public static SizedInternalFormat Rgb9E5Ext;
    [NativeNameAttribute("Name", "GL_SRGB8")]
public static SizedInternalFormat Srgb8;
    [NativeNameAttribute("Name", "GL_SRGB8_EXT")]
public static SizedInternalFormat Srgb8Ext;
    [NativeNameAttribute("Name", "GL_SRGB8_NV")]
public static SizedInternalFormat Srgb8NV;
    [NativeNameAttribute("Name", "GL_SRGB8_ALPHA8")]
public static SizedInternalFormat Srgb8Alpha8;
    [NativeNameAttribute("Name", "GL_SRGB8_ALPHA8_EXT")]
public static SizedInternalFormat Srgb8Alpha8Ext;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB_S3TC_DXT1_EXT")]
public static SizedInternalFormat CompressedSrgbS3TCDxt1Ext;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB_S3TC_DXT1_NV")]
public static SizedInternalFormat CompressedSrgbS3TCDxt1NV;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT")]
public static SizedInternalFormat CompressedSrgbAlphaS3TCDxt1Ext;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_NV")]
public static SizedInternalFormat CompressedSrgbAlphaS3TCDxt1NV;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT")]
public static SizedInternalFormat CompressedSrgbAlphaS3TCDxt3Ext;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_NV")]
public static SizedInternalFormat CompressedSrgbAlphaS3TCDxt3NV;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT")]
public static SizedInternalFormat CompressedSrgbAlphaS3TCDxt5Ext;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_NV")]
public static SizedInternalFormat CompressedSrgbAlphaS3TCDxt5NV;
    [NativeNameAttribute("Name", "GL_DEPTH_COMPONENT32F")]
public static SizedInternalFormat DepthComponent32f;
    [NativeNameAttribute("Name", "GL_DEPTH32F_STENCIL8")]
public static SizedInternalFormat Depth32fStencil8;
    [NativeNameAttribute("Name", "GL_STENCIL_INDEX1")]
public static SizedInternalFormat StencilIndex1;
    [NativeNameAttribute("Name", "GL_STENCIL_INDEX1_EXT")]
public static SizedInternalFormat StencilIndex1Ext;
    [NativeNameAttribute("Name", "GL_STENCIL_INDEX1_OES")]
public static SizedInternalFormat StencilIndex1Oes;
    [NativeNameAttribute("Name", "GL_STENCIL_INDEX4")]
public static SizedInternalFormat StencilIndex4;
    [NativeNameAttribute("Name", "GL_STENCIL_INDEX4_EXT")]
public static SizedInternalFormat StencilIndex4Ext;
    [NativeNameAttribute("Name", "GL_STENCIL_INDEX4_OES")]
public static SizedInternalFormat StencilIndex4Oes;
    [NativeNameAttribute("Name", "GL_STENCIL_INDEX8")]
public static SizedInternalFormat StencilIndex8;
    [NativeNameAttribute("Name", "GL_STENCIL_INDEX8_EXT")]
public static SizedInternalFormat StencilIndex8Ext;
    [NativeNameAttribute("Name", "GL_STENCIL_INDEX8_OES")]
public static SizedInternalFormat StencilIndex8Oes;
    [NativeNameAttribute("Name", "GL_STENCIL_INDEX16")]
public static SizedInternalFormat StencilIndex16;
    [NativeNameAttribute("Name", "GL_STENCIL_INDEX16_EXT")]
public static SizedInternalFormat StencilIndex16Ext;
    [NativeNameAttribute("Name", "GL_RGB565_OES")]
public static SizedInternalFormat Rgb565Oes;
    [NativeNameAttribute("Name", "GL_RGB565")]
public static SizedInternalFormat Rgb565;
    [NativeNameAttribute("Name", "GL_ETC1_RGB8_OES")]
public static SizedInternalFormat Etc1Rgb8Oes;
    [NativeNameAttribute("Name", "GL_RGBA32UI")]
public static SizedInternalFormat Rgba32ui;
    [NativeNameAttribute("Name", "GL_RGBA32UI_EXT")]
public static SizedInternalFormat Rgba32uiExt;
    [NativeNameAttribute("Name", "GL_RGB32UI")]
public static SizedInternalFormat Rgb32ui;
    [NativeNameAttribute("Name", "GL_RGB32UI_EXT")]
public static SizedInternalFormat Rgb32uiExt;
    [NativeNameAttribute("Name", "GL_ALPHA32UI_EXT")]
public static SizedInternalFormat Alpha32uiExt;
    [NativeNameAttribute("Name", "GL_INTENSITY32UI_EXT")]
public static SizedInternalFormat Intensity32uiExt;
    [NativeNameAttribute("Name", "GL_LUMINANCE32UI_EXT")]
public static SizedInternalFormat Luminance32uiExt;
    [NativeNameAttribute("Name", "GL_LUMINANCE_ALPHA32UI_EXT")]
public static SizedInternalFormat LuminanceAlpha32uiExt;
    [NativeNameAttribute("Name", "GL_RGBA16UI")]
public static SizedInternalFormat Rgba16ui;
    [NativeNameAttribute("Name", "GL_RGBA16UI_EXT")]
public static SizedInternalFormat Rgba16uiExt;
    [NativeNameAttribute("Name", "GL_RGB16UI")]
public static SizedInternalFormat Rgb16ui;
    [NativeNameAttribute("Name", "GL_RGB16UI_EXT")]
public static SizedInternalFormat Rgb16uiExt;
    [NativeNameAttribute("Name", "GL_ALPHA16UI_EXT")]
public static SizedInternalFormat Alpha16uiExt;
    [NativeNameAttribute("Name", "GL_INTENSITY16UI_EXT")]
public static SizedInternalFormat Intensity16uiExt;
    [NativeNameAttribute("Name", "GL_LUMINANCE16UI_EXT")]
public static SizedInternalFormat Luminance16uiExt;
    [NativeNameAttribute("Name", "GL_LUMINANCE_ALPHA16UI_EXT")]
public static SizedInternalFormat LuminanceAlpha16uiExt;
    [NativeNameAttribute("Name", "GL_RGBA8UI")]
public static SizedInternalFormat Rgba8ui;
    [NativeNameAttribute("Name", "GL_RGBA8UI_EXT")]
public static SizedInternalFormat Rgba8uiExt;
    [NativeNameAttribute("Name", "GL_RGB8UI")]
public static SizedInternalFormat Rgb8ui;
    [NativeNameAttribute("Name", "GL_RGB8UI_EXT")]
public static SizedInternalFormat Rgb8uiExt;
    [NativeNameAttribute("Name", "GL_ALPHA8UI_EXT")]
public static SizedInternalFormat Alpha8uiExt;
    [NativeNameAttribute("Name", "GL_INTENSITY8UI_EXT")]
public static SizedInternalFormat Intensity8uiExt;
    [NativeNameAttribute("Name", "GL_LUMINANCE8UI_EXT")]
public static SizedInternalFormat Luminance8uiExt;
    [NativeNameAttribute("Name", "GL_LUMINANCE_ALPHA8UI_EXT")]
public static SizedInternalFormat LuminanceAlpha8uiExt;
    [NativeNameAttribute("Name", "GL_RGBA32I")]
public static SizedInternalFormat Rgba32i;
    [NativeNameAttribute("Name", "GL_RGBA32I_EXT")]
public static SizedInternalFormat Rgba32iExt;
    [NativeNameAttribute("Name", "GL_RGB32I")]
public static SizedInternalFormat Rgb32i;
    [NativeNameAttribute("Name", "GL_RGB32I_EXT")]
public static SizedInternalFormat Rgb32iExt;
    [NativeNameAttribute("Name", "GL_ALPHA32I_EXT")]
public static SizedInternalFormat Alpha32iExt;
    [NativeNameAttribute("Name", "GL_INTENSITY32I_EXT")]
public static SizedInternalFormat Intensity32iExt;
    [NativeNameAttribute("Name", "GL_LUMINANCE32I_EXT")]
public static SizedInternalFormat Luminance32iExt;
    [NativeNameAttribute("Name", "GL_LUMINANCE_ALPHA32I_EXT")]
public static SizedInternalFormat LuminanceAlpha32iExt;
    [NativeNameAttribute("Name", "GL_RGBA16I")]
public static SizedInternalFormat Rgba16i;
    [NativeNameAttribute("Name", "GL_RGBA16I_EXT")]
public static SizedInternalFormat Rgba16iExt;
    [NativeNameAttribute("Name", "GL_RGB16I")]
public static SizedInternalFormat Rgb16i;
    [NativeNameAttribute("Name", "GL_RGB16I_EXT")]
public static SizedInternalFormat Rgb16iExt;
    [NativeNameAttribute("Name", "GL_ALPHA16I_EXT")]
public static SizedInternalFormat Alpha16iExt;
    [NativeNameAttribute("Name", "GL_INTENSITY16I_EXT")]
public static SizedInternalFormat Intensity16iExt;
    [NativeNameAttribute("Name", "GL_LUMINANCE16I_EXT")]
public static SizedInternalFormat Luminance16iExt;
    [NativeNameAttribute("Name", "GL_LUMINANCE_ALPHA16I_EXT")]
public static SizedInternalFormat LuminanceAlpha16iExt;
    [NativeNameAttribute("Name", "GL_RGBA8I")]
public static SizedInternalFormat Rgba8i;
    [NativeNameAttribute("Name", "GL_RGBA8I_EXT")]
public static SizedInternalFormat Rgba8iExt;
    [NativeNameAttribute("Name", "GL_RGB8I")]
public static SizedInternalFormat Rgb8i;
    [NativeNameAttribute("Name", "GL_RGB8I_EXT")]
public static SizedInternalFormat Rgb8iExt;
    [NativeNameAttribute("Name", "GL_ALPHA8I_EXT")]
public static SizedInternalFormat Alpha8iExt;
    [NativeNameAttribute("Name", "GL_INTENSITY8I_EXT")]
public static SizedInternalFormat Intensity8iExt;
    [NativeNameAttribute("Name", "GL_LUMINANCE8I_EXT")]
public static SizedInternalFormat Luminance8iExt;
    [NativeNameAttribute("Name", "GL_LUMINANCE_ALPHA8I_EXT")]
public static SizedInternalFormat LuminanceAlpha8iExt;
    [NativeNameAttribute("Name", "GL_DEPTH_COMPONENT32F_NV")]
public static SizedInternalFormat DepthComponent32fNV;
    [NativeNameAttribute("Name", "GL_DEPTH32F_STENCIL8_NV")]
public static SizedInternalFormat Depth32fStencil8NV;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RED_RGTC1")]
public static SizedInternalFormat CompressedRedRgtc1;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RED_RGTC1_EXT")]
public static SizedInternalFormat CompressedRedRgtc1Ext;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SIGNED_RED_RGTC1")]
public static SizedInternalFormat CompressedSignedRedRgtc1;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SIGNED_RED_RGTC1_EXT")]
public static SizedInternalFormat CompressedSignedRedRgtc1Ext;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RED_GREEN_RGTC2_EXT")]
public static SizedInternalFormat CompressedRedGreenRgtc2Ext;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RG_RGTC2")]
public static SizedInternalFormat CompressedRGRgtc2;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT")]
public static SizedInternalFormat CompressedSignedRedGreenRgtc2Ext;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SIGNED_RG_RGTC2")]
public static SizedInternalFormat CompressedSignedRGRgtc2;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_BPTC_UNORM")]
public static SizedInternalFormat CompressedRgbaBptcUnorm;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_BPTC_UNORM_ARB")]
public static SizedInternalFormat CompressedRgbaBptcUnormArb;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_BPTC_UNORM_EXT")]
public static SizedInternalFormat CompressedRgbaBptcUnormExt;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM")]
public static SizedInternalFormat CompressedSrgbAlphaBptcUnorm;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB")]
public static SizedInternalFormat CompressedSrgbAlphaBptcUnormArb;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT")]
public static SizedInternalFormat CompressedSrgbAlphaBptcUnormExt;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT")]
public static SizedInternalFormat CompressedRgbBptcSignedFloat;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB")]
public static SizedInternalFormat CompressedRgbBptcSignedFloatArb;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT")]
public static SizedInternalFormat CompressedRgbBptcSignedFloatExt;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT")]
public static SizedInternalFormat CompressedRgbBptcUnsignedFloat;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB")]
public static SizedInternalFormat CompressedRgbBptcUnsignedFloatArb;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT")]
public static SizedInternalFormat CompressedRgbBptcUnsignedFloatExt;
    [NativeNameAttribute("Name", "GL_R8_SNORM")]
public static SizedInternalFormat R8SNorm;
    [NativeNameAttribute("Name", "GL_RG8_SNORM")]
public static SizedInternalFormat RG8SNorm;
    [NativeNameAttribute("Name", "GL_RGB8_SNORM")]
public static SizedInternalFormat Rgb8SNorm;
    [NativeNameAttribute("Name", "GL_RGBA8_SNORM")]
public static SizedInternalFormat Rgba8SNorm;
    [NativeNameAttribute("Name", "GL_R16_SNORM")]
public static SizedInternalFormat R16SNorm;
    [NativeNameAttribute("Name", "GL_R16_SNORM_EXT")]
public static SizedInternalFormat R16SNormExt;
    [NativeNameAttribute("Name", "GL_RG16_SNORM")]
public static SizedInternalFormat RG16SNorm;
    [NativeNameAttribute("Name", "GL_RG16_SNORM_EXT")]
public static SizedInternalFormat RG16SNormExt;
    [NativeNameAttribute("Name", "GL_RGB16_SNORM")]
public static SizedInternalFormat Rgb16SNorm;
    [NativeNameAttribute("Name", "GL_RGB16_SNORM_EXT")]
public static SizedInternalFormat Rgb16SNormExt;
    [NativeNameAttribute("Name", "GL_RGBA16_SNORM")]
public static SizedInternalFormat Rgba16SNorm;
    [NativeNameAttribute("Name", "GL_RGBA16_SNORM_EXT")]
public static SizedInternalFormat Rgba16SNormExt;
    [NativeNameAttribute("Name", "GL_RGB10_A2UI")]
public static SizedInternalFormat Rgb10A2ui;
    [NativeNameAttribute("Name", "GL_COMPRESSED_R11_EAC")]
public static SizedInternalFormat CompressedR11Eac;
    [NativeNameAttribute("Name", "GL_COMPRESSED_R11_EAC_OES")]
public static SizedInternalFormat CompressedR11EacOes;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SIGNED_R11_EAC")]
public static SizedInternalFormat CompressedSignedR11Eac;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SIGNED_R11_EAC_OES")]
public static SizedInternalFormat CompressedSignedR11EacOes;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RG11_EAC")]
public static SizedInternalFormat CompressedRG11Eac;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RG11_EAC_OES")]
public static SizedInternalFormat CompressedRG11EacOes;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SIGNED_RG11_EAC")]
public static SizedInternalFormat CompressedSignedRG11Eac;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SIGNED_RG11_EAC_OES")]
public static SizedInternalFormat CompressedSignedRG11EacOes;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGB8_ETC2")]
public static SizedInternalFormat CompressedRgb8Etc2;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGB8_ETC2_OES")]
public static SizedInternalFormat CompressedRgb8Etc2Oes;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ETC2")]
public static SizedInternalFormat CompressedSrgb8Etc2;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ETC2_OES")]
public static SizedInternalFormat CompressedSrgb8Etc2Oes;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2")]
public static SizedInternalFormat CompressedRgb8PunchthroughAlpha1Etc2;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2_OES")]
public static SizedInternalFormat CompressedRgb8PunchthroughAlpha1Etc2Oes;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2")]
public static SizedInternalFormat CompressedSrgb8PunchthroughAlpha1Etc2;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2_OES")]
public static SizedInternalFormat CompressedSrgb8PunchthroughAlpha1Etc2Oes;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA8_ETC2_EAC")]
public static SizedInternalFormat CompressedRgba8Etc2Eac;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA8_ETC2_EAC_OES")]
public static SizedInternalFormat CompressedRgba8Etc2EacOes;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC")]
public static SizedInternalFormat CompressedSrgb8Alpha8Etc2Eac;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC_OES")]
public static SizedInternalFormat CompressedSrgb8Alpha8Etc2EacOes;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_4x4")]
public static SizedInternalFormat CompressedRgbaAstc4x4;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_4x4_KHR")]
public static SizedInternalFormat CompressedRgbaAstc4x4Khr;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_5x4")]
public static SizedInternalFormat CompressedRgbaAstc5x4;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_5x4_KHR")]
public static SizedInternalFormat CompressedRgbaAstc5x4Khr;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_5x5")]
public static SizedInternalFormat CompressedRgbaAstc5x5;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_5x5_KHR")]
public static SizedInternalFormat CompressedRgbaAstc5x5Khr;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_6x5")]
public static SizedInternalFormat CompressedRgbaAstc6x5;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_6x5_KHR")]
public static SizedInternalFormat CompressedRgbaAstc6x5Khr;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_6x6")]
public static SizedInternalFormat CompressedRgbaAstc6x6;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_6x6_KHR")]
public static SizedInternalFormat CompressedRgbaAstc6x6Khr;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_8x5")]
public static SizedInternalFormat CompressedRgbaAstc8x5;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_8x5_KHR")]
public static SizedInternalFormat CompressedRgbaAstc8x5Khr;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_8x6")]
public static SizedInternalFormat CompressedRgbaAstc8x6;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_8x6_KHR")]
public static SizedInternalFormat CompressedRgbaAstc8x6Khr;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_8x8")]
public static SizedInternalFormat CompressedRgbaAstc8x8;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_8x8_KHR")]
public static SizedInternalFormat CompressedRgbaAstc8x8Khr;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_10x5")]
public static SizedInternalFormat CompressedRgbaAstc10x5;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_10x5_KHR")]
public static SizedInternalFormat CompressedRgbaAstc10x5Khr;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_10x6")]
public static SizedInternalFormat CompressedRgbaAstc10x6;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_10x6_KHR")]
public static SizedInternalFormat CompressedRgbaAstc10x6Khr;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_10x8")]
public static SizedInternalFormat CompressedRgbaAstc10x8;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_10x8_KHR")]
public static SizedInternalFormat CompressedRgbaAstc10x8Khr;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_10x10")]
public static SizedInternalFormat CompressedRgbaAstc10x10;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_10x10_KHR")]
public static SizedInternalFormat CompressedRgbaAstc10x10Khr;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_12x10")]
public static SizedInternalFormat CompressedRgbaAstc12x10;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_12x10_KHR")]
public static SizedInternalFormat CompressedRgbaAstc12x10Khr;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_12x12")]
public static SizedInternalFormat CompressedRgbaAstc12x12;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_12x12_KHR")]
public static SizedInternalFormat CompressedRgbaAstc12x12Khr;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_3x3x3_OES")]
public static SizedInternalFormat CompressedRgbaAstc3x3x3Oes;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_4x3x3_OES")]
public static SizedInternalFormat CompressedRgbaAstc4x3x3Oes;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_4x4x3_OES")]
public static SizedInternalFormat CompressedRgbaAstc4x4x3Oes;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_4x4x4_OES")]
public static SizedInternalFormat CompressedRgbaAstc4x4x4Oes;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_5x4x4_OES")]
public static SizedInternalFormat CompressedRgbaAstc5x4x4Oes;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_5x5x4_OES")]
public static SizedInternalFormat CompressedRgbaAstc5x5x4Oes;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_5x5x5_OES")]
public static SizedInternalFormat CompressedRgbaAstc5x5x5Oes;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_6x5x5_OES")]
public static SizedInternalFormat CompressedRgbaAstc6x5x5Oes;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_6x6x5_OES")]
public static SizedInternalFormat CompressedRgbaAstc6x6x5Oes;
    [NativeNameAttribute("Name", "GL_COMPRESSED_RGBA_ASTC_6x6x6_OES")]
public static SizedInternalFormat CompressedRgbaAstc6x6x6Oes;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4")]
public static SizedInternalFormat CompressedSrgb8Alpha8Astc4x4;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR")]
public static SizedInternalFormat CompressedSrgb8Alpha8Astc4x4Khr;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4")]
public static SizedInternalFormat CompressedSrgb8Alpha8Astc5x4;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR")]
public static SizedInternalFormat CompressedSrgb8Alpha8Astc5x4Khr;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5")]
public static SizedInternalFormat CompressedSrgb8Alpha8Astc5x5;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR")]
public static SizedInternalFormat CompressedSrgb8Alpha8Astc5x5Khr;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5")]
public static SizedInternalFormat CompressedSrgb8Alpha8Astc6x5;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR")]
public static SizedInternalFormat CompressedSrgb8Alpha8Astc6x5Khr;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6")]
public static SizedInternalFormat CompressedSrgb8Alpha8Astc6x6;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR")]
public static SizedInternalFormat CompressedSrgb8Alpha8Astc6x6Khr;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5")]
public static SizedInternalFormat CompressedSrgb8Alpha8Astc8x5;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR")]
public static SizedInternalFormat CompressedSrgb8Alpha8Astc8x5Khr;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6")]
public static SizedInternalFormat CompressedSrgb8Alpha8Astc8x6;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR")]
public static SizedInternalFormat CompressedSrgb8Alpha8Astc8x6Khr;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8")]
public static SizedInternalFormat CompressedSrgb8Alpha8Astc8x8;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR")]
public static SizedInternalFormat CompressedSrgb8Alpha8Astc8x8Khr;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5")]
public static SizedInternalFormat CompressedSrgb8Alpha8Astc10x5;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR")]
public static SizedInternalFormat CompressedSrgb8Alpha8Astc10x5Khr;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6")]
public static SizedInternalFormat CompressedSrgb8Alpha8Astc10x6;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR")]
public static SizedInternalFormat CompressedSrgb8Alpha8Astc10x6Khr;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8")]
public static SizedInternalFormat CompressedSrgb8Alpha8Astc10x8;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR")]
public static SizedInternalFormat CompressedSrgb8Alpha8Astc10x8Khr;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10")]
public static SizedInternalFormat CompressedSrgb8Alpha8Astc10x10;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR")]
public static SizedInternalFormat CompressedSrgb8Alpha8Astc10x10Khr;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10")]
public static SizedInternalFormat CompressedSrgb8Alpha8Astc12x10;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR")]
public static SizedInternalFormat CompressedSrgb8Alpha8Astc12x10Khr;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12")]
public static SizedInternalFormat CompressedSrgb8Alpha8Astc12x12;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR")]
public static SizedInternalFormat CompressedSrgb8Alpha8Astc12x12Khr;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_3x3x3_OES")]
public static SizedInternalFormat CompressedSrgb8Alpha8Astc3x3x3Oes;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x3x3_OES")]
public static SizedInternalFormat CompressedSrgb8Alpha8Astc4x3x3Oes;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x3_OES")]
public static SizedInternalFormat CompressedSrgb8Alpha8Astc4x4x3Oes;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x4_OES")]
public static SizedInternalFormat CompressedSrgb8Alpha8Astc4x4x4Oes;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4x4_OES")]
public static SizedInternalFormat CompressedSrgb8Alpha8Astc5x4x4Oes;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x4_OES")]
public static SizedInternalFormat CompressedSrgb8Alpha8Astc5x5x4Oes;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x5_OES")]
public static SizedInternalFormat CompressedSrgb8Alpha8Astc5x5x5Oes;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5x5_OES")]
public static SizedInternalFormat CompressedSrgb8Alpha8Astc6x5x5Oes;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x5_OES")]
public static SizedInternalFormat CompressedSrgb8Alpha8Astc6x6x5Oes;
    [NativeNameAttribute("Name", "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x6_OES")]
public static SizedInternalFormat CompressedSrgb8Alpha8Astc6x6x6Oes;
}
[NativeNameAttribute("Name", "SpecialNumbers")]
public enum Silk.NET.OpenGL.SpecialNumbers : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_FALSE")]
public static SpecialNumbers False;
    [NativeNameAttribute("Name", "GL_NO_ERROR")]
public static SpecialNumbers NoError;
    [NativeNameAttribute("Name", "GL_ZERO")]
public static SpecialNumbers Zero;
    [NativeNameAttribute("Name", "GL_NONE")]
public static SpecialNumbers None;
    [NativeNameAttribute("Name", "GL_NONE_OES")]
public static SpecialNumbers NoneOes;
    [NativeNameAttribute("Name", "GL_TRUE")]
public static SpecialNumbers True;
    [NativeNameAttribute("Name", "GL_ONE")]
public static SpecialNumbers One;
    [NativeNameAttribute("Name", "GL_INVALID_INDEX")]
public static SpecialNumbers InvalidIndex;
    [NativeNameAttribute("Name", "GL_ALL_PIXELS_AMD")]
public static SpecialNumbers AllPixelsAmd;
    [NativeNameAttribute("Name", "GL_TIMEOUT_IGNORED")]
public static SpecialNumbers TimeoutIgnored;
    [NativeNameAttribute("Name", "GL_TIMEOUT_IGNORED_APPLE")]
public static SpecialNumbers TimeoutIgnoredApple;
    [NativeNameAttribute("Name", "GL_VERSION_ES_CL_1_0")]
public static SpecialNumbers VersionESCL10;
    [NativeNameAttribute("Name", "GL_VERSION_ES_CM_1_1")]
public static SpecialNumbers VersionESCM11;
    [NativeNameAttribute("Name", "GL_VERSION_ES_CL_1_1")]
public static SpecialNumbers VersionESCL11;
    [NativeNameAttribute("Name", "GL_UUID_SIZE_EXT")]
public static SpecialNumbers UuidSizeExt;
    [NativeNameAttribute("Name", "GL_LUID_SIZE_EXT")]
public static SpecialNumbers LuidSizeExt;
}
[NativeNameAttribute("Name", "SpriteParameterNameSGIX")]
public enum Silk.NET.OpenGL.SpriteParameterNameSGIX : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_SPRITE_MODE_SGIX")]
public static SpriteParameterNameSGIX SpriteModeSgix;
}
[NativeNameAttribute("Name", "StencilFaceDirection")]
public enum Silk.NET.OpenGL.StencilFaceDirection : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_FRONT")]
public static StencilFaceDirection Front;
    [NativeNameAttribute("Name", "GL_BACK")]
public static StencilFaceDirection Back;
    [NativeNameAttribute("Name", "GL_FRONT_AND_BACK")]
public static StencilFaceDirection FrontAndBack;
}
[NativeNameAttribute("Name", "StencilFunction")]
public enum Silk.NET.OpenGL.StencilFunction : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_NEVER")]
public static StencilFunction Never;
    [NativeNameAttribute("Name", "GL_LESS")]
public static StencilFunction Less;
    [NativeNameAttribute("Name", "GL_EQUAL")]
public static StencilFunction Equal;
    [NativeNameAttribute("Name", "GL_LEQUAL")]
public static StencilFunction Lequal;
    [NativeNameAttribute("Name", "GL_GREATER")]
public static StencilFunction Greater;
    [NativeNameAttribute("Name", "GL_NOTEQUAL")]
public static StencilFunction Notequal;
    [NativeNameAttribute("Name", "GL_GEQUAL")]
public static StencilFunction Gequal;
    [NativeNameAttribute("Name", "GL_ALWAYS")]
public static StencilFunction Always;
}
[NativeNameAttribute("Name", "StencilOp")]
public enum Silk.NET.OpenGL.StencilOp : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_ZERO")]
public static StencilOp Zero;
    [NativeNameAttribute("Name", "GL_INVERT")]
public static StencilOp Invert;
    [NativeNameAttribute("Name", "GL_KEEP")]
public static StencilOp Keep;
    [NativeNameAttribute("Name", "GL_REPLACE")]
public static StencilOp Replace;
    [NativeNameAttribute("Name", "GL_INCR")]
public static StencilOp Incr;
    [NativeNameAttribute("Name", "GL_DECR")]
public static StencilOp Decr;
    [NativeNameAttribute("Name", "GL_INCR_WRAP")]
public static StencilOp IncrWrap;
    [NativeNameAttribute("Name", "GL_DECR_WRAP")]
public static StencilOp DecrWrap;
}
[NativeNameAttribute("Name", "StringName")]
public enum Silk.NET.OpenGL.StringName : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_VENDOR")]
public static StringName Vendor;
    [NativeNameAttribute("Name", "GL_RENDERER")]
public static StringName Renderer;
    [NativeNameAttribute("Name", "GL_VERSION")]
public static StringName Version;
    [NativeNameAttribute("Name", "GL_EXTENSIONS")]
public static StringName Extensions;
    [NativeNameAttribute("Name", "GL_SHADING_LANGUAGE_VERSION")]
public static StringName ShadingLanguageVersion;
}
[NativeNameAttribute("Name", "SubgroupSupportedFeatures")]
public enum Silk.NET.OpenGL.SubgroupSupportedFeatures : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_SUBGROUP_FEATURE_BASIC_BIT_KHR")]
public static SubgroupSupportedFeatures SubgroupFeatureBasicBitKhr;
    [NativeNameAttribute("Name", "GL_SUBGROUP_FEATURE_VOTE_BIT_KHR")]
public static SubgroupSupportedFeatures SubgroupFeatureVoteBitKhr;
    [NativeNameAttribute("Name", "GL_SUBGROUP_FEATURE_ARITHMETIC_BIT_KHR")]
public static SubgroupSupportedFeatures SubgroupFeatureArithmeticBitKhr;
    [NativeNameAttribute("Name", "GL_SUBGROUP_FEATURE_BALLOT_BIT_KHR")]
public static SubgroupSupportedFeatures SubgroupFeatureBallotBitKhr;
    [NativeNameAttribute("Name", "GL_SUBGROUP_FEATURE_SHUFFLE_BIT_KHR")]
public static SubgroupSupportedFeatures SubgroupFeatureShuffleBitKhr;
    [NativeNameAttribute("Name", "GL_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT_KHR")]
public static SubgroupSupportedFeatures SubgroupFeatureShuffleRelativeBitKhr;
    [NativeNameAttribute("Name", "GL_SUBGROUP_FEATURE_CLUSTERED_BIT_KHR")]
public static SubgroupSupportedFeatures SubgroupFeatureClusteredBitKhr;
    [NativeNameAttribute("Name", "GL_SUBGROUP_FEATURE_QUAD_BIT_KHR")]
public static SubgroupSupportedFeatures SubgroupFeatureQuadBitKhr;
    [NativeNameAttribute("Name", "GL_SUBGROUP_FEATURE_PARTITIONED_BIT_NV")]
public static SubgroupSupportedFeatures SubgroupFeaturePartitionedBitNV;
}
[NativeNameAttribute("Name", "SubroutineParameterName")]
public enum Silk.NET.OpenGL.SubroutineParameterName : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_UNIFORM_SIZE")]
public static SubroutineParameterName UniformSize;
    [NativeNameAttribute("Name", "GL_UNIFORM_NAME_LENGTH")]
public static SubroutineParameterName UniformNameLength;
    [NativeNameAttribute("Name", "GL_NUM_COMPATIBLE_SUBROUTINES")]
public static SubroutineParameterName NumCompatibleSubroutines;
    [NativeNameAttribute("Name", "GL_COMPATIBLE_SUBROUTINES")]
public static SubroutineParameterName CompatibleSubroutines;
}
[NativeNameAttribute("Name", "SwizzleOpATI")]
public enum Silk.NET.OpenGL.SwizzleOpATI : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_SWIZZLE_STR_ATI")]
public static SwizzleOpATI SwizzleStrAti;
    [NativeNameAttribute("Name", "GL_SWIZZLE_STQ_ATI")]
public static SwizzleOpATI SwizzleStqAti;
    [NativeNameAttribute("Name", "GL_SWIZZLE_STR_DR_ATI")]
public static SwizzleOpATI SwizzleStrDRAti;
    [NativeNameAttribute("Name", "GL_SWIZZLE_STQ_DQ_ATI")]
public static SwizzleOpATI SwizzleStqDQAti;
}
[NativeNameAttribute("Name", "sync")]
public class Silk.NET.OpenGL.Sync : ValueType {
    [NativeNameAttribute("Type", "")]
[NativeNameAttribute("Type.Name", "")]
[NativeNameAttribute("Name", "")]
public UInt32 Handle;
    public Sync(Nullable`1<UInt32> handle);
}
[NativeNameAttribute("Name", "SyncBehaviorFlags")]
public enum Silk.NET.OpenGL.SyncBehaviorFlags : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_NONE")]
public static SyncBehaviorFlags None;
}
[NativeNameAttribute("Name", "SyncCondition")]
public enum Silk.NET.OpenGL.SyncCondition : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_SYNC_GPU_COMMANDS_COMPLETE")]
public static SyncCondition SyncGpuCommandsComplete;
}
[NativeNameAttribute("Name", "SyncObjectMask")]
public enum Silk.NET.OpenGL.SyncObjectMask : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_SYNC_FLUSH_COMMANDS_BIT")]
public static SyncObjectMask SyncFlushCommandsBit;
    [NativeNameAttribute("Name", "GL_SYNC_FLUSH_COMMANDS_BIT_APPLE")]
public static SyncObjectMask SyncFlushCommandsBitApple;
}
[NativeNameAttribute("Name", "SyncParameterName")]
public enum Silk.NET.OpenGL.SyncParameterName : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_OBJECT_TYPE")]
public static SyncParameterName ObjectType;
    [NativeNameAttribute("Name", "GL_SYNC_CONDITION")]
public static SyncParameterName SyncCondition;
    [NativeNameAttribute("Name", "GL_SYNC_STATUS")]
public static SyncParameterName SyncStatus;
    [NativeNameAttribute("Name", "GL_SYNC_FLAGS")]
public static SyncParameterName SyncFlags;
}
[NativeNameAttribute("Name", "SyncStatus")]
public enum Silk.NET.OpenGL.SyncStatus : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_ALREADY_SIGNALED")]
public static SyncStatus AlreadySignaled;
    [NativeNameAttribute("Name", "GL_TIMEOUT_EXPIRED")]
public static SyncStatus TimeoutExpired;
    [NativeNameAttribute("Name", "GL_CONDITION_SATISFIED")]
public static SyncStatus ConditionSatisfied;
    [NativeNameAttribute("Name", "GL_WAIT_FAILED")]
public static SyncStatus WaitFailed;
}
[NativeNameAttribute("Name", "TangentPointerTypeEXT")]
public enum Silk.NET.OpenGL.TangentPointerTypeEXT : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_BYTE")]
public static TangentPointerTypeEXT Byte;
    [NativeNameAttribute("Name", "GL_SHORT")]
public static TangentPointerTypeEXT Short;
    [NativeNameAttribute("Name", "GL_INT")]
public static TangentPointerTypeEXT Int;
    [NativeNameAttribute("Name", "GL_FLOAT")]
public static TangentPointerTypeEXT Float;
    [NativeNameAttribute("Name", "GL_DOUBLE")]
public static TangentPointerTypeEXT Double;
    [NativeNameAttribute("Name", "GL_DOUBLE_EXT")]
public static TangentPointerTypeEXT DoubleExt;
}
[NativeNameAttribute("Name", "TexBumpParameterATI")]
public enum Silk.NET.OpenGL.TexBumpParameterATI : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_BUMP_ROT_MATRIX_ATI")]
public static TexBumpParameterATI BumpRotMatrixAti;
}
[NativeNameAttribute("Name", "TexCoordPointerType")]
public enum Silk.NET.OpenGL.TexCoordPointerType : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_SHORT")]
public static TexCoordPointerType Short;
    [NativeNameAttribute("Name", "GL_INT")]
public static TexCoordPointerType Int;
    [NativeNameAttribute("Name", "GL_FLOAT")]
public static TexCoordPointerType Float;
    [NativeNameAttribute("Name", "GL_DOUBLE")]
public static TexCoordPointerType Double;
}
[NativeNameAttribute("Name", "TexStorageAttribs")]
public enum Silk.NET.OpenGL.TexStorageAttribs : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_SURFACE_COMPRESSION_EXT")]
public static TexStorageAttribs SurfaceCompressionExt;
    [NativeNameAttribute("Name", "GL_SURFACE_COMPRESSION_FIXED_RATE_DEFAULT_EXT")]
public static TexStorageAttribs SurfaceCompressionFixedRateDefaultExt;
    [NativeNameAttribute("Name", "GL_SURFACE_COMPRESSION_FIXED_RATE_1BPC_EXT")]
public static TexStorageAttribs SurfaceCompressionFixedRate1BpcExt;
    [NativeNameAttribute("Name", "GL_SURFACE_COMPRESSION_FIXED_RATE_2BPC_EXT")]
public static TexStorageAttribs SurfaceCompressionFixedRate2BpcExt;
    [NativeNameAttribute("Name", "GL_SURFACE_COMPRESSION_FIXED_RATE_3BPC_EXT")]
public static TexStorageAttribs SurfaceCompressionFixedRate3BpcExt;
    [NativeNameAttribute("Name", "GL_SURFACE_COMPRESSION_FIXED_RATE_4BPC_EXT")]
public static TexStorageAttribs SurfaceCompressionFixedRate4BpcExt;
    [NativeNameAttribute("Name", "GL_SURFACE_COMPRESSION_FIXED_RATE_5BPC_EXT")]
public static TexStorageAttribs SurfaceCompressionFixedRate5BpcExt;
    [NativeNameAttribute("Name", "GL_SURFACE_COMPRESSION_FIXED_RATE_6BPC_EXT")]
public static TexStorageAttribs SurfaceCompressionFixedRate6BpcExt;
    [NativeNameAttribute("Name", "GL_SURFACE_COMPRESSION_FIXED_RATE_7BPC_EXT")]
public static TexStorageAttribs SurfaceCompressionFixedRate7BpcExt;
    [NativeNameAttribute("Name", "GL_SURFACE_COMPRESSION_FIXED_RATE_8BPC_EXT")]
public static TexStorageAttribs SurfaceCompressionFixedRate8BpcExt;
    [NativeNameAttribute("Name", "GL_SURFACE_COMPRESSION_FIXED_RATE_9BPC_EXT")]
public static TexStorageAttribs SurfaceCompressionFixedRate9BpcExt;
    [NativeNameAttribute("Name", "GL_SURFACE_COMPRESSION_FIXED_RATE_10BPC_EXT")]
public static TexStorageAttribs SurfaceCompressionFixedRate10BpcExt;
    [NativeNameAttribute("Name", "GL_SURFACE_COMPRESSION_FIXED_RATE_11BPC_EXT")]
public static TexStorageAttribs SurfaceCompressionFixedRate11BpcExt;
    [NativeNameAttribute("Name", "GL_SURFACE_COMPRESSION_FIXED_RATE_12BPC_EXT")]
public static TexStorageAttribs SurfaceCompressionFixedRate12BpcExt;
}
[NativeNameAttribute("Name", "TexStorageAttribss")]
public enum Silk.NET.OpenGL.TexStorageAttribss : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_SURFACE_COMPRESSION_FIXED_RATE_NONE_EXT")]
public static TexStorageAttribss SurfaceCompressionFixedRateNoneExt;
}
[NativeNameAttribute("Name", "texture")]
public class Silk.NET.OpenGL.Texture : ValueType {
    [NativeNameAttribute("Type", "")]
[NativeNameAttribute("Type.Name", "")]
[NativeNameAttribute("Name", "")]
public UInt32 Handle;
    public Texture(Nullable`1<UInt32> handle);
}
[NativeNameAttribute("Name", "TextureCompareMode")]
public enum Silk.NET.OpenGL.TextureCompareMode : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_NONE")]
public static TextureCompareMode None;
    [NativeNameAttribute("Name", "GL_COMPARE_REF_TO_TEXTURE")]
public static TextureCompareMode CompareRefToTexture;
}
[NativeNameAttribute("Name", "TextureCoordName")]
public enum Silk.NET.OpenGL.TextureCoordName : Enum {
    public int value__;
}
[NativeNameAttribute("Name", "TextureEnvMode")]
public enum Silk.NET.OpenGL.TextureEnvMode : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_BLEND")]
public static TextureEnvMode Blend;
    [NativeNameAttribute("Name", "GL_REPLACE_EXT")]
public static TextureEnvMode ReplaceExt;
    [NativeNameAttribute("Name", "GL_TEXTURE_ENV_BIAS_SGIX")]
public static TextureEnvMode TextureEnvBiasSgix;
}
[NativeNameAttribute("Name", "TextureEnvParameter")]
public enum Silk.NET.OpenGL.TextureEnvParameter : Enum {
    public int value__;
}
[NativeNameAttribute("Name", "TextureEnvTarget")]
public enum Silk.NET.OpenGL.TextureEnvTarget : Enum {
    public int value__;
}
[NativeNameAttribute("Name", "TextureFilterFuncSGIS")]
public enum Silk.NET.OpenGL.TextureFilterFuncSGIS : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_FILTER4_SGIS")]
public static TextureFilterFuncSGIS Filter4Sgis;
}
[NativeNameAttribute("Name", "TextureFilterSGIS")]
public enum Silk.NET.OpenGL.TextureFilterSGIS : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_FILTER4_SGIS")]
public static TextureFilterSGIS Filter4Sgis;
}
[NativeNameAttribute("Name", "TextureGenMode")]
public enum Silk.NET.OpenGL.TextureGenMode : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_EYE_DISTANCE_TO_POINT_SGIS")]
public static TextureGenMode EyeDistanceToPointSgis;
    [NativeNameAttribute("Name", "GL_OBJECT_DISTANCE_TO_POINT_SGIS")]
public static TextureGenMode ObjectDistanceToPointSgis;
    [NativeNameAttribute("Name", "GL_EYE_DISTANCE_TO_LINE_SGIS")]
public static TextureGenMode EyeDistanceToLineSgis;
    [NativeNameAttribute("Name", "GL_OBJECT_DISTANCE_TO_LINE_SGIS")]
public static TextureGenMode ObjectDistanceToLineSgis;
}
[NativeNameAttribute("Name", "TextureGenParameter")]
public enum Silk.NET.OpenGL.TextureGenParameter : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_EYE_POINT_SGIS")]
public static TextureGenParameter EyePointSgis;
    [NativeNameAttribute("Name", "GL_OBJECT_POINT_SGIS")]
public static TextureGenParameter ObjectPointSgis;
    [NativeNameAttribute("Name", "GL_EYE_LINE_SGIS")]
public static TextureGenParameter EyeLineSgis;
    [NativeNameAttribute("Name", "GL_OBJECT_LINE_SGIS")]
public static TextureGenParameter ObjectLineSgis;
}
[NativeNameAttribute("Name", "TextureLayout")]
public enum Silk.NET.OpenGL.TextureLayout : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_EXT")]
public static TextureLayout LayoutDepthReadOnlyStencilAttachmentExt;
    [NativeNameAttribute("Name", "GL_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_EXT")]
public static TextureLayout LayoutDepthAttachmentStencilReadOnlyExt;
    [NativeNameAttribute("Name", "GL_LAYOUT_GENERAL_EXT")]
public static TextureLayout LayoutGeneralExt;
    [NativeNameAttribute("Name", "GL_LAYOUT_COLOR_ATTACHMENT_EXT")]
public static TextureLayout LayoutColorAttachmentExt;
    [NativeNameAttribute("Name", "GL_LAYOUT_DEPTH_STENCIL_ATTACHMENT_EXT")]
public static TextureLayout LayoutDepthStencilAttachmentExt;
    [NativeNameAttribute("Name", "GL_LAYOUT_DEPTH_STENCIL_READ_ONLY_EXT")]
public static TextureLayout LayoutDepthStencilReadOnlyExt;
    [NativeNameAttribute("Name", "GL_LAYOUT_SHADER_READ_ONLY_EXT")]
public static TextureLayout LayoutShaderReadOnlyExt;
    [NativeNameAttribute("Name", "GL_LAYOUT_TRANSFER_SRC_EXT")]
public static TextureLayout LayoutTransferSrcExt;
    [NativeNameAttribute("Name", "GL_LAYOUT_TRANSFER_DST_EXT")]
public static TextureLayout LayoutTransferDstExt;
}
[NativeNameAttribute("Name", "TextureMagFilter")]
public enum Silk.NET.OpenGL.TextureMagFilter : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_NEAREST")]
public static TextureMagFilter Nearest;
    [NativeNameAttribute("Name", "GL_LINEAR")]
public static TextureMagFilter Linear;
    [NativeNameAttribute("Name", "GL_LINEAR_DETAIL_SGIS")]
public static TextureMagFilter LinearDetailSgis;
    [NativeNameAttribute("Name", "GL_LINEAR_DETAIL_ALPHA_SGIS")]
public static TextureMagFilter LinearDetailAlphaSgis;
    [NativeNameAttribute("Name", "GL_LINEAR_DETAIL_COLOR_SGIS")]
public static TextureMagFilter LinearDetailColorSgis;
    [NativeNameAttribute("Name", "GL_LINEAR_SHARPEN_SGIS")]
public static TextureMagFilter LinearSharpenSgis;
    [NativeNameAttribute("Name", "GL_LINEAR_SHARPEN_ALPHA_SGIS")]
public static TextureMagFilter LinearSharpenAlphaSgis;
    [NativeNameAttribute("Name", "GL_LINEAR_SHARPEN_COLOR_SGIS")]
public static TextureMagFilter LinearSharpenColorSgis;
    [NativeNameAttribute("Name", "GL_FILTER4_SGIS")]
public static TextureMagFilter Filter4Sgis;
    [NativeNameAttribute("Name", "GL_PIXEL_TEX_GEN_Q_CEILING_SGIX")]
public static TextureMagFilter PixelTexGenQCeilingSgix;
    [NativeNameAttribute("Name", "GL_PIXEL_TEX_GEN_Q_ROUND_SGIX")]
public static TextureMagFilter PixelTexGenQRoundSgix;
    [NativeNameAttribute("Name", "GL_PIXEL_TEX_GEN_Q_FLOOR_SGIX")]
public static TextureMagFilter PixelTexGenQFloorSgix;
}
[NativeNameAttribute("Name", "TextureMinFilter")]
public enum Silk.NET.OpenGL.TextureMinFilter : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_NEAREST")]
public static TextureMinFilter Nearest;
    [NativeNameAttribute("Name", "GL_LINEAR")]
public static TextureMinFilter Linear;
    [NativeNameAttribute("Name", "GL_NEAREST_MIPMAP_NEAREST")]
public static TextureMinFilter NearestMipmapNearest;
    [NativeNameAttribute("Name", "GL_LINEAR_MIPMAP_NEAREST")]
public static TextureMinFilter LinearMipmapNearest;
    [NativeNameAttribute("Name", "GL_NEAREST_MIPMAP_LINEAR")]
public static TextureMinFilter NearestMipmapLinear;
    [NativeNameAttribute("Name", "GL_LINEAR_MIPMAP_LINEAR")]
public static TextureMinFilter LinearMipmapLinear;
    [NativeNameAttribute("Name", "GL_FILTER4_SGIS")]
public static TextureMinFilter Filter4Sgis;
    [NativeNameAttribute("Name", "GL_LINEAR_CLIPMAP_LINEAR_SGIX")]
public static TextureMinFilter LinearClipmapLinearSgix;
    [NativeNameAttribute("Name", "GL_PIXEL_TEX_GEN_Q_CEILING_SGIX")]
public static TextureMinFilter PixelTexGenQCeilingSgix;
    [NativeNameAttribute("Name", "GL_PIXEL_TEX_GEN_Q_ROUND_SGIX")]
public static TextureMinFilter PixelTexGenQRoundSgix;
    [NativeNameAttribute("Name", "GL_PIXEL_TEX_GEN_Q_FLOOR_SGIX")]
public static TextureMinFilter PixelTexGenQFloorSgix;
    [NativeNameAttribute("Name", "GL_NEAREST_CLIPMAP_NEAREST_SGIX")]
public static TextureMinFilter NearestClipmapNearestSgix;
    [NativeNameAttribute("Name", "GL_NEAREST_CLIPMAP_LINEAR_SGIX")]
public static TextureMinFilter NearestClipmapLinearSgix;
    [NativeNameAttribute("Name", "GL_LINEAR_CLIPMAP_NEAREST_SGIX")]
public static TextureMinFilter LinearClipmapNearestSgix;
}
[NativeNameAttribute("Name", "TextureNormalModeEXT")]
public enum Silk.NET.OpenGL.TextureNormalModeEXT : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_PERTURB_EXT")]
public static TextureNormalModeEXT PerturbExt;
}
[NativeNameAttribute("Name", "TextureParameterName")]
public enum Silk.NET.OpenGL.TextureParameterName : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_TEXTURE_WIDTH")]
public static TextureParameterName TextureWidth;
    [NativeNameAttribute("Name", "GL_TEXTURE_HEIGHT")]
public static TextureParameterName TextureHeight;
    [NativeNameAttribute("Name", "GL_TEXTURE_INTERNAL_FORMAT")]
public static TextureParameterName TextureInternalFormat;
    [NativeNameAttribute("Name", "GL_TEXTURE_BORDER_COLOR")]
public static TextureParameterName TextureBorderColor;
    [NativeNameAttribute("Name", "GL_TEXTURE_BORDER_COLOR_NV")]
public static TextureParameterName TextureBorderColorNV;
    [NativeNameAttribute("Name", "GL_TEXTURE_MAG_FILTER")]
public static TextureParameterName TextureMagFilter;
    [NativeNameAttribute("Name", "GL_TEXTURE_MIN_FILTER")]
public static TextureParameterName TextureMinFilter;
    [NativeNameAttribute("Name", "GL_TEXTURE_WRAP_S")]
public static TextureParameterName TextureWrapS;
    [NativeNameAttribute("Name", "GL_TEXTURE_WRAP_T")]
public static TextureParameterName TextureWrapT;
    [NativeNameAttribute("Name", "GL_TEXTURE_RED_SIZE")]
public static TextureParameterName TextureRedSize;
    [NativeNameAttribute("Name", "GL_TEXTURE_GREEN_SIZE")]
public static TextureParameterName TextureGreenSize;
    [NativeNameAttribute("Name", "GL_TEXTURE_BLUE_SIZE")]
public static TextureParameterName TextureBlueSize;
    [NativeNameAttribute("Name", "GL_TEXTURE_ALPHA_SIZE")]
public static TextureParameterName TextureAlphaSize;
    [NativeNameAttribute("Name", "GL_TEXTURE_PRIORITY_EXT")]
public static TextureParameterName TexturePriorityExt;
    [NativeNameAttribute("Name", "GL_TEXTURE_DEPTH_EXT")]
public static TextureParameterName TextureDepthExt;
    [NativeNameAttribute("Name", "GL_TEXTURE_WRAP_R")]
public static TextureParameterName TextureWrapR;
    [NativeNameAttribute("Name", "GL_TEXTURE_WRAP_R_EXT")]
public static TextureParameterName TextureWrapRExt;
    [NativeNameAttribute("Name", "GL_TEXTURE_WRAP_R_OES")]
public static TextureParameterName TextureWrapROes;
    [NativeNameAttribute("Name", "GL_DETAIL_TEXTURE_LEVEL_SGIS")]
public static TextureParameterName DetailTextureLevelSgis;
    [NativeNameAttribute("Name", "GL_DETAIL_TEXTURE_MODE_SGIS")]
public static TextureParameterName DetailTextureModeSgis;
    [NativeNameAttribute("Name", "GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS")]
public static TextureParameterName DetailTextureFuncPointsSgis;
    [NativeNameAttribute("Name", "GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS")]
public static TextureParameterName SharpenTextureFuncPointsSgis;
    [NativeNameAttribute("Name", "GL_SHADOW_AMBIENT_SGIX")]
public static TextureParameterName ShadowAmbientSgix;
    [NativeNameAttribute("Name", "GL_DUAL_TEXTURE_SELECT_SGIS")]
public static TextureParameterName DualTextureSelectSgis;
    [NativeNameAttribute("Name", "GL_QUAD_TEXTURE_SELECT_SGIS")]
public static TextureParameterName QuadTextureSelectSgis;
    [NativeNameAttribute("Name", "GL_TEXTURE_4DSIZE_SGIS")]
public static TextureParameterName Texture4DsizeSgis;
    [NativeNameAttribute("Name", "GL_TEXTURE_WRAP_Q_SGIS")]
public static TextureParameterName TextureWrapQSgis;
    [NativeNameAttribute("Name", "GL_TEXTURE_MIN_LOD")]
public static TextureParameterName TextureMinLod;
    [NativeNameAttribute("Name", "GL_TEXTURE_MIN_LOD_SGIS")]
public static TextureParameterName TextureMinLodSgis;
    [NativeNameAttribute("Name", "GL_TEXTURE_MAX_LOD")]
public static TextureParameterName TextureMaxLod;
    [NativeNameAttribute("Name", "GL_TEXTURE_MAX_LOD_SGIS")]
public static TextureParameterName TextureMaxLodSgis;
    [NativeNameAttribute("Name", "GL_TEXTURE_BASE_LEVEL")]
public static TextureParameterName TextureBaseLevel;
    [NativeNameAttribute("Name", "GL_TEXTURE_BASE_LEVEL_SGIS")]
public static TextureParameterName TextureBaseLevelSgis;
    [NativeNameAttribute("Name", "GL_TEXTURE_MAX_LEVEL")]
public static TextureParameterName TextureMaxLevel;
    [NativeNameAttribute("Name", "GL_TEXTURE_MAX_LEVEL_SGIS")]
public static TextureParameterName TextureMaxLevelSgis;
    [NativeNameAttribute("Name", "GL_TEXTURE_FILTER4_SIZE_SGIS")]
public static TextureParameterName TextureFilter4SizeSgis;
    [NativeNameAttribute("Name", "GL_TEXTURE_CLIPMAP_CENTER_SGIX")]
public static TextureParameterName TextureClipmapCenterSgix;
    [NativeNameAttribute("Name", "GL_TEXTURE_CLIPMAP_FRAME_SGIX")]
public static TextureParameterName TextureClipmapFrameSgix;
    [NativeNameAttribute("Name", "GL_TEXTURE_CLIPMAP_OFFSET_SGIX")]
public static TextureParameterName TextureClipmapOffsetSgix;
    [NativeNameAttribute("Name", "GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX")]
public static TextureParameterName TextureClipmapVirtualDepthSgix;
    [NativeNameAttribute("Name", "GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX")]
public static TextureParameterName TextureClipmapLodOffsetSgix;
    [NativeNameAttribute("Name", "GL_TEXTURE_CLIPMAP_DEPTH_SGIX")]
public static TextureParameterName TextureClipmapDepthSgix;
    [NativeNameAttribute("Name", "GL_POST_TEXTURE_FILTER_BIAS_SGIX")]
public static TextureParameterName PostTextureFilterBiasSgix;
    [NativeNameAttribute("Name", "GL_POST_TEXTURE_FILTER_SCALE_SGIX")]
public static TextureParameterName PostTextureFilterScaleSgix;
    [NativeNameAttribute("Name", "GL_TEXTURE_LOD_BIAS_S_SGIX")]
public static TextureParameterName TextureLodBiasSSgix;
    [NativeNameAttribute("Name", "GL_TEXTURE_LOD_BIAS_T_SGIX")]
public static TextureParameterName TextureLodBiasTSgix;
    [NativeNameAttribute("Name", "GL_TEXTURE_LOD_BIAS_R_SGIX")]
public static TextureParameterName TextureLodBiasRSgix;
    [NativeNameAttribute("Name", "GL_GENERATE_MIPMAP_SGIS")]
public static TextureParameterName GenerateMipmapSgis;
    [NativeNameAttribute("Name", "GL_TEXTURE_COMPARE_SGIX")]
public static TextureParameterName TextureCompareSgix;
    [NativeNameAttribute("Name", "GL_TEXTURE_COMPARE_OPERATOR_SGIX")]
public static TextureParameterName TextureCompareOperatorSgix;
    [NativeNameAttribute("Name", "GL_TEXTURE_LEQUAL_R_SGIX")]
public static TextureParameterName TextureLequalRSgix;
    [NativeNameAttribute("Name", "GL_TEXTURE_GEQUAL_R_SGIX")]
public static TextureParameterName TextureGequalRSgix;
    [NativeNameAttribute("Name", "GL_TEXTURE_MAX_CLAMP_S_SGIX")]
public static TextureParameterName TextureMaxClampSSgix;
    [NativeNameAttribute("Name", "GL_TEXTURE_MAX_CLAMP_T_SGIX")]
public static TextureParameterName TextureMaxClampTSgix;
    [NativeNameAttribute("Name", "GL_TEXTURE_MAX_CLAMP_R_SGIX")]
public static TextureParameterName TextureMaxClampRSgix;
    [NativeNameAttribute("Name", "GL_TEXTURE_MAX_ANISOTROPY")]
public static TextureParameterName TextureMaxAnisotropy;
    [NativeNameAttribute("Name", "GL_TEXTURE_LOD_BIAS")]
public static TextureParameterName TextureLodBias;
    [NativeNameAttribute("Name", "GL_TEXTURE_COMPARE_MODE")]
public static TextureParameterName TextureCompareMode;
    [NativeNameAttribute("Name", "GL_TEXTURE_COMPARE_FUNC")]
public static TextureParameterName TextureCompareFunc;
    [NativeNameAttribute("Name", "GL_TEXTURE_SWIZZLE_R")]
public static TextureParameterName TextureSwizzleR;
    [NativeNameAttribute("Name", "GL_TEXTURE_SWIZZLE_G")]
public static TextureParameterName TextureSwizzleG;
    [NativeNameAttribute("Name", "GL_TEXTURE_SWIZZLE_B")]
public static TextureParameterName TextureSwizzleB;
    [NativeNameAttribute("Name", "GL_TEXTURE_SWIZZLE_A")]
public static TextureParameterName TextureSwizzleA;
    [NativeNameAttribute("Name", "GL_TEXTURE_SWIZZLE_RGBA")]
public static TextureParameterName TextureSwizzleRgba;
    [NativeNameAttribute("Name", "GL_TEXTURE_UNNORMALIZED_COORDINATES_ARM")]
public static TextureParameterName TextureUnnormalizedCoordinatesArm;
    [NativeNameAttribute("Name", "GL_DEPTH_STENCIL_TEXTURE_MODE")]
public static TextureParameterName DepthStencilTextureMode;
    [NativeNameAttribute("Name", "GL_TEXTURE_TILING_EXT")]
public static TextureParameterName TextureTilingExt;
    [NativeNameAttribute("Name", "GL_TEXTURE_FOVEATED_CUTOFF_DENSITY_QCOM")]
public static TextureParameterName TextureFoveatedCutoffDensityQCom;
}
[NativeNameAttribute("Name", "TextureStorageMaskAMD")]
public enum Silk.NET.OpenGL.TextureStorageMaskAMD : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_TEXTURE_STORAGE_SPARSE_BIT_AMD")]
public static TextureStorageMaskAMD TextureStorageSparseBitAmd;
}
[NativeNameAttribute("Name", "TextureSwizzle")]
public enum Silk.NET.OpenGL.TextureSwizzle : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_ZERO")]
public static TextureSwizzle Zero;
    [NativeNameAttribute("Name", "GL_ONE")]
public static TextureSwizzle One;
    [NativeNameAttribute("Name", "GL_RED")]
public static TextureSwizzle Red;
    [NativeNameAttribute("Name", "GL_GREEN")]
public static TextureSwizzle Green;
    [NativeNameAttribute("Name", "GL_BLUE")]
public static TextureSwizzle Blue;
    [NativeNameAttribute("Name", "GL_ALPHA")]
public static TextureSwizzle Alpha;
}
[NativeNameAttribute("Name", "TextureTarget")]
public enum Silk.NET.OpenGL.TextureTarget : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_TEXTURE_1D")]
public static TextureTarget Texture1D;
    [NativeNameAttribute("Name", "GL_TEXTURE_2D")]
public static TextureTarget Texture2D;
    [NativeNameAttribute("Name", "GL_PROXY_TEXTURE_1D")]
public static TextureTarget ProxyTexture1D;
    [NativeNameAttribute("Name", "GL_PROXY_TEXTURE_1D_EXT")]
public static TextureTarget ProxyTexture1DExt;
    [NativeNameAttribute("Name", "GL_PROXY_TEXTURE_2D")]
public static TextureTarget ProxyTexture2D;
    [NativeNameAttribute("Name", "GL_PROXY_TEXTURE_2D_EXT")]
public static TextureTarget ProxyTexture2DExt;
    [NativeNameAttribute("Name", "GL_TEXTURE_3D")]
public static TextureTarget Texture3D;
    [NativeNameAttribute("Name", "GL_TEXTURE_3D_EXT")]
public static TextureTarget Texture3DExt;
    [NativeNameAttribute("Name", "GL_TEXTURE_3D_OES")]
public static TextureTarget Texture3DOes;
    [NativeNameAttribute("Name", "GL_PROXY_TEXTURE_3D")]
public static TextureTarget ProxyTexture3D;
    [NativeNameAttribute("Name", "GL_PROXY_TEXTURE_3D_EXT")]
public static TextureTarget ProxyTexture3DExt;
    [NativeNameAttribute("Name", "GL_DETAIL_TEXTURE_2D_SGIS")]
public static TextureTarget DetailTexture2DSgis;
    [NativeNameAttribute("Name", "GL_TEXTURE_4D_SGIS")]
public static TextureTarget Texture4DSgis;
    [NativeNameAttribute("Name", "GL_PROXY_TEXTURE_4D_SGIS")]
public static TextureTarget ProxyTexture4DSgis;
    [NativeNameAttribute("Name", "GL_TEXTURE_RECTANGLE")]
public static TextureTarget TextureRectangle;
    [NativeNameAttribute("Name", "GL_TEXTURE_RECTANGLE_ARB")]
public static TextureTarget TextureRectangleArb;
    [NativeNameAttribute("Name", "GL_TEXTURE_RECTANGLE_NV")]
public static TextureTarget TextureRectangleNV;
    [NativeNameAttribute("Name", "GL_PROXY_TEXTURE_RECTANGLE")]
public static TextureTarget ProxyTextureRectangle;
    [NativeNameAttribute("Name", "GL_PROXY_TEXTURE_RECTANGLE_ARB")]
public static TextureTarget ProxyTextureRectangleArb;
    [NativeNameAttribute("Name", "GL_PROXY_TEXTURE_RECTANGLE_NV")]
public static TextureTarget ProxyTextureRectangleNV;
    [NativeNameAttribute("Name", "GL_TEXTURE_CUBE_MAP")]
public static TextureTarget TextureCubeMap;
    [NativeNameAttribute("Name", "GL_TEXTURE_CUBE_MAP_ARB")]
public static TextureTarget TextureCubeMapArb;
    [NativeNameAttribute("Name", "GL_TEXTURE_CUBE_MAP_EXT")]
public static TextureTarget TextureCubeMapExt;
    [NativeNameAttribute("Name", "GL_TEXTURE_CUBE_MAP_OES")]
public static TextureTarget TextureCubeMapOes;
    [NativeNameAttribute("Name", "GL_TEXTURE_CUBE_MAP_POSITIVE_X")]
public static TextureTarget TextureCubeMapPositiveX;
    [NativeNameAttribute("Name", "GL_TEXTURE_CUBE_MAP_NEGATIVE_X")]
public static TextureTarget TextureCubeMapNegativeX;
    [NativeNameAttribute("Name", "GL_TEXTURE_CUBE_MAP_POSITIVE_Y")]
public static TextureTarget TextureCubeMapPositiveY;
    [NativeNameAttribute("Name", "GL_TEXTURE_CUBE_MAP_NEGATIVE_Y")]
public static TextureTarget TextureCubeMapNegativeY;
    [NativeNameAttribute("Name", "GL_TEXTURE_CUBE_MAP_POSITIVE_Z")]
public static TextureTarget TextureCubeMapPositiveZ;
    [NativeNameAttribute("Name", "GL_TEXTURE_CUBE_MAP_NEGATIVE_Z")]
public static TextureTarget TextureCubeMapNegativeZ;
    [NativeNameAttribute("Name", "GL_PROXY_TEXTURE_CUBE_MAP")]
public static TextureTarget ProxyTextureCubeMap;
    [NativeNameAttribute("Name", "GL_PROXY_TEXTURE_CUBE_MAP_ARB")]
public static TextureTarget ProxyTextureCubeMapArb;
    [NativeNameAttribute("Name", "GL_PROXY_TEXTURE_CUBE_MAP_EXT")]
public static TextureTarget ProxyTextureCubeMapExt;
    [NativeNameAttribute("Name", "GL_TEXTURE_1D_ARRAY")]
public static TextureTarget Texture1DArray;
    [NativeNameAttribute("Name", "GL_PROXY_TEXTURE_1D_ARRAY")]
public static TextureTarget ProxyTexture1DArray;
    [NativeNameAttribute("Name", "GL_PROXY_TEXTURE_1D_ARRAY_EXT")]
public static TextureTarget ProxyTexture1DArrayExt;
    [NativeNameAttribute("Name", "GL_TEXTURE_2D_ARRAY")]
public static TextureTarget Texture2DArray;
    [NativeNameAttribute("Name", "GL_PROXY_TEXTURE_2D_ARRAY")]
public static TextureTarget ProxyTexture2DArray;
    [NativeNameAttribute("Name", "GL_PROXY_TEXTURE_2D_ARRAY_EXT")]
public static TextureTarget ProxyTexture2DArrayExt;
    [NativeNameAttribute("Name", "GL_TEXTURE_BUFFER")]
public static TextureTarget TextureBuffer;
    [NativeNameAttribute("Name", "GL_RENDERBUFFER")]
public static TextureTarget Renderbuffer;
    [NativeNameAttribute("Name", "GL_TEXTURE_CUBE_MAP_ARRAY")]
public static TextureTarget TextureCubeMapArray;
    [NativeNameAttribute("Name", "GL_TEXTURE_CUBE_MAP_ARRAY_ARB")]
public static TextureTarget TextureCubeMapArrayArb;
    [NativeNameAttribute("Name", "GL_TEXTURE_CUBE_MAP_ARRAY_EXT")]
public static TextureTarget TextureCubeMapArrayExt;
    [NativeNameAttribute("Name", "GL_TEXTURE_CUBE_MAP_ARRAY_OES")]
public static TextureTarget TextureCubeMapArrayOes;
    [NativeNameAttribute("Name", "GL_PROXY_TEXTURE_CUBE_MAP_ARRAY")]
public static TextureTarget ProxyTextureCubeMapArray;
    [NativeNameAttribute("Name", "GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB")]
public static TextureTarget ProxyTextureCubeMapArrayArb;
    [NativeNameAttribute("Name", "GL_TEXTURE_2D_MULTISAMPLE")]
public static TextureTarget Texture2DMultisample;
    [NativeNameAttribute("Name", "GL_PROXY_TEXTURE_2D_MULTISAMPLE")]
public static TextureTarget ProxyTexture2DMultisample;
    [NativeNameAttribute("Name", "GL_TEXTURE_2D_MULTISAMPLE_ARRAY")]
public static TextureTarget Texture2DMultisampleArray;
    [NativeNameAttribute("Name", "GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY")]
public static TextureTarget ProxyTexture2DMultisampleArray;
}
[NativeNameAttribute("Name", "TextureUnit")]
public enum Silk.NET.OpenGL.TextureUnit : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_TEXTURE0")]
public static TextureUnit Texture0;
    [NativeNameAttribute("Name", "GL_TEXTURE1")]
public static TextureUnit Texture1;
    [NativeNameAttribute("Name", "GL_TEXTURE2")]
public static TextureUnit Texture2;
    [NativeNameAttribute("Name", "GL_TEXTURE3")]
public static TextureUnit Texture3;
    [NativeNameAttribute("Name", "GL_TEXTURE4")]
public static TextureUnit Texture4;
    [NativeNameAttribute("Name", "GL_TEXTURE5")]
public static TextureUnit Texture5;
    [NativeNameAttribute("Name", "GL_TEXTURE6")]
public static TextureUnit Texture6;
    [NativeNameAttribute("Name", "GL_TEXTURE7")]
public static TextureUnit Texture7;
    [NativeNameAttribute("Name", "GL_TEXTURE8")]
public static TextureUnit Texture8;
    [NativeNameAttribute("Name", "GL_TEXTURE9")]
public static TextureUnit Texture9;
    [NativeNameAttribute("Name", "GL_TEXTURE10")]
public static TextureUnit Texture10;
    [NativeNameAttribute("Name", "GL_TEXTURE11")]
public static TextureUnit Texture11;
    [NativeNameAttribute("Name", "GL_TEXTURE12")]
public static TextureUnit Texture12;
    [NativeNameAttribute("Name", "GL_TEXTURE13")]
public static TextureUnit Texture13;
    [NativeNameAttribute("Name", "GL_TEXTURE14")]
public static TextureUnit Texture14;
    [NativeNameAttribute("Name", "GL_TEXTURE15")]
public static TextureUnit Texture15;
    [NativeNameAttribute("Name", "GL_TEXTURE16")]
public static TextureUnit Texture16;
    [NativeNameAttribute("Name", "GL_TEXTURE17")]
public static TextureUnit Texture17;
    [NativeNameAttribute("Name", "GL_TEXTURE18")]
public static TextureUnit Texture18;
    [NativeNameAttribute("Name", "GL_TEXTURE19")]
public static TextureUnit Texture19;
    [NativeNameAttribute("Name", "GL_TEXTURE20")]
public static TextureUnit Texture20;
    [NativeNameAttribute("Name", "GL_TEXTURE21")]
public static TextureUnit Texture21;
    [NativeNameAttribute("Name", "GL_TEXTURE22")]
public static TextureUnit Texture22;
    [NativeNameAttribute("Name", "GL_TEXTURE23")]
public static TextureUnit Texture23;
    [NativeNameAttribute("Name", "GL_TEXTURE24")]
public static TextureUnit Texture24;
    [NativeNameAttribute("Name", "GL_TEXTURE25")]
public static TextureUnit Texture25;
    [NativeNameAttribute("Name", "GL_TEXTURE26")]
public static TextureUnit Texture26;
    [NativeNameAttribute("Name", "GL_TEXTURE27")]
public static TextureUnit Texture27;
    [NativeNameAttribute("Name", "GL_TEXTURE28")]
public static TextureUnit Texture28;
    [NativeNameAttribute("Name", "GL_TEXTURE29")]
public static TextureUnit Texture29;
    [NativeNameAttribute("Name", "GL_TEXTURE30")]
public static TextureUnit Texture30;
    [NativeNameAttribute("Name", "GL_TEXTURE31")]
public static TextureUnit Texture31;
}
[NativeNameAttribute("Name", "TextureWrapMode")]
public enum Silk.NET.OpenGL.TextureWrapMode : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_LINEAR_MIPMAP_LINEAR")]
public static TextureWrapMode LinearMipmapLinear;
    [NativeNameAttribute("Name", "GL_REPEAT")]
public static TextureWrapMode Repeat;
    [NativeNameAttribute("Name", "GL_CLAMP_TO_BORDER")]
public static TextureWrapMode ClampToBorder;
    [NativeNameAttribute("Name", "GL_CLAMP_TO_BORDER_ARB")]
public static TextureWrapMode ClampToBorderArb;
    [NativeNameAttribute("Name", "GL_CLAMP_TO_BORDER_NV")]
public static TextureWrapMode ClampToBorderNV;
    [NativeNameAttribute("Name", "GL_CLAMP_TO_BORDER_SGIS")]
public static TextureWrapMode ClampToBorderSgis;
    [NativeNameAttribute("Name", "GL_CLAMP_TO_EDGE")]
public static TextureWrapMode ClampToEdge;
    [NativeNameAttribute("Name", "GL_CLAMP_TO_EDGE_SGIS")]
public static TextureWrapMode ClampToEdgeSgis;
    [NativeNameAttribute("Name", "GL_MIRRORED_REPEAT")]
public static TextureWrapMode MirroredRepeat;
}
[NativeNameAttribute("Name", "TraceMaskMESA")]
public enum Silk.NET.OpenGL.TraceMaskMESA : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_TRACE_OPERATIONS_BIT_MESA")]
public static TraceMaskMESA TraceOperationsBitMesa;
    [NativeNameAttribute("Name", "GL_TRACE_PRIMITIVES_BIT_MESA")]
public static TraceMaskMESA TracePrimitivesBitMesa;
    [NativeNameAttribute("Name", "GL_TRACE_ARRAYS_BIT_MESA")]
public static TraceMaskMESA TraceArraysBitMesa;
    [NativeNameAttribute("Name", "GL_TRACE_TEXTURES_BIT_MESA")]
public static TraceMaskMESA TraceTexturesBitMesa;
    [NativeNameAttribute("Name", "GL_TRACE_PIXELS_BIT_MESA")]
public static TraceMaskMESA TracePixelsBitMesa;
    [NativeNameAttribute("Name", "GL_TRACE_ERRORS_BIT_MESA")]
public static TraceMaskMESA TraceErrorsBitMesa;
    [NativeNameAttribute("Name", "GL_TRACE_ALL_BITS_MESA")]
public static TraceMaskMESA TraceAllBitsMesa;
}
[NativeNameAttribute("Name", "transform feedback")]
public class Silk.NET.OpenGL.TransformFeedback : ValueType {
    [NativeNameAttribute("Type", "")]
[NativeNameAttribute("Type.Name", "")]
[NativeNameAttribute("Name", "")]
public UInt32 Handle;
    public TransformFeedback(Nullable`1<UInt32> handle);
}
[NativeNameAttribute("Name", "TransformFeedbackBufferMode")]
public enum Silk.NET.OpenGL.TransformFeedbackBufferMode : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_INTERLEAVED_ATTRIBS")]
public static TransformFeedbackBufferMode InterleavedAttribs;
    [NativeNameAttribute("Name", "GL_SEPARATE_ATTRIBS")]
public static TransformFeedbackBufferMode SeparateAttribs;
}
[NativeNameAttribute("Name", "TransformFeedbackPName")]
public enum Silk.NET.OpenGL.TransformFeedbackPName : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_TRANSFORM_FEEDBACK_BUFFER_START")]
public static TransformFeedbackPName TransformFeedbackBufferStart;
    [NativeNameAttribute("Name", "GL_TRANSFORM_FEEDBACK_BUFFER_SIZE")]
public static TransformFeedbackPName TransformFeedbackBufferSize;
    [NativeNameAttribute("Name", "GL_TRANSFORM_FEEDBACK_BUFFER_BINDING")]
public static TransformFeedbackPName TransformFeedbackBufferBinding;
    [NativeNameAttribute("Name", "GL_TRANSFORM_FEEDBACK_PAUSED")]
public static TransformFeedbackPName TransformFeedbackPaused;
    [NativeNameAttribute("Name", "GL_TRANSFORM_FEEDBACK_ACTIVE")]
public static TransformFeedbackPName TransformFeedbackActive;
}
[NativeNameAttribute("Name", "TransformFeedbackTokenNV")]
public enum Silk.NET.OpenGL.TransformFeedbackTokenNV : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_NEXT_BUFFER_NV")]
public static TransformFeedbackTokenNV NextBufferNV;
    [NativeNameAttribute("Name", "GL_SKIP_COMPONENTS4_NV")]
public static TransformFeedbackTokenNV SkipComponents4NV;
    [NativeNameAttribute("Name", "GL_SKIP_COMPONENTS3_NV")]
public static TransformFeedbackTokenNV SkipComponents3NV;
    [NativeNameAttribute("Name", "GL_SKIP_COMPONENTS2_NV")]
public static TransformFeedbackTokenNV SkipComponents2NV;
    [NativeNameAttribute("Name", "GL_SKIP_COMPONENTS1_NV")]
public static TransformFeedbackTokenNV SkipComponents1NV;
}
[NativeNameAttribute("Name", "TriangleListSUN")]
public enum Silk.NET.OpenGL.TriangleListSUN : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_RESTART_SUN")]
public static TriangleListSUN RestartSun;
    [NativeNameAttribute("Name", "GL_REPLACE_MIDDLE_SUN")]
public static TriangleListSUN ReplaceMiddleSun;
    [NativeNameAttribute("Name", "GL_REPLACE_OLDEST_SUN")]
public static TriangleListSUN ReplaceOldestSun;
}
[NativeNameAttribute("Name", "UniformBlockPName")]
public enum Silk.NET.OpenGL.UniformBlockPName : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER")]
public static UniformBlockPName UniformBlockReferencedByTessControlShader;
    [NativeNameAttribute("Name", "GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER")]
public static UniformBlockPName UniformBlockReferencedByTessEvaluationShader;
    [NativeNameAttribute("Name", "GL_UNIFORM_BLOCK_BINDING")]
public static UniformBlockPName UniformBlockBinding;
    [NativeNameAttribute("Name", "GL_UNIFORM_BLOCK_DATA_SIZE")]
public static UniformBlockPName UniformBlockDataSize;
    [NativeNameAttribute("Name", "GL_UNIFORM_BLOCK_NAME_LENGTH")]
public static UniformBlockPName UniformBlockNameLength;
    [NativeNameAttribute("Name", "GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS")]
public static UniformBlockPName UniformBlockActiveUniforms;
    [NativeNameAttribute("Name", "GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES")]
public static UniformBlockPName UniformBlockActiveUniformIndices;
    [NativeNameAttribute("Name", "GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER")]
public static UniformBlockPName UniformBlockReferencedByVertexShader;
    [NativeNameAttribute("Name", "GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER")]
public static UniformBlockPName UniformBlockReferencedByGeometryShader;
    [NativeNameAttribute("Name", "GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER")]
public static UniformBlockPName UniformBlockReferencedByFragmentShader;
    [NativeNameAttribute("Name", "GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER")]
public static UniformBlockPName UniformBlockReferencedByComputeShader;
}
[NativeNameAttribute("Name", "UniformPName")]
public enum Silk.NET.OpenGL.UniformPName : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_UNIFORM_TYPE")]
public static UniformPName UniformType;
    [NativeNameAttribute("Name", "GL_UNIFORM_SIZE")]
public static UniformPName UniformSize;
    [NativeNameAttribute("Name", "GL_UNIFORM_NAME_LENGTH")]
public static UniformPName UniformNameLength;
    [NativeNameAttribute("Name", "GL_UNIFORM_BLOCK_INDEX")]
public static UniformPName UniformBlockIndex;
    [NativeNameAttribute("Name", "GL_UNIFORM_OFFSET")]
public static UniformPName UniformOffset;
    [NativeNameAttribute("Name", "GL_UNIFORM_ARRAY_STRIDE")]
public static UniformPName UniformArrayStride;
    [NativeNameAttribute("Name", "GL_UNIFORM_MATRIX_STRIDE")]
public static UniformPName UniformMatrixStride;
    [NativeNameAttribute("Name", "GL_UNIFORM_IS_ROW_MAJOR")]
public static UniformPName UniformIsRowMajor;
    [NativeNameAttribute("Name", "GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX")]
public static UniformPName UniformAtomicCounterBufferIndex;
}
[NativeNameAttribute("Name", "UniformType")]
public enum Silk.NET.OpenGL.UniformType : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_INT")]
public static UniformType Int;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT")]
public static UniformType UnsignedInt;
    [NativeNameAttribute("Name", "GL_FLOAT")]
public static UniformType Float;
    [NativeNameAttribute("Name", "GL_DOUBLE")]
public static UniformType Double;
    [NativeNameAttribute("Name", "GL_FLOAT_VEC2")]
public static UniformType FloatVec2;
    [NativeNameAttribute("Name", "GL_FLOAT_VEC3")]
public static UniformType FloatVec3;
    [NativeNameAttribute("Name", "GL_FLOAT_VEC4")]
public static UniformType FloatVec4;
    [NativeNameAttribute("Name", "GL_INT_VEC2")]
public static UniformType IntVec2;
    [NativeNameAttribute("Name", "GL_INT_VEC3")]
public static UniformType IntVec3;
    [NativeNameAttribute("Name", "GL_INT_VEC4")]
public static UniformType IntVec4;
    [NativeNameAttribute("Name", "GL_BOOL")]
public static UniformType Bool;
    [NativeNameAttribute("Name", "GL_BOOL_VEC2")]
public static UniformType BoolVec2;
    [NativeNameAttribute("Name", "GL_BOOL_VEC3")]
public static UniformType BoolVec3;
    [NativeNameAttribute("Name", "GL_BOOL_VEC4")]
public static UniformType BoolVec4;
    [NativeNameAttribute("Name", "GL_FLOAT_MAT2")]
public static UniformType FloatMat2;
    [NativeNameAttribute("Name", "GL_FLOAT_MAT3")]
public static UniformType FloatMat3;
    [NativeNameAttribute("Name", "GL_FLOAT_MAT4")]
public static UniformType FloatMat4;
    [NativeNameAttribute("Name", "GL_SAMPLER_1D")]
public static UniformType Sampler1D;
    [NativeNameAttribute("Name", "GL_SAMPLER_2D")]
public static UniformType Sampler2D;
    [NativeNameAttribute("Name", "GL_SAMPLER_3D")]
public static UniformType Sampler3D;
    [NativeNameAttribute("Name", "GL_SAMPLER_CUBE")]
public static UniformType SamplerCube;
    [NativeNameAttribute("Name", "GL_SAMPLER_1D_SHADOW")]
public static UniformType Sampler1DShadow;
    [NativeNameAttribute("Name", "GL_SAMPLER_2D_SHADOW")]
public static UniformType Sampler2DShadow;
    [NativeNameAttribute("Name", "GL_SAMPLER_2D_RECT")]
public static UniformType Sampler2DRect;
    [NativeNameAttribute("Name", "GL_SAMPLER_2D_RECT_SHADOW")]
public static UniformType Sampler2DRectShadow;
    [NativeNameAttribute("Name", "GL_FLOAT_MAT2x3")]
public static UniformType FloatMat2x3;
    [NativeNameAttribute("Name", "GL_FLOAT_MAT2x4")]
public static UniformType FloatMat2x4;
    [NativeNameAttribute("Name", "GL_FLOAT_MAT3x2")]
public static UniformType FloatMat3x2;
    [NativeNameAttribute("Name", "GL_FLOAT_MAT3x4")]
public static UniformType FloatMat3x4;
    [NativeNameAttribute("Name", "GL_FLOAT_MAT4x2")]
public static UniformType FloatMat4x2;
    [NativeNameAttribute("Name", "GL_FLOAT_MAT4x3")]
public static UniformType FloatMat4x3;
    [NativeNameAttribute("Name", "GL_SAMPLER_1D_ARRAY")]
public static UniformType Sampler1DArray;
    [NativeNameAttribute("Name", "GL_SAMPLER_2D_ARRAY")]
public static UniformType Sampler2DArray;
    [NativeNameAttribute("Name", "GL_SAMPLER_BUFFER")]
public static UniformType SamplerBuffer;
    [NativeNameAttribute("Name", "GL_SAMPLER_1D_ARRAY_SHADOW")]
public static UniformType Sampler1DArrayShadow;
    [NativeNameAttribute("Name", "GL_SAMPLER_2D_ARRAY_SHADOW")]
public static UniformType Sampler2DArrayShadow;
    [NativeNameAttribute("Name", "GL_SAMPLER_CUBE_SHADOW")]
public static UniformType SamplerCubeShadow;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_VEC2")]
public static UniformType UnsignedIntVec2;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_VEC3")]
public static UniformType UnsignedIntVec3;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_VEC4")]
public static UniformType UnsignedIntVec4;
    [NativeNameAttribute("Name", "GL_INT_SAMPLER_1D")]
public static UniformType IntSampler1D;
    [NativeNameAttribute("Name", "GL_INT_SAMPLER_2D")]
public static UniformType IntSampler2D;
    [NativeNameAttribute("Name", "GL_INT_SAMPLER_3D")]
public static UniformType IntSampler3D;
    [NativeNameAttribute("Name", "GL_INT_SAMPLER_CUBE")]
public static UniformType IntSamplerCube;
    [NativeNameAttribute("Name", "GL_INT_SAMPLER_2D_RECT")]
public static UniformType IntSampler2DRect;
    [NativeNameAttribute("Name", "GL_INT_SAMPLER_1D_ARRAY")]
public static UniformType IntSampler1DArray;
    [NativeNameAttribute("Name", "GL_INT_SAMPLER_2D_ARRAY")]
public static UniformType IntSampler2DArray;
    [NativeNameAttribute("Name", "GL_INT_SAMPLER_BUFFER")]
public static UniformType IntSamplerBuffer;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_SAMPLER_1D")]
public static UniformType UnsignedIntSampler1D;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_SAMPLER_2D")]
public static UniformType UnsignedIntSampler2D;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_SAMPLER_3D")]
public static UniformType UnsignedIntSampler3D;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_SAMPLER_CUBE")]
public static UniformType UnsignedIntSamplerCube;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_SAMPLER_2D_RECT")]
public static UniformType UnsignedIntSampler2DRect;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_SAMPLER_1D_ARRAY")]
public static UniformType UnsignedIntSampler1DArray;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_SAMPLER_2D_ARRAY")]
public static UniformType UnsignedIntSampler2DArray;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_SAMPLER_BUFFER")]
public static UniformType UnsignedIntSamplerBuffer;
    [NativeNameAttribute("Name", "GL_DOUBLE_MAT2")]
public static UniformType DoubleMat2;
    [NativeNameAttribute("Name", "GL_DOUBLE_MAT3")]
public static UniformType DoubleMat3;
    [NativeNameAttribute("Name", "GL_DOUBLE_MAT4")]
public static UniformType DoubleMat4;
    [NativeNameAttribute("Name", "GL_DOUBLE_MAT2x3")]
public static UniformType DoubleMat2x3;
    [NativeNameAttribute("Name", "GL_DOUBLE_MAT2x4")]
public static UniformType DoubleMat2x4;
    [NativeNameAttribute("Name", "GL_DOUBLE_MAT3x2")]
public static UniformType DoubleMat3x2;
    [NativeNameAttribute("Name", "GL_DOUBLE_MAT3x4")]
public static UniformType DoubleMat3x4;
    [NativeNameAttribute("Name", "GL_DOUBLE_MAT4x2")]
public static UniformType DoubleMat4x2;
    [NativeNameAttribute("Name", "GL_DOUBLE_MAT4x3")]
public static UniformType DoubleMat4x3;
    [NativeNameAttribute("Name", "GL_DOUBLE_VEC2")]
public static UniformType DoubleVec2;
    [NativeNameAttribute("Name", "GL_DOUBLE_VEC3")]
public static UniformType DoubleVec3;
    [NativeNameAttribute("Name", "GL_DOUBLE_VEC4")]
public static UniformType DoubleVec4;
    [NativeNameAttribute("Name", "GL_SAMPLER_CUBE_MAP_ARRAY")]
public static UniformType SamplerCubeMapArray;
    [NativeNameAttribute("Name", "GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW")]
public static UniformType SamplerCubeMapArrayShadow;
    [NativeNameAttribute("Name", "GL_INT_SAMPLER_CUBE_MAP_ARRAY")]
public static UniformType IntSamplerCubeMapArray;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY")]
public static UniformType UnsignedIntSamplerCubeMapArray;
    [NativeNameAttribute("Name", "GL_SAMPLER_2D_MULTISAMPLE")]
public static UniformType Sampler2DMultisample;
    [NativeNameAttribute("Name", "GL_INT_SAMPLER_2D_MULTISAMPLE")]
public static UniformType IntSampler2DMultisample;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE")]
public static UniformType UnsignedIntSampler2DMultisample;
    [NativeNameAttribute("Name", "GL_SAMPLER_2D_MULTISAMPLE_ARRAY")]
public static UniformType Sampler2DMultisampleArray;
    [NativeNameAttribute("Name", "GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY")]
public static UniformType IntSampler2DMultisampleArray;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY")]
public static UniformType UnsignedIntSampler2DMultisampleArray;
}
[NativeNameAttribute("Name", "UseProgramStageMask")]
public enum Silk.NET.OpenGL.UseProgramStageMask : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_VERTEX_SHADER_BIT")]
public static UseProgramStageMask VertexShaderBit;
    [NativeNameAttribute("Name", "GL_VERTEX_SHADER_BIT_EXT")]
public static UseProgramStageMask VertexShaderBitExt;
    [NativeNameAttribute("Name", "GL_FRAGMENT_SHADER_BIT")]
public static UseProgramStageMask FragmentShaderBit;
    [NativeNameAttribute("Name", "GL_FRAGMENT_SHADER_BIT_EXT")]
public static UseProgramStageMask FragmentShaderBitExt;
    [NativeNameAttribute("Name", "GL_GEOMETRY_SHADER_BIT")]
public static UseProgramStageMask GeometryShaderBit;
    [NativeNameAttribute("Name", "GL_GEOMETRY_SHADER_BIT_EXT")]
public static UseProgramStageMask GeometryShaderBitExt;
    [NativeNameAttribute("Name", "GL_GEOMETRY_SHADER_BIT_OES")]
public static UseProgramStageMask GeometryShaderBitOes;
    [NativeNameAttribute("Name", "GL_TESS_CONTROL_SHADER_BIT")]
public static UseProgramStageMask TessControlShaderBit;
    [NativeNameAttribute("Name", "GL_TESS_CONTROL_SHADER_BIT_EXT")]
public static UseProgramStageMask TessControlShaderBitExt;
    [NativeNameAttribute("Name", "GL_TESS_CONTROL_SHADER_BIT_OES")]
public static UseProgramStageMask TessControlShaderBitOes;
    [NativeNameAttribute("Name", "GL_TESS_EVALUATION_SHADER_BIT")]
public static UseProgramStageMask TessEvaluationShaderBit;
    [NativeNameAttribute("Name", "GL_TESS_EVALUATION_SHADER_BIT_EXT")]
public static UseProgramStageMask TessEvaluationShaderBitExt;
    [NativeNameAttribute("Name", "GL_TESS_EVALUATION_SHADER_BIT_OES")]
public static UseProgramStageMask TessEvaluationShaderBitOes;
    [NativeNameAttribute("Name", "GL_COMPUTE_SHADER_BIT")]
public static UseProgramStageMask ComputeShaderBit;
    [NativeNameAttribute("Name", "GL_MESH_SHADER_BIT_NV")]
public static UseProgramStageMask MeshShaderBitNV;
    [NativeNameAttribute("Name", "GL_TASK_SHADER_BIT_NV")]
public static UseProgramStageMask TaskShaderBitNV;
    [NativeNameAttribute("Name", "GL_ALL_SHADER_BITS")]
public static UseProgramStageMask AllShaderBits;
    [NativeNameAttribute("Name", "GL_ALL_SHADER_BITS_EXT")]
public static UseProgramStageMask AllShaderBitsExt;
}
[NativeNameAttribute("Name", "VariantCapEXT")]
public enum Silk.NET.OpenGL.VariantCapEXT : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_VARIANT_ARRAY_EXT")]
public static VariantCapEXT VariantArrayExt;
}
[NativeNameAttribute("Name", "vertex array")]
public class Silk.NET.OpenGL.VertexArray : ValueType {
    [NativeNameAttribute("Type", "")]
[NativeNameAttribute("Type.Name", "")]
[NativeNameAttribute("Name", "")]
public UInt32 Handle;
    public VertexArray(Nullable`1<UInt32> handle);
}
[NativeNameAttribute("Name", "VertexArrayPName")]
public enum Silk.NET.OpenGL.VertexArrayPName : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_VERTEX_ATTRIB_RELATIVE_OFFSET")]
public static VertexArrayPName VertexAttribRelativeOffset;
    [NativeNameAttribute("Name", "GL_VERTEX_ATTRIB_ARRAY_ENABLED")]
public static VertexArrayPName VertexAttribArrayEnabled;
    [NativeNameAttribute("Name", "GL_VERTEX_ATTRIB_ARRAY_SIZE")]
public static VertexArrayPName VertexAttribArraySize;
    [NativeNameAttribute("Name", "GL_VERTEX_ATTRIB_ARRAY_STRIDE")]
public static VertexArrayPName VertexAttribArrayStride;
    [NativeNameAttribute("Name", "GL_VERTEX_ATTRIB_ARRAY_TYPE")]
public static VertexArrayPName VertexAttribArrayType;
    [NativeNameAttribute("Name", "GL_VERTEX_ATTRIB_ARRAY_LONG")]
public static VertexArrayPName VertexAttribArrayLong;
    [NativeNameAttribute("Name", "GL_VERTEX_ATTRIB_ARRAY_NORMALIZED")]
public static VertexArrayPName VertexAttribArrayNormalized;
    [NativeNameAttribute("Name", "GL_VERTEX_ATTRIB_ARRAY_INTEGER")]
public static VertexArrayPName VertexAttribArrayInteger;
    [NativeNameAttribute("Name", "GL_VERTEX_ATTRIB_ARRAY_DIVISOR")]
public static VertexArrayPName VertexAttribArrayDivisor;
}
[NativeNameAttribute("Name", "VertexArrayPNameAPPLE")]
public enum Silk.NET.OpenGL.VertexArrayPNameAPPLE : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_STORAGE_CLIENT_APPLE")]
public static VertexArrayPNameAPPLE StorageClientApple;
    [NativeNameAttribute("Name", "GL_STORAGE_CACHED_APPLE")]
public static VertexArrayPNameAPPLE StorageCachedApple;
    [NativeNameAttribute("Name", "GL_STORAGE_SHARED_APPLE")]
public static VertexArrayPNameAPPLE StorageSharedApple;
}
[NativeNameAttribute("Name", "VertexAttribEnum")]
public enum Silk.NET.OpenGL.VertexAttribEnum : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_VERTEX_ATTRIB_ARRAY_ENABLED")]
public static VertexAttribEnum VertexAttribArrayEnabled;
    [NativeNameAttribute("Name", "GL_VERTEX_ATTRIB_ARRAY_SIZE")]
public static VertexAttribEnum VertexAttribArraySize;
    [NativeNameAttribute("Name", "GL_VERTEX_ATTRIB_ARRAY_STRIDE")]
public static VertexAttribEnum VertexAttribArrayStride;
    [NativeNameAttribute("Name", "GL_VERTEX_ATTRIB_ARRAY_TYPE")]
public static VertexAttribEnum VertexAttribArrayType;
    [NativeNameAttribute("Name", "GL_CURRENT_VERTEX_ATTRIB")]
public static VertexAttribEnum CurrentVertexAttrib;
    [NativeNameAttribute("Name", "GL_VERTEX_ATTRIB_ARRAY_NORMALIZED")]
public static VertexAttribEnum VertexAttribArrayNormalized;
    [NativeNameAttribute("Name", "GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING")]
public static VertexAttribEnum VertexAttribArrayBufferBinding;
    [NativeNameAttribute("Name", "GL_VERTEX_ATTRIB_ARRAY_INTEGER")]
public static VertexAttribEnum VertexAttribArrayInteger;
    [NativeNameAttribute("Name", "GL_VERTEX_ATTRIB_ARRAY_DIVISOR")]
public static VertexAttribEnum VertexAttribArrayDivisor;
}
[NativeNameAttribute("Name", "VertexAttribEnumNV")]
public enum Silk.NET.OpenGL.VertexAttribEnumNV : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_PROGRAM_PARAMETER_NV")]
public static VertexAttribEnumNV ProgramParameterNV;
}
[NativeNameAttribute("Name", "VertexAttribIType")]
public enum Silk.NET.OpenGL.VertexAttribIType : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_BYTE")]
public static VertexAttribIType Byte;
    [NativeNameAttribute("Name", "GL_UNSIGNED_BYTE")]
public static VertexAttribIType UnsignedByte;
    [NativeNameAttribute("Name", "GL_SHORT")]
public static VertexAttribIType Short;
    [NativeNameAttribute("Name", "GL_UNSIGNED_SHORT")]
public static VertexAttribIType UnsignedShort;
    [NativeNameAttribute("Name", "GL_INT")]
public static VertexAttribIType Int;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT")]
public static VertexAttribIType UnsignedInt;
}
[NativeNameAttribute("Name", "VertexAttribLType")]
public enum Silk.NET.OpenGL.VertexAttribLType : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_DOUBLE")]
public static VertexAttribLType Double;
}
[NativeNameAttribute("Name", "VertexAttribPointerPropertyARB")]
public enum Silk.NET.OpenGL.VertexAttribPointerPropertyARB : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_VERTEX_ATTRIB_ARRAY_POINTER")]
public static VertexAttribPointerPropertyARB VertexAttribArrayPointer;
    [NativeNameAttribute("Name", "GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB")]
public static VertexAttribPointerPropertyARB VertexAttribArrayPointerArb;
}
[NativeNameAttribute("Name", "VertexAttribPointerType")]
public enum Silk.NET.OpenGL.VertexAttribPointerType : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_BYTE")]
public static VertexAttribPointerType Byte;
    [NativeNameAttribute("Name", "GL_UNSIGNED_BYTE")]
public static VertexAttribPointerType UnsignedByte;
    [NativeNameAttribute("Name", "GL_SHORT")]
public static VertexAttribPointerType Short;
    [NativeNameAttribute("Name", "GL_UNSIGNED_SHORT")]
public static VertexAttribPointerType UnsignedShort;
    [NativeNameAttribute("Name", "GL_INT")]
public static VertexAttribPointerType Int;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT")]
public static VertexAttribPointerType UnsignedInt;
    [NativeNameAttribute("Name", "GL_FLOAT")]
public static VertexAttribPointerType Float;
    [NativeNameAttribute("Name", "GL_DOUBLE")]
public static VertexAttribPointerType Double;
    [NativeNameAttribute("Name", "GL_HALF_FLOAT")]
public static VertexAttribPointerType HalfFloat;
    [NativeNameAttribute("Name", "GL_FIXED")]
public static VertexAttribPointerType Fixed;
    [NativeNameAttribute("Name", "GL_INT64_ARB")]
public static VertexAttribPointerType Int64Arb;
    [NativeNameAttribute("Name", "GL_INT64_NV")]
public static VertexAttribPointerType Int64NV;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT64_ARB")]
public static VertexAttribPointerType UnsignedInt64Arb;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT64_NV")]
public static VertexAttribPointerType UnsignedInt64NV;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_2_10_10_10_REV")]
public static VertexAttribPointerType UnsignedInt2101010Rev;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_10F_11F_11F_REV")]
public static VertexAttribPointerType UnsignedInt10f11f11fRev;
    [NativeNameAttribute("Name", "GL_INT_2_10_10_10_REV")]
public static VertexAttribPointerType Int2101010Rev;
}
[NativeNameAttribute("Name", "VertexAttribPropertyARB")]
public enum Silk.NET.OpenGL.VertexAttribPropertyARB : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_VERTEX_ATTRIB_BINDING")]
public static VertexAttribPropertyARB VertexAttribBinding;
    [NativeNameAttribute("Name", "GL_VERTEX_ATTRIB_RELATIVE_OFFSET")]
public static VertexAttribPropertyARB VertexAttribRelativeOffset;
    [NativeNameAttribute("Name", "GL_VERTEX_ATTRIB_ARRAY_ENABLED")]
public static VertexAttribPropertyARB VertexAttribArrayEnabled;
    [NativeNameAttribute("Name", "GL_VERTEX_ATTRIB_ARRAY_SIZE")]
public static VertexAttribPropertyARB VertexAttribArraySize;
    [NativeNameAttribute("Name", "GL_VERTEX_ATTRIB_ARRAY_STRIDE")]
public static VertexAttribPropertyARB VertexAttribArrayStride;
    [NativeNameAttribute("Name", "GL_VERTEX_ATTRIB_ARRAY_TYPE")]
public static VertexAttribPropertyARB VertexAttribArrayType;
    [NativeNameAttribute("Name", "GL_CURRENT_VERTEX_ATTRIB")]
public static VertexAttribPropertyARB CurrentVertexAttrib;
    [NativeNameAttribute("Name", "GL_VERTEX_ATTRIB_ARRAY_LONG")]
public static VertexAttribPropertyARB VertexAttribArrayLong;
    [NativeNameAttribute("Name", "GL_VERTEX_ATTRIB_ARRAY_NORMALIZED")]
public static VertexAttribPropertyARB VertexAttribArrayNormalized;
    [NativeNameAttribute("Name", "GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING")]
public static VertexAttribPropertyARB VertexAttribArrayBufferBinding;
    [NativeNameAttribute("Name", "GL_VERTEX_ATTRIB_ARRAY_INTEGER")]
public static VertexAttribPropertyARB VertexAttribArrayInteger;
    [NativeNameAttribute("Name", "GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT")]
public static VertexAttribPropertyARB VertexAttribArrayIntegerExt;
    [NativeNameAttribute("Name", "GL_VERTEX_ATTRIB_ARRAY_DIVISOR")]
public static VertexAttribPropertyARB VertexAttribArrayDivisor;
}
[NativeNameAttribute("Name", "VertexAttribType")]
public enum Silk.NET.OpenGL.VertexAttribType : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_BYTE")]
public static VertexAttribType Byte;
    [NativeNameAttribute("Name", "GL_UNSIGNED_BYTE")]
public static VertexAttribType UnsignedByte;
    [NativeNameAttribute("Name", "GL_SHORT")]
public static VertexAttribType Short;
    [NativeNameAttribute("Name", "GL_UNSIGNED_SHORT")]
public static VertexAttribType UnsignedShort;
    [NativeNameAttribute("Name", "GL_INT")]
public static VertexAttribType Int;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT")]
public static VertexAttribType UnsignedInt;
    [NativeNameAttribute("Name", "GL_FLOAT")]
public static VertexAttribType Float;
    [NativeNameAttribute("Name", "GL_DOUBLE")]
public static VertexAttribType Double;
    [NativeNameAttribute("Name", "GL_HALF_FLOAT")]
public static VertexAttribType HalfFloat;
    [NativeNameAttribute("Name", "GL_FIXED")]
public static VertexAttribType Fixed;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_2_10_10_10_REV")]
public static VertexAttribType UnsignedInt2101010Rev;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT_10F_11F_11F_REV")]
public static VertexAttribType UnsignedInt10f11f11fRev;
    [NativeNameAttribute("Name", "GL_INT_2_10_10_10_REV")]
public static VertexAttribType Int2101010Rev;
}
[NativeNameAttribute("Name", "VertexBufferObjectParameter")]
public enum Silk.NET.OpenGL.VertexBufferObjectParameter : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_BUFFER_IMMUTABLE_STORAGE")]
public static VertexBufferObjectParameter BufferImmutableStorage;
    [NativeNameAttribute("Name", "GL_BUFFER_STORAGE_FLAGS")]
public static VertexBufferObjectParameter BufferStorageFlags;
    [NativeNameAttribute("Name", "GL_BUFFER_SIZE")]
public static VertexBufferObjectParameter BufferSize;
    [NativeNameAttribute("Name", "GL_BUFFER_USAGE")]
public static VertexBufferObjectParameter BufferUsage;
    [NativeNameAttribute("Name", "GL_BUFFER_ACCESS")]
public static VertexBufferObjectParameter BufferAccess;
    [NativeNameAttribute("Name", "GL_BUFFER_MAPPED")]
public static VertexBufferObjectParameter BufferMapped;
    [NativeNameAttribute("Name", "GL_BUFFER_ACCESS_FLAGS")]
public static VertexBufferObjectParameter BufferAccessFlags;
    [NativeNameAttribute("Name", "GL_BUFFER_MAP_LENGTH")]
public static VertexBufferObjectParameter BufferMapLength;
    [NativeNameAttribute("Name", "GL_BUFFER_MAP_OFFSET")]
public static VertexBufferObjectParameter BufferMapOffset;
}
[NativeNameAttribute("Name", "VertexBufferObjectUsage")]
public enum Silk.NET.OpenGL.VertexBufferObjectUsage : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_STREAM_DRAW")]
public static VertexBufferObjectUsage StreamDraw;
    [NativeNameAttribute("Name", "GL_STREAM_READ")]
public static VertexBufferObjectUsage StreamRead;
    [NativeNameAttribute("Name", "GL_STREAM_COPY")]
public static VertexBufferObjectUsage StreamCopy;
    [NativeNameAttribute("Name", "GL_STATIC_DRAW")]
public static VertexBufferObjectUsage StaticDraw;
    [NativeNameAttribute("Name", "GL_STATIC_READ")]
public static VertexBufferObjectUsage StaticRead;
    [NativeNameAttribute("Name", "GL_STATIC_COPY")]
public static VertexBufferObjectUsage StaticCopy;
    [NativeNameAttribute("Name", "GL_DYNAMIC_DRAW")]
public static VertexBufferObjectUsage DynamicDraw;
    [NativeNameAttribute("Name", "GL_DYNAMIC_READ")]
public static VertexBufferObjectUsage DynamicRead;
    [NativeNameAttribute("Name", "GL_DYNAMIC_COPY")]
public static VertexBufferObjectUsage DynamicCopy;
}
[NativeNameAttribute("Name", "VertexHintsMaskPGI")]
public enum Silk.NET.OpenGL.VertexHintsMaskPGI : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_VERTEX23_BIT_PGI")]
public static VertexHintsMaskPGI Vertex23BitPgi;
    [NativeNameAttribute("Name", "GL_VERTEX4_BIT_PGI")]
public static VertexHintsMaskPGI Vertex4BitPgi;
    [NativeNameAttribute("Name", "GL_COLOR3_BIT_PGI")]
public static VertexHintsMaskPGI Color3BitPgi;
    [NativeNameAttribute("Name", "GL_COLOR4_BIT_PGI")]
public static VertexHintsMaskPGI Color4BitPgi;
    [NativeNameAttribute("Name", "GL_EDGEFLAG_BIT_PGI")]
public static VertexHintsMaskPGI EdgeflagBitPgi;
    [NativeNameAttribute("Name", "GL_INDEX_BIT_PGI")]
public static VertexHintsMaskPGI IndexBitPgi;
    [NativeNameAttribute("Name", "GL_MAT_AMBIENT_BIT_PGI")]
public static VertexHintsMaskPGI MatAmbientBitPgi;
    [NativeNameAttribute("Name", "GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI")]
public static VertexHintsMaskPGI MatAmbientAndDiffuseBitPgi;
    [NativeNameAttribute("Name", "GL_MAT_DIFFUSE_BIT_PGI")]
public static VertexHintsMaskPGI MatDiffuseBitPgi;
    [NativeNameAttribute("Name", "GL_MAT_EMISSION_BIT_PGI")]
public static VertexHintsMaskPGI MatEmissionBitPgi;
    [NativeNameAttribute("Name", "GL_MAT_COLOR_INDEXES_BIT_PGI")]
public static VertexHintsMaskPGI MatColorIndexesBitPgi;
    [NativeNameAttribute("Name", "GL_MAT_SHININESS_BIT_PGI")]
public static VertexHintsMaskPGI MatShininessBitPgi;
    [NativeNameAttribute("Name", "GL_MAT_SPECULAR_BIT_PGI")]
public static VertexHintsMaskPGI MatSpecularBitPgi;
    [NativeNameAttribute("Name", "GL_NORMAL_BIT_PGI")]
public static VertexHintsMaskPGI NormalBitPgi;
    [NativeNameAttribute("Name", "GL_TEXCOORD1_BIT_PGI")]
public static VertexHintsMaskPGI Texcoord1BitPgi;
    [NativeNameAttribute("Name", "GL_TEXCOORD2_BIT_PGI")]
public static VertexHintsMaskPGI Texcoord2BitPgi;
    [NativeNameAttribute("Name", "GL_TEXCOORD3_BIT_PGI")]
public static VertexHintsMaskPGI Texcoord3BitPgi;
    [NativeNameAttribute("Name", "GL_TEXCOORD4_BIT_PGI")]
public static VertexHintsMaskPGI Texcoord4BitPgi;
}
[NativeNameAttribute("Name", "VertexPointerType")]
public enum Silk.NET.OpenGL.VertexPointerType : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_SHORT")]
public static VertexPointerType Short;
    [NativeNameAttribute("Name", "GL_INT")]
public static VertexPointerType Int;
    [NativeNameAttribute("Name", "GL_FLOAT")]
public static VertexPointerType Float;
    [NativeNameAttribute("Name", "GL_DOUBLE")]
public static VertexPointerType Double;
}
[NativeNameAttribute("Name", "VertexProvokingMode")]
public enum Silk.NET.OpenGL.VertexProvokingMode : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_FIRST_VERTEX_CONVENTION")]
public static VertexProvokingMode FirstVertexConvention;
    [NativeNameAttribute("Name", "GL_LAST_VERTEX_CONVENTION")]
public static VertexProvokingMode LastVertexConvention;
}
[NativeNameAttribute("Name", "VertexShaderCoordOutEXT")]
public enum Silk.NET.OpenGL.VertexShaderCoordOutEXT : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_X_EXT")]
public static VertexShaderCoordOutEXT XExt;
    [NativeNameAttribute("Name", "GL_Y_EXT")]
public static VertexShaderCoordOutEXT YExt;
    [NativeNameAttribute("Name", "GL_Z_EXT")]
public static VertexShaderCoordOutEXT ZExt;
    [NativeNameAttribute("Name", "GL_W_EXT")]
public static VertexShaderCoordOutEXT WExt;
    [NativeNameAttribute("Name", "GL_NEGATIVE_X_EXT")]
public static VertexShaderCoordOutEXT NegativeXExt;
    [NativeNameAttribute("Name", "GL_NEGATIVE_Y_EXT")]
public static VertexShaderCoordOutEXT NegativeYExt;
    [NativeNameAttribute("Name", "GL_NEGATIVE_Z_EXT")]
public static VertexShaderCoordOutEXT NegativeZExt;
    [NativeNameAttribute("Name", "GL_NEGATIVE_W_EXT")]
public static VertexShaderCoordOutEXT NegativeWExt;
    [NativeNameAttribute("Name", "GL_ZERO_EXT")]
public static VertexShaderCoordOutEXT ZeroExt;
    [NativeNameAttribute("Name", "GL_ONE_EXT")]
public static VertexShaderCoordOutEXT OneExt;
    [NativeNameAttribute("Name", "GL_NEGATIVE_ONE_EXT")]
public static VertexShaderCoordOutEXT NegativeOneExt;
}
[NativeNameAttribute("Name", "VertexShaderOpEXT")]
public enum Silk.NET.OpenGL.VertexShaderOpEXT : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_OP_INDEX_EXT")]
public static VertexShaderOpEXT OpIndexExt;
    [NativeNameAttribute("Name", "GL_OP_NEGATE_EXT")]
public static VertexShaderOpEXT OpNegateExt;
    [NativeNameAttribute("Name", "GL_OP_DOT3_EXT")]
public static VertexShaderOpEXT OpDot3Ext;
    [NativeNameAttribute("Name", "GL_OP_DOT4_EXT")]
public static VertexShaderOpEXT OpDot4Ext;
    [NativeNameAttribute("Name", "GL_OP_MUL_EXT")]
public static VertexShaderOpEXT OpMulExt;
    [NativeNameAttribute("Name", "GL_OP_ADD_EXT")]
public static VertexShaderOpEXT OpAddExt;
    [NativeNameAttribute("Name", "GL_OP_MADD_EXT")]
public static VertexShaderOpEXT OpMaddExt;
    [NativeNameAttribute("Name", "GL_OP_FRAC_EXT")]
public static VertexShaderOpEXT OpFracExt;
    [NativeNameAttribute("Name", "GL_OP_MAX_EXT")]
public static VertexShaderOpEXT OpMaxExt;
    [NativeNameAttribute("Name", "GL_OP_MIN_EXT")]
public static VertexShaderOpEXT OpMinExt;
    [NativeNameAttribute("Name", "GL_OP_SET_GE_EXT")]
public static VertexShaderOpEXT OpSetGEExt;
    [NativeNameAttribute("Name", "GL_OP_SET_LT_EXT")]
public static VertexShaderOpEXT OpSetLTExt;
    [NativeNameAttribute("Name", "GL_OP_CLAMP_EXT")]
public static VertexShaderOpEXT OpClampExt;
    [NativeNameAttribute("Name", "GL_OP_FLOOR_EXT")]
public static VertexShaderOpEXT OpFloorExt;
    [NativeNameAttribute("Name", "GL_OP_ROUND_EXT")]
public static VertexShaderOpEXT OpRoundExt;
    [NativeNameAttribute("Name", "GL_OP_EXP_BASE_2_EXT")]
public static VertexShaderOpEXT OpExpBase2Ext;
    [NativeNameAttribute("Name", "GL_OP_LOG_BASE_2_EXT")]
public static VertexShaderOpEXT OpLogBase2Ext;
    [NativeNameAttribute("Name", "GL_OP_POWER_EXT")]
public static VertexShaderOpEXT OpPowerExt;
    [NativeNameAttribute("Name", "GL_OP_RECIP_EXT")]
public static VertexShaderOpEXT OpRecipExt;
    [NativeNameAttribute("Name", "GL_OP_RECIP_SQRT_EXT")]
public static VertexShaderOpEXT OpRecipSqrtExt;
    [NativeNameAttribute("Name", "GL_OP_SUB_EXT")]
public static VertexShaderOpEXT OpSubExt;
    [NativeNameAttribute("Name", "GL_OP_CROSS_PRODUCT_EXT")]
public static VertexShaderOpEXT OpCrossProductExt;
    [NativeNameAttribute("Name", "GL_OP_MULTIPLY_MATRIX_EXT")]
public static VertexShaderOpEXT OpMultiplyMatrixExt;
    [NativeNameAttribute("Name", "GL_OP_MOV_EXT")]
public static VertexShaderOpEXT OpMovExt;
}
[NativeNameAttribute("Name", "VertexShaderParameterEXT")]
public enum Silk.NET.OpenGL.VertexShaderParameterEXT : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_CURRENT_VERTEX_EXT")]
public static VertexShaderParameterEXT CurrentVertexExt;
    [NativeNameAttribute("Name", "GL_MVP_MATRIX_EXT")]
public static VertexShaderParameterEXT MvpMatrixExt;
}
[NativeNameAttribute("Name", "VertexShaderStorageTypeEXT")]
public enum Silk.NET.OpenGL.VertexShaderStorageTypeEXT : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_VARIANT_EXT")]
public static VertexShaderStorageTypeEXT VariantExt;
    [NativeNameAttribute("Name", "GL_INVARIANT_EXT")]
public static VertexShaderStorageTypeEXT InvariantExt;
    [NativeNameAttribute("Name", "GL_LOCAL_CONSTANT_EXT")]
public static VertexShaderStorageTypeEXT LocalConstantExt;
    [NativeNameAttribute("Name", "GL_LOCAL_EXT")]
public static VertexShaderStorageTypeEXT LocalExt;
}
[NativeNameAttribute("Name", "VertexShaderTextureUnitParameter")]
public enum Silk.NET.OpenGL.VertexShaderTextureUnitParameter : Enum {
    public int value__;
}
[NativeNameAttribute("Name", "VertexShaderWriteMaskEXT")]
public enum Silk.NET.OpenGL.VertexShaderWriteMaskEXT : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_FALSE")]
public static VertexShaderWriteMaskEXT False;
    [NativeNameAttribute("Name", "GL_TRUE")]
public static VertexShaderWriteMaskEXT True;
}
[NativeNameAttribute("Name", "VertexStreamATI")]
public enum Silk.NET.OpenGL.VertexStreamATI : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_VERTEX_STREAM0_ATI")]
public static VertexStreamATI VertexStream0Ati;
    [NativeNameAttribute("Name", "GL_VERTEX_STREAM1_ATI")]
public static VertexStreamATI VertexStream1Ati;
    [NativeNameAttribute("Name", "GL_VERTEX_STREAM2_ATI")]
public static VertexStreamATI VertexStream2Ati;
    [NativeNameAttribute("Name", "GL_VERTEX_STREAM3_ATI")]
public static VertexStreamATI VertexStream3Ati;
    [NativeNameAttribute("Name", "GL_VERTEX_STREAM4_ATI")]
public static VertexStreamATI VertexStream4Ati;
    [NativeNameAttribute("Name", "GL_VERTEX_STREAM5_ATI")]
public static VertexStreamATI VertexStream5Ati;
    [NativeNameAttribute("Name", "GL_VERTEX_STREAM6_ATI")]
public static VertexStreamATI VertexStream6Ati;
    [NativeNameAttribute("Name", "GL_VERTEX_STREAM7_ATI")]
public static VertexStreamATI VertexStream7Ati;
}
[NativeNameAttribute("Name", "VertexWeightPointerTypeEXT")]
public enum Silk.NET.OpenGL.VertexWeightPointerTypeEXT : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_FLOAT")]
public static VertexWeightPointerTypeEXT Float;
}
[NativeNameAttribute("Name", "WeightPointerTypeARB")]
public enum Silk.NET.OpenGL.WeightPointerTypeARB : Enum {
    public int value__;
    [NativeNameAttribute("Name", "GL_BYTE")]
public static WeightPointerTypeARB Byte;
    [NativeNameAttribute("Name", "GL_UNSIGNED_BYTE")]
public static WeightPointerTypeARB UnsignedByte;
    [NativeNameAttribute("Name", "GL_SHORT")]
public static WeightPointerTypeARB Short;
    [NativeNameAttribute("Name", "GL_UNSIGNED_SHORT")]
public static WeightPointerTypeARB UnsignedShort;
    [NativeNameAttribute("Name", "GL_INT")]
public static WeightPointerTypeARB Int;
    [NativeNameAttribute("Name", "GL_UNSIGNED_INT")]
public static WeightPointerTypeARB UnsignedInt;
    [NativeNameAttribute("Name", "GL_FLOAT")]
public static WeightPointerTypeARB Float;
    [NativeNameAttribute("Name", "GL_DOUBLE")]
public static WeightPointerTypeARB Double;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsUnmanagedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NativeIntegerAttribute : Attribute {
    public Boolean[] TransformFlags;
    public NativeIntegerAttribute(Boolean[] );
}
