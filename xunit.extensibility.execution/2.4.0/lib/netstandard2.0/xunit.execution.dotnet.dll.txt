[ExtensionAttribute]
internal static class AssemblyExtensions : object {
    [ExtensionAttribute]
public static string GetLocalCodeBase(Assembly assembly);
    public static string GetLocalCodeBase(string codeBase, char directorySeparator);
}
internal static class CommonTasks : object {
    internal static Task Completed;
    private static CommonTasks();
}
[ExtensionAttribute]
internal static class DictionaryExtensions : object {
    [ExtensionAttribute]
public static void Add(IDictionary`2<TKey, List`1<TValue>> dictionary, TKey key, TValue value);
    [ExtensionAttribute]
public static bool Contains(IDictionary`2<TKey, List`1<TValue>> dictionary, TKey key, TValue value, IEqualityComparer`1<TValue> valueComparer);
    [ExtensionAttribute]
public static TValue GetOrAdd(IDictionary`2<TKey, TValue> dictionary, TKey key);
    [ExtensionAttribute]
public static TValue GetOrAdd(IDictionary`2<TKey, TValue> dictionary, TKey key, Func`1<TValue> newValue);
    [ExtensionAttribute]
public static Dictionary`2<TKey, TValue> ToDictionaryIgnoringDuplicateKeys(IEnumerable`1<TValue> values, Func`2<TValue, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static Dictionary`2<TKey, TValue> ToDictionaryIgnoringDuplicateKeys(IEnumerable`1<TInput> inputValues, Func`2<TInput, TKey> keySelector, Func`2<TInput, TValue> valueSelector, IEqualityComparer`1<TKey> comparer);
}
[ExtensionAttribute]
internal static class ExceptionExtensions : object {
    private static string RETHROW_MARKER;
    [ExtensionAttribute]
public static void RethrowWithNoStackTraceLoss(Exception ex);
    [ExtensionAttribute]
public static Exception Unwrap(Exception ex);
}
internal static class Guard : object {
    public static void ArgumentNotNull(string argName, object argValue);
    public static void ArgumentNotNullOrEmpty(string argName, IEnumerable argValue);
    public static void ArgumentValid(string argName, string message, bool test);
}
[ExtensionAttribute]
internal static class NewReflectionExtensions : object {
    [ExtensionAttribute]
public static Assembly GetAssembly(Type type);
    [ExtensionAttribute]
public static Attribute[] GetCustomAttributes(Assembly assembly);
    [ExtensionAttribute]
public static bool IsEnum(Type type);
    [ExtensionAttribute]
public static bool IsFromLocalAssembly(Type type);
    [ExtensionAttribute]
public static bool IsGenericType(Type type);
    [ExtensionAttribute]
public static bool IsGenericTypeDefinition(Type type);
    [ExtensionAttribute]
public static bool IsNullableEnum(Type type);
    [ExtensionAttribute]
public static bool IsValueType(Type type);
    [ExtensionAttribute]
public static Type UnwrapNullable(Type type);
    [ExtensionAttribute]
public static Type[] GetGenericArguments(Type type);
    [ExtensionAttribute]
public static Type[] GetInterfaces(Type type);
    [ExtensionAttribute]
public static bool IsAssignableFrom(Type type, Type otherType);
}
[ExtensionAttribute]
public static class ReflectionAbstractionExtensions : object {
    [ExtensionAttribute]
public static object CreateTestClass(ITest test, Type testClassType, Object[] constructorArguments, IMessageBus messageBus, ExecutionTimer timer, CancellationTokenSource cancellationTokenSource);
    [ExtensionAttribute]
public static void DisposeTestClass(ITest test, object testClass, IMessageBus messageBus, ExecutionTimer timer, CancellationTokenSource cancellationTokenSource);
    [ExtensionAttribute]
private static MethodInfo GetMethodInfoFromIMethodInfo(Type type, IMethodInfo methodInfo);
    [ExtensionAttribute]
public static IEnumerable`1<MethodInfo> GetMatchingMethods(Type type, MethodInfo methodInfo);
    [ExtensionAttribute]
public static IEnumerable`1<IAttributeInfo> GetCustomAttributes(IAssemblyInfo assemblyInfo, Type attributeType);
    [ExtensionAttribute]
public static IEnumerable`1<IAttributeInfo> GetCustomAttributes(IAttributeInfo attributeInfo, Type attributeType);
    [ExtensionAttribute]
public static IEnumerable`1<IAttributeInfo> GetCustomAttributes(IMethodInfo methodInfo, Type attributeType);
    [ExtensionAttribute]
public static IEnumerable`1<IAttributeInfo> GetCustomAttributes(ITypeInfo typeInfo, Type attributeType);
    [ExtensionAttribute]
public static MethodInfo ToRuntimeMethod(IMethodInfo methodInfo);
    [ExtensionAttribute]
public static Type ToRuntimeType(ITypeInfo typeInfo);
}
[ExtensionAttribute]
public static class TestFrameworkOptionsReadExtensions : object {
    [ExtensionAttribute]
public static Nullable`1<bool> DiagnosticMessages(ITestFrameworkDiscoveryOptions discoveryOptions);
    [ExtensionAttribute]
public static bool DiagnosticMessagesOrDefault(ITestFrameworkDiscoveryOptions discoveryOptions);
    [ExtensionAttribute]
public static Nullable`1<TestMethodDisplay> MethodDisplay(ITestFrameworkDiscoveryOptions discoveryOptions);
    [ExtensionAttribute]
public static Nullable`1<TestMethodDisplayOptions> MethodDisplayOptions(ITestFrameworkDiscoveryOptions discoveryOptions);
    [ExtensionAttribute]
public static TestMethodDisplay MethodDisplayOrDefault(ITestFrameworkDiscoveryOptions discoveryOptions);
    [ExtensionAttribute]
public static TestMethodDisplayOptions MethodDisplayOptionsOrDefault(ITestFrameworkDiscoveryOptions discoveryOptions);
    [ExtensionAttribute]
public static Nullable`1<bool> PreEnumerateTheories(ITestFrameworkDiscoveryOptions discoveryOptions);
    [ExtensionAttribute]
public static bool PreEnumerateTheoriesOrDefault(ITestFrameworkDiscoveryOptions discoveryOptions);
    [ExtensionAttribute]
public static Nullable`1<bool> SynchronousMessageReporting(ITestFrameworkDiscoveryOptions discoveryOptions);
    [ExtensionAttribute]
public static bool SynchronousMessageReportingOrDefault(ITestFrameworkDiscoveryOptions discoveryOptions);
    [ExtensionAttribute]
public static Nullable`1<bool> DiagnosticMessages(ITestFrameworkExecutionOptions executionOptions);
    [ExtensionAttribute]
public static bool DiagnosticMessagesOrDefault(ITestFrameworkExecutionOptions executionOptions);
    [ExtensionAttribute]
public static Nullable`1<bool> DisableParallelization(ITestFrameworkExecutionOptions executionOptions);
    [ExtensionAttribute]
public static bool DisableParallelizationOrDefault(ITestFrameworkExecutionOptions executionOptions);
    [ExtensionAttribute]
public static Nullable`1<int> MaxParallelThreads(ITestFrameworkExecutionOptions executionOptions);
    [ExtensionAttribute]
public static int MaxParallelThreadsOrDefault(ITestFrameworkExecutionOptions executionOptions);
    [ExtensionAttribute]
public static Nullable`1<bool> StopOnTestFail(ITestFrameworkExecutionOptions executionOptions);
    [ExtensionAttribute]
public static bool StopOnTestFailOrDefault(ITestFrameworkExecutionOptions executionOptions);
    [ExtensionAttribute]
public static Nullable`1<bool> SynchronousMessageReporting(ITestFrameworkExecutionOptions executionOptions);
    [ExtensionAttribute]
public static bool SynchronousMessageReportingOrDefault(ITestFrameworkExecutionOptions executionOptions);
}
internal static class TestOptionsNames : object {
}
internal static class Xunit.ExecutionHelper : object {
    private static string executionAssemblyNamePrefix;
    private static string platformSuffix;
    private static String[] platformSuffixes;
    public static string SubstitutionToken;
    public static string PlatformSuffix { get; }
    private static ExecutionHelper();
    public static string get_PlatformSuffix();
}
public abstract class Xunit.LongLivedMarshalByRefObject : object {
    public static void DisconnectAll();
}
public class Xunit.Sdk.AfterTestFinished : TestMessage {
    [CompilerGeneratedAttribute]
private string <AttributeName>k__BackingField;
    public string AttributeName { get; private set; }
    public AfterTestFinished(ITest test, string attributeName);
    [CompilerGeneratedAttribute]
public sealed virtual string get_AttributeName();
    [CompilerGeneratedAttribute]
private void set_AttributeName(string value);
}
public class Xunit.Sdk.AfterTestStarting : TestMessage {
    [CompilerGeneratedAttribute]
private string <AttributeName>k__BackingField;
    public string AttributeName { get; private set; }
    public AfterTestStarting(ITest test, string attributeName);
    [CompilerGeneratedAttribute]
public sealed virtual string get_AttributeName();
    [CompilerGeneratedAttribute]
private void set_AttributeName(string value);
}
internal static class Xunit.Sdk.ArgumentFormatter : object {
    private static int MAX_DEPTH;
    private static int MAX_ENUMERABLE_LENGTH;
    private static int MAX_OBJECT_PARAMETER_COUNT;
    private static int MAX_STRING_LENGTH;
    private static Object[] EmptyObjects;
    private static Type[] EmptyTypes;
    private static Dictionary`2<TypeInfo, string> TypeMappings;
    private static ArgumentFormatter();
    public static string Format(object value);
    private static string Format(object value, int depth);
    private static string FormatComplexValue(object value, int depth, Type type);
    private static string FormatEnumerable(IEnumerable`1<object> enumerableValues, int depth);
    private static string FormatTypeName(Type type);
    private static string WrapAndGetFormattedValue(Func`1<object> getter, int depth);
    private static Exception UnwrapException(Exception ex);
    private static string EscapeHexChars(string s);
    private static bool TryGetEscapeSequence(char ch, String& value);
}
internal class Xunit.Sdk.AssertEqualityComparer`1 : object {
    private static IEqualityComparer DefaultInnerComparer;
    private static TypeInfo NullableTypeInfo;
    private Func`1<IEqualityComparer> innerComparerFactory;
    private static MethodInfo s_compareTypedSetsMethod;
    public AssertEqualityComparer`1(IEqualityComparer innerComparer);
    private static AssertEqualityComparer`1();
    public sealed virtual bool Equals(T x, T y);
    private Nullable`1<bool> CheckIfEnumerablesAreEqual(T x, T y);
    private Nullable`1<bool> CheckIfDictionariesAreEqual(T x, T y);
    private Nullable`1<bool> CheckIfSetsAreEqual(T x, T y, TypeInfo typeInfo);
    private bool CompareTypedSets(IEnumerable enumX, IEnumerable enumY);
    private bool IsSet(TypeInfo typeInfo);
    public sealed virtual int GetHashCode(T obj);
}
internal class Xunit.Sdk.AssertEqualityComparerAdapter`1 : object {
    private IEqualityComparer`1<T> innerComparer;
    public AssertEqualityComparerAdapter`1(IEqualityComparer`1<T> innerComparer);
    public sealed virtual bool Equals(object x, object y);
    public sealed virtual int GetHashCode(object obj);
}
internal class Xunit.Sdk.AsyncManualResetEvent : object {
    private TaskCompletionSource`1 modreq(System.Runtime.CompilerServices.IsVolatile) taskCompletionSource;
    public bool IsSet { get; }
    public AsyncManualResetEvent(bool signaled);
    public bool get_IsSet();
    public Task WaitAsync();
    public void Set();
    public void Reset();
}
public class Xunit.Sdk.AsyncTestSyncContext : SynchronizationContext {
    private AsyncManualResetEvent event;
    private Exception exception;
    private SynchronizationContext innerContext;
    private int operationCount;
    public AsyncTestSyncContext(SynchronizationContext innerContext);
    public virtual void OperationCompleted();
    public virtual void OperationStarted();
    public virtual void Post(SendOrPostCallback d, object state);
    public virtual void Send(SendOrPostCallback d, object state);
    [AsyncStateMachineAttribute("Xunit.Sdk.AsyncTestSyncContext/<WaitForCompletionAsync>d__9")]
public Task`1<Exception> WaitForCompletionAsync();
}
public class Xunit.Sdk.BeforeTestFinished : TestMessage {
    [CompilerGeneratedAttribute]
private string <AttributeName>k__BackingField;
    public string AttributeName { get; private set; }
    public BeforeTestFinished(ITest test, string attributeName);
    [CompilerGeneratedAttribute]
public sealed virtual string get_AttributeName();
    [CompilerGeneratedAttribute]
private void set_AttributeName(string value);
}
public class Xunit.Sdk.BeforeTestStarting : TestMessage {
    [CompilerGeneratedAttribute]
private string <AttributeName>k__BackingField;
    public string AttributeName { get; private set; }
    public BeforeTestStarting(ITest test, string attributeName);
    [CompilerGeneratedAttribute]
public sealed virtual string get_AttributeName();
    [CompilerGeneratedAttribute]
private void set_AttributeName(string value);
}
[ExtensionAttribute]
internal static class Xunit.Sdk.CollectionExtensions : object {
    [ExtensionAttribute]
public static List`1<T> CastOrToList(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static T[] CastOrToArray(IEnumerable`1<T> source);
}
public class Xunit.Sdk.CollectionPerAssemblyTestCollectionFactory : object {
    private Dictionary`2<string, ITypeInfo> collectionDefinitions;
    private TestCollection defaultCollection;
    private ITestAssembly testAssembly;
    private ConcurrentDictionary`2<string, ITestCollection> testCollections;
    public string DisplayName { get; }
    public CollectionPerAssemblyTestCollectionFactory(ITestAssembly testAssembly, IMessageSink diagnosticMessageSink);
    public sealed virtual string get_DisplayName();
    private ITestCollection CreateTestCollection(string name);
    public sealed virtual ITestCollection Get(ITypeInfo testClass);
}
public class Xunit.Sdk.CollectionPerClassTestCollectionFactory : object {
    private Dictionary`2<string, ITypeInfo> collectionDefinitions;
    private ITestAssembly testAssembly;
    private ConcurrentDictionary`2<string, ITestCollection> testCollections;
    public string DisplayName { get; }
    public CollectionPerClassTestCollectionFactory(ITestAssembly testAssembly, IMessageSink diagnosticMessageSink);
    public sealed virtual string get_DisplayName();
    private ITestCollection CreateCollection(string name);
    public sealed virtual ITestCollection Get(ITypeInfo testClass);
}
public class Xunit.Sdk.DefaultTestCaseOrderer : object {
    private IMessageSink diagnosticMessageSink;
    public DefaultTestCaseOrderer(IMessageSink diagnosticMessageSink);
    public sealed virtual IEnumerable`1<TTestCase> OrderTestCases(IEnumerable`1<TTestCase> testCases);
    private List`1<TTestCase> Randomize(List`1<TTestCase> testCases);
    private int Compare(TTestCase x, TTestCase y);
}
public class Xunit.Sdk.DefaultTestCollectionOrderer : object {
    public sealed virtual IEnumerable`1<ITestCollection> OrderTestCollections(IEnumerable`1<ITestCollection> TestCollections);
    private int Compare(TTestCollection x, TTestCollection y);
}
public class Xunit.Sdk.DelegatingMessageBus : object {
    private Action`1<IMessageSinkMessage> callback;
    private IMessageBus innerMessageBus;
    public DelegatingMessageBus(IMessageBus innerMessageBus, Action`1<IMessageSinkMessage> callback);
    public virtual bool QueueMessage(IMessageSinkMessage message);
    public sealed virtual void Dispose();
}
public class Xunit.Sdk.DelegatingMessageBus`1 : DelegatingMessageBus {
    [CompilerGeneratedAttribute]
private TFinalMessage <FinalMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private ManualResetEvent <Finished>k__BackingField;
    public TFinalMessage FinalMessage { get; private set; }
    public ManualResetEvent Finished { get; private set; }
    public DelegatingMessageBus`1(IMessageBus innerMessageBus, Action`1<IMessageSinkMessage> callback);
    [CompilerGeneratedAttribute]
public TFinalMessage get_FinalMessage();
    [CompilerGeneratedAttribute]
private void set_FinalMessage(TFinalMessage value);
    [CompilerGeneratedAttribute]
public ManualResetEvent get_Finished();
    [CompilerGeneratedAttribute]
private void set_Finished(ManualResetEvent value);
    public virtual bool QueueMessage(IMessageSinkMessage message);
}
public class Xunit.Sdk.DelegatingMessageSink : LongLivedMarshalByRefObject {
    private Action`1<IMessageSinkMessage> callback;
    private IMessageSink innerSink;
    public DelegatingMessageSink(IMessageSink innerSink, Action`1<IMessageSinkMessage> callback);
    public void Dispose();
    public virtual bool OnMessage(IMessageSinkMessage message);
}
public class Xunit.Sdk.DelegatingMessageSink`1 : DelegatingMessageSink {
    [CompilerGeneratedAttribute]
private TFinalMessage <FinalMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private ManualResetEvent <Finished>k__BackingField;
    public TFinalMessage FinalMessage { get; private set; }
    public ManualResetEvent Finished { get; private set; }
    public DelegatingMessageSink`1(IMessageSink innerSink, Action`1<IMessageSinkMessage> callback);
    [CompilerGeneratedAttribute]
public TFinalMessage get_FinalMessage();
    [CompilerGeneratedAttribute]
private void set_FinalMessage(TFinalMessage value);
    [CompilerGeneratedAttribute]
public ManualResetEvent get_Finished();
    [CompilerGeneratedAttribute]
private void set_Finished(ManualResetEvent value);
    public virtual bool OnMessage(IMessageSinkMessage message);
}
public class Xunit.Sdk.DiagnosticMessage : LongLivedMarshalByRefObject {
    private static HashSet`1<string> interfaceTypes;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    public HashSet`1<string> InterfaceTypes { get; }
    public string Message { get; public set; }
    public DiagnosticMessage(string message);
    public DiagnosticMessage(string format, Object[] args);
    private static DiagnosticMessage();
    public HashSet`1<string> get_InterfaceTypes();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
}
public class Xunit.Sdk.DiscoveryCompleteMessage : LongLivedMarshalByRefObject {
}
public class Xunit.Sdk.DisplayNameFormatter : object {
    private CharacterRule rule;
    public DisplayNameFormatter(TestMethodDisplay display, TestMethodDisplayOptions displayOptions);
    public string Format(string displayName);
}
public class Xunit.Sdk.DisposalTracker : object {
    private Stack`1<IDisposable> toDispose;
    public void Add(IDisposable disposable);
    public sealed virtual void Dispose();
}
public class Xunit.Sdk.ErrorMessage : LongLivedMarshalByRefObject {
    [CompilerGeneratedAttribute]
private String[] <ExceptionTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Messages>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <StackTraces>k__BackingField;
    [CompilerGeneratedAttribute]
private Int32[] <ExceptionParentIndices>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ITestCase> <TestCases>k__BackingField;
    public String[] ExceptionTypes { get; private set; }
    public String[] Messages { get; private set; }
    public String[] StackTraces { get; private set; }
    public Int32[] ExceptionParentIndices { get; private set; }
    public IEnumerable`1<ITestCase> TestCases { get; private set; }
    public ErrorMessage(IEnumerable`1<ITestCase> testCases, String[] exceptionTypes, String[] messages, String[] stackTraces, Int32[] exceptionParentIndices);
    public ErrorMessage(IEnumerable`1<ITestCase> testCases, Exception ex);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_ExceptionTypes();
    [CompilerGeneratedAttribute]
private void set_ExceptionTypes(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_Messages();
    [CompilerGeneratedAttribute]
private void set_Messages(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_StackTraces();
    [CompilerGeneratedAttribute]
private void set_StackTraces(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual Int32[] get_ExceptionParentIndices();
    [CompilerGeneratedAttribute]
private void set_ExceptionParentIndices(Int32[] value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<ITestCase> get_TestCases();
    [CompilerGeneratedAttribute]
private void set_TestCases(IEnumerable`1<ITestCase> value);
}
public static class Xunit.Sdk.ExceptionUtility : object {
    public static string CombineMessages(IFailureInformation failureInfo);
    public static string CombineStackTraces(IFailureInformation failureInfo);
    private static bool ExcludeStackFrame(string stackFrame);
    private static string FilterStackTrace(string stack);
    private static string GetAt(String[] values, int index);
    private static int GetAt(Int32[] values, int index);
    private static string GetMessage(IFailureInformation failureInfo, int index, int level);
    private static string GetNamespace(string exceptionType);
    private static string GetStackTrace(IFailureInformation failureInfo, int index);
    [IteratorStateMachineAttribute("Xunit.Sdk.ExceptionUtility/<SplitLines>d__9")]
private static IEnumerable`1<string> SplitLines(string input);
    public static IFailureInformation ConvertExceptionToFailureInformation(Exception ex);
    private static void ConvertExceptionToFailureInformation(Exception ex, int parentIndex, List`1<string> exceptionTypes, List`1<string> messages, List`1<string> stackTraces, List`1<int> indices);
}
internal static class Xunit.Sdk.ExecutionContextHelper : object {
    private static Object[] EmptyObjectArray;
    private static MethodInfo actionInvokeMethod;
    private static Func`1<object> captureContext;
    private static Type contextCallbackType;
    private static Boolean modreq(System.Runtime.CompilerServices.IsVolatile) initialized;
    private static Action`2<object, object> runOnContext;
    public static bool IsSupported { get; }
    private static ExecutionContextHelper();
    public static bool get_IsSupported();
    public static object Capture();
    private static Delegate CreateDelegate(Action`1<object> action);
    private static void EnsureInitialized();
    public static void Run(object context, Action`1<object> action);
}
public class Xunit.Sdk.ExecutionErrorTestCase : XunitTestCase {
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    public string ErrorMessage { get; private set; }
    [ObsoleteAttribute("Please call the constructor which takes TestMethodDisplayOptions")]
public ExecutionErrorTestCase(IMessageSink diagnosticMessageSink, TestMethodDisplay defaultMethodDisplay, ITestMethod testMethod, string errorMessage);
    public ExecutionErrorTestCase(IMessageSink diagnosticMessageSink, TestMethodDisplay defaultMethodDisplay, TestMethodDisplayOptions defaultMethodDisplayOptions, ITestMethod testMethod, string errorMessage);
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
private void set_ErrorMessage(string value);
    public virtual Task`1<RunSummary> RunAsync(IMessageSink diagnosticMessageSink, IMessageBus messageBus, Object[] constructorArguments, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource);
    public virtual void Serialize(IXunitSerializationInfo data);
    public virtual void Deserialize(IXunitSerializationInfo data);
}
public class Xunit.Sdk.ExecutionErrorTestCaseRunner : TestCaseRunner`1<ExecutionErrorTestCase> {
    public ExecutionErrorTestCaseRunner(ExecutionErrorTestCase testCase, IMessageBus messageBus, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource);
    protected virtual Task`1<RunSummary> RunTestAsync();
}
public class Xunit.Sdk.ExecutionTimer : object {
    private TimeSpan total;
    public decimal Total { get; }
    public decimal get_Total();
    public void Aggregate(Action action);
    [AsyncStateMachineAttribute("Xunit.Sdk.ExecutionTimer/<AggregateAsync>d__4")]
public Task AggregateAsync(Func`1<Task> asyncAction);
    public void Aggregate(TimeSpan time);
}
public static class Xunit.Sdk.ExtensibilityPointFactory : object {
    private static DisposalTracker disposalTracker;
    private static ConcurrentDictionary`2<Tuple`2<Type, IMessageSink>, object> instances;
    private static ExtensibilityPointFactory();
    private static object CreateInstance(IMessageSink diagnosticMessageSink, Type type, Object[] ctorArgs);
    public static void Dispose();
    public static TInterface Get(IMessageSink diagnosticMessageSink, Type type, Object[] ctorArgs);
    public static IDataDiscoverer GetDataDiscoverer(IMessageSink diagnosticMessageSink, Type discovererType);
    public static IDataDiscoverer GetDataDiscoverer(IMessageSink diagnosticMessageSink, IAttributeInfo dataDiscovererAttribute);
    public static ITestCaseOrderer GetTestCaseOrderer(IMessageSink diagnosticMessageSink, Type ordererType);
    public static ITestCaseOrderer GetTestCaseOrderer(IMessageSink diagnosticMessageSink, IAttributeInfo testCaseOrdererAttribute);
    public static ITestCollectionOrderer GetTestCollectionOrderer(IMessageSink diagnosticMessageSink, Type ordererType);
    public static ITestCollectionOrderer GetTestCollectionOrderer(IMessageSink diagnosticMessageSink, IAttributeInfo testCollectionOrdererAttribute);
    public static ITestFrameworkTypeDiscoverer GetTestFrameworkTypeDiscoverer(IMessageSink diagnosticMessageSink, Type frameworkType);
    public static ITestFrameworkTypeDiscoverer GetTestFrameworkTypeDiscoverer(IMessageSink diagnosticMessageSink, IAttributeInfo testFrameworkDiscovererAttribute);
    public static ITraitDiscoverer GetTraitDiscoverer(IMessageSink diagnosticMessageSink, Type traitDiscovererType);
    public static ITraitDiscoverer GetTraitDiscoverer(IMessageSink diagnosticMessageSink, IAttributeInfo traitDiscovererAttribute);
    public static IXunitTestCaseDiscoverer GetXunitTestCaseDiscoverer(IMessageSink diagnosticMessageSink, Type testCaseDiscovererType);
    public static IXunitTestCollectionFactory GetXunitTestCollectionFactory(IMessageSink diagnosticMessageSink, Type testCollectionFactoryType, ITestAssembly testAssembly);
    public static IXunitTestCollectionFactory GetXunitTestCollectionFactory(IMessageSink diagnosticMessageSink, IAttributeInfo collectionBehaviorAttribute, ITestAssembly testAssembly);
    private static Type GetTestCollectionFactoryType(IMessageSink diagnosticMessageSink, IAttributeInfo collectionBehaviorAttribute);
}
public class Xunit.Sdk.FactDiscoverer : object {
    [CompilerGeneratedAttribute]
private IMessageSink <DiagnosticMessageSink>k__BackingField;
    protected IMessageSink DiagnosticMessageSink { get; }
    public FactDiscoverer(IMessageSink diagnosticMessageSink);
    [CompilerGeneratedAttribute]
protected IMessageSink get_DiagnosticMessageSink();
    protected virtual IXunitTestCase CreateTestCase(ITestFrameworkDiscoveryOptions discoveryOptions, ITestMethod testMethod, IAttributeInfo factAttribute);
    public virtual IEnumerable`1<IXunitTestCase> Discover(ITestFrameworkDiscoveryOptions discoveryOptions, ITestMethod testMethod, IAttributeInfo factAttribute);
}
public abstract class Xunit.Sdk.GeneralDigest : object {
    private static int BYTE_LENGTH;
    private Byte[] xBuf;
    private int xBufOff;
    private long byteCount;
    public string AlgorithmName { get; }
    internal GeneralDigest(GeneralDigest t);
    protected void CopyIn(GeneralDigest t);
    public void Update(byte input);
    public void BlockUpdate(Byte[] input, int inOff, int length);
    public void Finish();
    public virtual void Reset();
    public int GetByteLength();
    internal abstract virtual void ProcessWord(Byte[] input, int inOff);
    internal abstract virtual void ProcessLength(long bitLength);
    internal abstract virtual void ProcessBlock();
    public abstract virtual string get_AlgorithmName();
    public abstract virtual int GetDigestSize();
    public abstract virtual int DoFinal(Byte[] output, int outOff);
}
public class Xunit.Sdk.MaxConcurrencySyncContext : SynchronizationContext {
    private bool disposed;
    private ManualResetEvent terminate;
    private List`1<XunitWorkerThread> workerThreads;
    private ConcurrentQueue`1<Tuple`3<SendOrPostCallback, object, object>> workQueue;
    private AutoResetEvent workReady;
    public static bool IsSupported { get; }
    public MaxConcurrencySyncContext(int maximumConcurrencyLevel);
    public static bool get_IsSupported();
    public sealed virtual void Dispose();
    public virtual void Post(SendOrPostCallback d, object state);
    public virtual void Send(SendOrPostCallback d, object state);
    [SecuritySafeCriticalAttribute]
private void WorkerThreadProc();
    [SecuritySafeCriticalAttribute]
private void RunOnSyncContext(SendOrPostCallback callback, object state);
    [CompilerGeneratedAttribute]
private XunitWorkerThread <.ctor>b__5_0(int _);
}
public class Xunit.Sdk.MessageBus : object {
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) continueRunning;
    private IMessageSink messageSink;
    private ConcurrentQueue`1<IMessageSinkMessage> reporterQueue;
    private XunitWorkerThread reporterThread;
    private AutoResetEvent reporterWorkEvent;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) shutdownRequested;
    private bool stopOnFail;
    public MessageBus(IMessageSink messageSink, bool stopOnFail);
    private void DispatchMessages();
    public sealed virtual void Dispose();
    public sealed virtual bool QueueMessage(IMessageSinkMessage message);
    private void ReporterWorker();
}
public class Xunit.Sdk.NullMessageSink : LongLivedMarshalByRefObject {
    public void Dispose();
    public sealed virtual bool OnMessage(IMessageSinkMessage message);
    public bool OnMessageWithTypes(IMessageSinkMessage message, HashSet`1<string> messageTypes);
}
internal class Xunit.Sdk.Pack : object {
    internal static void UInt16_To_BE(ushort n, Byte[] bs);
    internal static void UInt16_To_BE(ushort n, Byte[] bs, int off);
    internal static ushort BE_To_UInt16(Byte[] bs);
    internal static ushort BE_To_UInt16(Byte[] bs, int off);
    internal static Byte[] UInt32_To_BE(UInt32 n);
    internal static void UInt32_To_BE(UInt32 n, Byte[] bs);
    internal static void UInt32_To_BE(UInt32 n, Byte[] bs, int off);
    internal static Byte[] UInt32_To_BE(UInt32[] ns);
    internal static void UInt32_To_BE(UInt32[] ns, Byte[] bs, int off);
    internal static UInt32 BE_To_UInt32(Byte[] bs);
    internal static UInt32 BE_To_UInt32(Byte[] bs, int off);
    internal static void BE_To_UInt32(Byte[] bs, int off, UInt32[] ns);
    internal static Byte[] UInt64_To_BE(ulong n);
    internal static void UInt64_To_BE(ulong n, Byte[] bs);
    internal static void UInt64_To_BE(ulong n, Byte[] bs, int off);
    internal static ulong BE_To_UInt64(Byte[] bs);
    internal static ulong BE_To_UInt64(Byte[] bs, int off);
    internal static void UInt16_To_LE(ushort n, Byte[] bs);
    internal static void UInt16_To_LE(ushort n, Byte[] bs, int off);
    internal static ushort LE_To_UInt16(Byte[] bs);
    internal static ushort LE_To_UInt16(Byte[] bs, int off);
    internal static Byte[] UInt32_To_LE(UInt32 n);
    internal static void UInt32_To_LE(UInt32 n, Byte[] bs);
    internal static void UInt32_To_LE(UInt32 n, Byte[] bs, int off);
    internal static Byte[] UInt32_To_LE(UInt32[] ns);
    internal static void UInt32_To_LE(UInt32[] ns, Byte[] bs, int off);
    internal static UInt32 LE_To_UInt32(Byte[] bs);
    internal static UInt32 LE_To_UInt32(Byte[] bs, int off);
    internal static void LE_To_UInt32(Byte[] bs, int off, UInt32[] ns);
    internal static void LE_To_UInt32(Byte[] bs, int bOff, UInt32[] ns, int nOff, int count);
    internal static Byte[] UInt64_To_LE(ulong n);
    internal static void UInt64_To_LE(ulong n, Byte[] bs);
    internal static void UInt64_To_LE(ulong n, Byte[] bs, int off);
    internal static ulong LE_To_UInt64(Byte[] bs);
    internal static ulong LE_To_UInt64(Byte[] bs, int off);
}
public class Xunit.Sdk.ReflectionAssemblyInfo : LongLivedMarshalByRefObject {
    [CompilerGeneratedAttribute]
private Assembly <Assembly>k__BackingField;
    public Assembly Assembly { get; private set; }
    public string AssemblyPath { get; }
    public string Name { get; }
    public ReflectionAssemblyInfo(Assembly assembly);
    public ReflectionAssemblyInfo(string assemblyFileName);
    [CompilerGeneratedAttribute]
public sealed virtual Assembly get_Assembly();
    [CompilerGeneratedAttribute]
private void set_Assembly(Assembly value);
    public sealed virtual string get_AssemblyPath();
    public sealed virtual string get_Name();
    public sealed virtual IEnumerable`1<IAttributeInfo> GetCustomAttributes(string assemblyQualifiedAttributeTypeName);
    public sealed virtual ITypeInfo GetType(string typeName);
    public sealed virtual IEnumerable`1<ITypeInfo> GetTypes(bool includePrivateTypes);
    public virtual string ToString();
}
public class Xunit.Sdk.ReflectionAttributeInfo : LongLivedMarshalByRefObject {
    private static AttributeUsageAttribute DefaultAttributeUsageAttribute;
    private static ConcurrentDictionary`2<Type, AttributeUsageAttribute> attributeUsageCache;
    [CompilerGeneratedAttribute]
private Attribute <Attribute>k__BackingField;
    [CompilerGeneratedAttribute]
private CustomAttributeData <AttributeData>k__BackingField;
    public Attribute Attribute { get; private set; }
    public CustomAttributeData AttributeData { get; private set; }
    public ReflectionAttributeInfo(CustomAttributeData attribute);
    private static ReflectionAttributeInfo();
    [CompilerGeneratedAttribute]
public sealed virtual Attribute get_Attribute();
    [CompilerGeneratedAttribute]
private void set_Attribute(Attribute value);
    [CompilerGeneratedAttribute]
public CustomAttributeData get_AttributeData();
    [CompilerGeneratedAttribute]
private void set_AttributeData(CustomAttributeData value);
    [IteratorStateMachineAttribute("Xunit.Sdk.ReflectionAttributeInfo/<Convert>d__11")]
private static IEnumerable`1<object> Convert(IEnumerable`1<CustomAttributeTypedArgument> arguments);
    internal static AttributeUsageAttribute GetAttributeUsage(Type attributeType);
    public sealed virtual IEnumerable`1<object> GetConstructorArguments();
    public sealed virtual IEnumerable`1<IAttributeInfo> GetCustomAttributes(string assemblyQualifiedAttributeTypeName);
    internal static IEnumerable`1<IAttributeInfo> GetCustomAttributes(Type type, string assemblyQualifiedAttributeTypeName);
    internal static IEnumerable`1<IAttributeInfo> GetCustomAttributes(Type type, Type attributeType, AttributeUsageAttribute attributeUsage);
    public sealed virtual TValue GetNamedArgument(string argumentName);
    private Attribute Instantiate(CustomAttributeData attributeData);
    private object GetTypedValue(CustomAttributeTypedArgument arg);
    public virtual string ToString();
}
internal class Xunit.Sdk.ReflectionAttributeNameCache : object {
    private static ConcurrentDictionary`2<string, Type> attributeTypeCache;
    private static ReflectionAttributeNameCache();
    internal static Type GetType(string assemblyQualifiedAttributeTypeName);
}
public class Xunit.Sdk.ReflectionMethodInfo : LongLivedMarshalByRefObject {
    private static IEqualityComparer TypeComparer;
    private static IEqualityComparer`1<IEnumerable`1<Type>> TypeListComparer;
    [CompilerGeneratedAttribute]
private MethodInfo <MethodInfo>k__BackingField;
    private IEnumerable`1<IParameterInfo> _cachedParameters;
    public bool IsAbstract { get; }
    public bool IsGenericMethodDefinition { get; }
    public bool IsPublic { get; }
    public bool IsStatic { get; }
    public MethodInfo MethodInfo { get; private set; }
    public string Name { get; }
    public ITypeInfo ReturnType { get; }
    public ITypeInfo Type { get; }
    public ReflectionMethodInfo(MethodInfo method);
    private static ReflectionMethodInfo();
    public sealed virtual bool get_IsAbstract();
    public sealed virtual bool get_IsGenericMethodDefinition();
    public sealed virtual bool get_IsPublic();
    public sealed virtual bool get_IsStatic();
    [CompilerGeneratedAttribute]
public sealed virtual MethodInfo get_MethodInfo();
    [CompilerGeneratedAttribute]
private void set_MethodInfo(MethodInfo value);
    public sealed virtual string get_Name();
    public sealed virtual ITypeInfo get_ReturnType();
    public sealed virtual ITypeInfo get_Type();
    public sealed virtual IEnumerable`1<IAttributeInfo> GetCustomAttributes(string assemblyQualifiedAttributeTypeName);
    private static IEnumerable`1<IAttributeInfo> GetCustomAttributes(MethodInfo method, string assemblyQualifiedAttributeTypeName);
    private static IEnumerable`1<IAttributeInfo> GetCustomAttributes(MethodInfo method, Type attributeType, AttributeUsageAttribute attributeUsage);
    public sealed virtual IEnumerable`1<ITypeInfo> GetGenericArguments();
    private static MethodInfo GetParent(MethodInfo method);
    private static bool ParametersHaveSameTypes(ParameterInfo[] left, ParameterInfo[] right);
    public sealed virtual IMethodInfo MakeGenericMethod(ITypeInfo[] typeArguments);
    public virtual string ToString();
    public sealed virtual IEnumerable`1<IParameterInfo> GetParameters();
}
public class Xunit.Sdk.ReflectionParameterInfo : LongLivedMarshalByRefObject {
    [CompilerGeneratedAttribute]
private ParameterInfo <ParameterInfo>k__BackingField;
    public string Name { get; }
    public ParameterInfo ParameterInfo { get; private set; }
    public ITypeInfo ParameterType { get; }
    public ReflectionParameterInfo(ParameterInfo parameterInfo);
    public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual ParameterInfo get_ParameterInfo();
    [CompilerGeneratedAttribute]
private void set_ParameterInfo(ParameterInfo value);
    public sealed virtual ITypeInfo get_ParameterType();
}
public class Xunit.Sdk.ReflectionTypeInfo : LongLivedMarshalByRefObject {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    public IAssemblyInfo Assembly { get; }
    public ITypeInfo BaseType { get; }
    public IEnumerable`1<ITypeInfo> Interfaces { get; }
    public bool IsAbstract { get; }
    public bool IsGenericParameter { get; }
    public bool IsGenericType { get; }
    public bool IsSealed { get; }
    public bool IsValueType { get; }
    public string Name { get; }
    public Type Type { get; private set; }
    public ReflectionTypeInfo(Type type);
    public sealed virtual IAssemblyInfo get_Assembly();
    public sealed virtual ITypeInfo get_BaseType();
    public sealed virtual IEnumerable`1<ITypeInfo> get_Interfaces();
    public sealed virtual bool get_IsAbstract();
    public sealed virtual bool get_IsGenericParameter();
    public sealed virtual bool get_IsGenericType();
    public sealed virtual bool get_IsSealed();
    public sealed virtual bool get_IsValueType();
    public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(Type value);
    public sealed virtual IEnumerable`1<IAttributeInfo> GetCustomAttributes(string assemblyQualifiedAttributeTypeName);
    public sealed virtual IEnumerable`1<ITypeInfo> GetGenericArguments();
    public sealed virtual IMethodInfo GetMethod(string methodName, bool includePrivateMethod);
    public sealed virtual IEnumerable`1<IMethodInfo> GetMethods(bool includePrivateMethods);
    public virtual string ToString();
}
public static class Xunit.Sdk.Reflector : object {
    internal static Object[] EmptyArgs;
    internal static Type[] EmptyTypes;
    private static MethodInfo EnumerableCast;
    private static MethodInfo EnumerableToArray;
    private static Reflector();
    public static Object[] ConvertArguments(Object[] args, Type[] types);
    internal static object ConvertArgument(object arg, Type type);
    public static IReflectionAssemblyInfo Wrap(Assembly assembly);
    public static IReflectionAttributeInfo Wrap(CustomAttributeData attribute);
    public static IReflectionMethodInfo Wrap(MethodInfo method);
    public static IReflectionParameterInfo Wrap(ParameterInfo parameter);
    public static IReflectionTypeInfo Wrap(Type type);
}
internal static class Xunit.Sdk.SerializationHelper : object {
    private static ConcurrentDictionary`2<Type, string> typeToTypeNameMap;
    private static SerializationHelper();
    public static T Deserialize(string serializedValue);
    public static string Serialize(object value);
    public static bool IsSerializable(object value);
    public static Type GetType(string assemblyQualifiedTypeName);
    public static Type GetType(string assemblyName, string typeName);
    public static string GetTypeNameForSerialization(Type type);
    private static string SubstringTrim(string str, int startIndex, int length);
    private static IList`1<string> SplitAtOuterCommas(string value, bool trimWhitespace);
}
public class Xunit.Sdk.Sha1Digest : GeneralDigest {
    private static int DigestLength;
    private UInt32 H1;
    private UInt32 H2;
    private UInt32 H3;
    private UInt32 H4;
    private UInt32 H5;
    private UInt32[] X;
    private int xOff;
    private static UInt32 Y1;
    private static UInt32 Y2;
    private static UInt32 Y3;
    private static UInt32 Y4;
    public string AlgorithmName { get; }
    public Sha1Digest(Sha1Digest t);
    private void CopyIn(Sha1Digest t);
    public virtual string get_AlgorithmName();
    public virtual int GetDigestSize();
    internal virtual void ProcessWord(Byte[] input, int inOff);
    internal virtual void ProcessLength(long bitLength);
    public virtual int DoFinal(Byte[] output, int outOff);
    public virtual void Reset();
    private static UInt32 F(UInt32 u, UInt32 v, UInt32 w);
    private static UInt32 H(UInt32 u, UInt32 v, UInt32 w);
    private static UInt32 G(UInt32 u, UInt32 v, UInt32 w);
    internal virtual void ProcessBlock();
    public void Reset(Sha1Digest other);
}
public class Xunit.Sdk.SourceInformation : LongLivedMarshalByRefObject {
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <LineNumber>k__BackingField;
    public string FileName { get; public set; }
    public Nullable`1<int> LineNumber { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_FileName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FileName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_LineNumber();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LineNumber(Nullable`1<int> value);
    public sealed virtual void Serialize(IXunitSerializationInfo info);
    public sealed virtual void Deserialize(IXunitSerializationInfo info);
}
public class Xunit.Sdk.SynchronousMessageBus : object {
    private IMessageSink messageSink;
    public SynchronousMessageBus(IMessageSink messageSink);
    public sealed virtual void Dispose();
    public sealed virtual bool QueueMessage(IMessageSinkMessage message);
}
[DebuggerDisplayAttribute("\{ assembly = {Assembly.AssemblyPath}, config = {ConfigFileName} \}")]
public class Xunit.Sdk.TestAssembly : LongLivedMarshalByRefObject {
    [CompilerGeneratedAttribute]
private IAssemblyInfo <Assembly>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConfigFileName>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <Version>k__BackingField;
    public IAssemblyInfo Assembly { get; public set; }
    public string ConfigFileName { get; public set; }
    public Version Version { get; private set; }
    public TestAssembly(IAssemblyInfo assembly, string configFileName, Version version);
    [CompilerGeneratedAttribute]
public sealed virtual IAssemblyInfo get_Assembly();
    [CompilerGeneratedAttribute]
public void set_Assembly(IAssemblyInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ConfigFileName();
    [CompilerGeneratedAttribute]
public void set_ConfigFileName(string value);
    [CompilerGeneratedAttribute]
public Version get_Version();
    [CompilerGeneratedAttribute]
private void set_Version(Version value);
    public sealed virtual void Serialize(IXunitSerializationInfo info);
    public sealed virtual void Deserialize(IXunitSerializationInfo info);
}
public class Xunit.Sdk.TestAssemblyCleanupFailure : TestAssemblyMessage {
    [CompilerGeneratedAttribute]
private Int32[] <ExceptionParentIndices>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ExceptionTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Messages>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <StackTraces>k__BackingField;
    public Int32[] ExceptionParentIndices { get; private set; }
    public String[] ExceptionTypes { get; private set; }
    public String[] Messages { get; private set; }
    public String[] StackTraces { get; private set; }
    public TestAssemblyCleanupFailure(IEnumerable`1<ITestCase> testCases, ITestAssembly testAssembly, String[] exceptionTypes, String[] messages, String[] stackTraces, Int32[] exceptionParentIndices);
    public TestAssemblyCleanupFailure(IEnumerable`1<ITestCase> testCases, ITestAssembly testAssembly, Exception ex);
    [CompilerGeneratedAttribute]
public sealed virtual Int32[] get_ExceptionParentIndices();
    [CompilerGeneratedAttribute]
private void set_ExceptionParentIndices(Int32[] value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_ExceptionTypes();
    [CompilerGeneratedAttribute]
private void set_ExceptionTypes(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_Messages();
    [CompilerGeneratedAttribute]
private void set_Messages(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_StackTraces();
    [CompilerGeneratedAttribute]
private void set_StackTraces(String[] value);
}
public class Xunit.Sdk.TestAssemblyFinished : TestAssemblyMessage {
    [CompilerGeneratedAttribute]
private decimal <ExecutionTime>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TestsFailed>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TestsRun>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TestsSkipped>k__BackingField;
    public decimal ExecutionTime { get; private set; }
    public int TestsFailed { get; private set; }
    public int TestsRun { get; private set; }
    public int TestsSkipped { get; private set; }
    public TestAssemblyFinished(IEnumerable`1<ITestCase> testCases, ITestAssembly testAssembly, decimal executionTime, int testsRun, int testsFailed, int testsSkipped);
    [CompilerGeneratedAttribute]
public sealed virtual decimal get_ExecutionTime();
    [CompilerGeneratedAttribute]
private void set_ExecutionTime(decimal value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_TestsFailed();
    [CompilerGeneratedAttribute]
private void set_TestsFailed(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_TestsRun();
    [CompilerGeneratedAttribute]
private void set_TestsRun(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_TestsSkipped();
    [CompilerGeneratedAttribute]
private void set_TestsSkipped(int value);
}
public class Xunit.Sdk.TestAssemblyMessage : LongLivedMarshalByRefObject {
    [CompilerGeneratedAttribute]
private ITestAssembly <TestAssembly>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ITestCase> <TestCases>k__BackingField;
    public ITestAssembly TestAssembly { get; public set; }
    public IEnumerable`1<ITestCase> TestCases { get; private set; }
    public TestAssemblyMessage(IEnumerable`1<ITestCase> testCases, ITestAssembly testAssembly);
    internal TestAssemblyMessage(ITestCase testCase, ITestAssembly testAssembly);
    [CompilerGeneratedAttribute]
public sealed virtual ITestAssembly get_TestAssembly();
    [CompilerGeneratedAttribute]
public void set_TestAssembly(ITestAssembly value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<ITestCase> get_TestCases();
    [CompilerGeneratedAttribute]
private void set_TestCases(IEnumerable`1<ITestCase> value);
}
public abstract class Xunit.Sdk.TestAssemblyRunner`1 : object {
    [CompilerGeneratedAttribute]
private ExceptionAggregator <Aggregator>k__BackingField;
    [CompilerGeneratedAttribute]
private ITestFrameworkExecutionOptions <ExecutionOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessageSink <DiagnosticMessageSink>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessageSink <ExecutionMessageSink>k__BackingField;
    [CompilerGeneratedAttribute]
private ITestAssembly <TestAssembly>k__BackingField;
    [CompilerGeneratedAttribute]
private ITestCaseOrderer <TestCaseOrderer>k__BackingField;
    [CompilerGeneratedAttribute]
private ITestCollectionOrderer <TestCollectionOrderer>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<TTestCase> <TestCases>k__BackingField;
    protected ExceptionAggregator Aggregator { get; protected set; }
    protected ITestFrameworkExecutionOptions ExecutionOptions { get; protected set; }
    protected IMessageSink DiagnosticMessageSink { get; protected set; }
    protected IMessageSink ExecutionMessageSink { get; protected set; }
    protected ITestAssembly TestAssembly { get; protected set; }
    protected ITestCaseOrderer TestCaseOrderer { get; protected set; }
    protected ITestCollectionOrderer TestCollectionOrderer { get; protected set; }
    protected IEnumerable`1<TTestCase> TestCases { get; protected set; }
    protected TestAssemblyRunner`1(ITestAssembly testAssembly, IEnumerable`1<TTestCase> testCases, IMessageSink diagnosticMessageSink, IMessageSink executionMessageSink, ITestFrameworkExecutionOptions executionOptions);
    [CompilerGeneratedAttribute]
protected ExceptionAggregator get_Aggregator();
    [CompilerGeneratedAttribute]
protected void set_Aggregator(ExceptionAggregator value);
    [CompilerGeneratedAttribute]
protected ITestFrameworkExecutionOptions get_ExecutionOptions();
    [CompilerGeneratedAttribute]
protected void set_ExecutionOptions(ITestFrameworkExecutionOptions value);
    [CompilerGeneratedAttribute]
protected IMessageSink get_DiagnosticMessageSink();
    [CompilerGeneratedAttribute]
protected void set_DiagnosticMessageSink(IMessageSink value);
    [CompilerGeneratedAttribute]
protected IMessageSink get_ExecutionMessageSink();
    [CompilerGeneratedAttribute]
protected void set_ExecutionMessageSink(IMessageSink value);
    [CompilerGeneratedAttribute]
protected ITestAssembly get_TestAssembly();
    [CompilerGeneratedAttribute]
protected void set_TestAssembly(ITestAssembly value);
    [CompilerGeneratedAttribute]
protected ITestCaseOrderer get_TestCaseOrderer();
    [CompilerGeneratedAttribute]
protected void set_TestCaseOrderer(ITestCaseOrderer value);
    [CompilerGeneratedAttribute]
protected ITestCollectionOrderer get_TestCollectionOrderer();
    [CompilerGeneratedAttribute]
protected void set_TestCollectionOrderer(ITestCollectionOrderer value);
    [CompilerGeneratedAttribute]
protected IEnumerable`1<TTestCase> get_TestCases();
    [CompilerGeneratedAttribute]
protected void set_TestCases(IEnumerable`1<TTestCase> value);
    public virtual void Dispose();
    protected abstract virtual string GetTestFrameworkDisplayName();
    protected virtual string GetTestFrameworkEnvironment();
    private static string GetVersion();
    protected virtual Task AfterTestAssemblyStartingAsync();
    protected virtual Task BeforeTestAssemblyFinishedAsync();
    protected virtual IMessageBus CreateMessageBus();
    protected List`1<Tuple`2<ITestCollection, List`1<TTestCase>>> OrderTestCollections();
    [AsyncStateMachineAttribute("Xunit.Sdk.TestAssemblyRunner`1/<RunAsync>d__41")]
public Task`1<RunSummary> RunAsync();
    [AsyncStateMachineAttribute("Xunit.Sdk.TestAssemblyRunner`1/<RunTestCollectionsAsync>d__42")]
protected virtual Task`1<RunSummary> RunTestCollectionsAsync(IMessageBus messageBus, CancellationTokenSource cancellationTokenSource);
    protected abstract virtual Task`1<RunSummary> RunTestCollectionAsync(IMessageBus messageBus, ITestCollection testCollection, IEnumerable`1<TTestCase> testCases, CancellationTokenSource cancellationTokenSource);
}
public class Xunit.Sdk.TestAssemblyStarting : TestAssemblyMessage {
    [CompilerGeneratedAttribute]
private DateTime <StartTime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestEnvironment>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestFrameworkDisplayName>k__BackingField;
    public DateTime StartTime { get; public set; }
    public string TestEnvironment { get; public set; }
    public string TestFrameworkDisplayName { get; public set; }
    public TestAssemblyStarting(IEnumerable`1<ITestCase> testCases, ITestAssembly testAssembly, DateTime startTime, string testEnvironment, string testFrameworkDisplayName);
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_StartTime();
    [CompilerGeneratedAttribute]
public void set_StartTime(DateTime value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TestEnvironment();
    [CompilerGeneratedAttribute]
public void set_TestEnvironment(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TestFrameworkDisplayName();
    [CompilerGeneratedAttribute]
public void set_TestFrameworkDisplayName(string value);
}
public class Xunit.Sdk.TestCaseBulkDeserializer : LongLivedMarshalByRefObject {
    private static IMessageSink DiagnosticMessageSink;
    public TestCaseBulkDeserializer(object discovererObject, object executorObject, object serializedTestCasesObject, object callbackObject);
    private static TestCaseBulkDeserializer();
    private static KeyValuePair`2<string, ITestCase> Deserialize(ITestFrameworkDiscoverer discoverer, ITestFrameworkExecutor executor, string serialization);
}
public class Xunit.Sdk.TestCaseCleanupFailure : TestCaseMessage {
    [CompilerGeneratedAttribute]
private String[] <ExceptionTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Messages>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <StackTraces>k__BackingField;
    [CompilerGeneratedAttribute]
private Int32[] <ExceptionParentIndices>k__BackingField;
    public String[] ExceptionTypes { get; private set; }
    public String[] Messages { get; private set; }
    public String[] StackTraces { get; private set; }
    public Int32[] ExceptionParentIndices { get; private set; }
    public TestCaseCleanupFailure(ITestCase testCase, String[] exceptionTypes, String[] messages, String[] stackTraces, Int32[] exceptionParentIndices);
    public TestCaseCleanupFailure(ITestCase testCase, Exception ex);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_ExceptionTypes();
    [CompilerGeneratedAttribute]
private void set_ExceptionTypes(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_Messages();
    [CompilerGeneratedAttribute]
private void set_Messages(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_StackTraces();
    [CompilerGeneratedAttribute]
private void set_StackTraces(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual Int32[] get_ExceptionParentIndices();
    [CompilerGeneratedAttribute]
private void set_ExceptionParentIndices(Int32[] value);
}
public class Xunit.Sdk.TestCaseDescriptorFactory : LongLivedMarshalByRefObject {
    private static string Separator;
    private static string SeparatorEscape;
    private static Dictionary`2<string, List`1<string>> EmptyTraits;
    public TestCaseDescriptorFactory(object discovererObject, object testCasesObject, object callbackObject);
    private static TestCaseDescriptorFactory();
    private static string Encode(string value);
}
public class Xunit.Sdk.TestCaseDiscoveryMessage : TestCaseMessage {
    public TestCaseDiscoveryMessage(ITestCase testCase);
}
public class Xunit.Sdk.TestCaseFinished : TestCaseMessage {
    [CompilerGeneratedAttribute]
private decimal <ExecutionTime>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TestsFailed>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TestsRun>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TestsSkipped>k__BackingField;
    public decimal ExecutionTime { get; private set; }
    public int TestsFailed { get; private set; }
    public int TestsRun { get; private set; }
    public int TestsSkipped { get; private set; }
    public TestCaseFinished(ITestCase testCase, decimal executionTime, int testsRun, int testsFailed, int testsSkipped);
    [CompilerGeneratedAttribute]
public sealed virtual decimal get_ExecutionTime();
    [CompilerGeneratedAttribute]
private void set_ExecutionTime(decimal value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_TestsFailed();
    [CompilerGeneratedAttribute]
private void set_TestsFailed(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_TestsRun();
    [CompilerGeneratedAttribute]
private void set_TestsRun(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_TestsSkipped();
    [CompilerGeneratedAttribute]
private void set_TestsSkipped(int value);
}
public class Xunit.Sdk.TestCaseMessage : TestMethodMessage {
    public ITestCase TestCase { get; }
    public TestCaseMessage(ITestCase testCase);
    public sealed virtual ITestCase get_TestCase();
}
public abstract class Xunit.Sdk.TestCaseRunner`1 : object {
    [CompilerGeneratedAttribute]
private ExceptionAggregator <Aggregator>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationTokenSource <CancellationTokenSource>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessageBus <MessageBus>k__BackingField;
    [CompilerGeneratedAttribute]
private TTestCase <TestCase>k__BackingField;
    protected ExceptionAggregator Aggregator { get; protected set; }
    protected CancellationTokenSource CancellationTokenSource { get; protected set; }
    protected IMessageBus MessageBus { get; protected set; }
    protected TTestCase TestCase { get; protected set; }
    protected TestCaseRunner`1(TTestCase testCase, IMessageBus messageBus, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource);
    [CompilerGeneratedAttribute]
protected ExceptionAggregator get_Aggregator();
    [CompilerGeneratedAttribute]
protected void set_Aggregator(ExceptionAggregator value);
    [CompilerGeneratedAttribute]
protected CancellationTokenSource get_CancellationTokenSource();
    [CompilerGeneratedAttribute]
protected void set_CancellationTokenSource(CancellationTokenSource value);
    [CompilerGeneratedAttribute]
protected IMessageBus get_MessageBus();
    [CompilerGeneratedAttribute]
protected void set_MessageBus(IMessageBus value);
    [CompilerGeneratedAttribute]
protected TTestCase get_TestCase();
    [CompilerGeneratedAttribute]
protected void set_TestCase(TTestCase value);
    protected virtual Task AfterTestCaseStartingAsync();
    protected virtual Task BeforeTestCaseFinishedAsync();
    [AsyncStateMachineAttribute("Xunit.Sdk.TestCaseRunner`1/<RunAsync>d__19")]
public Task`1<RunSummary> RunAsync();
    protected abstract virtual Task`1<RunSummary> RunTestAsync();
}
public class Xunit.Sdk.TestCaseStarting : TestCaseMessage {
    public TestCaseStarting(ITestCase testCase);
}
[DebuggerDisplayAttribute("\{ class = {Class.Name} \}")]
public class Xunit.Sdk.TestClass : LongLivedMarshalByRefObject {
    [CompilerGeneratedAttribute]
private ITypeInfo <Class>k__BackingField;
    [CompilerGeneratedAttribute]
private ITestCollection <TestCollection>k__BackingField;
    public ITypeInfo Class { get; public set; }
    public ITestCollection TestCollection { get; public set; }
    public TestClass(ITestCollection testCollection, ITypeInfo class);
    [CompilerGeneratedAttribute]
public sealed virtual ITypeInfo get_Class();
    [CompilerGeneratedAttribute]
public void set_Class(ITypeInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual ITestCollection get_TestCollection();
    [CompilerGeneratedAttribute]
public void set_TestCollection(ITestCollection value);
    public sealed virtual void Serialize(IXunitSerializationInfo info);
    public sealed virtual void Deserialize(IXunitSerializationInfo info);
}
public class Xunit.Sdk.TestClassCleanupFailure : TestClassMessage {
    [CompilerGeneratedAttribute]
private String[] <ExceptionTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Messages>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <StackTraces>k__BackingField;
    [CompilerGeneratedAttribute]
private Int32[] <ExceptionParentIndices>k__BackingField;
    public String[] ExceptionTypes { get; private set; }
    public String[] Messages { get; private set; }
    public String[] StackTraces { get; private set; }
    public Int32[] ExceptionParentIndices { get; private set; }
    public TestClassCleanupFailure(IEnumerable`1<ITestCase> testCases, ITestClass testClass, String[] exceptionTypes, String[] messages, String[] stackTraces, Int32[] exceptionParentIndices);
    public TestClassCleanupFailure(IEnumerable`1<ITestCase> testCases, ITestClass testClass, Exception ex);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_ExceptionTypes();
    [CompilerGeneratedAttribute]
private void set_ExceptionTypes(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_Messages();
    [CompilerGeneratedAttribute]
private void set_Messages(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_StackTraces();
    [CompilerGeneratedAttribute]
private void set_StackTraces(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual Int32[] get_ExceptionParentIndices();
    [CompilerGeneratedAttribute]
private void set_ExceptionParentIndices(Int32[] value);
}
public class Xunit.Sdk.TestClassComparer : object {
    public static TestClassComparer Instance;
    private static TestClassComparer();
    public sealed virtual bool Equals(ITestClass x, ITestClass y);
    public sealed virtual int GetHashCode(ITestClass obj);
}
public class Xunit.Sdk.TestClassConstructionFinished : TestMessage {
    public TestClassConstructionFinished(ITest test);
}
public class Xunit.Sdk.TestClassConstructionStarting : TestMessage {
    public TestClassConstructionStarting(ITest test);
}
public class Xunit.Sdk.TestClassDisposeFinished : TestMessage {
    public TestClassDisposeFinished(ITest test);
}
public class Xunit.Sdk.TestClassDisposeStarting : TestMessage {
    public TestClassDisposeStarting(ITest test);
}
public class Xunit.Sdk.TestClassException : Exception {
    public TestClassException(string message);
}
public class Xunit.Sdk.TestClassFinished : TestClassMessage {
    [CompilerGeneratedAttribute]
private decimal <ExecutionTime>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TestsFailed>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TestsRun>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TestsSkipped>k__BackingField;
    public decimal ExecutionTime { get; private set; }
    public int TestsFailed { get; private set; }
    public int TestsRun { get; private set; }
    public int TestsSkipped { get; private set; }
    public TestClassFinished(IEnumerable`1<ITestCase> testCases, ITestClass testClass, decimal executionTime, int testsRun, int testsFailed, int testsSkipped);
    [CompilerGeneratedAttribute]
public sealed virtual decimal get_ExecutionTime();
    [CompilerGeneratedAttribute]
private void set_ExecutionTime(decimal value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_TestsFailed();
    [CompilerGeneratedAttribute]
private void set_TestsFailed(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_TestsRun();
    [CompilerGeneratedAttribute]
private void set_TestsRun(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_TestsSkipped();
    [CompilerGeneratedAttribute]
private void set_TestsSkipped(int value);
}
public class Xunit.Sdk.TestClassMessage : TestCollectionMessage {
    [CompilerGeneratedAttribute]
private ITestClass <TestClass>k__BackingField;
    public ITestClass TestClass { get; public set; }
    public TestClassMessage(IEnumerable`1<ITestCase> testCases, ITestClass testClass);
    internal TestClassMessage(ITestCase testCase, ITestClass testClass);
    [CompilerGeneratedAttribute]
public sealed virtual ITestClass get_TestClass();
    [CompilerGeneratedAttribute]
public void set_TestClass(ITestClass value);
}
public abstract class Xunit.Sdk.TestClassRunner`1 : object {
    [CompilerGeneratedAttribute]
private ExceptionAggregator <Aggregator>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationTokenSource <CancellationTokenSource>k__BackingField;
    [CompilerGeneratedAttribute]
private IReflectionTypeInfo <Class>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessageSink <DiagnosticMessageSink>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessageBus <MessageBus>k__BackingField;
    [CompilerGeneratedAttribute]
private ITestCaseOrderer <TestCaseOrderer>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<TTestCase> <TestCases>k__BackingField;
    [CompilerGeneratedAttribute]
private ITestClass <TestClass>k__BackingField;
    protected ExceptionAggregator Aggregator { get; protected set; }
    protected CancellationTokenSource CancellationTokenSource { get; protected set; }
    protected IReflectionTypeInfo Class { get; protected set; }
    protected IMessageSink DiagnosticMessageSink { get; private set; }
    protected IMessageBus MessageBus { get; protected set; }
    protected ITestCaseOrderer TestCaseOrderer { get; protected set; }
    protected IEnumerable`1<TTestCase> TestCases { get; protected set; }
    protected ITestClass TestClass { get; protected set; }
    protected TestClassRunner`1(ITestClass testClass, IReflectionTypeInfo class, IEnumerable`1<TTestCase> testCases, IMessageSink diagnosticMessageSink, IMessageBus messageBus, ITestCaseOrderer testCaseOrderer, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource);
    [CompilerGeneratedAttribute]
protected ExceptionAggregator get_Aggregator();
    [CompilerGeneratedAttribute]
protected void set_Aggregator(ExceptionAggregator value);
    [CompilerGeneratedAttribute]
protected CancellationTokenSource get_CancellationTokenSource();
    [CompilerGeneratedAttribute]
protected void set_CancellationTokenSource(CancellationTokenSource value);
    [CompilerGeneratedAttribute]
protected IReflectionTypeInfo get_Class();
    [CompilerGeneratedAttribute]
protected void set_Class(IReflectionTypeInfo value);
    [CompilerGeneratedAttribute]
protected IMessageSink get_DiagnosticMessageSink();
    [CompilerGeneratedAttribute]
private void set_DiagnosticMessageSink(IMessageSink value);
    [CompilerGeneratedAttribute]
protected IMessageBus get_MessageBus();
    [CompilerGeneratedAttribute]
protected void set_MessageBus(IMessageBus value);
    [CompilerGeneratedAttribute]
protected ITestCaseOrderer get_TestCaseOrderer();
    [CompilerGeneratedAttribute]
protected void set_TestCaseOrderer(ITestCaseOrderer value);
    [CompilerGeneratedAttribute]
protected IEnumerable`1<TTestCase> get_TestCases();
    [CompilerGeneratedAttribute]
protected void set_TestCases(IEnumerable`1<TTestCase> value);
    [CompilerGeneratedAttribute]
protected ITestClass get_TestClass();
    [CompilerGeneratedAttribute]
protected void set_TestClass(ITestClass value);
    protected virtual Object[] CreateTestClassConstructorArguments();
    protected virtual string FormatConstructorArgsMissingMessage(ConstructorInfo constructor, IReadOnlyList`1<Tuple`2<int, ParameterInfo>> unusedArguments);
    protected virtual Task AfterTestClassStartingAsync();
    protected virtual Task BeforeTestClassFinishedAsync();
    [AsyncStateMachineAttribute("Xunit.Sdk.TestClassRunner`1/<RunAsync>d__37")]
public Task`1<RunSummary> RunAsync();
    [AsyncStateMachineAttribute("Xunit.Sdk.TestClassRunner`1/<RunTestMethodsAsync>d__38")]
protected virtual Task`1<RunSummary> RunTestMethodsAsync();
    protected abstract virtual Task`1<RunSummary> RunTestMethodAsync(ITestMethod testMethod, IReflectionMethodInfo method, IEnumerable`1<TTestCase> testCases, Object[] constructorArguments);
    protected virtual ConstructorInfo SelectTestClassConstructor();
    protected virtual bool TryGetConstructorArgument(ConstructorInfo constructor, int index, ParameterInfo parameter, Object& argumentValue);
}
public class Xunit.Sdk.TestClassStarting : TestClassMessage {
    public TestClassStarting(IEnumerable`1<ITestCase> testCases, ITestClass testClass);
}
public class Xunit.Sdk.TestCleanupFailure : TestMessage {
    [CompilerGeneratedAttribute]
private String[] <ExceptionTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Messages>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <StackTraces>k__BackingField;
    [CompilerGeneratedAttribute]
private Int32[] <ExceptionParentIndices>k__BackingField;
    public String[] ExceptionTypes { get; private set; }
    public String[] Messages { get; private set; }
    public String[] StackTraces { get; private set; }
    public Int32[] ExceptionParentIndices { get; private set; }
    public TestCleanupFailure(ITest test, String[] exceptionTypes, String[] messages, String[] stackTraces, Int32[] exceptionParentIndices);
    public TestCleanupFailure(ITest test, Exception ex);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_ExceptionTypes();
    [CompilerGeneratedAttribute]
private void set_ExceptionTypes(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_Messages();
    [CompilerGeneratedAttribute]
private void set_Messages(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_StackTraces();
    [CompilerGeneratedAttribute]
private void set_StackTraces(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual Int32[] get_ExceptionParentIndices();
    [CompilerGeneratedAttribute]
private void set_ExceptionParentIndices(Int32[] value);
}
[DebuggerDisplayAttribute("\{ id = {UniqueID}, display = {DisplayName} \}")]
public class Xunit.Sdk.TestCollection : LongLivedMarshalByRefObject {
    [CompilerGeneratedAttribute]
private ITypeInfo <CollectionDefinition>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private ITestAssembly <TestAssembly>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <UniqueID>k__BackingField;
    public ITypeInfo CollectionDefinition { get; public set; }
    public string DisplayName { get; public set; }
    public ITestAssembly TestAssembly { get; public set; }
    public Guid UniqueID { get; public set; }
    public TestCollection(ITestAssembly testAssembly, ITypeInfo collectionDefinition, string displayName);
    internal TestCollection(ITestAssembly testAssembly, ITypeInfo collectionDefinition, string displayName, Guid uniqueId);
    [CompilerGeneratedAttribute]
public sealed virtual ITypeInfo get_CollectionDefinition();
    [CompilerGeneratedAttribute]
public void set_CollectionDefinition(ITypeInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual ITestAssembly get_TestAssembly();
    [CompilerGeneratedAttribute]
public void set_TestAssembly(ITestAssembly value);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_UniqueID();
    [CompilerGeneratedAttribute]
public void set_UniqueID(Guid value);
    public virtual void Serialize(IXunitSerializationInfo info);
    public virtual void Deserialize(IXunitSerializationInfo info);
}
public class Xunit.Sdk.TestCollectionCleanupFailure : TestCollectionMessage {
    [CompilerGeneratedAttribute]
private String[] <ExceptionTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Messages>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <StackTraces>k__BackingField;
    [CompilerGeneratedAttribute]
private Int32[] <ExceptionParentIndices>k__BackingField;
    public String[] ExceptionTypes { get; private set; }
    public String[] Messages { get; private set; }
    public String[] StackTraces { get; private set; }
    public Int32[] ExceptionParentIndices { get; private set; }
    public TestCollectionCleanupFailure(IEnumerable`1<ITestCase> testCases, ITestCollection testCollection, String[] exceptionTypes, String[] messages, String[] stackTraces, Int32[] exceptionParentIndices);
    public TestCollectionCleanupFailure(IEnumerable`1<ITestCase> testCases, ITestCollection testCollection, Exception ex);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_ExceptionTypes();
    [CompilerGeneratedAttribute]
private void set_ExceptionTypes(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_Messages();
    [CompilerGeneratedAttribute]
private void set_Messages(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_StackTraces();
    [CompilerGeneratedAttribute]
private void set_StackTraces(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual Int32[] get_ExceptionParentIndices();
    [CompilerGeneratedAttribute]
private void set_ExceptionParentIndices(Int32[] value);
}
public class Xunit.Sdk.TestCollectionComparer : object {
    public static TestCollectionComparer Instance;
    private static TestCollectionComparer();
    public sealed virtual bool Equals(ITestCollection x, ITestCollection y);
    public sealed virtual int GetHashCode(ITestCollection obj);
}
public static class Xunit.Sdk.TestCollectionFactoryHelper : object {
    public static Dictionary`2<string, ITypeInfo> GetTestCollectionDefinitions(IAssemblyInfo assemblyInfo, IMessageSink diagnosticMessageSink);
}
public class Xunit.Sdk.TestCollectionFinished : TestCollectionMessage {
    [CompilerGeneratedAttribute]
private decimal <ExecutionTime>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TestsFailed>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TestsRun>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TestsSkipped>k__BackingField;
    public decimal ExecutionTime { get; private set; }
    public int TestsFailed { get; private set; }
    public int TestsRun { get; private set; }
    public int TestsSkipped { get; private set; }
    public TestCollectionFinished(IEnumerable`1<ITestCase> testCases, ITestCollection testCollection, decimal executionTime, int testsRun, int testsFailed, int testsSkipped);
    [CompilerGeneratedAttribute]
public sealed virtual decimal get_ExecutionTime();
    [CompilerGeneratedAttribute]
private void set_ExecutionTime(decimal value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_TestsFailed();
    [CompilerGeneratedAttribute]
private void set_TestsFailed(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_TestsRun();
    [CompilerGeneratedAttribute]
private void set_TestsRun(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_TestsSkipped();
    [CompilerGeneratedAttribute]
private void set_TestsSkipped(int value);
}
public class Xunit.Sdk.TestCollectionMessage : TestAssemblyMessage {
    [CompilerGeneratedAttribute]
private ITestCollection <TestCollection>k__BackingField;
    public ITestCollection TestCollection { get; private set; }
    public TestCollectionMessage(IEnumerable`1<ITestCase> testCases, ITestCollection testCollection);
    internal TestCollectionMessage(ITestCase testCase, ITestCollection testCollection);
    [CompilerGeneratedAttribute]
public sealed virtual ITestCollection get_TestCollection();
    [CompilerGeneratedAttribute]
private void set_TestCollection(ITestCollection value);
}
public abstract class Xunit.Sdk.TestCollectionRunner`1 : object {
    [CompilerGeneratedAttribute]
private ExceptionAggregator <Aggregator>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationTokenSource <CancellationTokenSource>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessageBus <MessageBus>k__BackingField;
    [CompilerGeneratedAttribute]
private ITestCaseOrderer <TestCaseOrderer>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<TTestCase> <TestCases>k__BackingField;
    [CompilerGeneratedAttribute]
private ITestCollection <TestCollection>k__BackingField;
    protected ExceptionAggregator Aggregator { get; protected set; }
    protected CancellationTokenSource CancellationTokenSource { get; protected set; }
    protected IMessageBus MessageBus { get; protected set; }
    protected ITestCaseOrderer TestCaseOrderer { get; protected set; }
    protected IEnumerable`1<TTestCase> TestCases { get; protected set; }
    protected ITestCollection TestCollection { get; protected set; }
    protected TestCollectionRunner`1(ITestCollection testCollection, IEnumerable`1<TTestCase> testCases, IMessageBus messageBus, ITestCaseOrderer testCaseOrderer, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource);
    [CompilerGeneratedAttribute]
protected ExceptionAggregator get_Aggregator();
    [CompilerGeneratedAttribute]
protected void set_Aggregator(ExceptionAggregator value);
    [CompilerGeneratedAttribute]
protected CancellationTokenSource get_CancellationTokenSource();
    [CompilerGeneratedAttribute]
protected void set_CancellationTokenSource(CancellationTokenSource value);
    [CompilerGeneratedAttribute]
protected IMessageBus get_MessageBus();
    [CompilerGeneratedAttribute]
protected void set_MessageBus(IMessageBus value);
    [CompilerGeneratedAttribute]
protected ITestCaseOrderer get_TestCaseOrderer();
    [CompilerGeneratedAttribute]
protected void set_TestCaseOrderer(ITestCaseOrderer value);
    [CompilerGeneratedAttribute]
protected IEnumerable`1<TTestCase> get_TestCases();
    [CompilerGeneratedAttribute]
protected void set_TestCases(IEnumerable`1<TTestCase> value);
    [CompilerGeneratedAttribute]
protected ITestCollection get_TestCollection();
    [CompilerGeneratedAttribute]
protected void set_TestCollection(ITestCollection value);
    protected virtual Task AfterTestCollectionStartingAsync();
    protected virtual Task BeforeTestCollectionFinishedAsync();
    [AsyncStateMachineAttribute("Xunit.Sdk.TestCollectionRunner`1/<RunAsync>d__27")]
public Task`1<RunSummary> RunAsync();
    [AsyncStateMachineAttribute("Xunit.Sdk.TestCollectionRunner`1/<RunTestClassesAsync>d__28")]
protected virtual Task`1<RunSummary> RunTestClassesAsync();
    protected abstract virtual Task`1<RunSummary> RunTestClassAsync(ITestClass testClass, IReflectionTypeInfo class, IEnumerable`1<TTestCase> testCases);
}
public class Xunit.Sdk.TestCollectionStarting : TestCollectionMessage {
    public TestCollectionStarting(IEnumerable`1<ITestCase> testCases, ITestCollection testCollection);
}
internal class Xunit.Sdk.TestDiscoveryVisitor : object {
    [CompilerGeneratedAttribute]
private ManualResetEvent <Finished>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ITestCase> <TestCases>k__BackingField;
    public ManualResetEvent Finished { get; }
    public List`1<ITestCase> TestCases { get; }
    [CompilerGeneratedAttribute]
public ManualResetEvent get_Finished();
    [CompilerGeneratedAttribute]
public List`1<ITestCase> get_TestCases();
    public sealed virtual void Dispose();
    public sealed virtual bool OnMessage(IMessageSinkMessage message);
}
public class Xunit.Sdk.TestFailed : TestResultMessage {
    [CompilerGeneratedAttribute]
private String[] <ExceptionTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Messages>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <StackTraces>k__BackingField;
    [CompilerGeneratedAttribute]
private Int32[] <ExceptionParentIndices>k__BackingField;
    public String[] ExceptionTypes { get; private set; }
    public String[] Messages { get; private set; }
    public String[] StackTraces { get; private set; }
    public Int32[] ExceptionParentIndices { get; private set; }
    public TestFailed(ITest test, decimal executionTime, string output, String[] exceptionTypes, String[] messages, String[] stackTraces, Int32[] exceptionParentIndices);
    public TestFailed(ITest test, decimal executionTime, string output, Exception ex);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_ExceptionTypes();
    [CompilerGeneratedAttribute]
private void set_ExceptionTypes(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_Messages();
    [CompilerGeneratedAttribute]
private void set_Messages(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_StackTraces();
    [CompilerGeneratedAttribute]
private void set_StackTraces(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual Int32[] get_ExceptionParentIndices();
    [CompilerGeneratedAttribute]
private void set_ExceptionParentIndices(Int32[] value);
}
public class Xunit.Sdk.TestFinished : TestMessage {
    [CompilerGeneratedAttribute]
private decimal <ExecutionTime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Output>k__BackingField;
    public decimal ExecutionTime { get; private set; }
    public string Output { get; private set; }
    public TestFinished(ITest test, decimal executionTime, string output);
    [CompilerGeneratedAttribute]
public sealed virtual decimal get_ExecutionTime();
    [CompilerGeneratedAttribute]
private void set_ExecutionTime(decimal value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Output();
    [CompilerGeneratedAttribute]
private void set_Output(string value);
}
public abstract class Xunit.Sdk.TestFramework : LongLivedMarshalByRefObject {
    [CompilerGeneratedAttribute]
private IMessageSink <DiagnosticMessageSink>k__BackingField;
    [CompilerGeneratedAttribute]
private DisposalTracker <DisposalTracker>k__BackingField;
    [CompilerGeneratedAttribute]
private ISourceInformationProvider <SourceInformationProvider>k__BackingField;
    public IMessageSink DiagnosticMessageSink { get; private set; }
    protected DisposalTracker DisposalTracker { get; protected set; }
    public ISourceInformationProvider SourceInformationProvider { get; public set; }
    protected TestFramework(IMessageSink diagnosticMessageSink);
    [CompilerGeneratedAttribute]
public IMessageSink get_DiagnosticMessageSink();
    [CompilerGeneratedAttribute]
private void set_DiagnosticMessageSink(IMessageSink value);
    [CompilerGeneratedAttribute]
protected DisposalTracker get_DisposalTracker();
    [CompilerGeneratedAttribute]
protected void set_DisposalTracker(DisposalTracker value);
    [CompilerGeneratedAttribute]
public ISourceInformationProvider get_SourceInformationProvider();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SourceInformationProvider(ISourceInformationProvider value);
    [AsyncStateMachineAttribute("Xunit.Sdk.TestFramework/<Dispose>d__13")]
public sealed virtual void Dispose();
    protected abstract virtual ITestFrameworkDiscoverer CreateDiscoverer(IAssemblyInfo assemblyInfo);
    protected abstract virtual ITestFrameworkExecutor CreateExecutor(AssemblyName assemblyName);
    public sealed virtual ITestFrameworkDiscoverer GetDiscoverer(IAssemblyInfo assemblyInfo);
    public sealed virtual ITestFrameworkExecutor GetExecutor(AssemblyName assemblyName);
}
public abstract class Xunit.Sdk.TestFrameworkDiscoverer : LongLivedMarshalByRefObject {
    private Lazy`1<string> targetFramework;
    [CompilerGeneratedAttribute]
private IAssemblyInfo <AssemblyInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessageSink <DiagnosticMessageSink>k__BackingField;
    [CompilerGeneratedAttribute]
private DisposalTracker <DisposalTracker>k__BackingField;
    [CompilerGeneratedAttribute]
private ISourceInformationProvider <SourceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestFrameworkDisplayName>k__BackingField;
    protected internal IAssemblyInfo AssemblyInfo { get; protected internal set; }
    protected IMessageSink DiagnosticMessageSink { get; protected set; }
    protected DisposalTracker DisposalTracker { get; protected set; }
    protected ISourceInformationProvider SourceProvider { get; protected set; }
    public string TargetFramework { get; }
    public string TestFrameworkDisplayName { get; protected set; }
    protected TestFrameworkDiscoverer(IAssemblyInfo assemblyInfo, ISourceInformationProvider sourceProvider, IMessageSink diagnosticMessageSink);
    [CompilerGeneratedAttribute]
protected internal IAssemblyInfo get_AssemblyInfo();
    [CompilerGeneratedAttribute]
protected internal void set_AssemblyInfo(IAssemblyInfo value);
    [CompilerGeneratedAttribute]
protected IMessageSink get_DiagnosticMessageSink();
    [CompilerGeneratedAttribute]
protected void set_DiagnosticMessageSink(IMessageSink value);
    [CompilerGeneratedAttribute]
protected DisposalTracker get_DisposalTracker();
    [CompilerGeneratedAttribute]
protected void set_DisposalTracker(DisposalTracker value);
    [CompilerGeneratedAttribute]
protected ISourceInformationProvider get_SourceProvider();
    [CompilerGeneratedAttribute]
protected void set_SourceProvider(ISourceInformationProvider value);
    public sealed virtual string get_TargetFramework();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TestFrameworkDisplayName();
    [CompilerGeneratedAttribute]
protected void set_TestFrameworkDisplayName(string value);
    protected internal abstract virtual ITestClass CreateTestClass(ITypeInfo class);
    public sealed virtual void Dispose();
    public sealed virtual void Find(bool includeSourceInformation, IMessageSink discoveryMessageSink, ITestFrameworkDiscoveryOptions discoveryOptions);
    private static IMessageBus CreateMessageBus(IMessageSink messageSink, ITestFrameworkDiscoveryOptions options);
    public sealed virtual void Find(string typeName, bool includeSourceInformation, IMessageSink discoveryMessageSink, ITestFrameworkDiscoveryOptions discoveryOptions);
    protected abstract virtual bool FindTestsForType(ITestClass testClass, bool includeSourceInformation, IMessageBus messageBus, ITestFrameworkDiscoveryOptions discoveryOptions);
    private bool FindTestsForTypeAndWrapExceptions(ITestClass testClass, bool includeSourceInformation, IMessageBus messageBus, ITestFrameworkDiscoveryOptions discoveryOptions);
    protected virtual bool IsValidTestClass(ITypeInfo type);
    protected bool ReportDiscoveredTestCase(ITestCase testCase, bool includeSourceInformation, IMessageBus messageBus);
    public virtual string Serialize(ITestCase testCase);
    [CompilerGeneratedAttribute]
private string <.ctor>b__1_0();
}
public abstract class Xunit.Sdk.TestFrameworkExecutor`1 : LongLivedMarshalByRefObject {
    [CompilerGeneratedAttribute]
private IAssemblyInfo <AssemblyInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessageSink <DiagnosticMessageSink>k__BackingField;
    [CompilerGeneratedAttribute]
private DisposalTracker <DisposalTracker>k__BackingField;
    [CompilerGeneratedAttribute]
private ISourceInformationProvider <SourceInformationProvider>k__BackingField;
    protected IAssemblyInfo AssemblyInfo { get; protected set; }
    protected IMessageSink DiagnosticMessageSink { get; protected set; }
    protected DisposalTracker DisposalTracker { get; protected set; }
    protected ISourceInformationProvider SourceInformationProvider { get; protected set; }
    protected TestFrameworkExecutor`1(AssemblyName assemblyName, ISourceInformationProvider sourceInformationProvider, IMessageSink diagnosticMessageSink);
    [CompilerGeneratedAttribute]
protected IAssemblyInfo get_AssemblyInfo();
    [CompilerGeneratedAttribute]
protected void set_AssemblyInfo(IAssemblyInfo value);
    [CompilerGeneratedAttribute]
protected IMessageSink get_DiagnosticMessageSink();
    [CompilerGeneratedAttribute]
protected void set_DiagnosticMessageSink(IMessageSink value);
    [CompilerGeneratedAttribute]
protected DisposalTracker get_DisposalTracker();
    [CompilerGeneratedAttribute]
protected void set_DisposalTracker(DisposalTracker value);
    [CompilerGeneratedAttribute]
protected ISourceInformationProvider get_SourceInformationProvider();
    [CompilerGeneratedAttribute]
protected void set_SourceInformationProvider(ISourceInformationProvider value);
    protected abstract virtual ITestFrameworkDiscoverer CreateDiscoverer();
    public virtual ITestCase Deserialize(string value);
    public sealed virtual void Dispose();
    public virtual void RunAll(IMessageSink executionMessageSink, ITestFrameworkDiscoveryOptions discoveryOptions, ITestFrameworkExecutionOptions executionOptions);
    public virtual void RunTests(IEnumerable`1<ITestCase> testCases, IMessageSink executionMessageSink, ITestFrameworkExecutionOptions executionOptions);
    protected abstract virtual void RunTestCases(IEnumerable`1<TTestCase> testCases, IMessageSink executionMessageSink, ITestFrameworkExecutionOptions executionOptions);
}
public class Xunit.Sdk.TestFrameworkProxy : LongLivedMarshalByRefObject {
    [CompilerGeneratedAttribute]
private ITestFramework <InnerTestFramework>k__BackingField;
    public ITestFramework InnerTestFramework { get; private set; }
    unknown ISourceInformationProvider SourceInformationProvider {public set; }
    public TestFrameworkProxy(object testAssemblyObject, object sourceInformationProviderObject, object diagnosticMessageSinkObject);
    [CompilerGeneratedAttribute]
public ITestFramework get_InnerTestFramework();
    [CompilerGeneratedAttribute]
private void set_InnerTestFramework(ITestFramework value);
    public sealed virtual void set_SourceInformationProvider(ISourceInformationProvider value);
    private static ITestFramework CreateInnerTestFramework(Type testFrameworkType, IMessageSink diagnosticMessageSink);
    public sealed virtual ITestFrameworkDiscoverer GetDiscoverer(IAssemblyInfo assembly);
    public sealed virtual ITestFrameworkExecutor GetExecutor(AssemblyName assemblyName);
    private static Type GetTestFrameworkType(IAssemblyInfo testAssembly, IMessageSink diagnosticMessageSink);
    public sealed virtual void Dispose();
}
public class Xunit.Sdk.TestFrameworkTypeDiscoverer : object {
    public sealed virtual Type GetTestFrameworkType(IAttributeInfo attribute);
}
public abstract class Xunit.Sdk.TestInvoker`1 : object {
    private static MethodInfo startAsTaskOpenGenericMethod;
    [CompilerGeneratedAttribute]
private ExceptionAggregator <Aggregator>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationTokenSource <CancellationTokenSource>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <ConstructorArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessageBus <MessageBus>k__BackingField;
    [CompilerGeneratedAttribute]
private ITest <Test>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <TestClass>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodInfo <TestMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <TestMethodArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private ExecutionTimer <Timer>k__BackingField;
    protected ExceptionAggregator Aggregator { get; protected set; }
    protected CancellationTokenSource CancellationTokenSource { get; protected set; }
    protected Object[] ConstructorArguments { get; protected set; }
    protected string DisplayName { get; }
    protected IMessageBus MessageBus { get; protected set; }
    protected ITest Test { get; protected set; }
    protected TTestCase TestCase { get; }
    protected Type TestClass { get; protected set; }
    protected MethodInfo TestMethod { get; protected set; }
    protected Object[] TestMethodArguments { get; protected set; }
    protected ExecutionTimer Timer { get; protected set; }
    protected TestInvoker`1(ITest test, IMessageBus messageBus, Type testClass, Object[] constructorArguments, MethodInfo testMethod, Object[] testMethodArguments, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource);
    [CompilerGeneratedAttribute]
protected ExceptionAggregator get_Aggregator();
    [CompilerGeneratedAttribute]
protected void set_Aggregator(ExceptionAggregator value);
    [CompilerGeneratedAttribute]
protected CancellationTokenSource get_CancellationTokenSource();
    [CompilerGeneratedAttribute]
protected void set_CancellationTokenSource(CancellationTokenSource value);
    [CompilerGeneratedAttribute]
protected Object[] get_ConstructorArguments();
    [CompilerGeneratedAttribute]
protected void set_ConstructorArguments(Object[] value);
    protected string get_DisplayName();
    [CompilerGeneratedAttribute]
protected IMessageBus get_MessageBus();
    [CompilerGeneratedAttribute]
protected void set_MessageBus(IMessageBus value);
    [CompilerGeneratedAttribute]
protected ITest get_Test();
    [CompilerGeneratedAttribute]
protected void set_Test(ITest value);
    protected TTestCase get_TestCase();
    [CompilerGeneratedAttribute]
protected Type get_TestClass();
    [CompilerGeneratedAttribute]
protected void set_TestClass(Type value);
    [CompilerGeneratedAttribute]
protected MethodInfo get_TestMethod();
    [CompilerGeneratedAttribute]
protected void set_TestMethod(MethodInfo value);
    [CompilerGeneratedAttribute]
protected Object[] get_TestMethodArguments();
    [CompilerGeneratedAttribute]
protected void set_TestMethodArguments(Object[] value);
    [CompilerGeneratedAttribute]
protected ExecutionTimer get_Timer();
    [CompilerGeneratedAttribute]
protected void set_Timer(ExecutionTimer value);
    protected virtual object CreateTestClass();
    protected virtual Task AfterTestMethodInvokedAsync();
    protected virtual Task BeforeTestMethodInvokedAsync();
    protected virtual object CallTestMethod(object testClassInstance);
    public static Task GetTaskFromResult(object obj);
    public Task`1<decimal> RunAsync();
    [AsyncStateMachineAttribute("Xunit.Sdk.TestInvoker`1/<InvokeTestMethodAsync>d__48")]
protected virtual Task`1<decimal> InvokeTestMethodAsync(object testClassInstance);
    [SecuritySafeCriticalAttribute]
private static void SetSynchronizationContext(SynchronizationContext context);
    [AsyncStateMachineAttribute("Xunit.Sdk.TestInvoker`1/<<RunAsync>b__47_0>d")]
[CompilerGeneratedAttribute]
private Task`1<decimal> <RunAsync>b__47_0();
}
public class Xunit.Sdk.TestMessage : TestCaseMessage {
    [CompilerGeneratedAttribute]
private ITest <Test>k__BackingField;
    public ITest Test { get; private set; }
    public TestMessage(ITest test);
    [CompilerGeneratedAttribute]
public sealed virtual ITest get_Test();
    [CompilerGeneratedAttribute]
private void set_Test(ITest value);
}
[DebuggerDisplayAttribute("\{ class = {TestClass.Class.Name}, method = {Method.Name} \}")]
public class Xunit.Sdk.TestMethod : LongLivedMarshalByRefObject {
    [CompilerGeneratedAttribute]
private IMethodInfo <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private ITestClass <TestClass>k__BackingField;
    public IMethodInfo Method { get; public set; }
    public ITestClass TestClass { get; public set; }
    public TestMethod(ITestClass class, IMethodInfo method);
    [CompilerGeneratedAttribute]
public sealed virtual IMethodInfo get_Method();
    [CompilerGeneratedAttribute]
public void set_Method(IMethodInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual ITestClass get_TestClass();
    [CompilerGeneratedAttribute]
public void set_TestClass(ITestClass value);
    public sealed virtual void Serialize(IXunitSerializationInfo info);
    public sealed virtual void Deserialize(IXunitSerializationInfo info);
}
public class Xunit.Sdk.TestMethodCleanupFailure : TestMethodMessage {
    [CompilerGeneratedAttribute]
private String[] <ExceptionTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Messages>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <StackTraces>k__BackingField;
    [CompilerGeneratedAttribute]
private Int32[] <ExceptionParentIndices>k__BackingField;
    public String[] ExceptionTypes { get; private set; }
    public String[] Messages { get; private set; }
    public String[] StackTraces { get; private set; }
    public Int32[] ExceptionParentIndices { get; private set; }
    public TestMethodCleanupFailure(IEnumerable`1<ITestCase> testCases, ITestMethod testMethod, String[] exceptionTypes, String[] messages, String[] stackTraces, Int32[] exceptionParentIndices);
    public TestMethodCleanupFailure(IEnumerable`1<ITestCase> testCases, ITestMethod testMethod, Exception ex);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_ExceptionTypes();
    [CompilerGeneratedAttribute]
private void set_ExceptionTypes(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_Messages();
    [CompilerGeneratedAttribute]
private void set_Messages(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_StackTraces();
    [CompilerGeneratedAttribute]
private void set_StackTraces(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual Int32[] get_ExceptionParentIndices();
    [CompilerGeneratedAttribute]
private void set_ExceptionParentIndices(Int32[] value);
}
public class Xunit.Sdk.TestMethodComparer : object {
    public static TestMethodComparer Instance;
    private static TestMethodComparer();
    public sealed virtual bool Equals(ITestMethod x, ITestMethod y);
    public sealed virtual int GetHashCode(ITestMethod obj);
}
public class Xunit.Sdk.TestMethodFinished : TestMethodMessage {
    [CompilerGeneratedAttribute]
private decimal <ExecutionTime>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TestsFailed>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TestsRun>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TestsSkipped>k__BackingField;
    public decimal ExecutionTime { get; private set; }
    public int TestsFailed { get; private set; }
    public int TestsRun { get; private set; }
    public int TestsSkipped { get; private set; }
    public TestMethodFinished(IEnumerable`1<ITestCase> testCases, ITestMethod testMethod, decimal executionTime, int testsRun, int testsFailed, int testsSkipped);
    [CompilerGeneratedAttribute]
public sealed virtual decimal get_ExecutionTime();
    [CompilerGeneratedAttribute]
private void set_ExecutionTime(decimal value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_TestsFailed();
    [CompilerGeneratedAttribute]
private void set_TestsFailed(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_TestsRun();
    [CompilerGeneratedAttribute]
private void set_TestsRun(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_TestsSkipped();
    [CompilerGeneratedAttribute]
private void set_TestsSkipped(int value);
}
public class Xunit.Sdk.TestMethodMessage : TestClassMessage {
    [CompilerGeneratedAttribute]
private ITestMethod <TestMethod>k__BackingField;
    public ITestMethod TestMethod { get; public set; }
    public TestMethodMessage(IEnumerable`1<ITestCase> testCases, ITestMethod testMethod);
    internal TestMethodMessage(ITestCase testCase, ITestMethod testMethod);
    [CompilerGeneratedAttribute]
public sealed virtual ITestMethod get_TestMethod();
    [CompilerGeneratedAttribute]
public void set_TestMethod(ITestMethod value);
}
public abstract class Xunit.Sdk.TestMethodRunner`1 : object {
    [CompilerGeneratedAttribute]
private ExceptionAggregator <Aggregator>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationTokenSource <CancellationTokenSource>k__BackingField;
    [CompilerGeneratedAttribute]
private IReflectionTypeInfo <Class>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessageBus <MessageBus>k__BackingField;
    [CompilerGeneratedAttribute]
private IReflectionMethodInfo <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<TTestCase> <TestCases>k__BackingField;
    [CompilerGeneratedAttribute]
private ITestMethod <TestMethod>k__BackingField;
    protected ExceptionAggregator Aggregator { get; protected set; }
    protected CancellationTokenSource CancellationTokenSource { get; protected set; }
    protected IReflectionTypeInfo Class { get; protected set; }
    protected IMessageBus MessageBus { get; protected set; }
    protected IReflectionMethodInfo Method { get; protected set; }
    protected IEnumerable`1<TTestCase> TestCases { get; protected set; }
    protected ITestMethod TestMethod { get; protected set; }
    protected TestMethodRunner`1(ITestMethod testMethod, IReflectionTypeInfo class, IReflectionMethodInfo method, IEnumerable`1<TTestCase> testCases, IMessageBus messageBus, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource);
    [CompilerGeneratedAttribute]
protected ExceptionAggregator get_Aggregator();
    [CompilerGeneratedAttribute]
protected void set_Aggregator(ExceptionAggregator value);
    [CompilerGeneratedAttribute]
protected CancellationTokenSource get_CancellationTokenSource();
    [CompilerGeneratedAttribute]
protected void set_CancellationTokenSource(CancellationTokenSource value);
    [CompilerGeneratedAttribute]
protected IReflectionTypeInfo get_Class();
    [CompilerGeneratedAttribute]
protected void set_Class(IReflectionTypeInfo value);
    [CompilerGeneratedAttribute]
protected IMessageBus get_MessageBus();
    [CompilerGeneratedAttribute]
protected void set_MessageBus(IMessageBus value);
    [CompilerGeneratedAttribute]
protected IReflectionMethodInfo get_Method();
    [CompilerGeneratedAttribute]
protected void set_Method(IReflectionMethodInfo value);
    [CompilerGeneratedAttribute]
protected IEnumerable`1<TTestCase> get_TestCases();
    [CompilerGeneratedAttribute]
protected void set_TestCases(IEnumerable`1<TTestCase> value);
    [CompilerGeneratedAttribute]
protected ITestMethod get_TestMethod();
    [CompilerGeneratedAttribute]
protected void set_TestMethod(ITestMethod value);
    protected virtual void AfterTestMethodStarting();
    protected virtual void BeforeTestMethodFinished();
    [AsyncStateMachineAttribute("Xunit.Sdk.TestMethodRunner`1/<RunAsync>d__31")]
public Task`1<RunSummary> RunAsync();
    [AsyncStateMachineAttribute("Xunit.Sdk.TestMethodRunner`1/<RunTestCasesAsync>d__32")]
protected virtual Task`1<RunSummary> RunTestCasesAsync();
    protected abstract virtual Task`1<RunSummary> RunTestCaseAsync(TTestCase testCase);
}
public class Xunit.Sdk.TestMethodStarting : TestMethodMessage {
    public TestMethodStarting(IEnumerable`1<ITestCase> testCases, ITestMethod testMethod);
}
public abstract class Xunit.Sdk.TestMethodTestCase : LongLivedMarshalByRefObject {
    private string displayName;
    private DisplayNameFormatter formatter;
    private bool initialized;
    private IMethodInfo method;
    private ITypeInfo[] methodGenericTypes;
    private string skipReason;
    private Dictionary`2<string, List`1<string>> traits;
    private String modreq(System.Runtime.CompilerServices.IsVolatile) uniqueID;
    [CompilerGeneratedAttribute]
private TestMethodDisplay <DefaultMethodDisplay>k__BackingField;
    [CompilerGeneratedAttribute]
private TestMethodDisplayOptions <DefaultMethodDisplayOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <InitializationException>k__BackingField;
    [CompilerGeneratedAttribute]
private ISourceInformation <SourceInformation>k__BackingField;
    [CompilerGeneratedAttribute]
private ITestMethod <TestMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <TestMethodArguments>k__BackingField;
    protected string BaseDisplayName { get; }
    protected internal TestMethodDisplay DefaultMethodDisplay { get; private set; }
    protected internal TestMethodDisplayOptions DefaultMethodDisplayOptions { get; private set; }
    public string DisplayName { get; protected set; }
    public Exception InitializationException { get; protected set; }
    public IMethodInfo Method { get; protected set; }
    protected ITypeInfo[] MethodGenericTypes { get; }
    public string SkipReason { get; protected set; }
    public ISourceInformation SourceInformation { get; public set; }
    public ITestMethod TestMethod { get; protected set; }
    public Object[] TestMethodArguments { get; protected set; }
    public Dictionary`2<string, List`1<string>> Traits { get; protected set; }
    public string UniqueID { get; }
    [ObsoleteAttribute("Please call the constructor which takes TestMethodDisplayOptions")]
protected TestMethodTestCase(TestMethodDisplay defaultMethodDisplay, ITestMethod testMethod, Object[] testMethodArguments);
    protected TestMethodTestCase(TestMethodDisplay defaultMethodDisplay, TestMethodDisplayOptions defaultMethodDisplayOptions, ITestMethod testMethod, Object[] testMethodArguments);
    protected string get_BaseDisplayName();
    [CompilerGeneratedAttribute]
protected internal TestMethodDisplay get_DefaultMethodDisplay();
    [CompilerGeneratedAttribute]
private void set_DefaultMethodDisplay(TestMethodDisplay value);
    [CompilerGeneratedAttribute]
protected internal TestMethodDisplayOptions get_DefaultMethodDisplayOptions();
    [CompilerGeneratedAttribute]
private void set_DefaultMethodDisplayOptions(TestMethodDisplayOptions value);
    public sealed virtual string get_DisplayName();
    protected void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Exception get_InitializationException();
    [CompilerGeneratedAttribute]
protected void set_InitializationException(Exception value);
    public sealed virtual IMethodInfo get_Method();
    protected void set_Method(IMethodInfo value);
    protected ITypeInfo[] get_MethodGenericTypes();
    public sealed virtual string get_SkipReason();
    protected void set_SkipReason(string value);
    [CompilerGeneratedAttribute]
public sealed virtual ISourceInformation get_SourceInformation();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SourceInformation(ISourceInformation value);
    [CompilerGeneratedAttribute]
public sealed virtual ITestMethod get_TestMethod();
    [CompilerGeneratedAttribute]
protected void set_TestMethod(ITestMethod value);
    [CompilerGeneratedAttribute]
public sealed virtual Object[] get_TestMethodArguments();
    [CompilerGeneratedAttribute]
protected void set_TestMethodArguments(Object[] value);
    public sealed virtual Dictionary`2<string, List`1<string>> get_Traits();
    protected void set_Traits(Dictionary`2<string, List`1<string>> value);
    public sealed virtual string get_UniqueID();
    public virtual void Dispose();
    protected void EnsureInitialized();
    protected virtual string GetUniqueID();
    private static string BytesToHexString(Byte[] bytes);
    private static char NibbleToHexChar(int b);
    protected virtual void Initialize();
    private static void Write(Stream stream, string value);
    public virtual void Serialize(IXunitSerializationInfo data);
    public virtual void Deserialize(IXunitSerializationInfo data);
}
public class Xunit.Sdk.TestOutput : TestMessage {
    [CompilerGeneratedAttribute]
private string <Output>k__BackingField;
    public string Output { get; private set; }
    public TestOutput(ITest test, string output);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Output();
    [CompilerGeneratedAttribute]
private void set_Output(string value);
}
public class Xunit.Sdk.TestOutputHelper : object {
    private StringBuilder buffer;
    private IMessageBus messageBus;
    private ITest test;
    private object lockObject;
    public string Output { get; }
    public string get_Output();
    public void Initialize(IMessageBus messageBus, ITest test);
    private void GuardInitialized();
    private void QueueTestOutput(string output);
    private static string EscapeInvalidHexChars(string s);
    public void Uninitialize();
    public sealed virtual void WriteLine(string message);
    public sealed virtual void WriteLine(string format, Object[] args);
}
public class Xunit.Sdk.TestPassed : TestResultMessage {
    public TestPassed(ITest test, decimal executionTime, string output);
}
public class Xunit.Sdk.TestResultMessage : TestMessage {
    [CompilerGeneratedAttribute]
private decimal <ExecutionTime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Output>k__BackingField;
    public decimal ExecutionTime { get; private set; }
    public string Output { get; private set; }
    public TestResultMessage(ITest test, decimal executionTime, string output);
    [CompilerGeneratedAttribute]
public sealed virtual decimal get_ExecutionTime();
    [CompilerGeneratedAttribute]
private void set_ExecutionTime(decimal value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Output();
    [CompilerGeneratedAttribute]
private void set_Output(string value);
}
public abstract class Xunit.Sdk.TestRunner`1 : object {
    [CompilerGeneratedAttribute]
private ExceptionAggregator <Aggregator>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationTokenSource <CancellationTokenSource>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <ConstructorArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessageBus <MessageBus>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SkipReason>k__BackingField;
    [CompilerGeneratedAttribute]
private ITest <Test>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <TestClass>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodInfo <TestMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <TestMethodArguments>k__BackingField;
    protected ExceptionAggregator Aggregator { get; protected set; }
    protected CancellationTokenSource CancellationTokenSource { get; protected set; }
    protected Object[] ConstructorArguments { get; protected set; }
    protected string DisplayName { get; }
    protected IMessageBus MessageBus { get; protected set; }
    protected string SkipReason { get; protected set; }
    protected ITest Test { get; protected set; }
    protected TTestCase TestCase { get; }
    protected Type TestClass { get; protected set; }
    protected MethodInfo TestMethod { get; protected set; }
    protected Object[] TestMethodArguments { get; protected set; }
    protected TestRunner`1(ITest test, IMessageBus messageBus, Type testClass, Object[] constructorArguments, MethodInfo testMethod, Object[] testMethodArguments, string skipReason, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource);
    [CompilerGeneratedAttribute]
protected ExceptionAggregator get_Aggregator();
    [CompilerGeneratedAttribute]
protected void set_Aggregator(ExceptionAggregator value);
    [CompilerGeneratedAttribute]
protected CancellationTokenSource get_CancellationTokenSource();
    [CompilerGeneratedAttribute]
protected void set_CancellationTokenSource(CancellationTokenSource value);
    [CompilerGeneratedAttribute]
protected Object[] get_ConstructorArguments();
    [CompilerGeneratedAttribute]
protected void set_ConstructorArguments(Object[] value);
    protected string get_DisplayName();
    [CompilerGeneratedAttribute]
protected IMessageBus get_MessageBus();
    [CompilerGeneratedAttribute]
protected void set_MessageBus(IMessageBus value);
    [CompilerGeneratedAttribute]
protected string get_SkipReason();
    [CompilerGeneratedAttribute]
protected void set_SkipReason(string value);
    [CompilerGeneratedAttribute]
protected ITest get_Test();
    [CompilerGeneratedAttribute]
protected void set_Test(ITest value);
    protected TTestCase get_TestCase();
    [CompilerGeneratedAttribute]
protected Type get_TestClass();
    [CompilerGeneratedAttribute]
protected void set_TestClass(Type value);
    [CompilerGeneratedAttribute]
protected MethodInfo get_TestMethod();
    [CompilerGeneratedAttribute]
protected void set_TestMethod(MethodInfo value);
    [CompilerGeneratedAttribute]
protected Object[] get_TestMethodArguments();
    [CompilerGeneratedAttribute]
protected void set_TestMethodArguments(Object[] value);
    protected virtual void AfterTestStarting();
    protected virtual void BeforeTestFinished();
    [AsyncStateMachineAttribute("Xunit.Sdk.TestRunner`1/<RunAsync>d__43")]
public Task`1<RunSummary> RunAsync();
    protected abstract virtual Task`1<Tuple`2<decimal, string>> InvokeTestAsync(ExceptionAggregator aggregator);
}
public class Xunit.Sdk.TestSkipped : TestResultMessage {
    [CompilerGeneratedAttribute]
private string <Reason>k__BackingField;
    public string Reason { get; private set; }
    public TestSkipped(ITest test, string reason);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Reason();
    [CompilerGeneratedAttribute]
private void set_Reason(string value);
}
public class Xunit.Sdk.TestStarting : TestMessage {
    public TestStarting(ITest test);
}
public class Xunit.Sdk.TestTimeoutException : Exception {
    public TestTimeoutException(int timeout);
}
public class Xunit.Sdk.TheoryDiscoverer : object {
    [CompilerGeneratedAttribute]
private IMessageSink <DiagnosticMessageSink>k__BackingField;
    protected IMessageSink DiagnosticMessageSink { get; }
    public TheoryDiscoverer(IMessageSink diagnosticMessageSink);
    [CompilerGeneratedAttribute]
protected IMessageSink get_DiagnosticMessageSink();
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Please override CreateTestCasesForDataRow instead")]
protected virtual IXunitTestCase CreateTestCaseForDataRow(ITestFrameworkDiscoveryOptions discoveryOptions, ITestMethod testMethod, IAttributeInfo theoryAttribute, Object[] dataRow);
    protected virtual IEnumerable`1<IXunitTestCase> CreateTestCasesForDataRow(ITestFrameworkDiscoveryOptions discoveryOptions, ITestMethod testMethod, IAttributeInfo theoryAttribute, Object[] dataRow);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Please override CreateTestCasesForSkip instead")]
protected virtual IXunitTestCase CreateTestCaseForSkip(ITestFrameworkDiscoveryOptions discoveryOptions, ITestMethod testMethod, IAttributeInfo theoryAttribute, string skipReason);
    protected virtual IEnumerable`1<IXunitTestCase> CreateTestCasesForSkip(ITestFrameworkDiscoveryOptions discoveryOptions, ITestMethod testMethod, IAttributeInfo theoryAttribute, string skipReason);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Please override CreateTestCasesForTheory instead")]
protected virtual IXunitTestCase CreateTestCaseForTheory(ITestFrameworkDiscoveryOptions discoveryOptions, ITestMethod testMethod, IAttributeInfo theoryAttribute);
    protected virtual IEnumerable`1<IXunitTestCase> CreateTestCasesForTheory(ITestFrameworkDiscoveryOptions discoveryOptions, ITestMethod testMethod, IAttributeInfo theoryAttribute);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Please override CreateTestCasesForSkippedDataRow instead")]
protected virtual IXunitTestCase CreateTestCaseForSkippedDataRow(ITestFrameworkDiscoveryOptions discoveryOptions, ITestMethod testMethod, IAttributeInfo theoryAttribute, Object[] dataRow, string skipReason);
    protected virtual IEnumerable`1<IXunitTestCase> CreateTestCasesForSkippedDataRow(ITestFrameworkDiscoveryOptions discoveryOptions, ITestMethod testMethod, IAttributeInfo theoryAttribute, Object[] dataRow, string skipReason);
    public virtual IEnumerable`1<IXunitTestCase> Discover(ITestFrameworkDiscoveryOptions discoveryOptions, ITestMethod testMethod, IAttributeInfo theoryAttribute);
}
public static class Xunit.Sdk.TraitHelper : object {
    public static IReadOnlyList`1<KeyValuePair`2<string, string>> GetTraits(MemberInfo member);
    private static CustomAttributeData FindDiscovererAttributeType(TypeInfo traitAttribute);
}
[ExtensionAttribute]
public static class Xunit.Sdk.TypeUtility : object {
    private static ITypeInfo ObjectTypeInfo;
    private static TypeUtility();
    public static string ConvertToSimpleTypeName(ITypeInfo type);
    [ExtensionAttribute]
public static Object[] ResolveMethodArguments(MethodBase testMethod, Object[] arguments);
    private static object TryConvertObject(object argumentValue, Type parameterType);
    private static object PerformDefinedConversions(object argumentValue, Type conversionDeclaringType);
    [ExtensionAttribute]
public static string GetDisplayNameWithArguments(IMethodInfo method, string baseDisplayName, Object[] arguments, ITypeInfo[] genericTypes);
    private static string GetParameterName(IParameterInfo[] parameters, int index);
    private static string ParameterToDisplayValue(string parameterName, object parameterValue);
    private static string ResolveGenericDisplay(ITypeInfo[] genericTypes);
    [ExtensionAttribute]
private static bool ResolveGenericParameter(ITypeInfo genericType, ITypeInfo methodParameterType, Type passedParameterType, Type& resultType);
    private static Type GetArrayElementTypeOrThis(Type type);
    private static ITypeInfo StripElementType(ITypeInfo type, Boolean& isArray);
    [ExtensionAttribute]
private static bool ResolveMismatchedGenericArguments(ITypeInfo genericType, Type passedParameterType, ITypeInfo[] methodGenericTypeArguments, Type& resultType);
    [ExtensionAttribute]
public static ITypeInfo ResolveGenericType(ITypeInfo genericType, Object[] parameters, IParameterInfo[] parameterInfos);
    [ExtensionAttribute]
public static ITypeInfo[] ResolveGenericTypes(IMethodInfo method, Object[] parameters);
    [ExtensionAttribute]
internal static object GetDefaultValue(TypeInfo typeInfo);
}
public class Xunit.Sdk.XunitSkippedDataRowTestCase : XunitTestCase {
    private string skipReason;
    [ObsoleteAttribute("Please call the constructor which takes TestMethodDisplayOptions")]
public XunitSkippedDataRowTestCase(IMessageSink diagnosticMessageSink, TestMethodDisplay defaultMethodDisplay, ITestMethod testMethod, string skipReason, Object[] testMethodArguments);
    public XunitSkippedDataRowTestCase(IMessageSink diagnosticMessageSink, TestMethodDisplay defaultMethodDisplay, TestMethodDisplayOptions defaultMethodDisplayOptions, ITestMethod testMethod, string skipReason, Object[] testMethodArguments);
    public virtual void Deserialize(IXunitSerializationInfo data);
    protected virtual string GetSkipReason(IAttributeInfo factAttribute);
    public virtual void Serialize(IXunitSerializationInfo data);
}
public class Xunit.Sdk.XunitTest : LongLivedMarshalByRefObject {
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private IXunitTestCase <TestCase>k__BackingField;
    public string DisplayName { get; private set; }
    public IXunitTestCase TestCase { get; private set; }
    private ITestCase Xunit.Abstractions.ITest.TestCase { get; }
    public XunitTest(IXunitTestCase testCase, string displayName);
    [CompilerGeneratedAttribute]
public sealed virtual string get_DisplayName();
    [CompilerGeneratedAttribute]
private void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public IXunitTestCase get_TestCase();
    [CompilerGeneratedAttribute]
private void set_TestCase(IXunitTestCase value);
    private sealed virtual override ITestCase Xunit.Abstractions.ITest.get_TestCase();
}
public class Xunit.Sdk.XunitTestAssemblyRunner : TestAssemblyRunner`1<IXunitTestCase> {
    private IAttributeInfo collectionBehaviorAttribute;
    private bool disableParallelization;
    private bool initialized;
    private int maxParallelThreads;
    private SynchronizationContext originalSyncContext;
    private MaxConcurrencySyncContext syncContext;
    public XunitTestAssemblyRunner(ITestAssembly testAssembly, IEnumerable`1<IXunitTestCase> testCases, IMessageSink diagnosticMessageSink, IMessageSink executionMessageSink, ITestFrameworkExecutionOptions executionOptions);
    public virtual void Dispose();
    protected virtual string GetTestFrameworkDisplayName();
    protected virtual string GetTestFrameworkEnvironment();
    protected virtual void SetupSyncContext(int maxParallelThreads);
    protected void Initialize();
    protected virtual Task AfterTestAssemblyStartingAsync();
    protected virtual Task BeforeTestAssemblyFinishedAsync();
    [AsyncStateMachineAttribute("Xunit.Sdk.XunitTestAssemblyRunner/<RunTestCollectionsAsync>d__14")]
protected virtual Task`1<RunSummary> RunTestCollectionsAsync(IMessageBus messageBus, CancellationTokenSource cancellationTokenSource);
    protected virtual Task`1<RunSummary> RunTestCollectionAsync(IMessageBus messageBus, ITestCollection testCollection, IEnumerable`1<IXunitTestCase> testCases, CancellationTokenSource cancellationTokenSource);
    [SecuritySafeCriticalAttribute]
private static void SetSynchronizationContext(SynchronizationContext context);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<RunSummary> <>n__0(IMessageBus messageBus, CancellationTokenSource cancellationTokenSource);
}
[DebuggerDisplayAttribute("\{ class = {TestMethod.TestClass.Class.Name}, method = {TestMethod.Method.Name}, display = {DisplayName}, skip = {SkipReason} \}")]
public class Xunit.Sdk.XunitTestCase : TestMethodTestCase {
    private static ConcurrentDictionary`2<string, IEnumerable`1<IAttributeInfo>> assemblyTraitAttributeCache;
    private static ConcurrentDictionary`2<string, IEnumerable`1<IAttributeInfo>> typeTraitAttributeCache;
    private int timeout;
    [CompilerGeneratedAttribute]
private IMessageSink <DiagnosticMessageSink>k__BackingField;
    protected IMessageSink DiagnosticMessageSink { get; }
    public int Timeout { get; protected set; }
    [ObsoleteAttribute("Please call the constructor which takes TestMethodDisplayOptions")]
public XunitTestCase(IMessageSink diagnosticMessageSink, TestMethodDisplay defaultMethodDisplay, ITestMethod testMethod, Object[] testMethodArguments);
    public XunitTestCase(IMessageSink diagnosticMessageSink, TestMethodDisplay defaultMethodDisplay, TestMethodDisplayOptions defaultMethodDisplayOptions, ITestMethod testMethod, Object[] testMethodArguments);
    private static XunitTestCase();
    [CompilerGeneratedAttribute]
protected IMessageSink get_DiagnosticMessageSink();
    public sealed virtual int get_Timeout();
    protected void set_Timeout(int value);
    protected virtual string GetDisplayName(IAttributeInfo factAttribute, string displayName);
    protected virtual string GetSkipReason(IAttributeInfo factAttribute);
    protected virtual int GetTimeout(IAttributeInfo factAttribute);
    protected virtual void Initialize();
    private static IEnumerable`1<IAttributeInfo> GetCachedTraitAttributes(IAssemblyInfo assembly);
    private static IEnumerable`1<IAttributeInfo> GetCachedTraitAttributes(ITypeInfo type);
    private static IEnumerable`1<IAttributeInfo> GetTraitAttributesData(ITestMethod testMethod);
    public virtual Task`1<RunSummary> RunAsync(IMessageSink diagnosticMessageSink, IMessageBus messageBus, Object[] constructorArguments, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource);
    public virtual void Serialize(IXunitSerializationInfo data);
    public virtual void Deserialize(IXunitSerializationInfo data);
}
public class Xunit.Sdk.XunitTestCaseRunner : TestCaseRunner`1<IXunitTestCase> {
    private List`1<BeforeAfterTestAttribute> beforeAfterAttributes;
    [CompilerGeneratedAttribute]
private Object[] <ConstructorArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SkipReason>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <TestClass>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodInfo <TestMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <TestMethodArguments>k__BackingField;
    public IReadOnlyList`1<BeforeAfterTestAttribute> BeforeAfterAttributes { get; }
    protected Object[] ConstructorArguments { get; protected set; }
    protected string DisplayName { get; protected set; }
    protected string SkipReason { get; protected set; }
    protected Type TestClass { get; protected set; }
    protected MethodInfo TestMethod { get; protected set; }
    protected Object[] TestMethodArguments { get; protected set; }
    public XunitTestCaseRunner(IXunitTestCase testCase, string displayName, string skipReason, Object[] constructorArguments, Object[] testMethodArguments, IMessageBus messageBus, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource);
    public IReadOnlyList`1<BeforeAfterTestAttribute> get_BeforeAfterAttributes();
    [CompilerGeneratedAttribute]
protected Object[] get_ConstructorArguments();
    [CompilerGeneratedAttribute]
protected void set_ConstructorArguments(Object[] value);
    [CompilerGeneratedAttribute]
protected string get_DisplayName();
    [CompilerGeneratedAttribute]
protected void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
protected string get_SkipReason();
    [CompilerGeneratedAttribute]
protected void set_SkipReason(string value);
    [CompilerGeneratedAttribute]
protected Type get_TestClass();
    [CompilerGeneratedAttribute]
protected void set_TestClass(Type value);
    [CompilerGeneratedAttribute]
protected MethodInfo get_TestMethod();
    [CompilerGeneratedAttribute]
protected void set_TestMethod(MethodInfo value);
    [CompilerGeneratedAttribute]
protected Object[] get_TestMethodArguments();
    [CompilerGeneratedAttribute]
protected void set_TestMethodArguments(Object[] value);
    protected virtual ITest CreateTest(IXunitTestCase testCase, string displayName);
    protected virtual XunitTestRunner CreateTestRunner(ITest test, IMessageBus messageBus, Type testClass, Object[] constructorArguments, MethodInfo testMethod, Object[] testMethodArguments, string skipReason, IReadOnlyList`1<BeforeAfterTestAttribute> beforeAfterAttributes, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource);
    protected virtual List`1<BeforeAfterTestAttribute> GetBeforeAfterTestAttributes();
    protected virtual Task`1<RunSummary> RunTestAsync();
}
public class Xunit.Sdk.XunitTestClassRunner : TestClassRunner`1<IXunitTestCase> {
    private IDictionary`2<Type, object> collectionFixtureMappings;
    [CompilerGeneratedAttribute]
private Dictionary`2<Type, object> <ClassFixtureMappings>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<IAsyncLifetime> <InitializedAsyncFixtures>k__BackingField;
    protected Dictionary`2<Type, object> ClassFixtureMappings { get; protected set; }
    protected HashSet`1<IAsyncLifetime> InitializedAsyncFixtures { get; protected set; }
    public XunitTestClassRunner(ITestClass testClass, IReflectionTypeInfo class, IEnumerable`1<IXunitTestCase> testCases, IMessageSink diagnosticMessageSink, IMessageBus messageBus, ITestCaseOrderer testCaseOrderer, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource, IDictionary`2<Type, object> collectionFixtureMappings);
    [CompilerGeneratedAttribute]
protected Dictionary`2<Type, object> get_ClassFixtureMappings();
    [CompilerGeneratedAttribute]
protected void set_ClassFixtureMappings(Dictionary`2<Type, object> value);
    [CompilerGeneratedAttribute]
protected HashSet`1<IAsyncLifetime> get_InitializedAsyncFixtures();
    [CompilerGeneratedAttribute]
protected void set_InitializedAsyncFixtures(HashSet`1<IAsyncLifetime> value);
    protected virtual void CreateClassFixture(Type fixtureType);
    [AsyncStateMachineAttribute("Xunit.Sdk.XunitTestClassRunner/<CreateClassFixtureAsync>d__11")]
private Task CreateClassFixtureAsync(Type fixtureType);
    protected virtual string FormatConstructorArgsMissingMessage(ConstructorInfo constructor, IReadOnlyList`1<Tuple`2<int, ParameterInfo>> unusedArguments);
    [AsyncStateMachineAttribute("Xunit.Sdk.XunitTestClassRunner/<AfterTestClassStartingAsync>d__13")]
protected virtual Task AfterTestClassStartingAsync();
    [AsyncStateMachineAttribute("Xunit.Sdk.XunitTestClassRunner/<BeforeTestClassFinishedAsync>d__14")]
protected virtual Task BeforeTestClassFinishedAsync();
    protected virtual Task`1<RunSummary> RunTestMethodAsync(ITestMethod testMethod, IReflectionMethodInfo method, IEnumerable`1<IXunitTestCase> testCases, Object[] constructorArguments);
    protected virtual ConstructorInfo SelectTestClassConstructor();
    protected virtual bool TryGetConstructorArgument(ConstructorInfo constructor, int index, ParameterInfo parameter, Object& argumentValue);
    [CompilerGeneratedAttribute]
private bool <CreateClassFixtureAsync>b__11_0(IAsyncLifetime fixture);
    [CompilerGeneratedAttribute]
private Task <CreateClassFixtureAsync>b__11_1(IAsyncLifetime fixture);
    [CompilerGeneratedAttribute]
private Task <BeforeTestClassFinishedAsync>b__14_0(IAsyncLifetime fixture);
}
public class Xunit.Sdk.XunitTestCollectionRunner : TestCollectionRunner`1<IXunitTestCase> {
    [CompilerGeneratedAttribute]
private Dictionary`2<Type, object> <CollectionFixtureMappings>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessageSink <DiagnosticMessageSink>k__BackingField;
    protected Dictionary`2<Type, object> CollectionFixtureMappings { get; protected set; }
    protected IMessageSink DiagnosticMessageSink { get; private set; }
    public XunitTestCollectionRunner(ITestCollection testCollection, IEnumerable`1<IXunitTestCase> testCases, IMessageSink diagnosticMessageSink, IMessageBus messageBus, ITestCaseOrderer testCaseOrderer, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource);
    [CompilerGeneratedAttribute]
protected Dictionary`2<Type, object> get_CollectionFixtureMappings();
    [CompilerGeneratedAttribute]
protected void set_CollectionFixtureMappings(Dictionary`2<Type, object> value);
    [CompilerGeneratedAttribute]
protected IMessageSink get_DiagnosticMessageSink();
    [CompilerGeneratedAttribute]
private void set_DiagnosticMessageSink(IMessageSink value);
    [AsyncStateMachineAttribute("Xunit.Sdk.XunitTestCollectionRunner/<AfterTestCollectionStartingAsync>d__9")]
protected virtual Task AfterTestCollectionStartingAsync();
    [AsyncStateMachineAttribute("Xunit.Sdk.XunitTestCollectionRunner/<BeforeTestCollectionFinishedAsync>d__10")]
protected virtual Task BeforeTestCollectionFinishedAsync();
    protected virtual void CreateCollectionFixture(Type fixtureType);
    [AsyncStateMachineAttribute("Xunit.Sdk.XunitTestCollectionRunner/<CreateCollectionFixturesAsync>d__12")]
private Task CreateCollectionFixturesAsync();
    protected virtual ITestCaseOrderer GetTestCaseOrderer();
    protected virtual Task`1<RunSummary> RunTestClassAsync(ITestClass testClass, IReflectionTypeInfo class, IEnumerable`1<IXunitTestCase> testCases);
    [CompilerGeneratedAttribute]
private Task <BeforeTestCollectionFinishedAsync>b__10_0(IAsyncLifetime fixture);
    [CompilerGeneratedAttribute]
private Task <CreateCollectionFixturesAsync>b__12_0(IAsyncLifetime fixture);
}
public class Xunit.Sdk.XunitTestFramework : TestFramework {
    public XunitTestFramework(IMessageSink messageSink);
    protected virtual ITestFrameworkDiscoverer CreateDiscoverer(IAssemblyInfo assemblyInfo);
    protected virtual ITestFrameworkExecutor CreateExecutor(AssemblyName assemblyName);
}
public class Xunit.Sdk.XunitTestFrameworkDiscoverer : TestFrameworkDiscoverer {
    private static Type XunitTestCaseType;
    public static string DisplayName;
    [CompilerGeneratedAttribute]
private Dictionary`2<Type, Type> <DiscovererTypeCache>k__BackingField;
    [CompilerGeneratedAttribute]
private IXunitTestCollectionFactory <TestCollectionFactory>k__BackingField;
    protected Dictionary`2<Type, Type> DiscovererTypeCache { get; }
    public IXunitTestCollectionFactory TestCollectionFactory { get; private set; }
    public XunitTestFrameworkDiscoverer(IAssemblyInfo assemblyInfo, ISourceInformationProvider sourceProvider, IMessageSink diagnosticMessageSink, IXunitTestCollectionFactory collectionFactory);
    private static XunitTestFrameworkDiscoverer();
    [CompilerGeneratedAttribute]
protected Dictionary`2<Type, Type> get_DiscovererTypeCache();
    [CompilerGeneratedAttribute]
public IXunitTestCollectionFactory get_TestCollectionFactory();
    [CompilerGeneratedAttribute]
private void set_TestCollectionFactory(IXunitTestCollectionFactory value);
    protected internal virtual ITestClass CreateTestClass(ITypeInfo class);
    internal ITestClass CreateTestClass(ITypeInfo class, Guid testCollectionUniqueId);
    protected internal virtual bool FindTestsForMethod(ITestMethod testMethod, bool includeSourceInformation, IMessageBus messageBus, ITestFrameworkDiscoveryOptions discoveryOptions);
    protected virtual bool FindTestsForType(ITestClass testClass, bool includeSourceInformation, IMessageBus messageBus, ITestFrameworkDiscoveryOptions discoveryOptions);
    protected IXunitTestCaseDiscoverer GetDiscoverer(Type discovererType);
    public virtual string Serialize(ITestCase testCase);
}
public class Xunit.Sdk.XunitTestFrameworkExecutor : TestFrameworkExecutor`1<IXunitTestCase> {
    private Lazy`1<XunitTestFrameworkDiscoverer> discoverer;
    [CompilerGeneratedAttribute]
private TestAssembly <TestAssembly>k__BackingField;
    protected TestAssembly TestAssembly { get; protected set; }
    public XunitTestFrameworkExecutor(AssemblyName assemblyName, ISourceInformationProvider sourceInformationProvider, IMessageSink diagnosticMessageSink);
    [CompilerGeneratedAttribute]
protected TestAssembly get_TestAssembly();
    [CompilerGeneratedAttribute]
protected void set_TestAssembly(TestAssembly value);
    protected virtual ITestFrameworkDiscoverer CreateDiscoverer();
    public virtual ITestCase Deserialize(string value);
    [AsyncStateMachineAttribute("Xunit.Sdk.XunitTestFrameworkExecutor/<RunTestCases>d__8")]
protected virtual void RunTestCases(IEnumerable`1<IXunitTestCase> testCases, IMessageSink executionMessageSink, ITestFrameworkExecutionOptions executionOptions);
    [CompilerGeneratedAttribute]
private XunitTestFrameworkDiscoverer <.ctor>b__1_0();
}
public class Xunit.Sdk.XunitTestInvoker : TestInvoker`1<IXunitTestCase> {
    private IReadOnlyList`1<BeforeAfterTestAttribute> beforeAfterAttributes;
    private Stack`1<BeforeAfterTestAttribute> beforeAfterAttributesRun;
    protected IReadOnlyList`1<BeforeAfterTestAttribute> BeforeAfterAttributes { get; }
    public XunitTestInvoker(ITest test, IMessageBus messageBus, Type testClass, Object[] constructorArguments, MethodInfo testMethod, Object[] testMethodArguments, IReadOnlyList`1<BeforeAfterTestAttribute> beforeAfterAttributes, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource);
    protected IReadOnlyList`1<BeforeAfterTestAttribute> get_BeforeAfterAttributes();
    protected virtual Task BeforeTestMethodInvokedAsync();
    protected virtual Task AfterTestMethodInvokedAsync();
    protected virtual Task`1<decimal> InvokeTestMethodAsync(object testClassInstance);
    [AsyncStateMachineAttribute("Xunit.Sdk.XunitTestInvoker/<InvokeTimeoutTestMethodAsync>d__8")]
private Task`1<decimal> InvokeTimeoutTestMethodAsync(object testClassInstance);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<decimal> <>n__0(object testClassInstance);
}
public class Xunit.Sdk.XunitTestMethodRunner : TestMethodRunner`1<IXunitTestCase> {
    private Object[] constructorArguments;
    private IMessageSink diagnosticMessageSink;
    public XunitTestMethodRunner(ITestMethod testMethod, IReflectionTypeInfo class, IReflectionMethodInfo method, IEnumerable`1<IXunitTestCase> testCases, IMessageSink diagnosticMessageSink, IMessageBus messageBus, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource, Object[] constructorArguments);
    protected virtual Task`1<RunSummary> RunTestCaseAsync(IXunitTestCase testCase);
}
public class Xunit.Sdk.XunitTestRunner : TestRunner`1<IXunitTestCase> {
    private IReadOnlyList`1<BeforeAfterTestAttribute> beforeAfterAttributes;
    protected IReadOnlyList`1<BeforeAfterTestAttribute> BeforeAfterAttributes { get; }
    public XunitTestRunner(ITest test, IMessageBus messageBus, Type testClass, Object[] constructorArguments, MethodInfo testMethod, Object[] testMethodArguments, string skipReason, IReadOnlyList`1<BeforeAfterTestAttribute> beforeAfterAttributes, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource);
    protected IReadOnlyList`1<BeforeAfterTestAttribute> get_BeforeAfterAttributes();
    [AsyncStateMachineAttribute("Xunit.Sdk.XunitTestRunner/<InvokeTestAsync>d__4")]
protected virtual Task`1<Tuple`2<decimal, string>> InvokeTestAsync(ExceptionAggregator aggregator);
    protected virtual Task`1<decimal> InvokeTestMethodAsync(ExceptionAggregator aggregator);
}
public class Xunit.Sdk.XunitTheoryTestCase : XunitTestCase {
    [ObsoleteAttribute("Please call the constructor which takes TestMethodDisplayOptions")]
public XunitTheoryTestCase(IMessageSink diagnosticMessageSink, TestMethodDisplay defaultMethodDisplay, ITestMethod testMethod);
    public XunitTheoryTestCase(IMessageSink diagnosticMessageSink, TestMethodDisplay defaultMethodDisplay, TestMethodDisplayOptions defaultMethodDisplayOptions, ITestMethod testMethod);
    public virtual Task`1<RunSummary> RunAsync(IMessageSink diagnosticMessageSink, IMessageBus messageBus, Object[] constructorArguments, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource);
}
public class Xunit.Sdk.XunitTheoryTestCaseRunner : XunitTestCaseRunner {
    private static Object[] NoArguments;
    private ExceptionAggregator cleanupAggregator;
    private Exception dataDiscoveryException;
    private List`1<XunitTestRunner> testRunners;
    private List`1<IDisposable> toDispose;
    [CompilerGeneratedAttribute]
private IMessageSink <DiagnosticMessageSink>k__BackingField;
    protected IMessageSink DiagnosticMessageSink { get; }
    public XunitTheoryTestCaseRunner(IXunitTestCase testCase, string displayName, string skipReason, Object[] constructorArguments, IMessageSink diagnosticMessageSink, IMessageBus messageBus, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource);
    private static XunitTheoryTestCaseRunner();
    [CompilerGeneratedAttribute]
protected IMessageSink get_DiagnosticMessageSink();
    [AsyncStateMachineAttribute("Xunit.Sdk.XunitTheoryTestCaseRunner/<AfterTestCaseStartingAsync>d__9")]
protected virtual Task AfterTestCaseStartingAsync();
    protected virtual Task BeforeTestCaseFinishedAsync();
    [AsyncStateMachineAttribute("Xunit.Sdk.XunitTheoryTestCaseRunner/<RunTestAsync>d__11")]
protected virtual Task`1<RunSummary> RunTestAsync();
    private RunSummary RunTest_DataDiscoveryException();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0();
}
internal class Xunit.Sdk.XunitWorkerThread : object {
    private Thread thread;
    public XunitWorkerThread(Action threadProc);
    public sealed virtual void Dispose();
    public void Join();
    public static void QueueUserWorkItem(Action backgroundTask, EventWaitHandle finished);
}
internal class Xunit.Serialization.XunitSerializationInfo : object {
    private IDictionary`2<string, XunitSerializationTriple> data;
    private static Type[] supportedSerializationTypes;
    public XunitSerializationInfo(IXunitSerializable object);
    private static XunitSerializationInfo();
    public sealed virtual void AddValue(string key, object value, Type type);
    public sealed virtual T GetValue(string key);
    public sealed virtual object GetValue(string key, Type type);
    public string ToSerializedString();
    public static string SerializeTriple(XunitSerializationTriple triple);
    public static XunitSerializationTriple DeserializeTriple(string value);
    public static object Deserialize(Type type, string serializedValue);
    private static IXunitSerializable DeserializeSerializable(Type type, string serializedValue);
    public static string Serialize(object value);
    internal static bool CanSerializeObject(object value);
    private static string FromBase64(string serializedValue);
    private static string ToBase64(string value);
}
internal class Xunit.Serialization.XunitSerializationTriple : object {
    public string Key;
    public object Value;
    public Type Type;
    public XunitSerializationTriple(string key, object value, Type type);
}
