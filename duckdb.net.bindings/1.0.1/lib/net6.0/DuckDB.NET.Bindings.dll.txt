public class DuckDB.NET.Native.DuckDBAppender : SafeHandleZeroOrMinusOneIsInvalid {
    protected virtual bool ReleaseHandle();
}
[IsReadOnlyAttribute]
public class DuckDB.NET.Native.DuckDBBlob : ValueType {
    [CompilerGeneratedAttribute]
private IntPtr <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Size>k__BackingField;
    public IntPtr Data { get; }
    public long Size { get; }
    [CompilerGeneratedAttribute]
public IntPtr get_Data();
    [CompilerGeneratedAttribute]
public long get_Size();
    public sealed virtual void Dispose();
}
public class DuckDB.NET.Native.DuckDBConfig : SafeHandleZeroOrMinusOneIsInvalid {
    protected virtual bool ReleaseHandle();
}
public class DuckDB.NET.Native.DuckDBDatabase : SafeHandleZeroOrMinusOneIsInvalid {
    protected virtual bool ReleaseHandle();
}
public class DuckDB.NET.Native.DuckDBDataChunk : SafeHandleZeroOrMinusOneIsInvalid {
    protected virtual bool ReleaseHandle();
}
public class DuckDB.NET.Native.DuckDBDate : ValueType {
    [CompilerGeneratedAttribute]
private int <Days>k__BackingField;
    public int Days { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Days();
    [CompilerGeneratedAttribute]
public void set_Days(int value);
}
[IsReadOnlyAttribute]
public class DuckDB.NET.Native.DuckDBDateOnly : ValueType {
    [CompilerGeneratedAttribute]
private int <Year>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Month>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Day>k__BackingField;
    internal static DuckDBDateOnly MinValue;
    public int Year { get; }
    public byte Month { get; }
    public byte Day { get; }
    public DuckDBDateOnly(int year, byte month, byte day);
    private static DuckDBDateOnly();
    [CompilerGeneratedAttribute]
public int get_Year();
    [CompilerGeneratedAttribute]
public byte get_Month();
    [CompilerGeneratedAttribute]
public byte get_Day();
    public static DuckDBDateOnly FromDateTime(DateTime dateTime);
    public DateTime ToDateTime();
    public static DateTime op_Explicit(DuckDBDateOnly dateOnly);
    public static DuckDBDateOnly op_Explicit(DateTime dateTime);
    public static DateOnly op_Implicit(DuckDBDateOnly dateOnly);
    public static DuckDBDateOnly op_Implicit(DateOnly date);
}
[IsReadOnlyAttribute]
public class DuckDB.NET.Native.DuckDBDecimal : ValueType {
    [CompilerGeneratedAttribute]
private byte <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Scale>k__BackingField;
    [CompilerGeneratedAttribute]
private DuckDBHugeInt <Value>k__BackingField;
    public byte Width { get; }
    public byte Scale { get; }
    public DuckDBHugeInt Value { get; }
    [CompilerGeneratedAttribute]
public byte get_Width();
    [CompilerGeneratedAttribute]
public byte get_Scale();
    [CompilerGeneratedAttribute]
public DuckDBHugeInt get_Value();
}
public class DuckDB.NET.Native.DuckDBExtractedStatements : SafeHandleZeroOrMinusOneIsInvalid {
    protected virtual bool ReleaseHandle();
}
[IsReadOnlyAttribute]
public class DuckDB.NET.Native.DuckDBHugeInt : ValueType {
    private static BigInteger Base;
    [CompilerGeneratedAttribute]
private static BigInteger <HugeIntMinValue>k__BackingField;
    [CompilerGeneratedAttribute]
private static BigInteger <HugeIntMaxValue>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Lower>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Upper>k__BackingField;
    public static BigInteger HugeIntMinValue { get; }
    public static BigInteger HugeIntMaxValue { get; }
    public ulong Lower { get; }
    public long Upper { get; }
    public DuckDBHugeInt(BigInteger value);
    public DuckDBHugeInt(ulong lower, long upper);
    private static DuckDBHugeInt();
    [CompilerGeneratedAttribute]
public static BigInteger get_HugeIntMinValue();
    [CompilerGeneratedAttribute]
public static BigInteger get_HugeIntMaxValue();
    [CompilerGeneratedAttribute]
public ulong get_Lower();
    [CompilerGeneratedAttribute]
public long get_Upper();
    public BigInteger ToBigInteger();
}
[IsReadOnlyAttribute]
public class DuckDB.NET.Native.DuckDBInterval : ValueType {
    private static ulong MillisecondsByDay;
    [CompilerGeneratedAttribute]
private int <Months>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Days>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Micros>k__BackingField;
    public int Months { get; }
    public int Days { get; }
    public ulong Micros { get; }
    public DuckDBInterval(int months, int days, ulong micros);
    [CompilerGeneratedAttribute]
public int get_Months();
    [CompilerGeneratedAttribute]
public int get_Days();
    [CompilerGeneratedAttribute]
public ulong get_Micros();
    public static TimeSpan op_Explicit(DuckDBInterval interval);
    public static DuckDBInterval op_Implicit(TimeSpan timeSpan);
    public bool TryConvert(Nullable`1& timeSpan);
    private static ValueTuple`2<Nullable`1<TimeSpan>, Exception> ToTimeSpan(DuckDBInterval interval);
    private static DuckDBInterval FromTimeSpan(TimeSpan timeSpan);
}
public class DuckDB.NET.Native.DuckDBListEntry : ValueType {
    [CompilerGeneratedAttribute]
private ulong <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Length>k__BackingField;
    public ulong Offset { get; private set; }
    public ulong Length { get; private set; }
    public DuckDBListEntry(ulong offset, ulong length);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ulong get_Offset();
    [CompilerGeneratedAttribute]
private void set_Offset(ulong value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ulong get_Length();
    [CompilerGeneratedAttribute]
private void set_Length(ulong value);
}
public class DuckDB.NET.Native.DuckDBLogicalType : SafeHandleZeroOrMinusOneIsInvalid {
    protected virtual bool ReleaseHandle();
}
public class DuckDB.NET.Native.DuckDBNativeConnection : SafeHandleZeroOrMinusOneIsInvalid {
    protected virtual bool ReleaseHandle();
}
public class DuckDB.NET.Native.DuckDBPreparedStatement : SafeHandleZeroOrMinusOneIsInvalid {
    protected virtual bool ReleaseHandle();
}
public class DuckDB.NET.Native.DuckDBResult : ValueType {
    [ObsoleteAttribute]
private long ColumnCount;
    [ObsoleteAttribute]
private long RowCount;
    [ObsoleteAttribute]
private long RowsChanged;
    [ObsoleteAttribute]
private IntPtr columns;
    [ObsoleteAttribute]
private IntPtr ErrorMessage;
    private IntPtr internal_data;
    public sealed virtual void Dispose();
}
public enum DuckDB.NET.Native.DuckDBResultType : Enum {
    public int value__;
    public static DuckDBResultType Invalid;
    public static DuckDBResultType ChangedRows;
    public static DuckDBResultType Nothing;
    public static DuckDBResultType QueryResult;
}
public enum DuckDB.NET.Native.DuckDBState : Enum {
    public int value__;
    public static DuckDBState Success;
    public static DuckDBState Error;
}
public enum DuckDB.NET.Native.DuckDBStatementType : Enum {
    public int value__;
    public static DuckDBStatementType Invalid;
    public static DuckDBStatementType Select;
    public static DuckDBStatementType Insert;
    public static DuckDBStatementType Update;
    public static DuckDBStatementType Explain;
    public static DuckDBStatementType Delete;
    public static DuckDBStatementType Prepare;
    public static DuckDBStatementType Create;
    public static DuckDBStatementType Execute;
    public static DuckDBStatementType Alter;
    public static DuckDBStatementType Transaction;
    public static DuckDBStatementType Copy;
    public static DuckDBStatementType Analyze;
    public static DuckDBStatementType VariableSet;
    public static DuckDBStatementType CreateFunc;
    public static DuckDBStatementType Drop;
    public static DuckDBStatementType Export;
    public static DuckDBStatementType Pragma;
    public static DuckDBStatementType Show;
    public static DuckDBStatementType Vacuum;
    public static DuckDBStatementType Call;
    public static DuckDBStatementType Set;
    public static DuckDBStatementType Load;
    public static DuckDBStatementType Relation;
    public static DuckDBStatementType Extension;
    public static DuckDBStatementType LogicalPlan;
    public static DuckDBStatementType Attach;
    public static DuckDBStatementType Detach;
    public static DuckDBStatementType Multi;
}
public class DuckDB.NET.Native.DuckDBString : ValueType {
    public _value_e__Union value;
    private static int InlineStringMaxLength;
    public int Length { get; }
    public SByte* Data { get; }
    [IsReadOnlyAttribute]
public int get_Length();
    [IsReadOnlyAttribute]
public SByte* get_Data();
}
public class DuckDB.NET.Native.DuckDBTime : ValueType {
    [CompilerGeneratedAttribute]
private long <Micros>k__BackingField;
    public long Micros { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public long get_Micros();
    [CompilerGeneratedAttribute]
public void set_Micros(long value);
}
[IsReadOnlyAttribute]
public class DuckDB.NET.Native.DuckDBTimeOnly : ValueType {
    [CompilerGeneratedAttribute]
private byte <Hour>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Min>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Sec>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Microsecond>k__BackingField;
    public byte Hour { get; }
    public byte Min { get; }
    public byte Sec { get; }
    public int Microsecond { get; }
    public long Ticks { get; }
    public DuckDBTimeOnly(byte hour, byte min, byte sec, int microsecond);
    public DuckDBTimeOnly(byte hour, byte min, byte sec);
    [CompilerGeneratedAttribute]
public byte get_Hour();
    [CompilerGeneratedAttribute]
public byte get_Min();
    [CompilerGeneratedAttribute]
public byte get_Sec();
    [CompilerGeneratedAttribute]
public int get_Microsecond();
    public long get_Ticks();
    public DateTime ToDateTime();
    internal static DuckDBTimeOnly FromDateTime(DateTime dateTime);
    public static DateTime op_Explicit(DuckDBTimeOnly timeOnly);
    public static DuckDBTimeOnly op_Explicit(DateTime dateTime);
    internal static DuckDBTimeOnly FromTimeOnly(TimeOnly timeOnly);
    public static TimeOnly op_Implicit(DuckDBTimeOnly time);
    public static DuckDBTimeOnly op_Implicit(TimeOnly time);
}
[IsReadOnlyAttribute]
public class DuckDB.NET.Native.DuckDBTimestamp : ValueType {
    [CompilerGeneratedAttribute]
private DuckDBDateOnly <Date>k__BackingField;
    [CompilerGeneratedAttribute]
private DuckDBTimeOnly <Time>k__BackingField;
    public DuckDBDateOnly Date { get; }
    public DuckDBTimeOnly Time { get; }
    public DuckDBTimestamp(DuckDBDateOnly date, DuckDBTimeOnly time);
    [CompilerGeneratedAttribute]
public DuckDBDateOnly get_Date();
    [CompilerGeneratedAttribute]
public DuckDBTimeOnly get_Time();
    public DateTime ToDateTime();
    public static DuckDBTimestamp FromDateTime(DateTime dateTime);
}
public class DuckDB.NET.Native.DuckDBTimestampStruct : ValueType {
    [CompilerGeneratedAttribute]
private long <Micros>k__BackingField;
    public long Micros { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public long get_Micros();
    [CompilerGeneratedAttribute]
public void set_Micros(long value);
    [IsReadOnlyAttribute]
public DateTime ToDateTime();
}
public class DuckDB.NET.Native.DuckDBTimeTz : ValueType {
    [CompilerGeneratedAttribute]
private DuckDBTimeOnly <Time>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Offset>k__BackingField;
    public DuckDBTimeOnly Time { get; public set; }
    public int Offset { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public DuckDBTimeOnly get_Time();
    [CompilerGeneratedAttribute]
public void set_Time(DuckDBTimeOnly value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Offset();
    [CompilerGeneratedAttribute]
public void set_Offset(int value);
}
public class DuckDB.NET.Native.DuckDBTimeTzStruct : ValueType {
    [CompilerGeneratedAttribute]
private ulong <Bits>k__BackingField;
    public ulong Bits { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ulong get_Bits();
    [CompilerGeneratedAttribute]
public void set_Bits(ulong value);
}
public enum DuckDB.NET.Native.DuckDBType : Enum {
    public int value__;
    public static DuckDBType Invalid;
    public static DuckDBType Boolean;
    public static DuckDBType TinyInt;
    public static DuckDBType SmallInt;
    public static DuckDBType Integer;
    public static DuckDBType BigInt;
    public static DuckDBType UnsignedTinyInt;
    public static DuckDBType UnsignedSmallInt;
    public static DuckDBType UnsignedInteger;
    public static DuckDBType UnsignedBigInt;
    public static DuckDBType Float;
    public static DuckDBType Double;
    public static DuckDBType Timestamp;
    public static DuckDBType Date;
    public static DuckDBType Time;
    public static DuckDBType Interval;
    public static DuckDBType HugeInt;
    public static DuckDBType UnsignedHugeInt;
    public static DuckDBType Varchar;
    public static DuckDBType Blob;
    public static DuckDBType Decimal;
    public static DuckDBType TimestampS;
    public static DuckDBType TimestampMs;
    public static DuckDBType TimestampNs;
    public static DuckDBType Enum;
    public static DuckDBType List;
    public static DuckDBType Array;
    public static DuckDBType Struct;
    public static DuckDBType Map;
    public static DuckDBType Uuid;
    public static DuckDBType Union;
    public static DuckDBType Bit;
    public static DuckDBType TimeTz;
    public static DuckDBType TimestampTz;
}
[IsReadOnlyAttribute]
public class DuckDB.NET.Native.DuckDBUHugeInt : ValueType {
    private static BigInteger Base;
    [CompilerGeneratedAttribute]
private static BigInteger <HugeIntMinValue>k__BackingField;
    [CompilerGeneratedAttribute]
private static BigInteger <HugeIntMaxValue>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Lower>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Upper>k__BackingField;
    public static BigInteger HugeIntMinValue { get; }
    public static BigInteger HugeIntMaxValue { get; }
    public ulong Lower { get; }
    public ulong Upper { get; }
    public DuckDBUHugeInt(BigInteger value);
    public DuckDBUHugeInt(ulong lower, ulong upper);
    private static DuckDBUHugeInt();
    [CompilerGeneratedAttribute]
public static BigInteger get_HugeIntMinValue();
    [CompilerGeneratedAttribute]
public static BigInteger get_HugeIntMaxValue();
    [CompilerGeneratedAttribute]
public ulong get_Lower();
    [CompilerGeneratedAttribute]
public ulong get_Upper();
    public BigInteger ToBigInteger();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class DuckDB.NET.Native.NativeMethods : object {
    private static string DuckDbLibrary;
}
public class DuckDB.NET.Native.SafeUnmanagedMemoryHandle : SafeHandleZeroOrMinusOneIsInvalid {
    public SafeUnmanagedMemoryHandle(IntPtr preexistingHandle);
    protected virtual bool ReleaseHandle();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class DuckDB.NET.Native.Utils : object {
    internal static long UnixEpochTicks;
    [ExtensionAttribute]
public static bool IsSuccess(DuckDBState state);
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static string ToManagedString(IntPtr unmanagedString, bool freeWhenCopied, Nullable`1<int> length);
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static SafeUnmanagedMemoryHandle ToUnmanagedString(string managedString);
    internal static long GetTicks(int hour, int minute, int second, int microsecond);
    [ExtensionAttribute]
internal static int GetMicrosecond(TimeSpan timeSpan);
    [ExtensionAttribute]
internal static int GetMicrosecond(TimeOnly timeOnly);
}
[CompilerGeneratedAttribute]
[ExcludeFromCodeCoverageAttribute]
internal static class GitVersionInformation : object {
    public static string Major;
    public static string Minor;
    public static string Patch;
    public static string PreReleaseTag;
    public static string PreReleaseTagWithDash;
    public static string PreReleaseLabel;
    public static string PreReleaseLabelWithDash;
    public static string PreReleaseNumber;
    public static string WeightedPreReleaseNumber;
    public static string BuildMetaData;
    public static string BuildMetaDataPadded;
    public static string FullBuildMetaData;
    public static string MajorMinorPatch;
    public static string SemVer;
    public static string LegacySemVer;
    public static string LegacySemVerPadded;
    public static string AssemblySemVer;
    public static string AssemblySemFileVer;
    public static string FullSemVer;
    public static string InformationalVersion;
    public static string BranchName;
    public static string EscapedBranchName;
    public static string Sha;
    public static string ShortSha;
    public static string NuGetVersionV2;
    public static string NuGetVersion;
    public static string NuGetPreReleaseTagV2;
    public static string NuGetPreReleaseTag;
    public static string VersionSourceSha;
    public static string CommitsSinceVersionSource;
    public static string CommitsSinceVersionSourcePadded;
    public static string UncommittedChanges;
    public static string CommitDate;
    private static GitVersionInformation();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
