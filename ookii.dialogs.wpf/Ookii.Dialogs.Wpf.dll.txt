internal class Ookii.Dialogs.Wpf.ActivationContextSafeHandle : SafeHandleZeroOrMinusOneIsInvalid {
    [ReliabilityContractAttribute("3", "1")]
protected virtual bool ReleaseHandle();
}
public class Ookii.Dialogs.Wpf.AnimationResource : object {
    [CompilerGeneratedAttribute]
private string <ResourceFile>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ResourceId>k__BackingField;
    public string ResourceFile { get; private set; }
    public int ResourceId { get; private set; }
    public AnimationResource(string resourceFile, int resourceId);
    [CompilerGeneratedAttribute]
public string get_ResourceFile();
    [CompilerGeneratedAttribute]
private void set_ResourceFile(string value);
    [CompilerGeneratedAttribute]
public int get_ResourceId();
    [CompilerGeneratedAttribute]
private void set_ResourceId(int value);
    public static AnimationResource GetShellAnimation(ShellAnimation animation);
    internal SafeModuleHandle LoadLibrary();
}
public enum Ookii.Dialogs.Wpf.ButtonType : Enum {
    public int value__;
    public static ButtonType Custom;
    public static ButtonType Ok;
    public static ButtonType Yes;
    public static ButtonType No;
    public static ButtonType Cancel;
    public static ButtonType Retry;
    public static ButtonType Close;
}
internal class Ookii.Dialogs.Wpf.ComCtlv6ActivationContext : object {
    private IntPtr _cookie;
    private static ACTCTX _enableThemingActivationContext;
    private static ActivationContextSafeHandle _activationContext;
    private static bool _contextCreationSucceeded;
    private static object _contextCreationLock;
    public ComCtlv6ActivationContext(bool enable);
    private static ComCtlv6ActivationContext();
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    private static bool EnsureActivateContextCreated();
}
[DefaultPropertyAttribute("MainInstruction")]
[DefaultEventAttribute("UserNameChanged")]
[DescriptionAttribute("Allows access to credential UI for generic credentials.")]
public class Ookii.Dialogs.Wpf.CredentialDialog : Component {
    private string _confirmTarget;
    private NetworkCredential _credentials;
    private Byte[] _additionalEntropy;
    private bool _isSaveChecked;
    private string _target;
    private static Dictionary`2<string, NetworkCredential> _applicationInstanceCredentialCache;
    private string _caption;
    private string _text;
    private string _windowTitle;
    [CompilerGeneratedAttribute]
private EventHandler UserNameChanged;
    [CompilerGeneratedAttribute]
private EventHandler PasswordChanged;
    [CompilerGeneratedAttribute]
private bool <UseApplicationInstanceCredentialCache>k__BackingField;
    [CompilerGeneratedAttribute]
private DownlevelTextMode <DownlevelTextMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowSaveCheckBox>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowUIForSavedCredentials>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsStoredCredential>k__BackingField;
    private IContainer components;
    [CategoryAttribute("Behavior")]
[DescriptionAttribute("Indicates whether to use the application instance credential cache.")]
[DefaultValueAttribute("False")]
public bool UseApplicationInstanceCredentialCache { get; public set; }
    [CategoryAttribute("Appearance")]
[DescriptionAttribute("Indicates whether the "Save password" checkbox is checked.")]
[DefaultValueAttribute("False")]
public bool IsSaveChecked { get; public set; }
    [BrowsableAttribute("False")]
public string Password { get; private set; }
    [BrowsableAttribute("False")]
public Byte[] AdditionalEntropy { get; public set; }
    [BrowsableAttribute("False")]
public NetworkCredential Credentials { get; }
    [BrowsableAttribute("False")]
public string UserName { get; private set; }
    [CategoryAttribute("Behavior")]
[DescriptionAttribute("The target for the credentials, typically the server name prefixed by an application-specific identifier.")]
[DefaultValueAttribute("")]
public string Target { get; public set; }
    [LocalizableAttribute("True")]
[CategoryAttribute("Appearance")]
[DescriptionAttribute("The title of the credentials dialog.")]
[DefaultValueAttribute("")]
public string WindowTitle { get; public set; }
    [LocalizableAttribute("True")]
[CategoryAttribute("Appearance")]
[DescriptionAttribute("A brief message that will be displayed in the dialog box.")]
[DefaultValueAttribute("")]
public string MainInstruction { get; public set; }
    [LocalizableAttribute("True")]
[CategoryAttribute("Appearance")]
[DescriptionAttribute("Additional text to display in the dialog.")]
[DefaultValueAttribute("")]
[EditorAttribute("System.ComponentModel.Design.MultilineStringEditor", "System.Drawing.Design.UITypeEditor")]
public string Content { get; public set; }
    [LocalizableAttribute("True")]
[CategoryAttribute("Appearance")]
[DescriptionAttribute("Indicates how the text of the MainInstruction and Content properties is displayed on Windows XP.")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public DownlevelTextMode DownlevelTextMode { get; public set; }
    [CategoryAttribute("Appearance")]
[DescriptionAttribute("Indicates whether a check box is shown on the dialog that allows the user to choose whether to save the credentials or not.")]
[DefaultValueAttribute("False")]
public bool ShowSaveCheckBox { get; public set; }
    [CategoryAttribute("Behavior")]
[DescriptionAttribute("Indicates whether the dialog should be displayed even when saved credentials exist for the specified target.")]
[DefaultValueAttribute("False")]
public bool ShowUIForSavedCredentials { get; public set; }
    public bool IsStoredCredential { get; private set; }
    public CredentialDialog(IContainer container);
    private static CredentialDialog();
    [CompilerGeneratedAttribute]
public void add_UserNameChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_UserNameChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_PasswordChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_PasswordChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public bool get_UseApplicationInstanceCredentialCache();
    [CompilerGeneratedAttribute]
public void set_UseApplicationInstanceCredentialCache(bool value);
    public bool get_IsSaveChecked();
    public void set_IsSaveChecked(bool value);
    public string get_Password();
    private void set_Password(string value);
    public Byte[] get_AdditionalEntropy();
    public void set_AdditionalEntropy(Byte[] value);
    public NetworkCredential get_Credentials();
    public string get_UserName();
    private void set_UserName(string value);
    public string get_Target();
    public void set_Target(string value);
    public string get_WindowTitle();
    public void set_WindowTitle(string value);
    public string get_MainInstruction();
    public void set_MainInstruction(string value);
    public string get_Content();
    public void set_Content(string value);
    [CompilerGeneratedAttribute]
public DownlevelTextMode get_DownlevelTextMode();
    [CompilerGeneratedAttribute]
public void set_DownlevelTextMode(DownlevelTextMode value);
    [CompilerGeneratedAttribute]
public bool get_ShowSaveCheckBox();
    [CompilerGeneratedAttribute]
public void set_ShowSaveCheckBox(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowUIForSavedCredentials();
    [CompilerGeneratedAttribute]
public void set_ShowUIForSavedCredentials(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsStoredCredential();
    [CompilerGeneratedAttribute]
private void set_IsStoredCredential(bool value);
    public bool ShowDialog();
    public bool ShowDialog(IntPtr owner);
    public bool ShowDialog(Window owner);
    public void ConfirmCredentials(bool confirm);
    public static void StoreCredential(string target, NetworkCredential credential, Byte[] additionalEntropy);
    public static NetworkCredential RetrieveCredential(string target, Byte[] additionalEntropy);
    public static NetworkCredential RetrieveCredentialFromApplicationInstanceCache(string target);
    public static bool DeleteCredential(string target);
    protected virtual void OnUserNameChanged(EventArgs e);
    protected virtual void OnPasswordChanged(EventArgs e);
    private bool PromptForCredentialsCredUI(IntPtr owner, bool storedCredentials);
    private bool PromptForCredentialsCredUIWin(IntPtr owner, bool storedCredentials);
    private CREDUI_INFO CreateCredUIInfo(IntPtr owner, bool downlevelText);
    private bool RetrieveCredentials();
    private static Byte[] EncryptPassword(string password, Byte[] additionalEntropy);
    private static string DecryptPassword(Byte[] encrypted, Byte[] additionalEntropy);
    private bool RetrieveCredentialsFromApplicationInstanceCache();
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent();
}
public class Ookii.Dialogs.Wpf.CredentialException : Win32Exception {
    public CredentialException(int error);
    public CredentialException(string message);
    public CredentialException(int error, string message);
    public CredentialException(string message, Exception innerException);
    protected CredentialException(SerializationInfo info, StreamingContext context);
}
public enum Ookii.Dialogs.Wpf.DownlevelTextMode : Enum {
    public int value__;
    public static DownlevelTextMode MainInstructionAndContent;
    public static DownlevelTextMode MainInstructionOnly;
    public static DownlevelTextMode ContentOnly;
}
public class Ookii.Dialogs.Wpf.ExpandButtonClickedEventArgs : EventArgs {
    private bool _expanded;
    public bool Expanded { get; }
    public ExpandButtonClickedEventArgs(bool expanded);
    public bool get_Expanded();
}
public class Ookii.Dialogs.Wpf.HyperlinkClickedEventArgs : EventArgs {
    private string _href;
    public string Href { get; }
    public HyperlinkClickedEventArgs(string href);
    public string get_Href();
}
internal static class Ookii.Dialogs.Wpf.Interop.CLSIDGuid : object {
    internal static string FileOpenDialog;
    internal static string FileSaveDialog;
    internal static string KnownFolderManager;
    internal static string ProgressDialog;
}
internal static class Ookii.Dialogs.Wpf.Interop.ComDlgResources : object {
    private static Win32Resources _resources;
    private static ComDlgResources();
    public static string LoadString(ComDlgResourceId id);
    public static string FormatString(ComDlgResourceId id, String[] args);
}
[ClassInterfaceAttribute("0")]
[TypeLibTypeAttribute("2")]
[GuidAttribute("DC1C5A9C-E88A-4dde-A5A1-60F82A20AEF7")]
internal class Ookii.Dialogs.Wpf.Interop.FileOpenDialogRCW : object {
}
[ClassInterfaceAttribute("0")]
[TypeLibTypeAttribute("2")]
[GuidAttribute("C0B4E2F3-BA21-4773-8DBA-335EC946EB8B")]
internal class Ookii.Dialogs.Wpf.Interop.FileSaveDialogRCW : object {
}
internal enum Ookii.Dialogs.Wpf.Interop.HRESULT : Enum {
    public long value__;
    public static HRESULT S_FALSE;
    public static HRESULT S_OK;
    public static HRESULT E_INVALIDARG;
    public static HRESULT E_OUTOFMEMORY;
    public static HRESULT ERROR_CANCELLED;
}
[GuidAttribute("42f85136-db7e-439c-85f1-e4075d135fc8")]
[InterfaceTypeAttribute("1")]
internal interface Ookii.Dialogs.Wpf.Interop.IFileDialog {
    public abstract virtual int Show(IntPtr parent);
    public abstract virtual void SetFileTypes(UInt32 cFileTypes, COMDLG_FILTERSPEC[] rgFilterSpec);
    public abstract virtual void SetFileTypeIndex(UInt32 iFileType);
    public abstract virtual void GetFileTypeIndex(UInt32& piFileType);
    public abstract virtual void Advise(IFileDialogEvents pfde, UInt32& pdwCookie);
    public abstract virtual void Unadvise(UInt32 dwCookie);
    public abstract virtual void SetOptions(FOS fos);
    public abstract virtual void GetOptions(FOS& pfos);
    public abstract virtual void SetDefaultFolder(IShellItem psi);
    public abstract virtual void SetFolder(IShellItem psi);
    public abstract virtual void GetFolder(IShellItem& ppsi);
    public abstract virtual void GetCurrentSelection(IShellItem& ppsi);
    public abstract virtual void SetFileName(string pszName);
    public abstract virtual void GetFileName(String& pszName);
    public abstract virtual void SetTitle(string pszTitle);
    public abstract virtual void SetOkButtonLabel(string pszText);
    public abstract virtual void SetFileNameLabel(string pszLabel);
    public abstract virtual void GetResult(IShellItem& ppsi);
    public abstract virtual void AddPlace(IShellItem psi, FDAP fdap);
    public abstract virtual void SetDefaultExtension(string pszDefaultExtension);
    public abstract virtual void Close(int hr);
    public abstract virtual void SetClientGuid(Guid& guid);
    public abstract virtual void ClearClientData();
    public abstract virtual void SetFilter(IntPtr pFilter);
}
[GuidAttribute("36116642-D713-4b97-9B83-7484A9D00433")]
[InterfaceTypeAttribute("1")]
internal interface Ookii.Dialogs.Wpf.Interop.IFileDialogControlEvents {
    public abstract virtual void OnItemSelected(IFileDialogCustomize pfdc, int dwIDCtl, int dwIDItem);
    public abstract virtual void OnButtonClicked(IFileDialogCustomize pfdc, int dwIDCtl);
    public abstract virtual void OnCheckButtonToggled(IFileDialogCustomize pfdc, int dwIDCtl, bool bChecked);
    public abstract virtual void OnControlActivating(IFileDialogCustomize pfdc, int dwIDCtl);
}
[GuidAttribute("e6fdd21a-163f-4975-9c8c-a69f1ba37034")]
[InterfaceTypeAttribute("1")]
internal interface Ookii.Dialogs.Wpf.Interop.IFileDialogCustomize {
    public abstract virtual void EnableOpenDropDown(int dwIDCtl);
    public abstract virtual void AddMenu(int dwIDCtl, string pszLabel);
    public abstract virtual void AddPushButton(int dwIDCtl, string pszLabel);
    public abstract virtual void AddComboBox(int dwIDCtl);
    public abstract virtual void AddRadioButtonList(int dwIDCtl);
    public abstract virtual void AddCheckButton(int dwIDCtl, string pszLabel, bool bChecked);
    public abstract virtual void AddEditBox(int dwIDCtl, string pszText);
    public abstract virtual void AddSeparator(int dwIDCtl);
    public abstract virtual void AddText(int dwIDCtl, string pszText);
    public abstract virtual void SetControlLabel(int dwIDCtl, string pszLabel);
    public abstract virtual void GetControlState(int dwIDCtl, CDCONTROLSTATE& pdwState);
    public abstract virtual void SetControlState(int dwIDCtl, CDCONTROLSTATE dwState);
    public abstract virtual void GetEditBoxText(int dwIDCtl, IntPtr ppszText);
    public abstract virtual void SetEditBoxText(int dwIDCtl, string pszText);
    public abstract virtual void GetCheckButtonState(int dwIDCtl, Boolean& pbChecked);
    public abstract virtual void SetCheckButtonState(int dwIDCtl, bool bChecked);
    public abstract virtual void AddControlItem(int dwIDCtl, int dwIDItem, string pszLabel);
    public abstract virtual void RemoveControlItem(int dwIDCtl, int dwIDItem);
    public abstract virtual void RemoveAllControlItems(int dwIDCtl);
    public abstract virtual void GetControlItemState(int dwIDCtl, int dwIDItem, CDCONTROLSTATE& pdwState);
    public abstract virtual void SetControlItemState(int dwIDCtl, int dwIDItem, CDCONTROLSTATE dwState);
    public abstract virtual void GetSelectedControlItem(int dwIDCtl, Int32& pdwIDItem);
    public abstract virtual void SetSelectedControlItem(int dwIDCtl, int dwIDItem);
    public abstract virtual void StartVisualGroup(int dwIDCtl, string pszLabel);
    public abstract virtual void EndVisualGroup();
    public abstract virtual void MakeProminent(int dwIDCtl);
}
[GuidAttribute("973510DB-7D7F-452B-8975-74A85828D354")]
[InterfaceTypeAttribute("1")]
internal interface Ookii.Dialogs.Wpf.Interop.IFileDialogEvents {
    public abstract virtual HRESULT OnFileOk(IFileDialog pfd);
    public abstract virtual HRESULT OnFolderChanging(IFileDialog pfd, IShellItem psiFolder);
    public abstract virtual void OnFolderChange(IFileDialog pfd);
    public abstract virtual void OnSelectionChange(IFileDialog pfd);
    public abstract virtual void OnShareViolation(IFileDialog pfd, IShellItem psi, FDE_SHAREVIOLATION_RESPONSE& pResponse);
    public abstract virtual void OnTypeChange(IFileDialog pfd);
    public abstract virtual void OnOverwrite(IFileDialog pfd, IShellItem psi, FDE_OVERWRITE_RESPONSE& pResponse);
}
[GuidAttribute("d57c7288-d4ad-4768-be02-9d969532d960")]
[InterfaceTypeAttribute("1")]
internal interface Ookii.Dialogs.Wpf.Interop.IFileOpenDialog {
    public abstract virtual int Show(IntPtr parent);
    public abstract virtual void SetFileTypes(UInt32 cFileTypes, COMDLG_FILTERSPEC& rgFilterSpec);
    public abstract virtual void SetFileTypeIndex(UInt32 iFileType);
    public abstract virtual void GetFileTypeIndex(UInt32& piFileType);
    public abstract virtual void Advise(IFileDialogEvents pfde, UInt32& pdwCookie);
    public abstract virtual void Unadvise(UInt32 dwCookie);
    public abstract virtual void SetOptions(FOS fos);
    public abstract virtual void GetOptions(FOS& pfos);
    public abstract virtual void SetDefaultFolder(IShellItem psi);
    public abstract virtual void SetFolder(IShellItem psi);
    public abstract virtual void GetFolder(IShellItem& ppsi);
    public abstract virtual void GetCurrentSelection(IShellItem& ppsi);
    public abstract virtual void SetFileName(string pszName);
    public abstract virtual void GetFileName(String& pszName);
    public abstract virtual void SetTitle(string pszTitle);
    public abstract virtual void SetOkButtonLabel(string pszText);
    public abstract virtual void SetFileNameLabel(string pszLabel);
    public abstract virtual void GetResult(IShellItem& ppsi);
    public abstract virtual void AddPlace(IShellItem psi, FDAP fdap);
    public abstract virtual void SetDefaultExtension(string pszDefaultExtension);
    public abstract virtual void Close(int hr);
    public abstract virtual void SetClientGuid(Guid& guid);
    public abstract virtual void ClearClientData();
    public abstract virtual void SetFilter(IntPtr pFilter);
    public abstract virtual void GetResults(IShellItemArray& ppenum);
    public abstract virtual void GetSelectedItems(IShellItemArray& ppsai);
}
[GuidAttribute("84bccd23-5fde-4cdb-aea4-af64b83d78ab")]
[InterfaceTypeAttribute("1")]
internal interface Ookii.Dialogs.Wpf.Interop.IFileSaveDialog {
    public abstract virtual int Show(IntPtr parent);
    public abstract virtual void SetFileTypes(UInt32 cFileTypes, COMDLG_FILTERSPEC& rgFilterSpec);
    public abstract virtual void SetFileTypeIndex(UInt32 iFileType);
    public abstract virtual void GetFileTypeIndex(UInt32& piFileType);
    public abstract virtual void Advise(IFileDialogEvents pfde, UInt32& pdwCookie);
    public abstract virtual void Unadvise(UInt32 dwCookie);
    public abstract virtual void SetOptions(FOS fos);
    public abstract virtual void GetOptions(FOS& pfos);
    public abstract virtual void SetDefaultFolder(IShellItem psi);
    public abstract virtual void SetFolder(IShellItem psi);
    public abstract virtual void GetFolder(IShellItem& ppsi);
    public abstract virtual void GetCurrentSelection(IShellItem& ppsi);
    public abstract virtual void SetFileName(string pszName);
    public abstract virtual void GetFileName(String& pszName);
    public abstract virtual void SetTitle(string pszTitle);
    public abstract virtual void SetOkButtonLabel(string pszText);
    public abstract virtual void SetFileNameLabel(string pszLabel);
    public abstract virtual void GetResult(IShellItem& ppsi);
    public abstract virtual void AddPlace(IShellItem psi, FDAP fdap);
    public abstract virtual void SetDefaultExtension(string pszDefaultExtension);
    public abstract virtual void Close(int hr);
    public abstract virtual void SetClientGuid(Guid& guid);
    public abstract virtual void ClearClientData();
    public abstract virtual void SetFilter(IntPtr pFilter);
    public abstract virtual void SetSaveAsItem(IShellItem psi);
    public abstract virtual void SetProperties(IntPtr pStore);
    public abstract virtual void SetCollectedProperties(IntPtr pList, int fAppendDefault);
    public abstract virtual void GetProperties(IntPtr& ppStore);
    public abstract virtual void ApplyProperties(IShellItem psi, IntPtr pStore, IntPtr& hwnd, IntPtr pSink);
}
internal static class Ookii.Dialogs.Wpf.Interop.IIDGuid : object {
    internal static string IModalWindow;
    internal static string IFileDialog;
    internal static string IFileOpenDialog;
    internal static string IFileSaveDialog;
    internal static string IFileDialogEvents;
    internal static string IFileDialogControlEvents;
    internal static string IFileDialogCustomize;
    internal static string IShellItem;
    internal static string IShellItemArray;
    internal static string IKnownFolder;
    internal static string IKnownFolderManager;
    internal static string IPropertyStore;
    internal static string IProgressDialog;
}
[GuidAttribute("38521333-6A87-46A7-AE10-0F16706816C3")]
[InterfaceTypeAttribute("1")]
internal interface Ookii.Dialogs.Wpf.Interop.IKnownFolder {
    public abstract virtual void GetId(Guid& pkfid);
    public abstract virtual void spacer1();
    public abstract virtual void GetShellItem(UInt32 dwFlags, Guid& riid, IShellItem& ppv);
    public abstract virtual void GetPath(UInt32 dwFlags, String& ppszPath);
    public abstract virtual void SetPath(UInt32 dwFlags, string pszPath);
    public abstract virtual void GetLocation(UInt32 dwFlags, IntPtr ppidl);
    public abstract virtual void GetFolderType(Guid& pftid);
    public abstract virtual void GetRedirectionCapabilities(UInt32& pCapabilities);
    public abstract virtual void spacer2();
}
[GuidAttribute("44BEAAEC-24F4-4E90-B3F0-23D258FBB146")]
[InterfaceTypeAttribute("1")]
internal interface Ookii.Dialogs.Wpf.Interop.IKnownFolderManager {
    public abstract virtual void FolderIdFromCsidl(int nCsidl, Guid& pfid);
    public abstract virtual void FolderIdToCsidl(Guid& rfid, Int32& pnCsidl);
    public abstract virtual void GetFolderIds(IntPtr ppKFId, UInt32& pCount);
    public abstract virtual void GetFolder(Guid& rfid, IKnownFolder& ppkf);
    public abstract virtual void GetFolderByName(string pszCanonicalName, IKnownFolder& ppkf);
    public abstract virtual void RegisterFolder(Guid& rfid, KNOWNFOLDER_DEFINITION& pKFD);
    public abstract virtual void UnregisterFolder(Guid& rfid);
    public abstract virtual void FindFolderFromPath(string pszPath, FFFP_MODE mode, IKnownFolder& ppkf);
    public abstract virtual void FindFolderFromIDList(IntPtr pidl, IKnownFolder& ppkf);
    public abstract virtual void Redirect(Guid& rfid, IntPtr hwnd, UInt32 Flags, string pszTargetPath, UInt32 cFolders, Guid& pExclusion, String& ppszError);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("00000002-0000-0000-C000-000000000046")]
internal interface Ookii.Dialogs.Wpf.Interop.IMalloc {
    public abstract virtual IntPtr Alloc(UInt32 cb);
    public abstract virtual IntPtr Realloc(IntPtr pv, UInt32 cb);
    public abstract virtual void Free(IntPtr pv);
    public abstract virtual UInt32 GetSize(IntPtr pv);
    public abstract virtual short DidAlloc(IntPtr pv);
    public abstract virtual void HeapMinimize();
}
[GuidAttribute("b4db1657-70d7-485e-8e3e-6fcb5a5c1802")]
[InterfaceTypeAttribute("1")]
internal interface Ookii.Dialogs.Wpf.Interop.IModalWindow {
    public abstract virtual int Show(IntPtr parent);
}
[GuidAttribute("EBBC7C04-315E-11d2-B62F-006097DF5BD4")]
[InterfaceTypeAttribute("1")]
internal interface Ookii.Dialogs.Wpf.Interop.IProgressDialog {
    public abstract virtual void StartProgressDialog(IntPtr hwndParent, object punkEnableModless, ProgressDialogFlags dwFlags, IntPtr pvResevered);
    public abstract virtual void StopProgressDialog();
    public abstract virtual void SetTitle(string pwzTitle);
    public abstract virtual void SetAnimation(SafeModuleHandle hInstAnimation, ushort idAnimation);
    public abstract virtual bool HasUserCancelled();
    public abstract virtual void SetProgress(UInt32 dwCompleted, UInt32 dwTotal);
    public abstract virtual void SetProgress64(ulong ullCompleted, ulong ullTotal);
    public abstract virtual void SetLine(UInt32 dwLineNum, string pwzString, bool fCompactPath, IntPtr pvResevered);
    public abstract virtual void SetCancelMsg(string pwzCancelMsg, object pvResevered);
    public abstract virtual void Timer(ProgressDialogTimerAction dwTimerAction, object pvReserved);
}
[GuidAttribute("886D8EEB-8CF2-4446-8D02-CDBA1DBDCF99")]
[InterfaceTypeAttribute("1")]
internal interface Ookii.Dialogs.Wpf.Interop.IPropertyStore {
    public abstract virtual void GetCount(UInt32& cProps);
    public abstract virtual void GetAt(UInt32 iProp, PROPERTYKEY& pkey);
    public abstract virtual void GetValue(PROPERTYKEY& key, Object& pv);
    public abstract virtual void SetValue(PROPERTYKEY& key, Object& pv);
    public abstract virtual void Commit();
}
[GuidAttribute("43826D1E-E718-42EE-BC55-A1E261C37BFE")]
[InterfaceTypeAttribute("1")]
internal interface Ookii.Dialogs.Wpf.Interop.IShellItem {
    public abstract virtual void BindToHandler(IntPtr pbc, Guid& bhid, Guid& riid, IntPtr& ppv);
    public abstract virtual void GetParent(IShellItem& ppsi);
    public abstract virtual void GetDisplayName(SIGDN sigdnName, String& ppszName);
    public abstract virtual void GetAttributes(UInt32 sfgaoMask, UInt32& psfgaoAttribs);
    public abstract virtual void Compare(IShellItem psi, UInt32 hint, Int32& piOrder);
}
[GuidAttribute("B63EA76D-1F85-456F-A19C-48159EFA858B")]
[InterfaceTypeAttribute("1")]
internal interface Ookii.Dialogs.Wpf.Interop.IShellItemArray {
    public abstract virtual void BindToHandler(IntPtr pbc, Guid& rbhid, Guid& riid, IntPtr& ppvOut);
    public abstract virtual void GetPropertyStore(int Flags, Guid& riid, IntPtr& ppv);
    public abstract virtual void GetPropertyDescriptionList(PROPERTYKEY& keyType, Guid& riid, IntPtr& ppv);
    public abstract virtual void GetAttributes(SIATTRIBFLAGS dwAttribFlags, UInt32 sfgaoMask, UInt32& psfgaoAttribs);
    public abstract virtual void GetCount(UInt32& pdwNumItems);
    public abstract virtual void GetItemAt(UInt32 dwIndex, IShellItem& ppsi);
    public abstract virtual void EnumItems(IntPtr& ppenumShellItems);
}
internal static class Ookii.Dialogs.Wpf.Interop.KFIDGuid : object {
    internal static string ComputerFolder;
    internal static string Favorites;
    internal static string Documents;
    internal static string Profile;
}
[GuidAttribute("44BEAAEC-24F4-4E90-B3F0-23D258FBB146")]
[CoClassAttribute("Ookii.Dialogs.Wpf.Interop.KnownFolderManagerRCW")]
internal interface Ookii.Dialogs.Wpf.Interop.KnownFolderManager {
}
[ClassInterfaceAttribute("0")]
[TypeLibTypeAttribute("2")]
[GuidAttribute("4df0c730-df9d-4ae3-9153-aa6b82e9795a")]
internal class Ookii.Dialogs.Wpf.Interop.KnownFolderManagerRCW : object {
}
internal interface Ookii.Dialogs.Wpf.Interop.NativeCommonFileDialog {
}
[GuidAttribute("d57c7288-d4ad-4768-be02-9d969532d960")]
[CoClassAttribute("Ookii.Dialogs.Wpf.Interop.FileOpenDialogRCW")]
internal interface Ookii.Dialogs.Wpf.Interop.NativeFileOpenDialog {
}
[GuidAttribute("84bccd23-5fde-4cdb-aea4-af64b83d78ab")]
[CoClassAttribute("Ookii.Dialogs.Wpf.Interop.FileSaveDialogRCW")]
internal interface Ookii.Dialogs.Wpf.Interop.NativeFileSaveDialog {
}
[GuidAttribute("EBBC7C04-315E-11d2-B62F-006097DF5BD4")]
[CoClassAttribute("Ookii.Dialogs.Wpf.Interop.ProgressDialogRCW")]
internal interface Ookii.Dialogs.Wpf.Interop.ProgressDialog {
}
[FlagsAttribute]
internal enum Ookii.Dialogs.Wpf.Interop.ProgressDialogFlags : Enum {
    public UInt32 value__;
    public static ProgressDialogFlags Normal;
    public static ProgressDialogFlags Modal;
    public static ProgressDialogFlags AutoTime;
    public static ProgressDialogFlags NoTime;
    public static ProgressDialogFlags NoMinimize;
    public static ProgressDialogFlags NoProgressBar;
    public static ProgressDialogFlags MarqueeProgress;
    public static ProgressDialogFlags NoCancel;
}
[GuidAttribute("F8383852-FCD3-11d1-A6B9-006097DF5BD4")]
internal class Ookii.Dialogs.Wpf.Interop.ProgressDialogRCW : object {
}
[FlagsAttribute]
internal enum Ookii.Dialogs.Wpf.Interop.ProgressDialogTimerAction : Enum {
    public UInt32 value__;
    public static ProgressDialogTimerAction Reset;
    public static ProgressDialogTimerAction Pause;
    public static ProgressDialogTimerAction Resume;
}
internal class Ookii.Dialogs.Wpf.Interop.Win32Resources : object {
    private SafeModuleHandle _moduleHandle;
    private static int _bufferSize;
    public Win32Resources(string module);
    public string LoadString(UInt32 id);
    public string FormatString(UInt32 id, String[] args);
    protected virtual void Dispose(bool disposing);
    private void CheckDisposed();
    public sealed virtual void Dispose();
}
internal static class Ookii.Dialogs.Wpf.NativeMethods : object {
    public static int ErrorFileNotFound;
    public static int WM_USER;
    public static int WM_GETICON;
    public static int WM_SETICON;
    public static int ICON_SMALL;
    public static int ACTCTX_FLAG_ASSEMBLY_DIRECTORY_VALID;
    internal static int CREDUI_MAX_USERNAME_LENGTH;
    internal static int CREDUI_MAX_PASSWORD_LENGTH;
    public static bool IsWindowsVistaOrLater { get; }
    public static bool IsWindowsXPOrLater { get; }
    public static bool get_IsWindowsVistaOrLater();
    public static bool get_IsWindowsXPOrLater();
    public static SafeModuleHandle LoadLibraryEx(string lpFileName, IntPtr hFile, LoadLibraryExFlags dwFlags);
    [ReliabilityContractAttribute("3", "2")]
public static bool FreeLibrary(IntPtr hModule);
    public static IntPtr GetActiveWindow();
    public static bool EnableWindow(IntPtr hwnd, bool bEnable);
    public static int GetWindowThreadProcessId(IntPtr hWnd, Int32& lpdwProcessId);
    public static int GetCurrentThreadId();
    public static void TaskDialogIndirect(TASKDIALOGCONFIG& pTaskConfig, Int32& pnButton, Int32& pnRadioButton, Boolean& pfVerificationFlagChecked);
    public static IntPtr SendMessage(IntPtr hwnd, int wMsg, IntPtr wParam, IntPtr lParam);
    public static ActivationContextSafeHandle CreateActCtx(ACTCTX& actctx);
    [ReliabilityContractAttribute("3", "1")]
public static void ReleaseActCtx(IntPtr hActCtx);
    public static bool ActivateActCtx(ActivationContextSafeHandle hActCtx, IntPtr& lpCookie);
    public static bool DeactivateActCtx(UInt32 dwFlags, IntPtr lpCookie);
    public static int SHCreateItemFromParsingName(string pszPath, IntPtr pbc, Guid& riid, Object& ppv);
    public static IShellItem CreateItemFromParsingName(string path);
    public static int LoadString(SafeModuleHandle hInstance, UInt32 uID, StringBuilder lpBuffer, int nBufferMax);
    public static UInt32 FormatMessage(FormatMessageFlags dwFlags, IntPtr lpSource, UInt32 dwMessageId, UInt32 dwLanguageId, IntPtr& lpBuffer, UInt32 nSize, String[] Arguments);
    internal static CredUIReturnCodes CredUIPromptForCredentials(CREDUI_INFO& pUiInfo, string targetName, IntPtr Reserved, int dwAuthError, StringBuilder pszUserName, UInt32 ulUserNameMaxChars, StringBuilder pszPassword, UInt32 ulPaswordMaxChars, Boolean& pfSave, CREDUI_FLAGS dwFlags);
    public static CredUIReturnCodes CredUIPromptForWindowsCredentials(CREDUI_INFO& pUiInfo, UInt32 dwAuthError, UInt32& pulAuthPackage, IntPtr pvInAuthBuffer, UInt32 ulInAuthBufferSize, IntPtr& ppvOutAuthBuffer, UInt32& pulOutAuthBufferSize, Boolean& pfSave, CredUIWinFlags dwFlags);
    internal static bool CredRead(string TargetName, CredTypes Type, int Flags, IntPtr& Credential);
    [ReliabilityContractAttribute("3", "2")]
internal static void CredFree(IntPtr Buffer);
    internal static bool CredDelete(string TargetName, CredTypes Type, int Flags);
    internal static bool CredWrite(CREDENTIAL& Credential, int Flags);
    public static bool CredPackAuthenticationBuffer(UInt32 dwFlags, string pszUserName, string pszPassword, IntPtr pPackedCredentials, UInt32& pcbPackedCredentials);
    public static bool CredUnPackAuthenticationBuffer(UInt32 dwFlags, IntPtr pAuthBuffer, UInt32 cbAuthBuffer, StringBuilder pszUserName, UInt32& pcchMaxUserName, StringBuilder pszDomainName, UInt32& pcchMaxDomainName, StringBuilder pszPassword, UInt32& pcchMaxPassword);
    public static IntPtr SHBrowseForFolder(BROWSEINFO& lpbi);
    public static int SHGetSpecialFolderLocation(IntPtr hwndOwner, SpecialFolder nFolder, IntPtr& ppidl);
    public static IMalloc SHGetMalloc();
    public static bool SHGetPathFromIDList(IntPtr pidl, StringBuilder pszPath);
    public static IntPtr SendMessage(IntPtr hWnd, FolderBrowserDialogMessage msg, IntPtr wParam, string lParam);
    public static IntPtr SendMessage(IntPtr hWnd, FolderBrowserDialogMessage msg, IntPtr wParam, IntPtr lParam);
}
public enum Ookii.Dialogs.Wpf.ProgressBarState : Enum {
    public int value__;
    public static ProgressBarState Normal;
    public static ProgressBarState Error;
    public static ProgressBarState Paused;
}
public enum Ookii.Dialogs.Wpf.ProgressBarStyle : Enum {
    public int value__;
    public static ProgressBarStyle None;
    public static ProgressBarStyle ProgressBar;
    public static ProgressBarStyle MarqueeProgressBar;
}
[DefaultEventAttribute("DoWork")]
[DefaultPropertyAttribute("Text")]
[DescriptionAttribute("Represents a dialog that can be used to report progress to the user.")]
public class Ookii.Dialogs.Wpf.ProgressDialog : Component {
    private string _windowTitle;
    private string _text;
    private string _description;
    private IProgressDialog _dialog;
    private string _cancellationText;
    private bool _useCompactPathsForText;
    private bool _useCompactPathsForDescription;
    private SafeModuleHandle _currentAnimationModuleHandle;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _cancellationPending;
    private CancellationTokenSource _cancellationTokenSource;
    private int _percentProgress;
    private IntPtr _ownerHandle;
    [CompilerGeneratedAttribute]
private DoWorkEventHandler DoWork;
    [CompilerGeneratedAttribute]
private RunWorkerCompletedEventHandler RunWorkerCompleted;
    [CompilerGeneratedAttribute]
private ProgressChangedEventHandler ProgressChanged;
    [CompilerGeneratedAttribute]
private bool <ShowTimeRemaining>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowCancelButton>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MinimizeBox>k__BackingField;
    [CompilerGeneratedAttribute]
private AnimationResource <Animation>k__BackingField;
    [CompilerGeneratedAttribute]
private ProgressBarStyle <ProgressBarStyle>k__BackingField;
    private IContainer components;
    private BackgroundWorker _backgroundWorker;
    [LocalizableAttribute("True")]
[CategoryAttribute("Appearance")]
[DescriptionAttribute("The text in the progress dialog's title bar.")]
[DefaultValueAttribute("")]
public string WindowTitle { get; public set; }
    [LocalizableAttribute("True")]
[CategoryAttribute("Appearance")]
[DescriptionAttribute("A short description of the operation being carried out.")]
public string Text { get; public set; }
    [CategoryAttribute("Behavior")]
[DescriptionAttribute("Indicates whether path strings in the Text property should be compacted if they are too large to fit on one line.")]
[DefaultValueAttribute("False")]
public bool UseCompactPathsForText { get; public set; }
    [LocalizableAttribute("True")]
[CategoryAttribute("Appearance")]
[DescriptionAttribute("Additional details about the operation being carried out.")]
[DefaultValueAttribute("")]
public string Description { get; public set; }
    [CategoryAttribute("Behavior")]
[DescriptionAttribute("Indicates whether path strings in the Description property should be compacted if they are too large to fit on one line.")]
[DefaultValueAttribute("False")]
public bool UseCompactPathsForDescription { get; public set; }
    [LocalizableAttribute("True")]
[CategoryAttribute("Appearance")]
[DescriptionAttribute("The text that will be shown after the Cancel button is pressed.")]
[DefaultValueAttribute("")]
public string CancellationText { get; public set; }
    [CategoryAttribute("Appearance")]
[DescriptionAttribute("Indicates whether an estimate of the remaining time will be shown.")]
[DefaultValueAttribute("False")]
public bool ShowTimeRemaining { get; public set; }
    [CategoryAttribute("Appearance")]
[DescriptionAttribute("Indicates whether the dialog has a cancel button. Do not set to false unless absolutely necessary.")]
[DefaultValueAttribute("True")]
public bool ShowCancelButton { get; public set; }
    [CategoryAttribute("Window Style")]
[DescriptionAttribute("Indicates whether the progress dialog has a minimize button.")]
[DefaultValueAttribute("True")]
public bool MinimizeBox { get; public set; }
    [BrowsableAttribute("False")]
public bool CancellationPending { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public AnimationResource Animation { get; public set; }
    [CategoryAttribute("Appearance")]
[DescriptionAttribute("Indicates the style of the progress bar.")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ProgressBarStyle ProgressBarStyle { get; public set; }
    [BrowsableAttribute("False")]
public bool IsBusy { get; }
    public ProgressDialog(IContainer container);
    [CompilerGeneratedAttribute]
public void add_DoWork(DoWorkEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_DoWork(DoWorkEventHandler value);
    [CompilerGeneratedAttribute]
public void add_RunWorkerCompleted(RunWorkerCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_RunWorkerCompleted(RunWorkerCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_ProgressChanged(ProgressChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ProgressChanged(ProgressChangedEventHandler value);
    public string get_WindowTitle();
    public void set_WindowTitle(string value);
    public string get_Text();
    public void set_Text(string value);
    public bool get_UseCompactPathsForText();
    public void set_UseCompactPathsForText(bool value);
    public string get_Description();
    public void set_Description(string value);
    public bool get_UseCompactPathsForDescription();
    public void set_UseCompactPathsForDescription(bool value);
    public string get_CancellationText();
    public void set_CancellationText(string value);
    [CompilerGeneratedAttribute]
public bool get_ShowTimeRemaining();
    [CompilerGeneratedAttribute]
public void set_ShowTimeRemaining(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowCancelButton();
    [CompilerGeneratedAttribute]
public void set_ShowCancelButton(bool value);
    [CompilerGeneratedAttribute]
public bool get_MinimizeBox();
    [CompilerGeneratedAttribute]
public void set_MinimizeBox(bool value);
    public bool get_CancellationPending();
    [CompilerGeneratedAttribute]
public AnimationResource get_Animation();
    [CompilerGeneratedAttribute]
public void set_Animation(AnimationResource value);
    [CompilerGeneratedAttribute]
public ProgressBarStyle get_ProgressBarStyle();
    [CompilerGeneratedAttribute]
public void set_ProgressBarStyle(ProgressBarStyle value);
    public bool get_IsBusy();
    public void Show(CancellationToken cancellationToken);
    public void Show(object argument, CancellationToken cancellationToken);
    public void ShowDialog(CancellationToken cancellationToken);
    public void ShowDialog(Window owner, CancellationToken cancellationToken);
    public void ShowDialog(IntPtr owner, CancellationToken cancellationToken);
    public void ShowDialog(Window owner, object argument, CancellationToken cancellationToken);
    public void ShowDialog(IntPtr owner, object argument, CancellationToken cancellationToken);
    private sealed virtual override void System.IProgress<System.Int32>.Report(int value);
    private sealed virtual override void System.IProgress<System.String>.Report(string value);
    public void ReportProgress(int percentProgress);
    public void ReportProgress(int percentProgress, string text, string description);
    public void ReportProgress(int percentProgress, string text, string description, object userState);
    protected virtual void OnDoWork(ProgressDialogDoWorkEventArgs e);
    [ObsoleteAttribute("OnDoWork(DoWorkEventArgs) is obsolete and will be removed in a future release. Use OnDoWork(ProgressDialogDoWorkEventArgs) instead.")]
protected virtual void OnDoWork(DoWorkEventArgs e);
    protected virtual void OnRunWorkerCompleted(RunWorkerCompletedEventArgs e);
    protected virtual void OnProgressChanged(ProgressChangedEventArgs e);
    private void RunProgressDialog(IntPtr owner, object argument, CancellationToken cancellationToken);
    private void _backgroundWorker_DoWork(object sender, DoWorkEventArgs e);
    private void _backgroundWorker_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e);
    private void _backgroundWorker_ProgressChanged(object sender, ProgressChangedEventArgs e);
    private sealed virtual override object System.IServiceProvider.GetService(Type serviceType);
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent();
}
public class Ookii.Dialogs.Wpf.ProgressDialogDoWorkEventArgs : DoWorkEventArgs {
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    public CancellationToken CancellationToken { get; }
    public ProgressDialogDoWorkEventArgs(object argument, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public CancellationToken get_CancellationToken();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Ookii.Dialogs.Wpf.Properties.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AnimationLoadErrorFormat { get; }
    internal static string CredentialEmptyTargetError { get; }
    internal static string CredentialError { get; }
    internal static string CredentialPromptNotCalled { get; }
    internal static string DuplicateButtonTypeError { get; }
    internal static string DuplicateItemIdError { get; }
    internal static string FileNotFoundFormat { get; }
    internal static string FolderBrowserDialogNoRootFolder { get; }
    internal static string GlassNotSupportedError { get; }
    internal static string InvalidFilterString { get; }
    internal static string InvalidTaskDialogItemIdError { get; }
    internal static string NoAssociatedTaskDialogError { get; }
    internal static string NonCustomTaskDialogButtonIdError { get; }
    internal static string Preview { get; }
    internal static string ProgressDialogNotRunningError { get; }
    internal static string ProgressDialogRunning { get; }
    internal static string TaskDialogEmptyButtonLabelError { get; }
    internal static string TaskDialogIllegalCrossThreadCallError { get; }
    internal static string TaskDialogItemHasOwnerError { get; }
    internal static string TaskDialogNoButtonsError { get; }
    internal static string TaskDialogNotRunningError { get; }
    internal static string TaskDialogRunningError { get; }
    internal static string TaskDialogsNotSupportedError { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AnimationLoadErrorFormat();
    internal static string get_CredentialEmptyTargetError();
    internal static string get_CredentialError();
    internal static string get_CredentialPromptNotCalled();
    internal static string get_DuplicateButtonTypeError();
    internal static string get_DuplicateItemIdError();
    internal static string get_FileNotFoundFormat();
    internal static string get_FolderBrowserDialogNoRootFolder();
    internal static string get_GlassNotSupportedError();
    internal static string get_InvalidFilterString();
    internal static string get_InvalidTaskDialogItemIdError();
    internal static string get_NoAssociatedTaskDialogError();
    internal static string get_NonCustomTaskDialogButtonIdError();
    internal static string get_Preview();
    internal static string get_ProgressDialogNotRunningError();
    internal static string get_ProgressDialogRunning();
    internal static string get_TaskDialogEmptyButtonLabelError();
    internal static string get_TaskDialogIllegalCrossThreadCallError();
    internal static string get_TaskDialogItemHasOwnerError();
    internal static string get_TaskDialogNoButtonsError();
    internal static string get_TaskDialogNotRunningError();
    internal static string get_TaskDialogRunningError();
    internal static string get_TaskDialogsNotSupportedError();
}
internal class Ookii.Dialogs.Wpf.SafeModuleHandle : SafeHandle {
    public bool IsInvalid { get; }
    public virtual bool get_IsInvalid();
    [ReliabilityContractAttribute("3", "1")]
protected virtual bool ReleaseHandle();
}
public enum Ookii.Dialogs.Wpf.ShellAnimation : Enum {
    public int value__;
    public static ShellAnimation FileMove;
    public static ShellAnimation FileCopy;
    public static ShellAnimation FlyingPapers;
    public static ShellAnimation SearchGlobe;
    public static ShellAnimation PermanentDelete;
    public static ShellAnimation FromRecycleBinDelete;
    public static ShellAnimation ToRecycleBinDelete;
    public static ShellAnimation SearchComputer;
    public static ShellAnimation SearchDocument;
    public static ShellAnimation SearchFlashlight;
}
[DefaultPropertyAttribute("MainInstruction")]
[DefaultEventAttribute("ButtonClicked")]
[DescriptionAttribute("Displays a task dialog.")]
[DesignerAttribute("Ookii.Dialogs.Wpf.TaskDialogDesigner")]
public class Ookii.Dialogs.Wpf.TaskDialog : Component {
    [CompilerGeneratedAttribute]
private EventHandler Created;
    [CompilerGeneratedAttribute]
private EventHandler Destroyed;
    [CompilerGeneratedAttribute]
private EventHandler`1<TaskDialogItemClickedEventArgs> ButtonClicked;
    [CompilerGeneratedAttribute]
private EventHandler`1<TaskDialogItemClickedEventArgs> RadioButtonClicked;
    [CompilerGeneratedAttribute]
private EventHandler`1<HyperlinkClickedEventArgs> HyperlinkClicked;
    [CompilerGeneratedAttribute]
private EventHandler VerificationClicked;
    [CompilerGeneratedAttribute]
private EventHandler`1<TimerEventArgs> Timer;
    [CompilerGeneratedAttribute]
private EventHandler`1<ExpandButtonClickedEventArgs> ExpandButtonClicked;
    [CompilerGeneratedAttribute]
private EventHandler HelpRequested;
    private TaskDialogItemCollection`1<TaskDialogButton> _buttons;
    private TaskDialogItemCollection`1<TaskDialogRadioButton> _radioButtons;
    private TASKDIALOGCONFIG _config;
    private TaskDialogIcon _mainIcon;
    private Icon _customMainIcon;
    private Icon _customFooterIcon;
    private TaskDialogIcon _footerIcon;
    private Dictionary`2<int, TaskDialogButton> _buttonsById;
    private Dictionary`2<int, TaskDialogRadioButton> _radioButtonsById;
    private IntPtr _handle;
    private int _progressBarMarqueeAnimationSpeed;
    private int _progressBarMinimimum;
    private int _progressBarMaximum;
    private int _progressBarValue;
    private ProgressBarState _progressBarState;
    private int _inEventHandler;
    private bool _updatePending;
    private object _tag;
    private Icon _windowIcon;
    private IContainer components;
    public static bool OSSupportsTaskDialogs { get; }
    [LocalizableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[CategoryAttribute("Appearance")]
[DescriptionAttribute("A list of the buttons on the Task Dialog.")]
public TaskDialogItemCollection`1<TaskDialogButton> Buttons { get; }
    [LocalizableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[CategoryAttribute("Appearance")]
[DescriptionAttribute("A list of the radio buttons on the Task Dialog.")]
public TaskDialogItemCollection`1<TaskDialogRadioButton> RadioButtons { get; }
    [LocalizableAttribute("True")]
[CategoryAttribute("Appearance")]
[DescriptionAttribute("The window title of the task dialog.")]
[DefaultValueAttribute("")]
public string WindowTitle { get; public set; }
    [LocalizableAttribute("True")]
[CategoryAttribute("Appearance")]
[DescriptionAttribute("The dialog's main instruction.")]
[DefaultValueAttribute("")]
[EditorAttribute("System.ComponentModel.Design.MultilineStringEditor", "System.Drawing.Design.UITypeEditor")]
public string MainInstruction { get; public set; }
    [LocalizableAttribute("True")]
[CategoryAttribute("Appearance")]
[DescriptionAttribute("The dialog's primary content.")]
[DefaultValueAttribute("")]
[EditorAttribute("System.ComponentModel.Design.MultilineStringEditor", "System.Drawing.Design.UITypeEditor")]
public string Content { get; public set; }
    [LocalizableAttribute("True")]
[CategoryAttribute("Appearance")]
[DescriptionAttribute("The icon to be used in the title bar of the dialog. Used only when the dialog is shown as a modeless dialog.")]
[DefaultValueAttribute("")]
public Icon WindowIcon { get; public set; }
    [LocalizableAttribute("True")]
[CategoryAttribute("Appearance")]
[DescriptionAttribute("The icon to display in the task dialog.")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public TaskDialogIcon MainIcon { get; public set; }
    [LocalizableAttribute("True")]
[CategoryAttribute("Appearance")]
[DescriptionAttribute("A custom icon to display in the dialog.")]
[DefaultValueAttribute("")]
public Icon CustomMainIcon { get; public set; }
    [LocalizableAttribute("True")]
[CategoryAttribute("Appearance")]
[DescriptionAttribute("The icon to display in the footer area of the task dialog.")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public TaskDialogIcon FooterIcon { get; public set; }
    [LocalizableAttribute("True")]
[CategoryAttribute("Appearance")]
[DescriptionAttribute("A custom icon to display in the footer area of the task dialog.")]
[DefaultValueAttribute("")]
public Icon CustomFooterIcon { get; public set; }
    [CategoryAttribute("Behavior")]
[DescriptionAttribute("Indicates whether custom buttons should be displayed as normal buttons or command links.")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public TaskDialogButtonStyle ButtonStyle { get; public set; }
    [LocalizableAttribute("True")]
[CategoryAttribute("Appearance")]
[DescriptionAttribute("The label for the verification checkbox.")]
[DefaultValueAttribute("")]
public string VerificationText { get; public set; }
    [CategoryAttribute("Behavior")]
[DescriptionAttribute("Indicates whether the verification checkbox is checked ot not.")]
[DefaultValueAttribute("False")]
public bool IsVerificationChecked { get; public set; }
    [LocalizableAttribute("True")]
[CategoryAttribute("Appearance")]
[DescriptionAttribute("Additional information to be displayed on the dialog.")]
[DefaultValueAttribute("")]
[EditorAttribute("System.ComponentModel.Design.MultilineStringEditor", "System.Drawing.Design.UITypeEditor")]
public string ExpandedInformation { get; public set; }
    [LocalizableAttribute("True")]
[CategoryAttribute("Appearance")]
[DescriptionAttribute("The text to use for the control for collapsing the expandable information.")]
[DefaultValueAttribute("")]
public string ExpandedControlText { get; public set; }
    [LocalizableAttribute("True")]
[CategoryAttribute("Appearance")]
[DescriptionAttribute("The text to use for the control for expanding the expandable information.")]
[DefaultValueAttribute("")]
public string CollapsedControlText { get; public set; }
    [LocalizableAttribute("True")]
[CategoryAttribute("Appearance")]
[DescriptionAttribute("The text to be used in the footer area of the task dialog.")]
[DefaultValueAttribute("")]
[EditorAttribute("System.ComponentModel.Design.MultilineStringEditor", "System.Drawing.Design.UITypeEditor")]
public string Footer { get; public set; }
    [LocalizableAttribute("True")]
[CategoryAttribute("Appearance")]
[DescriptionAttribute("the width of the task dialog's client area in DLU's. If 0, task dialog will calculate the ideal width.")]
[DefaultValueAttribute("0")]
public int Width { get; public set; }
    [CategoryAttribute("Behavior")]
[DescriptionAttribute("Indicates whether hyperlinks are allowed for the Content, ExpandedInformation and Footer properties.")]
[DefaultValueAttribute("False")]
public bool EnableHyperlinks { get; public set; }
    [CategoryAttribute("Behavior")]
[DescriptionAttribute("Indicates that the dialog should be able to be closed using Alt-F4, Escape and the title bar's close button even if no cancel button is specified.")]
[DefaultValueAttribute("False")]
public bool AllowDialogCancellation { get; public set; }
    [CategoryAttribute("Behavior")]
[DescriptionAttribute("Indicates that the string specified by the ExpandedInformation property should be displayed at the bottom of the dialog's footer area instead of immediately after the dialog's content.")]
[DefaultValueAttribute("False")]
public bool ExpandFooterArea { get; public set; }
    [CategoryAttribute("Behavior")]
[DescriptionAttribute("Indicates that the string specified by the ExpandedInformation property should be displayed by default.")]
[DefaultValueAttribute("False")]
public bool ExpandedByDefault { get; public set; }
    [CategoryAttribute("Behavior")]
[DescriptionAttribute("Indicates whether the Timer event is raised periodically while the dialog is visible.")]
[DefaultValueAttribute("False")]
public bool RaiseTimerEvent { get; public set; }
    [CategoryAttribute("Layout")]
[DescriptionAttribute("Indicates whether the dialog is centered in the parent window instead of the screen.")]
[DefaultValueAttribute("False")]
public bool CenterParent { get; public set; }
    [LocalizableAttribute("True")]
[CategoryAttribute("Appearance")]
[DescriptionAttribute("Indicates whether text is displayed right to left.")]
[DefaultValueAttribute("False")]
public bool RightToLeft { get; public set; }
    [CategoryAttribute("Window Style")]
[DescriptionAttribute("Indicates whether the dialog has a minimize box on its caption bar.")]
[DefaultValueAttribute("False")]
public bool MinimizeBox { get; public set; }
    [CategoryAttribute("Behavior")]
[DescriptionAttribute("The type of progress bar displayed on the dialog.")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ProgressBarStyle ProgressBarStyle { get; public set; }
    [CategoryAttribute("Behavior")]
[DescriptionAttribute("The marquee animation speed of the progress bar in milliseconds.")]
[DefaultValueAttribute("100")]
public int ProgressBarMarqueeAnimationSpeed { get; public set; }
    [CategoryAttribute("Behavior")]
[DescriptionAttribute("The lower bound of the range of the task dialog's progress bar.")]
[DefaultValueAttribute("0")]
public int ProgressBarMinimum { get; public set; }
    [CategoryAttribute("Behavior")]
[DescriptionAttribute("The upper bound of the range of the task dialog's progress bar.")]
[DefaultValueAttribute("100")]
public int ProgressBarMaximum { get; public set; }
    [CategoryAttribute("Behavior")]
[DescriptionAttribute("The current value of the task dialog's progress bar.")]
[DefaultValueAttribute("0")]
public int ProgressBarValue { get; public set; }
    [CategoryAttribute("Behavior")]
[DescriptionAttribute("The state of the task dialog's progress bar.")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ProgressBarState ProgressBarState { get; public set; }
    [CategoryAttribute("Data")]
[DescriptionAttribute("User-defined data about the component.")]
[DefaultValueAttribute("")]
public object Tag { get; public set; }
    private bool IsDialogRunning { get; }
    [BrowsableAttribute("False")]
public IntPtr Handle { get; }
    public TaskDialog(IContainer container);
    [CompilerGeneratedAttribute]
public void add_Created(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Created(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_Destroyed(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Destroyed(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_ButtonClicked(EventHandler`1<TaskDialogItemClickedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ButtonClicked(EventHandler`1<TaskDialogItemClickedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_RadioButtonClicked(EventHandler`1<TaskDialogItemClickedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_RadioButtonClicked(EventHandler`1<TaskDialogItemClickedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_HyperlinkClicked(EventHandler`1<HyperlinkClickedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_HyperlinkClicked(EventHandler`1<HyperlinkClickedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_VerificationClicked(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_VerificationClicked(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_Timer(EventHandler`1<TimerEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Timer(EventHandler`1<TimerEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_ExpandButtonClicked(EventHandler`1<ExpandButtonClickedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ExpandButtonClicked(EventHandler`1<ExpandButtonClickedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_HelpRequested(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_HelpRequested(EventHandler value);
    public static bool get_OSSupportsTaskDialogs();
    public TaskDialogItemCollection`1<TaskDialogButton> get_Buttons();
    public TaskDialogItemCollection`1<TaskDialogRadioButton> get_RadioButtons();
    public string get_WindowTitle();
    public void set_WindowTitle(string value);
    public string get_MainInstruction();
    public void set_MainInstruction(string value);
    public string get_Content();
    public void set_Content(string value);
    public Icon get_WindowIcon();
    public void set_WindowIcon(Icon value);
    public TaskDialogIcon get_MainIcon();
    public void set_MainIcon(TaskDialogIcon value);
    public Icon get_CustomMainIcon();
    public void set_CustomMainIcon(Icon value);
    public TaskDialogIcon get_FooterIcon();
    public void set_FooterIcon(TaskDialogIcon value);
    public Icon get_CustomFooterIcon();
    public void set_CustomFooterIcon(Icon value);
    public TaskDialogButtonStyle get_ButtonStyle();
    public void set_ButtonStyle(TaskDialogButtonStyle value);
    public string get_VerificationText();
    public void set_VerificationText(string value);
    public bool get_IsVerificationChecked();
    public void set_IsVerificationChecked(bool value);
    public string get_ExpandedInformation();
    public void set_ExpandedInformation(string value);
    public string get_ExpandedControlText();
    public void set_ExpandedControlText(string value);
    public string get_CollapsedControlText();
    public void set_CollapsedControlText(string value);
    public string get_Footer();
    public void set_Footer(string value);
    public int get_Width();
    public void set_Width(int value);
    public bool get_EnableHyperlinks();
    public void set_EnableHyperlinks(bool value);
    public bool get_AllowDialogCancellation();
    public void set_AllowDialogCancellation(bool value);
    public bool get_ExpandFooterArea();
    public void set_ExpandFooterArea(bool value);
    public bool get_ExpandedByDefault();
    public void set_ExpandedByDefault(bool value);
    public bool get_RaiseTimerEvent();
    public void set_RaiseTimerEvent(bool value);
    public bool get_CenterParent();
    public void set_CenterParent(bool value);
    public bool get_RightToLeft();
    public void set_RightToLeft(bool value);
    public bool get_MinimizeBox();
    public void set_MinimizeBox(bool value);
    public ProgressBarStyle get_ProgressBarStyle();
    public void set_ProgressBarStyle(ProgressBarStyle value);
    public int get_ProgressBarMarqueeAnimationSpeed();
    public void set_ProgressBarMarqueeAnimationSpeed(int value);
    public int get_ProgressBarMinimum();
    public void set_ProgressBarMinimum(int value);
    public int get_ProgressBarMaximum();
    public void set_ProgressBarMaximum(int value);
    public int get_ProgressBarValue();
    public void set_ProgressBarValue(int value);
    public ProgressBarState get_ProgressBarState();
    public void set_ProgressBarState(ProgressBarState value);
    public object get_Tag();
    public void set_Tag(object value);
    public TaskDialogButton Show();
    public TaskDialogButton ShowDialog();
    public TaskDialogButton ShowDialog(Window owner);
    public TaskDialogButton ShowDialog(IntPtr owner);
    public void ClickVerification(bool checkState, bool setFocus);
    protected virtual void OnHyperlinkClicked(HyperlinkClickedEventArgs e);
    protected virtual void OnButtonClicked(TaskDialogItemClickedEventArgs e);
    protected virtual void OnRadioButtonClicked(TaskDialogItemClickedEventArgs e);
    protected virtual void OnVerificationClicked(EventArgs e);
    protected virtual void OnCreated(EventArgs e);
    protected virtual void OnTimer(TimerEventArgs e);
    protected virtual void OnDestroyed(EventArgs e);
    protected virtual void OnExpandButtonClicked(ExpandButtonClickedEventArgs e);
    protected virtual void OnHelpRequested(EventArgs e);
    internal void SetItemEnabled(TaskDialogItem item);
    internal void SetButtonElevationRequired(TaskDialogButton button);
    internal void ClickItem(TaskDialogItem item);
    internal void UpdateDialog();
    private bool get_IsDialogRunning();
    private void SetElementText(TaskDialogElements element, string text);
    private void SetupIcon();
    private void SetupIcon(TaskDialogIcon icon, Icon customIcon, TaskDialogFlags flag);
    private static void CleanUpButtons(IntPtr& buttons, UInt32& count);
    private static void MarshalButtons(List`1<TASKDIALOG_BUTTON> buttons, IntPtr& buttonsPtr, UInt32& count);
    private List`1<TASKDIALOG_BUTTON> SetupButtons();
    private List`1<TASKDIALOG_BUTTON> SetupRadioButtons();
    private void SetFlag(TaskDialogFlags flag, bool value);
    private bool GetFlag(TaskDialogFlags flag);
    private UInt32 TaskDialogCallback(IntPtr hwnd, UInt32 uNotification, IntPtr wParam, IntPtr lParam, IntPtr dwRefData);
    private void DialogCreated();
    private void UpdateProgressBarStyle();
    private void UpdateProgressBarMarqueeSpeed();
    private void UpdateProgressBarRange();
    private void UpdateProgressBarValue();
    private void UpdateProgressBarState();
    private void CheckCrossThreadCall();
    public sealed virtual IntPtr get_Handle();
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent();
}
public class Ookii.Dialogs.Wpf.TaskDialogButton : TaskDialogItem {
    private ButtonType _type;
    private bool _elevationRequired;
    private bool _default;
    private string _commandLinkNote;
    [CategoryAttribute("Appearance")]
[DescriptionAttribute("The type of the button.")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ButtonType ButtonType { get; public set; }
    [LocalizableAttribute("True")]
[CategoryAttribute("Appearance")]
[DescriptionAttribute("The text of the note associated with a command link button.")]
[DefaultValueAttribute("")]
[EditorAttribute("System.ComponentModel.Design.MultilineStringEditor", "System.Drawing.Design.UITypeEditor")]
public string CommandLinkNote { get; public set; }
    [CategoryAttribute("Behavior")]
[DescriptionAttribute("Indicates if the button is the default button on the dialog.")]
[DefaultValueAttribute("False")]
public bool Default { get; public set; }
    [CategoryAttribute("Behavior")]
[DescriptionAttribute("Indicates whether the Task Dialog button or command link should have a User Account Control (UAC) shield icon (in other words, whether the action invoked by the button requires elevation).")]
[DefaultValueAttribute("False")]
public bool ElevationRequired { get; public set; }
    internal int Id { get; internal set; }
    internal TaskDialogCommonButtonFlags ButtonFlag { get; }
    protected IEnumerable ItemCollection { get; }
    public TaskDialogButton(ButtonType type);
    public TaskDialogButton(IContainer container);
    public TaskDialogButton(string text);
    public ButtonType get_ButtonType();
    public void set_ButtonType(ButtonType value);
    public string get_CommandLinkNote();
    public void set_CommandLinkNote(string value);
    public bool get_Default();
    public void set_Default(bool value);
    public bool get_ElevationRequired();
    public void set_ElevationRequired(bool value);
    internal virtual int get_Id();
    internal virtual void set_Id(int value);
    internal virtual void AutoAssignId();
    internal virtual void CheckDuplicate(TaskDialogItem itemToExclude);
    internal TaskDialogCommonButtonFlags get_ButtonFlag();
    protected virtual IEnumerable get_ItemCollection();
    private void CheckDuplicateButton(ButtonType type, TaskDialogItem itemToExclude);
}
public enum Ookii.Dialogs.Wpf.TaskDialogButtonStyle : Enum {
    public int value__;
    public static TaskDialogButtonStyle Standard;
    public static TaskDialogButtonStyle CommandLinks;
    public static TaskDialogButtonStyle CommandLinksNoIcon;
}
internal class Ookii.Dialogs.Wpf.TaskDialogDesigner : ComponentDesigner {
    public DesignerVerbCollection Verbs { get; }
    public virtual DesignerVerbCollection get_Verbs();
    private void Preview(object sender, EventArgs e);
}
public enum Ookii.Dialogs.Wpf.TaskDialogIcon : Enum {
    public int value__;
    public static TaskDialogIcon Custom;
    public static TaskDialogIcon Warning;
    public static TaskDialogIcon Error;
    public static TaskDialogIcon Information;
    public static TaskDialogIcon Shield;
}
[ToolboxItemAttribute("False")]
[DesignTimeVisibleAttribute("False")]
[DefaultPropertyAttribute("Text")]
[DefaultEventAttribute("Click")]
public abstract class Ookii.Dialogs.Wpf.TaskDialogItem : Component {
    private TaskDialog _owner;
    private int _id;
    private bool _enabled;
    private string _text;
    private IContainer components;
    [BrowsableAttribute("False")]
public TaskDialog Owner { get; internal set; }
    [LocalizableAttribute("True")]
[CategoryAttribute("Appearance")]
[DescriptionAttribute("The text of the item.")]
[DefaultValueAttribute("")]
public string Text { get; public set; }
    [CategoryAttribute("Behavior")]
[DescriptionAttribute("Indicates whether the item is enabled.")]
[DefaultValueAttribute("True")]
public bool Enabled { get; public set; }
    [CategoryAttribute("Data")]
[DescriptionAttribute("The id of the item.")]
[DefaultValueAttribute("0")]
internal int Id { get; internal set; }
    protected IEnumerable ItemCollection { get; }
    protected TaskDialogItem(IContainer container);
    internal TaskDialogItem(int id);
    public TaskDialog get_Owner();
    internal void set_Owner(TaskDialog value);
    public string get_Text();
    public void set_Text(string value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    internal virtual int get_Id();
    internal virtual void set_Id(int value);
    public void Click();
    protected abstract virtual IEnumerable get_ItemCollection();
    protected void UpdateOwner();
    internal virtual void CheckDuplicate(TaskDialogItem itemToExclude);
    internal virtual void AutoAssignId();
    private void CheckDuplicateId(TaskDialogItem itemToExclude, int id);
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent();
}
public class Ookii.Dialogs.Wpf.TaskDialogItemClickedEventArgs : CancelEventArgs {
    private TaskDialogItem _item;
    public TaskDialogItem Item { get; }
    public TaskDialogItemClickedEventArgs(TaskDialogItem item);
    public TaskDialogItem get_Item();
}
public class Ookii.Dialogs.Wpf.TaskDialogItemCollection`1 : Collection`1<T> {
    private TaskDialog _owner;
    internal TaskDialogItemCollection`1(TaskDialog owner);
    protected virtual void ClearItems();
    protected virtual void InsertItem(int index, T item);
    protected virtual void RemoveItem(int index);
    protected virtual void SetItem(int index, T item);
}
public class Ookii.Dialogs.Wpf.TaskDialogRadioButton : TaskDialogItem {
    private bool _checked;
    [CategoryAttribute("Appearance")]
[DescriptionAttribute("Indicates whether the radio button is checked.")]
[DefaultValueAttribute("False")]
public bool Checked { get; public set; }
    protected IEnumerable ItemCollection { get; }
    public TaskDialogRadioButton(IContainer container);
    public bool get_Checked();
    public void set_Checked(bool value);
    protected virtual IEnumerable get_ItemCollection();
}
public class Ookii.Dialogs.Wpf.TimerEventArgs : EventArgs {
    private int _tickCount;
    private bool _resetTickCount;
    public bool ResetTickCount { get; public set; }
    public int TickCount { get; }
    public TimerEventArgs(int tickCount);
    public bool get_ResetTickCount();
    public void set_ResetTickCount(bool value);
    public int get_TickCount();
}
[DefaultEventAttribute("FileOk")]
[DefaultPropertyAttribute("FileName")]
public abstract class Ookii.Dialogs.Wpf.VistaFileDialog : object {
    internal static int HelpButtonId;
    private FileDialog _downlevelDialog;
    private FOS _options;
    private string _filter;
    private int _filterIndex;
    private String[] _fileNames;
    private string _defaultExt;
    private bool _addExtension;
    private string _initialDirectory;
    private string _title;
    private Window _owner;
    [CompilerGeneratedAttribute]
private CancelEventHandler FileOk;
    [BrowsableAttribute("False")]
public static bool IsVistaFileDialogSupported { get; }
    [DescriptionAttribute("A value indicating whether the dialog box automatically adds an extension to a file name if the user omits the extension.")]
[CategoryAttribute("Behavior")]
[DefaultValueAttribute("True")]
public bool AddExtension { get; public set; }
    [DescriptionAttribute("A value indicating whether the dialog box displays a warning if the user specifies a file name that does not exist.")]
[CategoryAttribute("Behavior")]
[DefaultValueAttribute("False")]
public bool CheckFileExists { get; public set; }
    [DescriptionAttribute("A value indicating whether the dialog box displays a warning if the user specifies a path that does not exist.")]
[DefaultValueAttribute("True")]
[CategoryAttribute("Behavior")]
public bool CheckPathExists { get; public set; }
    [CategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[DescriptionAttribute("The default file name extension.")]
public string DefaultExt { get; public set; }
    [CategoryAttribute("Behavior")]
[DescriptionAttribute("A value indicating whether the dialog box returns the location of the file referenced by the shortcut or whether it returns the location of the shortcut (.lnk).")]
[DefaultValueAttribute("True")]
public bool DereferenceLinks { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Data")]
[DescriptionAttribute("A string containing the file name selected in the file dialog box.")]
public string FileName { get; public set; }
    [DescriptionAttribute("The file names of all selected files in the dialog box.")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public String[] FileNames { get; }
    [DescriptionAttribute("The current file name filter string, which determines the choices that appear in the "Save as file type" or "Files of type" box in the dialog box.")]
[CategoryAttribute("Behavior")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("")]
public string Filter { get; public set; }
    [DescriptionAttribute("The index of the filter currently selected in the file dialog box.")]
[CategoryAttribute("Behavior")]
[DefaultValueAttribute("1")]
public int FilterIndex { get; public set; }
    [DescriptionAttribute("The initial directory displayed by the file dialog box.")]
[DefaultValueAttribute("")]
[CategoryAttribute("Data")]
public string InitialDirectory { get; public set; }
    [DefaultValueAttribute("False")]
[DescriptionAttribute("A value indicating whether the dialog box restores the current directory before closing.")]
[CategoryAttribute("Behavior")]
public bool RestoreDirectory { get; public set; }
    [DescriptionAttribute("The file dialog box title.")]
[CategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[LocalizableAttribute("True")]
public string Title { get; public set; }
    [DefaultValueAttribute("True")]
[CategoryAttribute("Behavior")]
[DescriptionAttribute("A value indicating whether the dialog box accepts only valid Win32 file names.")]
public bool ValidateNames { get; public set; }
    [BrowsableAttribute("False")]
protected FileDialog DownlevelDialog { get; protected set; }
    private String[] FileNamesInternal { get; internal set; }
    [CompilerGeneratedAttribute]
public void add_FileOk(CancelEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_FileOk(CancelEventHandler value);
    public static bool get_IsVistaFileDialogSupported();
    public bool get_AddExtension();
    public void set_AddExtension(bool value);
    public virtual bool get_CheckFileExists();
    public virtual void set_CheckFileExists(bool value);
    public bool get_CheckPathExists();
    public void set_CheckPathExists(bool value);
    public string get_DefaultExt();
    public void set_DefaultExt(string value);
    public bool get_DereferenceLinks();
    public void set_DereferenceLinks(bool value);
    public string get_FileName();
    public void set_FileName(string value);
    public String[] get_FileNames();
    public string get_Filter();
    public void set_Filter(string value);
    public int get_FilterIndex();
    public void set_FilterIndex(int value);
    public string get_InitialDirectory();
    public void set_InitialDirectory(string value);
    public bool get_RestoreDirectory();
    public void set_RestoreDirectory(bool value);
    public string get_Title();
    public void set_Title(string value);
    public bool get_ValidateNames();
    public void set_ValidateNames(bool value);
    protected FileDialog get_DownlevelDialog();
    protected void set_DownlevelDialog(FileDialog value);
    private String[] get_FileNamesInternal();
    internal void set_FileNamesInternal(String[] value);
    public virtual void Reset();
    public Nullable`1<bool> ShowDialog();
    public Nullable`1<bool> ShowDialog(Window owner);
    public Nullable`1<bool> ShowDialog(IntPtr owner);
    internal void SetOption(FOS option, bool value);
    internal bool GetOption(FOS option);
    internal virtual void GetResult(IFileDialog dialog);
    protected virtual void OnFileOk(CancelEventArgs e);
    internal bool PromptUser(string text, MessageBoxButton buttons, MessageBoxImage icon, MessageBoxResult defaultResult);
    internal virtual void SetDialogProperties(IFileDialog dialog);
    internal abstract virtual IFileDialog CreateFileDialog();
    internal bool DoFileOk(IFileDialog dialog);
    private bool RunFileDialog(IntPtr hwndOwner);
    private void DownlevelDialog_FileOk(object sender, CancelEventArgs e);
}
internal class Ookii.Dialogs.Wpf.VistaFileDialogEvents : object {
    private static UInt32 S_OK;
    private static UInt32 S_FALSE;
    private static UInt32 E_NOTIMPL;
    private VistaFileDialog _dialog;
    public VistaFileDialogEvents(VistaFileDialog dialog);
    public sealed virtual HRESULT OnFileOk(IFileDialog pfd);
    public sealed virtual HRESULT OnFolderChanging(IFileDialog pfd, IShellItem psiFolder);
    public sealed virtual void OnFolderChange(IFileDialog pfd);
    public sealed virtual void OnSelectionChange(IFileDialog pfd);
    public sealed virtual void OnShareViolation(IFileDialog pfd, IShellItem psi, FDE_SHAREVIOLATION_RESPONSE& pResponse);
    public sealed virtual void OnTypeChange(IFileDialog pfd);
    public sealed virtual void OnOverwrite(IFileDialog pfd, IShellItem psi, FDE_OVERWRITE_RESPONSE& pResponse);
    public sealed virtual void OnItemSelected(IFileDialogCustomize pfdc, int dwIDCtl, int dwIDItem);
    public sealed virtual void OnButtonClicked(IFileDialogCustomize pfdc, int dwIDCtl);
    public sealed virtual void OnCheckButtonToggled(IFileDialogCustomize pfdc, int dwIDCtl, bool bChecked);
    public sealed virtual void OnControlActivating(IFileDialogCustomize pfdc, int dwIDCtl);
}
[DefaultEventAttribute("HelpRequest")]
[DesignerAttribute("System.Windows.Forms.Design.FolderBrowserDialogDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DefaultPropertyAttribute("SelectedPath")]
[DescriptionAttribute("Prompts the user to select a folder.")]
public class Ookii.Dialogs.Wpf.VistaFolderBrowserDialog : object {
    private string _description;
    private string _selectedPath;
    private FOS _options;
    private String[] _selectedPaths;
    [CompilerGeneratedAttribute]
private SpecialFolder <RootFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowNewFolderButton>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseDescriptionForTitle>k__BackingField;
    [BrowsableAttribute("False")]
public static bool IsVistaFolderDialogSupported { get; }
    [CategoryAttribute("Folder Browsing")]
[DefaultValueAttribute("")]
[LocalizableAttribute("True")]
[BrowsableAttribute("True")]
[DescriptionAttribute("The descriptive text displayed above the tree view control in the dialog box, or below the list view control in the Vista style dialog.")]
public string Description { get; public set; }
    [LocalizableAttribute("False")]
[DescriptionAttribute("The root folder where the browsing starts from. This property has no effect if the Vista style dialog is used.")]
[CategoryAttribute("Folder Browsing")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("System.Environment/SpecialFolder", "Desktop")]
public SpecialFolder RootFolder { get; public set; }
    [BrowsableAttribute("True")]
[EditorAttribute("System.Windows.Forms.Design.SelectedPathEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[DescriptionAttribute("The path selected by the user.")]
[DefaultValueAttribute("")]
[LocalizableAttribute("True")]
[CategoryAttribute("Folder Browsing")]
public string SelectedPath { get; public set; }
    [BrowsableAttribute("True")]
[LocalizableAttribute("False")]
[DescriptionAttribute("A value indicating whether the New Folder button appears in the folder browser dialog box. This property has no effect if the Vista style dialog is used; in that case, the New Folder button is always shown.")]
[DefaultValueAttribute("True")]
[CategoryAttribute("Folder Browsing")]
public bool ShowNewFolderButton { get; public set; }
    [CategoryAttribute("Folder Browsing")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("A value that indicates whether to use the value of the Description property as the dialog title for Vista style dialogs. This property has no effect on old style dialogs.")]
public bool UseDescriptionForTitle { get; public set; }
    [DescriptionAttribute("A value indicating whether the dialog box allows multiple folders to be selected.")]
[DefaultValueAttribute("False")]
[CategoryAttribute("Behavior")]
public bool Multiselect { get; public set; }
    [DescriptionAttribute("The folder path of all selected folder in the dialog box.")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public String[] SelectedPaths { get; public set; }
    public static bool get_IsVistaFolderDialogSupported();
    public string get_Description();
    public void set_Description(string value);
    [CompilerGeneratedAttribute]
public SpecialFolder get_RootFolder();
    [CompilerGeneratedAttribute]
public void set_RootFolder(SpecialFolder value);
    public string get_SelectedPath();
    public void set_SelectedPath(string value);
    [CompilerGeneratedAttribute]
public bool get_ShowNewFolderButton();
    [CompilerGeneratedAttribute]
public void set_ShowNewFolderButton(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseDescriptionForTitle();
    [CompilerGeneratedAttribute]
public void set_UseDescriptionForTitle(bool value);
    public bool get_Multiselect();
    public void set_Multiselect(bool value);
    public String[] get_SelectedPaths();
    public void set_SelectedPaths(String[] value);
    public void Reset();
    public Nullable`1<bool> ShowDialog();
    public Nullable`1<bool> ShowDialog(Window owner);
    public Nullable`1<bool> ShowDialog(IntPtr owner);
    internal void SetOption(FOS option, bool value);
    internal bool HasOption(FOS option);
    private bool RunDialog(IntPtr owner);
    private bool RunDialogDownlevel(IntPtr owner);
    private void SetDialogProperties(IFileDialog dialog);
    private void GetResult(IFileDialog dialog);
    private int BrowseCallbackProc(IntPtr hwnd, FolderBrowserDialogMessage msg, IntPtr lParam, IntPtr wParam);
}
[DescriptionAttribute("Prompts the user to open a file.")]
public class Ookii.Dialogs.Wpf.VistaOpenFileDialog : VistaFileDialog {
    private bool _showReadOnly;
    private bool _readOnlyChecked;
    private static int _openDropDownId;
    private static int _openItemId;
    private static int _readOnlyItemId;
    [DefaultValueAttribute("True")]
[DescriptionAttribute("A value indicating whether the dialog box displays a warning if the user specifies a file name that does not exist.")]
public bool CheckFileExists { get; public set; }
    [DescriptionAttribute("A value indicating whether the dialog box allows multiple files to be selected.")]
[DefaultValueAttribute("False")]
[CategoryAttribute("Behavior")]
public bool Multiselect { get; public set; }
    [DescriptionAttribute("A value indicating whether the dialog box contains a read-only check box.")]
[CategoryAttribute("Behavior")]
[DefaultValueAttribute("False")]
public bool ShowReadOnly { get; public set; }
    [DefaultValueAttribute("False")]
[DescriptionAttribute("A value indicating whether the read-only check box is selected.")]
[CategoryAttribute("Behavior")]
public bool ReadOnlyChecked { get; public set; }
    public virtual bool get_CheckFileExists();
    public virtual void set_CheckFileExists(bool value);
    public bool get_Multiselect();
    public void set_Multiselect(bool value);
    public bool get_ShowReadOnly();
    public void set_ShowReadOnly(bool value);
    public bool get_ReadOnlyChecked();
    public void set_ReadOnlyChecked(bool value);
    public virtual void Reset();
    public Stream OpenFile();
    internal virtual IFileDialog CreateFileDialog();
    internal virtual void SetDialogProperties(IFileDialog dialog);
    internal virtual void GetResult(IFileDialog dialog);
}
[DesignerAttribute("System.Windows.Forms.Design.SaveFileDialogDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DescriptionAttribute("Prompts the user to open a file.")]
public class Ookii.Dialogs.Wpf.VistaSaveFileDialog : VistaFileDialog {
    [DefaultValueAttribute("False")]
[CategoryAttribute("Behavior")]
[DescriptionAttribute("A value indicating whether the dialog box prompts the user for permission to create a file if the user specifies a file that does not exist.")]
public bool CreatePrompt { get; public set; }
    [CategoryAttribute("Behavior")]
[DefaultValueAttribute("True")]
[DescriptionAttribute("A value indicating whether the Save As dialog box displays a warning if the user specifies a file name that already exists.")]
public bool OverwritePrompt { get; public set; }
    public bool get_CreatePrompt();
    public void set_CreatePrompt(bool value);
    public bool get_OverwritePrompt();
    public void set_OverwritePrompt(bool value);
    public virtual void Reset();
    public Stream OpenFile();
    protected virtual void OnFileOk(CancelEventArgs e);
    internal virtual IFileDialog CreateFileDialog();
}
