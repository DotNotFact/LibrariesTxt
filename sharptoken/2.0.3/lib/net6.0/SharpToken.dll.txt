[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal class SharpToken.ByteArrayEqualityComparer : object {
    public static ByteArrayEqualityComparer Instance;
    private static ByteArrayEqualityComparer();
    public sealed virtual bool Equals(Byte[] x, Byte[] y);
    public sealed virtual int GetHashCode(Byte[] bytes);
}
internal class SharpToken.BytePairEncodingCore : object {
    [CompilerGeneratedAttribute]
private BytePairIndex <Encoder>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, int> <SpecialTokensEncoder>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<int, Byte[]> <Decoder>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<int, Byte[]> <SpecialTokensDecoder>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RegexTls>k__BackingField;
    public BytePairIndex Encoder { get; }
    public Dictionary`2<string, int> SpecialTokensEncoder { get; }
    public Dictionary`2<int, Byte[]> Decoder { get; }
    public Dictionary`2<int, Byte[]> SpecialTokensDecoder { get; }
    public Regex RegexTls { get; }
    public BytePairEncodingCore(BytePairIndex bytePairEncoder, Dictionary`2<string, int> specialTokenEncoder, Regex tokenPatternRegex);
    [CompilerGeneratedAttribute]
public BytePairIndex get_Encoder();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, int> get_SpecialTokensEncoder();
    [CompilerGeneratedAttribute]
public Dictionary`2<int, Byte[]> get_Decoder();
    [CompilerGeneratedAttribute]
public Dictionary`2<int, Byte[]> get_SpecialTokensDecoder();
    [CompilerGeneratedAttribute]
public Regex get_RegexTls();
    public ValueTuple`2<List`1<int>, int> EncodeNative(string text, IReadOnlyCollection`1<string> allowedSpecialTokens, bool countOnly);
    public Byte[] DecodeNative(IEnumerable`1<int> tokens);
    private bool TryDecodeToken(int token, Byte[]& tokenBytes);
}
[DefaultMemberAttribute("Item")]
internal class SharpToken.BytePairIndex : Dictionary`2<Byte[], int> {
    [CompilerGeneratedAttribute]
private int <MaxKeyLength>k__BackingField;
    public int MaxKeyLength { get; }
    public int Item { get; }
    public BytePairIndex(IDictionary`2<Byte[], int> data);
    [CompilerGeneratedAttribute]
public int get_MaxKeyLength();
    public int get_Item(ReadOnlySpan`1<byte> key);
    public bool TryGetValue(ReadOnlySpan`1<byte> key, Int32& value);
}
internal static class SharpToken.EmbeddedResourceReader : object {
    private static IEnumerable`1<string> ReadEmbeddedResourceAsLines(string resourceName);
    public static BytePairIndex LoadTokenBytePairEncoding(string dataSourceName);
}
[ExtensionAttribute]
internal static class SharpToken.Extensions : object {
    [ExtensionAttribute]
public static FoundMatch FindMatch(IEnumerable`1<string> searchValues, string text, int startIndex);
    [ExtensionAttribute]
public static ReadOnlySpan`1<byte> RangeSlice(ReadOnlySpan`1<byte> span, int startIndex, int endIndex);
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[DefaultMemberAttribute("Item")]
internal class SharpToken.FastPartitionList : ValueType {
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    private Int32[] _index;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ValueTuple`2[] _partitions;
    public int Length { get; private set; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ValueTuple`2<int, int> Item { get; public set; }
    public FastPartitionList(int length);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Length();
    [CompilerGeneratedAttribute]
private void set_Length(int value);
    [IsReadOnlyAttribute]
public void Initialize(ReadOnlySpan`1<byte> piece, BytePairIndex encoder);
    public void set_Item(int index, ValueTuple`2<int, int> value);
    public ValueTuple`2<int, int> get_Item(int index);
    public void RemoveAt(int index);
    [IsReadOnlyAttribute]
public void Dispose();
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
internal class SharpToken.FoundMatch : ValueType {
    [CompilerGeneratedAttribute]
private bool <Success>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    public bool Success { get; public set; }
    public string Value { get; public set; }
    public int Index { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_Success();
    [CompilerGeneratedAttribute]
public void set_Success(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(int value);
}
public class SharpToken.GptEncoding : object {
    private BytePairEncodingCore _bytePairEncodingCoreProcessor;
    private Dictionary`2<string, int> _specialTokenMappings;
    private GptEncoding(Regex tokenizerRegex, BytePairIndex bytePairRanks, Dictionary`2<string, int> specialTokenMappings, Nullable`1<int> explicitNVocab);
    public static GptEncoding GetEncoding(string encodingName);
    public static GptEncoding GetEncodingForModel(string modelName);
    public int CountTokens(string lineToEncode, ISet`1<string> allowedSpecial, ISet`1<string> disallowedSpecial);
    public List`1<int> Encode(string lineToEncode, ISet`1<string> allowedSpecial, ISet`1<string> disallowedSpecial);
    public string Decode(List`1<int> inputTokensToDecode);
    public string Decode(IEnumerable`1<int> inputTokensToDecode);
    private ValueTuple`2<List`1<int>, int> EncodeCore(string lineToEncode, ISet`1<string> allowedSpecial, ISet`1<string> disallowedSpecial, bool countOnly);
    [CompilerGeneratedAttribute]
internal static int <.ctor>g__GetMaxValueFromBytePairRanks|2_0(BytePairIndex dictionary);
    [CompilerGeneratedAttribute]
internal static int <.ctor>g__GetMaxValueFromSpecialToken|2_1(Dictionary`2<string, int> dictionary);
}
public static class SharpToken.Model : object {
    private static Dictionary`2<string, string> ModelToEncodingMapping;
    private static Dictionary`2<string, string> ModelPrefixToEncodingMapping;
    private static Model();
    public static string GetEncodingNameForModel(string modelName);
}
[IsReadOnlyAttribute]
internal class SharpToken.ModelParams : ValueType {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ExplicitNVocab>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TokenizerRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private BytePairIndex <MergeableRanks>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, int> <SpecialTokens>k__BackingField;
    public Nullable`1<int> ExplicitNVocab { get; }
    public Regex TokenizerRegex { get; }
    public BytePairIndex MergeableRanks { get; }
    public Dictionary`2<string, int> SpecialTokens { get; }
    public ModelParams(Nullable`1<int> explicitNVocab, Regex tokenizerRegex, BytePairIndex mergeableRanks, Dictionary`2<string, int> specialTokens);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ExplicitNVocab();
    [CompilerGeneratedAttribute]
public Regex get_TokenizerRegex();
    [CompilerGeneratedAttribute]
public BytePairIndex get_MergeableRanks();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, int> get_SpecialTokens();
}
internal static class SharpToken.ModelParamsGenerator : object {
    private static string EndOfText;
    private static string FimPrefix;
    private static string FimMiddle;
    private static string FimSuffix;
    private static string EndOfPrompt;
    private static ConcurrentDictionary`2<string, ModelParams> Cache;
    private static ModelParamsGenerator();
    public static ModelParams GetModelParams(string encodingName);
    private static ModelParams R50KBase();
    private static ModelParams P50KBase();
    private static ModelParams P50KEdit();
    private static ModelParams Cl100KBase();
    private static ModelParams O200KBase();
}
internal class SharpToken.ModelParamsGeneratorRegex : object {
    public static Regex Regex50KBase();
    public static Regex RegexCl100KBase();
    public static Regex RegexO200KBase();
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[IsReadOnlyAttribute]
internal class SharpToken.MultiBytePairEncoder : ValueType {
    private ReadOnlySpan`1<byte> _piece;
    private BytePairIndex _encoder;
    public MultiBytePairEncoder(ReadOnlySpan`1<byte> piece, BytePairIndex encoder);
    public TokenEnumerator GetTokens();
    private Nullable`1<int> GetRank(FastPartitionList partitions, int startIndex, int skip);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
internal class TokenEnumerator : ValueType {
    private int _length;
    private FastPartitionList _partitions;
    private ReadOnlySpan`1<byte> _piece;
    private BytePairIndex _encoder;
    private int _index;
    public int Current { get; }
    public TokenEnumerator(FastPartitionList partitions, ReadOnlySpan`1<byte> piece, BytePairIndex encoder);
    [IsReadOnlyAttribute]
public TokenEnumerator GetEnumerator();
    public bool MoveNext();
    public int get_Current();
    [IsReadOnlyAttribute]
public void Dispose();
}
