[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ObsoleteAttribute("Use LLamaSharpPromptExecutionSettings instead")]
public class LLamaSharp.SemanticKernel.ChatCompletion.ChatRequestSettings : PromptExecutionSettings {
    [CompilerGeneratedAttribute]
private double <Temperature>k__BackingField;
    [CompilerGeneratedAttribute]
private double <TopP>k__BackingField;
    [CompilerGeneratedAttribute]
private double <PresencePenalty>k__BackingField;
    [CompilerGeneratedAttribute]
private double <FrequencyPenalty>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <StopSequences>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ResultsPerPrompt>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxTokens>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<int, int> <TokenSelectionBiases>k__BackingField;
    private static JsonSerializerOptions s_options;
    [JsonPropertyNameAttribute("temperature")]
public double Temperature { get; public set; }
    [JsonPropertyNameAttribute("top_p")]
public double TopP { get; public set; }
    [JsonPropertyNameAttribute("presence_penalty")]
public double PresencePenalty { get; public set; }
    [JsonPropertyNameAttribute("frequency_penalty")]
public double FrequencyPenalty { get; public set; }
    [JsonPropertyNameAttribute("stop_sequences")]
public IList`1<string> StopSequences { get; public set; }
    [JsonPropertyNameAttribute("results_per_prompt")]
public int ResultsPerPrompt { get; public set; }
    [JsonPropertyNameAttribute("max_tokens")]
public Nullable`1<int> MaxTokens { get; public set; }
    [JsonPropertyNameAttribute("token_selection_biases")]
public IDictionary`2<int, int> TokenSelectionBiases { get; public set; }
    private static ChatRequestSettings();
    [CompilerGeneratedAttribute]
public double get_Temperature();
    [CompilerGeneratedAttribute]
public void set_Temperature(double value);
    [CompilerGeneratedAttribute]
public double get_TopP();
    [CompilerGeneratedAttribute]
public void set_TopP(double value);
    [CompilerGeneratedAttribute]
public double get_PresencePenalty();
    [CompilerGeneratedAttribute]
public void set_PresencePenalty(double value);
    [CompilerGeneratedAttribute]
public double get_FrequencyPenalty();
    [CompilerGeneratedAttribute]
public void set_FrequencyPenalty(double value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_StopSequences();
    [CompilerGeneratedAttribute]
public void set_StopSequences(IList`1<string> value);
    [CompilerGeneratedAttribute]
public int get_ResultsPerPrompt();
    [CompilerGeneratedAttribute]
public void set_ResultsPerPrompt(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxTokens();
    [CompilerGeneratedAttribute]
public void set_MaxTokens(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<int, int> get_TokenSelectionBiases();
    [CompilerGeneratedAttribute]
public void set_TokenSelectionBiases(IDictionary`2<int, int> value);
    public static ChatRequestSettings FromRequestSettings(PromptExecutionSettings requestSettings, Nullable`1<int> defaultMaxTokens);
    private static JsonSerializerOptions CreateOptions();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ObsoleteAttribute("Use LLamaSharpPromptExecutionSettingsConverter instead")]
public class LLamaSharp.SemanticKernel.ChatCompletion.ChatRequestSettingsConverter : JsonConverter`1<ChatRequestSettings> {
    public virtual ChatRequestSettings Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, ChatRequestSettings value, JsonSerializerOptions options);
}
public class LLamaSharp.SemanticKernel.ChatCompletion.HistoryTransform : DefaultHistoryTransform {
    [NullableContextAttribute("1")]
public virtual string HistoryToText(ChatHistory history);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LLamaSharp.SemanticKernel.ChatCompletion.LLamaSharpChatCompletion : object {
    private ILLamaExecutor _model;
    private LLamaSharpPromptExecutionSettings defaultRequestSettings;
    private IHistoryTransform historyTransform;
    private ITextStreamTransform outputTransform;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, object> _attributes;
    private bool _isStatefulExecutor;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<string, object> Attributes { get; }
    [NullableContextAttribute("2")]
public LLamaSharpChatCompletion(ILLamaExecutor model, LLamaSharpPromptExecutionSettings defaultRequestSettings, IHistoryTransform historyTransform, ITextStreamTransform outputTransform);
    public sealed virtual IReadOnlyDictionary`2<string, object> get_Attributes();
    private static LLamaSharpPromptExecutionSettings GetDefaultSettings();
    public ChatHistory CreateNewChat(string instructions);
    [AsyncStateMachineAttribute("LLamaSharp.SemanticKernel.ChatCompletion.LLamaSharpChatCompletion/<GetChatMessageContentsAsync>d__11")]
public sealed virtual Task`1<IReadOnlyList`1<ChatMessageContent>> GetChatMessageContentsAsync(ChatHistory chatHistory, PromptExecutionSettings executionSettings, Kernel kernel, CancellationToken cancellationToken);
    [AsyncIteratorStateMachineAttribute("LLamaSharp.SemanticKernel.ChatCompletion.LLamaSharpChatCompletion/<GetStreamingChatMessageContentsAsync>d__12")]
public sealed virtual IAsyncEnumerable`1<StreamingChatMessageContent> GetStreamingChatMessageContentsAsync(ChatHistory chatHistory, PromptExecutionSettings executionSettings, Kernel kernel, CancellationToken cancellationToken);
    private string _getFormattedPrompt(ChatHistory chatHistory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class LLamaSharp.SemanticKernel.ExtensionMethods : object {
    [ExtensionAttribute]
public static ChatHistory ToLLamaSharpChatHistory(ChatHistory chatHistory, bool ignoreCase);
    [ExtensionAttribute]
internal static InferenceParams ToLLamaSharpInferenceParams(LLamaSharpPromptExecutionSettings requestSettings);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LLamaSharp.SemanticKernel.LLamaSharpPromptExecutionSettings : PromptExecutionSettings {
    [CompilerGeneratedAttribute]
private double <Temperature>k__BackingField;
    [CompilerGeneratedAttribute]
private double <TopP>k__BackingField;
    [CompilerGeneratedAttribute]
private double <PresencePenalty>k__BackingField;
    [CompilerGeneratedAttribute]
private double <FrequencyPenalty>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <StopSequences>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ResultsPerPrompt>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxTokens>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<int, int> <TokenSelectionBiases>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResponseFormat>k__BackingField;
    private static JsonSerializerOptions s_options;
    [JsonPropertyNameAttribute("temperature")]
public double Temperature { get; public set; }
    [JsonPropertyNameAttribute("top_p")]
public double TopP { get; public set; }
    [JsonPropertyNameAttribute("presence_penalty")]
public double PresencePenalty { get; public set; }
    [JsonPropertyNameAttribute("frequency_penalty")]
public double FrequencyPenalty { get; public set; }
    [JsonPropertyNameAttribute("stop_sequences")]
public IList`1<string> StopSequences { get; public set; }
    [JsonPropertyNameAttribute("results_per_prompt")]
public int ResultsPerPrompt { get; public set; }
    [JsonPropertyNameAttribute("max_tokens")]
public Nullable`1<int> MaxTokens { get; public set; }
    [JsonPropertyNameAttribute("token_selection_biases")]
public IDictionary`2<int, int> TokenSelectionBiases { get; public set; }
    [JsonPropertyNameAttribute("response_format")]
public string ResponseFormat { get; public set; }
    private static LLamaSharpPromptExecutionSettings();
    [CompilerGeneratedAttribute]
public double get_Temperature();
    [CompilerGeneratedAttribute]
public void set_Temperature(double value);
    [CompilerGeneratedAttribute]
public double get_TopP();
    [CompilerGeneratedAttribute]
public void set_TopP(double value);
    [CompilerGeneratedAttribute]
public double get_PresencePenalty();
    [CompilerGeneratedAttribute]
public void set_PresencePenalty(double value);
    [CompilerGeneratedAttribute]
public double get_FrequencyPenalty();
    [CompilerGeneratedAttribute]
public void set_FrequencyPenalty(double value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_StopSequences();
    [CompilerGeneratedAttribute]
public void set_StopSequences(IList`1<string> value);
    [CompilerGeneratedAttribute]
public int get_ResultsPerPrompt();
    [CompilerGeneratedAttribute]
public void set_ResultsPerPrompt(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxTokens();
    [CompilerGeneratedAttribute]
public void set_MaxTokens(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<int, int> get_TokenSelectionBiases();
    [CompilerGeneratedAttribute]
public void set_TokenSelectionBiases(IDictionary`2<int, int> value);
    [CompilerGeneratedAttribute]
public string get_ResponseFormat();
    [CompilerGeneratedAttribute]
public void set_ResponseFormat(string value);
    public static LLamaSharpPromptExecutionSettings FromRequestSettings(PromptExecutionSettings requestSettings, Nullable`1<int> defaultMaxTokens);
    private static JsonSerializerOptions CreateOptions();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class LLamaSharp.SemanticKernel.LLamaSharpPromptExecutionSettingsConverter : JsonConverter`1<LLamaSharpPromptExecutionSettings> {
    public virtual LLamaSharpPromptExecutionSettings Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, LLamaSharpPromptExecutionSettings value, JsonSerializerOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LLamaSharp.SemanticKernel.TextCompletion.LLamaSharpTextCompletion : object {
    public ILLamaExecutor executor;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, object> _attributes;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<string, object> Attributes { get; }
    public LLamaSharpTextCompletion(ILLamaExecutor executor);
    public sealed virtual IReadOnlyDictionary`2<string, object> get_Attributes();
    [AsyncStateMachineAttribute("LLamaSharp.SemanticKernel.TextCompletion.LLamaSharpTextCompletion/<GetTextContentsAsync>d__5")]
public sealed virtual Task`1<IReadOnlyList`1<TextContent>> GetTextContentsAsync(string prompt, PromptExecutionSettings executionSettings, Kernel kernel, CancellationToken cancellationToken);
    [AsyncIteratorStateMachineAttribute("LLamaSharp.SemanticKernel.TextCompletion.LLamaSharpTextCompletion/<GetStreamingTextContentsAsync>d__6")]
public sealed virtual IAsyncEnumerable`1<StreamingTextContent> GetStreamingTextContentsAsync(string prompt, PromptExecutionSettings executionSettings, Kernel kernel, CancellationToken cancellationToken);
}
public class LLamaSharp.SemanticKernel.TextEmbedding.LLamaSharpEmbeddingGeneration : object {
    [NullableAttribute("1")]
private LLamaEmbedder _embedder;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, object> _attributes;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<string, object> Attributes { get; }
    [NullableContextAttribute("1")]
public LLamaSharpEmbeddingGeneration(LLamaEmbedder embedder);
    public sealed virtual IReadOnlyDictionary`2<string, object> get_Attributes();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("LLamaSharp.SemanticKernel.TextEmbedding.LLamaSharpEmbeddingGeneration/<GenerateEmbeddingsAsync>d__5")]
public sealed virtual Task`1<IList`1<ReadOnlyMemory`1<float>>> GenerateEmbeddingsAsync(IList`1<string> data, Kernel kernel, CancellationToken cancellationToken);
}
