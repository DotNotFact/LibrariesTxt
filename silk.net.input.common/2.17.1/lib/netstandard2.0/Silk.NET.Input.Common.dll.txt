[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[IsReadOnlyAttribute]
public class Silk.NET.Input.Axis : ValueType {
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Position>k__BackingField;
    public int Index { get; }
    public float Position { get; }
    public Axis(int index, float position);
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
public float get_Position();
}
public class Silk.NET.Input.Button : ValueType {
    [CompilerGeneratedAttribute]
private ButtonName <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Pressed>k__BackingField;
    public ButtonName Name { get; }
    public int Index { get; }
    public bool Pressed { get; }
    public Button(ButtonName name, int index, bool pressed);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ButtonName get_Name();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Index();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_Pressed();
}
public enum Silk.NET.Input.ButtonName : Enum {
    public int value__;
    public static ButtonName Unknown;
    public static ButtonName A;
    public static ButtonName B;
    public static ButtonName X;
    public static ButtonName Y;
    public static ButtonName LeftBumper;
    public static ButtonName RightBumper;
    public static ButtonName Back;
    public static ButtonName Start;
    public static ButtonName Home;
    public static ButtonName LeftStick;
    public static ButtonName RightStick;
    public static ButtonName DPadUp;
    public static ButtonName DPadRight;
    public static ButtonName DPadDown;
    public static ButtonName DPadLeft;
}
public enum Silk.NET.Input.CursorMode : Enum {
    public int value__;
    public static CursorMode Normal;
    public static CursorMode Hidden;
    public static CursorMode Disabled;
    public static CursorMode Raw;
}
public enum Silk.NET.Input.CursorType : Enum {
    public int value__;
    public static CursorType Standard;
    public static CursorType Custom;
}
[IsReadOnlyAttribute]
public class Silk.NET.Input.Deadzone : ValueType {
    [CompilerGeneratedAttribute]
private float <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private DeadzoneMethod <Method>k__BackingField;
    public float Value { get; }
    public DeadzoneMethod Method { get; }
    public Deadzone(float value, DeadzoneMethod method);
    [CompilerGeneratedAttribute]
public float get_Value();
    [CompilerGeneratedAttribute]
public DeadzoneMethod get_Method();
    public float Apply(float raw);
}
public enum Silk.NET.Input.DeadzoneMethod : Enum {
    public int value__;
    public static DeadzoneMethod Traditional;
    public static DeadzoneMethod AdaptiveGradient;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Silk.NET.Input.GamepadExtensions : object {
    private static Button First(IGamepad gamepad, ButtonName name);
    [ExtensionAttribute]
public static Button A(IGamepad gamepad);
    [ExtensionAttribute]
public static Button B(IGamepad gamepad);
    [ExtensionAttribute]
public static Button X(IGamepad gamepad);
    [ExtensionAttribute]
public static Button Y(IGamepad gamepad);
    [ExtensionAttribute]
public static Button LeftBumper(IGamepad gamepad);
    [ExtensionAttribute]
public static Button RightBumper(IGamepad gamepad);
    [ExtensionAttribute]
public static Button Back(IGamepad gamepad);
    [ExtensionAttribute]
public static Button Start(IGamepad gamepad);
    [ExtensionAttribute]
public static Button Home(IGamepad gamepad);
    [ExtensionAttribute]
public static Button LeftStick(IGamepad gamepad);
    [ExtensionAttribute]
public static Button RightStick(IGamepad gamepad);
    [ExtensionAttribute]
public static Button DPadUp(IGamepad gamepad);
    [ExtensionAttribute]
public static Button DPadRight(IGamepad gamepad);
    [ExtensionAttribute]
public static Button DPadDown(IGamepad gamepad);
    [ExtensionAttribute]
public static Button DPadLeft(IGamepad gamepad);
}
public class Silk.NET.Input.Hat : ValueType {
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private Position2D <Position>k__BackingField;
    public int Index { get; }
    public Position2D Position { get; }
    public Hat(int index, Position2D position);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Index();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Position2D get_Position();
}
public interface Silk.NET.Input.ICursor {
    public CursorType Type { get; public set; }
    public StandardCursor StandardCursor { get; public set; }
    public CursorMode CursorMode { get; public set; }
    public bool IsConfined { get; public set; }
    public int HotspotX { get; public set; }
    public int HotspotY { get; public set; }
    public RawImage Image { get; public set; }
    public abstract virtual CursorType get_Type();
    public abstract virtual void set_Type(CursorType value);
    public abstract virtual StandardCursor get_StandardCursor();
    public abstract virtual void set_StandardCursor(StandardCursor value);
    public abstract virtual CursorMode get_CursorMode();
    public abstract virtual void set_CursorMode(CursorMode value);
    public abstract virtual bool get_IsConfined();
    public abstract virtual void set_IsConfined(bool value);
    public abstract virtual int get_HotspotX();
    public abstract virtual void set_HotspotX(int value);
    public abstract virtual int get_HotspotY();
    public abstract virtual void set_HotspotY(int value);
    public abstract virtual RawImage get_Image();
    public abstract virtual void set_Image(RawImage value);
    public abstract virtual bool IsSupported(CursorMode mode);
    public abstract virtual bool IsSupported(StandardCursor standardCursor);
}
[NullableContextAttribute("1")]
public interface Silk.NET.Input.IGamepad {
    public IReadOnlyList`1<Button> Buttons { get; }
    public IReadOnlyList`1<Thumbstick> Thumbsticks { get; }
    public IReadOnlyList`1<Trigger> Triggers { get; }
    public IReadOnlyList`1<IMotor> VibrationMotors { get; }
    public Deadzone Deadzone { get; public set; }
    public abstract virtual IReadOnlyList`1<Button> get_Buttons();
    public abstract virtual IReadOnlyList`1<Thumbstick> get_Thumbsticks();
    public abstract virtual IReadOnlyList`1<Trigger> get_Triggers();
    public abstract virtual IReadOnlyList`1<IMotor> get_VibrationMotors();
    public abstract virtual Deadzone get_Deadzone();
    public abstract virtual void set_Deadzone(Deadzone value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ButtonDown(Action`2<IGamepad, Button> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ButtonDown(Action`2<IGamepad, Button> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ButtonUp(Action`2<IGamepad, Button> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ButtonUp(Action`2<IGamepad, Button> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ThumbstickMoved(Action`2<IGamepad, Thumbstick> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ThumbstickMoved(Action`2<IGamepad, Thumbstick> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TriggerMoved(Action`2<IGamepad, Trigger> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TriggerMoved(Action`2<IGamepad, Trigger> value);
}
[NullableContextAttribute("1")]
public interface Silk.NET.Input.IInputContext {
    [NativeIntegerAttribute]
public IntPtr Handle { get; }
    public IReadOnlyList`1<IGamepad> Gamepads { get; }
    public IReadOnlyList`1<IJoystick> Joysticks { get; }
    public IReadOnlyList`1<IKeyboard> Keyboards { get; }
    public IReadOnlyList`1<IMouse> Mice { get; }
    public IReadOnlyList`1<IInputDevice> OtherDevices { get; }
    public abstract virtual IntPtr get_Handle();
    public abstract virtual IReadOnlyList`1<IGamepad> get_Gamepads();
    public abstract virtual IReadOnlyList`1<IJoystick> get_Joysticks();
    public abstract virtual IReadOnlyList`1<IKeyboard> get_Keyboards();
    public abstract virtual IReadOnlyList`1<IMouse> get_Mice();
    public abstract virtual IReadOnlyList`1<IInputDevice> get_OtherDevices();
    [CompilerGeneratedAttribute]
public abstract virtual void add_ConnectionChanged(Action`2<IInputDevice, bool> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ConnectionChanged(Action`2<IInputDevice, bool> value);
}
[NullableContextAttribute("1")]
public interface Silk.NET.Input.IInputDevice {
    public string Name { get; }
    public int Index { get; }
    public bool IsConnected { get; }
    public abstract virtual string get_Name();
    public abstract virtual int get_Index();
    public abstract virtual bool get_IsConnected();
}
[NullableContextAttribute("1")]
public interface Silk.NET.Input.IInputPlatform {
    public abstract virtual bool IsApplicable(IView view);
    public abstract virtual IInputContext CreateInput(IView view);
}
[NullableContextAttribute("1")]
public interface Silk.NET.Input.IJoystick {
    public IReadOnlyList`1<Axis> Axes { get; }
    public IReadOnlyList`1<Button> Buttons { get; }
    public IReadOnlyList`1<Hat> Hats { get; }
    public Deadzone Deadzone { get; public set; }
    public abstract virtual IReadOnlyList`1<Axis> get_Axes();
    public abstract virtual IReadOnlyList`1<Button> get_Buttons();
    public abstract virtual IReadOnlyList`1<Hat> get_Hats();
    public abstract virtual Deadzone get_Deadzone();
    public abstract virtual void set_Deadzone(Deadzone value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ButtonDown(Action`2<IJoystick, Button> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ButtonDown(Action`2<IJoystick, Button> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ButtonUp(Action`2<IJoystick, Button> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ButtonUp(Action`2<IJoystick, Button> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_AxisMoved(Action`2<IJoystick, Axis> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_AxisMoved(Action`2<IJoystick, Axis> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_HatMoved(Action`2<IJoystick, Hat> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_HatMoved(Action`2<IJoystick, Hat> value);
}
[NullableContextAttribute("1")]
public interface Silk.NET.Input.IKeyboard {
    public IReadOnlyList`1<Key> SupportedKeys { get; }
    public string ClipboardText { get; public set; }
    public abstract virtual IReadOnlyList`1<Key> get_SupportedKeys();
    public abstract virtual string get_ClipboardText();
    public abstract virtual void set_ClipboardText(string value);
    public abstract virtual bool IsKeyPressed(Key key);
    public abstract virtual bool IsScancodePressed(int scancode);
    [CompilerGeneratedAttribute]
public abstract virtual void add_KeyDown(Action`3<IKeyboard, Key, int> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_KeyDown(Action`3<IKeyboard, Key, int> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_KeyUp(Action`3<IKeyboard, Key, int> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_KeyUp(Action`3<IKeyboard, Key, int> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_KeyChar(Action`2<IKeyboard, char> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_KeyChar(Action`2<IKeyboard, char> value);
    public abstract virtual void BeginInput();
    public abstract virtual void EndInput();
}
public interface Silk.NET.Input.IMotor {
    public int Index { get; }
    public float Speed { get; public set; }
    public abstract virtual int get_Index();
    public abstract virtual float get_Speed();
    public abstract virtual void set_Speed(float value);
}
[NullableContextAttribute("1")]
public interface Silk.NET.Input.IMouse {
    public IReadOnlyList`1<MouseButton> SupportedButtons { get; }
    public IReadOnlyList`1<ScrollWheel> ScrollWheels { get; }
    public Vector2 Position { get; public set; }
    public ICursor Cursor { get; }
    public int DoubleClickTime { get; public set; }
    public int DoubleClickRange { get; public set; }
    public abstract virtual IReadOnlyList`1<MouseButton> get_SupportedButtons();
    public abstract virtual IReadOnlyList`1<ScrollWheel> get_ScrollWheels();
    public abstract virtual Vector2 get_Position();
    public abstract virtual void set_Position(Vector2 value);
    public abstract virtual ICursor get_Cursor();
    public abstract virtual int get_DoubleClickTime();
    public abstract virtual void set_DoubleClickTime(int value);
    public abstract virtual int get_DoubleClickRange();
    public abstract virtual void set_DoubleClickRange(int value);
    public abstract virtual bool IsButtonPressed(MouseButton btn);
    [CompilerGeneratedAttribute]
public abstract virtual void add_MouseDown(Action`2<IMouse, MouseButton> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_MouseDown(Action`2<IMouse, MouseButton> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_MouseUp(Action`2<IMouse, MouseButton> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_MouseUp(Action`2<IMouse, MouseButton> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Click(Action`3<IMouse, MouseButton, Vector2> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Click(Action`3<IMouse, MouseButton, Vector2> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_DoubleClick(Action`3<IMouse, MouseButton, Vector2> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DoubleClick(Action`3<IMouse, MouseButton, Vector2> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_MouseMove(Action`2<IMouse, Vector2> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_MouseMove(Action`2<IMouse, Vector2> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Scroll(Action`2<IMouse, ScrollWheel> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Scroll(Action`2<IMouse, ScrollWheel> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1")]
[EditorBrowsableAttribute("1")]
public class Silk.NET.Input.InputPlatformAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    public Type Type { get; }
    public InputPlatformAttribute(Type type);
    [CompilerGeneratedAttribute]
public Type get_Type();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Silk.NET.Input.InputWindowExtensions : object {
    private static List`1<IInputPlatform> _platforms;
    private static bool _initializedFirstPartyPlatforms;
    public static IReadOnlyList`1<IInputPlatform> Platforms { get; }
    private static InputWindowExtensions();
    public static IReadOnlyList`1<IInputPlatform> get_Platforms();
    public static void ShouldLoadFirstPartyPlatforms(bool shouldLoad);
    private static void DoLoadFirstPartyPlatformsViaReflection();
    [ExtensionAttribute]
public static IInputContext CreateInput(IView view);
    public static void Add(IInputPlatform platform);
    public static void Remove(IInputPlatform platform);
    public static bool TryAdd(string assemblyName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
[DefaultMemberAttribute("Item")]
internal class Silk.NET.Input.Internals.CastReadOnlyList`2 : ValueType {
    private IReadOnlyList`1<TFrom> _original;
    public int Count { get; }
    public TTo Item { get; }
    public CastReadOnlyList`2(IReadOnlyList`1<TFrom> original);
    public sealed virtual IEnumerator`1<TTo> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual int get_Count();
    public sealed virtual TTo get_Item(int index);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Silk.NET.Input.Internals.InputContextImplementationBase : object {
    [CompilerGeneratedAttribute]
private IView <Window>k__BackingField;
    public IView Window { get; }
    [NativeIntegerAttribute]
public IntPtr Handle { get; }
    public IReadOnlyList`1<IGamepad> Gamepads { get; }
    public IReadOnlyList`1<IJoystick> Joysticks { get; }
    public IReadOnlyList`1<IKeyboard> Keyboards { get; }
    public IReadOnlyList`1<IMouse> Mice { get; }
    public IReadOnlyList`1<IInputDevice> OtherDevices { get; }
    protected InputContextImplementationBase(IView window);
    private void Update(double delta);
    public sealed virtual void Dispose();
    public abstract virtual void CoreDispose();
    public abstract virtual void ProcessEvents();
    [CompilerGeneratedAttribute]
public IView get_Window();
    public abstract virtual IntPtr get_Handle();
    public abstract virtual IReadOnlyList`1<IGamepad> get_Gamepads();
    public abstract virtual IReadOnlyList`1<IJoystick> get_Joysticks();
    public abstract virtual IReadOnlyList`1<IKeyboard> get_Keyboards();
    public abstract virtual IReadOnlyList`1<IMouse> get_Mice();
    public abstract virtual IReadOnlyList`1<IInputDevice> get_OtherDevices();
    [CompilerGeneratedAttribute]
public abstract virtual void add_ConnectionChanged(Action`2<IInputDevice, bool> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ConnectionChanged(Action`2<IInputDevice, bool> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Silk.NET.Input.Internals.IsConnectedEnumerator`1 : ValueType {
    private IEnumerator`1<T> _base;
    [CompilerGeneratedAttribute]
private T <Current>k__BackingField;
    public T Current { get; private set; }
    private object System.Collections.IEnumerator.Current { get; }
    public IsConnectedEnumerator`1(IEnumerator`1<T> base);
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual T get_Current();
    [CompilerGeneratedAttribute]
private void set_Current(T value);
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class Silk.NET.Input.Internals.IsConnectedWrapper`1 : ValueType {
    private IReadOnlyList`1<T> _list;
    public int Count { get; }
    public T Item { get; }
    public IsConnectedWrapper`1(IReadOnlyList`1<T> list);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual int get_Count();
    public sealed virtual T get_Item(int index);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Silk.NET.Input.Internals.MouseImplementationBase : object {
    [CompilerGeneratedAttribute]
private int <DoubleClickTime>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DoubleClickRange>k__BackingField;
    private Nullable`1<MouseButton> _firstClickButton;
    private Vector2 _firstClickPosition;
    private Nullable`1<DateTime> _firstClickTime;
    private bool _firstClick;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`2<IMouse, MouseButton> MouseDown;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`2<IMouse, MouseButton> MouseUp;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`3<IMouse, MouseButton, Vector2> Click;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`3<IMouse, MouseButton, Vector2> DoubleClick;
    public string Name { get; }
    public int Index { get; }
    public bool IsConnected { get; }
    public IReadOnlyList`1<MouseButton> SupportedButtons { get; }
    public IReadOnlyList`1<ScrollWheel> ScrollWheels { get; }
    public Vector2 Position { get; public set; }
    public ICursor Cursor { get; }
    public int DoubleClickTime { get; public set; }
    public int DoubleClickRange { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual int get_Index();
    public abstract virtual bool get_IsConnected();
    public abstract virtual IReadOnlyList`1<MouseButton> get_SupportedButtons();
    public abstract virtual IReadOnlyList`1<ScrollWheel> get_ScrollWheels();
    public abstract virtual Vector2 get_Position();
    public abstract virtual void set_Position(Vector2 value);
    public abstract virtual ICursor get_Cursor();
    [CompilerGeneratedAttribute]
public sealed virtual int get_DoubleClickTime();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DoubleClickTime(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_DoubleClickRange();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DoubleClickRange(int value);
    public abstract virtual bool IsButtonPressed(MouseButton btn);
    [CompilerGeneratedAttribute]
public abstract virtual void add_MouseMove(Action`2<IMouse, Vector2> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_MouseMove(Action`2<IMouse, Vector2> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Scroll(Action`2<IMouse, ScrollWheel> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Scroll(Action`2<IMouse, ScrollWheel> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_MouseDown(Action`2<IMouse, MouseButton> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_MouseDown(Action`2<IMouse, MouseButton> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_MouseUp(Action`2<IMouse, MouseButton> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_MouseUp(Action`2<IMouse, MouseButton> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Click(Action`3<IMouse, MouseButton, Vector2> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Click(Action`3<IMouse, MouseButton, Vector2> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_DoubleClick(Action`3<IMouse, MouseButton, Vector2> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_DoubleClick(Action`3<IMouse, MouseButton, Vector2> value);
    protected void HandleMouseDown(IMouse mouse, MouseButton button);
    protected void ProcessFirstClick(MouseButton button);
    protected void HandleDoubleClickTimeElapse();
    protected void HandleUpdate();
    protected void HandleMouseUp(IMouse mouse, MouseButton btn);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class Silk.NET.Input.Internals.ReadOnlyCollectionListAdapter`1 : ValueType {
    private IReadOnlyCollection`1<T> _col;
    public int Count { get; }
    public T Item { get; }
    public ReadOnlyCollectionListAdapter`1(IReadOnlyCollection`1<T> col);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual int get_Count();
    public sealed virtual T get_Item(int index);
}
public enum Silk.NET.Input.Key : Enum {
    public int value__;
    public static Key Unknown;
    public static Key Space;
    public static Key Apostrophe;
    public static Key Comma;
    public static Key Minus;
    public static Key Period;
    public static Key Slash;
    public static Key Number0;
    public static Key D0;
    public static Key Number1;
    public static Key Number2;
    public static Key Number3;
    public static Key Number4;
    public static Key Number5;
    public static Key Number6;
    public static Key Number7;
    public static Key Number8;
    public static Key Number9;
    public static Key Semicolon;
    public static Key Equal;
    public static Key A;
    public static Key B;
    public static Key C;
    public static Key D;
    public static Key E;
    public static Key F;
    public static Key G;
    public static Key H;
    public static Key I;
    public static Key J;
    public static Key K;
    public static Key L;
    public static Key M;
    public static Key N;
    public static Key O;
    public static Key P;
    public static Key Q;
    public static Key R;
    public static Key S;
    public static Key T;
    public static Key U;
    public static Key V;
    public static Key W;
    public static Key X;
    public static Key Y;
    public static Key Z;
    public static Key LeftBracket;
    public static Key BackSlash;
    public static Key RightBracket;
    public static Key GraveAccent;
    public static Key World1;
    public static Key World2;
    public static Key Escape;
    public static Key Enter;
    public static Key Tab;
    public static Key Backspace;
    public static Key Insert;
    public static Key Delete;
    public static Key Right;
    public static Key Left;
    public static Key Down;
    public static Key Up;
    public static Key PageUp;
    public static Key PageDown;
    public static Key Home;
    public static Key End;
    public static Key CapsLock;
    public static Key ScrollLock;
    public static Key NumLock;
    public static Key PrintScreen;
    public static Key Pause;
    public static Key F1;
    public static Key F2;
    public static Key F3;
    public static Key F4;
    public static Key F5;
    public static Key F6;
    public static Key F7;
    public static Key F8;
    public static Key F9;
    public static Key F10;
    public static Key F11;
    public static Key F12;
    public static Key F13;
    public static Key F14;
    public static Key F15;
    public static Key F16;
    public static Key F17;
    public static Key F18;
    public static Key F19;
    public static Key F20;
    public static Key F21;
    public static Key F22;
    public static Key F23;
    public static Key F24;
    public static Key F25;
    public static Key Keypad0;
    public static Key Keypad1;
    public static Key Keypad2;
    public static Key Keypad3;
    public static Key Keypad4;
    public static Key Keypad5;
    public static Key Keypad6;
    public static Key Keypad7;
    public static Key Keypad8;
    public static Key Keypad9;
    public static Key KeypadDecimal;
    public static Key KeypadDivide;
    public static Key KeypadMultiply;
    public static Key KeypadSubtract;
    public static Key KeypadAdd;
    public static Key KeypadEnter;
    public static Key KeypadEqual;
    public static Key ShiftLeft;
    public static Key ControlLeft;
    public static Key AltLeft;
    public static Key SuperLeft;
    public static Key ShiftRight;
    public static Key ControlRight;
    public static Key AltRight;
    public static Key SuperRight;
    public static Key Menu;
}
public enum Silk.NET.Input.MouseButton : Enum {
    public int value__;
    public static MouseButton Unknown;
    public static MouseButton Left;
    public static MouseButton Right;
    public static MouseButton Middle;
    public static MouseButton Button4;
    public static MouseButton Button5;
    public static MouseButton Button6;
    public static MouseButton Button7;
    public static MouseButton Button8;
    public static MouseButton Button9;
    public static MouseButton Button10;
    public static MouseButton Button11;
    public static MouseButton Button12;
}
[FlagsAttribute]
public enum Silk.NET.Input.Position2D : Enum {
    public int value__;
    public static Position2D Centered;
    public static Position2D Up;
    public static Position2D Down;
    public static Position2D Left;
    public static Position2D Right;
    public static Position2D UpLeft;
    public static Position2D UpRight;
    public static Position2D DownLeft;
    public static Position2D DownRight;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Silk.NET.Input.ScrollWheel : ValueType {
    [CompilerGeneratedAttribute]
private float <X>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Y>k__BackingField;
    public float X { get; }
    public float Y { get; }
    public ScrollWheel(float x, float y);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public float get_X();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public float get_Y();
    [IsReadOnlyAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
public string ToString(string format);
    [IsReadOnlyAttribute]
[NullableContextAttribute("2")]
public string ToString(string format, IFormatProvider formatProvider);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(ScrollWheel other);
    public virtual int GetHashCode();
    public static bool op_Equality(ScrollWheel left, ScrollWheel right);
    public static bool op_Inequality(ScrollWheel left, ScrollWheel right);
}
public enum Silk.NET.Input.StandardCursor : Enum {
    public int value__;
    public static StandardCursor Default;
    public static StandardCursor Arrow;
    public static StandardCursor IBeam;
    public static StandardCursor Crosshair;
    public static StandardCursor Hand;
    public static StandardCursor HResize;
    public static StandardCursor VResize;
}
public class Silk.NET.Input.Thumbstick : ValueType {
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private float <X>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Y>k__BackingField;
    public int Index { get; }
    public float X { get; }
    public float Y { get; }
    public float Position { get; }
    public float Direction { get; }
    public Thumbstick(int index, float x, float y);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Index();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public float get_X();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public float get_Y();
    public float get_Position();
    public float get_Direction();
}
public class Silk.NET.Input.Trigger : ValueType {
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Position>k__BackingField;
    public int Index { get; }
    public float Position { get; }
    public Trigger(int index, float position);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Index();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public float get_Position();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NativeIntegerAttribute : Attribute {
    public Boolean[] TransformFlags;
    public NativeIntegerAttribute(Boolean[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
