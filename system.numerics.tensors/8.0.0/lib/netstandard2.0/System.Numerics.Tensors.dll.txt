internal static class FxResources.System.Numerics.Tensors.SR : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public bool ReturnValue { get; }
    public String[] Members { get; }
    public MemberNotNullWhenAttribute(bool returnValue, string member);
    public MemberNotNullWhenAttribute(bool returnValue, String[] members);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("10368")]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
public static class System.Numerics.Tensors.TensorPrimitives : object {
    private static Int32[] s_0through7;
    private static ReadOnlySpan`1<UInt32> AlignmentUInt32Mask_16x16 { get; }
    private static ReadOnlySpan`1<UInt32> RemainderUInt32Mask_16x16 { get; }
    private static TensorPrimitives();
    public static void Abs(ReadOnlySpan`1<float> x, Span`1<float> destination);
    public static void Add(ReadOnlySpan`1<float> x, ReadOnlySpan`1<float> y, Span`1<float> destination);
    public static void Add(ReadOnlySpan`1<float> x, float y, Span`1<float> destination);
    public static void AddMultiply(ReadOnlySpan`1<float> x, ReadOnlySpan`1<float> y, ReadOnlySpan`1<float> multiplier, Span`1<float> destination);
    public static void AddMultiply(ReadOnlySpan`1<float> x, ReadOnlySpan`1<float> y, float multiplier, Span`1<float> destination);
    public static void AddMultiply(ReadOnlySpan`1<float> x, float y, ReadOnlySpan`1<float> multiplier, Span`1<float> destination);
    public static void Cosh(ReadOnlySpan`1<float> x, Span`1<float> destination);
    public static float CosineSimilarity(ReadOnlySpan`1<float> x, ReadOnlySpan`1<float> y);
    public static float Distance(ReadOnlySpan`1<float> x, ReadOnlySpan`1<float> y);
    public static void Divide(ReadOnlySpan`1<float> x, ReadOnlySpan`1<float> y, Span`1<float> destination);
    public static void Divide(ReadOnlySpan`1<float> x, float y, Span`1<float> destination);
    public static float Dot(ReadOnlySpan`1<float> x, ReadOnlySpan`1<float> y);
    public static void Exp(ReadOnlySpan`1<float> x, Span`1<float> destination);
    public static int IndexOfMax(ReadOnlySpan`1<float> x);
    public static int IndexOfMaxMagnitude(ReadOnlySpan`1<float> x);
    public static int IndexOfMin(ReadOnlySpan`1<float> x);
    public static int IndexOfMinMagnitude(ReadOnlySpan`1<float> x);
    public static void Log(ReadOnlySpan`1<float> x, Span`1<float> destination);
    public static void Log2(ReadOnlySpan`1<float> x, Span`1<float> destination);
    public static float Max(ReadOnlySpan`1<float> x);
    public static void Max(ReadOnlySpan`1<float> x, ReadOnlySpan`1<float> y, Span`1<float> destination);
    public static float MaxMagnitude(ReadOnlySpan`1<float> x);
    public static void MaxMagnitude(ReadOnlySpan`1<float> x, ReadOnlySpan`1<float> y, Span`1<float> destination);
    public static float Min(ReadOnlySpan`1<float> x);
    public static void Min(ReadOnlySpan`1<float> x, ReadOnlySpan`1<float> y, Span`1<float> destination);
    public static float MinMagnitude(ReadOnlySpan`1<float> x);
    public static void MinMagnitude(ReadOnlySpan`1<float> x, ReadOnlySpan`1<float> y, Span`1<float> destination);
    public static void Multiply(ReadOnlySpan`1<float> x, ReadOnlySpan`1<float> y, Span`1<float> destination);
    public static void Multiply(ReadOnlySpan`1<float> x, float y, Span`1<float> destination);
    public static void MultiplyAdd(ReadOnlySpan`1<float> x, ReadOnlySpan`1<float> y, ReadOnlySpan`1<float> addend, Span`1<float> destination);
    public static void MultiplyAdd(ReadOnlySpan`1<float> x, ReadOnlySpan`1<float> y, float addend, Span`1<float> destination);
    public static void MultiplyAdd(ReadOnlySpan`1<float> x, float y, ReadOnlySpan`1<float> addend, Span`1<float> destination);
    public static void Negate(ReadOnlySpan`1<float> x, Span`1<float> destination);
    public static float Norm(ReadOnlySpan`1<float> x);
    public static float Product(ReadOnlySpan`1<float> x);
    public static float ProductOfDifferences(ReadOnlySpan`1<float> x, ReadOnlySpan`1<float> y);
    public static float ProductOfSums(ReadOnlySpan`1<float> x, ReadOnlySpan`1<float> y);
    public static void Sigmoid(ReadOnlySpan`1<float> x, Span`1<float> destination);
    public static void Sinh(ReadOnlySpan`1<float> x, Span`1<float> destination);
    public static void SoftMax(ReadOnlySpan`1<float> x, Span`1<float> destination);
    public static void Subtract(ReadOnlySpan`1<float> x, ReadOnlySpan`1<float> y, Span`1<float> destination);
    public static void Subtract(ReadOnlySpan`1<float> x, float y, Span`1<float> destination);
    public static float Sum(ReadOnlySpan`1<float> x);
    public static float SumOfMagnitudes(ReadOnlySpan`1<float> x);
    public static float SumOfSquares(ReadOnlySpan`1<float> x);
    public static void Tanh(ReadOnlySpan`1<float> x, Span`1<float> destination);
    private static void ValidateInputOutputSpanNonOverlapping(ReadOnlySpan`1<float> input, Span`1<float> output);
    private static ReadOnlySpan`1<UInt32> get_AlignmentUInt32Mask_16x16();
    private static ReadOnlySpan`1<UInt32> get_RemainderUInt32Mask_16x16();
    private static float CosineSimilarityCore(ReadOnlySpan`1<float> x, ReadOnlySpan`1<float> y);
    private static float Aggregate(ReadOnlySpan`1<float> x, TTransformOperator transformOp, TAggregationOperator aggregationOp);
    private static float Aggregate(ReadOnlySpan`1<float> x, ReadOnlySpan`1<float> y, TBinaryOperator binaryOp, TAggregationOperator aggregationOp);
    private static float MinMaxCore(ReadOnlySpan`1<float> x, TMinMaxOperator op);
    private static int IndexOfMinMaxCore(ReadOnlySpan`1<float> x, TIndexOfMinMaxOperator op);
    private static void InvokeSpanIntoSpan(ReadOnlySpan`1<float> x, Span`1<float> destination, TUnaryOperator op);
    private static void InvokeSpanSpanIntoSpan(ReadOnlySpan`1<float> x, ReadOnlySpan`1<float> y, Span`1<float> destination, TBinaryOperator op);
    private static void InvokeSpanScalarIntoSpan(ReadOnlySpan`1<float> x, float y, Span`1<float> destination, TBinaryOperator op);
    private static void InvokeSpanScalarIntoSpan(ReadOnlySpan`1<float> x, float y, Span`1<float> destination, TTransformOperator xTransformOp, TBinaryOperator binaryOp);
    private static void InvokeSpanSpanSpanIntoSpan(ReadOnlySpan`1<float> x, ReadOnlySpan`1<float> y, ReadOnlySpan`1<float> z, Span`1<float> destination, TTernaryOperator op);
    private static void InvokeSpanSpanScalarIntoSpan(ReadOnlySpan`1<float> x, ReadOnlySpan`1<float> y, float z, Span`1<float> destination, TTernaryOperator op);
    private static void InvokeSpanScalarSpanIntoSpan(ReadOnlySpan`1<float> x, float y, ReadOnlySpan`1<float> z, Span`1<float> destination, TTernaryOperator op);
    private static Vector`1& AsVector(Single& start);
    private static Vector`1& AsVector(Single& start, int offset);
    private static Vector`1& AsVector(Single& start, UIntPtr offset);
    private static Vector`1& AsVector(Int32& start, int offset);
    private static bool IsPositive(float f);
    private static Vector`1<float> IsPositive(Vector`1<float> vector);
    private static bool IsNegative(float f);
    private static Vector`1<float> IsNegative(Vector`1<float> f);
    private static float Log2(float x);
    private static Vector`1<float> CreateAlignmentMaskSingleVector(int count);
    private static Vector`1<float> CreateRemainderMaskSingleVector(int count);
    [CompilerGeneratedAttribute]
internal static float <Aggregate>g__SoftwareFallback|52_0(Single& xRef, UIntPtr length, TTransformOperator transformOp, TAggregationOperator aggregationOp);
    [CompilerGeneratedAttribute]
internal static float <Aggregate>g__Vectorized|52_1(Single& xRef, UIntPtr remainder, TTransformOperator transformOp, TAggregationOperator aggregationOp);
    [CompilerGeneratedAttribute]
internal static float <Aggregate>g__VectorizedSmall|52_2(Single& xRef, UIntPtr remainder, TTransformOperator transformOp, TAggregationOperator aggregationOp);
    [CompilerGeneratedAttribute]
internal static float <Aggregate>g__SoftwareFallback|53_0(Single& xRef, Single& yRef, UIntPtr length, TBinaryOperator binaryOp, TAggregationOperator aggregationOp);
    [CompilerGeneratedAttribute]
internal static float <Aggregate>g__Vectorized|53_1(Single& xRef, Single& yRef, UIntPtr remainder, TBinaryOperator binaryOp, TAggregationOperator aggregationOp);
    [CompilerGeneratedAttribute]
internal static float <Aggregate>g__VectorizedSmall|53_2(Single& xRef, Single& yRef, UIntPtr remainder, TBinaryOperator binaryOp, TAggregationOperator aggregationOp);
    [CompilerGeneratedAttribute]
internal static void <InvokeSpanIntoSpan>g__SoftwareFallback|57_0(Single& xRef, Single& dRef, UIntPtr length, TUnaryOperator op);
    [CompilerGeneratedAttribute]
internal static void <InvokeSpanIntoSpan>g__Vectorized|57_1(Single& xRef, Single& dRef, UIntPtr remainder, TUnaryOperator op);
    [CompilerGeneratedAttribute]
internal static void <InvokeSpanIntoSpan>g__VectorizedSmall|57_2(Single& xRef, Single& dRef, UIntPtr remainder, TUnaryOperator op);
    [CompilerGeneratedAttribute]
internal static void <InvokeSpanSpanIntoSpan>g__SoftwareFallback|58_0(Single& xRef, Single& yRef, Single& dRef, UIntPtr length, TBinaryOperator op);
    [CompilerGeneratedAttribute]
internal static void <InvokeSpanSpanIntoSpan>g__Vectorized|58_1(Single& xRef, Single& yRef, Single& dRef, UIntPtr remainder, TBinaryOperator op);
    [CompilerGeneratedAttribute]
internal static void <InvokeSpanSpanIntoSpan>g__VectorizedSmall|58_2(Single& xRef, Single& yRef, Single& dRef, UIntPtr remainder, TBinaryOperator op);
    [CompilerGeneratedAttribute]
internal static void <InvokeSpanScalarIntoSpan>g__SoftwareFallback|60_0(Single& xRef, float y, Single& dRef, UIntPtr length, TTransformOperator xTransformOp, TBinaryOperator binaryOp);
    [CompilerGeneratedAttribute]
internal static void <InvokeSpanScalarIntoSpan>g__Vectorized|60_1(Single& xRef, float y, Single& dRef, UIntPtr remainder, TTransformOperator xTransformOp, TBinaryOperator binaryOp);
    [CompilerGeneratedAttribute]
internal static void <InvokeSpanScalarIntoSpan>g__VectorizedSmall|60_2(Single& xRef, float y, Single& dRef, UIntPtr remainder, TTransformOperator xTransformOp, TBinaryOperator binaryOp);
    [CompilerGeneratedAttribute]
internal static void <InvokeSpanSpanSpanIntoSpan>g__SoftwareFallback|61_0(Single& xRef, Single& yRef, Single& zRef, Single& dRef, UIntPtr length, TTernaryOperator op);
    [CompilerGeneratedAttribute]
internal static void <InvokeSpanSpanSpanIntoSpan>g__Vectorized|61_1(Single& xRef, Single& yRef, Single& zRef, Single& dRef, UIntPtr remainder, TTernaryOperator op);
    [CompilerGeneratedAttribute]
internal static void <InvokeSpanSpanSpanIntoSpan>g__VectorizedSmall|61_2(Single& xRef, Single& yRef, Single& zRef, Single& dRef, UIntPtr remainder, TTernaryOperator op);
    [CompilerGeneratedAttribute]
internal static void <InvokeSpanSpanScalarIntoSpan>g__SoftwareFallback|62_0(Single& xRef, Single& yRef, float z, Single& dRef, UIntPtr length, TTernaryOperator op);
    [CompilerGeneratedAttribute]
internal static void <InvokeSpanSpanScalarIntoSpan>g__Vectorized|62_1(Single& xRef, Single& yRef, float z, Single& dRef, UIntPtr remainder, TTernaryOperator op);
    [CompilerGeneratedAttribute]
internal static void <InvokeSpanSpanScalarIntoSpan>g__VectorizedSmall|62_2(Single& xRef, Single& yRef, float z, Single& dRef, UIntPtr remainder, TTernaryOperator op);
    [CompilerGeneratedAttribute]
internal static void <InvokeSpanScalarSpanIntoSpan>g__SoftwareFallback|63_0(Single& xRef, float y, Single& zRef, Single& dRef, UIntPtr length, TTernaryOperator op);
    [CompilerGeneratedAttribute]
internal static void <InvokeSpanScalarSpanIntoSpan>g__Vectorized|63_1(Single& xRef, float y, Single& zRef, Single& dRef, UIntPtr remainder, TTernaryOperator op);
    [CompilerGeneratedAttribute]
internal static void <InvokeSpanScalarSpanIntoSpan>g__VectorizedSmall|63_2(Single& xRef, float y, Single& zRef, Single& dRef, UIntPtr remainder, TTernaryOperator op);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NativeIntegerAttribute : Attribute {
    public Boolean[] TransformFlags;
    public NativeIntegerAttribute(Boolean[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("64")]
internal class System.Runtime.InteropServices.LibraryImportAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <LibraryName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntryPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private StringMarshalling <StringMarshalling>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <StringMarshallingCustomType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SetLastError>k__BackingField;
    [NullableAttribute("1")]
public string LibraryName { get; }
    public string EntryPoint { get; public set; }
    public StringMarshalling StringMarshalling { get; public set; }
    public Type StringMarshallingCustomType { get; public set; }
    public bool SetLastError { get; public set; }
    [NullableContextAttribute("1")]
public LibraryImportAttribute(string libraryName);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_LibraryName();
    [CompilerGeneratedAttribute]
public string get_EntryPoint();
    [CompilerGeneratedAttribute]
public void set_EntryPoint(string value);
    [CompilerGeneratedAttribute]
public StringMarshalling get_StringMarshalling();
    [CompilerGeneratedAttribute]
public void set_StringMarshalling(StringMarshalling value);
    [CompilerGeneratedAttribute]
public Type get_StringMarshallingCustomType();
    [CompilerGeneratedAttribute]
public void set_StringMarshallingCustomType(Type value);
    [CompilerGeneratedAttribute]
public bool get_SetLastError();
    [CompilerGeneratedAttribute]
public void set_SetLastError(bool value);
}
internal enum System.Runtime.InteropServices.StringMarshalling : Enum {
    public int value__;
    public static StringMarshalling Custom;
    public static StringMarshalling Utf8;
    public static StringMarshalling Utf16;
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string Argument_DestinationTooShort { get; }
    internal static string Argument_SpansMustBeNonEmpty { get; }
    internal static string Argument_SpansMustHaveSameLength { get; }
    internal static string Argument_InputAndDestinationSpanMustNotOverlap { get; }
    private static SR();
    internal static bool UsingResourceKeys();
    private static string GetResourceString(string resourceKey);
    private static string GetResourceString(string resourceKey, string defaultString);
    [NullableContextAttribute("1")]
internal static string Format(string resourceFormat, object p1);
    [NullableContextAttribute("1")]
internal static string Format(string resourceFormat, object p1, object p2);
    [NullableContextAttribute("2")]
internal static string Format(string resourceFormat, object p1, object p2, object p3);
    [NullableContextAttribute("1")]
internal static string Format(string resourceFormat, Object[] args);
    [NullableContextAttribute("1")]
internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    [NullableContextAttribute("2")]
internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    [NullableContextAttribute("2")]
internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    [NullableContextAttribute("1")]
internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_Argument_DestinationTooShort();
    internal static string get_Argument_SpansMustBeNonEmpty();
    internal static string get_Argument_SpansMustHaveSameLength();
    internal static string get_Argument_InputAndDestinationSpanMustNotOverlap();
}
internal static class System.ThrowHelper : object {
    [DoesNotReturnAttribute]
public static void ThrowArgument_DestinationTooShort();
    [DoesNotReturnAttribute]
public static void ThrowArgument_SpansMustHaveSameLength();
    [DoesNotReturnAttribute]
public static void ThrowArgument_SpansMustBeNonEmpty();
    [DoesNotReturnAttribute]
public static void ThrowArgument_InputAndDestinationSpanMustNotOverlap();
}
