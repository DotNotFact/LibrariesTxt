internal static class FxResources.System.Numerics.Tensors.SR : object {
}
public static class System.Numerics.Tensors.TensorPrimitives : object {
    private static UIntPtr NonTemporalByteThreshold;
    private static ReadOnlySpan`1<UInt32> AlignmentUInt32Mask_16x16 { get; }
    private static ReadOnlySpan`1<UInt32> RemainderUInt32Mask_16x16 { get; }
    public static void Abs(ReadOnlySpan`1<float> x, Span`1<float> destination);
    public static void Add(ReadOnlySpan`1<float> x, ReadOnlySpan`1<float> y, Span`1<float> destination);
    public static void Add(ReadOnlySpan`1<float> x, float y, Span`1<float> destination);
    public static void AddMultiply(ReadOnlySpan`1<float> x, ReadOnlySpan`1<float> y, ReadOnlySpan`1<float> multiplier, Span`1<float> destination);
    public static void AddMultiply(ReadOnlySpan`1<float> x, ReadOnlySpan`1<float> y, float multiplier, Span`1<float> destination);
    public static void AddMultiply(ReadOnlySpan`1<float> x, float y, ReadOnlySpan`1<float> multiplier, Span`1<float> destination);
    public static void Cosh(ReadOnlySpan`1<float> x, Span`1<float> destination);
    public static float CosineSimilarity(ReadOnlySpan`1<float> x, ReadOnlySpan`1<float> y);
    public static float Distance(ReadOnlySpan`1<float> x, ReadOnlySpan`1<float> y);
    public static void Divide(ReadOnlySpan`1<float> x, ReadOnlySpan`1<float> y, Span`1<float> destination);
    public static void Divide(ReadOnlySpan`1<float> x, float y, Span`1<float> destination);
    public static float Dot(ReadOnlySpan`1<float> x, ReadOnlySpan`1<float> y);
    public static void Exp(ReadOnlySpan`1<float> x, Span`1<float> destination);
    public static int IndexOfMax(ReadOnlySpan`1<float> x);
    public static int IndexOfMaxMagnitude(ReadOnlySpan`1<float> x);
    public static int IndexOfMin(ReadOnlySpan`1<float> x);
    public static int IndexOfMinMagnitude(ReadOnlySpan`1<float> x);
    public static void Log(ReadOnlySpan`1<float> x, Span`1<float> destination);
    public static void Log2(ReadOnlySpan`1<float> x, Span`1<float> destination);
    public static float Max(ReadOnlySpan`1<float> x);
    public static void Max(ReadOnlySpan`1<float> x, ReadOnlySpan`1<float> y, Span`1<float> destination);
    public static float MaxMagnitude(ReadOnlySpan`1<float> x);
    public static void MaxMagnitude(ReadOnlySpan`1<float> x, ReadOnlySpan`1<float> y, Span`1<float> destination);
    public static float Min(ReadOnlySpan`1<float> x);
    public static void Min(ReadOnlySpan`1<float> x, ReadOnlySpan`1<float> y, Span`1<float> destination);
    public static float MinMagnitude(ReadOnlySpan`1<float> x);
    public static void MinMagnitude(ReadOnlySpan`1<float> x, ReadOnlySpan`1<float> y, Span`1<float> destination);
    public static void Multiply(ReadOnlySpan`1<float> x, ReadOnlySpan`1<float> y, Span`1<float> destination);
    public static void Multiply(ReadOnlySpan`1<float> x, float y, Span`1<float> destination);
    public static void MultiplyAdd(ReadOnlySpan`1<float> x, ReadOnlySpan`1<float> y, ReadOnlySpan`1<float> addend, Span`1<float> destination);
    public static void MultiplyAdd(ReadOnlySpan`1<float> x, ReadOnlySpan`1<float> y, float addend, Span`1<float> destination);
    public static void MultiplyAdd(ReadOnlySpan`1<float> x, float y, ReadOnlySpan`1<float> addend, Span`1<float> destination);
    public static void Negate(ReadOnlySpan`1<float> x, Span`1<float> destination);
    public static float Norm(ReadOnlySpan`1<float> x);
    public static float Product(ReadOnlySpan`1<float> x);
    public static float ProductOfDifferences(ReadOnlySpan`1<float> x, ReadOnlySpan`1<float> y);
    public static float ProductOfSums(ReadOnlySpan`1<float> x, ReadOnlySpan`1<float> y);
    public static void Sigmoid(ReadOnlySpan`1<float> x, Span`1<float> destination);
    public static void Sinh(ReadOnlySpan`1<float> x, Span`1<float> destination);
    public static void SoftMax(ReadOnlySpan`1<float> x, Span`1<float> destination);
    public static void Subtract(ReadOnlySpan`1<float> x, ReadOnlySpan`1<float> y, Span`1<float> destination);
    public static void Subtract(ReadOnlySpan`1<float> x, float y, Span`1<float> destination);
    public static float Sum(ReadOnlySpan`1<float> x);
    public static float SumOfMagnitudes(ReadOnlySpan`1<float> x);
    public static float SumOfSquares(ReadOnlySpan`1<float> x);
    public static void Tanh(ReadOnlySpan`1<float> x, Span`1<float> destination);
    private static void ValidateInputOutputSpanNonOverlapping(ReadOnlySpan`1<float> input, Span`1<float> output);
    private static ReadOnlySpan`1<UInt32> get_AlignmentUInt32Mask_16x16();
    private static ReadOnlySpan`1<UInt32> get_RemainderUInt32Mask_16x16();
    public static void ConvertToHalf(ReadOnlySpan`1<float> source, Span`1<Half> destination);
    public static void ConvertToSingle(ReadOnlySpan`1<Half> source, Span`1<float> destination);
    private static float CosineSimilarityCore(ReadOnlySpan`1<float> x, ReadOnlySpan`1<float> y);
    private static float Aggregate(ReadOnlySpan`1<float> x);
    private static float Aggregate(ReadOnlySpan`1<float> x, ReadOnlySpan`1<float> y);
    private static float MinMaxCore(ReadOnlySpan`1<float> x);
    private static int IndexOfMinMaxCore(ReadOnlySpan`1<float> x);
    private static int IndexOfFirstMatch(Vector128`1<float> mask);
    private static int IndexOfFirstMatch(Vector256`1<float> mask);
    private static int IndexOfFirstMatch(Vector512`1<float> mask);
    private static void InvokeSpanIntoSpan(ReadOnlySpan`1<float> x, Span`1<float> destination);
    private static void InvokeSpanSpanIntoSpan(ReadOnlySpan`1<float> x, ReadOnlySpan`1<float> y, Span`1<float> destination);
    private static void InvokeSpanScalarIntoSpan(ReadOnlySpan`1<float> x, float y, Span`1<float> destination);
    private static void InvokeSpanScalarIntoSpan(ReadOnlySpan`1<float> x, float y, Span`1<float> destination);
    private static void InvokeSpanSpanSpanIntoSpan(ReadOnlySpan`1<float> x, ReadOnlySpan`1<float> y, ReadOnlySpan`1<float> z, Span`1<float> destination);
    private static void InvokeSpanSpanScalarIntoSpan(ReadOnlySpan`1<float> x, ReadOnlySpan`1<float> y, float z, Span`1<float> destination);
    private static void InvokeSpanScalarSpanIntoSpan(ReadOnlySpan`1<float> x, float y, ReadOnlySpan`1<float> z, Span`1<float> destination);
    private static Vector128`1<float> FusedMultiplyAdd(Vector128`1<float> x, Vector128`1<float> y, Vector128`1<float> addend);
    private static Vector256`1<float> FusedMultiplyAdd(Vector256`1<float> x, Vector256`1<float> y, Vector256`1<float> addend);
    private static Vector512`1<float> FusedMultiplyAdd(Vector512`1<float> x, Vector512`1<float> y, Vector512`1<float> addend);
    private static float HorizontalAggregate(Vector128`1<float> x);
    private static float HorizontalAggregate(Vector256`1<float> x);
    private static float HorizontalAggregate(Vector512`1<float> x);
    private static bool IsNegative(float f);
    private static Vector128`1<float> IsNegative(Vector128`1<float> vector);
    private static Vector256`1<float> IsNegative(Vector256`1<float> vector);
    private static Vector512`1<float> IsNegative(Vector512`1<float> vector);
    private static bool IsPositive(float f);
    private static Vector128`1<float> IsPositive(Vector128`1<float> vector);
    private static Vector256`1<float> IsPositive(Vector256`1<float> vector);
    private static Vector512`1<float> IsPositive(Vector512`1<float> vector);
    private static float GetFirstNaN(Vector128`1<float> vector);
    private static int GetFirstNaNIndex(Vector128`1<float> vector, Vector128`1<int> index);
    private static float GetFirstNaN(Vector256`1<float> vector);
    private static int GetFirstNaNIndex(Vector256`1<float> vector, Vector256`1<int> index);
    private static float GetFirstNaN(Vector512`1<float> vector);
    private static int GetFirstNaNIndex(Vector512`1<float> vector, Vector512`1<int> index);
    private static float Log2(float x);
    private static Vector128`1<float> CreateAlignmentMaskSingleVector128(int count);
    private static Vector256`1<float> CreateAlignmentMaskSingleVector256(int count);
    private static Vector512`1<float> CreateAlignmentMaskSingleVector512(int count);
    private static Vector128`1<float> CreateRemainderMaskSingleVector128(int count);
    private static Vector256`1<float> CreateRemainderMaskSingleVector256(int count);
    private static Vector512`1<float> CreateRemainderMaskSingleVector512(int count);
    private static Vector128`1<float> ElementWiseSelect(Vector128`1<float> mask, Vector128`1<float> left, Vector128`1<float> right);
    private static Vector128`1<int> ElementWiseSelect(Vector128`1<int> mask, Vector128`1<int> left, Vector128`1<int> right);
    private static Vector256`1<float> ElementWiseSelect(Vector256`1<float> mask, Vector256`1<float> left, Vector256`1<float> right);
    private static Vector256`1<int> ElementWiseSelect(Vector256`1<int> mask, Vector256`1<int> left, Vector256`1<int> right);
    private static Vector512`1<float> ElementWiseSelect(Vector512`1<float> mask, Vector512`1<float> left, Vector512`1<float> right);
    private static Vector512`1<int> ElementWiseSelect(Vector512`1<int> mask, Vector512`1<int> left, Vector512`1<int> right);
    [CompilerGeneratedAttribute]
internal static Vector128`1<UInt32> <ConvertToHalf>g__SingleToHalfAsWidenedUInt32_Vector128|52_0(Vector128`1<float> value);
    [CompilerGeneratedAttribute]
internal static Vector256`1<UInt32> <ConvertToHalf>g__SingleToHalfAsWidenedUInt32_Vector256|52_1(Vector256`1<float> value);
    [CompilerGeneratedAttribute]
internal static Vector512`1<UInt32> <ConvertToHalf>g__SingleToHalfAsWidenedUInt32_Vector512|52_2(Vector512`1<float> value);
    [CompilerGeneratedAttribute]
internal static Vector128`1<float> <ConvertToSingle>g__HalfAsWidenedUInt32ToSingle_Vector128|53_0(Vector128`1<UInt32> value);
    [CompilerGeneratedAttribute]
internal static Vector256`1<float> <ConvertToSingle>g__HalfAsWidenedUInt32ToSingle_Vector256|53_1(Vector256`1<UInt32> value);
    [CompilerGeneratedAttribute]
internal static Vector512`1<float> <ConvertToSingle>g__HalfAsWidenedUInt32ToSingle_Vector512|53_2(Vector512`1<UInt32> value);
    [CompilerGeneratedAttribute]
internal static float <Aggregate>g__SoftwareFallback|55_0(Single& xRef, UIntPtr length);
    [CompilerGeneratedAttribute]
internal static float <Aggregate>g__Vectorized128|55_1(Single& xRef, UIntPtr remainder);
    [CompilerGeneratedAttribute]
internal static float <Aggregate>g__Vectorized128Small|55_2(Single& xRef, UIntPtr remainder);
    [CompilerGeneratedAttribute]
internal static float <Aggregate>g__Vectorized256|55_3(Single& xRef, UIntPtr remainder);
    [CompilerGeneratedAttribute]
internal static float <Aggregate>g__Vectorized256Small|55_4(Single& xRef, UIntPtr remainder);
    [CompilerGeneratedAttribute]
internal static float <Aggregate>g__Vectorized512|55_5(Single& xRef, UIntPtr remainder);
    [CompilerGeneratedAttribute]
internal static float <Aggregate>g__Vectorized512Small|55_6(Single& xRef, UIntPtr remainder);
    [CompilerGeneratedAttribute]
internal static float <Aggregate>g__SoftwareFallback|56_0(Single& xRef, Single& yRef, UIntPtr length);
    [CompilerGeneratedAttribute]
internal static float <Aggregate>g__Vectorized128|56_1(Single& xRef, Single& yRef, UIntPtr remainder);
    [CompilerGeneratedAttribute]
internal static float <Aggregate>g__Vectorized128Small|56_2(Single& xRef, Single& yRef, UIntPtr remainder);
    [CompilerGeneratedAttribute]
internal static float <Aggregate>g__Vectorized256|56_3(Single& xRef, Single& yRef, UIntPtr remainder);
    [CompilerGeneratedAttribute]
internal static float <Aggregate>g__Vectorized256Small|56_4(Single& xRef, Single& yRef, UIntPtr remainder);
    [CompilerGeneratedAttribute]
internal static float <Aggregate>g__Vectorized512|56_5(Single& xRef, Single& yRef, UIntPtr remainder);
    [CompilerGeneratedAttribute]
internal static float <Aggregate>g__Vectorized512Small|56_6(Single& xRef, Single& yRef, UIntPtr remainder);
    [CompilerGeneratedAttribute]
internal static void <InvokeSpanIntoSpan>g__SoftwareFallback|62_0(Single& xRef, Single& dRef, UIntPtr length);
    [CompilerGeneratedAttribute]
internal static void <InvokeSpanIntoSpan>g__Vectorized128|62_1(Single& xRef, Single& dRef, UIntPtr remainder);
    [CompilerGeneratedAttribute]
internal static void <InvokeSpanIntoSpan>g__Vectorized128Small|62_2(Single& xRef, Single& dRef, UIntPtr remainder);
    [CompilerGeneratedAttribute]
internal static void <InvokeSpanIntoSpan>g__Vectorized256|62_3(Single& xRef, Single& dRef, UIntPtr remainder);
    [CompilerGeneratedAttribute]
internal static void <InvokeSpanIntoSpan>g__Vectorized256Small|62_4(Single& xRef, Single& dRef, UIntPtr remainder);
    [CompilerGeneratedAttribute]
internal static void <InvokeSpanIntoSpan>g__Vectorized512|62_5(Single& xRef, Single& dRef, UIntPtr remainder);
    [CompilerGeneratedAttribute]
internal static void <InvokeSpanIntoSpan>g__Vectorized512Small|62_6(Single& xRef, Single& dRef, UIntPtr remainder);
    [CompilerGeneratedAttribute]
internal static void <InvokeSpanSpanIntoSpan>g__SoftwareFallback|63_0(Single& xRef, Single& yRef, Single& dRef, UIntPtr length);
    [CompilerGeneratedAttribute]
internal static void <InvokeSpanSpanIntoSpan>g__Vectorized128|63_1(Single& xRef, Single& yRef, Single& dRef, UIntPtr remainder);
    [CompilerGeneratedAttribute]
internal static void <InvokeSpanSpanIntoSpan>g__Vectorized128Small|63_2(Single& xRef, Single& yRef, Single& dRef, UIntPtr remainder);
    [CompilerGeneratedAttribute]
internal static void <InvokeSpanSpanIntoSpan>g__Vectorized256|63_3(Single& xRef, Single& yRef, Single& dRef, UIntPtr remainder);
    [CompilerGeneratedAttribute]
internal static void <InvokeSpanSpanIntoSpan>g__Vectorized256Small|63_4(Single& xRef, Single& yRef, Single& dRef, UIntPtr remainder);
    [CompilerGeneratedAttribute]
internal static void <InvokeSpanSpanIntoSpan>g__Vectorized512|63_5(Single& xRef, Single& yRef, Single& dRef, UIntPtr remainder);
    [CompilerGeneratedAttribute]
internal static void <InvokeSpanSpanIntoSpan>g__Vectorized512Small|63_6(Single& xRef, Single& yRef, Single& dRef, UIntPtr remainder);
    [CompilerGeneratedAttribute]
internal static void <InvokeSpanScalarIntoSpan>g__SoftwareFallback|65_0(Single& xRef, float y, Single& dRef, UIntPtr length);
    [CompilerGeneratedAttribute]
internal static void <InvokeSpanScalarIntoSpan>g__Vectorized128|65_1(Single& xRef, float y, Single& dRef, UIntPtr remainder);
    [CompilerGeneratedAttribute]
internal static void <InvokeSpanScalarIntoSpan>g__Vectorized128Small|65_2(Single& xRef, float y, Single& dRef, UIntPtr remainder);
    [CompilerGeneratedAttribute]
internal static void <InvokeSpanScalarIntoSpan>g__Vectorized256|65_3(Single& xRef, float y, Single& dRef, UIntPtr remainder);
    [CompilerGeneratedAttribute]
internal static void <InvokeSpanScalarIntoSpan>g__Vectorized256Small|65_4(Single& xRef, float y, Single& dRef, UIntPtr remainder);
    [CompilerGeneratedAttribute]
internal static void <InvokeSpanScalarIntoSpan>g__Vectorized512|65_5(Single& xRef, float y, Single& dRef, UIntPtr remainder);
    [CompilerGeneratedAttribute]
internal static void <InvokeSpanScalarIntoSpan>g__Vectorized512Small|65_6(Single& xRef, float y, Single& dRef, UIntPtr remainder);
    [CompilerGeneratedAttribute]
internal static void <InvokeSpanSpanSpanIntoSpan>g__SoftwareFallback|66_0(Single& xRef, Single& yRef, Single& zRef, Single& dRef, UIntPtr length);
    [CompilerGeneratedAttribute]
internal static void <InvokeSpanSpanSpanIntoSpan>g__Vectorized128|66_1(Single& xRef, Single& yRef, Single& zRef, Single& dRef, UIntPtr remainder);
    [CompilerGeneratedAttribute]
internal static void <InvokeSpanSpanSpanIntoSpan>g__Vectorized128Small|66_2(Single& xRef, Single& yRef, Single& zRef, Single& dRef, UIntPtr remainder);
    [CompilerGeneratedAttribute]
internal static void <InvokeSpanSpanSpanIntoSpan>g__Vectorized256|66_3(Single& xRef, Single& yRef, Single& zRef, Single& dRef, UIntPtr remainder);
    [CompilerGeneratedAttribute]
internal static void <InvokeSpanSpanSpanIntoSpan>g__Vectorized256Small|66_4(Single& xRef, Single& yRef, Single& zRef, Single& dRef, UIntPtr remainder);
    [CompilerGeneratedAttribute]
internal static void <InvokeSpanSpanSpanIntoSpan>g__Vectorized512|66_5(Single& xRef, Single& yRef, Single& zRef, Single& dRef, UIntPtr remainder);
    [CompilerGeneratedAttribute]
internal static void <InvokeSpanSpanSpanIntoSpan>g__Vectorized512Small|66_6(Single& xRef, Single& yRef, Single& zRef, Single& dRef, UIntPtr remainder);
    [CompilerGeneratedAttribute]
internal static void <InvokeSpanSpanScalarIntoSpan>g__SoftwareFallback|67_0(Single& xRef, Single& yRef, float z, Single& dRef, UIntPtr length);
    [CompilerGeneratedAttribute]
internal static void <InvokeSpanSpanScalarIntoSpan>g__Vectorized128|67_1(Single& xRef, Single& yRef, float z, Single& dRef, UIntPtr remainder);
    [CompilerGeneratedAttribute]
internal static void <InvokeSpanSpanScalarIntoSpan>g__Vectorized128Small|67_2(Single& xRef, Single& yRef, float z, Single& dRef, UIntPtr remainder);
    [CompilerGeneratedAttribute]
internal static void <InvokeSpanSpanScalarIntoSpan>g__Vectorized256|67_3(Single& xRef, Single& yRef, float z, Single& dRef, UIntPtr remainder);
    [CompilerGeneratedAttribute]
internal static void <InvokeSpanSpanScalarIntoSpan>g__Vectorized256Small|67_4(Single& xRef, Single& yRef, float z, Single& dRef, UIntPtr remainder);
    [CompilerGeneratedAttribute]
internal static void <InvokeSpanSpanScalarIntoSpan>g__Vectorized512|67_5(Single& xRef, Single& yRef, float z, Single& dRef, UIntPtr remainder);
    [CompilerGeneratedAttribute]
internal static void <InvokeSpanSpanScalarIntoSpan>g__Vectorized512Small|67_6(Single& xRef, Single& yRef, float z, Single& dRef, UIntPtr remainder);
    [CompilerGeneratedAttribute]
internal static void <InvokeSpanScalarSpanIntoSpan>g__SoftwareFallback|68_0(Single& xRef, float y, Single& zRef, Single& dRef, UIntPtr length);
    [CompilerGeneratedAttribute]
internal static void <InvokeSpanScalarSpanIntoSpan>g__Vectorized128|68_1(Single& xRef, float y, Single& zRef, Single& dRef, UIntPtr remainder);
    [CompilerGeneratedAttribute]
internal static void <InvokeSpanScalarSpanIntoSpan>g__Vectorized128Small|68_2(Single& xRef, float y, Single& zRef, Single& dRef, UIntPtr remainder);
    [CompilerGeneratedAttribute]
internal static void <InvokeSpanScalarSpanIntoSpan>g__Vectorized256|68_3(Single& xRef, float y, Single& zRef, Single& dRef, UIntPtr remainder);
    [CompilerGeneratedAttribute]
internal static void <InvokeSpanScalarSpanIntoSpan>g__Vectorized256Small|68_4(Single& xRef, float y, Single& zRef, Single& dRef, UIntPtr remainder);
    [CompilerGeneratedAttribute]
internal static void <InvokeSpanScalarSpanIntoSpan>g__Vectorized512|68_5(Single& xRef, float y, Single& zRef, Single& dRef, UIntPtr remainder);
    [CompilerGeneratedAttribute]
internal static void <InvokeSpanScalarSpanIntoSpan>g__Vectorized512Small|68_6(Single& xRef, float y, Single& zRef, Single& dRef, UIntPtr remainder);
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string Argument_DestinationTooShort { get; }
    internal static string Argument_SpansMustBeNonEmpty { get; }
    internal static string Argument_SpansMustHaveSameLength { get; }
    internal static string Argument_InputAndDestinationSpanMustNotOverlap { get; }
    private static SR();
    internal static bool UsingResourceKeys();
    private static string GetResourceString(string resourceKey);
    private static string GetResourceString(string resourceKey, string defaultString);
    [NullableContextAttribute("1")]
internal static string Format(string resourceFormat, object p1);
    [NullableContextAttribute("1")]
internal static string Format(string resourceFormat, object p1, object p2);
    [NullableContextAttribute("2")]
internal static string Format(string resourceFormat, object p1, object p2, object p3);
    [NullableContextAttribute("1")]
internal static string Format(string resourceFormat, Object[] args);
    [NullableContextAttribute("1")]
internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    [NullableContextAttribute("2")]
internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    [NullableContextAttribute("2")]
internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    [NullableContextAttribute("1")]
internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_Argument_DestinationTooShort();
    internal static string get_Argument_SpansMustBeNonEmpty();
    internal static string get_Argument_SpansMustHaveSameLength();
    internal static string get_Argument_InputAndDestinationSpanMustNotOverlap();
}
internal static class System.ThrowHelper : object {
    [DoesNotReturnAttribute]
public static void ThrowArgument_DestinationTooShort();
    [DoesNotReturnAttribute]
public static void ThrowArgument_SpansMustHaveSameLength();
    [DoesNotReturnAttribute]
public static void ThrowArgument_SpansMustBeNonEmpty();
    [DoesNotReturnAttribute]
public static void ThrowArgument_InputAndDestinationSpanMustNotOverlap();
}
