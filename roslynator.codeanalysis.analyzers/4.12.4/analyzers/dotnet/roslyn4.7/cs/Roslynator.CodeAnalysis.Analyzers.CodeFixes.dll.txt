[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CodeAnalysis.CSharp.AttributeArgumentCodeFixProvider : BaseCodeFixProvider {
    private static ImmutableDictionary`2<string, string> _languageNames;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CodeAnalysis.CSharp.AttributeArgumentCodeFixProvider/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static Task`1<Document> ChangeLanguageNameAsync(Document document, AttributeArgumentSyntax attributeArgument, string languageName, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal static ImmutableDictionary`2<string, string> <ChangeLanguageNameAsync>g__LoadLanguageNames|4_0();
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CodeAnalysis.CSharp.AttributeCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CodeAnalysis.CSharp.AttributeCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static Task`1<Document> SpecifyNameAsync(Document document, AttributeSyntax attribute, CancellationToken cancellationToken);
}
public abstract class Roslynator.CodeAnalysis.CSharp.BaseCodeFixProvider : AbstractCodeFixProvider {
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CodeAnalysis.CSharp.BinaryExpressionCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CodeAnalysis.CSharp.BinaryExpressionCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static Task`1<Document> CallAnyInsteadOfUsingCountAsync(Document document, BinaryExpressionSyntax binaryExpression, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CodeAnalysis.CSharp.ConditionalAccessExpressionCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CodeAnalysis.CSharp.ConditionalAccessExpressionCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static Task`1<Document> RemoveUnnecessaryConditionalAccessAsync(Document document, ConditionalAccessExpressionSyntax conditionalAccess, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CodeAnalysis.CSharp.ElementAccessExpressionCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CodeAnalysis.CSharp.ElementAccessExpressionCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static Task`1<Document> CallLastInsteadOfUsingElementAccessAsync(Document document, ElementAccessExpressionSyntax elementAccessExpression, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CodeAnalysis.CSharp.InvocationExpressionCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CodeAnalysis.CSharp.InvocationExpressionCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static Task`1<Document> UseElementAccessInsteadOfCallingFirstAsync(Document document, InvocationExpressionSyntax invocationExpression, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Roslynator.CodeAnalysis.CSharp.InvocationExpressionCodeFixProvider/<IntroduceLocalForExpressionAsync>d__4")]
private static Task`1<Document> IntroduceLocalForExpressionAsync(Document document, InvocationExpressionSyntax invocationExpression, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CodeAnalysis.CSharp.SimpleMemberAccessExpressionCodeFixProvider : BaseCodeFixProvider {
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CodeAnalysis.CSharp.SimpleMemberAccessExpressionCodeFixProvider/<RegisterCodeFixesAsync>d__2")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static Task`1<Document> UsePropertySyntaxNodeSpanStartAsync(Document document, MemberAccessExpressionSyntax memberAccess, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Roslynator.CodeAnalysis.CSharp.UsePatternMatchingCodeFixProvider : BaseCodeFixProvider {
    private static string Title;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Roslynator.CodeAnalysis.CSharp.UsePatternMatchingCodeFixProvider/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static Task`1<Document> UsePatternMatchingAsync(Document document, SwitchStatementSyntax switchStatement, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Roslynator.CodeAnalysis.CSharp.UsePatternMatchingCodeFixProvider/<UsePatternMatchingAsync>d__5")]
private static Task`1<Document> UsePatternMatchingAsync(Document document, IfStatementSyntax ifStatement, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal static IsPatternExpressionSyntax <UsePatternMatchingAsync>g__CreateIsPatternExpression|5_0(StatementSyntax statement, <>c__DisplayClass5_0& );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
