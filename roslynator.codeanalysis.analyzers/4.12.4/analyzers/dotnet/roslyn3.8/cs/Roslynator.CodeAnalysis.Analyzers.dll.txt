[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
internal class Roslynator.CodeAnalysis.CSharp.AnalyzerOptionsAnalyzer : DiagnosticAnalyzer {
    public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public abstract class Roslynator.CodeAnalysis.CSharp.BaseDiagnosticAnalyzer : DiagnosticAnalyzer {
    [DebuggerBrowsableAttribute("0")]
private string DebuggerDisplay { get; }
    private string get_DebuggerDisplay();
    public virtual void Initialize(AnalysisContext context);
}
public static class Roslynator.CodeAnalysis.CSharp.DiagnosticIdentifiers : object {
    public static string UsePatternMatching;
    public static string UsePropertySyntaxNodeSpanStart;
    public static string UnnecessaryConditionalAccess;
    public static string CallAnyInsteadOfAccessingCount;
    public static string UnnecessaryNullCheck;
    public static string UseElementAccess;
    public static string UseReturnValue;
    public static string CallLastInsteadOfUsingElementAccess;
    public static string UnknownLanguageName;
    public static string SpecifyExportCodeRefactoringProviderAttributeName;
    public static string SpecifyExportCodeFixProviderAttributeName;
}
public static class Roslynator.CodeAnalysis.CSharp.DiagnosticRules : object {
    public static DiagnosticDescriptor UsePatternMatching;
    public static DiagnosticDescriptor UsePropertySyntaxNodeSpanStart;
    public static DiagnosticDescriptor UnnecessaryConditionalAccess;
    public static DiagnosticDescriptor UnnecessaryConditionalAccessFadeOut;
    public static DiagnosticDescriptor CallAnyInsteadOfAccessingCount;
    public static DiagnosticDescriptor UnnecessaryNullCheck;
    public static DiagnosticDescriptor UseElementAccess;
    public static DiagnosticDescriptor UseReturnValue;
    public static DiagnosticDescriptor CallLastInsteadOfUsingElementAccess;
    public static DiagnosticDescriptor UnknownLanguageName;
    public static DiagnosticDescriptor SpecifyExportCodeRefactoringProviderAttributeName;
    public static DiagnosticDescriptor SpecifyExportCodeFixProviderAttributeName;
    private static DiagnosticRules();
}
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Roslynator.CodeAnalysis.CSharp.ElementAccessExpressionAnalyzer : BaseDiagnosticAnalyzer {
    private static ImmutableArray`1<DiagnosticDescriptor> _supportedDiagnostics;
    public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void AnalyzeElementAccessExpression(SyntaxNodeAnalysisContext context);
}
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Roslynator.CodeAnalysis.CSharp.InvocationExpressionAnalyzer : BaseDiagnosticAnalyzer {
    private static ImmutableArray`1<DiagnosticDescriptor> _supportedDiagnostics;
    public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void AnalyzeInvocationExpression(SyntaxNodeAnalysisContext context);
    [CompilerGeneratedAttribute]
internal static void <AnalyzeInvocationExpression>g__AnalyzeUnnecessaryNullCheck|4_0(<>c__DisplayClass4_0& );
    [CompilerGeneratedAttribute]
internal static void <AnalyzeInvocationExpression>g__UseElementAccessInsteadOfCallingFirst|4_1(<>c__DisplayClass4_0& );
    [CompilerGeneratedAttribute]
internal static void <AnalyzeInvocationExpression>g__UseElementAccessInsteadOfCallingElementAt|4_2(<>c__DisplayClass4_0& );
    [CompilerGeneratedAttribute]
internal static void <AnalyzeInvocationExpression>g__UseReturnValue|4_3(<>c__DisplayClass4_0& );
}
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Roslynator.CodeAnalysis.CSharp.NamedTypeSymbolAnalyzer : BaseDiagnosticAnalyzer {
    private static ImmutableArray`1<DiagnosticDescriptor> _supportedDiagnostics;
    public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void AnalyzeNamedTypeSymbol(SymbolAnalysisContext context);
    private static void AnalyzeDiagnosticAnalyzer(SymbolAnalysisContext context, INamedTypeSymbol symbol);
    private static void AnalyzeCodeFixProvider(SymbolAnalysisContext context, INamedTypeSymbol symbol);
    private static void AnalyzeCodeRefactoringProvider(SymbolAnalysisContext context, INamedTypeSymbol symbol);
    private static void AnalyzeLanguageName(SymbolAnalysisContext context, AttributeData attribute);
    private static bool ContainsNamedArgument(AttributeData attribute, string name);
    private static void ReportUnknownLanguageName(SymbolAnalysisContext context, AttributeData attributeData, int argumentIndex);
    private static void ReportDiagnostic(SymbolAnalysisContext context, AttributeData attributeData, DiagnosticDescriptor descriptor);
}
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Roslynator.CodeAnalysis.CSharp.SimpleMemberAccessExpressionAnalyzer : BaseDiagnosticAnalyzer {
    private static ImmutableArray`1<DiagnosticDescriptor> _supportedDiagnostics;
    public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void AnalyzeSimpleMemberAccessExpression(SyntaxNodeAnalysisContext context);
    [CompilerGeneratedAttribute]
internal static void <AnalyzeSimpleMemberAccessExpression>g__CallAnyInsteadOfUsingCount|4_0(<>c__DisplayClass4_0& );
}
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Roslynator.CodeAnalysis.CSharp.UnnecessaryConditionalAccessAnalyzer : BaseDiagnosticAnalyzer {
    private static ImmutableArray`1<DiagnosticDescriptor> _supportedDiagnostics;
    public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void AnalyzeBinaryExpression(SyntaxNodeAnalysisContext context);
}
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Roslynator.CodeAnalysis.CSharp.UsePatternMatchingAnalyzer : BaseDiagnosticAnalyzer {
    private static ImmutableHashSet`1<string> _syntaxKindNames;
    private static ImmutableHashSet`1<string> _syntaxTypeNames;
    private static ImmutableDictionary`2<ushort, string> _syntaxKindValuesToNames;
    private static ImmutableArray`1<DiagnosticDescriptor> _supportedDiagnostics;
    public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void AnalyzeSwitchStatement(SyntaxNodeAnalysisContext context);
    private static void AnalyzeIfStatement(SyntaxNodeAnalysisContext context);
    private static bool IsFixableSyntaxSymbol(TypeSyntax type, string kindName, SemanticModel semanticModel, CancellationToken cancellationToken);
    private static bool IsLocalVariableReferenced(SyntaxNodeAnalysisContext context, SingleLocalDeclarationStatementInfo localInfo, SwitchStatementSyntax switchStatement);
    [CompilerGeneratedAttribute]
internal static string <AnalyzeSwitchStatement>g__GetName|7_0(<>c__DisplayClass7_0& );
    [CompilerGeneratedAttribute]
internal static string <AnalyzeSwitchStatement>g__GetName2|7_1(InvocationExpressionSyntax invocationExpression);
    [CompilerGeneratedAttribute]
internal static void <AnalyzeIfStatement>g__Analyze|8_0(StatementSyntax statement, <>c__DisplayClass8_0& );
}
internal static class Roslynator.CSharp.CSharpSymbolUtility : object {
    public static bool IsKindExtensionMethod(ExpressionSyntax expression, SemanticModel semanticModel, CancellationToken cancellationToken);
    public static bool IsIsKindExtensionMethod(ExpressionSyntax expression, SemanticModel semanticModel, CancellationToken cancellationToken);
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
internal class Roslynator.CSharp.Syntax.IsKindExpressionInfo : ValueType {
    [CompilerGeneratedAttribute]
private ExpressionSyntax <IsKindExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private ExpressionSyntax <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private ExpressionSyntax <KindExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private IsKindExpressionStyle <Style>k__BackingField;
    public ExpressionSyntax IsKindExpression { get; }
    public ExpressionSyntax Expression { get; }
    public ExpressionSyntax KindExpression { get; }
    public IsKindExpressionStyle Style { get; }
    public bool Success { get; }
    [DebuggerBrowsableAttribute("0")]
private string DebuggerDisplay { get; }
    private IsKindExpressionInfo(ExpressionSyntax isKindExpression, ExpressionSyntax expression, ExpressionSyntax kindExpression, IsKindExpressionStyle style);
    [CompilerGeneratedAttribute]
public ExpressionSyntax get_IsKindExpression();
    [CompilerGeneratedAttribute]
public ExpressionSyntax get_Expression();
    [CompilerGeneratedAttribute]
public ExpressionSyntax get_KindExpression();
    [CompilerGeneratedAttribute]
public IsKindExpressionStyle get_Style();
    public bool get_Success();
    private string get_DebuggerDisplay();
    internal static IsKindExpressionInfo Create(SyntaxNode node, SemanticModel semanticModel, bool walkDownParentheses, bool allowMissing, CancellationToken cancellationToken);
    private static IsKindExpressionInfo Create(InvocationExpressionSyntax invocationExpression, SemanticModel semanticModel, IsKindExpressionStyle style, CancellationToken cancellationToken);
    private static IsKindExpressionInfo Create(BinaryExpressionSyntax binaryExpression, SyntaxKind binaryExpressionKind, ExpressionSyntax expression1, ExpressionSyntax expression2, SemanticModel semanticModel, CancellationToken cancellationToken);
    private static bool IsKindMethod(ExpressionSyntax expression, SemanticModel semanticModel, CancellationToken cancellationToken);
    private static bool IsIsKindMethod(ExpressionSyntax expression, SemanticModel semanticModel, CancellationToken cancellationToken);
}
public enum Roslynator.CSharp.Syntax.IsKindExpressionStyle : Enum {
    public int value__;
    public static IsKindExpressionStyle None;
    public static IsKindExpressionStyle IsKind;
    public static IsKindExpressionStyle IsKindConditional;
    public static IsKindExpressionStyle Kind;
    public static IsKindExpressionStyle KindConditional;
    public static IsKindExpressionStyle NotIsKind;
    public static IsKindExpressionStyle NotIsKindConditional;
    public static IsKindExpressionStyle NotKind;
    public static IsKindExpressionStyle NotKindConditional;
}
internal static class Roslynator.RoslynSymbolUtility : object {
    public static bool IsList(INamedTypeSymbol typeSymbol);
    public static bool IsRoslynType(ISymbol symbol);
}
internal static class Roslynator.RoslynUtility : object {
    private static ImmutableHashSet`1<string> _wellKnownLanguageNames;
    public static ImmutableHashSet`1<string> WellKnownLanguageNames { get; }
    public static ImmutableHashSet`1<string> get_WellKnownLanguageNames();
    [CompilerGeneratedAttribute]
internal static ImmutableHashSet`1<string> <get_WellKnownLanguageNames>g__LoadLanguageNames|2_0();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
