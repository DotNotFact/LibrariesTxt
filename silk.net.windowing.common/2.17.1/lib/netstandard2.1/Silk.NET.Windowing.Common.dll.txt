[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class Silk.NET.Windowing.APIVersion : ValueType {
    public int MajorVersion;
    public int MinorVersion;
    public APIVersion(int majorVersion, int minorVersion);
    [NullableContextAttribute("1")]
public APIVersion(Version version);
}
public enum Silk.NET.Windowing.ContextAPI : Enum {
    public int value__;
    public static ContextAPI None;
    public static ContextAPI Vulkan;
    public static ContextAPI OpenGL;
    public static ContextAPI OpenGLES;
}
[FlagsAttribute]
public enum Silk.NET.Windowing.ContextFlags : Enum {
    public int value__;
    public static ContextFlags Default;
    public static ContextFlags Debug;
    public static ContextFlags ForwardCompatible;
}
public enum Silk.NET.Windowing.ContextProfile : Enum {
    public int value__;
    public static ContextProfile Core;
    public static ContextProfile Compatability;
}
public class Silk.NET.Windowing.GraphicsAPI : ValueType {
    [CompilerGeneratedAttribute]
private ContextAPI <API>k__BackingField;
    [CompilerGeneratedAttribute]
private ContextProfile <Profile>k__BackingField;
    [CompilerGeneratedAttribute]
private ContextFlags <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private APIVersion <Version>k__BackingField;
    public ContextAPI API { get; public set; }
    public ContextProfile Profile { get; public set; }
    public ContextFlags Flags { get; public set; }
    public APIVersion Version { get; public set; }
    public static GraphicsAPI Default { get; }
    public static GraphicsAPI DefaultVulkan { get; }
    public static GraphicsAPI None { get; }
    public GraphicsAPI(ContextAPI api, ContextProfile profile, ContextFlags flags, APIVersion apiVersion);
    public GraphicsAPI(ContextAPI api, APIVersion apiVersion);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ContextAPI get_API();
    [CompilerGeneratedAttribute]
public void set_API(ContextAPI value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ContextProfile get_Profile();
    [CompilerGeneratedAttribute]
public void set_Profile(ContextProfile value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ContextFlags get_Flags();
    [CompilerGeneratedAttribute]
public void set_Flags(ContextFlags value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public APIVersion get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(APIVersion value);
    public static GraphicsAPI get_Default();
    public static GraphicsAPI get_DefaultVulkan();
    public static GraphicsAPI get_None();
}
public interface Silk.NET.Windowing.IMonitor {
    [NullableAttribute("1")]
public string Name { get; }
    public int Index { get; }
    public Rectangle`1<int> Bounds { get; }
    public VideoMode VideoMode { get; }
    public float Gamma { get; public set; }
    [NullableContextAttribute("1")]
public abstract virtual string get_Name();
    public abstract virtual int get_Index();
    public abstract virtual Rectangle`1<int> get_Bounds();
    public abstract virtual VideoMode get_VideoMode();
    public abstract virtual float get_Gamma();
    public abstract virtual void set_Gamma(float value);
    [NullableContextAttribute("1")]
public abstract virtual IEnumerable`1<VideoMode> GetAllVideoModes();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[EditorBrowsableAttribute("1")]
internal abstract class Silk.NET.Windowing.Internals.ViewImplementationBase : object {
    private static int InitialInvocationRental;
    protected ViewOptions _optionsCache;
    [NullableAttribute("1")]
private Stopwatch _lifetimeStopwatch;
    [NullableAttribute("1")]
private Stopwatch _renderStopwatch;
    [NullableAttribute("1")]
private Stopwatch _updateStopwatch;
    private double _renderPeriod;
    private double _updatePeriod;
    private bool _inRenderLoop;
    [NullableAttribute("1")]
private ArrayPool`1<object> _returnArrayPool;
    private PendingInvocation[] _pendingInvocations;
    private int _rented;
    private bool _swapIntervalChanged;
    [CompilerGeneratedAttribute]
private Action Load;
    [CompilerGeneratedAttribute]
private Action`1<double> Update;
    [CompilerGeneratedAttribute]
private Action`1<double> Render;
    [CompilerGeneratedAttribute]
private Action ProcessEvents;
    [CompilerGeneratedAttribute]
private bool <IsInitialized>k__BackingField;
    [CompilerGeneratedAttribute]
private INativeWindow <Native>k__BackingField;
    [NullableAttribute("0")]
protected Vector2D`1<int> CoreSize { get; }
    [NativeIntegerAttribute]
protected IntPtr CoreHandle { get; }
    protected bool CoreIsClosing { get; }
    protected IGLContext CoreGLContext { get; }
    protected IVkSurface CoreVkSurface { get; }
    public VideoMode VideoMode { get; }
    public bool IsEventDriven { get; public set; }
    [NullableAttribute("0")]
public Vector2D`1<int> FramebufferSize { get; }
    public double FramesPerSecond { get; public set; }
    public double UpdatesPerSecond { get; public set; }
    public bool IsContextControlDisabled { get; public set; }
    public bool ShouldSwapAutomatically { get; public set; }
    protected VideoMode CachedVideoMode { get; protected set; }
    public bool IsInitialized { get; protected set; }
    public INativeWindow Native { get; private set; }
    [NullableAttribute("0")]
public Vector2D`1<int> Size { get; }
    [NativeIntegerAttribute]
public IntPtr Handle { get; }
    public bool IsClosing { get; }
    public GraphicsAPI API { get; }
    public double Time { get; }
    public Nullable`1<int> PreferredDepthBufferBits { get; }
    public Nullable`1<int> PreferredStencilBufferBits { get; }
    [NullableAttribute("0")]
public Nullable`1<Vector4D`1<int>> PreferredBitDepth { get; }
    public Nullable`1<int> Samples { get; }
    public bool VSync { get; public set; }
    public IGLContext GLContext { get; }
    public IVkSurface VkSurface { get; }
    protected ViewImplementationBase(ViewOptions opts);
    [NullableContextAttribute("0")]
protected abstract virtual Vector2D`1<int> get_CoreSize();
    protected abstract virtual IntPtr get_CoreHandle();
    protected abstract virtual bool get_CoreIsClosing();
    protected abstract virtual IGLContext get_CoreGLContext();
    protected abstract virtual IVkSurface get_CoreVkSurface();
    protected abstract virtual void CoreInitialize(ViewOptions opts);
    protected abstract virtual void CoreReset();
    public abstract virtual VideoMode get_VideoMode();
    public abstract virtual bool get_IsEventDriven();
    public abstract virtual void set_IsEventDriven(bool value);
    [NullableContextAttribute("0")]
public abstract virtual Vector2D`1<int> get_FramebufferSize();
    public abstract virtual void DoEvents();
    public abstract virtual void ContinueEvents();
    [NullableContextAttribute("0")]
public abstract virtual Vector2D`1<int> PointToClient(Vector2D`1<int> point);
    [NullableContextAttribute("0")]
public abstract virtual Vector2D`1<int> PointToScreen(Vector2D`1<int> point);
    public abstract virtual void Close();
    protected abstract virtual void RegisterCallbacks();
    protected abstract virtual void UnregisterCallbacks();
    [NullableContextAttribute("1")]
protected abstract virtual INativeWindow GetNativeWindow();
    [CompilerGeneratedAttribute]
public abstract virtual void add_Resize(Action`1<Vector2D`1<int>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Resize(Action`1<Vector2D`1<int>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_FramebufferResize(Action`1<Vector2D`1<int>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_FramebufferResize(Action`1<Vector2D`1<int>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Closing(Action value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Closing(Action value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_FocusChanged(Action`1<bool> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_FocusChanged(Action`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Load(Action value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Load(Action value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Update(Action`1<double> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Update(Action`1<double> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Render(Action`1<double> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Render(Action`1<double> value);
    [CompilerGeneratedAttribute]
internal void add_ProcessEvents(Action value);
    [CompilerGeneratedAttribute]
internal void remove_ProcessEvents(Action value);
    public sealed virtual void Initialize();
    public sealed virtual void Reset();
    public sealed virtual double get_FramesPerSecond();
    public sealed virtual void set_FramesPerSecond(double value);
    public sealed virtual double get_UpdatesPerSecond();
    public sealed virtual void set_UpdatesPerSecond(double value);
    public sealed virtual bool get_IsContextControlDisabled();
    public sealed virtual void set_IsContextControlDisabled(bool value);
    public sealed virtual bool get_ShouldSwapAutomatically();
    public sealed virtual void set_ShouldSwapAutomatically(bool value);
    protected VideoMode get_CachedVideoMode();
    protected void set_CachedVideoMode(VideoMode value);
    [NullableContextAttribute("1")]
public virtual void Run(Action onFrame);
    public sealed virtual void DoRender();
    public sealed virtual void DoUpdate();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsInitialized();
    [CompilerGeneratedAttribute]
protected void set_IsInitialized(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual INativeWindow get_Native();
    [CompilerGeneratedAttribute]
private void set_Native(INativeWindow value);
    [NullableContextAttribute("0")]
public sealed virtual Vector2D`1<int> get_Size();
    public sealed virtual IntPtr get_Handle();
    public sealed virtual bool get_IsClosing();
    public sealed virtual GraphicsAPI get_API();
    public sealed virtual double get_Time();
    public sealed virtual Nullable`1<int> get_PreferredDepthBufferBits();
    public sealed virtual Nullable`1<int> get_PreferredStencilBufferBits();
    [NullableContextAttribute("0")]
public sealed virtual Nullable`1<Vector4D`1<int>> get_PreferredBitDepth();
    public sealed virtual Nullable`1<int> get_Samples();
    public sealed virtual bool get_VSync();
    public sealed virtual void set_VSync(bool value);
    public sealed virtual IGLContext get_GLContext();
    public sealed virtual IVkSurface get_VkSurface();
    private sealed virtual override void Silk.NET.Windowing.IView.DoEvents();
    [NullableContextAttribute("0")]
public sealed virtual Vector2D`1<int> PointToFramebuffer(Vector2D`1<int> point);
    public virtual void Dispose();
    [NullableContextAttribute("1")]
public sealed virtual object Invoke(Delegate d, Object[] args);
    public void DoInvokes();
    private void EnsureArrayIsReady(int rentalIndex);
    [CompilerGeneratedAttribute]
internal static void <get_GLContext>g__Throw|114_0();
    [CompilerGeneratedAttribute]
internal static void <get_VkSurface>g__Throw|116_0();
}
internal abstract class Silk.NET.Windowing.Internals.WindowImplementationBase : ViewImplementationBase {
    protected WindowOptions ExtendedOptionsCache;
    protected bool CoreIsVisible { get; protected set; }
    protected Vector2D`1<int> CorePosition { get; protected set; }
    [NullableAttribute("1")]
protected string CoreTitle { get; protected set; }
    protected WindowState CoreWindowState { get; protected set; }
    protected WindowBorder CoreWindowBorder { get; protected set; }
    protected bool CoreTopMost { get; protected set; }
    unknown bool IsClosingSettable {protected set; }
    unknown Vector2D`1<int> SizeSettable {protected set; }
    protected Rectangle`1<int> CoreBorderSize { get; }
    [NullableAttribute("2")]
public IWindowHost Parent { get; }
    [NullableAttribute("2")]
public IGLContext SharedContext { get; }
    [NullableAttribute("2")]
public IMonitor Monitor { get; public set; }
    [NullableAttribute("2")]
public string WindowClass { get; }
    private Vector2D`1<int> Silk.NET.Windowing.IWindowProperties.Size { get; private set; }
    private bool Silk.NET.Windowing.IWindow.IsClosing { get; private set; }
    public bool IsVisible { get; public set; }
    public Vector2D`1<int> Position { get; public set; }
    [NullableAttribute("1")]
public string Title { get; public set; }
    public WindowState WindowState { get; public set; }
    public WindowBorder WindowBorder { get; public set; }
    public bool TransparentFramebuffer { get; }
    public bool TopMost { get; public set; }
    public Rectangle`1<int> BorderSize { get; }
    protected WindowImplementationBase(WindowOptions optionsCache);
    protected abstract virtual bool get_CoreIsVisible();
    protected abstract virtual void set_CoreIsVisible(bool value);
    protected abstract virtual Vector2D`1<int> get_CorePosition();
    protected abstract virtual void set_CorePosition(Vector2D`1<int> value);
    [NullableContextAttribute("1")]
protected abstract virtual string get_CoreTitle();
    [NullableContextAttribute("1")]
protected abstract virtual void set_CoreTitle(string value);
    protected abstract virtual WindowState get_CoreWindowState();
    protected abstract virtual void set_CoreWindowState(WindowState value);
    protected abstract virtual WindowBorder get_CoreWindowBorder();
    protected abstract virtual void set_CoreWindowBorder(WindowBorder value);
    protected abstract virtual bool get_CoreTopMost();
    protected abstract virtual void set_CoreTopMost(bool value);
    protected abstract virtual void set_IsClosingSettable(bool value);
    protected abstract virtual void set_SizeSettable(Vector2D`1<int> value);
    protected abstract virtual Rectangle`1<int> get_CoreBorderSize();
    protected abstract virtual void CoreInitialize(WindowOptions opts);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Move(Action`1<Vector2D`1<int>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Move(Action`1<Vector2D`1<int>> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public abstract virtual void add_StateChanged(Action`1<WindowState> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public abstract virtual void remove_StateChanged(Action`1<WindowState> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_FileDrop(Action`1<String[]> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_FileDrop(Action`1<String[]> value);
    [NullableContextAttribute("1")]
public abstract virtual IWindow CreateWindow(WindowOptions opts);
    [NullableContextAttribute("2")]
public abstract virtual IWindowHost get_Parent();
    [NullableContextAttribute("2")]
public abstract virtual IGLContext get_SharedContext();
    [NullableContextAttribute("2")]
public abstract virtual IMonitor get_Monitor();
    [NullableContextAttribute("2")]
public abstract virtual void set_Monitor(IMonitor value);
    [NullableContextAttribute("2")]
public abstract virtual string get_WindowClass();
    public abstract virtual void SetWindowIcon(ReadOnlySpan`1<RawImage> icons);
    protected void UpdatePosition(Vector2D`1<int> point);
    protected void UpdateSize(Vector2D`1<int> size);
    protected void UpdateState(WindowState state);
    protected virtual void CoreInitialize(ViewOptions opts);
    public virtual Vector2D`1<int> PointToClient(Vector2D`1<int> point);
    public virtual Vector2D`1<int> PointToScreen(Vector2D`1<int> point);
    private sealed virtual override Vector2D`1<int> Silk.NET.Windowing.IWindowProperties.get_Size();
    private sealed virtual override void Silk.NET.Windowing.IWindowProperties.set_Size(Vector2D`1<int> value);
    private sealed virtual override bool Silk.NET.Windowing.IWindow.get_IsClosing();
    private sealed virtual override void Silk.NET.Windowing.IWindow.set_IsClosing(bool value);
    public sealed virtual bool get_IsVisible();
    public sealed virtual void set_IsVisible(bool value);
    public sealed virtual Vector2D`1<int> get_Position();
    public sealed virtual void set_Position(Vector2D`1<int> value);
    [NullableContextAttribute("1")]
public sealed virtual string get_Title();
    [NullableContextAttribute("1")]
public sealed virtual void set_Title(string value);
    public sealed virtual WindowState get_WindowState();
    public sealed virtual void set_WindowState(WindowState value);
    public sealed virtual WindowBorder get_WindowBorder();
    public sealed virtual void set_WindowBorder(WindowBorder value);
    public sealed virtual bool get_TransparentFramebuffer();
    public sealed virtual bool get_TopMost();
    public sealed virtual void set_TopMost(bool value);
    public sealed virtual Rectangle`1<int> get_BorderSize();
}
[NullableContextAttribute("2")]
public interface Silk.NET.Windowing.IView {
    [NativeIntegerAttribute]
public IntPtr Handle { get; }
    public bool IsClosing { get; }
    public double Time { get; }
    [NullableAttribute("0")]
public Vector2D`1<int> FramebufferSize { get; }
    public bool IsInitialized { get; }
    public abstract virtual IntPtr get_Handle();
    public abstract virtual bool get_IsClosing();
    public abstract virtual double get_Time();
    [NullableContextAttribute("0")]
public abstract virtual Vector2D`1<int> get_FramebufferSize();
    public abstract virtual bool get_IsInitialized();
    [CompilerGeneratedAttribute]
public abstract virtual void add_Resize(Action`1<Vector2D`1<int>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Resize(Action`1<Vector2D`1<int>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_FramebufferResize(Action`1<Vector2D`1<int>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_FramebufferResize(Action`1<Vector2D`1<int>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Closing(Action value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Closing(Action value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_FocusChanged(Action`1<bool> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_FocusChanged(Action`1<bool> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Load(Action value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Load(Action value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Update(Action`1<double> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Update(Action`1<double> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Render(Action`1<double> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Render(Action`1<double> value);
    public abstract virtual void Initialize();
    public abstract virtual void DoRender();
    public abstract virtual void DoUpdate();
    public abstract virtual void DoEvents();
    public abstract virtual void ContinueEvents();
    public abstract virtual void Reset();
    public abstract virtual void Close();
    [NullableContextAttribute("0")]
public abstract virtual Vector2D`1<int> PointToClient(Vector2D`1<int> point);
    [NullableContextAttribute("0")]
public abstract virtual Vector2D`1<int> PointToScreen(Vector2D`1<int> point);
    [NullableContextAttribute("0")]
public abstract virtual Vector2D`1<int> PointToFramebuffer(Vector2D`1<int> point);
    [NullableContextAttribute("1")]
public abstract virtual object Invoke(Delegate d, Object[] args);
    [NullableContextAttribute("1")]
public abstract virtual void Run(Action onFrame);
}
public interface Silk.NET.Windowing.IViewProperties {
    public bool ShouldSwapAutomatically { get; public set; }
    public bool IsEventDriven { get; public set; }
    public bool IsContextControlDisabled { get; public set; }
    public Vector2D`1<int> Size { get; }
    public double FramesPerSecond { get; public set; }
    public double UpdatesPerSecond { get; public set; }
    public GraphicsAPI API { get; }
    public bool VSync { get; public set; }
    public VideoMode VideoMode { get; }
    public Nullable`1<int> PreferredDepthBufferBits { get; }
    public Nullable`1<int> PreferredStencilBufferBits { get; }
    public Nullable`1<Vector4D`1<int>> PreferredBitDepth { get; }
    public Nullable`1<int> Samples { get; }
    public abstract virtual bool get_ShouldSwapAutomatically();
    public abstract virtual void set_ShouldSwapAutomatically(bool value);
    public abstract virtual bool get_IsEventDriven();
    public abstract virtual void set_IsEventDriven(bool value);
    public abstract virtual bool get_IsContextControlDisabled();
    public abstract virtual void set_IsContextControlDisabled(bool value);
    public abstract virtual Vector2D`1<int> get_Size();
    public abstract virtual double get_FramesPerSecond();
    public abstract virtual void set_FramesPerSecond(double value);
    public abstract virtual double get_UpdatesPerSecond();
    public abstract virtual void set_UpdatesPerSecond(double value);
    public abstract virtual GraphicsAPI get_API();
    public abstract virtual bool get_VSync();
    public abstract virtual void set_VSync(bool value);
    public abstract virtual VideoMode get_VideoMode();
    public abstract virtual Nullable`1<int> get_PreferredDepthBufferBits();
    public abstract virtual Nullable`1<int> get_PreferredStencilBufferBits();
    public abstract virtual Nullable`1<Vector4D`1<int>> get_PreferredBitDepth();
    public abstract virtual Nullable`1<int> get_Samples();
}
public interface Silk.NET.Windowing.IWindow {
    [NullableAttribute("2")]
public IWindowHost Parent { get; }
    [NullableAttribute("2")]
public IMonitor Monitor { get; public set; }
    public bool IsClosing { get; public set; }
    public Rectangle`1<int> BorderSize { get; }
    [NullableContextAttribute("2")]
public abstract virtual IWindowHost get_Parent();
    [NullableContextAttribute("2")]
public abstract virtual IMonitor get_Monitor();
    [NullableContextAttribute("2")]
public abstract virtual void set_Monitor(IMonitor value);
    public abstract virtual bool get_IsClosing();
    public abstract virtual void set_IsClosing(bool value);
    public abstract virtual Rectangle`1<int> get_BorderSize();
    [CompilerGeneratedAttribute]
public abstract virtual void add_Move(Action`1<Vector2D`1<int>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Move(Action`1<Vector2D`1<int>> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public abstract virtual void add_StateChanged(Action`1<WindowState> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public abstract virtual void remove_StateChanged(Action`1<WindowState> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_FileDrop(Action`1<String[]> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_FileDrop(Action`1<String[]> value);
    public abstract virtual void SetWindowIcon(ReadOnlySpan`1<RawImage> icons);
}
[NullableContextAttribute("1")]
public interface Silk.NET.Windowing.IWindowHost {
    public abstract virtual IWindow CreateWindow(WindowOptions opts);
}
[NullableContextAttribute("1")]
public interface Silk.NET.Windowing.IWindowPlatform {
    public string Name { get; }
    public bool IsViewOnly { get; }
    public bool IsApplicable { get; }
    public virtual string get_Name();
    public abstract virtual bool get_IsViewOnly();
    public abstract virtual bool get_IsApplicable();
    public abstract virtual IView GetView(Nullable`1<ViewOptions> opts);
    public abstract virtual void ClearContexts();
    public abstract virtual IEnumerable`1<IMonitor> GetMonitors();
    public abstract virtual IMonitor GetMainMonitor();
    public abstract virtual bool IsSourceOfView(IView view);
}
public interface Silk.NET.Windowing.IWindowProperties {
    public bool IsVisible { get; public set; }
    public Vector2D`1<int> Position { get; public set; }
    public Vector2D`1<int> Size { get; public set; }
    [NullableAttribute("1")]
public string Title { get; public set; }
    public WindowState WindowState { get; public set; }
    public WindowBorder WindowBorder { get; public set; }
    public bool TransparentFramebuffer { get; }
    public bool TopMost { get; public set; }
    [NullableAttribute("2")]
public IGLContext SharedContext { get; }
    [NullableAttribute("2")]
public string WindowClass { get; }
    public abstract virtual bool get_IsVisible();
    public abstract virtual void set_IsVisible(bool value);
    public abstract virtual Vector2D`1<int> get_Position();
    public abstract virtual void set_Position(Vector2D`1<int> value);
    public abstract virtual Vector2D`1<int> get_Size();
    public abstract virtual void set_Size(Vector2D`1<int> value);
    [NullableContextAttribute("1")]
public abstract virtual string get_Title();
    [NullableContextAttribute("1")]
public abstract virtual void set_Title(string value);
    public abstract virtual WindowState get_WindowState();
    public abstract virtual void set_WindowState(WindowState value);
    public abstract virtual WindowBorder get_WindowBorder();
    public abstract virtual void set_WindowBorder(WindowBorder value);
    public abstract virtual bool get_TransparentFramebuffer();
    public abstract virtual bool get_TopMost();
    public abstract virtual void set_TopMost(bool value);
    [NullableContextAttribute("2")]
public abstract virtual IGLContext get_SharedContext();
    [NullableContextAttribute("2")]
public abstract virtual string get_WindowClass();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Silk.NET.Windowing.Monitor : object {
    public static IEnumerable`1<IMonitor> GetMonitors(IView view);
    public static IMonitor GetMainMonitor(IView view);
}
public class Silk.NET.Windowing.VideoMode : ValueType {
    [CompilerGeneratedAttribute]
private Nullable`1<Vector2D`1<int>> <Resolution>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <RefreshRate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Vector2D`1<int>> <AspectRatioEstimate>k__BackingField;
    public Nullable`1<Vector2D`1<int>> Resolution { get; }
    public Nullable`1<int> RefreshRate { get; }
    public Nullable`1<Vector2D`1<int>> AspectRatioEstimate { get; }
    public static VideoMode Default { get; }
    public VideoMode(Nullable`1<Vector2D`1<int>> resolution, Nullable`1<int> refreshRate);
    public VideoMode(int refreshRate);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Nullable`1<Vector2D`1<int>> get_Resolution();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Nullable`1<int> get_RefreshRate();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Nullable`1<Vector2D`1<int>> get_AspectRatioEstimate();
    public static VideoMode get_Default();
    private static Vector2D`1<int> CalculateAspectRatio(Vector2D`1<int> res);
}
public class Silk.NET.Windowing.ViewOptions : ValueType {
    [CompilerGeneratedAttribute]
private bool <ShouldSwapAutomatically>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEventDriven>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsContextControlDisabled>k__BackingField;
    [CompilerGeneratedAttribute]
private double <FramesPerSecond>k__BackingField;
    [CompilerGeneratedAttribute]
private double <UpdatesPerSecond>k__BackingField;
    [CompilerGeneratedAttribute]
private GraphicsAPI <API>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <VSync>k__BackingField;
    [CompilerGeneratedAttribute]
private VideoMode <VideoMode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <PreferredDepthBufferBits>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <PreferredStencilBufferBits>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Vector4D`1<int>> <PreferredBitDepth>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Samples>k__BackingField;
    [CompilerGeneratedAttribute]
private static ViewOptions <Default>k__BackingField;
    [CompilerGeneratedAttribute]
private static ViewOptions <DefaultVulkan>k__BackingField;
    public bool ShouldSwapAutomatically { get; public set; }
    public bool IsEventDriven { get; public set; }
    public bool IsContextControlDisabled { get; public set; }
    private Vector2D`1<int> Silk.NET.Windowing.IViewProperties.Size { get; }
    public double FramesPerSecond { get; public set; }
    public double UpdatesPerSecond { get; public set; }
    public GraphicsAPI API { get; public set; }
    public bool VSync { get; public set; }
    public VideoMode VideoMode { get; public set; }
    public Nullable`1<int> PreferredDepthBufferBits { get; public set; }
    public Nullable`1<int> PreferredStencilBufferBits { get; public set; }
    public Nullable`1<Vector4D`1<int>> PreferredBitDepth { get; public set; }
    public Nullable`1<int> Samples { get; public set; }
    public static ViewOptions Default { get; }
    public static ViewOptions DefaultVulkan { get; }
    public ViewOptions(double framesPerSecond, double updatesPerSecond, GraphicsAPI api, bool isVSync, bool shouldSwapAutomatically, VideoMode videoMode, Nullable`1<int> preferredDepthBufferBits, Nullable`1<int> preferredStencilBufferBits, Nullable`1<Vector4D`1<int>> preferredBitDepth, bool isEventDriven, Nullable`1<int> samples, bool isContextControlDisabled);
    public ViewOptions(WindowOptions opts);
    private static ViewOptions();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool get_ShouldSwapAutomatically();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ShouldSwapAutomatically(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool get_IsEventDriven();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsEventDriven(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool get_IsContextControlDisabled();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsContextControlDisabled(bool value);
    private sealed virtual override Vector2D`1<int> Silk.NET.Windowing.IViewProperties.get_Size();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual double get_FramesPerSecond();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FramesPerSecond(double value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual double get_UpdatesPerSecond();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UpdatesPerSecond(double value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual GraphicsAPI get_API();
    [CompilerGeneratedAttribute]
public void set_API(GraphicsAPI value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool get_VSync();
    [CompilerGeneratedAttribute]
public sealed virtual void set_VSync(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual VideoMode get_VideoMode();
    [CompilerGeneratedAttribute]
public void set_VideoMode(VideoMode value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_PreferredDepthBufferBits();
    [CompilerGeneratedAttribute]
public void set_PreferredDepthBufferBits(Nullable`1<int> value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_PreferredStencilBufferBits();
    [CompilerGeneratedAttribute]
public void set_PreferredStencilBufferBits(Nullable`1<int> value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual Nullable`1<Vector4D`1<int>> get_PreferredBitDepth();
    [CompilerGeneratedAttribute]
public void set_PreferredBitDepth(Nullable`1<Vector4D`1<int>> value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_Samples();
    [CompilerGeneratedAttribute]
public void set_Samples(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public static ViewOptions get_Default();
    [CompilerGeneratedAttribute]
public static ViewOptions get_DefaultVulkan();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Silk.NET.Windowing.Window : object {
    private static string GlfwBackendNamespace;
    private static string SdlBackendNamespace;
    private static string GlfwBackendName;
    private static string SdlBackendName;
    private static string FallbackWindowClass;
    private static List`1<Type> _platformsKeys;
    private static List`1<IWindowPlatform> _platformsValues;
    private static bool _initializedFirstPartyPlatforms;
    [CompilerGeneratedAttribute]
private static string <DefaultWindowClass>k__BackingField;
    public static string DefaultWindowClass { get; }
    private static string PlatformsStr { get; }
    public static IReadOnlyCollection`1<IWindowPlatform> Platforms { get; }
    internal static Exception NoPlatformException { get; }
    public static bool IsViewOnly { get; }
    private static Window();
    [CompilerGeneratedAttribute]
public static string get_DefaultWindowClass();
    private static string get_PlatformsStr();
    private static string GetName(IWindowPlatform x);
    public static IReadOnlyCollection`1<IWindowPlatform> get_Platforms();
    public static void ShouldLoadFirstPartyPlatforms(bool shouldLoad);
    private static void DoLoadFirstPartyPlatformsViaReflection();
    internal static Exception get_NoPlatformException();
    [NullableContextAttribute("2")]
public static IWindowPlatform GetWindowPlatform(bool viewOnly);
    public static bool get_IsViewOnly();
    public static IWindow Create(WindowOptions options);
    public static IView GetView(Nullable`1<ViewOptions> options);
    public static void ClearCurrentContexts(IView view);
    public static void Prioritize(IWindowPlatform platform);
    public static void PrioritizeGlfw();
    public static void PrioritizeSdl();
    public static void Add(IWindowPlatform platform);
    public static void Remove(IWindowPlatform platform);
    public static bool TryAdd(string assemblyName);
    public static T GetOrDefault();
}
public enum Silk.NET.Windowing.WindowBorder : Enum {
    public int value__;
    public static WindowBorder Resizable;
    public static WindowBorder Fixed;
    public static WindowBorder Hidden;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Silk.NET.Windowing.WindowExtensions : object {
    [ExtensionAttribute]
public static T Invoke(IView view, Func`1<T> t);
    [ExtensionAttribute]
public static void Invoke(IView view, Action t);
    [ExtensionAttribute]
public static void Run(IView view);
    [ExtensionAttribute]
public static void SwapBuffers(IView view);
    [ExtensionAttribute]
public static void MakeCurrent(IView view);
    [ExtensionAttribute]
public static void ClearContext(IView view);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static Vector2D`1<int> GetFullSize(IWindow window);
    [ExtensionAttribute]
public static void Center(IWindow window, IMonitor monitor);
    [ExtensionAttribute]
public static void SetDefaultIcon(IWindow window);
    [ExtensionAttribute]
public static void SetWindowIcon(IWindow window, RawImage& icon);
}
public class Silk.NET.Windowing.WindowOptions : ValueType {
    [CompilerGeneratedAttribute]
private bool <IsVisible>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldSwapAutomatically>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEventDriven>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsContextControlDisabled>k__BackingField;
    [CompilerGeneratedAttribute]
private VideoMode <VideoMode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <PreferredDepthBufferBits>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <PreferredStencilBufferBits>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Vector4D`1<int>> <PreferredBitDepth>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Samples>k__BackingField;
    [CompilerGeneratedAttribute]
private Vector2D`1<int> <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private Vector2D`1<int> <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private double <FramesPerSecond>k__BackingField;
    [CompilerGeneratedAttribute]
private double <UpdatesPerSecond>k__BackingField;
    [CompilerGeneratedAttribute]
private GraphicsAPI <API>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <VSync>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private WindowState <WindowState>k__BackingField;
    [CompilerGeneratedAttribute]
private WindowBorder <WindowBorder>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TransparentFramebuffer>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TopMost>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IGLContext <SharedContext>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <WindowClass>k__BackingField;
    [CompilerGeneratedAttribute]
private static WindowOptions <Default>k__BackingField;
    [CompilerGeneratedAttribute]
private static WindowOptions <DefaultVulkan>k__BackingField;
    public bool IsVisible { get; public set; }
    public bool ShouldSwapAutomatically { get; public set; }
    public bool IsEventDriven { get; public set; }
    public bool IsContextControlDisabled { get; public set; }
    public VideoMode VideoMode { get; public set; }
    public Nullable`1<int> PreferredDepthBufferBits { get; public set; }
    public Nullable`1<int> PreferredStencilBufferBits { get; public set; }
    public Nullable`1<Vector4D`1<int>> PreferredBitDepth { get; public set; }
    public Nullable`1<int> Samples { get; public set; }
    public Vector2D`1<int> Position { get; public set; }
    public Vector2D`1<int> Size { get; public set; }
    public double FramesPerSecond { get; public set; }
    public double UpdatesPerSecond { get; public set; }
    public GraphicsAPI API { get; public set; }
    public bool VSync { get; public set; }
    [NullableAttribute("1")]
public string Title { get; public set; }
    public WindowState WindowState { get; public set; }
    public WindowBorder WindowBorder { get; public set; }
    public bool TransparentFramebuffer { get; public set; }
    public bool TopMost { get; public set; }
    [NullableAttribute("2")]
public IGLContext SharedContext { get; public set; }
    [NullableAttribute("2")]
public string WindowClass { get; public set; }
    public static WindowOptions Default { get; }
    public static WindowOptions DefaultVulkan { get; }
    public WindowOptions(ViewOptions opts);
    public WindowOptions(bool isVisible, Vector2D`1<int> position, Vector2D`1<int> size, double framesPerSecond, double updatesPerSecond, GraphicsAPI api, string title, WindowState windowState, WindowBorder windowBorder, bool isVSync, bool shouldSwapAutomatically, VideoMode videoMode, Nullable`1<int> preferredDepthBufferBits, Nullable`1<int> preferredStencilBufferBits, Nullable`1<Vector4D`1<int>> preferredBitDepth, bool transparentFramebuffer, bool topMost, bool isEventDriven, IGLContext sharedContext, Nullable`1<int> samples, string windowClass, bool isContextControlDisabled);
    private static WindowOptions();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool get_IsVisible();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsVisible(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool get_ShouldSwapAutomatically();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ShouldSwapAutomatically(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool get_IsEventDriven();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsEventDriven(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool get_IsContextControlDisabled();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsContextControlDisabled(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual VideoMode get_VideoMode();
    [CompilerGeneratedAttribute]
public void set_VideoMode(VideoMode value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_PreferredDepthBufferBits();
    [CompilerGeneratedAttribute]
public void set_PreferredDepthBufferBits(Nullable`1<int> value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_PreferredStencilBufferBits();
    [CompilerGeneratedAttribute]
public void set_PreferredStencilBufferBits(Nullable`1<int> value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual Nullable`1<Vector4D`1<int>> get_PreferredBitDepth();
    [CompilerGeneratedAttribute]
public void set_PreferredBitDepth(Nullable`1<Vector4D`1<int>> value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_Samples();
    [CompilerGeneratedAttribute]
public void set_Samples(Nullable`1<int> value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual Vector2D`1<int> get_Position();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Position(Vector2D`1<int> value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual Vector2D`1<int> get_Size();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Size(Vector2D`1<int> value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual double get_FramesPerSecond();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FramesPerSecond(double value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual double get_UpdatesPerSecond();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UpdatesPerSecond(double value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual GraphicsAPI get_API();
    [CompilerGeneratedAttribute]
public void set_API(GraphicsAPI value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool get_VSync();
    [CompilerGeneratedAttribute]
public sealed virtual void set_VSync(bool value);
    [IsReadOnlyAttribute]
[NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual string get_Title();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual void set_Title(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual WindowState get_WindowState();
    [CompilerGeneratedAttribute]
public sealed virtual void set_WindowState(WindowState value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual WindowBorder get_WindowBorder();
    [CompilerGeneratedAttribute]
public sealed virtual void set_WindowBorder(WindowBorder value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool get_TransparentFramebuffer();
    [CompilerGeneratedAttribute]
public void set_TransparentFramebuffer(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool get_TopMost();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TopMost(bool value);
    [IsReadOnlyAttribute]
[NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual IGLContext get_SharedContext();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_SharedContext(IGLContext value);
    [IsReadOnlyAttribute]
[NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_WindowClass();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_WindowClass(string value);
    [CompilerGeneratedAttribute]
public static WindowOptions get_Default();
    [CompilerGeneratedAttribute]
public static WindowOptions get_DefaultVulkan();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1")]
[EditorBrowsableAttribute("1")]
public class Silk.NET.Windowing.WindowPlatformAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    public Type Type { get; }
    public WindowPlatformAttribute(Type type);
    [CompilerGeneratedAttribute]
public Type get_Type();
}
public enum Silk.NET.Windowing.WindowState : Enum {
    public int value__;
    public static WindowState Normal;
    public static WindowState Minimized;
    public static WindowState Maximized;
    public static WindowState Fullscreen;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NativeIntegerAttribute : Attribute {
    public Boolean[] TransformFlags;
    public NativeIntegerAttribute(Boolean[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
