public class Kusto.Cloud.Platform.Msal.AadAppCertificateTokenCredentialsProviderWithAutoRefresh : AppCertificateTokenCredentialProviderWithAutoRefreshBase {
    private string m_applicationClientId;
    private string m_authorityBaseUrl;
    private string m_defaultTenantId;
    private bool m_sendX5C;
    private string m_regionName;
    public AadAppCertificateTokenCredentialsProviderWithAutoRefresh(string name, string applicationClientId, string subjectName, string authorityBaseUrl, string defaultTenantId, bool sendX5C, string regionName, Nullable`1<TimeSpan> refreshInterval);
    protected virtual IKustoTokenCredentialsProvider CreateTokenCredentialProvider(X509Certificate2 certificate);
}
public class Kusto.Cloud.Platform.Msal.AadApplicationCertificateCredentialsProvider : ConfidentialClientApplicationCredentialsProviderBase {
    protected bool m_sendX5C;
    public AadApplicationCertificateCredentialsProvider(string name, string applicationClientId, X509Certificate2 certificate, string authorityBaseUrl, string defaultTenantId, bool sendX5C, string regionName, Nullable`1<TimeSpan> maxTokenValidity);
    public AadApplicationCertificateCredentialsProvider(string name, string applicationClientId, X509Certificate2 certificate, string authorityUrl, bool sendX5C, string regionName);
    protected AadApplicationCertificateCredentialsProvider(string name, bool sendX5C, Nullable`1<TimeSpan> maxTokenValidity);
    protected virtual AcquireTokenForClientParameterBuilder BuildAcquireTokenForClient(String[] scopes);
}
public class Kusto.Cloud.Platform.Msal.AadApplicationKeyCredentialsProvider : ConfidentialClientApplicationCredentialsProviderBase {
    public AadApplicationKeyCredentialsProvider(string name, string applicationClientId, string applicationKey, string authorityBaseUrl, string defaultTenantId);
    protected virtual AcquireTokenForClientParameterBuilder BuildAcquireTokenForClient(String[] scopes);
}
public class Kusto.Cloud.Platform.Msal.AadAzureCoreTokenCredentialProvider : object {
    private static TimeSpan s_minimalTokenLifetime;
    private SemaphoreSlim m_cacheLock;
    private ConcurrentDictionary`2<string, KustoTokenCredentials> m_tokenCache;
    private TokenCredential m_azureCoreTokenCredential;
    private string m_ensureScehmaError;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public static TimeSpan MinimalTokenLifetime { get; }
    public string Name { get; private set; }
    public AadAzureCoreTokenCredentialProvider(TokenCredential tokenCredential, string nameForTraces);
    private static AadAzureCoreTokenCredentialProvider();
    public static TimeSpan get_MinimalTokenLifetime();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [AsyncStateMachineAttribute("Kusto.Cloud.Platform.Msal.AadAzureCoreTokenCredentialProvider/<GetCredentialsAsync>d__12")]
public sealed virtual Task`1<KustoTokenCredentials> GetCredentialsAsync(string targetResource);
    public sealed virtual Task`1<KustoTokenCredentials> GetCredentialsAsync(string targetResource, string tenantId);
    public sealed virtual Task`1<KustoTokenCredentials> TryGetCredentialsAsync(string targetResource, string tokenScheme);
    public sealed virtual Task`1<KustoTokenCredentials> GetCredentialsAsync(string targetResource, int retries, string tenantId);
    public sealed virtual string ToTraceString();
}
public class Kusto.Cloud.Platform.Msal.AadDeviceCodeTokenCredentialProvider : AadInteractiveTokenCredentialProviderBase {
    private DeviceCodeCallback m_callback;
    public AadDeviceCodeTokenCredentialProvider(string nameForTraces, DeviceCodeCallback callback, string authorityBaseUrl, string tenant, string applicationClientId, string clientRedirectUri);
    [AsyncStateMachineAttribute("Kusto.Cloud.Platform.Msal.AadDeviceCodeTokenCredentialProvider/<TryAcquireTokenInteractive>d__3")]
protected virtual Task`1<AuthenticationResult> TryAcquireTokenInteractive(String[] scopes);
    [AsyncStateMachineAttribute("Kusto.Cloud.Platform.Msal.AadDeviceCodeTokenCredentialProvider/<TryAcquireTokenSilent>d__4")]
protected virtual Task`1<AuthenticationResult> TryAcquireTokenSilent(String[] scopes);
    [AsyncStateMachineAttribute("Kusto.Cloud.Platform.Msal.AadDeviceCodeTokenCredentialProvider/<CallBackWrapper>d__5")]
private Task CallBackWrapper(DeviceCodeResult deviceCodeResult);
}
public abstract class Kusto.Cloud.Platform.Msal.AadInteractiveTokenCredentialProviderBase : object {
    public static string KustoClientRedirectUri;
    protected static string c_publicCloudAuthorityBaseUrl;
    protected static string c_organizationsTenantString;
    protected static string c_kustoClientAadApplicationIdInPublicCloud;
    protected IAccount m_currentAccount;
    protected IPublicClientApplication m_publicClientApplication;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; protected set; }
    public AadInteractiveTokenCredentialProviderBase(string nameForTraces, string authorityBaseUrl, string tenant, string applicationClientId, string clientRedirectUri);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(string value);
    [AsyncStateMachineAttribute("Kusto.Cloud.Platform.Msal.AadInteractiveTokenCredentialProviderBase/<TryGetCredentialsAsync>d__11")]
public sealed virtual Task`1<KustoTokenCredentials> TryGetCredentialsAsync(string targetResource, string tokenScheme);
    public sealed virtual string ToTraceString();
    [AsyncStateMachineAttribute("Kusto.Cloud.Platform.Msal.AadInteractiveTokenCredentialProviderBase/<GetCredentialsAsync>d__13")]
public sealed virtual Task`1<KustoTokenCredentials> GetCredentialsAsync(string targetResource);
    public sealed virtual Task`1<KustoTokenCredentials> GetCredentialsAsync(string targetResource, string tenantId);
    public sealed virtual Task`1<KustoTokenCredentials> GetCredentialsAsync(string targetResource, int retries, string tenantId);
    protected abstract virtual Task`1<AuthenticationResult> TryAcquireTokenInteractive(String[] scopes);
    protected abstract virtual Task`1<AuthenticationResult> TryAcquireTokenSilent(String[] scopes);
}
public class Kusto.Cloud.Platform.Msal.AadManagedIdentityTokenCredentialsProvider : AadAzureCoreTokenCredentialProvider {
    public static string SystemAssignedManagedIdentityKeyword { get; }
    public AadManagedIdentityTokenCredentialsProvider(string nameForTraces);
    public AadManagedIdentityTokenCredentialsProvider(string miClientId, string nameForTraces);
    public static string get_SystemAssignedManagedIdentityKeyword();
    public static AadManagedIdentityTokenCredentialsProvider CreateProviderFromString(string mi);
}
public class Kusto.Cloud.Platform.Msal.AadUserPromptCredentialsProvider : AadInteractiveTokenCredentialProviderBase {
    private string m_loginHint;
    public AadUserPromptCredentialsProvider(string nameForTraces);
    public AadUserPromptCredentialsProvider(string nameForTraces, string authorityBaseUrl);
    public AadUserPromptCredentialsProvider(string nameForTraces, string authorityBaseUrl, string tenant, string loginHint);
    public AadUserPromptCredentialsProvider(string nameForTraces, string authorityBaseUrl, string applicationClientId, string clientRedirectUri, string loginHint);
    public AadUserPromptCredentialsProvider(string nameForTraces, string authorityBaseUrl, string tenant, string applicationClientId, string clientRedirectUri, string loginHint);
    [AsyncStateMachineAttribute("Kusto.Cloud.Platform.Msal.AadUserPromptCredentialsProvider/<TryAcquireTokenInteractive>d__6")]
protected virtual Task`1<AuthenticationResult> TryAcquireTokenInteractive(String[] scopes);
    [AsyncStateMachineAttribute("Kusto.Cloud.Platform.Msal.AadUserPromptCredentialsProvider/<TryAcquireTokenSilent>d__7")]
protected virtual Task`1<AuthenticationResult> TryAcquireTokenSilent(String[] scopes);
}
public abstract class Kusto.Cloud.Platform.Msal.ConfidentialClientApplicationCredentialsProviderBase : object {
    protected IConfidentialClientApplication m_confidentialClientApplication;
    protected Nullable`1<TimeSpan> m_maxTokenValidity;
    private static string c_tokenScheme;
    private static TimeSpan s_throttleDelay;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; protected set; }
    private static ConfidentialClientApplicationCredentialsProviderBase();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(string value);
    public sealed virtual Task`1<KustoTokenCredentials> GetCredentialsAsync(string targetResource);
    public sealed virtual Task`1<KustoTokenCredentials> GetCredentialsAsync(string targetResource, string tenantId);
    public sealed virtual string ToTraceString();
    public sealed virtual Task`1<KustoTokenCredentials> TryGetCredentialsAsync(string targetResource, string tokenScheme);
    [AsyncStateMachineAttribute("Kusto.Cloud.Platform.Msal.ConfidentialClientApplicationCredentialsProviderBase/<GetCredentialsAsync>d__12")]
public sealed virtual Task`1<KustoTokenCredentials> GetCredentialsAsync(string targetResource, int retries, string tenantId);
    private static DateTime DetermineExpiration(DateTime tokenExpiration, Nullable`1<TimeSpan> maxTokenValidity);
    protected abstract virtual AcquireTokenForClientParameterBuilder BuildAcquireTokenForClient(String[] scopes);
    [AsyncStateMachineAttribute("Kusto.Cloud.Platform.Msal.ConfidentialClientApplicationCredentialsProviderBase/<GetCredentialsImplAsync>d__15")]
private Task`1<KustoTokenCredentials> GetCredentialsImplAsync(string targetResource, string tenantId);
}
public class Kusto.Cloud.Platform.Msal.CredentialsProviderAsAzureCoreTokenCredential : TokenCredential {
    private IKustoTokenCredentialsProvider m_credentialsProvider;
    public CredentialsProviderAsAzureCoreTokenCredential(IKustoTokenCredentialsProvider credentialsProvider);
    public virtual AccessToken GetToken(TokenRequestContext requestContext, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Kusto.Cloud.Platform.Msal.CredentialsProviderAsAzureCoreTokenCredential/<GetTokenAsync>d__3")]
public virtual ValueTask`1<AccessToken> GetTokenAsync(TokenRequestContext requestContext, CancellationToken cancellationToken);
    private string ChangeScopeToTargetResource(string scope);
}
public class Kusto.Cloud.Platform.Msal.DstsModernCertificateCredentialProvider : ConfidentialClientApplicationCredentialsProviderBase {
    [CompilerGeneratedAttribute]
private string <m_kustoResourceId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <m_sendX5C>k__BackingField;
    private IConfidentialClientApplication m_clientAppForClientAuthority;
    private string m_serverStsAuthority;
    private string m_dstsRealm;
    private IConfidentialClientApplication m_tokenConfidentialClient;
    private string m_kustoResourceId { get; }
    private bool m_sendX5C { get; }
    public DstsModernCertificateCredentialProvider(string nameForTraces, string serverStsAuthority, string applicationClientId, X509Certificate2 certificate, string kustoResourceId, bool sendX5c, string clientStsAuthority);
    [CompilerGeneratedAttribute]
private string get_m_kustoResourceId();
    [CompilerGeneratedAttribute]
private bool get_m_sendX5C();
    protected virtual AcquireTokenForClientParameterBuilder BuildAcquireTokenForClient(String[] ignoredScopes);
    private IConfidentialClientApplication GetConfidentialClientAppWithCertificate(string authority, X509Certificate2 certificate, string applicationClientId);
    [AsyncStateMachineAttribute("Kusto.Cloud.Platform.Msal.DstsModernCertificateCredentialProvider/<GetClientAssertionAsync>d__13")]
private Task`1<string> GetClientAssertionAsync(CancellationToken cancellationToken);
}
public class Kusto.Cloud.Platform.Msal.DstsModernCertificateCredentialProviderWithAutoRefresh : object {
    private string m_authority;
    private string m_applicationClientId;
    private string m_certificateSubjectName;
    private string m_clientStsAuthority;
    private DstsModernCertificateCredentialProvider m_dstsAppCertificateTokenCredentialsProvider;
    private X509Certificate2 m_currentCertificate;
    private DateTime m_nextRefreshTime;
    private TimeSpan m_refreshInterval;
    private object m_lock;
    [CompilerGeneratedAttribute]
private string <m_kustoResourceId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <m_sendX5C>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    private string m_kustoResourceId { get; }
    private bool m_sendX5C { get; }
    public string Name { get; private set; }
    public DstsModernCertificateCredentialProviderWithAutoRefresh(string nameForTraces, string serverStsAuthority, string applicationClientId, string certificateSubjectName, string kustoResourceId, bool sendX5c, string clientStsAuthority, Nullable`1<TimeSpan> refreshInterval);
    [CompilerGeneratedAttribute]
private string get_m_kustoResourceId();
    [CompilerGeneratedAttribute]
private bool get_m_sendX5C();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    public sealed virtual Task`1<KustoTokenCredentials> GetCredentialsAsync(string targetResource);
    public sealed virtual Task`1<KustoTokenCredentials> GetCredentialsAsync(string targetResource, string tenantId);
    public sealed virtual Task`1<KustoTokenCredentials> GetCredentialsAsync(string targetResource, int retries, string tenantId);
    public sealed virtual string ToTraceString();
    public sealed virtual Task`1<KustoTokenCredentials> TryGetCredentialsAsync(string targetResource, string tokenScheme);
    private void LoadRefreshCertificate();
    private bool ShouldRefresh();
}
internal class Kusto.Cloud.Platform.Msal.DstsModernInstance : object {
    [CompilerGeneratedAttribute]
private string <Authority>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Realm>k__BackingField;
    public static string v2UriSeparator;
    public string Authority { get; }
    public string Realm { get; }
    public DstsModernInstance(string dstsAuthority);
    [CompilerGeneratedAttribute]
public string get_Authority();
    [CompilerGeneratedAttribute]
public string get_Realm();
    public static string GetPassiveDstsDns(string dstsInstance);
}
public class Kusto.Cloud.Platform.Msal.DstsModernUserPromptCredentialProvider : object {
    public IPublicClientApplication m_publicClientApplication;
    private string m_userId;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KustoResourceId>k__BackingField;
    public static string DstsJWTNativeClientApp;
    public static string DstsJWTNativeClientRedirectUrl;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static HashSet`1<ValueTuple`2<string, string>> s_appAuthorityPairsForCacheClear;
    public string Name { get; }
    public string KustoResourceId { get; }
    public DstsModernUserPromptCredentialProvider(string nameForTraces, string authority, string kustoResourceId, string userId);
    private static DstsModernUserPromptCredentialProvider();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_KustoResourceId();
    [AsyncStateMachineAttribute("Kusto.Cloud.Platform.Msal.DstsModernUserPromptCredentialProvider/<GetCredentialsAsync>d__12")]
public sealed virtual Task`1<KustoTokenCredentials> GetCredentialsAsync(string targetResource);
    public sealed virtual Task`1<KustoTokenCredentials> GetCredentialsAsync(string targetResource, string tenantId);
    public sealed virtual Task`1<KustoTokenCredentials> GetCredentialsAsync(string targetResource, int retries, string tenantId);
    public sealed virtual string ToTraceString();
    public sealed virtual Task`1<KustoTokenCredentials> TryGetCredentialsAsync(string targetResource, string tokenScheme);
    [AsyncStateMachineAttribute("Kusto.Cloud.Platform.Msal.DstsModernUserPromptCredentialProvider/<PurgeTokenCache>d__17")]
public static Task PurgeTokenCache();
    [CompilerGeneratedAttribute]
private bool <GetCredentialsAsync>b__12_0(IAccount a);
}
[ExtensionAttribute]
public static class Kusto.Cloud.Platform.Msal.ExtendedAuthenticationException : object {
    [ExtensionAttribute]
public static int ExtractStatusCode(AuthenticationException ex);
}
[ExtensionAttribute]
public static class Kusto.Cloud.Platform.Msal.ExtendedKustoTokenCredentialsForAzureCore : object {
    [ExtensionAttribute]
public static TokenCredential AsAzureCoreTokenCredential(IKustoTokenCredentialsProvider credProvider);
    [ExtensionAttribute]
public static TokenCredential AsStaticAzureCoreTokenCredential(KustoTokenCredentials credential);
}
[ExtensionAttribute]
public static class Kusto.Cloud.Platform.Msal.ExtendedMsalException : object {
    [ExtensionAttribute]
public static void TraceMsalException(MsalException ex, string prefix, ITraceSource tracer);
    private static string GetMsalExceptionAdditionalInfo(MsalException ex);
}
public class Kusto.Cloud.Platform.Msal.KustoMsalProvidersLogCallback : object {
    private static void LogImpl(LogLevel level, string message);
    public static void Log(LogLevel level, string message, bool containsPii);
    public void Log(LogLevel level, string message);
}
public class Kusto.Cloud.Platform.Msal.MsalCredentialsProvidersTracer : TraceSourceBase`1<MsalCredentialsProvidersTracer> {
    public static string IdentifierString;
    public string Id { get; }
    public TraceVerbosity DefaultVerbosity { get; }
    public virtual string get_Id();
    public virtual TraceVerbosity get_DefaultVerbosity();
}
public class Kusto.Cloud.Platform.Msal.StaticAzureCoreTokenCredential : TokenCredential {
    private AccessToken m_token;
    private static TimeSpan s_defaultTokenValidity;
    public StaticAzureCoreTokenCredential(KustoTokenCredentials credential);
    public StaticAzureCoreTokenCredential(string token, DateTime expiresOn);
    public StaticAzureCoreTokenCredential(string token);
    public StaticAzureCoreTokenCredential(AccessToken token);
    private static StaticAzureCoreTokenCredential();
    public virtual AccessToken GetToken(TokenRequestContext requestContext, CancellationToken cancellationToken);
    public virtual ValueTask`1<AccessToken> GetTokenAsync(TokenRequestContext requestContext, CancellationToken cancellationToken);
    internal AccessToken GetToken();
    private static DateTime ExtractExpirationFromJwt(string token);
}
