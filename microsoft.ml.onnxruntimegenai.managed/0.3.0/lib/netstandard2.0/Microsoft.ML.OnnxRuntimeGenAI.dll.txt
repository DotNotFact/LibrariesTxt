[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public enum Microsoft.ML.OnnxRuntimeGenAI.ElementType : Enum {
    public long value__;
    public static ElementType undefined;
    public static ElementType float32;
    public static ElementType uint8;
    public static ElementType int8;
    public static ElementType uint16;
    public static ElementType int16;
    public static ElementType int32;
    public static ElementType int64;
    public static ElementType string_t;
    public static ElementType bool_t;
    public static ElementType float16;
    public static ElementType float64;
    public static ElementType uint32;
    public static ElementType uint64;
}
public class Microsoft.ML.OnnxRuntimeGenAI.Generator : object {
    private IntPtr _generatorHandle;
    private bool _disposed;
    public Generator(Model model, GeneratorParams generatorParams);
    public bool IsDone();
    public void ComputeLogits();
    public void GenerateNextToken();
    public ReadOnlySpan`1<int> GetSequence(ulong index);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public class Microsoft.ML.OnnxRuntimeGenAI.GeneratorParams : object {
    private IntPtr _generatorParamsHandle;
    private bool _disposed;
    internal IntPtr Handle { get; }
    public GeneratorParams(Model model);
    internal IntPtr get_Handle();
    public void SetSearchOption(string searchOption, double value);
    public void SetSearchOption(string searchOption, bool value);
    public void TryGraphCaptureWithMaxBatchSize(int maxBatchSize);
    public void SetInputIDs(ReadOnlySpan`1<int> inputIDs, ulong sequenceLength, ulong batchSize);
    public void SetInputSequences(Sequences sequences);
    public void SetModelInput(string name, Tensor value);
    public void SetInputs(NamedTensors namedTensors);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public class Microsoft.ML.OnnxRuntimeGenAI.Images : object {
    private IntPtr _imagesHandle;
    private bool _disposed;
    internal IntPtr Handle { get; }
    private Images(IntPtr imagesHandle);
    internal IntPtr get_Handle();
    public static Images Load(string imagePath);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public class Microsoft.ML.OnnxRuntimeGenAI.Model : object {
    private IntPtr _modelHandle;
    private bool _disposed;
    internal IntPtr Handle { get; }
    public Model(string modelPath);
    internal IntPtr get_Handle();
    public Sequences Generate(GeneratorParams generatorParams);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public class Microsoft.ML.OnnxRuntimeGenAI.MultiModalProcessor : object {
    private IntPtr _processorHandle;
    private bool _disposed;
    internal IntPtr Handle { get; }
    public MultiModalProcessor(Model model);
    internal IntPtr get_Handle();
    public NamedTensors ProcessImages(string prompt, Images images);
    public string Decode(ReadOnlySpan`1<int> sequence);
    public TokenizerStream CreateStream();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public class Microsoft.ML.OnnxRuntimeGenAI.NamedTensors : object {
    private IntPtr _namedTensorsHandle;
    private bool _disposed;
    internal IntPtr Handle { get; }
    internal NamedTensors(IntPtr namedTensorsHandle);
    internal IntPtr get_Handle();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
internal static class Microsoft.ML.OnnxRuntimeGenAI.NativeMethods : object {
    public static IntPtr OgaResultGetError(IntPtr result);
    public static IntPtr OgaSetLogBool(Byte[] name, bool value);
    public static IntPtr OgaSetLogString(Byte[] name, Byte[] value);
    public static void OgaDestroyResult(IntPtr result);
    public static IntPtr OgaCreateModel(Byte[] configPath, IntPtr& model);
    public static void OgaDestroyModel(IntPtr model);
    public static IntPtr OgaCreateGeneratorParams(IntPtr model, IntPtr& generatorParams);
    public static void OgaDestroyGeneratorParams(IntPtr generatorParams);
    public static IntPtr OgaGeneratorParamsSetSearchNumber(IntPtr generatorParams, Byte[] searchOption, double value);
    public static IntPtr OgaGeneratorParamsSetSearchBool(IntPtr generatorParams, Byte[] searchOption, bool value);
    public static IntPtr OgaGeneratorParamsTryGraphCaptureWithMaxBatchSize(IntPtr generatorParams, int maxBatchSize);
    public static IntPtr OgaGeneratorParamsSetInputIDs(IntPtr generatorParams, Int32* inputIDs, UIntPtr inputIDsCount, UIntPtr sequenceLength, UIntPtr batchSize);
    public static IntPtr OgaGeneratorParamsSetInputSequences(IntPtr generatorParams, IntPtr sequences);
    public static IntPtr OgaGeneratorParamsSetModelInput(IntPtr generatorParams, Byte[] name, IntPtr tensor);
    public static IntPtr OgaGeneratorParamsSetInputs(IntPtr generatorParams, IntPtr named_tensors);
    public static IntPtr OgaCreateGenerator(IntPtr model, IntPtr generatorParams, IntPtr& generator);
    public static void OgaDestroyGenerator(IntPtr generator);
    public static bool OgaGenerator_IsDone(IntPtr generator);
    public static IntPtr OgaGenerator_ComputeLogits(IntPtr generator);
    public static IntPtr OgaGenerator_GenerateNextToken(IntPtr generator);
    public static UIntPtr OgaGenerator_GetSequenceCount(IntPtr generator, UIntPtr index);
    public static IntPtr OgaGenerator_GetSequenceData(IntPtr generator, UIntPtr index);
    public static IntPtr OgaCreateSequences(IntPtr& sequences);
    public static void OgaDestroySequences(IntPtr sequences);
    public static UIntPtr OgaSequencesCount(IntPtr sequences);
    public static UIntPtr OgaSequencesGetSequenceCount(IntPtr sequences, UIntPtr sequenceIndex);
    public static IntPtr OgaSequencesGetSequenceData(IntPtr sequences, UIntPtr sequenceIndex);
    public static IntPtr OgaGenerate(IntPtr model, IntPtr generatorParams, IntPtr& sequences);
    public static IntPtr OgaCreateTokenizer(IntPtr model, IntPtr& tokenizer);
    public static void OgaDestroyTokenizer(IntPtr tokenizer);
    public static IntPtr OgaTokenizerEncode(IntPtr tokenizer, Byte[] strings, IntPtr sequences);
    public static IntPtr OgaTokenizerDecode(IntPtr tokenizer, Int32* sequence, UIntPtr sequenceLength, IntPtr& outStr);
    public static void OgaDestroyString(IntPtr str);
    public static IntPtr OgaCreateTokenizerStream(IntPtr tokenizer, IntPtr& tokenizerStream);
    public static IntPtr OgaCreateTokenizerStreamFromProcessor(IntPtr processor, IntPtr& tokenizerStream);
    public static void OgaDestroyTokenizerStream(IntPtr tokenizerStream);
    public static IntPtr OgaTokenizerStreamDecode(IntPtr tokenizerStream, int token, IntPtr& outStr);
    public static IntPtr OgaCreateTensorFromBuffer(IntPtr data, Int64[] shape_dims, UIntPtr shape_dims_count, ElementType element_Type, IntPtr& tensor);
    public static void OgaDestroyTensor(IntPtr tensor);
    public static IntPtr OgaTensorGetType(IntPtr tensor, ElementType& element_type);
    public static IntPtr OgaTensorGetShapeRank(IntPtr tensor, UIntPtr& rank);
    public static IntPtr OgaTensorGetShape(IntPtr tensor, Int64[] shape_dims, UIntPtr shape_dims_count);
    public static IntPtr OgaTensorGetData(IntPtr tensor, IntPtr& data);
    public static IntPtr OgaSetCurrentGpuDeviceId(int device_id);
    public static IntPtr OgaGetCurrentGpuDeviceId(IntPtr& device_id);
    public static void OgaShutdown();
    public static IntPtr OgaCreateMultiModalProcessor(IntPtr model, IntPtr& processor);
    public static void OgaDestroyMultiModalProcessor(IntPtr processor);
    public static IntPtr OgaProcessorProcessImages(IntPtr processor, Byte[] prompt, IntPtr images, IntPtr& named_tensors);
    public static IntPtr OgaProcessorDecode(IntPtr processor, Int32* sequence, UIntPtr sequenceLength, IntPtr& outStr);
    public static IntPtr OgaLoadImage(Byte[] image_path, IntPtr& images);
    public static void OgaDestroyImages(IntPtr images);
    public static void OgaDestroyNamedTensors(IntPtr named_tensors);
}
public class Microsoft.ML.OnnxRuntimeGenAI.OgaHandle : object {
    protected virtual override void Finalize();
}
public class Microsoft.ML.OnnxRuntimeGenAI.OnnxRuntimeGenAIException : Exception {
    internal OnnxRuntimeGenAIException(string message);
}
internal class Microsoft.ML.OnnxRuntimeGenAI.Result : object {
    private static string GetErrorMessage(IntPtr nativeResult);
    public static void VerifySuccess(IntPtr nativeResult);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.ML.OnnxRuntimeGenAI.Sequences : object {
    private IntPtr _sequencesHandle;
    private bool _disposed;
    private ulong _numSequences;
    internal IntPtr Handle { get; }
    public ulong NumSequences { get; }
    public ReadOnlySpan`1<int> Item { get; }
    internal Sequences(IntPtr sequencesHandle);
    internal IntPtr get_Handle();
    public ulong get_NumSequences();
    public ReadOnlySpan`1<int> get_Item(ulong sequenceIndex);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
internal class Microsoft.ML.OnnxRuntimeGenAI.StringUtils : object {
    internal static Byte[] EmptyByteArray;
    private static StringUtils();
    internal static Byte[] ToUtf8(string str);
    internal static string FromUtf8(IntPtr nativeUtf8);
}
public class Microsoft.ML.OnnxRuntimeGenAI.Tensor : object {
    private IntPtr _tensorHandle;
    private bool _disposed;
    internal IntPtr Handle { get; }
    public Tensor(IntPtr data, Int64[] shape, ElementType type);
    internal IntPtr get_Handle();
    protected virtual override void Finalize();
    public ElementType Type();
    public Int64[] Shape();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public class Microsoft.ML.OnnxRuntimeGenAI.Tokenizer : object {
    private IntPtr _tokenizerHandle;
    private bool _disposed;
    public Tokenizer(Model model);
    public Sequences EncodeBatch(String[] strings);
    public String[] DecodeBatch(Sequences sequences);
    public Sequences Encode(string str);
    public string Decode(ReadOnlySpan`1<int> sequence);
    public TokenizerStream CreateStream();
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public class Microsoft.ML.OnnxRuntimeGenAI.TokenizerStream : object {
    private IntPtr _tokenizerStreamHandle;
    private bool _disposed;
    internal IntPtr Handle { get; }
    internal TokenizerStream(IntPtr tokenizerStreamHandle);
    internal IntPtr get_Handle();
    public string Decode(int token);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public class Microsoft.ML.OnnxRuntimeGenAI.Utils : object {
    public static void SetCurrentGpuDeviceId(int device_id);
    public static int GetCurrentGpuDeviceId();
    public static void SetLogBool(string name, bool value);
    public static void SetLogString(string name, string value);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
