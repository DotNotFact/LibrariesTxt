public class Microsoft.VisualStudio.Containers.Tools.Shared.ContainerBuildAndLaunchContext : object {
    [CompilerGeneratedAttribute]
private bool <LaunchContainer>k__BackingField;
    [CompilerGeneratedAttribute]
private ProjectType <ProjectType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContainerName>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ContainerDevelopmentMode> <DevelopmentMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DockerLabelBuiltImages>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IntermediateOutputPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NuGetPackageFolders>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NuGetPackageRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private TargetFramework <TargetFramework>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <TargetFrameworkVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutDir>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DevEnvDir>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <VisualStudioVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserSecretsId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BlazorStaticWebAssetsManifest>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <ContainersToolsVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AzureFunctionsVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActiveDebugProfile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PullImagesOnBuild>k__BackingField;
    [CompilerGeneratedAttribute]
private ProfilerLaunchInfo <ProfilerLaunchInfo>k__BackingField;
    public bool LaunchContainer { get; public set; }
    public ProjectType ProjectType { get; public set; }
    public string ContainerName { get; public set; }
    public CancellationToken CancellationToken { get; public set; }
    public Nullable`1<ContainerDevelopmentMode> DevelopmentMode { get; public set; }
    public bool DockerLabelBuiltImages { get; public set; }
    public string IntermediateOutputPath { get; public set; }
    public string NuGetPackageFolders { get; public set; }
    public string NuGetPackageRoot { get; public set; }
    public string ProjectFilePath { get; public set; }
    public string ProjectDirectory { get; public set; }
    public TargetFramework TargetFramework { get; public set; }
    public Version TargetFrameworkVersion { get; public set; }
    public string TargetPath { get; public set; }
    public string OutDir { get; public set; }
    public string Configuration { get; public set; }
    public string DevEnvDir { get; public set; }
    public Version VisualStudioVersion { get; public set; }
    public string UserSecretsId { get; public set; }
    public string BlazorStaticWebAssetsManifest { get; public set; }
    public Version ContainersToolsVersion { get; public set; }
    public string AzureFunctionsVersion { get; public set; }
    public string ActiveDebugProfile { get; public set; }
    public bool PullImagesOnBuild { get; public set; }
    public ProfilerLaunchInfo ProfilerLaunchInfo { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_LaunchContainer();
    [CompilerGeneratedAttribute]
public void set_LaunchContainer(bool value);
    [CompilerGeneratedAttribute]
public ProjectType get_ProjectType();
    [CompilerGeneratedAttribute]
public void set_ProjectType(ProjectType value);
    [CompilerGeneratedAttribute]
public string get_ContainerName();
    [CompilerGeneratedAttribute]
public void set_ContainerName(string value);
    [CompilerGeneratedAttribute]
public CancellationToken get_CancellationToken();
    [CompilerGeneratedAttribute]
public void set_CancellationToken(CancellationToken value);
    [CompilerGeneratedAttribute]
public Nullable`1<ContainerDevelopmentMode> get_DevelopmentMode();
    [CompilerGeneratedAttribute]
public void set_DevelopmentMode(Nullable`1<ContainerDevelopmentMode> value);
    [CompilerGeneratedAttribute]
public bool get_DockerLabelBuiltImages();
    [CompilerGeneratedAttribute]
public void set_DockerLabelBuiltImages(bool value);
    [CompilerGeneratedAttribute]
public string get_IntermediateOutputPath();
    [CompilerGeneratedAttribute]
public void set_IntermediateOutputPath(string value);
    [CompilerGeneratedAttribute]
public string get_NuGetPackageFolders();
    [CompilerGeneratedAttribute]
public void set_NuGetPackageFolders(string value);
    [CompilerGeneratedAttribute]
public string get_NuGetPackageRoot();
    [CompilerGeneratedAttribute]
public void set_NuGetPackageRoot(string value);
    [CompilerGeneratedAttribute]
public string get_ProjectFilePath();
    [CompilerGeneratedAttribute]
public void set_ProjectFilePath(string value);
    [CompilerGeneratedAttribute]
public string get_ProjectDirectory();
    [CompilerGeneratedAttribute]
public void set_ProjectDirectory(string value);
    [CompilerGeneratedAttribute]
public TargetFramework get_TargetFramework();
    [CompilerGeneratedAttribute]
public void set_TargetFramework(TargetFramework value);
    [CompilerGeneratedAttribute]
public Version get_TargetFrameworkVersion();
    [CompilerGeneratedAttribute]
public void set_TargetFrameworkVersion(Version value);
    [CompilerGeneratedAttribute]
public string get_TargetPath();
    [CompilerGeneratedAttribute]
public void set_TargetPath(string value);
    [CompilerGeneratedAttribute]
public string get_OutDir();
    [CompilerGeneratedAttribute]
public void set_OutDir(string value);
    [CompilerGeneratedAttribute]
public string get_Configuration();
    [CompilerGeneratedAttribute]
public void set_Configuration(string value);
    [CompilerGeneratedAttribute]
public string get_DevEnvDir();
    [CompilerGeneratedAttribute]
public void set_DevEnvDir(string value);
    [CompilerGeneratedAttribute]
public Version get_VisualStudioVersion();
    [CompilerGeneratedAttribute]
public void set_VisualStudioVersion(Version value);
    [CompilerGeneratedAttribute]
public string get_UserSecretsId();
    [CompilerGeneratedAttribute]
public void set_UserSecretsId(string value);
    [CompilerGeneratedAttribute]
public string get_BlazorStaticWebAssetsManifest();
    [CompilerGeneratedAttribute]
public void set_BlazorStaticWebAssetsManifest(string value);
    [CompilerGeneratedAttribute]
public Version get_ContainersToolsVersion();
    [CompilerGeneratedAttribute]
public void set_ContainersToolsVersion(Version value);
    [CompilerGeneratedAttribute]
public string get_AzureFunctionsVersion();
    [CompilerGeneratedAttribute]
public void set_AzureFunctionsVersion(string value);
    [CompilerGeneratedAttribute]
public string get_ActiveDebugProfile();
    [CompilerGeneratedAttribute]
public void set_ActiveDebugProfile(string value);
    [CompilerGeneratedAttribute]
public bool get_PullImagesOnBuild();
    [CompilerGeneratedAttribute]
public void set_PullImagesOnBuild(bool value);
    [CompilerGeneratedAttribute]
public ProfilerLaunchInfo get_ProfilerLaunchInfo();
    [CompilerGeneratedAttribute]
public void set_ProfilerLaunchInfo(ProfilerLaunchInfo value);
}
public class Microsoft.VisualStudio.Containers.Tools.Shared.ContainerLaunchManager : object {
    private IFileBasedCache cache;
    private ILogger logger;
    private static string OldUnsupportedNugetVersionForAzureFunctions;
    public ContainerLaunchManager(IFileBasedCache cache, ILogger logger);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Containers.Tools.Shared.ContainerLaunchManager/<KillAppInsideContainerAsync>d__4")]
public sealed virtual Task KillAppInsideContainerAsync(string customKillCommand, ProjectType projectType, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Containers.Tools.Shared.ContainerLaunchManager/<BuildAndLaunchAsync>d__5")]
public sealed virtual Task`1<ContainerCreationResult> BuildAndLaunchAsync(ContainerBuildAndLaunchContext context, DockerfileItem dockerfileItem);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Containers.Tools.Shared.ContainerLaunchManager/<KillContainerAsync>d__6")]
public sealed virtual Task KillContainerAsync(string projectDirectory, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Containers.Tools.Shared.ContainerLaunchManager/<BuildAndLaunchForDockerfileAsync>d__7")]
private Task`1<ContainerCreationResult> BuildAndLaunchForDockerfileAsync(DockerfileItem dockerfile, ContainerBuildAndLaunchContext context);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Containers.Tools.Shared.ContainerLaunchManager/<ShouldRebuildImageAsync>d__8")]
private Task`1<bool> ShouldRebuildImageAsync(ContainerImageBuildContext imageBuildContext, ContainerDevelopmentMode developmentMode, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Containers.Tools.Shared.ContainerLaunchManager/<ShouldRecreateContainerAsync>d__9")]
private Task`1<bool> ShouldRecreateContainerAsync(bool newImageCreated, ContainerRunContext runContext, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Containers.Tools.Shared.ContainerLaunchManager/<TryStartExistingContainerAsync>d__10")]
private Task`1<ContainerStartStatus> TryStartExistingContainerAsync(string containerId, ContainerRunContext runContext, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Containers.Tools.Shared.ContainerLaunchManager/<RebuildImageAsync>d__11")]
private Task RebuildImageAsync(ContainerImageBuildContext imageBuildContext, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Containers.Tools.Shared.ContainerLaunchManager/<RecreateContainerAsync>d__12")]
private Task`1<ContainerCreationResult> RecreateContainerAsync(ContainerRunContext runContext, ContainerBuildAndLaunchContext buildAndLaunchContext);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Containers.Tools.Shared.ContainerLaunchManager/<GetUnusedContainerNameAsync>d__13")]
private Task`1<string> GetUnusedContainerNameAsync(string containerName, CancellationToken cancellationToken);
    private string IncrementNumber(Match match);
    private ContainerImageBuildContext CreateBuildContext(DockerfileItem dockerfile, ContainerBuildAndLaunchContext context);
    private Task`1<ContainerRunContext> CreateDotNetFrameworkRunContextAsync(ContainerBuildAndLaunchContext context, string tagName, string debuggerPath, DockerfileItem dockerfile);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Containers.Tools.Shared.ContainerLaunchManager/<CreateDotNetCoreRunContextAsync>d__17")]
private Task`1<ContainerRunContext> CreateDotNetCoreRunContextAsync(ContainerImageBuildContext buildContext, ContainerBuildAndLaunchContext context, OperatingSystemName targetOS, string debuggerPath, DockerfileItem dockerfile, string functionsCliPath);
    private IReadOnlyCollection`1<string> GetDotNetFrameworkEnvironmentVariables();
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Containers.Tools.Shared.ContainerLaunchManager/<CreateContainerRunContextAsync>d__19")]
private Task`1<ContainerRunContext> CreateContainerRunContextAsync(ContainerImageBuildContext buildContext, ContainerBuildAndLaunchContext context, OperatingSystemName targetOS, string debuggerPath, DockerfileItem dockerfile);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Containers.Tools.Shared.ContainerLaunchManager/<GetFunctionsCliPathAsync>d__20")]
private Task`1<string> GetFunctionsCliPathAsync(ContainerBuildAndLaunchContext context);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Containers.Tools.Shared.ContainerLaunchManager/<GetFunctionsCliPathFromLocalImplAsync>d__21")]
private Task`1<string> GetFunctionsCliPathFromLocalImplAsync(ContainerBuildAndLaunchContext context);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Containers.Tools.Shared.ContainerLaunchManager/<WaitForInProgressWorksToCompleteAsync>d__22")]
private Task WaitForInProgressWorksToCompleteAsync(ContainerBuildAndLaunchContext context);
    private string GetBaseStageName(string dockerfileFullPath, ContainerDevelopmentMode containerDevelopmentMode);
    private string ResolveOutputAssemblyPath(string contextFullPath, OperatingSystemName targetOS, ContainerBuildAndLaunchContext context);
    private List`1<string> GetUrlEnvironmentVariables(DockerProfileSettings profileSettings, OperatingSystemName targetOS, Version targetFrameworkVersion);
    private List`1<string> GetSecretVolumeMappings(ContainerBuildAndLaunchContext context, DockerProfileSettings profileSettings, OperatingSystemName operatingSystemName);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Containers.Tools.Shared.ContainerLaunchManager/<WaitForIISWarmupCompletionAsync>d__27")]
private Task WaitForIISWarmupCompletionAsync(ContainerBuildAndLaunchContext context);
    private static string GetTagName(string tagName, ContainerDevelopmentMode containerDevelopmentMode);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Containers.Tools.Shared.ContainerLaunchManager/<ResolveAndEnsureDebuggerSettingsAsync>d__29")]
private Task`1<string> ResolveAndEnsureDebuggerSettingsAsync(ContainerBuildAndLaunchContext context, OperatingSystemName targetOS, DockerfileItem dockerfile);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Containers.Tools.Shared.ContainerLaunchManager/<ContainerizeBlazorStaticWebAssetsManifestAsync>d__30")]
private Task ContainerizeBlazorStaticWebAssetsManifestAsync(ContainerBuildAndLaunchContext context, Dictionary`2<string, string> volumeMappings, OperatingSystemName targetOS);
    private string GetMsVsMonDebuggerLoggingFlag(OperatingSystemName targetOs, string debuggerPath);
    private string GetContainerAppPath(OperatingSystemName targetOS);
    private string GetContainerSrcPath(OperatingSystemName targetOS);
    [CompilerGeneratedAttribute]
private string <GetUnusedContainerNameAsync>b__13_0(string oldName, int i);
    [CompilerGeneratedAttribute]
private void <ResolveAndEnsureDebuggerSettingsAsync>b__29_0(string warning);
    [CompilerGeneratedAttribute]
private void <ResolveAndEnsureDebuggerSettingsAsync>b__29_1(string error);
}
public class Microsoft.VisualStudio.Containers.Tools.Shared.DockerCommandException : Exception {
    [CompilerGeneratedAttribute]
private string <ErrorCode>k__BackingField;
    public string ErrorCode { get; public set; }
    public DockerCommandException(string message);
    public DockerCommandException(string message, Exception innerException);
    [CompilerGeneratedAttribute]
public string get_ErrorCode();
    [CompilerGeneratedAttribute]
public void set_ErrorCode(string value);
}
public class Microsoft.VisualStudio.Containers.Tools.Shared.DockerfileItem : object {
    [CompilerGeneratedAttribute]
private string <FullPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WasGenerated>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BuildArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Repository>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RunArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DebuggerPath>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Labels>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <RunEnvironmentFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Stage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FastModeStage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tag>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<OperatingSystemName> <TargetOS>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DebuggeeProgram>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DebuggeeArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DebuggeeWorkingDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FastModeProjectMountDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DebuggeeKillProgram>k__BackingField;
    [MSBuildItemMetadataNameAttribute("FullPath", "True")]
public string FullPath { get; internal set; }
    [MSBuildItemMetadataNameAttribute("WasGenerated", "False")]
public bool WasGenerated { get; internal set; }
    [MSBuildItemMetadataNameAttribute("Context", "False")]
public string Context { get; internal set; }
    [MSBuildItemMetadataNameAttribute("BuildArguments", "False")]
public string BuildArguments { get; internal set; }
    [MSBuildItemMetadataNameAttribute("Repository", "False")]
public string Repository { get; internal set; }
    [MSBuildItemMetadataNameAttribute("RunArguments", "False")]
public string RunArguments { get; internal set; }
    [MSBuildItemMetadataNameAttribute("DebuggerPath", "False")]
public string DebuggerPath { get; internal set; }
    [MSBuildItemMetadataNameAttribute("Labels", "False")]
public IEnumerable`1<string> Labels { get; internal set; }
    [MSBuildItemMetadataNameAttribute("RunEnvironmentFiles", "False")]
public IEnumerable`1<string> RunEnvironmentFiles { get; internal set; }
    [MSBuildItemMetadataNameAttribute("Stage", "False")]
public string Stage { get; internal set; }
    [MSBuildItemMetadataNameAttribute("FastModeStage", "False")]
public string FastModeStage { get; internal set; }
    [MSBuildItemMetadataNameAttribute("Tag", "False")]
public string Tag { get; internal set; }
    [MSBuildItemMetadataNameAttribute("TargetOS", "False")]
public Nullable`1<OperatingSystemName> TargetOS { get; internal set; }
    [MSBuildItemMetadataNameAttribute("DebuggeeProgram", "False")]
public string DebuggeeProgram { get; internal set; }
    [MSBuildItemMetadataNameAttribute("DebuggeeArguments", "False")]
public string DebuggeeArguments { get; internal set; }
    [MSBuildItemMetadataNameAttribute("DebuggeeWorkingDirectory", "False")]
public string DebuggeeWorkingDirectory { get; internal set; }
    [MSBuildItemMetadataNameAttribute("FastModeProjectMountDirectory", "False")]
public string FastModeProjectMountDirectory { get; internal set; }
    [MSBuildItemMetadataNameAttribute("DebuggeeKillProgram", "False")]
public string DebuggeeKillProgram { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_FullPath();
    [CompilerGeneratedAttribute]
internal void set_FullPath(string value);
    [CompilerGeneratedAttribute]
public bool get_WasGenerated();
    [CompilerGeneratedAttribute]
internal void set_WasGenerated(bool value);
    [CompilerGeneratedAttribute]
public string get_Context();
    [CompilerGeneratedAttribute]
internal void set_Context(string value);
    [CompilerGeneratedAttribute]
public string get_BuildArguments();
    [CompilerGeneratedAttribute]
internal void set_BuildArguments(string value);
    [CompilerGeneratedAttribute]
public string get_Repository();
    [CompilerGeneratedAttribute]
internal void set_Repository(string value);
    [CompilerGeneratedAttribute]
public string get_RunArguments();
    [CompilerGeneratedAttribute]
internal void set_RunArguments(string value);
    [CompilerGeneratedAttribute]
public string get_DebuggerPath();
    [CompilerGeneratedAttribute]
internal void set_DebuggerPath(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Labels();
    [CompilerGeneratedAttribute]
internal void set_Labels(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_RunEnvironmentFiles();
    [CompilerGeneratedAttribute]
internal void set_RunEnvironmentFiles(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public string get_Stage();
    [CompilerGeneratedAttribute]
internal void set_Stage(string value);
    [CompilerGeneratedAttribute]
public string get_FastModeStage();
    [CompilerGeneratedAttribute]
internal void set_FastModeStage(string value);
    [CompilerGeneratedAttribute]
public string get_Tag();
    [CompilerGeneratedAttribute]
internal void set_Tag(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<OperatingSystemName> get_TargetOS();
    [CompilerGeneratedAttribute]
internal void set_TargetOS(Nullable`1<OperatingSystemName> value);
    [CompilerGeneratedAttribute]
public string get_DebuggeeProgram();
    [CompilerGeneratedAttribute]
internal void set_DebuggeeProgram(string value);
    [CompilerGeneratedAttribute]
public string get_DebuggeeArguments();
    [CompilerGeneratedAttribute]
internal void set_DebuggeeArguments(string value);
    [CompilerGeneratedAttribute]
public string get_DebuggeeWorkingDirectory();
    [CompilerGeneratedAttribute]
internal void set_DebuggeeWorkingDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_FastModeProjectMountDirectory();
    [CompilerGeneratedAttribute]
internal void set_FastModeProjectMountDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_DebuggeeKillProgram();
    [CompilerGeneratedAttribute]
internal void set_DebuggeeKillProgram(string value);
}
public static class Microsoft.VisualStudio.Containers.Tools.Shared.DockerfileUtilities : object {
    public static ISet`1<string> GetBaseImageNamesFromDockerfile(string dockerfilePath, string stageName);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Containers.Tools.Shared.DockerfileUtilities/<GetDockerfileItemsAsync>d__1")]
public static Task`1<IEnumerable`1<DockerfileItem>> GetDockerfileItemsAsync(ProjectWrapper project);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Containers.Tools.Shared.DockerfileUtilities/<CreateDockerfileItemAsync>d__2")]
private static Task`1<DockerfileItem> CreateDockerfileItemAsync(string fullPath, ProjectWrapper project, ProjectItemWrapper projectItem);
    private static Task`1<string> SafeGetMetadataAsync(ProjectItemWrapper projectItem, string metadataName);
}
[ExtensionAttribute]
public static class Microsoft.VisualStudio.Containers.Tools.Shared.FileBasedCacheExtensions : object {
    private static string FunctionsCoreToolsPath;
    [ExtensionAttribute]
public static string GetFunctionsCoreToolsPath(IFileBasedCache cache);
    [ExtensionAttribute]
public static void SetFunctionsCoreToolsPath(IFileBasedCache cache, string containerId);
}
public class Microsoft.VisualStudio.Containers.Tools.Shared.Functions.AzureFunctionsFeedDataProvider : object {
    private static string CliZipName;
    private static string FeedFwlink;
    private static string LinuxCliDirectoryName;
    private static string WindowsCliDirectoryName;
    private static string LocalAppDataFolderPath;
    private static string DownloadRootFolderPath;
    private static string FeedJsonPath;
    private static string ReleasesPath;
    private static string TagsPath;
    private FeedDataJsonFileDownloader feedDataDownloader;
    private ILoggingService loggingService;
    private ConcurrentDictionary`2<string, Task`1<string>> cliLoadTasks;
    public AzureFunctionsFeedDataProvider(ILoggingService loggingService);
    private static AzureFunctionsFeedDataProvider();
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Containers.Tools.Shared.Functions.AzureFunctionsFeedDataProvider/<DemandCliForReleaseAsync>d__13")]
private Task`1<string> DemandCliForReleaseAsync(JObject feedData, string releaseName, OperatingSystemName targetOS, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Containers.Tools.Shared.Functions.AzureFunctionsFeedDataProvider/<DemandCliForTagAsync>d__14")]
public Task`1<string> DemandCliForTagAsync(string tagName, OperatingSystemName targetOS, CancellationToken cancellationToken);
    public Task`1<JObject> GetCurrentFeedDataAsync(CancellationToken cancellationToken);
    private void DemandCoreDirectoryStructure();
    private string DemandReleaseDirectory(string releaseName);
    private string DemandTagDirectory(string tagName);
    private void SafeRemoveDirectory(string targetDirectory);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Containers.Tools.Shared.Functions.AzureFunctionsFeedDataProvider/<TryAcquireToolsetAssetsAsync>d__20")]
private Task`1<ToolsetAssetsAcquisitionResult> TryAcquireToolsetAssetsAsync(JObject release, OperatingSystemName targetOS, string cliDirectory, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Containers.Tools.Shared.Functions.AzureFunctionsFeedDataProvider/<TryDownloadCliToTempDirectoryAsync>d__21")]
private Task`1<bool> TryDownloadCliToTempDirectoryAsync(JObject release, OperatingSystemName targetOS, string tempDirectory, CancellationToken cancellationToken);
    private bool TryExtractCliZip(string cliZipFolder, string targetDirectory);
}
public interface Microsoft.VisualStudio.Containers.Tools.Shared.IContainerLaunchManager {
    public abstract virtual Task`1<ContainerCreationResult> BuildAndLaunchAsync(ContainerBuildAndLaunchContext context, DockerfileItem dockerfileItem);
    public abstract virtual Task KillAppInsideContainerAsync(string customKillCommand, ProjectType projectType, CancellationToken cancellationToken);
    public abstract virtual Task KillContainerAsync(string projectDirectory, CancellationToken cancellationToken);
}
public class Microsoft.VisualStudio.Containers.Tools.Shared.MSBuildItemMetadataNameAttribute : MSBuildNameAttribute {
    [CompilerGeneratedAttribute]
private bool <IsReserved>k__BackingField;
    public bool IsReserved { get; }
    public MSBuildItemMetadataNameAttribute(string metadataName, bool isReserved);
    [CompilerGeneratedAttribute]
public bool get_IsReserved();
}
public class Microsoft.VisualStudio.Containers.Tools.Shared.MSBuildItemNameAttribute : MSBuildNameAttribute {
    public MSBuildItemNameAttribute(string itemName);
}
[AttributeUsageAttribute("128")]
public abstract class Microsoft.VisualStudio.Containers.Tools.Shared.MSBuildNameAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public MSBuildNameAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
}
public class Microsoft.VisualStudio.Containers.Tools.Shared.MSBuildPropertyNameAttribute : MSBuildNameAttribute {
    public MSBuildPropertyNameAttribute(string propertyName);
}
public class Microsoft.VisualStudio.Containers.Tools.Shared.ProjectItemWrapper : object {
    private Func`2<string, Task`1<string>> getMetadataAsync;
    public ProjectItemWrapper(Func`2<string, Task`1<string>> getMetadataAsync);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Containers.Tools.Shared.ProjectItemWrapper/<GetMetadataAsync>d__2")]
internal Task`1<string> GetMetadataAsync(string metadataName);
}
public class Microsoft.VisualStudio.Containers.Tools.Shared.ProjectWrapper : object {
    private Func`2<string, Task`1<string>> getMSBuildPropertyAsync;
    private Func`2<string, Task`1<IEnumerable`1<ProjectItemWrapper>>> getProjectItemsAsync;
    [CompilerGeneratedAttribute]
private string <ProjectFilePath>k__BackingField;
    internal string ProjectFilePath { get; private set; }
    internal string ProjectDirectory { get; }
    public ProjectWrapper(string projectFilePath, Func`2<string, Task`1<string>> getMSBuildPropertyAsync, Func`2<string, Task`1<IEnumerable`1<ProjectItemWrapper>>> getProjectItemsAsync);
    [CompilerGeneratedAttribute]
internal string get_ProjectFilePath();
    [CompilerGeneratedAttribute]
private void set_ProjectFilePath(string value);
    internal string get_ProjectDirectory();
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Containers.Tools.Shared.ProjectWrapper/<GetMSBuildPropertyAsync>d__9")]
internal Task`1<string> GetMSBuildPropertyAsync(string propertyName);
    internal Task`1<IEnumerable`1<ProjectItemWrapper>> GetProjectItemsAsync(string itemType);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.VisualStudio.Containers.Tools.Shared.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ErrorBuildingDockerImage { get; }
    internal static string ErrorInvalidDebuggerPath { get; }
    internal static string ErrorInvalidFilePath { get; }
    internal static string ErrorNoBuildContext { get; }
    internal static string ErrorNoDockerfilesFound { get; }
    internal static string ErrorParsingTargetOS { get; }
    internal static string ErrorPortsInUse { get; }
    internal static string ErrorRunningDockerContainer { get; }
    internal static string ErrorUnableToAcquireAzureFunctionsCLI { get; }
    internal static string RetryForContainerNameConflict { get; }
    internal static string WaitForFunctionCoreToolsInstallation { get; }
    internal static string WarningFailedToKillProcess { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ErrorBuildingDockerImage();
    internal static string get_ErrorInvalidDebuggerPath();
    internal static string get_ErrorInvalidFilePath();
    internal static string get_ErrorNoBuildContext();
    internal static string get_ErrorNoDockerfilesFound();
    internal static string get_ErrorParsingTargetOS();
    internal static string get_ErrorPortsInUse();
    internal static string get_ErrorRunningDockerContainer();
    internal static string get_ErrorUnableToAcquireAzureFunctionsCLI();
    internal static string get_RetryForContainerNameConflict();
    internal static string get_WaitForFunctionCoreToolsInstallation();
    internal static string get_WarningFailedToKillProcess();
}
public static class Microsoft.VisualStudio.Containers.Tools.Shared.SharedConstants : object {
    public static string DockerLaunchProfileCommandName;
    public static string WarmupSemaphoreFile;
    public static string TelemetryLogFile;
    public static Version VS16Version;
    public static Version MinToolingVersionForRandomPorts;
    private static SharedConstants();
}
