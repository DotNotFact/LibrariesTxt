[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExperimentalAttribute("FBERTTOK001")]
internal class FastBertTokenizer.AsyncBatchEnumerator`1 : object {
    private BertTokenizer _tokenizer;
    private int _tokensPerInput;
    private int _batchSize;
    private int _stride;
    private Int64[] _inputIds;
    private Int64[] _attentionMask;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Nullable`1[] _outputCorrelation;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IAsyncEnumerator`1<ValueTuple`2<TKey, string>> _asyncSourceEnumerator;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IEnumerator`1<ValueTuple`2<TKey, string>> _sourceEnumerator;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Nullable`1<ValueTuple`3<TKey, string, int>> _pivot;
    [NullableAttribute("0")]
private ReadOnlyMemory`1<long> _strideInputIds;
    [CompilerGeneratedAttribute]
private TokenizedBatch`1<TKey> <Current>k__BackingField;
    private TokenizedBatch`1<TKey> Current { get; }
    private AsyncBatchEnumerator`1(BertTokenizer tokenizer, IAsyncEnumerable`1<ValueTuple`2<TKey, string>> asyncSourceEnumerable, int tokensPerInput, int batchSize, int stride);
    private AsyncBatchEnumerator`1(BertTokenizer tokenizer, IEnumerable`1<ValueTuple`2<TKey, string>> sourceEnumerable, int tokensPerInput, int batchSize, int stride);
    private AsyncBatchEnumerator`1(BertTokenizer tokenizer, int tokensPerInput, int batchSize, int stride);
    [CompilerGeneratedAttribute]
private TokenizedBatch`1<TKey> get_Current();
    public static IAsyncEnumerable`1<TokenizedBatch`1<TKey>> CreateAsync(BertTokenizer tokenizer, IAsyncEnumerable`1<ValueTuple`2<TKey, string>> asyncSourceEnumerable, int tokensPerInput, int batchSize, int stride);
    public static IEnumerable`1<TokenizedBatch`1<TKey>> CreateSync(BertTokenizer tokenizer, IEnumerable`1<ValueTuple`2<TKey, string>> asyncSourceEnumerable, int tokensPerInput, int batchSize, int stride);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("FastBertTokenizer.AsyncBatchEnumerator`1/<MoveNextAsync>d__19")]
public ValueTask`1<bool> MoveNextAsync();
    public ValueTask DisposeAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class FastBertTokenizer.BertTokenizer : object {
    [NullableAttribute("2")]
private Dictionary`2<StringSpanOrdinalKey, long> _prefixes;
    [NullableAttribute("2")]
private Dictionary`2<StringSpanOrdinalKey, long> _suffixes;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ValueTuple`2<int, string> _unk;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ValueTuple`2<int, string> _cls;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ValueTuple`2<int, string> _sep;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ValueTuple`2<int, string> _pad;
    private bool _lowercaseInput;
    private NormalizationForm _normalization;
    [NullableAttribute("2")]
private Int64[] _inputIdReturnBuffer;
    [NullableAttribute("2")]
private Int64[] _attentionMaskReturnBuffer;
    [NullableAttribute("2")]
private Int64[] _tokenTypeIdsReturnBuffer;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<long, string> _decodePrefixes;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<long, string> _decodeSuffixes;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Nullable`1<ValueTuple`2<int, Tuple`2[]>> _rangeCache;
    [NullableContextAttribute("0")]
public int Encode(string input, Span`1<long> inputIds, Span`1<long> attentionMask, Span`1<long> tokenTypeIds, Nullable`1<int> padTo);
    [NullableContextAttribute("0")]
public int Encode(string input, Span`1<long> inputIds, Span`1<long> attentionMask, Nullable`1<int> padTo);
    [ExperimentalAttribute("FBERTTOK001")]
public IAsyncEnumerable`1<TokenizedBatch`1<TKey>> CreateAsyncBatchEnumerator(IAsyncEnumerable`1<ValueTuple`2<TKey, string>> sourceEnumerable, int tokensPerInput, int batchSize, int stride);
    [ExperimentalAttribute("FBERTTOK001")]
public IAsyncEnumerable`1<TokenizedBatch`1<TKey>> CreateAsyncBatchEnumerator(ChannelReader`1<ValueTuple`2<TKey, string>> sourceChannel, int tokensPerInput, int batchSize, int stride, Nullable`1<int> maxDegreeOfParallelism);
    [ExperimentalAttribute("FBERTTOK001")]
public IEnumerable`1<TokenizedBatch`1<TKey>> CreateBatchEnumerator(IEnumerable`1<ValueTuple`2<TKey, string>> sourceEnumerable, int tokensPerInput, int batchSize, int stride);
    [NullableContextAttribute("0")]
public ValueTuple`3<Memory`1<long>, Memory`1<long>, Memory`1<long>> Encode(string input, int maximumTokens, Nullable`1<int> padTo);
    [NullableContextAttribute("0")]
[ExperimentalAttribute("FBERTTOK001")]
internal ValueTuple`2<TokenizedRange`1<TKey>, int> EncodeBatchElement(TKey inputKey, string input, int inputOffset, ReadOnlySpan`1<long> strideInputIds, Span`1<long> inputIds, Span`1<long> attentionMask, bool withStride);
    [NullableContextAttribute("0")]
private ValueTuple`2<int, int> Encode(string input, int inputOffset, Span`1<long> inputIds, Nullable`1& lastTokenizedWordStartIndex, Nullable`1<int> padTo, bool includePartialLastWord, bool emitClsToken);
    [NullableContextAttribute("0")]
private static bool RemoveControlAndReplacement(ReadOnlySpan`1<char> text, ReadOnlySpan`1& cleaned);
    private static string RemoveDiacritics(string text, NormalizationForm targetNf);
    [NullableContextAttribute("0")]
private int TokenizeSubword(ReadOnlySpan`1<char> word, Span`1<long> tokenIdSink, Int32& offset);
    [NullableContextAttribute("0")]
public string Decode(ReadOnlySpan`1<long> tokenIds, bool cleanupTokenizationSpaces);
    private bool EmitNoSpaceBefore(string prefix);
    [AsyncStateMachineAttribute("FastBertTokenizer.BertTokenizer/<LoadTokenizerJsonAsync>d__26")]
public Task LoadTokenizerJsonAsync(string tokenizerJsonFilePath);
    [AsyncStateMachineAttribute("FastBertTokenizer.BertTokenizer/<LoadTokenizerJsonAsync>d__27")]
public Task LoadTokenizerJsonAsync(Stream tokenizerJsonStream);
    public void LoadTokenizerJson(Stream tokenizerJsonStream);
    [AsyncStateMachineAttribute("FastBertTokenizer.BertTokenizer/<LoadTokenizerJsonAsync>d__29")]
internal Task LoadTokenizerJsonAsync(HttpClient httpClient, string url);
    private void LoadTokenizerJsonImpl(TokenizerJson tok);
    [AsyncStateMachineAttribute("FastBertTokenizer.BertTokenizer/<LoadVocabularyAsync>d__31")]
public Task LoadVocabularyAsync(string vocabTxtFilePath, bool convertInputToLowercase, string unknownToken, string clsToken, string sepToken, string padToken, NormalizationForm normalization);
    [AsyncStateMachineAttribute("FastBertTokenizer.BertTokenizer/<LoadVocabularyAsync>d__32")]
public Task LoadVocabularyAsync(TextReader vocabTxtFile, bool convertInputToLowercase, string unknownToken, string clsToken, string sepToken, string padToken, NormalizationForm normalization);
    public void LoadVocabulary(TextReader vocabTxtFile, bool convertInputToLowercase, string unknownToken, string clsToken, string sepToken, string padToken, NormalizationForm normalization);
    private Task LoadVocabularyImpl(bool execAsync, TextReader vocabTxtFile, bool convertInputToLowercase, string unknownToken, string clsToken, string sepToken, string padToken, NormalizationForm normalization);
    [NullableContextAttribute("0")]
public void Encode(ReadOnlyMemory`1<string> inputs, Memory`1<long> inputIds, Memory`1<long> attentionMask, Memory`1<long> tokenTypeIds, int maximumTokens);
    [NullableContextAttribute("0")]
public void Encode(ReadOnlyMemory`1<string> inputs, Memory`1<long> inputIds, Memory`1<long> attentionMask, int maximumTokens);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static bool <RemoveControlAndReplacement>g__NeedsRemoval|19_0(ReadOnlySpan`1<char> text);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static bool <RemoveDiacritics>g__NeedsRemoval|20_0(ReadOnlySpan`1<char> formD);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private int <TokenizeSubword>g__OnUnknown|21_0(ReadOnlySpan`1<char> word, Span`1<long> tokenIdSink, Int32& offset);
    [CompilerGeneratedAttribute]
internal static void <LoadTokenizerJsonImpl>g__HandleLine|30_1(string line, int tokenId, <>c__DisplayClass30_0& );
}
[ExtensionAttribute]
public static class FastBertTokenizer.BertTokenizerExtensions : object {
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("FastBertTokenizer.BertTokenizerExtensions/<LoadFromHuggingFaceAsync>d__0")]
[ExtensionAttribute]
public static Task LoadFromHuggingFaceAsync(BertTokenizer tokenizer, string huggingFaceRepo);
}
internal static class FastBertTokenizer.Constants : object {
    public static int StackallocByteThreshold;
    public static int StackallocCharThreshold;
}
internal static class FastBertTokenizer.Helpers : object {
    internal static int GetHashCode(ReadOnlySpan`1<char> span);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExperimentalAttribute("FBERTTOK001")]
internal class FastBertTokenizer.ParallelBatchEnumerator`1 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IAsyncEnumerator`1[] _enumerators;
    private Task`1[] _tasks;
    private int _currentIndex;
    public TokenizedBatch`1<TKey> Current { get; }
    public ParallelBatchEnumerator`1(int maxDegreeOfParallelism, Func`1<IAsyncEnumerator`1<TokenizedBatch`1<TKey>>> enumeratorFactory);
    public sealed virtual TokenizedBatch`1<TKey> get_Current();
    [AsyncStateMachineAttribute("FastBertTokenizer.ParallelBatchEnumerator`1/<DisposeAsync>d__6")]
public sealed virtual ValueTask DisposeAsync();
    public sealed virtual IAsyncEnumerator`1<TokenizedBatch`1<TKey>> GetAsyncEnumerator(CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("FastBertTokenizer.ParallelBatchEnumerator`1/<MoveNextAsync>d__8")]
public sealed virtual ValueTask`1<bool> MoveNextAsync();
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[CompilerFeatureRequiredAttribute("RefStructs")]
internal class FastBertTokenizer.PreTokenizerResult : ValueType {
    public ReadOnlySpan`1<char> Segment;
    public int SegmentStartIndex;
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[CompilerFeatureRequiredAttribute("RefStructs")]
internal class FastBertTokenizer.PreTokenizingEnumerator : ValueType {
    private bool _convertToLowercase;
    private int _inputOffset;
    private ReadOnlySpan`1<char> _input;
    private int start;
    private int currentIndex;
    [NullableAttribute("2")]
private Char[] buffer;
    [CompilerGeneratedAttribute]
private PreTokenizerResult <Current>k__BackingField;
    public PreTokenizerResult Current { get; private set; }
    [NullableContextAttribute("1")]
public PreTokenizingEnumerator(string input, bool convertToLowercase, NormalizationForm vocabNf, int inputOffset);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public PreTokenizerResult get_Current();
    [CompilerGeneratedAttribute]
private void set_Current(PreTokenizerResult value);
    public PreTokenizingEnumerator GetEnumerator();
    public bool MoveNext();
    public void Dispose();
    private bool Flush();
    private void ExpandBuffer();
    private static bool IsPunctuation(char cp);
    private static bool IsChineseCharacter(char cp);
}
[IsReadOnlyAttribute]
internal class FastBertTokenizer.StringSpanOrdinalKey : ValueType {
    public Char* Ptr;
    public int Length;
    [NullableAttribute("2")]
public string Data;
    private ReadOnlySpan`1<char> Span { get; }
    public StringSpanOrdinalKey(Char* ptr, int length);
    [NullableContextAttribute("1")]
public StringSpanOrdinalKey(string data);
    private ReadOnlySpan`1<char> get_Span();
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(StringSpanOrdinalKey other);
    public virtual int GetHashCode();
}
[ExtensionAttribute]
internal static class FastBertTokenizer.StringSpanOrdinalKeyDictExtensions : object {
    [ExtensionAttribute]
internal static bool TryGetValue(Dictionary`2<StringSpanOrdinalKey, long> dict, ReadOnlySpan`1<char> key, Int64& value);
}
[ExperimentalAttribute("FBERTTOK001")]
public class FastBertTokenizer.TokenizedBatch`1 : object {
    [CompilerGeneratedAttribute]
private Memory`1<long> <InputIds>k__BackingField;
    [CompilerGeneratedAttribute]
private Memory`1<long> <AttentionMask>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Memory`1<Nullable`1<TokenizedRange`1<TKey>>> <OutputCorrelation>k__BackingField;
    public Memory`1<long> InputIds { get; internal set; }
    public Memory`1<long> AttentionMask { get; internal set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Memory`1<Nullable`1<TokenizedRange`1<TKey>>> OutputCorrelation { get; public set; }
    [CompilerGeneratedAttribute]
public Memory`1<long> get_InputIds();
    [CompilerGeneratedAttribute]
internal void set_InputIds(Memory`1<long> value);
    [CompilerGeneratedAttribute]
public Memory`1<long> get_AttentionMask();
    [CompilerGeneratedAttribute]
internal void set_AttentionMask(Memory`1<long> value);
    [CompilerGeneratedAttribute]
public Memory`1<Nullable`1<TokenizedRange`1<TKey>>> get_OutputCorrelation();
    [CompilerGeneratedAttribute]
public void set_OutputCorrelation(Memory`1<Nullable`1<TokenizedRange`1<TKey>>> value);
}
[ExperimentalAttribute("FBERTTOK001")]
public class FastBertTokenizer.TokenizedRange`1 : ValueType {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private TKey <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <LastTokenizedWordStartIndex>k__BackingField;
    [NullableAttribute("1")]
public TKey Key { get; public set; }
    public int Offset { get; public set; }
    public Nullable`1<int> LastTokenizedWordStartIndex { get; public set; }
    [NullableContextAttribute("1")]
public TokenizedRange`1(TKey Key, int Offset, Nullable`1<int> LastTokenizedWordStartIndex);
    [IsReadOnlyAttribute]
[NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public TKey get_Key();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Key(TKey value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Offset();
    [CompilerGeneratedAttribute]
public void set_Offset(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Nullable`1<int> get_LastTokenizedWordStartIndex();
    [CompilerGeneratedAttribute]
public void set_LastTokenizedWordStartIndex(Nullable`1<int> value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(TokenizedRange`1<TKey> left, TokenizedRange`1<TKey> right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(TokenizedRange`1<TKey> left, TokenizedRange`1<TKey> right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(TokenizedRange`1<TKey> other);
    [IsReadOnlyAttribute]
[NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void Deconstruct(TKey& Key, Int32& Offset, Nullable`1& LastTokenizedWordStartIndex);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiredMemberAttribute]
internal class FastBertTokenizer.TokenizerJson : object {
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private AddedToken[] <AddedTokens>k__BackingField;
    [CompilerGeneratedAttribute]
private NormalizerSection <Normalizer>k__BackingField;
    [CompilerGeneratedAttribute]
private PreTokenizerSection <PreTokenizer>k__BackingField;
    [CompilerGeneratedAttribute]
private PostProcessorSection <PostProcessor>k__BackingField;
    [CompilerGeneratedAttribute]
private ModelSection <Model>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    [RequiredMemberAttribute]
public string Version { get; public set; }
    [RequiredMemberAttribute]
[JsonPropertyNameAttribute("added_tokens")]
public AddedToken[] AddedTokens { get; public set; }
    [RequiredMemberAttribute]
public NormalizerSection Normalizer { get; public set; }
    [RequiredMemberAttribute]
[JsonPropertyNameAttribute("pre_tokenizer")]
public PreTokenizerSection PreTokenizer { get; public set; }
    [RequiredMemberAttribute]
[JsonPropertyNameAttribute("post_processor")]
public PostProcessorSection PostProcessor { get; public set; }
    [RequiredMemberAttribute]
public ModelSection Model { get; public set; }
    [CompilerGeneratedAttribute]
[SetsRequiredMembersAttribute]
protected TokenizerJson(TokenizerJson original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Version(string value);
    [CompilerGeneratedAttribute]
public AddedToken[] get_AddedTokens();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_AddedTokens(AddedToken[] value);
    [CompilerGeneratedAttribute]
public NormalizerSection get_Normalizer();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Normalizer(NormalizerSection value);
    [CompilerGeneratedAttribute]
public PreTokenizerSection get_PreTokenizer();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_PreTokenizer(PreTokenizerSection value);
    [CompilerGeneratedAttribute]
public PostProcessorSection get_PostProcessor();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_PostProcessor(PostProcessorSection value);
    [CompilerGeneratedAttribute]
public ModelSection get_Model();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Model(ModelSection value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(TokenizerJson left, TokenizerJson right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(TokenizerJson left, TokenizerJson right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(TokenizerJson other);
    [CompilerGeneratedAttribute]
public virtual TokenizerJson <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[JsonSourceGenerationOptionsAttribute]
[JsonSerializableAttribute("FastBertTokenizer.TokenizerJson")]
[GeneratedCodeAttribute("System.Text.Json.SourceGeneration", "8.0.10.11423")]
internal class FastBertTokenizer.TokenizerJsonContext : JsonSerializerContext {
    [NullableAttribute("2")]
private JsonTypeInfo`1<bool> _Boolean;
    [NullableAttribute("2")]
private JsonTypeInfo`1<Nullable`1<bool>> _NullableBoolean;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private JsonTypeInfo`1<TokenizerJson> _TokenizerJson;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private JsonTypeInfo`1<AddedToken> _AddedToken;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private JsonTypeInfo`1<AddedToken[]> _AddedTokenArray;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private JsonTypeInfo`1<ModelSection> _ModelSection;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private JsonTypeInfo`1<NormalizerSection> _NormalizerSection;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private JsonTypeInfo`1<PostProcessorSection> _PostProcessorSection;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private JsonTypeInfo`1<SpecialTokenDetails> _SpecialTokenDetails;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private JsonTypeInfo`1<PreTokenizerSection> _PreTokenizerSection;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private JsonTypeInfo`1<Dictionary`2<string, SpecialTokenDetails>> _DictionaryStringSpecialTokenDetails;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private JsonTypeInfo`1<Dictionary`2<string, int>> _DictionaryStringInt32;
    [NullableAttribute("2")]
private JsonTypeInfo`1<int> _Int32;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private JsonTypeInfo`1<string> _String;
    private static JsonSerializerOptions s_defaultOptions;
    [CompilerGeneratedAttribute]
private static TokenizerJsonContext <Default>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private JsonSerializerOptions <GeneratedSerializerOptions>k__BackingField;
    private static JsonEncodedText PropName_Version;
    private static JsonEncodedText PropName_added_tokens;
    private static JsonEncodedText PropName_Normalizer;
    private static JsonEncodedText PropName_pre_tokenizer;
    private static JsonEncodedText PropName_post_processor;
    private static JsonEncodedText PropName_Model;
    private static JsonEncodedText PropName_Id;
    private static JsonEncodedText PropName_Content;
    private static JsonEncodedText PropName_Type;
    private static JsonEncodedText PropName_unk_token;
    private static JsonEncodedText PropName_continuing_subword_prefix;
    private static JsonEncodedText PropName_Vocab;
    private static JsonEncodedText PropName_clean_text;
    private static JsonEncodedText PropName_handle_chinese_chars;
    private static JsonEncodedText PropName_strip_accents;
    private static JsonEncodedText PropName_Lowercase;
    private static JsonEncodedText PropName_special_tokens;
    public JsonTypeInfo`1<bool> Boolean { get; }
    public JsonTypeInfo`1<Nullable`1<bool>> NullableBoolean { get; }
    public JsonTypeInfo`1<TokenizerJson> TokenizerJson { get; }
    public JsonTypeInfo`1<AddedToken> AddedToken { get; }
    public JsonTypeInfo`1<AddedToken[]> AddedTokenArray { get; }
    public JsonTypeInfo`1<ModelSection> ModelSection { get; }
    public JsonTypeInfo`1<NormalizerSection> NormalizerSection { get; }
    public JsonTypeInfo`1<PostProcessorSection> PostProcessorSection { get; }
    public JsonTypeInfo`1<SpecialTokenDetails> SpecialTokenDetails { get; }
    public JsonTypeInfo`1<PreTokenizerSection> PreTokenizerSection { get; }
    public JsonTypeInfo`1<Dictionary`2<string, SpecialTokenDetails>> DictionaryStringSpecialTokenDetails { get; }
    public JsonTypeInfo`1<Dictionary`2<string, int>> DictionaryStringInt32 { get; }
    public JsonTypeInfo`1<int> Int32 { get; }
    public JsonTypeInfo`1<string> String { get; }
    public static TokenizerJsonContext Default { get; }
    [NullableAttribute("2")]
protected JsonSerializerOptions GeneratedSerializerOptions { get; }
    public TokenizerJsonContext(JsonSerializerOptions options);
    private static TokenizerJsonContext();
    public JsonTypeInfo`1<bool> get_Boolean();
    private JsonTypeInfo`1<bool> Create_Boolean(JsonSerializerOptions options);
    public JsonTypeInfo`1<Nullable`1<bool>> get_NullableBoolean();
    private JsonTypeInfo`1<Nullable`1<bool>> Create_NullableBoolean(JsonSerializerOptions options);
    public JsonTypeInfo`1<TokenizerJson> get_TokenizerJson();
    private JsonTypeInfo`1<TokenizerJson> Create_TokenizerJson(JsonSerializerOptions options);
    private static JsonPropertyInfo[] TokenizerJsonPropInit(JsonSerializerOptions options);
    private void TokenizerJsonSerializeHandler(Utf8JsonWriter writer, TokenizerJson value);
    private static JsonParameterInfoValues[] TokenizerJsonCtorParamInit();
    public JsonTypeInfo`1<AddedToken> get_AddedToken();
    private JsonTypeInfo`1<AddedToken> Create_AddedToken(JsonSerializerOptions options);
    private static JsonPropertyInfo[] AddedTokenPropInit(JsonSerializerOptions options);
    private void AddedTokenSerializeHandler(Utf8JsonWriter writer, AddedToken value);
    private static JsonParameterInfoValues[] AddedTokenCtorParamInit();
    public JsonTypeInfo`1<AddedToken[]> get_AddedTokenArray();
    private JsonTypeInfo`1<AddedToken[]> Create_AddedTokenArray(JsonSerializerOptions options);
    private void AddedTokenArraySerializeHandler(Utf8JsonWriter writer, AddedToken[] value);
    public JsonTypeInfo`1<ModelSection> get_ModelSection();
    private JsonTypeInfo`1<ModelSection> Create_ModelSection(JsonSerializerOptions options);
    private static JsonPropertyInfo[] ModelSectionPropInit(JsonSerializerOptions options);
    private void ModelSectionSerializeHandler(Utf8JsonWriter writer, ModelSection value);
    private static JsonParameterInfoValues[] ModelSectionCtorParamInit();
    public JsonTypeInfo`1<NormalizerSection> get_NormalizerSection();
    private JsonTypeInfo`1<NormalizerSection> Create_NormalizerSection(JsonSerializerOptions options);
    private static JsonPropertyInfo[] NormalizerSectionPropInit(JsonSerializerOptions options);
    private void NormalizerSectionSerializeHandler(Utf8JsonWriter writer, NormalizerSection value);
    private static JsonParameterInfoValues[] NormalizerSectionCtorParamInit();
    public JsonTypeInfo`1<PostProcessorSection> get_PostProcessorSection();
    private JsonTypeInfo`1<PostProcessorSection> Create_PostProcessorSection(JsonSerializerOptions options);
    private static JsonPropertyInfo[] PostProcessorSectionPropInit(JsonSerializerOptions options);
    private void PostProcessorSectionSerializeHandler(Utf8JsonWriter writer, PostProcessorSection value);
    private static JsonParameterInfoValues[] PostProcessorSectionCtorParamInit();
    public JsonTypeInfo`1<SpecialTokenDetails> get_SpecialTokenDetails();
    private JsonTypeInfo`1<SpecialTokenDetails> Create_SpecialTokenDetails(JsonSerializerOptions options);
    private static JsonPropertyInfo[] SpecialTokenDetailsPropInit(JsonSerializerOptions options);
    private void SpecialTokenDetailsSerializeHandler(Utf8JsonWriter writer, SpecialTokenDetails value);
    private static JsonParameterInfoValues[] SpecialTokenDetailsCtorParamInit();
    public JsonTypeInfo`1<PreTokenizerSection> get_PreTokenizerSection();
    private JsonTypeInfo`1<PreTokenizerSection> Create_PreTokenizerSection(JsonSerializerOptions options);
    private static JsonPropertyInfo[] PreTokenizerSectionPropInit(JsonSerializerOptions options);
    private void PreTokenizerSectionSerializeHandler(Utf8JsonWriter writer, PreTokenizerSection value);
    private static JsonParameterInfoValues[] PreTokenizerSectionCtorParamInit();
    public JsonTypeInfo`1<Dictionary`2<string, SpecialTokenDetails>> get_DictionaryStringSpecialTokenDetails();
    private JsonTypeInfo`1<Dictionary`2<string, SpecialTokenDetails>> Create_DictionaryStringSpecialTokenDetails(JsonSerializerOptions options);
    private void DictionaryStringSpecialTokenDetailsSerializeHandler(Utf8JsonWriter writer, Dictionary`2<string, SpecialTokenDetails> value);
    public JsonTypeInfo`1<Dictionary`2<string, int>> get_DictionaryStringInt32();
    private JsonTypeInfo`1<Dictionary`2<string, int>> Create_DictionaryStringInt32(JsonSerializerOptions options);
    private void DictionaryStringInt32SerializeHandler(Utf8JsonWriter writer, Dictionary`2<string, int> value);
    public JsonTypeInfo`1<int> get_Int32();
    private JsonTypeInfo`1<int> Create_Int32(JsonSerializerOptions options);
    public JsonTypeInfo`1<string> get_String();
    private JsonTypeInfo`1<string> Create_String(JsonSerializerOptions options);
    [CompilerGeneratedAttribute]
public static TokenizerJsonContext get_Default();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected virtual JsonSerializerOptions get_GeneratedSerializerOptions();
    private static bool TryGetTypeInfoForRuntimeCustomConverter(JsonSerializerOptions options, JsonTypeInfo`1& jsonTypeInfo);
    private static JsonConverter GetRuntimeConverterForType(Type type, JsonSerializerOptions options);
    private static JsonConverter ExpandConverter(Type type, JsonConverter converter, JsonSerializerOptions options, bool validateCanConvert);
    public virtual JsonTypeInfo GetTypeInfo(Type type);
    private sealed virtual override JsonTypeInfo global::System.Text.Json.Serialization.Metadata.IJsonTypeInfoResolver.GetTypeInfo(Type type, JsonSerializerOptions options);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("6143")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.ExperimentalAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <DiagnosticId>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <UrlFormat>k__BackingField;
    public string DiagnosticId { get; }
    [NullableAttribute("2")]
public string UrlFormat { get; public set; }
    public ExperimentalAttribute(string diagnosticId);
    [CompilerGeneratedAttribute]
public string get_DiagnosticId();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_UrlFormat();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_UrlFormat(string value);
}
[AttributeUsageAttribute("32")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2432")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.StringSyntaxAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Syntax>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Object[] <Arguments>k__BackingField;
    public static string CompositeFormat;
    public static string DateOnlyFormat;
    public static string DateTimeFormat;
    public static string EnumFormat;
    public static string GuidFormat;
    public static string Json;
    public static string NumericFormat;
    public static string Regex;
    public static string TimeOnlyFormat;
    public static string TimeSpanFormat;
    public static string Uri;
    public static string Xml;
    public string Syntax { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[] Arguments { get; }
    public StringSyntaxAttribute(string syntax);
    public StringSyntaxAttribute(string syntax, Object[] arguments);
    [CompilerGeneratedAttribute]
public string get_Syntax();
    [CompilerGeneratedAttribute]
public Object[] get_Arguments();
}
[AttributeUsageAttribute("2240")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.UnscopedRefAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1036")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.CompilerServices.CollectionBuilderAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <BuilderType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MethodName>k__BackingField;
    public Type BuilderType { get; }
    public string MethodName { get; }
    public CollectionBuilderAttribute(Type builderType, string methodName);
    [CompilerGeneratedAttribute]
public Type get_BuilderType();
    [CompilerGeneratedAttribute]
public string get_MethodName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("32767")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <FeatureName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOptional>k__BackingField;
    public static string RefStructs;
    public static string RequiredMembers;
    public string FeatureName { get; }
    public bool IsOptional { get; public set; }
    public CompilerFeatureRequiredAttribute(string featureName);
    [CompilerGeneratedAttribute]
public string get_FeatureName();
    [CompilerGeneratedAttribute]
public bool get_IsOptional();
    [CompilerGeneratedAttribute]
public void set_IsOptional(bool value);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[AttributeUsageAttribute("396")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.CompilerServices.RequiredMemberAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
[EditorBrowsableAttribute("1")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.CompilerServices.RequiresLocationAttribute : Attribute {
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.6.133.12845")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyConfiguration;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyVersion;
    internal static DateTime GitCommitDate;
    internal static string GitCommitId;
    internal static bool IsPrerelease;
    internal static bool IsPublicRelease;
    internal static string RootNamespace;
    private static ThisAssembly();
}
