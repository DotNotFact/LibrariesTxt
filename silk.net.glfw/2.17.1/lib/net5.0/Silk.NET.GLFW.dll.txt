[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public enum Silk.NET.GLFW.AnglePlatformType : Enum {
    public int value__;
    public static AnglePlatformType None;
    public static AnglePlatformType OpenGL;
    public static AnglePlatformType OpenGLES;
    public static AnglePlatformType D3D9;
    public static AnglePlatformType D3D11;
    public static AnglePlatformType Vulkan;
    public static AnglePlatformType Metal;
}
public enum Silk.NET.GLFW.Bool : Enum {
    public int value__;
    public static Bool False;
    public static Bool True;
}
public enum Silk.NET.GLFW.ClientApi : Enum {
    public int value__;
    public static ClientApi NoApi;
    public static ClientApi OpenGL;
    public static ClientApi OpenGLES;
}
public enum Silk.NET.GLFW.ConnectedState : Enum {
    public int value__;
    public static ConnectedState Connected;
    public static ConnectedState Disconnected;
}
public enum Silk.NET.GLFW.ContextApi : Enum {
    public int value__;
    public static ContextApi NativeContextApi;
    public static ContextApi EglContextApi;
}
public class Silk.NET.GLFW.Cursor : ValueType {
}
public enum Silk.NET.GLFW.CursorModeValue : Enum {
    public int value__;
    public static CursorModeValue CursorNormal;
    public static CursorModeValue CursorHidden;
    public static CursorModeValue CursorDisabled;
}
public enum Silk.NET.GLFW.CursorShape : Enum {
    public int value__;
    public static CursorShape Arrow;
    public static CursorShape IBeam;
    public static CursorShape Crosshair;
    public static CursorShape Hand;
    public static CursorShape HResize;
    public static CursorShape VResize;
}
public enum Silk.NET.GLFW.CursorStateAttribute : Enum {
    public int value__;
    public static CursorStateAttribute Cursor;
    public static CursorStateAttribute RawMouseMotion;
}
public enum Silk.NET.GLFW.ErrorCode : Enum {
    public int value__;
    public static ErrorCode NoError;
    public static ErrorCode NotInitialized;
    public static ErrorCode NoContext;
    public static ErrorCode InvalidEnum;
    public static ErrorCode InvalidValue;
    public static ErrorCode OutOfMemory;
    public static ErrorCode ApiUnavailable;
    public static ErrorCode VersionUnavailable;
    public static ErrorCode PlatformError;
    public static ErrorCode FormatUnavailable;
    public static ErrorCode NoWindowContext;
}
public enum Silk.NET.GLFW.GamepadButton : Enum {
    public int value__;
    public static GamepadButton A;
    public static GamepadButton B;
    public static GamepadButton X;
    public static GamepadButton Y;
    public static GamepadButton LeftBumper;
    public static GamepadButton RightBumper;
    public static GamepadButton Back;
    public static GamepadButton Start;
    public static GamepadButton Home;
    public static GamepadButton LeftStick;
    public static GamepadButton RightStick;
    public static GamepadButton DPadUp;
    public static GamepadButton DPadRight;
    public static GamepadButton DPadDown;
    public static GamepadButton DPadLeft;
}
public class Silk.NET.GLFW.GamepadState : ValueType {
    [FixedBufferAttribute("System.Byte", "15")]
public <Buttons>e__FixedBuffer Buttons;
    [FixedBufferAttribute("System.Single", "15")]
public <Axes>e__FixedBuffer Axes;
}
public class Silk.NET.GLFW.GammaRamp : ValueType {
    public Int16* Red;
    public Int16* Green;
    public Int16* Blue;
    public UInt32 Size;
}
[NativeApiAttribute]
public class Silk.NET.GLFW.Glfw : NativeAPI {
    public static int DontCare;
    private static bool _isWindows;
    private static List`1<Exception> _exceptions;
    [CompilerGeneratedAttribute]
private static ErrorCallback <ErrorCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private SearchPathContainer <SearchPaths>k__BackingField;
    public static ErrorCallback ErrorCallback { get; }
    public SearchPathContainer SearchPaths { get; }
    protected Glfw(INativeContext ctx);
    private static Glfw();
    [CompilerGeneratedAttribute]
public static ErrorCallback get_ErrorCallback();
    public static void ThrowExceptions();
    [CompilerGeneratedAttribute]
public SearchPathContainer get_SearchPaths();
    public bool Init();
    public void Terminate();
    public void InitHint(InitHint hint, bool value);
    public void InitHint(InitHint hint, int value);
    public void GetVersion(Int32& major, Int32& minor, Int32& revision);
    public string GetVersionString();
    public ErrorCode GetError(Byte*& description);
    public Monitor** GetMonitors(Int32& count);
    public void GetMonitorPos(Monitor* monitor, Int32& x, Int32& y);
    public void GetMonitorPhysicalSize(Monitor* monitor, Int32& width, Int32& height);
    public void GetMonitorContentScale(Monitor* monitor, Single& xscale, Single& yscale);
    public string GetMonitorName(Monitor* monitor);
    public void SetMonitorUserPointer(Monitor* monitor, IntPtr pointer);
    public IntPtr GetMonitorUserPointer(Monitor* monitor);
    public VideoMode* GetVideoModes(Monitor* monitor, Int32& count);
    public void SetGamma(Monitor* monitor, float gamma);
    public GammaRamp* GetGammaRamp(Monitor* monitor);
    public void SetGammaRamp(Monitor* monitor, GammaRamp& ramp);
    public void DefaultWindowHints();
    public void WindowHintString(int hint, string value);
    public void SetWindowSizeLimits(WindowHandle* window, int minwidth, int minheight, int maxwidth, int maxheight);
    public void SetWindowAspectRatio(WindowHandle* window, int numer, int denom);
    public void GetWindowFrameSize(WindowHandle* window, Int32& left, Int32& top, Int32& right, Int32& bottom);
    public float GetWindowOpacity(WindowHandle* window);
    public void SetWindowOpacity(WindowHandle* window, float opacity);
    public void RequestWindowAttention(WindowHandle* window);
    public void SetWindowAttrib(WindowHandle* window, WindowAttributeSetter attrib, bool value);
    public bool RawMouseMotionSupported();
    public string GetKeyName(int key, int scancode);
    public int GetKeyScancode(int key);
    public int GetKey(WindowHandle* window, Keys key);
    public int GetMouseButton(WindowHandle* window, int button);
    public void GetCursorPos(WindowHandle* window, Double& xpos, Double& ypos);
    public void SetCursorPos(WindowHandle* window, double xpos, double ypos);
    public Cursor* CreateCursor(Image* image, int xhot, int yhot);
    public Cursor* CreateStandardCursor(CursorShape shape);
    public void DestroyCursor(Cursor* cursor);
    public void SetCursor(WindowHandle* window, Cursor* cursor);
    public bool JoystickPresent(int jid);
    public Single* GetJoystickAxes(int jid, Int32& count);
    public Byte* GetJoystickButtons(int jid, Int32& count);
    public JoystickHats* GetJoystickHats(int jid, Int32& count);
    public string GetJoystickName(int jid);
    public string GetJoystickGUID(int jid);
    public void SetJoystickUserPointer(int jid, IntPtr ptr);
    public IntPtr GetJoystickUserPointer(int jid);
    public bool JoystickIsGamepad(int jid);
    public bool UpdateGamepadMappings(string newMapping);
    public string GetGamepadName(int jid);
    public bool GetGamepadState(int jid, GamepadState& state);
    public double GetTime();
    public void SetTime(double time);
    public long GetTimerValue();
    public long GetTimerFrequency();
    public WindowHandle* GetCurrentContext();
    public void SwapBuffers(WindowHandle* window);
    public bool ExtensionSupported(string extensionName);
    public WindowHandle* CreateWindow(int width, int height, string title, Monitor* monitor, WindowHandle* share);
    public Monitor* GetPrimaryMonitor();
    public void DestroyWindow(WindowHandle* window);
    public void FocusWindow(WindowHandle* window);
    public void GetFramebufferSize(WindowHandle* window, Int32& width, Int32& height);
    public int GetInputMode(WindowHandle* window, CursorStateAttribute mode);
    public bool GetInputMode(WindowHandle* window, StickyAttributes mode);
    public void RestoreWindow(WindowHandle* window);
    public VideoMode* GetVideoMode(Monitor* monitor);
    public bool GetWindowAttrib(WindowHandle* window, WindowAttributeGetter attribute);
    public void GetWindowSize(WindowHandle* window, Int32& width, Int32& height);
    public void GetWindowPos(WindowHandle* window, Int32& x, Int32& y);
    public Monitor* GetWindowMonitor(WindowHandle* window);
    public void HideWindow(WindowHandle* window);
    public void IconifyWindow(WindowHandle* window);
    public void MakeContextCurrent(WindowHandle* window);
    public void MaximizeWindow(WindowHandle* window);
    public void PollEvents();
    public void PostEmptyEvent();
    public void WindowHint(WindowHintInt hint, int value);
    public void WindowHint(WindowHintBool hint, bool value);
    public void WindowHint(WindowHintClientApi hint, ClientApi value);
    public void WindowHint(WindowHintReleaseBehavior hint, ReleaseBehavior value);
    public void WindowHint(WindowHintContextApi hint, ContextApi value);
    public void WindowHint(WindowHintRobustness hint, Robustness value);
    public void WindowHint(WindowHintOpenGlProfile hint, OpenGlProfile value);
    public bool WindowShouldClose(WindowHandle* window);
    public CharCallback SetCharCallback(WindowHandle* window, CharCallback callback);
    public CharModsCallback SetCharModsCallback(WindowHandle* window, CharModsCallback callback);
    public CursorEnterCallback SetCursorEnterCallback(WindowHandle* window, CursorEnterCallback callback);
    public CursorPosCallback SetCursorPosCallback(WindowHandle* window, CursorPosCallback callback);
    public DropCallback SetDropCallback(WindowHandle* window, DropCallback callback);
    public ErrorCallback SetErrorCallback(ErrorCallback callback);
    public void SetInputMode(WindowHandle* window, CursorStateAttribute mode, CursorModeValue value);
    public void SetInputMode(WindowHandle* window, CursorStateAttribute mode, bool value);
    public void SetInputMode(WindowHandle* window, StickyAttributes mode, bool value);
    public JoystickCallback SetJoystickCallback(JoystickCallback callback);
    public KeyCallback SetKeyCallback(WindowHandle* window, KeyCallback callback);
    public ScrollCallback SetScrollCallback(WindowHandle* window, ScrollCallback callback);
    public MonitorCallback SetMonitorCallback(MonitorCallback callback);
    public MouseButtonCallback SetMouseButtonCallback(WindowHandle* window, MouseButtonCallback callback);
    public WindowCloseCallback SetWindowCloseCallback(WindowHandle* window, WindowCloseCallback callback);
    public WindowFocusCallback SetWindowFocusCallback(WindowHandle* window, WindowFocusCallback callback);
    public void SetWindowIcon(WindowHandle* window, int count, Image* images);
    public WindowIconifyCallback SetWindowIconifyCallback(WindowHandle* window, WindowIconifyCallback callback);
    public WindowMaximizeCallback SetWindowMaximizeCallback(WindowHandle* window, WindowMaximizeCallback callback);
    public void SetWindowTitle(WindowHandle* window, string title);
    public void ShowWindow(WindowHandle* window);
    public void SetWindowSize(WindowHandle* window, int width, int height);
    public WindowSizeCallback SetWindowSizeCallback(WindowHandle* window, WindowSizeCallback callback);
    public FramebufferSizeCallback SetFramebufferSizeCallback(WindowHandle* window, FramebufferSizeCallback callback);
    public void SetWindowShouldClose(WindowHandle* window, bool value);
    public void SetWindowMonitor(WindowHandle* window, Monitor* monitor, int x, int y, int width, int height, int refreshRate);
    public void SetWindowPos(WindowHandle* window, int x, int y);
    public WindowPosCallback SetWindowPosCallback(WindowHandle* window, WindowPosCallback callback);
    public WindowRefreshCallback SetWindowRefreshCallback(WindowHandle* window, WindowRefreshCallback callback);
    public void SwapInterval(int interval);
    public void WaitEvents();
    public void WaitEventsTimeout(double timeout);
    public string GetClipboardString(WindowHandle* window);
    public void SetClipboardString(WindowHandle* window, string data);
    public bool VulkanSupported();
    public Byte** GetRequiredInstanceExtensions(UInt32& count);
    public IntPtr GetInstanceProcAddress(VkHandle instance, Byte* procName);
    public bool GetPhysicalDevicePresentationSupport(VkHandle instance, VkHandle device, int queueFamily);
    public int CreateWindowSurface(VkHandle instance, WindowHandle* window, Void* allocator, VkNonDispatchableHandle* surface);
    public IntPtr GetProcAddress(string name);
    public void GetMonitorWorkarea(Monitor* monitor, Int32& x, Int32& y, Int32& width, Int32& height);
    public static Glfw GetApi();
    public virtual bool IsExtensionPresent(string name);
    protected virtual int CoreGcSlotCount();
    protected sealed virtual IVTable CreateVTable();
    [ObsoleteAttribute("This function is obsolete! Please use the string[] overload!")]
public static INativeContext CreateDefaultContext(string n);
    public static INativeContext CreateDefaultContext(String[] n);
}
public static class Silk.NET.GLFW.GlfwCallbacks : object {
}
public class Silk.NET.GLFW.GlfwContext : object {
    private Glfw _glfw;
    private WindowHandle* _window;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IGLContextSource <Source>k__BackingField;
    [NativeIntegerAttribute]
public IntPtr Handle { get; }
    [NullableAttribute("2")]
public IGLContextSource Source { get; }
    public bool IsCurrent { get; }
    public GlfwContext(Glfw glfw, WindowHandle* window, IGLContextSource source);
    public sealed virtual IntPtr GetProcAddress(string proc, Nullable`1<int> slot);
    public sealed virtual bool TryGetProcAddress(string proc, IntPtr& addr, Nullable`1<int> slot);
    public sealed virtual IntPtr get_Handle();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual IGLContextSource get_Source();
    public sealed virtual bool get_IsCurrent();
    public sealed virtual void SwapInterval(int interval);
    public sealed virtual void SwapBuffers();
    public sealed virtual void MakeCurrent();
    public sealed virtual void Clear();
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
internal static void <GetProcAddress>g__Throw|3_0(string proc);
}
public class Silk.NET.GLFW.GlfwException : Exception {
    [CompilerGeneratedAttribute]
private ErrorCode <ErrorCode>k__BackingField;
    public ErrorCode ErrorCode { get; public set; }
    public GlfwException(string message);
    public GlfwException(string message, Exception innerException);
    protected GlfwException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public ErrorCode get_ErrorCode();
    [CompilerGeneratedAttribute]
public void set_ErrorCode(ErrorCode value);
}
internal class Silk.NET.GLFW.GlfwLibraryNameContainer : SearchPathContainer {
    public String[] Linux { get; }
    public String[] MacOS { get; }
    public String[] Android { get; }
    public String[] IOS { get; }
    public String[] Windows64 { get; }
    public String[] Windows86 { get; }
    public virtual String[] get_Linux();
    public virtual String[] get_MacOS();
    public virtual String[] get_Android();
    public virtual String[] get_IOS();
    public virtual String[] get_Windows64();
    public virtual String[] get_Windows86();
}
public class Silk.NET.GLFW.GlfwNativeWindow : ValueType {
    private static int GwlpHInstance;
    [CompilerGeneratedAttribute]
private NativeWindowFlags <Kind>k__BackingField;
    [NativeIntegerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Nullable`1<ValueTuple`2<IntPtr, UIntPtr>> <X11>k__BackingField;
    [NativeIntegerAttribute]
[CompilerGeneratedAttribute]
private Nullable`1<IntPtr> <Cocoa>k__BackingField;
    [NativeIntegerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Nullable`1<ValueTuple`2<IntPtr, IntPtr>> <Wayland>k__BackingField;
    [NativeIntegerAttribute]
[CompilerGeneratedAttribute]
private Nullable`1<IntPtr> <WinRT>k__BackingField;
    [NativeIntegerAttribute]
[TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Nullable`1<ValueTuple`4<IntPtr, UInt32, UInt32, UInt32>> <UIKit>k__BackingField;
    [NativeIntegerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Nullable`1<ValueTuple`3<IntPtr, IntPtr, IntPtr>> <Win32>k__BackingField;
    [NativeIntegerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Nullable`1<ValueTuple`2<IntPtr, IntPtr>> <Vivante>k__BackingField;
    [NativeIntegerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Nullable`1<ValueTuple`2<IntPtr, IntPtr>> <Android>k__BackingField;
    [NativeIntegerAttribute]
[CompilerGeneratedAttribute]
private Nullable`1<IntPtr> <Glfw>k__BackingField;
    [NativeIntegerAttribute]
[CompilerGeneratedAttribute]
private Nullable`1<IntPtr> <Sdl>k__BackingField;
    [NativeIntegerAttribute]
[CompilerGeneratedAttribute]
private Nullable`1<IntPtr> <DXHandle>k__BackingField;
    [NativeIntegerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Nullable`1<ValueTuple`2<Nullable`1<IntPtr>, Nullable`1<IntPtr>>> <EGL>k__BackingField;
    public NativeWindowFlags Kind { get; }
    [NativeIntegerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Nullable`1<ValueTuple`2<IntPtr, UIntPtr>> X11 { get; }
    [NativeIntegerAttribute]
public Nullable`1<IntPtr> Cocoa { get; }
    [NativeIntegerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Nullable`1<ValueTuple`2<IntPtr, IntPtr>> Wayland { get; }
    [NativeIntegerAttribute]
public Nullable`1<IntPtr> WinRT { get; }
    [NativeIntegerAttribute]
[TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Nullable`1<ValueTuple`4<IntPtr, UInt32, UInt32, UInt32>> UIKit { get; }
    [NativeIntegerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Nullable`1<ValueTuple`3<IntPtr, IntPtr, IntPtr>> Win32 { get; }
    [NativeIntegerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Nullable`1<ValueTuple`2<IntPtr, IntPtr>> Vivante { get; }
    [NativeIntegerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Nullable`1<ValueTuple`2<IntPtr, IntPtr>> Android { get; }
    [NativeIntegerAttribute]
public Nullable`1<IntPtr> Glfw { get; }
    [NativeIntegerAttribute]
public Nullable`1<IntPtr> Sdl { get; }
    [NativeIntegerAttribute]
public Nullable`1<IntPtr> DXHandle { get; }
    [NativeIntegerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Nullable`1<ValueTuple`2<Nullable`1<IntPtr>, Nullable`1<IntPtr>>> EGL { get; }
    public GlfwNativeWindow(Glfw api, WindowHandle* window);
    private static IntPtr Win32GetDC(IntPtr hwnd);
    private static IntPtr GetWindowLongPtr32(IntPtr hWnd, int nIndex);
    private static IntPtr GetWindowLongPtr64(IntPtr hWnd, int nIndex);
    private static IntPtr GetWindowLongPtr(IntPtr hWnd, int nIndex);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual NativeWindowFlags get_Kind();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual Nullable`1<ValueTuple`2<IntPtr, UIntPtr>> get_X11();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual Nullable`1<IntPtr> get_Cocoa();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual Nullable`1<ValueTuple`2<IntPtr, IntPtr>> get_Wayland();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual Nullable`1<IntPtr> get_WinRT();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual Nullable`1<ValueTuple`4<IntPtr, UInt32, UInt32, UInt32>> get_UIKit();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual Nullable`1<ValueTuple`3<IntPtr, IntPtr, IntPtr>> get_Win32();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual Nullable`1<ValueTuple`2<IntPtr, IntPtr>> get_Vivante();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual Nullable`1<ValueTuple`2<IntPtr, IntPtr>> get_Android();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual Nullable`1<IntPtr> get_Glfw();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual Nullable`1<IntPtr> get_Sdl();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual Nullable`1<IntPtr> get_DXHandle();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual Nullable`1<ValueTuple`2<Nullable`1<IntPtr>, Nullable`1<IntPtr>>> get_EGL();
}
public static class Silk.NET.GLFW.GlfwProvider : object {
    [CompilerGeneratedAttribute]
private static Lazy`1<Glfw> <UninitializedGLFW>k__BackingField;
    [CompilerGeneratedAttribute]
private static Lazy`1<Glfw> <GLFW>k__BackingField;
    public static Lazy`1<Glfw> UninitializedGLFW { get; internal set; }
    public static Lazy`1<Glfw> GLFW { get; internal set; }
    private static GlfwProvider();
    private static Glfw GetGlfw();
    [CompilerGeneratedAttribute]
public static Lazy`1<Glfw> get_UninitializedGLFW();
    [CompilerGeneratedAttribute]
internal static void set_UninitializedGLFW(Lazy`1<Glfw> value);
    [CompilerGeneratedAttribute]
public static Lazy`1<Glfw> get_GLFW();
    [CompilerGeneratedAttribute]
internal static void set_GLFW(Lazy`1<Glfw> value);
    public static void Unload();
}
public class Silk.NET.GLFW.Image : ValueType {
    [CompilerGeneratedAttribute]
private int <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte* <Pixels>k__BackingField;
    public int Width { get; public set; }
    public int Height { get; public set; }
    public Byte* Pixels { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Byte* get_Pixels();
    [CompilerGeneratedAttribute]
public void set_Pixels(Byte* value);
}
public enum Silk.NET.GLFW.InitHint : Enum {
    public int value__;
    public static InitHint JoystickHatButtons;
    public static InitHint AnglePlatformType;
    public static InitHint CocoaChdirResources;
    public static InitHint CocoaMenubar;
}
public enum Silk.NET.GLFW.InputAction : Enum {
    public int value__;
    public static InputAction Press;
    public static InputAction Release;
    public static InputAction Repeat;
}
public enum Silk.NET.GLFW.JoystickHats : Enum {
    public byte value__;
    public static JoystickHats Centered;
    public static JoystickHats Up;
    public static JoystickHats Right;
    public static JoystickHats Down;
    public static JoystickHats Left;
    public static JoystickHats RightUp;
    public static JoystickHats RightDown;
    public static JoystickHats LeftUp;
    public static JoystickHats LeftDown;
}
public enum Silk.NET.GLFW.KeyModifiers : Enum {
    public int value__;
    public static KeyModifiers Shift;
    public static KeyModifiers Control;
    public static KeyModifiers Alt;
    public static KeyModifiers Super;
}
public enum Silk.NET.GLFW.Keys : Enum {
    public int value__;
    public static Keys Unknown;
    public static Keys Space;
    public static Keys Apostrophe;
    public static Keys Comma;
    public static Keys Minus;
    public static Keys Period;
    public static Keys Slash;
    public static Keys Number0;
    public static Keys D0;
    public static Keys Number1;
    public static Keys Number2;
    public static Keys Number3;
    public static Keys Number4;
    public static Keys Number5;
    public static Keys Number6;
    public static Keys Number7;
    public static Keys Number8;
    public static Keys Number9;
    public static Keys Semicolon;
    public static Keys Equal;
    public static Keys A;
    public static Keys B;
    public static Keys C;
    public static Keys D;
    public static Keys E;
    public static Keys F;
    public static Keys G;
    public static Keys H;
    public static Keys I;
    public static Keys J;
    public static Keys K;
    public static Keys L;
    public static Keys M;
    public static Keys N;
    public static Keys O;
    public static Keys P;
    public static Keys Q;
    public static Keys R;
    public static Keys S;
    public static Keys T;
    public static Keys U;
    public static Keys V;
    public static Keys W;
    public static Keys X;
    public static Keys Y;
    public static Keys Z;
    public static Keys LeftBracket;
    public static Keys BackSlash;
    public static Keys RightBracket;
    public static Keys GraveAccent;
    public static Keys World1;
    public static Keys World2;
    public static Keys Escape;
    public static Keys Enter;
    public static Keys Tab;
    public static Keys Backspace;
    public static Keys Insert;
    public static Keys Delete;
    public static Keys Right;
    public static Keys Left;
    public static Keys Down;
    public static Keys Up;
    public static Keys PageUp;
    public static Keys PageDown;
    public static Keys Home;
    public static Keys End;
    public static Keys CapsLock;
    public static Keys ScrollLock;
    public static Keys NumLock;
    public static Keys PrintScreen;
    public static Keys Pause;
    public static Keys F1;
    public static Keys F2;
    public static Keys F3;
    public static Keys F4;
    public static Keys F5;
    public static Keys F6;
    public static Keys F7;
    public static Keys F8;
    public static Keys F9;
    public static Keys F10;
    public static Keys F11;
    public static Keys F12;
    public static Keys F13;
    public static Keys F14;
    public static Keys F15;
    public static Keys F16;
    public static Keys F17;
    public static Keys F18;
    public static Keys F19;
    public static Keys F20;
    public static Keys F21;
    public static Keys F22;
    public static Keys F23;
    public static Keys F24;
    public static Keys F25;
    public static Keys Keypad0;
    public static Keys Keypad1;
    public static Keys Keypad2;
    public static Keys Keypad3;
    public static Keys Keypad4;
    public static Keys Keypad5;
    public static Keys Keypad6;
    public static Keys Keypad7;
    public static Keys Keypad8;
    public static Keys Keypad9;
    public static Keys KeypadDecimal;
    public static Keys KeypadDivide;
    public static Keys KeypadMultiply;
    public static Keys KeypadSubtract;
    public static Keys KeypadAdd;
    public static Keys KeypadEnter;
    public static Keys KeypadEqual;
    public static Keys ShiftLeft;
    public static Keys ControlLeft;
    public static Keys AltLeft;
    public static Keys SuperLeft;
    public static Keys ShiftRight;
    public static Keys ControlRight;
    public static Keys AltRight;
    public static Keys SuperRight;
    public static Keys Menu;
    public static Keys LastKey;
}
public class Silk.NET.GLFW.Monitor : ValueType {
}
public enum Silk.NET.GLFW.MouseButton : Enum {
    public int value__;
    public static MouseButton Left;
    public static MouseButton Right;
    public static MouseButton Middle;
    public static MouseButton Button4;
    public static MouseButton Button5;
    public static MouseButton Button6;
    public static MouseButton Button7;
    public static MouseButton Button8;
}
public enum Silk.NET.GLFW.OpenGlProfile : Enum {
    public int value__;
    public static OpenGlProfile Any;
    public static OpenGlProfile Core;
    public static OpenGlProfile Compat;
}
public enum Silk.NET.GLFW.ReleaseBehavior : Enum {
    public int value__;
    public static ReleaseBehavior Any;
    public static ReleaseBehavior Flush;
    public static ReleaseBehavior None;
}
public enum Silk.NET.GLFW.Robustness : Enum {
    public int value__;
    public static Robustness NoRobustness;
    public static Robustness NoResetNotification;
    public static Robustness LoseContextOnReset;
}
public enum Silk.NET.GLFW.StickyAttributes : Enum {
    public int value__;
    public static StickyAttributes StickyKeys;
    public static StickyAttributes StickyMouseButtons;
}
public class Silk.NET.GLFW.VideoMode : ValueType {
    [CompilerGeneratedAttribute]
private int <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RedBits>k__BackingField;
    [CompilerGeneratedAttribute]
private int <GreenBits>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BlueBits>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RefreshRate>k__BackingField;
    public int Width { get; }
    public int Height { get; }
    public int RedBits { get; }
    public int GreenBits { get; }
    public int BlueBits { get; }
    public int RefreshRate { get; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Width();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Height();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_RedBits();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_GreenBits();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_BlueBits();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_RefreshRate();
}
public enum Silk.NET.GLFW.WindowAttributeGetter : Enum {
    public int value__;
    public static WindowAttributeGetter Focused;
    public static WindowAttributeGetter Iconified;
    public static WindowAttributeGetter Resizable;
    public static WindowAttributeGetter Visible;
    public static WindowAttributeGetter Decorated;
    public static WindowAttributeGetter AutoIconify;
    public static WindowAttributeGetter Floating;
    public static WindowAttributeGetter Maximized;
    public static WindowAttributeGetter CenterCursor;
    public static WindowAttributeGetter TransparentFramebuffer;
    public static WindowAttributeGetter Hovered;
    public static WindowAttributeGetter FocusOnShow;
}
public enum Silk.NET.GLFW.WindowAttributeSetter : Enum {
    public int value__;
    public static WindowAttributeSetter Resizable;
    public static WindowAttributeSetter Decorated;
    public static WindowAttributeSetter AutoIconify;
    public static WindowAttributeSetter Floating;
    public static WindowAttributeSetter FocusOnShow;
}
public class Silk.NET.GLFW.WindowHandle : ValueType {
}
public enum Silk.NET.GLFW.WindowHintBool : Enum {
    public int value__;
    public static WindowHintBool Focused;
    public static WindowHintBool Iconified;
    public static WindowHintBool Resizable;
    public static WindowHintBool Visible;
    public static WindowHintBool Decorated;
    public static WindowHintBool AutoIconify;
    public static WindowHintBool Floating;
    public static WindowHintBool Maximized;
    public static WindowHintBool CenterCursor;
    public static WindowHintBool TransparentFramebuffer;
    public static WindowHintBool Hovered;
    public static WindowHintBool FocusOnShow;
    public static WindowHintBool OpenGLForwardCompat;
    public static WindowHintBool OpenGLDebugContext;
    public static WindowHintBool ContextNoError;
    public static WindowHintBool Stereo;
    public static WindowHintBool DoubleBuffer;
    public static WindowHintBool SrgbCapable;
}
public enum Silk.NET.GLFW.WindowHintClientApi : Enum {
    public int value__;
    public static WindowHintClientApi ClientApi;
}
public enum Silk.NET.GLFW.WindowHintContextApi : Enum {
    public int value__;
    public static WindowHintContextApi ContextCreationApi;
}
public enum Silk.NET.GLFW.WindowHintInt : Enum {
    public int value__;
    public static WindowHintInt ContextVersionMajor;
    public static WindowHintInt ContextVersionMinor;
    public static WindowHintInt ContextRevision;
    public static WindowHintInt RedBits;
    public static WindowHintInt GreenBits;
    public static WindowHintInt BlueBits;
    public static WindowHintInt AlphaBits;
    public static WindowHintInt DepthBits;
    public static WindowHintInt StencilBits;
    public static WindowHintInt AccumRedBits;
    public static WindowHintInt AccumGreenBits;
    public static WindowHintInt AccumBlueBits;
    public static WindowHintInt AccumAlphaBits;
    public static WindowHintInt AuxBuffers;
    public static WindowHintInt Samples;
    public static WindowHintInt RefreshRate;
}
public enum Silk.NET.GLFW.WindowHintOpenGlProfile : Enum {
    public int value__;
    public static WindowHintOpenGlProfile OpenGlProfile;
}
public enum Silk.NET.GLFW.WindowHintReleaseBehavior : Enum {
    public int value__;
    public static WindowHintReleaseBehavior ContextReleaseBehavior;
}
public enum Silk.NET.GLFW.WindowHintRobustness : Enum {
    public int value__;
    public static WindowHintRobustness ContextRobustness;
}
public enum Silk.NET.GLFW.WindowHintString : Enum {
    public int value__;
    public static WindowHintString CocoaFrameName;
    public static WindowHintString X11ClassName;
    public static WindowHintString X11InstanceName;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NativeIntegerAttribute : Attribute {
    public Boolean[] TransformFlags;
    public NativeIntegerAttribute(Boolean[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
