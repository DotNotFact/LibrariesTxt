public class Microsoft.Spark.Extensions.DotNet.Interactive.AssemblyKernelExtension : object {
    private static string TempDirEnvVar;
    private static string PreserveTempDirEnvVar;
    private PackageResolver _packageResolver;
    public sealed virtual Task OnLoadAsync(Kernel kernel);
    private DirectoryInfo CreateTempDirectory();
    private bool TryEmitAssembly(CSharpKernel kernel, string dstPath, String& assemblyPath);
    private bool TryGetSparkSession(SparkSession& sparkSession);
    [IteratorStateMachineAttribute("Microsoft.Spark.Extensions.DotNet.Interactive.AssemblyKernelExtension/<GetPackageFiles>d__7")]
private IEnumerable`1<string> GetPackageFiles(string path);
    private bool IsPathValid(string path);
}
internal class Microsoft.Spark.Extensions.DotNet.Interactive.PackageResolver : object {
    private SupportNugetWrapper _supportNugetWrapper;
    private ConcurrentDictionary`2<string, byte> _filesCopied;
    private long _metadataCounter;
    internal PackageResolver(SupportNugetWrapper supportNugetWrapper);
    [IteratorStateMachineAttribute("Microsoft.Spark.Extensions.DotNet.Interactive.PackageResolver/<GetFiles>d__4")]
internal IEnumerable`1<string> GetFiles(string writePath);
    [IteratorStateMachineAttribute("Microsoft.Spark.Extensions.DotNet.Interactive.PackageResolver/<GetNewPackages>d__5")]
private IEnumerable`1<ResolvedNuGetPackage> GetNewPackages();
    private string GetPathRelativeToPackages(string path, DirectoryInfo directory);
}
internal class Microsoft.Spark.Extensions.DotNet.Interactive.ResolvedNuGetPackage : object {
    [CompilerGeneratedAttribute]
private ResolvedPackageReference <ResolvedPackage>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryInfo <PackageRootDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private FileInfo <NuGetFile>k__BackingField;
    public ResolvedPackageReference ResolvedPackage { get; public set; }
    public DirectoryInfo PackageRootDirectory { get; public set; }
    public FileInfo NuGetFile { get; public set; }
    [CompilerGeneratedAttribute]
public ResolvedPackageReference get_ResolvedPackage();
    [CompilerGeneratedAttribute]
public void set_ResolvedPackage(ResolvedPackageReference value);
    [CompilerGeneratedAttribute]
public DirectoryInfo get_PackageRootDirectory();
    [CompilerGeneratedAttribute]
public void set_PackageRootDirectory(DirectoryInfo value);
    [CompilerGeneratedAttribute]
public FileInfo get_NuGetFile();
    [CompilerGeneratedAttribute]
public void set_NuGetFile(FileInfo value);
}
internal class Microsoft.Spark.Extensions.DotNet.Interactive.SupportNugetWrapper : object {
    internal IEnumerable`1<ResolvedPackageReference> ResolvedPackageReferences { get; }
    internal virtual IEnumerable`1<ResolvedPackageReference> get_ResolvedPackageReferences();
}
