[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal class Razorvine.Pickle.ArrayReader : ValueType {
    private Byte[] input;
    private int position;
    public ArrayReader(Byte[] bytes);
    public sealed virtual byte ReadByte();
    public sealed virtual ReadOnlySpan`1<byte> ReadBytes(int bytesCount);
    public sealed virtual string ReadLine(bool includeLF);
    public sealed virtual ReadOnlySpan`1<byte> ReadLineBytes(bool includeLF);
    public sealed virtual void Skip(int bytesCount);
    private int GetLineEndIndex(bool includeLF);
}
internal class Razorvine.Pickle.ArrayWriter : ValueType {
    private Byte[] output;
    private int position;
    public int BytesWritten { get; }
    public Byte[] Buffer { get; }
    public ArrayWriter(Byte[] output);
    public sealed virtual void Dispose();
    public sealed virtual int get_BytesWritten();
    public sealed virtual Byte[] get_Buffer();
    public sealed virtual void WriteByte(byte value);
    public sealed virtual void WriteBytes(byte first, byte second);
    public sealed virtual void WriteBytes(byte first, byte second, byte third);
    public sealed virtual void Write(Byte[] buffer, int offset, int count);
    public sealed virtual void WriteInt32LittleEndian(int value);
    public sealed virtual void WriteInt64BigEndian(long value);
    public sealed virtual void WriteAsUtf8String(string str);
    public sealed virtual void Flush();
    private void EnsureSize(int requested);
}
internal interface Razorvine.Pickle.IInputReader {
    public abstract virtual byte ReadByte();
    public abstract virtual ReadOnlySpan`1<byte> ReadBytes(int bytesCount);
    public abstract virtual ReadOnlySpan`1<byte> ReadLineBytes(bool includeLF);
    public abstract virtual string ReadLine(bool includeLF);
    public abstract virtual void Skip(int bytesCount);
}
public class Razorvine.Pickle.InvalidOpcodeException : PickleException {
    public InvalidOpcodeException(string message);
}
public interface Razorvine.Pickle.IObjectConstructor {
    public abstract virtual object construct(Object[] args);
}
public interface Razorvine.Pickle.IObjectPickler {
    public abstract virtual void pickle(object o, Stream outs, Pickler currentPickler);
}
internal interface Razorvine.Pickle.IOutputWriter {
    public int BytesWritten { get; }
    public Byte[] Buffer { get; }
    public abstract virtual int get_BytesWritten();
    public abstract virtual Byte[] get_Buffer();
    public abstract virtual void WriteByte(byte value);
    public abstract virtual void WriteBytes(byte first, byte second);
    public abstract virtual void WriteBytes(byte first, byte second, byte third);
    public abstract virtual void Write(Byte[] buffer, int offset, int count);
    public abstract virtual void WriteInt32LittleEndian(int value);
    public abstract virtual void WriteInt64BigEndian(long value);
    public abstract virtual void WriteAsUtf8String(string str);
    public abstract virtual void Flush();
}
internal interface Razorvine.Pickle.IPicklerImplementation {
    public int BytesWritten { get; }
    public Byte[] Buffer { get; }
    public abstract virtual int get_BytesWritten();
    public abstract virtual Byte[] get_Buffer();
    public abstract virtual void dump(object o);
    public abstract virtual void save(object o);
}
public class Razorvine.Pickle.Objects.AnyClassConstructor : object {
    private Type _type;
    public AnyClassConstructor(Type type);
    public sealed virtual object construct(Object[] args);
}
public class Razorvine.Pickle.Objects.ArrayConstructor : object {
    public sealed virtual object construct(Object[] args);
    public object construct(char typecode, int machinecode, Byte[] data);
    protected Int32[] constructIntArrayFromInt32(int machinecode, Byte[] data);
    protected UInt32[] constructUIntArrayFromUInt32(int machinecode, Byte[] data);
    protected UInt64[] constructULongArrayFromUInt64(int machinecode, Byte[] data);
    protected Int64[] constructLongArrayFromInt64(int machinecode, Byte[] data);
    protected Double[] constructDoubleArray(int machinecode, Byte[] data);
    protected Single[] constructFloatArray(int machinecode, Byte[] data);
    protected UInt16[] constructUShortArrayFromUShort(int machinecode, Byte[] data);
    protected Int16[] constructShortArraySigned(int machinecode, Byte[] data);
    protected Char[] constructCharArrayUTF32(int machinecode, Byte[] data);
    protected Char[] constructCharArrayUTF16(int machinecode, Byte[] data);
}
public class Razorvine.Pickle.Objects.ByteArrayConstructor : object {
    public sealed virtual object construct(Object[] args);
}
public class Razorvine.Pickle.Objects.ClassDict : Dictionary`2<string, object> {
    [CompilerGeneratedAttribute]
private string <ClassName>k__BackingField;
    public string ClassName { get; }
    public ClassDict(string modulename, string classname);
    public void __setstate__(Hashtable values);
    [CompilerGeneratedAttribute]
public string get_ClassName();
}
public class Razorvine.Pickle.Objects.ClassDictConstructor : object {
    public string module;
    public string name;
    public ClassDictConstructor(string module, string name);
    public sealed virtual object construct(Object[] args);
}
public class Razorvine.Pickle.Objects.ComplexNumber : object {
    [CompilerGeneratedAttribute]
private double <Real>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Imaginary>k__BackingField;
    public double Real { get; }
    public double Imaginary { get; }
    public ComplexNumber(double r, double i);
    [CompilerGeneratedAttribute]
public double get_Real();
    [CompilerGeneratedAttribute]
public double get_Imaginary();
    public virtual string ToString();
    public double Magnitude();
    public static ComplexNumber op_Addition(ComplexNumber c1, ComplexNumber c2);
    public static ComplexNumber op_Subtraction(ComplexNumber c1, ComplexNumber c2);
    public static ComplexNumber op_Multiply(ComplexNumber c1, ComplexNumber c2);
    public static ComplexNumber op_Division(ComplexNumber c1, ComplexNumber c2);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(ComplexNumber lhs, ComplexNumber rhs);
    public static bool op_Inequality(ComplexNumber lhs, ComplexNumber rhs);
}
public class Razorvine.Pickle.Objects.DateTimeConstructor : object {
    private PythonType _pythontype;
    public DateTimeConstructor(PythonType pythontype);
    public sealed virtual object construct(Object[] args);
    private static TimeSpan CreateTimedelta(Object[] args);
    private static DateTime CreateDateTime(Object[] args);
    private static TimeSpan CreateTime(Object[] args);
    private static DateTime CreateDate(Object[] args);
}
public class Razorvine.Pickle.Objects.DecimalConstructor : object {
    public sealed virtual object construct(Object[] args);
}
public class Razorvine.Pickle.Objects.ExceptionConstructor : object {
    private string _pythonExceptionType;
    private Type _type;
    public ExceptionConstructor(Type type, string module, string name);
    public sealed virtual object construct(Object[] args);
}
public class Razorvine.Pickle.Objects.SetConstructor : object {
    public sealed virtual object construct(Object[] args);
}
public class Razorvine.Pickle.Objects.StringConstructor : object {
    public sealed virtual object construct(Object[] args);
}
public static class Razorvine.Pickle.Opcodes : object {
    public static byte MARK;
    public static byte STOP;
    public static byte POP;
    public static byte POP_MARK;
    public static byte DUP;
    public static byte FLOAT;
    public static byte INT;
    public static byte BININT;
    public static byte BININT1;
    public static byte LONG;
    public static byte BININT2;
    public static byte NONE;
    public static byte PERSID;
    public static byte BINPERSID;
    public static byte REDUCE;
    public static byte STRING;
    public static byte BINSTRING;
    public static byte SHORT_BINSTRING;
    public static byte UNICODE;
    public static byte BINUNICODE;
    public static byte APPEND;
    public static byte BUILD;
    public static byte GLOBAL;
    public static byte DICT;
    public static byte EMPTY_DICT;
    public static byte APPENDS;
    public static byte GET;
    public static byte BINGET;
    public static byte INST;
    public static byte LONG_BINGET;
    public static byte LIST;
    public static byte EMPTY_LIST;
    public static byte OBJ;
    public static byte PUT;
    public static byte BINPUT;
    public static byte LONG_BINPUT;
    public static byte SETITEM;
    public static byte TUPLE;
    public static byte EMPTY_TUPLE;
    public static byte SETITEMS;
    public static byte BINFLOAT;
    public static string TRUE;
    public static string FALSE;
    public static byte PROTO;
    public static byte NEWOBJ;
    public static byte EXT1;
    public static byte EXT2;
    public static byte EXT4;
    public static byte TUPLE1;
    public static byte TUPLE2;
    public static byte TUPLE3;
    public static byte NEWTRUE;
    public static byte NEWFALSE;
    public static byte LONG1;
    public static byte LONG4;
    public static byte BINBYTES;
    public static byte SHORT_BINBYTES;
    public static byte SHORT_BINUNICODE;
    public static byte BINUNICODE8;
    public static byte BINBYTES8;
    public static byte EMPTY_SET;
    public static byte ADDITEMS;
    public static byte FROZENSET;
    public static byte MEMOIZE;
    public static byte FRAME;
    public static byte NEWOBJ_EX;
    public static byte STACK_GLOBAL;
}
public class Razorvine.Pickle.PickleException : Exception {
    public PickleException(string message);
    public PickleException(string message, Exception innerException);
}
public class Razorvine.Pickle.Pickler : object {
    public static int HIGHEST_PROTOCOL;
    public static int MAX_RECURSE_DEPTH;
    public static int PROTOCOL;
    protected static IDictionary`2<Type, IObjectPickler> customPicklers;
    protected bool useMemo;
    private IPicklerImplementation _picklerImplementation;
    public Pickler(bool useMemo);
    private static Pickler();
    public sealed virtual void Dispose();
    public void close();
    public static void registerCustomPickler(Type clazz, IObjectPickler pickler);
    public Byte[] dumps(object o);
    public void dumps(object o, Byte[]& output, Int32& bytesWritten);
    public void dump(object o, Stream stream);
    public void save(object o);
    protected internal IObjectPickler getCustomPickler(Type t);
}
internal class Razorvine.Pickle.PicklerImplementation`1 : Stream {
    private static Byte[] datetimeDatetimeBytes;
    private static Byte[] datetimeTimedeltaBytes;
    private static Byte[] builtinSetBytes;
    private static Byte[] builtinBytearrayBytes;
    private static Byte[] arrayArrayBytes;
    private static Byte[] decimalDecimalBytes;
    private Pickler pickler;
    private T output;
    private Dictionary`2<object, int> memo;
    private int recurse;
    private bool useMemo { get; }
    public int BytesWritten { get; }
    public Byte[] Buffer { get; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    internal PicklerImplementation`1(T output, Pickler pickler, bool useMemo);
    private static PicklerImplementation`1();
    protected virtual void Dispose(bool disposing);
    private bool get_useMemo();
    public sealed virtual int get_BytesWritten();
    public sealed virtual Byte[] get_Buffer();
    public sealed virtual void dump(object o);
    public sealed virtual void save(object o);
    private void WriteMemo(TValue value);
    private bool LookupMemo(Type objectType, object obj);
    private bool dispatch(Type t, object o);
    private static bool hasPublicProperties(Type t);
    private void put_datetime(DateTime dt);
    private void put_timespan(TimeSpan ts);
    private void put_enumerable(IEnumerable list);
    private void put_map(IDictionary o);
    private void put_set(IEnumerable o);
    private void put_arrayOfObjects(Object[] array);
    private void put_arrayOfStrings(String[] array);
    private static void ThrowRecursiveArrayNotSupported();
    private void put_arrayOfPrimitives(Type t, object array);
    private void put_decimal(decimal d);
    private void put_null();
    private void put_string(string str);
    private void put_float(double d);
    private void put_byte(byte value);
    private void put_long(long v);
    private void put_ulong(ulong u);
    private void put_bool(bool b);
    private void put_objwithproperties(object o);
    private void put_serializable(Type t, object o);
    private void put_datacontract(Type t, object o, DataContractAttribute dca);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual void WriteByte(byte value);
    public virtual void Flush();
    [CompilerGeneratedAttribute]
private void <WriteMemo>g__WriteMemoPrivate|20_0(object obj);
}
public static class Razorvine.Pickle.PickleUtils : object {
    public static string readline(Stream input, bool includeLF);
    internal static int readline_into(Stream input, Byte[]& buffer, bool includeLF);
    internal static bool IsWhitespace(ReadOnlySpan`1<byte> bytes);
    public static byte readbyte(Stream input);
    private static void ThrowPrematureEndOfInputStream();
    public static Byte[] readbytes(Stream input, int n);
    public static Byte[] readbytes(Stream input, long n);
    public static void readbytes_into(Stream input, Byte[] buffer, int offset, int length);
    internal static void readbytes_into(Stream input, Byte[] buffer, int offset, long length);
    public static int bytes_to_integer(Byte[] bytes);
    public static int bytes_to_integer(Byte[] bytes, int offset, int size);
    public static long bytes_to_long(Byte[] bytes, int offset);
    public static UInt32 bytes_to_uint(Byte[] bytes, int offset);
    public static Byte[] integer_to_bytes(int i);
    public static Byte[] double_to_bytes_bigendian(double d);
    public static double bytes_bigendian_to_double(Byte[] bytes, int offset);
    public static float bytes_bigendian_to_float(Byte[] bytes, int offset);
    public static long decode_long(ReadOnlySpan`1<byte> data);
    public static string rawStringFromBytes(Byte[] data);
    internal static string rawStringFromBytes(ReadOnlySpan`1<byte> data);
    internal static int CheckedCast(long length);
    private static void ThrowPickleTooLargeForInt32Overflow(long length);
    internal static string GetStringFromUtf8(ReadOnlySpan`1& utf8);
    public static Byte[] str2bytes(string str);
    public static string decode_escaped(string str);
    public static string decode_unicode_escaped(string str);
}
public static class Razorvine.Pickle.PrettyPrint : object {
    public static string printToString(object o);
    public static void print(object o);
    public static void print(object o, TextWriter w, bool typeheader);
    public static void writeEnumerable(object o, TextWriter w);
}
public class Razorvine.Pickle.PythonException : Exception {
    [CompilerGeneratedAttribute]
private string <_pyroTraceback>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PythonExceptionType>k__BackingField;
    public string _pyroTraceback { get; public set; }
    public string PythonExceptionType { get; public set; }
    public PythonException(string message);
    public PythonException(string encoding, Byte[] data, int i1, int i2, string message);
    [CompilerGeneratedAttribute]
public string get__pyroTraceback();
    [CompilerGeneratedAttribute]
public void set__pyroTraceback(string value);
    [CompilerGeneratedAttribute]
public string get_PythonExceptionType();
    [CompilerGeneratedAttribute]
public void set_PythonExceptionType(string value);
    public void __setstate__(Hashtable values);
}
internal class Razorvine.Pickle.ReadOnlyMemoryReader : ValueType {
    private ReadOnlyMemory`1<byte> input;
    private int position;
    public ReadOnlyMemoryReader(ReadOnlyMemory`1<byte> bytes);
    public sealed virtual byte ReadByte();
    public sealed virtual ReadOnlySpan`1<byte> ReadBytes(int bytesCount);
    public sealed virtual string ReadLine(bool includeLF);
    public sealed virtual ReadOnlySpan`1<byte> ReadLineBytes(bool includeLF);
    public sealed virtual void Skip(int bytesCount);
    private int GetLineEndIndex(bool includeLF);
}
internal class Razorvine.Pickle.StreamReader : ValueType {
    private Stream input;
    private Byte[] buffer;
    public StreamReader(Stream input);
    public sealed virtual byte ReadByte();
    public sealed virtual ReadOnlySpan`1<byte> ReadBytes(int bytesCount);
    public sealed virtual string ReadLine(bool includeLF);
    public sealed virtual ReadOnlySpan`1<byte> ReadLineBytes(bool includeLF);
    public sealed virtual void Skip(int bytesCount);
    private void EnsureByteBufferLength(int bytesCount);
}
internal class Razorvine.Pickle.StreamWriter : ValueType {
    private Stream output;
    private Byte[] byteBuffer;
    public int BytesWritten { get; }
    public Byte[] Buffer { get; }
    public StreamWriter(Stream output);
    public sealed virtual void Dispose();
    public sealed virtual int get_BytesWritten();
    public sealed virtual Byte[] get_Buffer();
    public sealed virtual void WriteByte(byte value);
    public sealed virtual void WriteBytes(byte first, byte second);
    public sealed virtual void WriteBytes(byte first, byte second, byte third);
    public sealed virtual void Write(Byte[] buffer, int offset, int count);
    public sealed virtual void WriteInt32LittleEndian(int value);
    public sealed virtual void WriteInt64BigEndian(long value);
    public sealed virtual void WriteAsUtf8String(string str);
    public sealed virtual void Flush();
}
public class Razorvine.Pickle.Unpickler : object {
    public static int HIGHEST_PROTOCOL;
    internal IDictionary`2<int, object> memo;
    private UnpickleStack stack;
    protected internal static IDictionary`2<string, IObjectConstructor> objectConstructors;
    private static Unpickler();
    private static Dictionary`2<string, IObjectConstructor> CreateObjectConstructorsDictionary();
    public static void registerConstructor(string module, string classname, IObjectConstructor constructor);
    public object load(Stream stream);
    public object loads(Byte[] pickledata);
    public object loads(Byte[] pickledata, int stackCapacity);
    public object loads(ReadOnlyMemory`1<byte> pickledata, int stackCapacity);
    public void close();
    protected internal virtual object persistentLoad(string pid);
    public sealed virtual void Dispose();
}
internal class Razorvine.Pickle.UnpicklerImplementation`1 : object {
    private static String[] quoteStrings;
    private static object boxedFalse;
    private static object boxedTrue;
    private UnpickleStack stack;
    private Unpickler unpickler;
    private IDictionary`2<int, object> memo;
    private T input;
    private Dictionary`2<StringPair<T>, string> concatenatedModuleNames;
    public UnpicklerImplementation`1(T input, IDictionary`2<int, object> memo, UnpickleStack stack, Unpickler unpickler);
    private static UnpicklerImplementation`1();
    public object Load();
    private void Dispatch(byte key);
    private void load_build();
    private void load_proto();
    private void load_none();
    private void load_false();
    private void load_true();
    private void load_int();
    private void load_binint();
    private void load_binint1();
    private void load_binint2();
    private void load_long();
    private void load_long1();
    private void load_long4();
    private void load_float();
    private void load_binfloat();
    private void load_string();
    private void load_binstring();
    private void load_binbytes();
    private void load_binbytes8();
    private void load_unicode();
    private void load_binunicode();
    private void load_binunicode8();
    private void load_short_binunicode();
    private void load_short_binstring();
    private void load_short_binbytes();
    private void load_tuple();
    private void load_empty_tuple();
    private void load_tuple1();
    private void load_tuple2();
    private void load_tuple3();
    private void load_empty_list();
    private void load_empty_dictionary();
    private void load_empty_set();
    private void load_list();
    private void load_dict();
    private void load_frozenset();
    private void load_additems();
    private void load_global();
    private void load_stack_global();
    private void load_global_sub(string module, string name);
    private void load_pop();
    private void load_pop_mark();
    private void load_dup();
    private void load_get();
    private void load_binget();
    private void load_long_binget();
    private void load_put();
    private void load_binput();
    private void load_memoize();
    private void load_long_binput();
    private void load_append();
    private void load_appends();
    private void load_setitem();
    private void load_setitems();
    private void load_mark();
    private void load_reduce();
    private void load_newobj();
    private void load_newobj_ex();
    private void load_frame();
    private void load_persid();
    private void load_binpersid();
    private void load_obj();
    private void load_inst();
    private string GetModuleNameKey(string module, string name);
}
public class Razorvine.Pickle.UnpickleStack : object {
    public object MARKER;
    internal static int DefaultCapacity;
    private Object[] _stack;
    private int _count;
    public UnpickleStack(int capacity);
    public void add(object o);
    public void add_mark();
    public object pop();
    public ArrayList pop_all_since_marker();
    internal Object[] pop_all_since_marker_as_array();
    public object peek();
    public void trim();
    public int size();
    public void clear();
}
public static class Razorvine.Pyro.Config : object {
    public static string MSG_TRACE_DIR;
    public static int NS_PORT;
    public static int NS_BCPORT;
    public static bool SERPENT_INDENT;
    public static bool SERPENT_SET_LITERALS;
    public static SerializerType SERIALIZER;
    public static bool METADATA;
    public static int PROTOCOL_VERSION;
    public static string PYROLITE_VERSION;
    public static string DAEMON_NAME;
    private static Config();
}
public class Razorvine.Pyro.DummyPyroSerializer : object {
    public void __setstate__(Hashtable values);
}
public class Razorvine.Pyro.FlameBuiltin : DynamicObject {
    private PyroProxy _flameserver;
    private string _builtin;
    public Byte[] pyroHmacKey { get; public set; }
    public Byte[] get_pyroHmacKey();
    public void set_pyroHmacKey(Byte[] value);
    public void __setstate__(Hashtable values);
    public object call(Object[] arguments);
    public virtual bool TryInvoke(InvokeBinder binder, Object[] args, Object& result);
    public void close();
    public sealed virtual void Dispose();
}
public class Razorvine.Pyro.FlameModule : DynamicObject {
    private PyroProxy _flameserver;
    private string _module;
    public Byte[] pyroHmacKey { get; public set; }
    public Byte[] get_pyroHmacKey();
    public void set_pyroHmacKey(Byte[] value);
    public void __setstate__(Hashtable values);
    public virtual bool TryInvokeMember(InvokeMemberBinder binder, Object[] args, Object& result);
    public object call(string attribute, Object[] arguments);
    public void close();
    public sealed virtual void Dispose();
}
public class Razorvine.Pyro.FlameRemoteConsole : object {
    private PyroProxy _remoteconsole;
    public void __setstate__(Hashtable values);
    public void interact();
    public void close();
    public sealed virtual void Dispose();
}
internal static class Razorvine.Pyro.IOUtil : object {
    public static void send(Stream outs, Byte[] message);
    public static Byte[] recv(Stream ins, int size);
}
public class Razorvine.Pyro.Message : object {
    private static int CHECKSUM_MAGIC;
    public static int HEADER_SIZE;
    public static ushort MSG_CONNECT;
    public static ushort MSG_CONNECTOK;
    public static ushort MSG_CONNECTFAIL;
    public static ushort MSG_INVOKE;
    public static ushort MSG_RESULT;
    public static ushort MSG_PING;
    public static ushort FLAGS_EXCEPTION;
    public static ushort FLAGS_COMPRESSED;
    public static ushort FLAGS_ONEWAY;
    public static ushort FLAGS_BATCH;
    public static ushort FLAGS_META_ON_CONNECT;
    public static ushort FLAGS_ITEMSTREAMRESULT;
    public static ushort SERIALIZER_SERPENT;
    public static ushort SERIALIZER_JSON;
    public static ushort SERIALIZER_MARSHAL;
    public static ushort SERIALIZER_PICKLE;
    public ushort type;
    public ushort flags;
    public Byte[] data;
    public int data_size;
    public ushort annotations_size;
    public ushort serializer_id;
    public ushort seq;
    public IDictionary`2<string, Byte[]> annotations;
    public Message(ushort msgType, ushort serializer_id, ushort flags, ushort seq);
    public Message(ushort msgType, Byte[] databytes, ushort serializer_id, ushort flags, ushort seq, IDictionary`2<string, Byte[]> annotations, Byte[] hmac);
    public Byte[] hmac(Byte[] key);
    public Byte[] to_bytes();
    public Byte[] get_header_bytes();
    public Byte[] get_annotations_bytes();
    public static Message from_header(Byte[] header);
    public static Message recv(Stream connection, UInt16[] requiredMsgTypes, Byte[] hmac);
    public static void TraceMessageRecv(int sequenceNr, Byte[] headerdata, Byte[] annotations, Byte[] data);
    public static void TraceMessageSend(int sequenceNr, Byte[] headerdata, Byte[] annotations, Byte[] data);
}
public class Razorvine.Pyro.NameServerProxy : PyroProxy {
    public NameServerProxy(PyroURI uri);
    public NameServerProxy(string hostname, int port, string objectid);
    public void ping();
    public PyroURI lookup(string name);
    public Tuple`2<PyroURI, ISet`1<string>> lookup(string name, bool return_metadata);
    public int remove(string name, string prefix, string regex);
    public void register(string name, PyroURI uri, bool safe);
    public void register(string name, PyroURI uri, bool safe, IEnumerable`1<string> metadata);
    public void set_metadata(string name, ISet`1<string> metadata);
    public IDictionary`2<string, string> list(string prefix, string regex);
    public IDictionary`2<string, string> list(string prefix, string regex, IEnumerable`1<string> metadata_all, IEnumerable`1<string> metadata_any);
    public IDictionary`2<string, Tuple`2<string, ISet`1<string>>> list_with_meta(string prefix, string regex);
    public IDictionary`2<string, Tuple`2<string, ISet`1<string>>> list_with_meta(string prefix, string regex, IEnumerable`1<string> metadata_all, IEnumerable`1<string> metadata_any);
    public static NameServerProxy locateNS(string host, int port, Byte[] hmacKey);
}
public class Razorvine.Pyro.PickleSerializer : PyroSerializer {
    public ushort serializer_id { get; }
    private static PickleSerializer();
    public virtual ushort get_serializer_id();
    public virtual Byte[] serializeCall(string objectId, string method, Object[] vargs, IDictionary`2<string, object> kwargs);
    public virtual Byte[] serializeData(object obj);
    public virtual object deserializeData(Byte[] data);
}
public class Razorvine.Pyro.ProxyClassConstructor : object {
    public sealed virtual object construct(Object[] args);
}
public class Razorvine.Pyro.PyroException : Exception {
    [CompilerGeneratedAttribute]
private string <_pyroTraceback>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PythonExceptionType>k__BackingField;
    public string _pyroTraceback { get; public set; }
    public string PythonExceptionType { get; public set; }
    public PyroException(string message);
    public PyroException(string message, Exception innerException);
    protected PyroException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public string get__pyroTraceback();
    [CompilerGeneratedAttribute]
public void set__pyroTraceback(string value);
    [CompilerGeneratedAttribute]
public string get_PythonExceptionType();
    [CompilerGeneratedAttribute]
public void set_PythonExceptionType(string value);
    public void __setstate__(Hashtable values);
}
public class Razorvine.Pyro.PyroExceptionPickler : object {
    public sealed virtual void pickle(object o, Stream outs, Pickler currentPickler);
    public static IDictionary ToSerpentDict(object obj);
    public static object FromSerpentDict(IDictionary dict);
}
public class Razorvine.Pyro.PyroProxy : DynamicObject {
    [CompilerGeneratedAttribute]
private string <hostname>k__BackingField;
    [CompilerGeneratedAttribute]
private int <port>k__BackingField;
    [CompilerGeneratedAttribute]
private string <objectid>k__BackingField;
    public Byte[] pyroHmacKey;
    public Nullable`1<Guid> correlation_id;
    public object pyroHandshake;
    private ushort sequenceNr;
    private TcpClient sock;
    private NetworkStream sock_stream;
    public ISet`1<string> pyroMethods;
    public ISet`1<string> pyroAttrs;
    public ISet`1<string> pyroOneway;
    public string hostname { get; private set; }
    public int port { get; private set; }
    public string objectid { get; private set; }
    public PyroProxy(PyroURI uri);
    public PyroProxy(string hostname, int port, string objectid);
    [CompilerGeneratedAttribute]
public string get_hostname();
    [CompilerGeneratedAttribute]
private void set_hostname(string value);
    [CompilerGeneratedAttribute]
public int get_port();
    [CompilerGeneratedAttribute]
private void set_port(int value);
    [CompilerGeneratedAttribute]
public string get_objectid();
    [CompilerGeneratedAttribute]
private void set_objectid(string value);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected void connect();
    protected void GetMetadata(string objectId);
    private void _processMetadata(IDictionary`2<object, object> result);
    protected static HashSet`1<string> GetStringSet(object strings);
    public virtual bool TryInvokeMember(InvokeMemberBinder binder, Object[] args, Object& result);
    public virtual bool TryGetMember(GetMemberBinder binder, Object& result);
    public virtual bool TrySetMember(SetMemberBinder binder, object value);
    public object call(string method, Object[] arguments);
    [ObsoleteAttribute("Pyro now figures out automatically what methods are oneway by getting metadata from the server. Just use call().")]
public void call_oneway(string method, Object[] arguments);
    public object getattr(string attr);
    public void setattr(string attr, object value);
    public virtual IDictionary`2<string, Byte[]> annotations();
    private object internal_call(string method, string actual_objectId, ushort flags, bool checkMethodName, Object[] parameters);
    private static void _decompressMessageData(Message msg);
    public void close();
    protected void _handshake();
    public virtual void validateHandshake(object handshake_response);
    public virtual void responseAnnotations(IDictionary`2<string, Byte[]> annotations, ushort msgtype);
    public void __setstate__(Object[] args);
}
public class Razorvine.Pyro.PyroProxyPickler : object {
    public sealed virtual void pickle(object o, Stream outs, Pickler currentPickler);
    public static IDictionary ToSerpentDict(object obj);
    public static object FromSerpentDict(IDictionary dict);
}
public abstract class Razorvine.Pyro.PyroSerializer : object {
    protected static IDictionary`2<SerializerType, PyroSerializer> AvailableSerializers;
    protected static PickleSerializer pickleSerializer;
    protected static SerpentSerializer serpentSerializer;
    public ushort serializer_id { get; }
    private static PyroSerializer();
    public abstract virtual ushort get_serializer_id();
    public abstract virtual Byte[] serializeCall(string objectId, string method, Object[] vargs, IDictionary`2<string, object> kwargs);
    public abstract virtual Byte[] serializeData(object obj);
    public abstract virtual object deserializeData(Byte[] data);
    public static PyroSerializer GetFor(SerializerType type);
    public static PyroSerializer GetFor(int serializer_id);
}
public class Razorvine.Pyro.PyroURI : object {
    [CompilerGeneratedAttribute]
private string <protocol>k__BackingField;
    [CompilerGeneratedAttribute]
private string <objectid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <host>k__BackingField;
    [CompilerGeneratedAttribute]
private int <port>k__BackingField;
    public string protocol { get; private set; }
    public string objectid { get; private set; }
    public string host { get; private set; }
    public int port { get; private set; }
    public PyroURI(PyroURI other);
    public PyroURI(string uri);
    public PyroURI(string objectid, string host, int port);
    [CompilerGeneratedAttribute]
public string get_protocol();
    [CompilerGeneratedAttribute]
private void set_protocol(string value);
    [CompilerGeneratedAttribute]
public string get_objectid();
    [CompilerGeneratedAttribute]
private void set_objectid(string value);
    [CompilerGeneratedAttribute]
public string get_host();
    [CompilerGeneratedAttribute]
private void set_host(string value);
    [CompilerGeneratedAttribute]
public int get_port();
    [CompilerGeneratedAttribute]
private void set_port(int value);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(PyroURI lhs, PyroURI rhs);
    public static bool op_Inequality(PyroURI lhs, PyroURI rhs);
    public void __setstate__(Object[] args);
}
public class Razorvine.Pyro.PyroUriPickler : object {
    public sealed virtual void pickle(object o, Stream outs, Pickler currentPickler);
    public static IDictionary ToSerpentDict(object obj);
    public static object FromSerpentDict(IDictionary dict);
}
public class Razorvine.Pyro.SerpentSerializer : PyroSerializer {
    private static MethodInfo serializeMethod;
    private static MethodInfo parseMethod;
    private static MethodInfo astGetDataMethod;
    private static MethodInfo tobytesMethod;
    private static Type serpentSerializerType;
    private static Type serpentParserType;
    public ushort serializer_id { get; }
    private static SerpentSerializer();
    public virtual ushort get_serializer_id();
    public object DictToInstance(IDictionary dict);
    public virtual Byte[] serializeData(object obj);
    public virtual Byte[] serializeCall(string objectId, string method, Object[] vargs, IDictionary`2<string, object> kwargs);
    public virtual object deserializeData(Byte[] data);
    public static Byte[] ToBytes(object obj);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
