[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal class Microsoft.Extensions.Logging.EventLogFiltersConfigureOptions : object {
    private LoggingEventSource _eventSource;
    public EventLogFiltersConfigureOptions(LoggingEventSource eventSource);
    public sealed virtual void Configure(LoggerFilterOptions options);
}
internal class Microsoft.Extensions.Logging.EventLogFiltersConfigureOptionsChangeSource : object {
    private LoggingEventSource _eventSource;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public EventLogFiltersConfigureOptionsChangeSource(LoggingEventSource eventSource);
    public sealed virtual IChangeToken GetChangeToken();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
}
internal class Microsoft.Extensions.Logging.EventSource.EventSourceLogger : object {
    private static int _activityIds;
    private LoggingEventSource _eventSource;
    private int _factoryID;
    [CompilerGeneratedAttribute]
private string <CategoryName>k__BackingField;
    [CompilerGeneratedAttribute]
private LogLevel <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private EventSourceLogger <Next>k__BackingField;
    public string CategoryName { get; }
    public LogLevel Level { get; public set; }
    public EventSourceLogger Next { get; }
    public EventSourceLogger(string categoryName, int factoryID, LoggingEventSource eventSource, EventSourceLogger next);
    [CompilerGeneratedAttribute]
public string get_CategoryName();
    [CompilerGeneratedAttribute]
public LogLevel get_Level();
    [CompilerGeneratedAttribute]
public void set_Level(LogLevel value);
    [CompilerGeneratedAttribute]
public EventSourceLogger get_Next();
    public sealed virtual bool IsEnabled(LogLevel logLevel);
    public sealed virtual void Log(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
    public sealed virtual IDisposable BeginScope(TState state);
    private ExceptionInfo GetExceptionInfo(Exception exception);
    private IReadOnlyList`1<KeyValuePair`2<string, string>> GetProperties(object state);
    private string ToJson(IReadOnlyList`1<KeyValuePair`2<string, string>> keyValues);
}
[ProviderAliasAttribute("EventSource")]
public class Microsoft.Extensions.Logging.EventSource.EventSourceLoggerProvider : object {
    private static int _globalFactoryID;
    private int _factoryID;
    private EventSourceLogger _loggers;
    private LoggingEventSource _eventSource;
    public EventSourceLoggerProvider(LoggingEventSource eventSource);
    public sealed virtual ILogger CreateLogger(string categoryName);
    public sealed virtual void Dispose();
}
[EventDataAttribute]
internal class Microsoft.Extensions.Logging.EventSource.ExceptionInfo : object {
    [CompilerGeneratedAttribute]
private static ExceptionInfo <Empty>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private int <HResult>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VerboseMessage>k__BackingField;
    public static ExceptionInfo Empty { get; }
    public string TypeName { get; }
    public string Message { get; }
    public int HResult { get; }
    public string VerboseMessage { get; }
    public ExceptionInfo(Exception exception);
    private static ExceptionInfo();
    [CompilerGeneratedAttribute]
public static ExceptionInfo get_Empty();
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public int get_HResult();
    [CompilerGeneratedAttribute]
public string get_VerboseMessage();
}
[EventSourceAttribute]
public class Microsoft.Extensions.Logging.EventSource.LoggingEventSource : EventSource {
    internal static LoggingEventSource Instance;
    private LoggerFilterRule[] _filterSpec;
    private CancellationTokenSource _cancellationTokenSource;
    private static string UseAppFilters;
    private static string WriteEventCoreSuppressionJustification;
    private static string WriteEventDynamicDependencySuppressionJustification;
    private static LoggingEventSource();
    [EventAttribute("1")]
[UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2026:RequiresUnreferencedCode")]
internal void FormattedMessage(LogLevel Level, int FactoryID, string LoggerName, int EventId, string EventName, string FormattedMessage);
    [EventAttribute("2")]
[DynamicDependencyAttribute("512", "System.Collections.Generic.KeyValuePair`2<System.String,System.String>")]
[UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2026:RequiresUnreferencedCode")]
internal void Message(LogLevel Level, int FactoryID, string LoggerName, int EventId, string EventName, ExceptionInfo Exception, IEnumerable`1<KeyValuePair`2<string, string>> Arguments);
    [EventAttribute("3")]
[DynamicDependencyAttribute("512", "System.Collections.Generic.KeyValuePair`2<System.String,System.String>")]
[UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2026:RequiresUnreferencedCode")]
internal void ActivityStart(int ID, int FactoryID, string LoggerName, IEnumerable`1<KeyValuePair`2<string, string>> Arguments);
    [EventAttribute("4")]
[UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2026:RequiresUnreferencedCode")]
internal void ActivityStop(int ID, int FactoryID, string LoggerName);
    [EventAttribute("5")]
[UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2026:RequiresUnreferencedCode")]
internal void MessageJson(LogLevel Level, int FactoryID, string LoggerName, int EventId, string EventName, string ExceptionJson, string ArgumentsJson, string FormattedMessage);
    [EventAttribute("6")]
[UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2026:RequiresUnreferencedCode")]
internal void ActivityJsonStart(int ID, int FactoryID, string LoggerName, string ArgumentsJson);
    [EventAttribute("7")]
[UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2026:RequiresUnreferencedCode")]
internal void ActivityJsonStop(int ID, int FactoryID, string LoggerName);
    protected virtual void OnEventCommand(EventCommandEventArgs command);
    [NonEventAttribute]
private void SetFilterSpec(string filterSpec);
    [NonEventAttribute]
internal IChangeToken GetFilterChangeToken();
    [NonEventAttribute]
private void FireChangeToken();
    [NonEventAttribute]
private static LoggerFilterRule[] ParseFilterSpec(string filterSpec, LogLevel defaultLevel);
    [NonEventAttribute]
private static bool TryParseLevel(LogLevel defaultLevel, string levelString, LogLevel& ret);
    [NonEventAttribute]
private LogLevel GetDefaultLevel();
    [NonEventAttribute]
internal LoggerFilterRule[] GetFilterRules();
    [NonEventAttribute]
private static void SetEventData(EventData& eventData, T& value, Void* pinnedString);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.Logging.EventSourceLoggerFactoryExtensions : object {
    [ExtensionAttribute]
public static ILoggingBuilder AddEventSourceLogger(ILoggingBuilder builder);
}
internal class Microsoft.Extensions.Logging.NullExternalScopeProvider : object {
    [CompilerGeneratedAttribute]
private static IExternalScopeProvider <Instance>k__BackingField;
    [NullableAttribute("1")]
public static IExternalScopeProvider Instance { get; }
    private static NullExternalScopeProvider();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public static IExternalScopeProvider get_Instance();
    private sealed virtual override void Microsoft.Extensions.Logging.IExternalScopeProvider.ForEachScope(Action`2<object, TState> callback, TState state);
    private sealed virtual override IDisposable Microsoft.Extensions.Logging.IExternalScopeProvider.Push(object state);
}
internal class Microsoft.Extensions.Logging.NullScope : object {
    [CompilerGeneratedAttribute]
private static NullScope <Instance>k__BackingField;
    public static NullScope Instance { get; }
    private static NullScope();
    [CompilerGeneratedAttribute]
public static NullScope get_Instance();
    public sealed virtual void Dispose();
}
[FlagsAttribute]
internal enum System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes : Enum {
    public int value__;
    public static DynamicallyAccessedMemberTypes None;
    public static DynamicallyAccessedMemberTypes PublicParameterlessConstructor;
    public static DynamicallyAccessedMemberTypes PublicConstructors;
    public static DynamicallyAccessedMemberTypes NonPublicConstructors;
    public static DynamicallyAccessedMemberTypes PublicMethods;
    public static DynamicallyAccessedMemberTypes NonPublicMethods;
    public static DynamicallyAccessedMemberTypes PublicFields;
    public static DynamicallyAccessedMemberTypes NonPublicFields;
    public static DynamicallyAccessedMemberTypes PublicNestedTypes;
    public static DynamicallyAccessedMemberTypes NonPublicNestedTypes;
    public static DynamicallyAccessedMemberTypes PublicProperties;
    public static DynamicallyAccessedMemberTypes NonPublicProperties;
    public static DynamicallyAccessedMemberTypes PublicEvents;
    public static DynamicallyAccessedMemberTypes NonPublicEvents;
    public static DynamicallyAccessedMemberTypes Interfaces;
    public static DynamicallyAccessedMemberTypes All;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("352")]
internal class System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <MemberSignature>k__BackingField;
    [CompilerGeneratedAttribute]
private DynamicallyAccessedMemberTypes <MemberTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Condition>k__BackingField;
    public string MemberSignature { get; }
    public DynamicallyAccessedMemberTypes MemberTypes { get; }
    public Type Type { get; }
    public string TypeName { get; }
    public string AssemblyName { get; }
    public string Condition { get; public set; }
    [NullableContextAttribute("1")]
public DynamicDependencyAttribute(string memberSignature);
    [NullableContextAttribute("1")]
public DynamicDependencyAttribute(string memberSignature, Type type);
    [NullableContextAttribute("1")]
public DynamicDependencyAttribute(string memberSignature, string typeName, string assemblyName);
    [NullableContextAttribute("1")]
public DynamicDependencyAttribute(DynamicallyAccessedMemberTypes memberTypes, Type type);
    [NullableContextAttribute("1")]
public DynamicDependencyAttribute(DynamicallyAccessedMemberTypes memberTypes, string typeName, string assemblyName);
    [CompilerGeneratedAttribute]
public string get_MemberSignature();
    [CompilerGeneratedAttribute]
public DynamicallyAccessedMemberTypes get_MemberTypes();
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
public string get_AssemblyName();
    [CompilerGeneratedAttribute]
public string get_Condition();
    [CompilerGeneratedAttribute]
public void set_Condition(string value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("32767")]
internal class System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Category>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CheckId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MessageId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Justification>k__BackingField;
    [NullableAttribute("1")]
public string Category { get; }
    [NullableAttribute("1")]
public string CheckId { get; }
    public string Scope { get; public set; }
    public string Target { get; public set; }
    public string MessageId { get; public set; }
    public string Justification { get; public set; }
    [NullableContextAttribute("1")]
public UnconditionalSuppressMessageAttribute(string category, string checkId);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Category();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_CheckId();
    [CompilerGeneratedAttribute]
public string get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(string value);
    [CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(string value);
    [CompilerGeneratedAttribute]
public string get_MessageId();
    [CompilerGeneratedAttribute]
public void set_MessageId(string value);
    [CompilerGeneratedAttribute]
public string get_Justification();
    [CompilerGeneratedAttribute]
public void set_Justification(string value);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
